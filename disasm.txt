
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b0 fb 00 00       	call   c000fbd0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 89 02 00       	call   c00289d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 62 96 02 c0       	mov    ebx,0xc0029662
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 70 96 02 c0    	cmp    ebx,0xc0029670
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 df 02 c0       	mov    eax,0xc002df38
c0000049:	3d 38 df 02 c0       	cmp    eax,0xc002df38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 df 02 c0       	push   0xc002df38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 df 02 c0       	mov    eax,0xc002df38
c0000075:	2d 38 df 02 c0       	sub    eax,0xc002df38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 df 02 c0       	push   0xc002df38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e568,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 78 96 02 c0       	mov    ebx,0xc0029678
c00000bb:	81 eb 74 96 02 c0    	sub    ebx,0xc0029674
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 74 96 02 c0       	mov    esi,0xc0029674
c00000ca:	a1 6c e5 02 c0       	mov    eax,ds:0xc002e56c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c e5 02 c0       	mov    eax,ds:0xc002e56c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 df 02 c0       	push   0xc002df38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e568,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 e5 02 c0       	push   0xc002e570
c000012c:	68 38 df 02 c0       	push   0xc002df38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 17 d7 01 00       	call   c001daba <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 e6 27 01 00       	call   c0012ba1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 f5 d6 01 00       	call   c001daba <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 43 db 01 00       	call   c001df27 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 2b e1 01 00       	call   c001e518 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 e9 02 c0 	lgdtd  ds:0xc002e9b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 d8 44 01 00       	call   c0014ab9 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 88 e5 02 c0       	mov    ds:0xc002e588,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 80 96 02 c0 02 	test   BYTE PTR [edx-0x3ffd6980],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 80 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6980],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 80 96 02 c0 08 	test   BYTE PTR [edx-0x3ffd6980],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 80 96 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6980],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 80 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6980],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d a0 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5a0
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d a0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a0,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 a4 e5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1a5c]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 a4 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a5c],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d a0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a0,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 cc e5 02 c0    	cmp    DWORD PTR ds:0xc002e5cc,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d dc e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5dc
c0000e68:	c7 42 0c d4 e5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e5d4
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 dc e5 02 c0    	mov    DWORD PTR ds:0xc002e5dc,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 a0 e5 02 c0 02 	test   BYTE PTR ds:0xc002e5a0,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d a0 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e5a0
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 a4 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a5c]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 a4 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a5c],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 d4 e5 02 c0 	lea    edx,[eax*8-0x3ffd1a2c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d e0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e0
c00011ea:	81 fb d4 e5 02 c0    	cmp    ebx,0xc002e5d4
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d d4 e5 02 c0       	cmp    eax,0xc002e5d4
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d d0 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5d0,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 dc e5 02 c0       	mov    ds:0xc002e5dc,eax
c0001226:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c000122b:	a3 d0 e5 02 c0       	mov    ds:0xc002e5d0,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 d4 e5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e5d4
c0001239:	c7 40 0c d4 e5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e5d4
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 d4 e5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e5d4
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 98 e5 02 c0 	lea    ebp,[edx*4-0x3ffd1a68]
c000128a:	8b 14 95 a0 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1a60]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 a0 e5 02 c0 	lea    ecx,[edx*4-0x3ffd1a60]
c00012a5:	8b 14 95 a0 e5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1a60]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd d4 e8 02 c0 	or     DWORD PTR [edi*4-0x3ffd172c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 d4 e5 02 c0 	lea    eax,[eax*8-0x3ffd1a2c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d dc e5 02 c0    	mov    DWORD PTR ds:0xc002e5dc,ecx
c000135f:	89 0d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,ecx
c0001365:	c7 41 08 d4 e5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e5d4
c000136c:	c7 41 0c d4 e5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e5d4
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd cc e5 02 c0 	lea    edx,[ecx*8-0x3ffd1a34]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d d4 e8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd172c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d d4 e8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd172c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 cc e5 02 c0 	lea    edx,[eax*4-0x3ffd1a34]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d d4 e8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd172c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d dc e5 02 c0    	mov    DWORD PTR ds:0xc002e5dc,edi
c0001432:	89 3d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,edi
c0001438:	c7 47 08 d4 e5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e5d4
c000143f:	c7 47 0c d4 e5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e5d4
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d d0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d0,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba a0 e5 02 c0       	mov    edx,0xc002e5a0
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d a0 e5 02 c0 00 	cmp    DWORD PTR ds:0xc002e5a0,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d f4 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e8f4
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 f4 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8f4,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d f4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8f4,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 cc e5 02 c0    	cmp    DWORD PTR ds:0xc002e5cc,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d a0 e5 02 c0 00 	cmp    DWORD PTR ds:0xc002e5a0,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 fc e8 02 c0    	push   DWORD PTR ds:0xc002e8fc
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d a0 e5 02 c0 00 	cmp    DWORD PTR ds:0xc002e5a0,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 fc e8 02 c0       	mov    eax,ds:0xc002e8fc
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d cc e5 02 c0 00 	cmp    DWORD PTR ds:0xc002e5cc,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 a4 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a5c]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 d4 e5 02 c0       	mov    eax,0xc002e5d4
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d cc e8 02 c0       	cmp    eax,0xc002e8cc
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 08 e9 02 c0       	mov    eax,ds:0xc002e908
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 f0 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8f0
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 04 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e904
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 14 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e914
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 84 97 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd687c]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 a0 e5 02 c0       	mov    ds:0xc002e5a0,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d e4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8e4,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d e8 e8 02 c0    	mov    DWORD PTR ds:0xc002e8e8,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d ec e8 02 c0    	mov    DWORD PTR ds:0xc002e8ec,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 f4 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8f4,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 80 20 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdf80]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 36 f4 01 00       	jmp    c002106a <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 80 20 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdf80]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 67 f4 01 00       	jmp    c00210b1 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 80 20 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdf80]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 8f f4 01 00       	jmp    c00210f8 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 e8 4d 02 00       	call   c0026d34 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 a0 98 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6760]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 a0 98 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6760]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba a0 97 02 c0       	mov    edx,0xc00297a0
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba c0 98 02 c0       	mov    edx,0xc00298c0
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 84 cd 02 c0       	mov    edx,0xc002cd84
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba cc 98 02 c0       	mov    edx,0xc00298cc
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba b0 98 02 c0       	mov    edx,0xc00298b0
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 40 e9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd16c0]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 20 e9 02 c0    	mov    ax,ds:0xc002e920
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 20 e9 02 c0    	mov    ds:0xc002e920,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 e5 3b 02 00       	call   c0026d34 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 d2 98 02 c0       	mov    eax,0xc00298d2
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad 20 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd67e0]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 db 98 02 c0       	mov    eax,0xc00298db
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 a0 98 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6760]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 b0 25 02 00       	call   c0026d34 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba b0 98 02 c0       	mov    edx,0xc00298b0
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba a0 97 02 c0       	mov    edx,0xc00297a0
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba b0 97 02 c0       	mov    edx,0xc00297b0
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 40 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd16c0]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 40 e9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd16c0],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 77 0f 02 00       	call   c0026d34 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 5d 0f 02 00       	call   c0026d34 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 f7 97 02 c0       	mov    eax,0xc00297f7
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 40 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd16c0]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be e0 97 02 c0       	mov    esi,0xc00297e0
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 a0 f6 01 00       	call   c0026d34 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba c0 98 02 c0       	mov    edx,0xc00298c0
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba d0 97 02 c0       	mov    edx,0xc00297d0
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba e2 98 02 c0       	mov    edx,0xc00298e2
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba ee 98 02 c0       	mov    edx,0xc00298ee
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 02 99 02 c0       	mov    edx,0xc0029902
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c 20 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029c20
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 20 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c20
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 60 99 02 c0       	mov    eax,0xc0029960
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 20 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66e0]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 f4 ff 01 00       	call   c0028807 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 b7 ff 01 00       	call   c00287e9 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 8b ff 01 00       	call   c0028807 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 3e f6 01 00       	call   c0027f0c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 c0 00 02 00       	call   c00289a0 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 05 ff 01 00       	call   c0028807 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 47 fe 01 00       	call   c0028807 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 14 fe 01 00       	call   c00287e9 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 01 fd 01 00       	call   c0028807 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 c9 fc 01 00       	call   c00287e9 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 20 9d 02 c0       	mov    eax,0xc0029d20
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 d5 fa 01 00       	call   c0028807 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 9a fa 01 00       	call   c00287e9 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 80 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e80]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 aa f7 01 00       	call   c002859b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 28 f1 01 00       	call   c0027f38 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 e4 f9 01 00       	call   c002880b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 d2 fa 01 00       	call   c002892f <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 bc f0 01 00       	call   c0027f38 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 67 f9 01 00       	call   c0028805 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 48 f9 01 00       	call   c0028809 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 de fa 01 00       	call   c00289c0 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 88 f6 01 00       	call   c002859b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 06 f0 01 00       	call   c0027f38 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 c2 f8 01 00       	call   c002880b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 b0 f9 01 00       	call   c002892f <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 9a ef 01 00       	call   c0027f38 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 45 f8 01 00       	call   c0028805 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 25 f8 01 00       	call   c0028809 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 ba f9 01 00       	call   c00289c0 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 60 f7 01 00       	call   c0028807 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 1e f7 01 00       	call   c00287e9 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 06 f7 01 00       	call   c0028807 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 78 f4 01 00       	call   c002859b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 7a e7 01 00       	call   c00278bb <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 dd ed 01 00       	call   c0027f38 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 2f f4 01 00       	call   c002859b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 35 e7 01 00       	call   c00278bb <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 04 f4 01 00       	call   c002859b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 54 f6 01 00       	call   c0028805 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 31 ed 01 00       	call   c0027f0c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 b3 f7 01 00       	call   c00289a0 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 da f5 01 00       	call   c00287e9 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 d5 ec 01 00       	call   c0027f0c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 53 f3 01 00       	call   c002859b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 d6 ec 01 00       	call   c0027f38 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 28 f3 01 00       	call   c002859b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 8f ef 01 00       	call   c002821c <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 0e e6 01 00       	call   c00278bb <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 6e df 01 00       	call   c0027250 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 45 f6 01 00       	call   c002892f <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 2e ec 01 00       	call   c0027f38 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 15 f6 01 00       	call   c002892f <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 87 e5 01 00       	call   c00278bb <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 c0 f4 01 00       	call   c002880b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 a8 ee 01 00       	call   c002821c <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 2e e5 01 00       	call   c00278bb <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 1c f6 01 00       	call   c00289c0 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 ee f1 01 00       	call   c002859b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 45 eb 01 00       	call   c0027f0c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 24 f4 01 00       	call   c0028807 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 bd e4 01 00       	call   c00278bb <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 e9 ea 01 00       	call   c0027f0c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 8b f5 01 00       	call   c00289c0 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 3c f1 01 00       	call   c002859b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 b9 ea 01 00       	call   c0027f38 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 0c f1 01 00       	call   c002859b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 12 e4 01 00       	call   c00278bb <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 e2 f0 01 00       	call   c002859b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 34 f3 01 00       	call   c0028807 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 0b ea 01 00       	call   c0027f0c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 8d f4 01 00       	call   c00289a0 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 b4 f2 01 00       	call   c00287e9 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 ae e9 01 00       	call   c0027f0c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 2c f0 01 00       	call   c002859b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 af e9 01 00       	call   c0027f38 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 01 f0 01 00       	call   c002859b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 68 ec 01 00       	call   c002821c <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 e7 e2 01 00       	call   c00278bb <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 37 dc 01 00       	call   c0027250 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 0e f3 01 00       	call   c002892f <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 f7 e8 01 00       	call   c0027f38 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 de f2 01 00       	call   c002892f <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 50 e2 01 00       	call   c00278bb <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 89 f1 01 00       	call   c002880b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 70 eb 01 00       	call   c002821c <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 ef e1 01 00       	call   c00278bb <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 dd f2 01 00       	call   c00289c0 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 af ee 01 00       	call   c002859b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 06 e8 01 00       	call   c0027f0c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 e5 f0 01 00       	call   c0028807 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 7e e1 01 00       	call   c00278bb <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 aa e7 01 00       	call   c0027f0c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 1f ee 01 00       	call   c002859b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 25 e1 01 00       	call   c00278bb <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 e0 a1 02 c0       	mov    eax,0xc002a1e0
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 f4 a1 02 c0       	mov    eax,0xc002a1f4
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 9a ec 01 00       	call   c002859b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 18 e6 01 00       	call   c0027f38 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 aa d8 01 00       	call   c0027250 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 81 ef 01 00       	call   c002892f <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 6a e5 01 00       	call   c0027f38 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 4d ef 01 00       	call   c002892f <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 bf de 01 00       	call   c00278bb <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 1f ef 01 00       	call   c002892f <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 0e e5 01 00       	call   c0027f38 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 77 de 01 00       	call   c00278bb <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 98 d7 01 00       	call   c0027250 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 6f ee 01 00       	call   c002892f <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 58 e4 01 00       	call   c0027f38 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 3b ee 01 00       	call   c002892f <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 ad dd 01 00       	call   c00278bb <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 0d ee 01 00       	call   c002892f <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 fc e3 01 00       	call   c0027f38 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 65 dd 01 00       	call   c00278bb <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 43 dd 01 00       	call   c00278bb <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 1f d6 01 00       	call   c0027250 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 f6 ec 01 00       	call   c002892f <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 df e2 01 00       	call   c0027f38 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 c2 ec 01 00       	call   c002892f <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 34 dc 01 00       	call   c00278bb <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 94 ec 01 00       	call   c002892f <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 7d e2 01 00       	call   c0027f38 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 e6 db 01 00       	call   c00278bb <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 46 ec 01 00       	call   c002892f <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 2f e2 01 00       	call   c0027f38 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 98 db 01 00       	call   c00278bb <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 ad d4 01 00       	call   c0027250 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 84 eb 01 00       	call   c002892f <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 6d e1 01 00       	call   c0027f38 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 54 eb 01 00       	call   c002892f <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 c6 da 01 00       	call   c00278bb <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 26 eb 01 00       	call   c002892f <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 0f e1 01 00       	call   c0027f38 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 78 da 01 00       	call   c00278bb <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 d8 ea 01 00       	call   c002892f <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 c1 e0 01 00       	call   c0027f38 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 2a da 01 00       	call   c00278bb <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 fe d9 01 00       	call   c00278bb <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 5b e0 01 00       	call   c0027f38 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 17 e9 01 00       	call   c002880b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 a6 d9 01 00       	call   c00278bb <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 03 e0 01 00       	call   c0027f38 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 bf e8 01 00       	call   c002880b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 39 d2 01 00       	call   c0027250 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 10 e9 01 00       	call   c002892f <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 f9 de 01 00       	call   c0027f38 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 dc e8 01 00       	call   c002892f <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 4e d8 01 00       	call   c00278bb <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 ae e8 01 00       	call   c002892f <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 97 de 01 00       	call   c0027f38 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 00 d8 01 00       	call   c00278bb <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 60 e8 01 00       	call   c002892f <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 49 de 01 00       	call   c0027f38 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 b2 d7 01 00       	call   c00278bb <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 12 e8 01 00       	call   c002892f <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 fb dd 01 00       	call   c0027f38 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 64 d7 01 00       	call   c00278bb <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 c4 e7 01 00       	call   c002892f <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 ad dd 01 00       	call   c0027f38 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 16 d7 01 00       	call   c00278bb <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 18 d0 01 00       	call   c0027250 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 ef e6 01 00       	call   c002892f <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 d8 dc 01 00       	call   c0027f38 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 bf e6 01 00       	call   c002892f <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 31 d6 01 00       	call   c00278bb <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 91 e6 01 00       	call   c002892f <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 7a dc 01 00       	call   c0027f38 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 e3 d5 01 00       	call   c00278bb <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 43 e6 01 00       	call   c002892f <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 2c dc 01 00       	call   c0027f38 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 95 d5 01 00       	call   c00278bb <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 f5 e5 01 00       	call   c002892f <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 de db 01 00       	call   c0027f38 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 47 d5 01 00       	call   c00278bb <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 a7 e5 01 00       	call   c002892f <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 90 db 01 00       	call   c0027f38 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 f9 d4 01 00       	call   c00278bb <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 cd d4 01 00       	call   c00278bb <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 2a db 01 00       	call   c0027f38 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 e6 e3 01 00       	call   c002880b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 75 d4 01 00       	call   c00278bb <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 d2 da 01 00       	call   c0027f38 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8e e3 01 00       	call   c002880b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 1c d4 01 00       	call   c00278bb <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 79 da 01 00       	call   c0027f38 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 35 e3 01 00       	call   c002880b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 c3 d3 01 00       	call   c00278bb <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 20 da 01 00       	call   c0027f38 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 dc e2 01 00       	call   c002880b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 3a cc 01 00       	call   c0027250 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 11 e3 01 00       	call   c002892f <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 fa d8 01 00       	call   c0027f38 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 dd e2 01 00       	call   c002892f <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 4f d2 01 00       	call   c00278bb <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 af e2 01 00       	call   c002892f <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 98 d8 01 00       	call   c0027f38 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 01 d2 01 00       	call   c00278bb <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 61 e2 01 00       	call   c002892f <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 4a d8 01 00       	call   c0027f38 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 b3 d1 01 00       	call   c00278bb <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 13 e2 01 00       	call   c002892f <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 fc d7 01 00       	call   c0027f38 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 65 d1 01 00       	call   c00278bb <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 c5 e1 01 00       	call   c002892f <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 ae d7 01 00       	call   c0027f38 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 17 d1 01 00       	call   c00278bb <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 77 e1 01 00       	call   c002892f <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 60 d7 01 00       	call   c0027f38 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 c6 d0 01 00       	call   c00278bb <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 26 e1 01 00       	call   c002892f <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 0f d7 01 00       	call   c0027f38 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 78 d0 01 00       	call   c00278bb <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 72 c9 01 00       	call   c0027250 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 49 e0 01 00       	call   c002892f <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 32 d6 01 00       	call   c0027f38 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 12 e0 01 00       	call   c002892f <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 84 cf 01 00       	call   c00278bb <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 e4 df 01 00       	call   c002892f <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 cd d5 01 00       	call   c0027f38 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 36 cf 01 00       	call   c00278bb <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 96 df 01 00       	call   c002892f <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 7f d5 01 00       	call   c0027f38 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 e8 ce 01 00       	call   c00278bb <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 48 df 01 00       	call   c002892f <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 31 d5 01 00       	call   c0027f38 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 9a ce 01 00       	call   c00278bb <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 fa de 01 00       	call   c002892f <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 e3 d4 01 00       	call   c0027f38 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 4c ce 01 00       	call   c00278bb <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 ac de 01 00       	call   c002892f <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 95 d4 01 00       	call   c0027f38 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 fb cd 01 00       	call   c00278bb <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 5b de 01 00       	call   c002892f <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 44 d4 01 00       	call   c0027f38 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 b3 cd 01 00       	call   c00278bb <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 8c cd 01 00       	call   c00278bb <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 ea d3 01 00       	call   c0027f38 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 a6 dc 01 00       	call   c002880b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 35 cd 01 00       	call   c00278bb <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 93 d3 01 00       	call   c0027f38 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 4f dc 01 00       	call   c002880b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 dd cc 01 00       	call   c00278bb <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 3b d3 01 00       	call   c0027f38 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 f7 db 01 00       	call   c002880b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 85 cc 01 00       	call   c00278bb <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 e3 d2 01 00       	call   c0027f38 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 9f db 01 00       	call   c002880b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 2d cc 01 00       	call   c00278bb <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 8b d2 01 00       	call   c0027f38 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 47 db 01 00       	call   c002880b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 db cb 01 00       	call   c00278bb <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 39 d2 01 00       	call   c0027f38 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 f5 da 01 00       	call   c002880b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 09 c4 01 00       	call   c0027250 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 e0 da 01 00       	call   c002892f <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 c9 d0 01 00       	call   c0027f38 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 b0 da 01 00       	call   c002892f <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 22 ca 01 00       	call   c00278bb <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 24 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5ddc]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 56 da 01 00       	call   c002892f <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 3f d0 01 00       	call   c0027f38 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 aa c9 01 00       	call   c00278bb <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 f7 d9 01 00       	call   c002892f <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 e0 cf 01 00       	call   c0027f38 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 4b c9 01 00       	call   c00278bb <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 98 d9 01 00       	call   c002892f <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 81 cf 01 00       	call   c0027f38 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 ec c8 01 00       	call   c00278bb <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 39 d9 01 00       	call   c002892f <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 22 cf 01 00       	call   c0027f38 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 8d c8 01 00       	call   c00278bb <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 da d8 01 00       	call   c002892f <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 c3 ce 01 00       	call   c0027f38 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 2e c8 01 00       	call   c00278bb <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 7b d8 01 00       	call   c002892f <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 64 ce 01 00       	call   c0027f38 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 cf c7 01 00       	call   c00278bb <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 1c d8 01 00       	call   c002892f <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 05 ce 01 00       	call   c0027f38 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 70 c7 01 00       	call   c00278bb <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 bd d7 01 00       	call   c002892f <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 a6 cd 01 00       	call   c0027f38 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 11 c7 01 00       	call   c00278bb <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 1b c0 01 00       	call   c0027250 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 f2 d6 01 00       	call   c002892f <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 db cc 01 00       	call   c0027f38 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 c2 d6 01 00       	call   c002892f <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 34 c6 01 00       	call   c00278bb <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 40 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5dc0]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 67 d6 01 00       	call   c002892f <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 50 cc 01 00       	call   c0027f38 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 bb c5 01 00       	call   c00278bb <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 07 d6 01 00       	call   c002892f <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 f0 cb 01 00       	call   c0027f38 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 5b c5 01 00       	call   c00278bb <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 a7 d5 01 00       	call   c002892f <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 90 cb 01 00       	call   c0027f38 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 fb c4 01 00       	call   c00278bb <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 47 d5 01 00       	call   c002892f <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 30 cb 01 00       	call   c0027f38 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 9b c4 01 00       	call   c00278bb <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 e7 d4 01 00       	call   c002892f <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 d0 ca 01 00       	call   c0027f38 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 3b c4 01 00       	call   c00278bb <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 87 d4 01 00       	call   c002892f <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 70 ca 01 00       	call   c0027f38 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 db c3 01 00       	call   c00278bb <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 27 d4 01 00       	call   c002892f <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 10 ca 01 00       	call   c0027f38 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 7b c3 01 00       	call   c00278bb <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 c7 d3 01 00       	call   c002892f <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 b0 c9 01 00       	call   c0027f38 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 1b c3 01 00       	call   c00278bb <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 5c a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5da4]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 c0 c2 01 00       	call   c00278bb <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 1d c9 01 00       	call   c0027f38 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 d9 d1 01 00       	call   c002880b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 63 c2 01 00       	call   c00278bb <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 c0 c8 01 00       	call   c0027f38 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 7c d1 01 00       	call   c002880b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 06 c2 01 00       	call   c00278bb <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 63 c8 01 00       	call   c0027f38 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 1f d1 01 00       	call   c002880b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 a9 c1 01 00       	call   c00278bb <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 06 c8 01 00       	call   c0027f38 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 c2 d0 01 00       	call   c002880b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 4c c1 01 00       	call   c00278bb <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 a9 c7 01 00       	call   c0027f38 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 65 d0 01 00       	call   c002880b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 ef c0 01 00       	call   c00278bb <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 4c c7 01 00       	call   c0027f38 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 08 d0 01 00       	call   c002880b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 92 c0 01 00       	call   c00278bb <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 ef c6 01 00       	call   c0027f38 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 ab cf 01 00       	call   c002880b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 35 c0 01 00       	call   c00278bb <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 92 c6 01 00       	call   c0027f38 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 4e cf 01 00       	call   c002880b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 4a c6 01 00       	call   c0027f38 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 c2 d0 01 00       	jmp    c00289c0 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 2c cd 01 00       	call   c0028807 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 ea cc 01 00       	call   c00287e9 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 81 ca 01 00       	call   c002859b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 82 bd 01 00       	call   c00278bb <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 51 ca 01 00       	call   c002859b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 b8 c6 01 00       	call   c002821c <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 57 cc 01 00       	call   c00287e9 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 5a cc 01 00       	call   c0028807 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 2d cc 01 00       	call   c0028807 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 26 c6 01 00       	call   c002821c <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 b0 cd 01 00       	call   c00289c0 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 8b cd 01 00       	call   c00289c0 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 5d c9 01 00       	call   c002859b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 b4 c2 01 00       	call   c0027f0c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 93 cb 01 00       	call   c0028807 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 2c bc 01 00       	call   c00278bb <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 50 c2 01 00       	call   c0027f0c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 f2 cc 01 00       	call   c00289c0 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 2a c5 01 00       	call   c002821c <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 a7 bb 01 00       	call   c00278bb <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 d3 c7 01 00       	call   c002859b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 d3 ba 01 00       	call   c00278bb <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 b3 ba 01 00       	call   c00278bb <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 83 c7 01 00       	call   c002859b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 d3 c9 01 00       	call   c0028805 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 b2 c0 01 00       	call   c0027f0c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 34 cb 01 00       	call   c00289a0 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 5b c9 01 00       	call   c00287e9 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 59 c0 01 00       	call   c0027f0c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 d7 c6 01 00       	call   c002859b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 5a c0 01 00       	call   c0027f38 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 ac c6 01 00       	call   c002859b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 13 c3 01 00       	call   c002821c <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 92 b9 01 00       	call   c00278bb <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 5c c6 01 00       	call   c002859b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 a8 c8 01 00       	call   c0028807 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 9d bf 01 00       	call   c0027f38 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 6f bf 01 00       	call   c0027f38 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 a8 c5 01 00       	call   c002859b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 0c c2 01 00       	call   c002821c <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 d4 c1 01 00       	call   c002821c <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 53 b8 01 00       	call   c00278bb <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 40 c9 01 00       	call   c00289c0 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 12 c5 01 00       	call   c002859b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 69 be 01 00       	call   c0027f0c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 48 c7 01 00       	call   c0028807 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 e0 b7 01 00       	call   c00278bb <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 04 be 01 00       	call   c0027f0c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 a6 c8 01 00       	call   c00289c0 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 67 c6 01 00       	call   c0028807 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 25 c6 01 00       	call   c00287e9 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 bc c3 01 00       	call   c002859b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 bd b6 01 00       	call   c00278bb <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 8c c3 01 00       	call   c002859b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 f3 bf 01 00       	call   c002821c <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 92 c5 01 00       	call   c00287e9 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 95 c5 01 00       	call   c0028807 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 68 c5 01 00       	call   c0028807 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 61 bf 01 00       	call   c002821c <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 eb c6 01 00       	call   c00289c0 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 c6 c6 01 00       	call   c00289c0 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 98 c2 01 00       	call   c002859b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 ef bb 01 00       	call   c0027f0c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 ce c4 01 00       	call   c0028807 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 67 b5 01 00       	call   c00278bb <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 8b bb 01 00       	call   c0027f0c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 2d c6 01 00       	call   c00289c0 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 65 be 01 00       	call   c002821c <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 e2 b4 01 00       	call   c00278bb <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 0d c1 01 00       	call   c002859b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 0d b4 01 00       	call   c00278bb <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 ed b3 01 00       	call   c00278bb <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 bd c0 01 00       	call   c002859b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 0d c3 01 00       	call   c0028805 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 eb b9 01 00       	call   c0027f0c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 6d c4 01 00       	call   c00289a0 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 94 c2 01 00       	call   c00287e9 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 91 b9 01 00       	call   c0027f0c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 0f c0 01 00       	call   c002859b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 92 b9 01 00       	call   c0027f38 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 e4 bf 01 00       	call   c002859b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 4b bc 01 00       	call   c002821c <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 ca b2 01 00       	call   c00278bb <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 94 bf 01 00       	call   c002859b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 e0 c1 01 00       	call   c0028807 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 d5 b8 01 00       	call   c0027f38 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 a7 b8 01 00       	call   c0027f38 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 de be 01 00       	call   c002859b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 42 bb 01 00       	call   c002821c <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 0f bb 01 00       	call   c002821c <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 8e b1 01 00       	call   c00278bb <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 7b c2 01 00       	call   c00289c0 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 4d be 01 00       	call   c002859b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 a4 b7 01 00       	call   c0027f0c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 83 c0 01 00       	call   c0028807 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 1b b1 01 00       	call   c00278bb <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 3f b7 01 00       	call   c0027f0c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 e1 c1 01 00       	call   c00289c0 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 a2 bf 01 00       	call   c0028807 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 60 bf 01 00       	call   c00287e9 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 f7 bc 01 00       	call   c002859b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 f8 af 01 00       	call   c00278bb <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 c7 bc 01 00       	call   c002859b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 2e b9 01 00       	call   c002821c <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 cd be 01 00       	call   c00287e9 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 d0 be 01 00       	call   c0028807 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 a3 be 01 00       	call   c0028807 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 9c b8 01 00       	call   c002821c <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 26 c0 01 00       	call   c00289c0 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 01 c0 01 00       	call   c00289c0 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 d3 bb 01 00       	call   c002859b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 2a b5 01 00       	call   c0027f0c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 09 be 01 00       	call   c0028807 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 a2 ae 01 00       	call   c00278bb <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 c6 b4 01 00       	call   c0027f0c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 68 bf 01 00       	call   c00289c0 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 a0 b7 01 00       	call   c002821c <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 1d ae 01 00       	call   c00278bb <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 48 ba 01 00       	call   c002859b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 48 ad 01 00       	call   c00278bb <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 28 ad 01 00       	call   c00278bb <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 f8 b9 01 00       	call   c002859b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 48 bc 01 00       	call   c0028805 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 26 b3 01 00       	call   c0027f0c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 a8 bd 01 00       	call   c00289a0 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 cf bb 01 00       	call   c00287e9 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 cc b2 01 00       	call   c0027f0c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 4a b9 01 00       	call   c002859b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 cd b2 01 00       	call   c0027f38 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 1f b9 01 00       	call   c002859b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 86 b5 01 00       	call   c002821c <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 05 ac 01 00       	call   c00278bb <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 cf b8 01 00       	call   c002859b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 1b bb 01 00       	call   c0028807 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 10 b2 01 00       	call   c0027f38 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 e2 b1 01 00       	call   c0027f38 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 19 b8 01 00       	call   c002859b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 7d b4 01 00       	call   c002821c <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 4a b4 01 00       	call   c002821c <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 c9 aa 01 00       	call   c00278bb <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 b6 bb 01 00       	call   c00289c0 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 88 b7 01 00       	call   c002859b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 df b0 01 00       	call   c0027f0c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 be b9 01 00       	call   c0028807 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 56 aa 01 00       	call   c00278bb <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 7a b0 01 00       	call   c0027f0c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 1c bb 01 00       	call   c00289c0 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 dd b8 01 00       	call   c0028807 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 9b b8 01 00       	call   c00287e9 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 32 b6 01 00       	call   c002859b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 33 a9 01 00       	call   c00278bb <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 02 b6 01 00       	call   c002859b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 69 b2 01 00       	call   c002821c <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 08 b8 01 00       	call   c00287e9 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 0b b8 01 00       	call   c0028807 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 de b7 01 00       	call   c0028807 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 d7 b1 01 00       	call   c002821c <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 61 b9 01 00       	call   c00289c0 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 3c b9 01 00       	call   c00289c0 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 0e b5 01 00       	call   c002859b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 65 ae 01 00       	call   c0027f0c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 44 b7 01 00       	call   c0028807 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 dd a7 01 00       	call   c00278bb <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 01 ae 01 00       	call   c0027f0c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 a3 b8 01 00       	call   c00289c0 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 db b0 01 00       	call   c002821c <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 58 a7 01 00       	call   c00278bb <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 83 b3 01 00       	call   c002859b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 83 a6 01 00       	call   c00278bb <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 63 a6 01 00       	call   c00278bb <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 33 b3 01 00       	call   c002859b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 83 b5 01 00       	call   c0028805 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 61 ac 01 00       	call   c0027f0c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 e3 b6 01 00       	call   c00289a0 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 0a b5 01 00       	call   c00287e9 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 07 ac 01 00       	call   c0027f0c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 85 b2 01 00       	call   c002859b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 08 ac 01 00       	call   c0027f38 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 5a b2 01 00       	call   c002859b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 c1 ae 01 00       	call   c002821c <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 40 a5 01 00       	call   c00278bb <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 0a b2 01 00       	call   c002859b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 56 b4 01 00       	call   c0028807 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 4b ab 01 00       	call   c0027f38 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 1d ab 01 00       	call   c0027f38 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 54 b1 01 00       	call   c002859b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 b8 ad 01 00       	call   c002821c <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 85 ad 01 00       	call   c002821c <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 04 a4 01 00       	call   c00278bb <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 f1 b4 01 00       	call   c00289c0 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 c3 b0 01 00       	call   c002859b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 1a aa 01 00       	call   c0027f0c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 f9 b2 01 00       	call   c0028807 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 91 a3 01 00       	call   c00278bb <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 b5 a9 01 00       	call   c0027f0c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 57 b4 01 00       	call   c00289c0 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 15 b2 01 00       	call   c0028807 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 d3 b1 01 00       	call   c00287e9 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 6a af 01 00       	call   c002859b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 6b a2 01 00       	call   c00278bb <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 3a af 01 00       	call   c002859b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 a1 ab 01 00       	call   c002821c <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 40 b1 01 00       	call   c00287e9 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 43 b1 01 00       	call   c0028807 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 16 b1 01 00       	call   c0028807 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 0f ab 01 00       	call   c002821c <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 99 b2 01 00       	call   c00289c0 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 70 b2 01 00       	call   c00289c0 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 42 ae 01 00       	call   c002859b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 99 a7 01 00       	call   c0027f0c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 78 b0 01 00       	call   c0028807 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 11 a1 01 00       	call   c00278bb <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 39 a7 01 00       	call   c0027f0c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 db b1 01 00       	call   c00289c0 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 14 aa 01 00       	call   c002821c <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 91 a0 01 00       	call   c00278bb <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 bd ac 01 00       	call   c002859b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 bd 9f 01 00       	call   c00278bb <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 9d 9f 01 00       	call   c00278bb <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 6d ac 01 00       	call   c002859b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 a1 ae 01 00       	call   c00287e9 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 98 a5 01 00       	call   c0027f0c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 1a b0 01 00       	call   c00289a0 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 41 ae 01 00       	call   c00287e9 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 3b a5 01 00       	call   c0027f0c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 b9 ab 01 00       	call   c002859b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 3c a5 01 00       	call   c0027f38 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 8e ab 01 00       	call   c002859b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 f5 a7 01 00       	call   c002821c <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 74 9e 01 00       	call   c00278bb <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 3e ab 01 00       	call   c002859b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 8a ad 01 00       	call   c0028807 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 7f a4 01 00       	call   c0027f38 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 51 a4 01 00       	call   c0027f38 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 95 aa 01 00       	call   c002859b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 fc a6 01 00       	call   c002821c <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 e5 a3 01 00       	call   c0027f38 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 a1 ac 01 00       	call   c002880b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 94 a6 01 00       	call   c002821c <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 13 9d 01 00       	call   c00278bb <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 00 ae 01 00       	call   c00289c0 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 d2 a9 01 00       	call   c002859b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 29 a3 01 00       	call   c0027f0c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 08 ac 01 00       	call   c0028807 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 a0 9c 01 00       	call   c00278bb <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 c8 a2 01 00       	call   c0027f0c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 6a ad 01 00       	call   c00289c0 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 84 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d7c]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 78 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d88]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 1d aa 01 00       	call   c0028807 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 db a9 01 00       	call   c00287e9 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 c7 a9 01 00       	call   c0028807 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 39 a7 01 00       	call   c002859b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 b7 a0 01 00       	call   c0027f38 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 09 a7 01 00       	call   c002859b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 0f 9a 01 00       	call   c00278bb <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 de a6 01 00       	call   c002859b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 2e a9 01 00       	call   c0028805 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 0f a0 01 00       	call   c0027f0c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 91 aa 01 00       	call   c00289a0 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 b8 a8 01 00       	call   c00287e9 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 b7 9f 01 00       	call   c0027f0c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 35 a6 01 00       	call   c002859b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 b8 9f 01 00       	call   c0027f38 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 0a a6 01 00       	call   c002859b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 71 a2 01 00       	call   c002821c <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 f0 98 01 00       	call   c00278bb <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 18 a2 01 00       	call   c002821c <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 9e 98 01 00       	call   c00278bb <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 8c a9 01 00       	call   c00289c0 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 5e a5 01 00       	call   c002859b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 b5 9e 01 00       	call   c0027f0c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 94 a7 01 00       	call   c0028807 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 2d 98 01 00       	call   c00278bb <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 59 9e 01 00       	call   c0027f0c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 fb a8 01 00       	call   c00289c0 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 a8 a4 01 00       	call   c002859b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 25 9e 01 00       	call   c0027f38 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 76 a4 01 00       	call   c002859b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 7c 97 01 00       	call   c00278bb <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 4c a4 01 00       	call   c002859b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 a0 a6 01 00       	call   c0028809 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 79 9d 01 00       	call   c0027f0c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 fb a7 01 00       	call   c00289a0 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 22 a6 01 00       	call   c00287e9 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 20 9d 01 00       	call   c0027f0c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 9e a3 01 00       	call   c002859b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 21 9d 01 00       	call   c0027f38 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 73 a3 01 00       	call   c002859b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 da 9f 01 00       	call   c002821c <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 59 96 01 00       	call   c00278bb <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 75 9f 01 00       	call   c002821c <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 f4 95 01 00       	call   c00278bb <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 e2 a6 01 00       	call   c00289c0 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 b4 a2 01 00       	call   c002859b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 0b 9c 01 00       	call   c0027f0c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 ea a4 01 00       	call   c0028807 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 83 95 01 00       	call   c00278bb <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 af 9b 01 00       	call   c0027f0c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 20 a2 01 00       	call   c002859b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 26 95 01 00       	call   c00278bb <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 9e a3 02 c0       	mov    eax,0xc002a39e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 af a3 02 c0       	mov    eax,0xc002a3af
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 e6 a3 02 c0       	push   0xc002a3e6
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 a8 e9 02 c0       	mov    eax,0xc002e9a8
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 ef a3 02 c0       	push   0xc002a3ef
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 34 6d 02 c0       	mov    eax,0xc0026d34
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 f9 a3 02 c0       	push   0xc002a3f9
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 68 6a 02 c0       	mov    eax,0xc0026a68
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 02 a4 02 c0       	push   0xc002a402
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 34 6e 02 c0       	mov    eax,0xc0026e34
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 0c a4 02 c0       	push   0xc002a40c
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 b4 6b 02 c0       	mov    eax,0xc0026bb4
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 15 a4 02 c0       	push   0xc002a415
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 ac e9 02 c0       	mov    eax,0xc002e9ac
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 22 a4 02 c0       	push   0xc002a422
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 ad e9 02 c0       	mov    eax,0xc002e9ad
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 3b 5d 00 00       	call   c0014366 <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c000e670:	68 2f a4 02 c0       	push   0xc002a42f
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 ab f6 00 00       	call   c001dd28 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 94 f9 00 00       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 57 e9 01 c0       	push   0xc001e957
c000e69b:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c000e6a1:	e8 80 f9 00 00       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 c8 1e 03 c0       	mov    ds:0xc0031ec8,eax
c000e6ae:	c6 05 ad e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9ad,0x1
c000e6b5:	e8 1d 06 01 00       	call   c001ecd7 <Vm::initialise8086()>
c000e6ba:	e8 8f 4a 00 00       	call   c001314e <Fs::initVFS()>
c000e6bf:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 ba df 00 00       	call   c001c695 <Sys::loadSyscalls()>
c000e6db:	e8 3e be 00 00       	call   c001a51e <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 3c a4 02 c0       	push   0xc002a43c
c000e6ea:	68 45 a4 02 c0       	push   0xc002a445
c000e6ef:	e8 50 cb 00 00       	call   c001b244 <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 3a 55 00 00       	call   c0013c36 <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 2d 5c 00 00       	call   c001433a <Device::loadDriversForAll()>
c000e70d:	e8 52 b9 00 00       	call   c001a064 <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 4d a4 02 c0       	push   0xc002a44d
c000e721:	e8 27 f1 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 52 f3 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 88 fc 00 00       	call   c001e3c4 <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 69 a4 02 c0       	push   0xc002a469
c000e751:	50                   	push   eax
c000e752:	e8 89 5c 00 00       	call   c00143e0 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 c1 e9 02 c0 04 	test   BYTE PTR ds:0xc002e9c1,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 0b 81 01 00       	call   c00269f6 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 50 a4 00 00       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 29 a4 00 00       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 07 a4 00 00       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 e5 a3 00 00       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 c0 e9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e9c0,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 f3 a2 00 00       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 ce a2 00 00       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 75 7f 01 00       	call   c00269b0 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 32 7f 01 00       	call   c0026990 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 ea a2 00 00       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 79 a4 02 c0       	push   0xc002a479
c000eab7:	e8 07 43 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 8c a4 02 c0       	push   0xc002a48c
c000eada:	e8 e4 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 9d a4 02 c0       	push   0xc002a49d
c000eafd:	e8 c1 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 ae a4 02 c0       	push   0xc002a4ae
c000eb20:	e8 9e 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 bf a4 02 c0       	push   0xc002a4bf
c000eb43:	e8 7b 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 d0 a4 02 c0       	push   0xc002a4d0
c000eb66:	e8 58 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 e1 a4 02 c0       	push   0xc002a4e1
c000eb89:	e8 35 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 f2 a4 02 c0       	push   0xc002a4f2
c000ebac:	e8 12 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 03 a5 02 c0       	push   0xc002a503
c000ebcf:	e8 ef 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 14 a5 02 c0       	push   0xc002a514
c000ebf2:	e8 cc 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 25 a5 02 c0       	push   0xc002a525
c000ec15:	e8 a9 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 36 a5 02 c0       	push   0xc002a536
c000ec38:	e8 86 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 47 a5 02 c0       	push   0xc002a547
c000ec5b:	e8 63 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 58 a5 02 c0       	push   0xc002a558
c000ec7e:	e8 40 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 69 a5 02 c0       	push   0xc002a569
c000eca1:	e8 1d 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 7a a5 02 c0       	push   0xc002a57a
c000ecc4:	e8 fa 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 8b a5 02 c0       	push   0xc002a58b
c000ece7:	e8 d7 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 9c a5 02 c0       	push   0xc002a59c
c000ed0a:	e8 b4 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ad a5 02 c0       	push   0xc002a5ad
c000ed29:	e8 95 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 08 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c008
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 84 40 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 be a5 02 c0       	push   0xc002a5be
c000ee12:	e8 40 b8 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 c4 a5 02 c0       	push   0xc002a5c4
c000ee4a:	e8 08 b8 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 c0 e9 02 c0 04 	test   BYTE PTR ds:0xc002e9c0,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 e4 d8 02 c0 	sete   BYTE PTR ds:0xc002d8e4
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 83 92 00 00       	call   c0018140 <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 24 53 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 32 9f 00 00       	call   c0018e2e <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 e5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 5d 58 00 00       	call   c0014784 <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 b5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 eb f1 00 00       	call   c001e148 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 ca a5 02 c0       	push   0xc002a5ca
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 18 3e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 db a5 02 c0       	push   0xc002a5db
c000efc8:	e8 8a b6 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 e8 a5 02 c0       	push   0xc002a5e8
c000efdd:	e8 75 b6 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 f2 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a5f2
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 5e b6 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 2c a6 02 c0       	push   0xc002a62c
c000f08e:	e8 30 3d 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 b2 e9 02 c0       	mov    ds:0xc002e9b2,eax
c000f0cf:	66 89 15 b0 e9 02 c0 	mov    WORD PTR ds:0xc002e9b0,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 10 ed 00 00       	call   c001def6 <unlockScheduler()>
c000f1e6:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 0c 98 01 00       	call   c0028a40 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 03 98 01 00       	call   c0028a40 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 b8 e9 02 c0 ff 07 	mov    WORD PTR ds:0xc002e9b8,0x7ff
c000f32b:	a3 ba e9 02 c0       	mov    ds:0xc002e9ba,eax
c000f330:	0f 01 1d b8 e9 02 c0 	lidtd  ds:0xc002e9b8
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 11 26 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 f4 2c 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 da 1c 00 00       	call   c0011320 <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 0b 1d 00 00       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d c8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8c8
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 c8 d8 02 c0       	mov    eax,ds:0xc002d8c8
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 48 a6 02 c0       	push   0xc002a648
c000f6fc:	e8 c2 36 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 c8 d8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d8c8,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 07 25 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d c8 d8 02 c0    	mov    ebp,DWORD PTR ds:0xc002d8c8
c000f72f:	e8 83 07 00 00       	call   c000feb7 <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 db 2a 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d c8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8c8
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 78 a6 02 c0       	push   0xc002a678
c000f7b5:	e8 9d ae 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 7d a6 02 c0       	push   0xc002a67d
c000f7cb:	e8 87 ae 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 13 e7 00 00       	call   c001def4 <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 04 e7 00 00       	call   c001def6 <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 2b 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 07 2b 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 0d 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 aa 27 00 00       	call   c0011fd8 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 e0 d8 02 c0       	mov    eax,ds:0xc002d8e0
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8b5:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 29                	jle    c000f8e5 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8bc:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f8c2:	31 f6                	xor    esi,esi
c000f8c4:	29 cd                	sub    ebp,ecx
c000f8c6:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c9:	31 c0                	xor    eax,eax
c000f8cb:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cf:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d3:	40                   	inc    eax
c000f8d4:	83 f8 50             	cmp    eax,0x50
c000f8d7:	75 f2                	jne    c000f8cb <hwTextMode_loadInData(VgaText*)+0x26>
c000f8d9:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8df:	46                   	inc    esi
c000f8e0:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f8e3:	7f e1                	jg     c000f8c6 <hwTextMode_loadInData(VgaText*)+0x21>
c000f8e5:	5b                   	pop    ebx
c000f8e6:	5e                   	pop    esi
c000f8e7:	5f                   	pop    edi
c000f8e8:	5d                   	pop    ebp
c000f8e9:	c3                   	ret    

c000f8ea <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8ea:	55                   	push   ebp
c000f8eb:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f9:	75 44                	jne    c000f93f <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f8fb:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f8fe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f901:	8b 15 e0 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e0
c000f907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90b:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f911:	eb 08                	jmp    c000f91b <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f913:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f916:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f919:	89 da                	mov    edx,ebx
c000f91b:	83 e5 0f             	and    ebp,0xf
c000f91e:	c1 e0 04             	shl    eax,0x4
c000f921:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f924:	0f b6 c0             	movzx  eax,al
c000f927:	41                   	inc    ecx
c000f928:	09 e8                	or     eax,ebp
c000f92a:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f92e:	c1 e0 08             	shl    eax,0x8
c000f931:	09 e8                	or     eax,ebp
c000f933:	39 fb                	cmp    ebx,edi
c000f935:	66 89 02             	mov    WORD PTR [edx],ax
c000f938:	75 d9                	jne    c000f913 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f93a:	5b                   	pop    ebx
c000f93b:	5e                   	pop    esi
c000f93c:	5f                   	pop    edi
c000f93d:	5d                   	pop    ebp
c000f93e:	c3                   	ret    
c000f93f:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f946:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f94d:	31 c0                	xor    eax,eax
c000f94f:	bd 02 00 00 00       	mov    ebp,0x2
c000f954:	eb ab                	jmp    c000f901 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f956 <hwTextMode_showCursor(VgaText*, bool)>:
c000f956:	56                   	push   esi
c000f957:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000f95e:	53                   	push   ebx
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	75 36                	jne    c000f99b <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f965:	84 c0                	test   al,al
c000f967:	74 35                	je     c000f99e <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f969:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f96e:	b0 0a                	mov    al,0xa
c000f970:	89 da                	mov    edx,ebx
c000f972:	ee                   	out    dx,al
c000f973:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f978:	89 ca                	mov    edx,ecx
c000f97a:	ec                   	in     al,dx
c000f97b:	b2 0f                	mov    dl,0xf
c000f97d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f981:	83 e0 c0             	and    eax,0xffffffc0
c000f984:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f987:	09 d0                	or     eax,edx
c000f989:	89 ca                	mov    edx,ecx
c000f98b:	ee                   	out    dx,al
c000f98c:	b0 0b                	mov    al,0xb
c000f98e:	89 da                	mov    edx,ebx
c000f990:	ee                   	out    dx,al
c000f991:	89 ca                	mov    edx,ecx
c000f993:	ec                   	in     al,dx
c000f994:	83 e0 e0             	and    eax,0xffffffe0
c000f997:	83 c8 0f             	or     eax,0xf
c000f99a:	ee                   	out    dx,al
c000f99b:	5b                   	pop    ebx
c000f99c:	5e                   	pop    esi
c000f99d:	c3                   	ret    
c000f99e:	b0 0a                	mov    al,0xa
c000f9a0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9a5:	ee                   	out    dx,al
c000f9a6:	b0 20                	mov    al,0x20
c000f9a8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    

c000f9b1 <hwTextMode_update(VgaText*)>:
c000f9b1:	c3                   	ret    

c000f9b2 <hwTextMode_updateCursor(VgaText*)>:
c000f9b2:	56                   	push   esi
c000f9b3:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000f9ba:	53                   	push   ebx
c000f9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9bf:	75 36                	jne    c000f9f7 <hwTextMode_updateCursor(VgaText*)+0x45>
c000f9c1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9c6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9cb:	89 f2                	mov    edx,esi
c000f9cd:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000f9d0:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000f9d3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9d6:	c1 e1 04             	shl    ecx,0x4
c000f9d9:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000f9dc:	b0 0f                	mov    al,0xf
c000f9de:	ee                   	out    dx,al
c000f9df:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	89 da                	mov    edx,ebx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0e                	mov    al,0xe
c000f9eb:	89 f2                	mov    edx,esi
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 c8                	mov    eax,ecx
c000f9f0:	89 da                	mov    edx,ebx
c000f9f2:	66 c1 e8 08          	shr    ax,0x8
c000f9f6:	ee                   	out    dx,al
c000f9f7:	5b                   	pop    ebx
c000f9f8:	5e                   	pop    esi
c000f9f9:	c3                   	ret    

c000f9fa <hwTextMode_disableBlink(VgaText*, bool)>:
c000f9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9fe:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000fa05:	75 38                	jne    c000fa3f <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa07:	ba da 03 00 00       	mov    edx,0x3da
c000fa0c:	84 c0                	test   al,al
c000fa0e:	75 18                	jne    c000fa28 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa10:	ec                   	in     al,dx
c000fa11:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa16:	b0 30                	mov    al,0x30
c000fa18:	89 ca                	mov    edx,ecx
c000fa1a:	ee                   	out    dx,al
c000fa1b:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa20:	ec                   	in     al,dx
c000fa21:	83 c8 08             	or     eax,0x8
c000fa24:	89 ca                	mov    edx,ecx
c000fa26:	ee                   	out    dx,al
c000fa27:	c3                   	ret    
c000fa28:	ec                   	in     al,dx
c000fa29:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2e:	b0 30                	mov    al,0x30
c000fa30:	89 ca                	mov    edx,ecx
c000fa32:	ee                   	out    dx,al
c000fa33:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa38:	ec                   	in     al,dx
c000fa39:	83 e0 f7             	and    eax,0xfffffff7
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	c3                   	ret    

c000fa40 <hwTextMode_scrollScreen(VgaText*)>:
c000fa40:	55                   	push   ebp
c000fa41:	57                   	push   edi
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	83 ec 1c             	sub    esp,0x1c
c000fa47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa4b:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000fa52:	74 0e                	je     c000fa62 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa54:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa5b:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fa62:	a1 e0 d8 02 c0       	mov    eax,ds:0xc002d8e0
c000fa67:	bd 02 00 00 00       	mov    ebp,0x2
c000fa6c:	05 a0 00 00 00       	add    eax,0xa0
c000fa71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa79:	31 c0                	xor    eax,eax
c000fa7b:	eb 0b                	jmp    c000fa88 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fa7d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa83:	74 51                	je     c000fad6 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fa85:	43                   	inc    ebx
c000fa86:	89 f0                	mov    eax,esi
c000fa88:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fa8e:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fa94:	88 13                	mov    BYTE PTR [ebx],dl
c000fa96:	8d 70 01             	lea    esi,[eax+0x1]
c000fa99:	83 fd 18             	cmp    ebp,0x18
c000fa9c:	75 df                	jne    c000fa7d <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fa9e:	a8 01                	test   al,0x1
c000faa0:	75 13                	jne    c000fab5 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faa2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faa5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faab:	75 d8                	jne    c000fa85 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faad:	83 c4 1c             	add    esp,0x1c
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	5f                   	pop    edi
c000fab3:	5d                   	pop    ebp
c000fab4:	c3                   	ret    
c000fab5:	83 ec 08             	sub    esp,0x8
c000fab8:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fabc:	50                   	push   eax
c000fabd:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fac1:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fac5:	50                   	push   eax
c000fac6:	e8 09 0c 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	88 07                	mov    BYTE PTR [edi],al
c000fad0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad4:	eb cf                	jmp    c000faa5 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fad6:	45                   	inc    ebp
c000fad7:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fadf:	eb 94                	jmp    c000fa75 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fae1 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fae1:	57                   	push   edi
c000fae2:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000faef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000faf3:	75 62                	jne    c000fb57 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000faf5:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fafa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	52                   	push   edx
c000fb03:	50                   	push   eax
c000fb04:	e8 cb 0b 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb09:	5a                   	pop    edx
c000fb0a:	0f b6 c0             	movzx  eax,al
c000fb0d:	59                   	pop    ecx
c000fb0e:	50                   	push   eax
c000fb0f:	0f be c3             	movsx  eax,bl
c000fb12:	50                   	push   eax
c000fb13:	e8 62 0c 00 00       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 35 e0 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8e0
c000fb21:	80 3d 40 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea40,0x0
c000fb28:	74 07                	je     c000fb31 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb2a:	66 0f be c3          	movsx  ax,bl
c000fb2e:	80 cc 02             	or     ah,0x2
c000fb31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb35:	ba 19 00 00 00       	mov    edx,0x19
c000fb3a:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb3d:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb40:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb43:	c1 e1 04             	shl    ecx,0x4
c000fb46:	c1 e2 04             	shl    edx,0x4
c000fb49:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb4d:	01 ca                	add    edx,ecx
c000fb4f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb53:	5b                   	pop    ebx
c000fb54:	5e                   	pop    esi
c000fb55:	5f                   	pop    edi
c000fb56:	c3                   	ret    
c000fb57:	b8 02 00 00 00       	mov    eax,0x2
c000fb5c:	31 d2                	xor    edx,edx
c000fb5e:	eb 9f                	jmp    c000faff <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb60 <setupTextMode()>:
c000fb60:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb65:	83 e0 30             	and    eax,0x30
c000fb68:	66 83 f8 30          	cmp    ax,0x30
c000fb6c:	75 11                	jne    c000fb7f <setupTextMode()+0x1f>
c000fb6e:	81 2d e0 d8 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d8e0,0x8000
c000fb78:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c000fb7f:	c7 05 78 ea 02 c0 fa f9 00 c0 	mov    DWORD PTR ds:0xc002ea78,0xc000f9fa
c000fb89:	c7 05 64 ea 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002ea64,0xc000f8a5
c000fb93:	c7 05 60 ea 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002ea60,0xc000f8ea
c000fb9d:	c7 05 6c ea 02 c0 40 fa 00 c0 	mov    DWORD PTR ds:0xc002ea6c,0xc000fa40
c000fba7:	c7 05 74 ea 02 c0 56 f9 00 c0 	mov    DWORD PTR ds:0xc002ea74,0xc000f956
c000fbb1:	c7 05 68 ea 02 c0 b1 f9 00 c0 	mov    DWORD PTR ds:0xc002ea68,0xc000f9b1
c000fbbb:	c7 05 70 ea 02 c0 b2 f9 00 c0 	mov    DWORD PTR ds:0xc002ea70,0xc000f9b2
c000fbc5:	c7 05 7c ea 02 c0 e1 fa 00 c0 	mov    DWORD PTR ds:0xc002ea7c,0xc000fae1
c000fbcf:	c3                   	ret    

c000fbd0 <kernel_main>:
c000fbd0:	57                   	push   edi
c000fbd1:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd6:	56                   	push   esi
c000fbd7:	89 fa                	mov    edx,edi
c000fbd9:	53                   	push   ebx
c000fbda:	31 f6                	xor    esi,esi
c000fbdc:	83 ec 2c             	sub    esp,0x2c
c000fbdf:	89 f0                	mov    eax,esi
c000fbe1:	ee                   	out    dx,al
c000fbe2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbe7:	b0 80                	mov    al,0x80
c000fbe9:	89 da                	mov    edx,ebx
c000fbeb:	ee                   	out    dx,al
c000fbec:	b1 03                	mov    cl,0x3
c000fbee:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbf3:	88 c8                	mov    al,cl
c000fbf5:	ee                   	out    dx,al
c000fbf6:	89 f0                	mov    eax,esi
c000fbf8:	89 fa                	mov    edx,edi
c000fbfa:	ee                   	out    dx,al
c000fbfb:	88 c8                	mov    al,cl
c000fbfd:	89 da                	mov    edx,ebx
c000fbff:	ee                   	out    dx,al
c000fc00:	b0 c7                	mov    al,0xc7
c000fc02:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc07:	ee                   	out    dx,al
c000fc08:	b0 0b                	mov    al,0xb
c000fc0a:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc0f:	ee                   	out    dx,al
c000fc10:	68 84 a6 02 c0       	push   0xc002a684
c000fc15:	e8 a9 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc1a:	e8 47 09 00 00       	call   c0010566 <installVgaTextImplementation()>
c000fc1f:	e8 3c ff ff ff       	call   c000fb60 <setupTextMode()>
c000fc24:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc29:	05 ff 0f 00 00       	add    eax,0xfff
c000fc2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc33:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc36:	e8 f3 03 00 00       	call   c001002e <Phys::physicalMemorySetup(unsigned int)>
c000fc3b:	e8 6e 1f 00 00       	call   c0011bae <Virt::virtualMemorySetup()>
c000fc40:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc4f:	75 0e                	jne    c000fc5f <kernel_main+0x8f>
c000fc51:	89 d8                	mov    eax,ebx
c000fc53:	25 48 03 00 00       	and    eax,0x348
c000fc58:	3d 00 03 00 00       	cmp    eax,0x300
c000fc5d:	74 10                	je     c000fc6f <kernel_main+0x9f>
c000fc5f:	83 ec 0c             	sub    esp,0xc
c000fc62:	68 09 c0 02 c0       	push   0xc002c009
c000fc67:	e8 eb a9 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	83 ec 0c             	sub    esp,0xc
c000fc72:	89 1d c0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9c0,ebx
c000fc78:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc7c:	53                   	push   ebx
c000fc7d:	e8 7e 21 00 00       	call   c0011e00 <VAS::VAS()>
c000fc82:	89 1d 30 eb 02 c0    	mov    DWORD PTR ds:0xc002eb30,ebx
c000fc88:	e8 93 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fc8d:	c7 04 24 9b a6 02 c0 	mov    DWORD PTR [esp],0xc002a69b
c000fc94:	e8 2a 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc99:	e8 8f 1f 00 00       	call   c0011c2d <Virt::swappingSetup()>
c000fc9e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fca5:	e8 a1 fb ff ff       	call   c000f84b <malloc>
c000fcaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcad:	89 c6                	mov    esi,eax
c000fcaf:	e8 8e ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcb4:	58                   	pop    eax
c000fcb5:	89 35 a8 e9 02 c0    	mov    DWORD PTR ds:0xc002e9a8,esi
c000fcbb:	5a                   	pop    edx
c000fcbc:	56                   	push   esi
c000fcbd:	68 b8 a6 02 c0       	push   0xc002a6b8
c000fcc2:	e8 fc 30 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fcc7:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c000fccc:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcce:	6a 00                	push   0x0
c000fcd0:	6a 00                	push   0x0
c000fcd2:	6a 00                	push   0x0
c000fcd4:	50                   	push   eax
c000fcd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcd8:	83 c4 14             	add    esp,0x14
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 cf 23 00 00       	call   c00120b0 <VAS::~VAS()>
c000fce1:	c7 04 24 cb a6 02 c0 	mov    DWORD PTR [esp],0xc002a6cb
c000fce8:	e8 6a a9 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000fced:	83 c4 30             	add    esp,0x30
c000fcf0:	5b                   	pop    ebx
c000fcf1:	5e                   	pop    esi
c000fcf2:	5f                   	pop    edi
c000fcf3:	c3                   	ret    

c000fcf4 <Phys::allocateDMA(unsigned long)>:
c000fcf4:	55                   	push   ebp
c000fcf5:	31 d2                	xor    edx,edx
c000fcf7:	57                   	push   edi
c000fcf8:	31 ed                	xor    ebp,ebp
c000fcfa:	56                   	push   esi
c000fcfb:	31 c9                	xor    ecx,ecx
c000fcfd:	53                   	push   ebx
c000fcfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd02:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd08:	31 c0                	xor    eax,eax
c000fd0a:	c1 ee 0c             	shr    esi,0xc
c000fd0d:	eb 17                	jmp    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd0f:	85 c9                	test   ecx,ecx
c000fd11:	75 04                	jne    c000fd17 <Phys::allocateDMA(unsigned long)+0x23>
c000fd13:	89 d5                	mov    ebp,edx
c000fd15:	89 d0                	mov    eax,edx
c000fd17:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd1a:	39 de                	cmp    esi,ebx
c000fd1c:	74 20                	je     c000fd3e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd1e:	42                   	inc    edx
c000fd1f:	89 d9                	mov    ecx,ebx
c000fd21:	83 fa 2f             	cmp    edx,0x2f
c000fd24:	7f 11                	jg     c000fd37 <Phys::allocateDMA(unsigned long)+0x43>
c000fd26:	80 ba 00 ea 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1600],0x0
c000fd2d:	74 e0                	je     c000fd0f <Phys::allocateDMA(unsigned long)+0x1b>
c000fd2f:	31 c9                	xor    ecx,ecx
c000fd31:	42                   	inc    edx
c000fd32:	83 fa 2f             	cmp    edx,0x2f
c000fd35:	7e ef                	jle    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	5b                   	pop    ebx
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	5e                   	pop    esi
c000fd3b:	5f                   	pop    edi
c000fd3c:	5d                   	pop    ebp
c000fd3d:	c3                   	ret    
c000fd3e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd41:	89 d7                	mov    edi,edx
c000fd43:	4f                   	dec    edi
c000fd44:	79 03                	jns    c000fd49 <Phys::allocateDMA(unsigned long)+0x55>
c000fd46:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd49:	c1 ff 04             	sar    edi,0x4
c000fd4c:	89 c2                	mov    edx,eax
c000fd4e:	c1 fa 04             	sar    edx,0x4
c000fd51:	39 fa                	cmp    edx,edi
c000fd53:	75 2f                	jne    c000fd84 <Phys::allocateDMA(unsigned long)+0x90>
c000fd55:	85 db                	test   ebx,ebx
c000fd57:	74 1a                	je     c000fd73 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd59:	be 00 ea 02 c0       	mov    esi,0xc002ea00
c000fd5e:	8d 90 00 ea 02 c0    	lea    edx,[eax-0x3ffd1600]
c000fd64:	f7 d6                	not    esi
c000fd66:	29 c6                	sub    esi,eax
c000fd68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd6b:	42                   	inc    edx
c000fd6c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd6f:	39 d9                	cmp    ecx,ebx
c000fd71:	7f f5                	jg     c000fd68 <Phys::allocateDMA(unsigned long)+0x74>
c000fd73:	85 ff                	test   edi,edi
c000fd75:	74 13                	je     c000fd8a <Phys::allocateDMA(unsigned long)+0x96>
c000fd77:	5b                   	pop    ebx
c000fd78:	05 50 20 0c 00       	add    eax,0xc2050
c000fd7d:	5e                   	pop    esi
c000fd7e:	c1 e0 0c             	shl    eax,0xc
c000fd81:	5f                   	pop    edi
c000fd82:	5d                   	pop    ebp
c000fd83:	c3                   	ret    
c000fd84:	89 ea                	mov    edx,ebp
c000fd86:	31 c9                	xor    ecx,ecx
c000fd88:	eb a7                	jmp    c000fd31 <Phys::allocateDMA(unsigned long)+0x3d>
c000fd8a:	5b                   	pop    ebx
c000fd8b:	c1 e0 0c             	shl    eax,0xc
c000fd8e:	5e                   	pop    esi
c000fd8f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fd94:	5f                   	pop    edi
c000fd95:	5d                   	pop    ebp
c000fd96:	c3                   	ret    

c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd9f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fda5:	c1 e9 0c             	shr    ecx,0xc
c000fda8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdad:	76 25                	jbe    c000fdd4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdaf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdb4:	c1 e8 0c             	shr    eax,0xc
c000fdb7:	8d 50 10             	lea    edx,[eax+0x10]
c000fdba:	85 c9                	test   ecx,ecx
c000fdbc:	74 15                	je     c000fdd3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdbe:	8d 82 00 ea 02 c0    	lea    eax,[edx-0x3ffd1600]
c000fdc4:	8d 94 11 00 ea 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1600]
c000fdcb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdce:	40                   	inc    eax
c000fdcf:	39 d0                	cmp    eax,edx
c000fdd1:	75 f8                	jne    c000fdcb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdd3:	c3                   	ret    
c000fdd4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdda:	c1 ea 0c             	shr    edx,0xc
c000fddd:	eb db                	jmp    c000fdba <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fddf <Phys::setPageState(unsigned long, bool)>:
c000fddf:	56                   	push   esi
c000fde0:	ba 01 00 00 00       	mov    edx,0x1
c000fde5:	53                   	push   ebx
c000fde6:	8b 35 cc d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8cc
c000fdec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf4:	89 c8                	mov    eax,ecx
c000fdf6:	83 e1 07             	and    ecx,0x7
c000fdf9:	c1 e8 03             	shr    eax,0x3
c000fdfc:	d3 e3                	shl    ebx,cl
c000fdfe:	01 c6                	add    esi,eax
c000fe00:	d3 e2                	shl    edx,cl
c000fe02:	f7 d2                	not    edx
c000fe04:	20 16                	and    BYTE PTR [esi],dl
c000fe06:	03 05 cc d8 02 c0    	add    eax,DWORD PTR ds:0xc002d8cc
c000fe0c:	08 18                	or     BYTE PTR [eax],bl
c000fe0e:	5b                   	pop    ebx
c000fe0f:	5e                   	pop    esi
c000fe10:	c3                   	ret    

c000fe11 <Phys::getPageState(unsigned long)>:
c000fe11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe15:	8b 15 cc d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8cc
c000fe1b:	89 c8                	mov    eax,ecx
c000fe1d:	83 e1 07             	and    ecx,0x7
c000fe20:	c1 e8 03             	shr    eax,0x3
c000fe23:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe27:	d3 f8                	sar    eax,cl
c000fe29:	83 e0 01             	and    eax,0x1
c000fe2c:	c3                   	ret    

c000fe2d <Phys::freePage(unsigned long)>:
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe35:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe3b:	76 57                	jbe    c000fe94 <Phys::freePage(unsigned long)+0x67>
c000fe3d:	c1 eb 0c             	shr    ebx,0xc
c000fe40:	53                   	push   ebx
c000fe41:	e8 cb ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fe46:	5a                   	pop    edx
c000fe47:	84 c0                	test   al,al
c000fe49:	74 5b                	je     c000fea6 <Phys::freePage(unsigned long)+0x79>
c000fe4b:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c000fe50:	48                   	dec    eax
c000fe51:	a3 f0 e9 02 c0       	mov    ds:0xc002e9f0,eax
c000fe56:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe59:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe5c:	c1 e0 02             	shl    eax,0x2
c000fe5f:	99                   	cdq    
c000fe60:	f7 3d f4 e9 02 c0    	idiv   DWORD PTR ds:0xc002e9f4
c000fe66:	39 05 ec e9 02 c0    	cmp    DWORD PTR ds:0xc002e9ec,eax
c000fe6c:	75 13                	jne    c000fe81 <Phys::freePage(unsigned long)+0x54>
c000fe6e:	83 ec 08             	sub    esp,0x8
c000fe71:	6a 00                	push   0x0
c000fe73:	53                   	push   ebx
c000fe74:	e8 66 ff ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	83 c4 08             	add    esp,0x8
c000fe7f:	5b                   	pop    ebx
c000fe80:	c3                   	ret    
c000fe81:	83 ec 0c             	sub    esp,0xc
c000fe84:	a3 ec e9 02 c0       	mov    ds:0xc002e9ec,eax
c000fe89:	50                   	push   eax
c000fe8a:	e8 05 0a 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	eb da                	jmp    c000fe6e <Phys::freePage(unsigned long)+0x41>
c000fe94:	68 00 10 00 00       	push   0x1000
c000fe99:	53                   	push   ebx
c000fe9a:	e8 f8 fe ff ff       	call   c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe9f:	59                   	pop    ecx
c000fea0:	5b                   	pop    ebx
c000fea1:	83 c4 08             	add    esp,0x8
c000fea4:	5b                   	pop    ebx
c000fea5:	c3                   	ret    
c000fea6:	c7 44 24 10 e6 a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a6e6
c000feae:	83 c4 08             	add    esp,0x8
c000feb1:	5b                   	pop    ebx
c000feb2:	e9 a0 a7 00 00       	jmp    c001a657 <Krnl::panic(char const*)>

c000feb7 <Phys::allocatePage()>:
c000feb7:	56                   	push   esi
c000feb8:	53                   	push   ebx
c000feb9:	51                   	push   ecx
c000feba:	8b 35 e4 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e9e4
c000fec0:	89 f3                	mov    ebx,esi
c000fec2:	eb 0a                	jmp    c000fece <Phys::allocatePage()+0x17>
c000fec4:	89 1d e4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e4,ebx
c000feca:	39 de                	cmp    esi,ebx
c000fecc:	74 24                	je     c000fef2 <Phys::allocatePage()+0x3b>
c000fece:	53                   	push   ebx
c000fecf:	e8 3d ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fed4:	5a                   	pop    edx
c000fed5:	84 c0                	test   al,al
c000fed7:	74 77                	je     c000ff50 <Phys::allocatePage()+0x99>
c000fed9:	43                   	inc    ebx
c000feda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fee0:	75 e2                	jne    c000fec4 <Phys::allocatePage()+0xd>
c000fee2:	31 db                	xor    ebx,ebx
c000fee4:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c000feee:	39 de                	cmp    esi,ebx
c000fef0:	75 dc                	jne    c000fece <Phys::allocatePage()+0x17>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fefa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fefd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff03:	e8 e8 2b 00 00       	call   c0012af0 <VAS::scanForEviction()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	85 c0                	test   eax,eax
c000ff0d:	75 76                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 fc a6 02 c0       	push   0xc002a6fc
c000ff17:	e8 a7 2e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ff1c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff23:	e8 cc fd ff ff       	call   c000fcf4 <Phys::allocateDMA(unsigned long)>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	85 c0                	test   eax,eax
c000ff2d:	75 56                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	68 0d a7 02 c0       	push   0xc002a70d
c000ff37:	e8 1b a7 00 00       	call   c001a657 <Krnl::panic(char const*)>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	8b 1d e4 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9e4
c000ff45:	53                   	push   ebx
c000ff46:	e8 c6 fe ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000ff4b:	5a                   	pop    edx
c000ff4c:	84 c0                	test   al,al
c000ff4e:	75 89                	jne    c000fed9 <Phys::allocatePage()+0x22>
c000ff50:	6a 01                	push   0x1
c000ff52:	53                   	push   ebx
c000ff53:	e8 87 fe ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000ff58:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c000ff5d:	59                   	pop    ecx
c000ff5e:	40                   	inc    eax
c000ff5f:	5b                   	pop    ebx
c000ff60:	a3 f0 e9 02 c0       	mov    ds:0xc002e9f0,eax
c000ff65:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff68:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6b:	c1 e0 02             	shl    eax,0x2
c000ff6e:	99                   	cdq    
c000ff6f:	f7 3d f4 e9 02 c0    	idiv   DWORD PTR ds:0xc002e9f4
c000ff75:	39 05 ec e9 02 c0    	cmp    DWORD PTR ds:0xc002e9ec,eax
c000ff7b:	75 0c                	jne    c000ff89 <Phys::allocatePage()+0xd2>
c000ff7d:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c000ff82:	c1 e0 0c             	shl    eax,0xc
c000ff85:	5a                   	pop    edx
c000ff86:	5b                   	pop    ebx
c000ff87:	5e                   	pop    esi
c000ff88:	c3                   	ret    
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	a3 ec e9 02 c0       	mov    ds:0xc002e9ec,eax
c000ff91:	50                   	push   eax
c000ff92:	e8 fd 08 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	eb e1                	jmp    c000ff7d <Phys::allocatePage()+0xc6>

c000ff9c <Phys::allocateContiguousPages(int)>:
c000ff9c:	57                   	push   edi
c000ff9d:	56                   	push   esi
c000ff9e:	53                   	push   ebx
c000ff9f:	31 db                	xor    ebx,ebx
c000ffa1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffa5:	e8 4a df 00 00       	call   c001def4 <lockScheduler()>
c000ffaa:	85 db                	test   ebx,ebx
c000ffac:	75 11                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffae:	e8 04 ff ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffb3:	83 ff 01             	cmp    edi,0x1
c000ffb6:	89 c6                	mov    esi,eax
c000ffb8:	74 21                	je     c000ffdb <Phys::allocateContiguousPages(int)+0x3f>
c000ffba:	bb 01 00 00 00       	mov    ebx,0x1
c000ffbf:	e8 f3 fe ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffc4:	89 da                	mov    edx,ebx
c000ffc6:	c1 e2 0c             	shl    edx,0xc
c000ffc9:	01 f2                	add    edx,esi
c000ffcb:	39 c2                	cmp    edx,eax
c000ffcd:	74 17                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x4a>
c000ffcf:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd4:	89 c6                	mov    esi,eax
c000ffd6:	83 ff 01             	cmp    edi,0x1
c000ffd9:	75 e4                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffdb:	e8 16 df 00 00       	call   c001def6 <unlockScheduler()>
c000ffe0:	89 f0                	mov    eax,esi
c000ffe2:	5b                   	pop    ebx
c000ffe3:	5e                   	pop    esi
c000ffe4:	5f                   	pop    edi
c000ffe5:	c3                   	ret    
c000ffe6:	43                   	inc    ebx
c000ffe7:	39 fb                	cmp    ebx,edi
c000ffe9:	75 bf                	jne    c000ffaa <Phys::allocateContiguousPages(int)+0xe>
c000ffeb:	e8 06 df 00 00       	call   c001def6 <unlockScheduler()>
c000fff0:	89 f0                	mov    eax,esi
c000fff2:	5b                   	pop    ebx
c000fff3:	5e                   	pop    esi
c000fff4:	5f                   	pop    edi
c000fff5:	c3                   	ret    

c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fffc:	39 1d e8 e9 02 c0    	cmp    DWORD PTR ds:0xc002e9e8,ebx
c0010002:	73 06                	jae    c001000a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010004:	89 1d e8 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e8,ebx
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	c1 eb 0c             	shr    ebx,0xc
c0010011:	c1 e8 0c             	shr    eax,0xc
c0010014:	39 d8                	cmp    eax,ebx
c0010016:	73 13                	jae    c001002b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010018:	6a 00                	push   0x0
c001001a:	8d 70 01             	lea    esi,[eax+0x1]
c001001d:	50                   	push   eax
c001001e:	e8 bc fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010023:	5a                   	pop    edx
c0010024:	89 f0                	mov    eax,esi
c0010026:	59                   	pop    ecx
c0010027:	39 f3                	cmp    ebx,esi
c0010029:	75 ed                	jne    c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002b:	5b                   	pop    ebx
c001002c:	5e                   	pop    esi
c001002d:	c3                   	ret    

c001002e <Phys::physicalMemorySetup(unsigned int)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	31 db                	xor    ebx,ebx
c0010034:	83 ec 40             	sub    esp,0x40
c0010037:	6a 30                	push   0x30
c0010039:	6a 00                	push   0x0
c001003b:	68 00 ea 02 c0       	push   0xc002ea00
c0010040:	e8 3b 07 ff ff       	call   c0000780 <memset>
c0010045:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001004e:	05 00 10 00 00       	add    eax,0x1000
c0010053:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 01                	push   0x1
c001005f:	53                   	push   ebx
c0010060:	43                   	inc    ebx
c0010061:	e8 79 fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001006f:	75 e9                	jne    c001005a <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010071:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010078:	66 85 c0             	test   ax,ax
c001007b:	0f 84 8e 01 00 00    	je     c001020f <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010081:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010085:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001008d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010091:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010096:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001009a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100a2:	eb 15                	jmp    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100a4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100a8:	83 c3 18             	add    ebx,0x18
c00100ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100af:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100b3:	0f 84 66 01 00 00    	je     c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100b9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100bf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ca:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100cc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100cf:	01 f0                	add    eax,esi
c00100d1:	55                   	push   ebp
c00100d2:	11 fa                	adc    edx,edi
c00100d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e0:	56                   	push   esi
c00100e1:	68 48 a7 02 c0       	push   0xc002a748
c00100e6:	e8 d8 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	09 f8                	or     eax,edi
c00100f4:	0f 85 25 01 00 00    	jne    c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fa:	4d                   	dec    ebp
c00100fb:	75 a7                	jne    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00100fd:	ba 00 00 08 00       	mov    edx,0x80000
c0010102:	89 c1                	mov    ecx,eax
c0010104:	39 f2                	cmp    edx,esi
c0010106:	19 f9                	sbb    ecx,edi
c0010108:	0f 82 a7 00 00 00    	jb     c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001010e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010112:	89 c1                	mov    ecx,eax
c0010114:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010118:	0f 83 97 00 00 00    	jae    c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010123:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010127:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001012b:	39 fa                	cmp    edx,edi
c001012d:	19 e8                	sbb    eax,ebp
c001012f:	0f 82 14 01 00 00    	jb     c0010249 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010135:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010139:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010143:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010148:	83 d5 ff             	adc    ebp,0xffffffff
c001014b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001014f:	31 c0                	xor    eax,eax
c0010151:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010155:	39 fa                	cmp    edx,edi
c0010157:	89 c1                	mov    ecx,eax
c0010159:	19 e9                	sbb    ecx,ebp
c001015b:	0f 83 43 ff ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010161:	be 00 00 08 00       	mov    esi,0x80000
c0010166:	50                   	push   eax
c0010167:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001016b:	57                   	push   edi
c001016c:	56                   	push   esi
c001016d:	68 6c a7 02 c0       	push   0xc002a76c
c0010172:	e8 4c 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010177:	5a                   	pop    edx
c0010178:	59                   	pop    ecx
c0010179:	57                   	push   edi
c001017a:	56                   	push   esi
c001017b:	e8 76 fe ff ff       	call   c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010180:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010188:	83 c4 0c             	add    esp,0xc
c001018b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001018f:	03 05 f4 e9 02 c0    	add    eax,DWORD PTR ds:0xc002e9f4
c0010195:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019c:	a3 f4 e9 02 c0       	mov    ds:0xc002e9f4,eax
c00101a1:	52                   	push   edx
c00101a2:	50                   	push   eax
c00101a3:	68 29 a7 02 c0       	push   0xc002a729
c00101a8:	e8 16 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	e9 ef fe ff ff       	jmp    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101b5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101c1:	39 ea                	cmp    edx,ebp
c00101c3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101c7:	0f 82 d7 fe ff ff    	jb     c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cd:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101d6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101da:	0f 83 c4 fe ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e0:	39 ee                	cmp    esi,ebp
c00101e2:	89 f8                	mov    eax,edi
c00101e4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101e8:	0f 83 78 ff ff ff    	jae    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00101fe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010206:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001020a:	e9 57 ff ff ff       	jmp    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	68 1b a7 02 c0       	push   0xc002a71b
c0010217:	e8 3b a4 00 00       	call   c001a657 <Krnl::panic(char const*)>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	bb 40 01 00 00       	mov    ebx,0x140
c0010224:	83 ec 08             	sub    esp,0x8
c0010227:	6a 00                	push   0x0
c0010229:	53                   	push   ebx
c001022a:	43                   	inc    ebx
c001022b:	e8 af fb ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010230:	ff 05 f4 e9 02 c0    	inc    DWORD PTR ds:0xc002e9f4
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001023f:	75 e3                	jne    c0010224 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010241:	83 c4 3c             	add    esp,0x3c
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	5d                   	pop    ebp
c0010248:	c3                   	ret    
c0010249:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010251:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010259:	e9 d7 fe ff ff       	jmp    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001025e <Pipe::isAtty()>:
c001025e:	31 c0                	xor    eax,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <Pipe::~Pipe()>:
c0010262:	83 ec 0c             	sub    esp,0xc
c0010265:	ba d8 a7 02 c0       	mov    edx,0xc002a7d8
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	89 10                	mov    DWORD PTR [eax],edx
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	50                   	push   eax
c0010278:	e8 11 15 00 00       	call   c001178e <UnixFile::~UnixFile()>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	90                   	nop
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Pipe::~Pipe()>:
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	83 ec 0c             	sub    esp,0xc
c001028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010290:	e8 cd ff ff ff       	call   c0010262 <Pipe::~Pipe()>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	6a 20                	push   0x20
c001029d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a1:	e8 3d 2a 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	83 c4 0c             	add    esp,0xc
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <Pipe::read(unsigned long long, void*, int*)>:
c00102ae:	55                   	push   ebp
c00102af:	57                   	push   edi
c00102b0:	56                   	push   esi
c00102b1:	53                   	push   ebx
c00102b2:	83 ec 1c             	sub    esp,0x1c
c00102b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102c4:	89 c8                	mov    eax,ecx
c00102c6:	99                   	cdq    
c00102c7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102cb:	74 19                	je     c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102cd:	39 f9                	cmp    ecx,edi
c00102cf:	89 d1                	mov    ecx,edx
c00102d1:	19 f1                	sbb    ecx,esi
c00102d3:	73 11                	jae    c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d5:	e8 1a dc 00 00       	call   c001def4 <lockScheduler()>
c00102da:	e8 8b df 00 00       	call   c001e26a <schedule()>
c00102df:	e8 12 dc 00 00       	call   c001def6 <unlockScheduler()>
c00102e4:	eb db                	jmp    c00102c1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e6:	39 f8                	cmp    eax,edi
c00102e8:	89 d1                	mov    ecx,edx
c00102ea:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102ee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102f2:	19 f1                	sbb    ecx,esi
c00102f4:	73 08                	jae    c00102fe <Pipe::read(unsigned long long, void*, int*)+0x50>
c00102f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010301:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010304:	29 c6                	sub    esi,eax
c0010306:	89 f1                	mov    ecx,esi
c0010308:	c1 f9 1f             	sar    ecx,0x1f
c001030b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001030f:	89 ca                	mov    edx,ecx
c0010311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010315:	19 d1                	sbb    ecx,edx
c0010317:	73 04                	jae    c001031d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010319:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001031d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010321:	89 fd                	mov    ebp,edi
c0010323:	29 f5                	sub    ebp,esi
c0010325:	85 f6                	test   esi,esi
c0010327:	74 12                	je     c001033b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010329:	52                   	push   edx
c001032a:	56                   	push   esi
c001032b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001032e:	50                   	push   eax
c001032f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010333:	e8 14 04 ff ff       	call   c000074c <memcpy>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 ed                	test   ebp,ebp
c001033d:	74 12                	je     c0010351 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001033f:	50                   	push   eax
c0010340:	55                   	push   ebp
c0010341:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010344:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010348:	56                   	push   esi
c0010349:	e8 fe 03 ff ff       	call   c000074c <memcpy>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010354:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010357:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001035a:	99                   	cdq    
c001035b:	89 f7                	mov    edi,esi
c001035d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010361:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010365:	c1 ff 1f             	sar    edi,0x1f
c0010368:	57                   	push   edi
c0010369:	56                   	push   esi
c001036a:	52                   	push   edx
c001036b:	50                   	push   eax
c001036c:	e8 c3 6a 01 00       	call   c0026e34 <__umoddi3>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010377:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001037c:	75 10                	jne    c001038e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	68 95 a7 02 c0       	push   0xc002a795
c0010386:	e8 cc a2 00 00       	call   c001a657 <Krnl::panic(char const*)>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010396:	89 10                	mov    DWORD PTR [eax],edx
c0010398:	83 c4 1c             	add    esp,0x1c
c001039b:	31 c0                	xor    eax,eax
c001039d:	5b                   	pop    ebx
c001039e:	5e                   	pop    esi
c001039f:	5f                   	pop    edi
c00103a0:	5d                   	pop    ebp
c00103a1:	c3                   	ret    

c00103a2 <Pipe::write(unsigned long long, void*, int*)>:
c00103a2:	55                   	push   ebp
c00103a3:	57                   	push   edi
c00103a4:	56                   	push   esi
c00103a5:	53                   	push   ebx
c00103a6:	83 ec 1c             	sub    esp,0x1c
c00103a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103b8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103bb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c2:	89 de                	mov    esi,ebx
c00103c4:	89 df                	mov    edi,ebx
c00103c6:	c1 ff 1f             	sar    edi,0x1f
c00103c9:	01 c6                	add    esi,eax
c00103cb:	89 c8                	mov    eax,ecx
c00103cd:	11 d7                	adc    edi,edx
c00103cf:	99                   	cdq    
c00103d0:	39 f1                	cmp    ecx,esi
c00103d2:	89 d0                	mov    eax,edx
c00103d4:	19 f8                	sbb    eax,edi
c00103d6:	b8 01 00 00 00       	mov    eax,0x1
c00103db:	0f 82 80 00 00 00    	jb     c0010461 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103e7:	01 d8                	add    eax,ebx
c00103e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103ed:	99                   	cdq    
c00103ee:	f7 f9                	idiv   ecx
c00103f0:	29 d1                	sub    ecx,edx
c00103f2:	89 d7                	mov    edi,edx
c00103f4:	89 c8                	mov    eax,ecx
c00103f6:	99                   	cdq    
c00103f7:	39 ce                	cmp    esi,ecx
c00103f9:	19 d3                	sbb    ebx,edx
c00103fb:	bb 00 00 00 00       	mov    ebx,0x0
c0010400:	72 04                	jb     c0010406 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010402:	89 f3                	mov    ebx,esi
c0010404:	29 cb                	sub    ebx,ecx
c0010406:	89 f1                	mov    ecx,esi
c0010408:	29 d9                	sub    ecx,ebx
c001040a:	74 1a                	je     c0010426 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001040c:	52                   	push   edx
c001040d:	51                   	push   ecx
c001040e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010416:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010419:	57                   	push   edi
c001041a:	e8 2d 03 ff ff       	call   c000074c <memcpy>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010426:	85 db                	test   ebx,ebx
c0010428:	74 12                	je     c001043c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001042a:	50                   	push   eax
c001042b:	53                   	push   ebx
c001042c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010430:	51                   	push   ecx
c0010431:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010434:	e8 13 03 ff ff       	call   c000074c <memcpy>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001043f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010444:	75 10                	jne    c0010456 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	68 b1 a7 02 c0       	push   0xc002a7b1
c001044e:	e8 04 a2 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001045d:	89 38                	mov    DWORD PTR [eax],edi
c001045f:	31 c0                	xor    eax,eax
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <Pipe::Pipe(int)>:
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	83 ec 08             	sub    esp,0x8
c0010474:	6a 00                	push   0x0
c0010476:	50                   	push   eax
c0010477:	e8 30 11 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	ba d8 a7 02 c0       	mov    edx,0xc002a7d8
c0010484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010488:	89 10                	mov    DWORD PTR [eax],edx
c001048a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010492:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010499:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 93 f3 ff ff       	call   c000f84b <malloc>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	89 c2                	mov    edx,eax
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104cc:	90                   	nop
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	c3                   	ret    
c00104d1:	90                   	nop

c00104d2 <VgaText::isAtty()>:
c00104d2:	b0 01                	mov    al,0x1
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <VgaText::~VgaText()>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	89 10                	mov    DWORD PTR [eax],edx
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	50                   	push   eax
c00104ec:	e8 9d 12 00 00       	call   c001178e <UnixFile::~UnixFile()>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	90                   	nop
c00104f5:	83 c4 0c             	add    esp,0xc
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <VgaText::~VgaText()>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010504:	e8 cd ff ff ff       	call   c00104d6 <VgaText::~VgaText()>
c0010509:	83 c4 10             	add    esp,0x10
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 c4 02 00 00       	push   0x2c4
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 c6 27 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	83 c4 0c             	add    esp,0xc
c0010523:	c3                   	ret    

c0010524 <VgaText::read(unsigned long long, void*, int*)>:
c0010524:	83 ec 10             	sub    esp,0x10
c0010527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001052f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010533:	e8 bc 5c 00 00       	call   c00161f4 <readKeyboard(VgaText*, char*, unsigned long)>
c0010538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001053c:	89 02                	mov    DWORD PTR [edx],eax
c001053e:	31 c0                	xor    eax,eax
c0010540:	83 c4 1c             	add    esp,0x1c
c0010543:	c3                   	ret    

c0010544 <setTerminalScrollLock(bool)>:
c0010544:	c3                   	ret    

c0010545 <addToTerminalCycle(VgaText*)>:
c0010545:	8b 15 80 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea80
c001054b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054f:	85 d2                	test   edx,edx
c0010551:	75 09                	jne    c001055c <addToTerminalCycle(VgaText*)+0x17>
c0010553:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010556:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c001055b:	c3                   	ret    
c001055c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001055f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010562:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010565:	c3                   	ret    

c0010566 <installVgaTextImplementation()>:
c0010566:	83 ec 10             	sub    esp,0x10
c0010569:	6a 20                	push   0x20
c001056b:	6a 00                	push   0x0
c001056d:	68 60 ea 02 c0       	push   0xc002ea60
c0010572:	e8 09 02 ff ff       	call   c0000780 <memset>
c0010577:	83 c4 1c             	add    esp,0x1c
c001057a:	c3                   	ret    

c001057b <scrollTerminalScrollLock(int)>:
c001057b:	c3                   	ret    

c001057c <VgaText::load()>:
c001057c:	53                   	push   ebx
c001057d:	31 c0                	xor    eax,eax
c001057f:	83 ec 58             	sub    esp,0x58
c0010582:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010586:	89 e2                	mov    edx,esp
c0010588:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001058c:	40                   	inc    eax
c001058d:	83 f8 50             	cmp    eax,0x50
c0010590:	75 f6                	jne    c0010588 <VgaText::load()+0xc>
c0010592:	31 c0                	xor    eax,eax
c0010594:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001059b:	84 c9                	test   cl,cl
c001059d:	74 06                	je     c00105a5 <VgaText::load()+0x29>
c001059f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105a2:	40                   	inc    eax
c00105a3:	eb ef                	jmp    c0010594 <VgaText::load()+0x18>
c00105a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105a8:	85 c0                	test   eax,eax
c00105aa:	74 09                	je     c00105b5 <VgaText::load()+0x39>
c00105ac:	51                   	push   ecx
c00105ad:	51                   	push   ecx
c00105ae:	52                   	push   edx
c00105af:	53                   	push   ebx
c00105b0:	ff d0                	call   eax
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105b8:	85 c0                	test   eax,eax
c00105ba:	74 09                	je     c00105c5 <VgaText::load()+0x49>
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	53                   	push   ebx
c00105c0:	ff d0                	call   eax
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	83 c4 58             	add    esp,0x58
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <VgaText::updateCursor()>:
c00105ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ce:	39 05 84 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea84,eax
c00105d4:	75 09                	jne    c00105df <VgaText::updateCursor()+0x15>
c00105d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 02                	je     c00105df <VgaText::updateCursor()+0x15>
c00105dd:	ff e0                	jmp    eax
c00105df:	c3                   	ret    

c00105e0 <VgaText::showCursor(bool)>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00105eb:	c3                   	ret    

c00105ec <VgaText::disableBlink(bool)>:
c00105ec:	56                   	push   esi
c00105ed:	53                   	push   ebx
c00105ee:	51                   	push   ecx
c00105ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105f7:	39 1d 84 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea84,ebx
c00105fd:	75 15                	jne    c0010614 <VgaText::disableBlink(bool)+0x28>
c00105ff:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 0e                	je     c0010614 <VgaText::disableBlink(bool)+0x28>
c0010606:	89 f1                	mov    ecx,esi
c0010608:	52                   	push   edx
c0010609:	52                   	push   edx
c001060a:	0f b6 d1             	movzx  edx,cl
c001060d:	52                   	push   edx
c001060e:	53                   	push   ebx
c001060f:	ff d0                	call   eax
c0010611:	83 c4 10             	add    esp,0x10
c0010614:	89 f0                	mov    eax,esi
c0010616:	83 f0 01             	xor    eax,0x1
c0010619:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001061c:	58                   	pop    eax
c001061d:	5b                   	pop    ebx
c001061e:	5e                   	pop    esi
c001061f:	c3                   	ret    

c0010620 <VgaText::doANSI_SGR(int)>:
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	85 d2                	test   edx,edx
c001062a:	75 0b                	jne    c0010637 <VgaText::doANSI_SGR(int)+0x17>
c001062c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001062f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010632:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010635:	eb 59                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010637:	83 fa 07             	cmp    edx,0x7
c001063a:	75 0b                	jne    c0010647 <VgaText::doANSI_SGR(int)+0x27>
c001063c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001063f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010642:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010645:	eb 49                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010647:	83 fa 1b             	cmp    edx,0x1b
c001064a:	74 e0                	je     c001062c <VgaText::doANSI_SGR(int)+0xc>
c001064c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001064f:	83 f9 07             	cmp    ecx,0x7
c0010652:	77 09                	ja     c001065d <VgaText::doANSI_SGR(int)+0x3d>
c0010654:	8b 14 8d 00 d9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2700]
c001065b:	eb 20                	jmp    c001067d <VgaText::doANSI_SGR(int)+0x5d>
c001065d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010660:	83 f9 07             	cmp    ecx,0x7
c0010663:	77 09                	ja     c001066e <VgaText::doANSI_SGR(int)+0x4e>
c0010665:	8b 14 8d 00 d9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2700]
c001066c:	eb 22                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c001066e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010671:	83 f9 07             	cmp    ecx,0x7
c0010674:	77 0b                	ja     c0010681 <VgaText::doANSI_SGR(int)+0x61>
c0010676:	8b 14 95 b8 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2848]
c001067d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010680:	c3                   	ret    
c0010681:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010684:	83 f9 07             	cmp    ecx,0x7
c0010687:	77 0a                	ja     c0010693 <VgaText::doANSI_SGR(int)+0x73>
c0010689:	8b 14 95 90 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2870]
c0010690:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010693:	c3                   	ret    

c0010694 <VgaText::setDefaultBgColour(VgaColour)>:
c0010694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001069c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001069f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00106a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106b2:	c3                   	ret    
c00106b3:	90                   	nop

c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106b4:	53                   	push   ebx
c00106b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00106bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106c1:	51                   	push   ecx
c00106c2:	e8 cd ff ff ff       	call   c0010694 <VgaText::setDefaultBgColour(VgaColour)>
c00106c7:	58                   	pop    eax
c00106c8:	5a                   	pop    edx
c00106c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00106cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00106d1:	5b                   	pop    ebx
c00106d2:	eb d0                	jmp    c00106a4 <VgaText::setDefaultFgColour(VgaColour)>

c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00106d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00106d8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00106dd:	83 e0 0f             	and    eax,0xf
c00106e0:	c1 e2 04             	shl    edx,0x4
c00106e3:	09 d0                	or     eax,edx
c00106e5:	c3                   	ret    

c00106e6 <VgaText::scrollScreen()>:
c00106e6:	55                   	push   ebp
c00106e7:	b9 01 00 00 00       	mov    ecx,0x1
c00106ec:	57                   	push   edi
c00106ed:	56                   	push   esi
c00106ee:	53                   	push   ebx
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106f6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00106fc:	31 ff                	xor    edi,edi
c00106fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010701:	83 f9 17             	cmp    ecx,0x17
c0010704:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010707:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001070e:	75 27                	jne    c0010737 <VgaText::scrollScreen()+0x51>
c0010710:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010713:	01 f5                	add    ebp,esi
c0010715:	f7 c7 01 00 00 00    	test   edi,0x1
c001071b:	74 16                	je     c0010733 <VgaText::scrollScreen()+0x4d>
c001071d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010721:	50                   	push   eax
c0010722:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010726:	50                   	push   eax
c0010727:	e8 a8 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c001072c:	5a                   	pop    edx
c001072d:	5a                   	pop    edx
c001072e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010731:	eb 04                	jmp    c0010737 <VgaText::scrollScreen()+0x51>
c0010733:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010737:	47                   	inc    edi
c0010738:	46                   	inc    esi
c0010739:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001073f:	75 bd                	jne    c00106fe <VgaText::scrollScreen()+0x18>
c0010741:	41                   	inc    ecx
c0010742:	83 f9 18             	cmp    ecx,0x18
c0010745:	75 af                	jne    c00106f6 <VgaText::scrollScreen()+0x10>
c0010747:	39 1d 84 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea84,ebx
c001074d:	75 1b                	jne    c001076a <VgaText::scrollScreen()+0x84>
c001074f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010753:	74 05                	je     c001075a <VgaText::scrollScreen()+0x74>
c0010755:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010758:	eb 10                	jmp    c001076a <VgaText::scrollScreen()+0x84>
c001075a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001075d:	85 c0                	test   eax,eax
c001075f:	74 09                	je     c001076a <VgaText::scrollScreen()+0x84>
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	53                   	push   ebx
c0010765:	ff d0                	call   eax
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001076e:	83 c4 0c             	add    esp,0xc
c0010771:	5b                   	pop    ebx
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	5d                   	pop    ebp
c0010775:	e9 50 fe ff ff       	jmp    c00105ca <VgaText::updateCursor()>

c001077a <VgaText::combineCharAndColour(char, unsigned char)>:
c001077a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001077f:	c1 e0 08             	shl    eax,0x8
c0010782:	89 c2                	mov    edx,eax
c0010784:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001078c:	56                   	push   esi
c001078d:	53                   	push   ebx
c001078e:	51                   	push   ecx
c001078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010793:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010798:	50                   	push   eax
c0010799:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001079e:	50                   	push   eax
c001079f:	e8 30 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00107a4:	5b                   	pop    ebx
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	5e                   	pop    esi
c00107a9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ae:	50                   	push   eax
c00107af:	53                   	push   ebx
c00107b0:	e8 c5 ff ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5a                   	pop    edx
c00107b6:	5e                   	pop    esi
c00107b7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107ba:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00107c0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00107c4:	0f b7 d2             	movzx  edx,dx
c00107c7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00107cb:	39 0d 84 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea84,ecx
c00107d1:	75 10                	jne    c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107d3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00107d6:	85 c0                	test   eax,eax
c00107d8:	74 09                	je     c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107da:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00107de:	5a                   	pop    edx
c00107df:	5b                   	pop    ebx
c00107e0:	5e                   	pop    esi
c00107e1:	ff e0                	jmp    eax
c00107e3:	58                   	pop    eax
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <VgaText::getCursorX()>:
c00107e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00107ef:	c3                   	ret    

c00107f0 <VgaText::getCursorY()>:
c00107f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00107f7:	c3                   	ret    

c00107f8 <VgaText::setCursor(int, int)>:
c00107f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010800:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001080a:	e9 bb fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001080f:	90                   	nop

c0010810 <VgaText::setCursorX(int)>:
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010817:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001081a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081e:	50                   	push   eax
c001081f:	e8 d4 ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010824:	83 c4 1c             	add    esp,0x1c
c0010827:	c3                   	ret    

c0010828 <VgaText::setCursorY(int)>:
c0010828:	83 ec 10             	sub    esp,0x10
c001082b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001082f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010833:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010836:	50                   	push   eax
c0010837:	e8 bc ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <VgaText::incrementCursor(bool)>:
c0010840:	56                   	push   esi
c0010841:	53                   	push   ebx
c0010842:	51                   	push   ecx
c0010843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010847:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001084b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001084e:	40                   	inc    eax
c001084f:	83 f8 50             	cmp    eax,0x50
c0010852:	74 05                	je     c0010859 <VgaText::incrementCursor(bool)+0x19>
c0010854:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010857:	eb 24                	jmp    c001087d <VgaText::incrementCursor(bool)+0x3d>
c0010859:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001085c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010863:	8d 50 01             	lea    edx,[eax+0x1]
c0010866:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010869:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001086c:	75 0f                	jne    c001087d <VgaText::incrementCursor(bool)+0x3d>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010874:	53                   	push   ebx
c0010875:	e8 6c fe ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	89 f0                	mov    eax,esi
c001087f:	84 c0                	test   al,al
c0010881:	74 0c                	je     c001088f <VgaText::incrementCursor(bool)+0x4f>
c0010883:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010887:	5a                   	pop    edx
c0010888:	5b                   	pop    ebx
c0010889:	5e                   	pop    esi
c001088a:	e9 3b fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    
c0010893:	90                   	nop

c0010894 <VgaText::updateRAMUsageDisplay(int)>:
c0010894:	56                   	push   esi
c0010895:	8b 35 e0 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8e0
c001089b:	53                   	push   ebx
c001089c:	bb 0a 00 00 00       	mov    ebx,0xa
c00108a1:	6a 0f                	push   0xf
c00108a3:	6a 00                	push   0x0
c00108a5:	e8 2a fe ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00108aa:	5a                   	pop    edx
c00108ab:	59                   	pop    ecx
c00108ac:	0f b6 c8             	movzx  ecx,al
c00108af:	51                   	push   ecx
c00108b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b4:	99                   	cdq    
c00108b5:	f7 fb                	idiv   ebx
c00108b7:	89 d3                	mov    ebx,edx
c00108b9:	83 c0 30             	add    eax,0x30
c00108bc:	83 c3 30             	add    ebx,0x30
c00108bf:	0f be c0             	movsx  eax,al
c00108c2:	0f b6 db             	movzx  ebx,bl
c00108c5:	50                   	push   eax
c00108c6:	e8 af fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108cb:	5a                   	pop    edx
c00108cc:	5a                   	pop    edx
c00108cd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00108d4:	51                   	push   ecx
c00108d5:	53                   	push   ebx
c00108d6:	e8 9f fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108db:	5b                   	pop    ebx
c00108dc:	5a                   	pop    edx
c00108dd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00108e4:	51                   	push   ecx
c00108e5:	6a 25                	push   0x25
c00108e7:	e8 8e fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108ec:	59                   	pop    ecx
c00108ed:	5b                   	pop    ebx
c00108ee:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    

c00108f8 <VgaText::updateDiskUsage()>:
c00108f8:	55                   	push   ebp
c00108f9:	bd 10 27 00 00       	mov    ebp,0x2710
c00108fe:	57                   	push   edi
c00108ff:	8b 3d e0 d8 02 c0    	mov    edi,DWORD PTR ds:0xc002d8e0
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	6a 0f                	push   0xf
c0010909:	6a 00                	push   0x0
c001090b:	e8 c4 fd ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010910:	5a                   	pop    edx
c0010911:	0f b6 d8             	movzx  ebx,al
c0010914:	59                   	pop    ecx
c0010915:	8b 35 08 2d 03 c0    	mov    esi,DWORD PTR ds:0xc0032d08
c001091b:	53                   	push   ebx
c001091c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010921:	89 f0                	mov    eax,esi
c0010923:	99                   	cdq    
c0010924:	f7 fd                	idiv   ebp
c0010926:	99                   	cdq    
c0010927:	f7 f9                	idiv   ecx
c0010929:	8d 42 30             	lea    eax,[edx+0x30]
c001092c:	0f b6 c0             	movzx  eax,al
c001092f:	50                   	push   eax
c0010930:	e8 45 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010935:	5d                   	pop    ebp
c0010936:	bd e8 03 00 00       	mov    ebp,0x3e8
c001093b:	5a                   	pop    edx
c001093c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010940:	53                   	push   ebx
c0010941:	89 f0                	mov    eax,esi
c0010943:	99                   	cdq    
c0010944:	f7 fd                	idiv   ebp
c0010946:	99                   	cdq    
c0010947:	f7 f9                	idiv   ecx
c0010949:	8d 42 30             	lea    eax,[edx+0x30]
c001094c:	0f b6 c0             	movzx  eax,al
c001094f:	50                   	push   eax
c0010950:	e8 25 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010955:	5d                   	pop    ebp
c0010956:	bd 64 00 00 00       	mov    ebp,0x64
c001095b:	5a                   	pop    edx
c001095c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010963:	53                   	push   ebx
c0010964:	89 f0                	mov    eax,esi
c0010966:	99                   	cdq    
c0010967:	f7 fd                	idiv   ebp
c0010969:	99                   	cdq    
c001096a:	f7 f9                	idiv   ecx
c001096c:	8d 42 30             	lea    eax,[edx+0x30]
c001096f:	0f b6 c0             	movzx  eax,al
c0010972:	50                   	push   eax
c0010973:	e8 02 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010978:	5d                   	pop    ebp
c0010979:	5a                   	pop    edx
c001097a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010981:	53                   	push   ebx
c0010982:	89 f0                	mov    eax,esi
c0010984:	99                   	cdq    
c0010985:	f7 f9                	idiv   ecx
c0010987:	89 d6                	mov    esi,edx
c0010989:	99                   	cdq    
c001098a:	f7 f9                	idiv   ecx
c001098c:	8d 42 30             	lea    eax,[edx+0x30]
c001098f:	0f b6 c0             	movzx  eax,al
c0010992:	50                   	push   eax
c0010993:	e8 e2 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010998:	5d                   	pop    ebp
c0010999:	5a                   	pop    edx
c001099a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109a1:	53                   	push   ebx
c00109a2:	8d 46 30             	lea    eax,[esi+0x30]
c00109a5:	0f b6 f0             	movzx  esi,al
c00109a8:	56                   	push   esi
c00109a9:	e8 cc fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ae:	5e                   	pop    esi
c00109af:	8b 35 04 2d 03 c0    	mov    esi,DWORD PTR ds:0xc0032d04
c00109b5:	5d                   	pop    ebp
c00109b6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00109bd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 a3 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5a                   	pop    edx
c00109d8:	5d                   	pop    ebp
c00109d9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00109e0:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 80 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5a                   	pop    edx
c00109fb:	5d                   	pop    ebp
c00109fc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a03:	bd 64 00 00 00       	mov    ebp,0x64
c0010a08:	53                   	push   ebx
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	83 c2 30             	add    edx,0x30
c0010a14:	0f b6 d2             	movzx  edx,dl
c0010a17:	52                   	push   edx
c0010a18:	e8 5d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5a                   	pop    edx
c0010a1e:	5d                   	pop    ebp
c0010a1f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a26:	53                   	push   ebx
c0010a27:	89 f0                	mov    eax,esi
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	89 d6                	mov    esi,edx
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 3d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5a                   	pop    edx
c0010a3e:	59                   	pop    ecx
c0010a3f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a46:	53                   	push   ebx
c0010a47:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4a:	0f b6 f0             	movzx  esi,al
c0010a4d:	56                   	push   esi
c0010a4e:	e8 27 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5b                   	pop    ebx
c0010a54:	5e                   	pop    esi
c0010a55:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010a5c:	5b                   	pop    ebx
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	5d                   	pop    ebp
c0010a60:	c3                   	ret    
c0010a61:	90                   	nop

c0010a62 <VgaText::updateTitle()>:
c0010a62:	53                   	push   ebx
c0010a63:	31 c0                	xor    eax,eax
c0010a65:	83 ec 58             	sub    esp,0x58
c0010a68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010a6c:	89 e1                	mov    ecx,esp
c0010a6e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010a72:	40                   	inc    eax
c0010a73:	83 f8 50             	cmp    eax,0x50
c0010a76:	75 f6                	jne    c0010a6e <VgaText::updateTitle()+0xc>
c0010a78:	31 c0                	xor    eax,eax
c0010a7a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010a81:	84 db                	test   bl,bl
c0010a83:	74 06                	je     c0010a8b <VgaText::updateTitle()+0x29>
c0010a85:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010a88:	40                   	inc    eax
c0010a89:	eb ef                	jmp    c0010a7a <VgaText::updateTitle()+0x18>
c0010a8b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	74 09                	je     c0010a9b <VgaText::updateTitle()+0x39>
c0010a92:	53                   	push   ebx
c0010a93:	53                   	push   ebx
c0010a94:	51                   	push   ecx
c0010a95:	52                   	push   edx
c0010a96:	ff d0                	call   eax
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	e8 58 fe ff ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0010aa0:	83 c4 58             	add    esp,0x58
c0010aa3:	5b                   	pop    ebx
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::setTitleTextColour(VgaColour)>:
c0010aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ab1:	eb af                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ab3:	90                   	nop

c0010ab4 <VgaText::setTitleColour(VgaColour)>:
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010abc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010abf:	eb a1                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ac1:	90                   	nop

c0010ac2 <VgaText::setTitle(char*)>:
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 10             	sub    esp,0x10
c0010ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ace:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010ad4:	50                   	push   eax
c0010ad5:	e8 62 fd fe ff       	call   c000083c <strcpy>
c0010ada:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ade:	83 c4 18             	add    esp,0x18
c0010ae1:	5b                   	pop    ebx
c0010ae2:	e9 7b ff ff ff       	jmp    c0010a62 <VgaText::updateTitle()>
c0010ae7:	90                   	nop

c0010ae8 <VgaText::decrementCursor(bool)>:
c0010ae8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010aec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010af0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 04                	je     c0010afb <VgaText::decrementCursor(bool)+0x13>
c0010af7:	48                   	dec    eax
c0010af8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010afb:	84 c9                	test   cl,cl
c0010afd:	74 09                	je     c0010b08 <VgaText::decrementCursor(bool)+0x20>
c0010aff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b03:	e9 c2 fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b0a:	53                   	push   ebx
c0010b0b:	83 ec 08             	sub    esp,0x8
c0010b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b1e:	3c 07                	cmp    al,0x7
c0010b20:	75 2a                	jne    c0010b4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b22:	a1 38 eb 02 c0       	mov    eax,ds:0xc002eb38
c0010b27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	5b                   	pop    ebx
c0010b47:	e9 7c 30 00 00       	jmp    c0013bc8 <Buzzer::beep(int, int, bool)>
c0010b4c:	3c 0d                	cmp    al,0xd
c0010b4e:	75 09                	jne    c0010b59 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b57:	eb 2c                	jmp    c0010b85 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b59:	3c 0a                	cmp    al,0xa
c0010b5b:	75 31                	jne    c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010b5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010b60:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b67:	8d 50 01             	lea    edx,[eax+0x1]
c0010b6a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010b6d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010b70:	75 0f                	jne    c0010b81 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010b72:	83 ec 0c             	sub    esp,0xc
c0010b75:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010b78:	53                   	push   ebx
c0010b79:	e8 68 fb ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b85:	83 c4 08             	add    esp,0x8
c0010b88:	5b                   	pop    ebx
c0010b89:	e9 3c fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b8e:	3c 08                	cmp    al,0x8
c0010b90:	75 25                	jne    c0010bb7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010b92:	50                   	push   eax
c0010b93:	50                   	push   eax
c0010b94:	6a 01                	push   0x1
c0010b96:	53                   	push   ebx
c0010b97:	e8 4c ff ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010b9c:	5a                   	pop    edx
c0010b9d:	59                   	pop    ecx
c0010b9e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ba1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ba4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010baa:	6a 20                	push   0x20
c0010bac:	53                   	push   ebx
c0010bad:	e8 da fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bb2:	83 c4 28             	add    esp,0x28
c0010bb5:	5b                   	pop    ebx
c0010bb6:	c3                   	ret    
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	0f be c0             	movsx  eax,al
c0010bbd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bc0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bc3:	51                   	push   ecx
c0010bc4:	52                   	push   edx
c0010bc5:	50                   	push   eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 c0 fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bcc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010bd0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010bd8:	83 c4 28             	add    esp,0x28
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 5f fc ff ff       	jmp    c0010840 <VgaText::incrementCursor(bool)>
c0010be1:	90                   	nop

c0010be2 <VgaText::isShowingCursor()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010be9:	c3                   	ret    

c0010bea <VgaText::isBlinkDisabled()>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010bf1:	83 f0 01             	xor    eax,0x1
c0010bf4:	c3                   	ret    
c0010bf5:	90                   	nop

c0010bf6 <VgaText::setCursorHeight(int)>:
c0010bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bfe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c01:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c09:	e9 d2 f9 ff ff       	jmp    c00105e0 <VgaText::showCursor(bool)>

c0010c0e <VgaText::getCursorHeight()>:
c0010c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c15:	c3                   	ret    

c0010c16 <setActiveTerminal(VgaText*)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	85 db                	test   ebx,ebx
c0010c20:	75 11                	jne    c0010c33 <setActiveTerminal(VgaText*)+0x1d>
c0010c22:	c7 44 24 10 ec a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a7ec
c0010c2a:	83 c4 08             	add    esp,0x8
c0010c2d:	5b                   	pop    ebx
c0010c2e:	e9 24 9a 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c0010c33:	50                   	push   eax
c0010c34:	50                   	push   eax
c0010c35:	53                   	push   ebx
c0010c36:	68 fa a7 02 c0       	push   0xc002a7fa
c0010c3b:	e8 83 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c40:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	85 c0                	test   eax,eax
c0010c4a:	74 0c                	je     c0010c58 <setActiveTerminal(VgaText*)+0x42>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	50                   	push   eax
c0010c50:	e8 75 f9 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010c55:	83 c4 10             	add    esp,0x10
c0010c58:	89 1d 84 ea 02 c0    	mov    DWORD PTR ds:0xc002ea84,ebx
c0010c5e:	51                   	push   ecx
c0010c5f:	51                   	push   ecx
c0010c60:	53                   	push   ebx
c0010c61:	68 12 a8 02 c0       	push   0xc002a812
c0010c66:	e8 58 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c6b:	83 c4 0c             	add    esp,0xc
c0010c6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c71:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c74:	53                   	push   ebx
c0010c75:	e8 7e fb ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7d:	e8 68 ff ff ff       	call   c0010bea <VgaText::isBlinkDisabled()>
c0010c82:	5a                   	pop    edx
c0010c83:	0f b6 c0             	movzx  eax,al
c0010c86:	59                   	pop    ecx
c0010c87:	50                   	push   eax
c0010c88:	53                   	push   ebx
c0010c89:	e8 5e f9 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0010c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c91:	e8 78 ff ff ff       	call   c0010c0e <VgaText::getCursorHeight()>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	50                   	push   eax
c0010c99:	53                   	push   ebx
c0010c9a:	e8 57 ff ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010ca6:	75 07                	jne    c0010caf <setActiveTerminal(VgaText*)+0x99>
c0010ca8:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010caf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	5b                   	pop    ebx
c0010cb7:	e9 c0 f8 ff ff       	jmp    c001057c <VgaText::load()>

c0010cbc <doTerminalCycle()>:
c0010cbc:	83 ec 18             	sub    esp,0x18
c0010cbf:	a1 80 ea 02 c0       	mov    eax,ds:0xc002ea80
c0010cc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010cc7:	50                   	push   eax
c0010cc8:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0010ccd:	e8 44 ff ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0010cd2:	83 c4 1c             	add    esp,0x1c
c0010cd5:	c3                   	ret    

c0010cd6 <VgaText::doUpdate()>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010cdd:	85 c0                	test   eax,eax
c0010cdf:	74 02                	je     c0010ce3 <VgaText::doUpdate()+0xd>
c0010ce1:	ff e0                	jmp    eax
c0010ce3:	c3                   	ret    

c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ce4:	55                   	push   ebp
c0010ce5:	31 ed                	xor    ebp,ebp
c0010ce7:	57                   	push   edi
c0010ce8:	56                   	push   esi
c0010ce9:	53                   	push   ebx
c0010cea:	83 ec 1c             	sub    esp,0x1c
c0010ced:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cf1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cf6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010cfd:	50                   	push   eax
c0010cfe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d03:	50                   	push   eax
c0010d04:	e8 cb f9 ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d09:	59                   	pop    ecx
c0010d0a:	0f b6 c0             	movzx  eax,al
c0010d0d:	5e                   	pop    esi
c0010d0e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d17:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	0f b7 f6             	movzx  esi,si
c0010d21:	01 f6                	add    esi,esi
c0010d23:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d26:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d29:	84 c0                	test   al,al
c0010d2b:	0f 84 fd 00 00 00    	je     c0010e2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d31:	3c 0d                	cmp    al,0xd
c0010d33:	75 0c                	jne    c0010d41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d35:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d3c:	e9 e7 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d41:	3c 0a                	cmp    al,0xa
c0010d43:	75 47                	jne    c0010d8c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d48:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d52:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d55:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d58:	75 0f                	jne    c0010d69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 80 f9 ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	31 ed                	xor    ebp,ebp
c0010d6e:	53                   	push   ebx
c0010d6f:	e8 56 f8 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010d74:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d7f:	0f b7 f6             	movzx  esi,si
c0010d82:	01 f6                	add    esi,esi
c0010d84:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d87:	e9 9c 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8c:	3c 08                	cmp    al,0x8
c0010d8e:	75 35                	jne    c0010dc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010d90:	56                   	push   esi
c0010d91:	56                   	push   esi
c0010d92:	6a 01                	push   0x1
c0010d94:	53                   	push   ebx
c0010d95:	e8 4e fd ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010d9a:	58                   	pop    eax
c0010d9b:	5a                   	pop    edx
c0010d9c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d9f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010da2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010da8:	6a 20                	push   0x20
c0010daa:	53                   	push   ebx
c0010dab:	e8 dc f9 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010db0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010db5:	83 c4 20             	add    esp,0x20
c0010db8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dbb:	0f b7 f6             	movzx  esi,si
c0010dbe:	01 f6                	add    esi,esi
c0010dc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dc3:	eb 63                	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dc5:	51                   	push   ecx
c0010dc6:	51                   	push   ecx
c0010dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dcb:	50                   	push   eax
c0010dcc:	e8 a9 f9 ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	66 89 06             	mov    WORD PTR [esi],ax
c0010dd7:	39 1d 84 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea84,ebx
c0010ddd:	75 21                	jne    c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ddf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010de2:	85 c0                	test   eax,eax
c0010de4:	74 1a                	je     c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010de6:	52                   	push   edx
c0010de7:	52                   	push   edx
c0010de8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010deb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010dee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010df9:	51                   	push   ecx
c0010dfa:	53                   	push   ebx
c0010dfb:	ff d0                	call   eax
c0010dfd:	83 c4 20             	add    esp,0x20
c0010e00:	83 c6 02             	add    esi,0x2
c0010e03:	50                   	push   eax
c0010e04:	50                   	push   eax
c0010e05:	6a 00                	push   0x0
c0010e07:	53                   	push   ebx
c0010e08:	e8 33 fa ff ff       	call   c0010840 <VgaText::incrementCursor(bool)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e14:	75 0d                	jne    c0010e23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	bd 01 00 00 00       	mov    ebp,0x1
c0010e28:	47                   	inc    edi
c0010e29:	e9 f8 fe ff ff       	jmp    c0010d26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e2e:	83 ec 0c             	sub    esp,0xc
c0010e31:	53                   	push   ebx
c0010e32:	e8 93 f7 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	89 e8                	mov    eax,ebp
c0010e3c:	84 c0                	test   al,al
c0010e3e:	74 0c                	je     c0010e4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	53                   	push   ebx
c0010e44:	e8 8d fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e53:	83 c4 1c             	add    esp,0x1c
c0010e56:	5b                   	pop    ebx
c0010e57:	5e                   	pop    esi
c0010e58:	5f                   	pop    edi
c0010e59:	5d                   	pop    ebp
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <VgaText::clearScreen()>:
c0010e5c:	57                   	push   edi
c0010e5d:	56                   	push   esi
c0010e5e:	31 f6                	xor    esi,esi
c0010e60:	53                   	push   ebx
c0010e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e65:	52                   	push   edx
c0010e66:	6a 00                	push   0x0
c0010e68:	6a 00                	push   0x0
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 88 f9 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010e70:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010e7d:	7e 20                	jle    c0010e9f <VgaText::clearScreen()+0x43>
c0010e7f:	31 ff                	xor    edi,edi
c0010e81:	50                   	push   eax
c0010e82:	50                   	push   eax
c0010e83:	56                   	push   esi
c0010e84:	57                   	push   edi
c0010e85:	47                   	inc    edi
c0010e86:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e8c:	6a 20                	push   0x20
c0010e8e:	53                   	push   ebx
c0010e8f:	e8 f8 f8 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e94:	83 c4 20             	add    esp,0x20
c0010e97:	83 ff 50             	cmp    edi,0x50
c0010e9a:	75 e5                	jne    c0010e81 <VgaText::clearScreen()+0x25>
c0010e9c:	46                   	inc    esi
c0010e9d:	eb db                	jmp    c0010e7a <VgaText::clearScreen()+0x1e>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	53                   	push   ebx
c0010ea3:	e8 2e fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010ea8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	5b                   	pop    ebx
c0010eb3:	5e                   	pop    esi
c0010eb4:	5f                   	pop    edi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::putchar(char)>:
c0010eb6:	56                   	push   esi
c0010eb7:	53                   	push   ebx
c0010eb8:	83 ec 14             	sub    esp,0x14
c0010ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ec3:	3c 5b                	cmp    al,0x5b
c0010ec5:	75 18                	jne    c0010edf <VgaText::putchar(char)+0x29>
c0010ec7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010ecb:	74 1f                	je     c0010eec <VgaText::putchar(char)+0x36>
c0010ecd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ed3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010eda:	e9 bd 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010edf:	3c 1b                	cmp    al,0x1b
c0010ee1:	75 09                	jne    c0010eec <VgaText::putchar(char)+0x36>
c0010ee3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ee7:	e9 b0 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010eec:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010eef:	84 c9                	test   cl,cl
c0010ef1:	0f 84 92 00 00 00    	je     c0010f89 <VgaText::putchar(char)+0xd3>
c0010ef7:	8d 50 c0             	lea    edx,[eax-0x40]
c0010efa:	80 fa 3e             	cmp    dl,0x3e
c0010efd:	77 76                	ja     c0010f75 <VgaText::putchar(char)+0xbf>
c0010eff:	3c 6d                	cmp    al,0x6d
c0010f01:	75 47                	jne    c0010f4a <VgaText::putchar(char)+0x94>
c0010f03:	31 f6                	xor    esi,esi
c0010f05:	31 d2                	xor    edx,edx
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f0c:	7e 2d                	jle    c0010f3b <VgaText::putchar(char)+0x85>
c0010f0e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f13:	80 fa 3b             	cmp    dl,0x3b
c0010f16:	75 17                	jne    c0010f2f <VgaText::putchar(char)+0x79>
c0010f18:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f1c:	50                   	push   eax
c0010f1d:	53                   	push   ebx
c0010f1e:	e8 fd f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	58                   	pop    eax
c0010f27:	31 c0                	xor    eax,eax
c0010f29:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2d:	eb 09                	jmp    c0010f38 <VgaText::putchar(char)+0x82>
c0010f2f:	6b c0 0a             	imul   eax,eax,0xa
c0010f32:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f36:	88 ca                	mov    dl,cl
c0010f38:	46                   	inc    esi
c0010f39:	eb ce                	jmp    c0010f09 <VgaText::putchar(char)+0x53>
c0010f3b:	84 d2                	test   dl,dl
c0010f3d:	74 2e                	je     c0010f6d <VgaText::putchar(char)+0xb7>
c0010f3f:	50                   	push   eax
c0010f40:	53                   	push   ebx
c0010f41:	e8 da f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f46:	58                   	pop    eax
c0010f47:	5a                   	pop    edx
c0010f48:	eb 23                	jmp    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4a:	3c 4a                	cmp    al,0x4a
c0010f4c:	75 1f                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f52:	75 19                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	53                   	push   ebx
c0010f58:	e8 ff fe ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	6a 00                	push   0x0
c0010f62:	6a 00                	push   0x0
c0010f64:	53                   	push   ebx
c0010f65:	e8 8e f8 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010f73:	eb 27                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f75:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010f78:	83 fa 0e             	cmp    edx,0xe
c0010f7b:	7f 1f                	jg     c0010f9c <VgaText::putchar(char)+0xe6>
c0010f7d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010f80:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010f83:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010f87:	eb 13                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f89:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f8c:	0f be c0             	movsx  eax,al
c0010f8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f92:	50                   	push   eax
c0010f93:	53                   	push   ebx
c0010f94:	e8 71 fb ff ff       	call   c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 14             	add    esp,0x14
c0010f9f:	5b                   	pop    ebx
c0010fa0:	5e                   	pop    esi
c0010fa1:	c3                   	ret    

c0010fa2 <VgaText::puts(char const*)>:
c0010fa2:	53                   	push   ebx
c0010fa3:	83 ec 08             	sub    esp,0x8
c0010fa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010faa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010fad:	84 c0                	test   al,al
c0010faf:	74 12                	je     c0010fc3 <VgaText::puts(char const*)+0x21>
c0010fb1:	43                   	inc    ebx
c0010fb2:	51                   	push   ecx
c0010fb3:	51                   	push   ecx
c0010fb4:	50                   	push   eax
c0010fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb9:	e8 f8 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	eb e7                	jmp    c0010faa <VgaText::puts(char const*)+0x8>
c0010fc3:	83 c4 08             	add    esp,0x8
c0010fc6:	5b                   	pop    ebx
c0010fc7:	c3                   	ret    

c0010fc8 <VgaText::putx(unsigned int)>:
c0010fc8:	57                   	push   edi
c0010fc9:	b9 11 00 00 00       	mov    ecx,0x11
c0010fce:	56                   	push   esi
c0010fcf:	be 2e a8 02 c0       	mov    esi,0xc002a82e
c0010fd4:	53                   	push   ebx
c0010fd5:	83 ec 20             	sub    esp,0x20
c0010fd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010fe0:	fc                   	cld    
c0010fe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe3:	be 08 00 00 00       	mov    esi,0x8
c0010fe8:	50                   	push   eax
c0010fe9:	50                   	push   eax
c0010fea:	89 d8                	mov    eax,ebx
c0010fec:	c1 e3 04             	shl    ebx,0x4
c0010fef:	c1 e8 1c             	shr    eax,0x1c
c0010ff2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ff7:	50                   	push   eax
c0010ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ffc:	e8 b5 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	4e                   	dec    esi
c0011005:	75 e1                	jne    c0010fe8 <VgaText::putx(unsigned int)+0x20>
c0011007:	83 c4 20             	add    esp,0x20
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	5f                   	pop    edi
c001100d:	c3                   	ret    

c001100e <VgaText::VgaText(char const*)>:
c001100e:	57                   	push   edi
c001100f:	56                   	push   esi
c0011010:	53                   	push   ebx
c0011011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011015:	83 ec 08             	sub    esp,0x8
c0011018:	6a 00                	push   0x0
c001101a:	50                   	push   eax
c001101b:	e8 8c 05 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c0011028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102c:	89 10                	mov    DWORD PTR [eax],edx
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001104c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011050:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011058:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001106a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011079:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	8d 50 60             	lea    edx,[eax+0x60]
c0011087:	bb 60 ea 02 c0       	mov    ebx,0xc002ea60
c001108c:	b8 08 00 00 00       	mov    eax,0x8
c0011091:	fc                   	cld    
c0011092:	89 d7                	mov    edi,edx
c0011094:	89 de                	mov    esi,ebx
c0011096:	89 c1                	mov    ecx,eax
c0011098:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	05 82 00 00 00       	add    eax,0x82
c00110a3:	83 ec 08             	sub    esp,0x8
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	50                   	push   eax
c00110ab:	e8 8c f7 fe ff       	call   c000083c <strcpy>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	6a 01                	push   0x1
c00110c3:	e8 27 09 00 00       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	89 c2                	mov    edx,eax
c00110cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110d4:	e8 55 0b 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c00110d9:	89 c3                	mov    ebx,eax
c00110db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110e2:	89 c6                	mov    esi,eax
c00110e4:	e8 ce ed ff ff       	call   c000feb7 <Phys::allocatePage()>
c00110e9:	6a 05                	push   0x5
c00110eb:	56                   	push   esi
c00110ec:	50                   	push   eax
c00110ed:	53                   	push   ebx
c00110ee:	e8 29 11 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110fd:	83 ec 04             	sub    esp,0x4
c0011100:	68 00 0f 00 00       	push   0xf00
c0011105:	6a 00                	push   0x0
c0011107:	50                   	push   eax
c0011108:	e8 73 f6 fe ff       	call   c0000780 <memset>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	6a 00                	push   0x0
c0011115:	6a 07                	push   0x7
c0011117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111b:	e8 94 f5 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	83 ec 08             	sub    esp,0x8
c0011126:	6a 02                	push   0x2
c0011128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112c:	e8 c5 fa ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 ec 04             	sub    esp,0x4
c0011137:	6a 00                	push   0x0
c0011139:	6a 00                	push   0x0
c001113b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113f:	e8 b4 f6 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	83 ec 08             	sub    esp,0x8
c001114a:	6a 01                	push   0x1
c001114c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011150:	e8 8b f4 ff ff       	call   c00105e0 <VgaText::showCursor(bool)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	83 ec 08             	sub    esp,0x8
c001115b:	6a 01                	push   0x1
c001115d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011161:	e8 86 f4 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	83 ec 0c             	sub    esp,0xc
c001116c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011170:	e8 e7 fc ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011184:	05 02 01 00 00       	add    eax,0x102
c0011189:	83 ec 04             	sub    esp,0x4
c001118c:	68 96 00 00 00       	push   0x96
c0011191:	6a 00                	push   0x0
c0011193:	50                   	push   eax
c0011194:	e8 e7 f5 fe ff       	call   c0000780 <memset>
c0011199:	83 c4 10             	add    esp,0x10
c001119c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a0:	05 98 01 00 00       	add    eax,0x198
c00111a5:	83 ec 04             	sub    esp,0x4
c00111a8:	68 2c 01 00 00       	push   0x12c
c00111ad:	6a 00                	push   0x0
c00111af:	50                   	push   eax
c00111b0:	e8 cb f5 fe ff       	call   c0000780 <memset>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	90                   	nop
c00111b9:	5b                   	pop    ebx
c00111ba:	5e                   	pop    esi
c00111bb:	5f                   	pop    edi
c00111bc:	c3                   	ret    
c00111bd:	90                   	nop

c00111be <VgaText::receiveKey(unsigned char)>:
c00111be:	55                   	push   ebp
c00111bf:	57                   	push   edi
c00111c0:	56                   	push   esi
c00111c1:	53                   	push   ebx
c00111c2:	83 ec 1c             	sub    esp,0x1c
c00111c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111cd:	84 db                	test   bl,bl
c00111cf:	0f 84 c9 00 00 00    	je     c001129e <VgaText::receiveKey(unsigned char)+0xe0>
c00111d5:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00111db:	80 fb 08             	cmp    bl,0x8
c00111de:	75 2c                	jne    c001120c <VgaText::receiveKey(unsigned char)+0x4e>
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	57                   	push   edi
c00111e4:	e8 b3 f5 fe ff       	call   c000079c <strlen>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	85 c0                	test   eax,eax
c00111ee:	74 41                	je     c0011231 <VgaText::receiveKey(unsigned char)+0x73>
c00111f0:	50                   	push   eax
c00111f1:	50                   	push   eax
c00111f2:	6a 08                	push   0x8
c00111f4:	56                   	push   esi
c00111f5:	e8 bc fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00111fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111fd:	e8 9a f5 fe ff       	call   c000079c <strlen>
c0011202:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001120a:	eb 22                	jmp    c001122e <VgaText::receiveKey(unsigned char)+0x70>
c001120c:	0f be c3             	movsx  eax,bl
c001120f:	52                   	push   edx
c0011210:	52                   	push   edx
c0011211:	50                   	push   eax
c0011212:	56                   	push   esi
c0011213:	e8 9e fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011218:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001121c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011221:	59                   	pop    ecx
c0011222:	5d                   	pop    ebp
c0011223:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011227:	50                   	push   eax
c0011228:	57                   	push   edi
c0011229:	e8 4e f7 fe ff       	call   c000097c <strcat>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011238:	75 05                	jne    c001123f <VgaText::receiveKey(unsigned char)+0x81>
c001123a:	80 fb 0a             	cmp    bl,0xa
c001123d:	75 53                	jne    c0011292 <VgaText::receiveKey(unsigned char)+0xd4>
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011248:	53                   	push   ebx
c0011249:	e8 4e f5 fe ff       	call   c000079c <strlen>
c001124e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011251:	89 c5                	mov    ebp,eax
c0011253:	e8 44 f5 fe ff       	call   c000079c <strlen>
c0011258:	83 c4 10             	add    esp,0x10
c001125b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001125f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011264:	76 10                	jbe    c0011276 <VgaText::receiveKey(unsigned char)+0xb8>
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	68 3f a8 02 c0       	push   0xc002a83f
c001126e:	e8 e4 93 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	50                   	push   eax
c0011277:	50                   	push   eax
c0011278:	57                   	push   edi
c0011279:	53                   	push   ebx
c001127a:	e8 fd f6 fe ff       	call   c000097c <strcat>
c001127f:	83 c4 0c             	add    esp,0xc
c0011282:	68 96 00 00 00       	push   0x96
c0011287:	6a 00                	push   0x0
c0011289:	57                   	push   edi
c001128a:	e8 f1 f4 fe ff       	call   c0000780 <memset>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	56                   	push   esi
c0011296:	e8 3b fa ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 c4 1c             	add    esp,0x1c
c00112a1:	5b                   	pop    ebx
c00112a2:	5e                   	pop    esi
c00112a3:	5f                   	pop    edi
c00112a4:	5d                   	pop    ebp
c00112a5:	c3                   	ret    

c00112a6 <VgaText::write(unsigned long long, void*, int*)>:
c00112a6:	55                   	push   ebp
c00112a7:	57                   	push   edi
c00112a8:	56                   	push   esi
c00112a9:	53                   	push   ebx
c00112aa:	83 ec 0c             	sub    esp,0xc
c00112ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112b1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112b5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112b9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00112c0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00112c3:	39 eb                	cmp    ebx,ebp
c00112c5:	74 13                	je     c00112da <VgaText::write(unsigned long long, void*, int*)+0x34>
c00112c7:	43                   	inc    ebx
c00112c8:	50                   	push   eax
c00112c9:	50                   	push   eax
c00112ca:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00112ce:	50                   	push   eax
c00112cf:	56                   	push   esi
c00112d0:	e8 e1 fb ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	eb e9                	jmp    c00112c3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00112da:	83 ec 0c             	sub    esp,0xc
c00112dd:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00112e4:	56                   	push   esi
c00112e5:	e8 ec f9 ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c00112ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112ee:	89 38                	mov    DWORD PTR [eax],edi
c00112f0:	83 c4 1c             	add    esp,0x1c
c00112f3:	31 c0                	xor    eax,eax
c00112f5:	5b                   	pop    ebx
c00112f6:	5e                   	pop    esi
c00112f7:	5f                   	pop    edi
c00112f8:	5d                   	pop    ebp
c00112f9:	c3                   	ret    

c00112fa <newTerminal(char*)>:
c00112fa:	83 ec 28             	sub    esp,0x28
c00112fd:	68 c4 02 00 00       	push   0x2c4
c0011302:	e8 44 e5 ff ff       	call   c000f84b <malloc>
c0011307:	5a                   	pop    edx
c0011308:	59                   	pop    ecx
c0011309:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001130d:	50                   	push   eax
c001130e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011312:	e8 f7 fc ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c0011317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001131b:	83 c4 2c             	add    esp,0x2c
c001131e:	c3                   	ret    
c001131f:	90                   	nop

c0011320 <TSS::TSS()>:
c0011320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011324:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132b:	90                   	nop
c001132c:	c3                   	ret    
c001132d:	90                   	nop

c001132e <TSS::setESP(unsigned long)>:
c001132e:	55                   	push   ebp
c001132f:	89 e5                	mov    ebp,esp
c0011331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011337:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001133a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001133d:	90                   	nop
c001133e:	5d                   	pop    ebp
c001133f:	c3                   	ret    

c0011340 <TSS::flush()>:
c0011340:	55                   	push   ebp
c0011341:	89 e5                	mov    ebp,esp
c0011343:	83 ec 10             	sub    esp,0x10
c0011346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011349:	8b 00                	mov    eax,DWORD PTR [eax]
c001134b:	83 c8 03             	or     eax,0x3
c001134e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011356:	66 89 d0             	mov    ax,dx
c0011359:	0f 00 d8             	ltr    ax
c001135c:	90                   	nop
c001135d:	c9                   	leave  
c001135e:	c3                   	ret    
c001135f:	90                   	nop

c0011360 <TSS::setup(unsigned long, unsigned long)>:
c0011360:	55                   	push   ebp
c0011361:	89 e5                	mov    ebp,esp
c0011363:	83 ec 18             	sub    esp,0x18
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	6a 68                	push   0x68
c001136b:	e8 db e4 ff ff       	call   c000f84b <malloc>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	89 c2                	mov    edx,eax
c0011375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001137e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011381:	83 ec 04             	sub    esp,0x4
c0011384:	6a 68                	push   0x68
c0011386:	6a 00                	push   0x0
c0011388:	50                   	push   eax
c0011389:	e8 f2 f3 fe ff       	call   c0000780 <memset>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001139d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00113c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00113cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00113d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00113e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00113f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00113fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011428:	0f 20 da             	mov    edx,cr3
c001142b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001142e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143a:	83 ec 08             	sub    esp,0x8
c001143d:	50                   	push   eax
c001143e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011441:	50                   	push   eax
c0011442:	e8 df db ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	83 ec 08             	sub    esp,0x8
c001144d:	6a 68                	push   0x68
c001144f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011452:	50                   	push   eax
c0011453:	e8 ea db ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c0011458:	83 c4 10             	add    esp,0x10
c001145b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001145f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011462:	83 e0 0f             	and    eax,0xf
c0011465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001146b:	83 c8 40             	or     eax,0x40
c001146e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011471:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0011476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001147c:	05 78 01 00 00       	add    eax,0x178
c0011481:	83 ec 04             	sub    esp,0x4
c0011484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001148a:	50                   	push   eax
c001148b:	e8 e6 db ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	89 c2                	mov    edx,eax
c0011495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011498:	89 10                	mov    DWORD PTR [eax],edx
c001149a:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001149f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114a5:	05 78 01 00 00       	add    eax,0x178
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	50                   	push   eax
c00114ae:	e8 07 dc ff ff       	call   c000f0ba <GDT::flush()>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114bb:	83 ec 08             	sub    esp,0x8
c00114be:	50                   	push   eax
c00114bf:	68 a8 a8 02 c0       	push   0xc002a8a8
c00114c4:	e8 fa 18 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d1:	c9                   	leave  
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00114d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114e4:	75 08                	jne    c00114ee <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00114e6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114ec:	eb 38                	jmp    c0011526 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00114ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114f3:	75 17                	jne    c001150c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00114f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011509:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001150c:	89 c1                	mov    ecx,eax
c001150e:	83 e1 fd             	and    ecx,0xfffffffd
c0011511:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011517:	74 cd                	je     c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011519:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001151e:	83 e0 ef             	and    eax,0xffffffef
c0011521:	83 f8 08             	cmp    eax,0x8
c0011524:	76 c0                	jbe    c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011526:	31 c0                	xor    eax,eax
c0011528:	c3                   	ret    
c0011529:	90                   	nop

c001152a <ReservedFilename::isAtty()>:
c001152a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011531:	31 c0                	xor    eax,eax
c0011533:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011539:	74 09                	je     c0011544 <ReservedFilename::isAtty()+0x1a>
c001153b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011541:	0f 94 c0             	sete   al
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001154e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011555:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001155a:	75 08                	jne    c0011564 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001155c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011562:	eb 3d                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011564:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011569:	75 17                	jne    c0011582 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001156b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011570:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011573:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011579:	8b 10                	mov    edx,DWORD PTR [eax]
c001157b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001157f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011582:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011587:	75 04                	jne    c001158d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011589:	89 0a                	mov    DWORD PTR [edx],ecx
c001158b:	eb 14                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001158d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011592:	74 c8                	je     c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011594:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011599:	83 e0 ef             	and    eax,0xffffffef
c001159c:	83 f8 08             	cmp    eax,0x8
c001159f:	76 bb                	jbe    c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115a1:	31 c0                	xor    eax,eax
c00115a3:	c3                   	ret    

c00115a4 <UnixFile::getFileDescriptor()>:
c00115a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	c3                   	ret    

c00115ac <UnixFile::UnixFile(int)>:
c00115ac:	53                   	push   ebx
c00115ad:	83 ec 28             	sub    esp,0x28
c00115b0:	ba 94 a9 02 c0       	mov    edx,0xc002a994
c00115b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b9:	89 10                	mov    DWORD PTR [eax],edx
c00115bb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00115c3:	0f 8f 8c 01 00 00    	jg     c0011755 <UnixFile::UnixFile(int)+0x1a9>
c00115c9:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c00115ce:	8d 50 01             	lea    edx,[eax+0x1]
c00115d1:	89 15 40 d9 02 c0    	mov    DWORD PTR ds:0xc002d940,edx
c00115d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00115e5:	68 18 eb 02 c0       	push   0xc002eb18
c00115ea:	e8 c1 74 01 00       	call   c0028ab0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	a0 14 eb 02 c0       	mov    al,ds:0xc002eb14
c00115f7:	83 f0 01             	xor    eax,0x1
c00115fa:	84 c0                	test   al,al
c00115fc:	0f 84 54 01 00 00    	je     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c0011602:	c6 05 14 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb14,0x1
c0011609:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011618:	e8 2e e2 ff ff       	call   c000f84b <malloc>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	89 c3                	mov    ebx,eax
c0011622:	83 ec 08             	sub    esp,0x8
c0011625:	68 03 ff ff 0f       	push   0xfffff03
c001162a:	53                   	push   ebx
c001162b:	e8 2c 01 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	89 1d 0c eb 02 c0    	mov    DWORD PTR ds:0xc002eb0c,ebx
c0011639:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011641:	83 ec 0c             	sub    esp,0xc
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 fe e1 ff ff       	call   c000f84b <malloc>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	89 c3                	mov    ebx,eax
c0011652:	83 ec 08             	sub    esp,0x8
c0011655:	68 01 ff ff 0f       	push   0xfffff01
c001165a:	53                   	push   ebx
c001165b:	e8 fc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011660:	83 c4 10             	add    esp,0x10
c0011663:	89 1d 10 eb 02 c0    	mov    DWORD PTR ds:0xc002eb10,ebx
c0011669:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011678:	e8 ce e1 ff ff       	call   c000f84b <malloc>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	89 c3                	mov    ebx,eax
c0011682:	83 ec 08             	sub    esp,0x8
c0011685:	68 00 ff ff 0f       	push   0xfffff00
c001168a:	53                   	push   ebx
c001168b:	e8 cc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	89 1d 04 eb 02 c0    	mov    DWORD PTR ds:0xc002eb04,ebx
c0011699:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116a8:	e8 9e e1 ff ff       	call   c000f84b <malloc>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	89 c3                	mov    ebx,eax
c00116b2:	83 ec 08             	sub    esp,0x8
c00116b5:	68 02 ff ff 0f       	push   0xfffff02
c00116ba:	53                   	push   ebx
c00116bb:	e8 9c 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	89 1d 08 eb 02 c0    	mov    DWORD PTR ds:0xc002eb08,ebx
c00116c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116d1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00116d6:	7f 7e                	jg     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c00116d8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116e7:	e8 5f e1 ff ff       	call   c000f84b <malloc>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	89 c3                	mov    ebx,eax
c00116f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116f5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	50                   	push   eax
c00116fe:	53                   	push   ebx
c00116ff:	e8 58 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001170b:	89 1c 85 e0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1520],ebx
c0011712:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011721:	e8 25 e1 ff ff       	call   c000f84b <malloc>
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	89 c3                	mov    ebx,eax
c001172b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001172f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	50                   	push   eax
c0011738:	53                   	push   ebx
c0011739:	e8 1e 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011745:	89 1c 85 a0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1560],ebx
c001174c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011750:	e9 7c ff ff ff       	jmp    c00116d1 <UnixFile::UnixFile(int)+0x125>
c0011755:	90                   	nop
c0011756:	83 c4 28             	add    esp,0x28
c0011759:	5b                   	pop    ebx
c001175a:	c3                   	ret    
c001175b:	90                   	nop

c001175c <ReservedFilename::ReservedFilename(int)>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011763:	83 ec 08             	sub    esp,0x8
c0011766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001176a:	50                   	push   eax
c001176b:	e8 3c fe ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	ba b0 a9 02 c0       	mov    edx,0xc002a9b0
c0011778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177c:	89 10                	mov    DWORD PTR [eax],edx
c001177e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011786:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011789:	90                   	nop
c001178a:	83 c4 0c             	add    esp,0xc
c001178d:	c3                   	ret    

c001178e <UnixFile::~UnixFile()>:
c001178e:	83 ec 1c             	sub    esp,0x1c
c0011791:	ba 94 a9 02 c0       	mov    edx,0xc002a994
c0011796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001179a:	89 10                	mov    DWORD PTR [eax],edx
c001179c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117a3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117a8:	7f 73                	jg     c001181d <UnixFile::~UnixFile()+0x8f>
c00117aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	68 18 eb 02 c0       	push   0xc002eb18
c00117ba:	e8 c5 73 01 00       	call   c0028b84 <LinkedList<UnixFile>::getFirstElement()>
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	68 18 eb 02 c0       	push   0xc002eb18
c00117ce:	e8 b9 73 01 00       	call   c0028b8c <LinkedList<UnixFile>::removeFirst()>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117da:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00117de:	74 40                	je     c0011820 <UnixFile::~UnixFile()+0x92>
c00117e0:	83 ec 08             	sub    esp,0x8
c00117e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117e7:	68 18 eb 02 c0       	push   0xc002eb18
c00117ec:	e8 bf 72 01 00       	call   c0028ab0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f8:	8d 50 01             	lea    edx,[eax+0x1]
c00117fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117ff:	3d 88 13 00 00       	cmp    eax,0x1388
c0011804:	0f 94 c0             	sete   al
c0011807:	84 c0                	test   al,al
c0011809:	74 a7                	je     c00117b2 <UnixFile::~UnixFile()+0x24>
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	68 6c a9 02 c0       	push   0xc002a96c
c0011813:	e8 3f 8e 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011818:	83 c4 10             	add    esp,0x10
c001181b:	eb 95                	jmp    c00117b2 <UnixFile::~UnixFile()+0x24>
c001181d:	90                   	nop
c001181e:	eb 01                	jmp    c0011821 <UnixFile::~UnixFile()+0x93>
c0011820:	90                   	nop
c0011821:	90                   	nop
c0011822:	83 c4 1c             	add    esp,0x1c
c0011825:	c3                   	ret    

c0011826 <UnixFile::~UnixFile()>:
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011830:	e8 59 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	6a 0c                	push   0xc
c001183d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011841:	e8 9d 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	83 c4 0c             	add    esp,0xc
c001184c:	c3                   	ret    
c001184d:	90                   	nop

c001184e <ReservedFilename::~ReservedFilename()>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	ba b0 a9 02 c0       	mov    edx,0xc002a9b0
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	89 10                	mov    DWORD PTR [eax],edx
c001185c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011860:	83 ec 0c             	sub    esp,0xc
c0011863:	50                   	push   eax
c0011864:	e8 25 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	90                   	nop
c001186d:	83 c4 0c             	add    esp,0xc
c0011870:	c3                   	ret    
c0011871:	90                   	nop

c0011872 <ReservedFilename::~ReservedFilename()>:
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 cd ff ff ff       	call   c001184e <ReservedFilename::~ReservedFilename()>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	6a 0c                	push   0xc
c0011889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188d:	e8 51 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	c3                   	ret    

c0011899 <getFromFileDescriptor(int)>:
c0011899:	53                   	push   ebx
c001189a:	83 ec 08             	sub    esp,0x8
c001189d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118a7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ad:	7f 2c                	jg     c00118db <getFromFileDescriptor(int)+0x42>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	68 18 eb 02 c0       	push   0xc002eb18
c00118b7:	e8 c8 72 01 00       	call   c0028b84 <LinkedList<UnixFile>::getFirstElement()>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	85 c0                	test   eax,eax
c00118c1:	75 04                	jne    c00118c7 <getFromFileDescriptor(int)+0x2e>
c00118c3:	31 c0                	xor    eax,eax
c00118c5:	eb 6e                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c00118c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00118ca:	74 69                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118cc:	52                   	push   edx
c00118cd:	52                   	push   edx
c00118ce:	50                   	push   eax
c00118cf:	68 18 eb 02 c0       	push   0xc002eb18
c00118d4:	e8 55 73 01 00       	call   c0028c2e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00118d9:	eb e1                	jmp    c00118bc <getFromFileDescriptor(int)+0x23>
c00118db:	a1 0c eb 02 c0       	mov    eax,ds:0xc002eb0c
c00118e0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00118e6:	74 4d                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118e8:	a1 10 eb 02 c0       	mov    eax,ds:0xc002eb10
c00118ed:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00118f3:	74 40                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118f5:	a1 08 eb 02 c0       	mov    eax,ds:0xc002eb08
c00118fa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011900:	74 33                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c0011902:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0011907:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001190d:	74 26                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c001190f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011915:	83 f8 08             	cmp    eax,0x8
c0011918:	77 09                	ja     c0011923 <getFromFileDescriptor(int)+0x8a>
c001191a:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0011921:	eb 12                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c0011923:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011929:	83 fb 08             	cmp    ebx,0x8
c001192c:	77 95                	ja     c00118c3 <getFromFileDescriptor(int)+0x2a>
c001192e:	8b 04 9d a0 ea 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1560]
c0011935:	83 c4 08             	add    esp,0x8
c0011938:	5b                   	pop    ebx
c0011939:	c3                   	ret    

c001193a <__static_initialization_and_destruction_0(int, int)>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011942:	75 34                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011944:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001194c:	75 2a                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 18 eb 02 c0       	push   0xc002eb18
c0011956:	e8 fd 70 01 00       	call   c0028a58 <LinkedList<UnixFile>::LinkedList()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	83 ec 04             	sub    esp,0x4
c0011961:	68 c4 d8 02 c0       	push   0xc002d8c4
c0011966:	68 18 eb 02 c0       	push   0xc002eb18
c001196b:	68 56 8a 02 c0       	push   0xc0028a56
c0011970:	e8 e8 12 00 00       	call   c0012c5d <__cxa_atexit>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	90                   	nop
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    

c001197d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	68 ff ff 00 00       	push   0xffff
c0011988:	6a 01                	push   0x1
c001198a:	e8 ab ff ff ff       	call   c001193a <__static_initialization_and_destruction_0(int, int)>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	83 c4 0c             	add    esp,0xc
c0011995:	c3                   	ret    

c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011996:	53                   	push   ebx
c0011997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001199b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001199f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119a5:	89 c8                	mov    eax,ecx
c00119a7:	d1 e8                	shr    eax,1
c00119a9:	03 05 48 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d948
c00119af:	83 e1 01             	and    ecx,0x1
c00119b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00119b4:	75 09                	jne    c00119bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119b6:	83 e2 f0             	and    edx,0xfffffff0
c00119b9:	09 da                	or     edx,ebx
c00119bb:	88 10                	mov    BYTE PTR [eax],dl
c00119bd:	5b                   	pop    ebx
c00119be:	c3                   	ret    
c00119bf:	c1 e3 04             	shl    ebx,0x4
c00119c2:	83 e2 0f             	and    edx,0xf
c00119c5:	09 da                	or     edx,ebx
c00119c7:	88 10                	mov    BYTE PTR [eax],dl
c00119c9:	5b                   	pop    ebx
c00119ca:	c3                   	ret    

c00119cb <Virt::getPageState(unsigned long)>:
c00119cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119cf:	8b 0d 48 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d948
c00119d5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00119db:	89 d0                	mov    eax,edx
c00119dd:	d1 e8                	shr    eax,1
c00119df:	83 e2 01             	and    edx,0x1
c00119e2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00119e5:	75 04                	jne    c00119eb <Virt::getPageState(unsigned long)+0x20>
c00119e7:	83 e0 0f             	and    eax,0xf
c00119ea:	c3                   	ret    
c00119eb:	c0 e8 04             	shr    al,0x4
c00119ee:	c3                   	ret    

c00119ef <Virt::allocateKernelVirtualPages(int)>:
c00119ef:	55                   	push   ebp
c00119f0:	31 ed                	xor    ebp,ebp
c00119f2:	57                   	push   edi
c00119f3:	56                   	push   esi
c00119f4:	53                   	push   ebx
c00119f5:	31 db                	xor    ebx,ebx
c00119f7:	83 ec 1c             	sub    esp,0x1c
c00119fa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119fe:	8b 3d 44 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d944
c0011a04:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a09:	57                   	push   edi
c0011a0a:	e8 bc ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a0f:	5a                   	pop    edx
c0011a10:	84 c0                	test   al,al
c0011a12:	75 3a                	jne    c0011a4e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a14:	85 db                	test   ebx,ebx
c0011a16:	75 02                	jne    c0011a1a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a18:	89 fd                	mov    ebp,edi
c0011a1a:	43                   	inc    ebx
c0011a1b:	39 f3                	cmp    ebx,esi
c0011a1d:	74 5a                	je     c0011a79 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a1f:	47                   	inc    edi
c0011a20:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a26:	76 31                	jbe    c0011a59 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a28:	c7 05 44 d9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d944,0xc8000
c0011a32:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a37:	75 28                	jne    c0011a61 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a39:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a3e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a43:	57                   	push   edi
c0011a44:	e8 82 ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a49:	5a                   	pop    edx
c0011a4a:	84 c0                	test   al,al
c0011a4c:	74 c6                	je     c0011a14 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a4e:	31 db                	xor    ebx,ebx
c0011a50:	47                   	inc    edi
c0011a51:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a57:	77 cf                	ja     c0011a28 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a59:	89 3d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,edi
c0011a5f:	eb a8                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 c4 a9 02 c0       	push   0xc002a9c4
c0011a69:	e8 e9 8b 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011a6e:	8b 3d 44 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d944
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	eb 90                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a79:	89 2d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,ebp
c0011a7f:	4b                   	dec    ebx
c0011a80:	74 5f                	je     c0011ae1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011a82:	85 f6                	test   esi,esi
c0011a84:	74 3d                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a86:	89 e8                	mov    eax,ebp
c0011a88:	31 db                	xor    ebx,ebx
c0011a8a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011a8d:	eb 14                	jmp    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011a8f:	6a 01                	push   0x1
c0011a91:	43                   	inc    ebx
c0011a92:	50                   	push   eax
c0011a93:	e8 fe fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a98:	58                   	pop    eax
c0011a99:	39 f3                	cmp    ebx,esi
c0011a9b:	5a                   	pop    edx
c0011a9c:	74 25                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a9e:	a1 44 d9 02 c0       	mov    eax,ds:0xc002d944
c0011aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa6:	85 db                	test   ebx,ebx
c0011aa8:	89 15 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,edx
c0011aae:	74 20                	je     c0011ad0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ab0:	39 df                	cmp    edi,ebx
c0011ab2:	75 db                	jne    c0011a8f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ab4:	6a 03                	push   0x3
c0011ab6:	43                   	inc    ebx
c0011ab7:	50                   	push   eax
c0011ab8:	e8 d9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abd:	59                   	pop    ecx
c0011abe:	39 f3                	cmp    ebx,esi
c0011ac0:	58                   	pop    eax
c0011ac1:	75 db                	jne    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ac3:	83 c4 1c             	add    esp,0x1c
c0011ac6:	89 e8                	mov    eax,ebp
c0011ac8:	5b                   	pop    ebx
c0011ac9:	c1 e0 0c             	shl    eax,0xc
c0011acc:	5e                   	pop    esi
c0011acd:	5f                   	pop    edi
c0011ace:	5d                   	pop    ebp
c0011acf:	c3                   	ret    
c0011ad0:	6a 02                	push   0x2
c0011ad2:	bb 01 00 00 00       	mov    ebx,0x1
c0011ad7:	50                   	push   eax
c0011ad8:	e8 b9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011add:	58                   	pop    eax
c0011ade:	5a                   	pop    edx
c0011adf:	eb bd                	jmp    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ae1:	6a 04                	push   0x4
c0011ae3:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ae6:	55                   	push   ebp
c0011ae7:	a3 44 d9 02 c0       	mov    ds:0xc002d944,eax
c0011aec:	e8 a5 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011af1:	59                   	pop    ecx
c0011af2:	89 e8                	mov    eax,ebp
c0011af4:	5b                   	pop    ebx
c0011af5:	c1 e0 0c             	shl    eax,0xc
c0011af8:	83 c4 1c             	add    esp,0x1c
c0011afb:	5b                   	pop    ebx
c0011afc:	5e                   	pop    esi
c0011afd:	5f                   	pop    edi
c0011afe:	5d                   	pop    ebp
c0011aff:	c3                   	ret    

c0011b00 <Virt::freeSwapfilePage(unsigned long)>:
c0011b00:	53                   	push   ebx
c0011b01:	8b 15 2c eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb2c
c0011b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b0b:	b8 01 00 00 00       	mov    eax,0x1
c0011b10:	89 cb                	mov    ebx,ecx
c0011b12:	d3 e0                	shl    eax,cl
c0011b14:	c1 eb 05             	shr    ebx,0x5
c0011b17:	f7 d0                	not    eax
c0011b19:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b1c:	5b                   	pop    ebx
c0011b1d:	c3                   	ret    

c0011b1e <Virt::swapIDToSector(unsigned long)>:
c0011b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b22:	0f af 05 4c d9 02 c0 	imul   eax,DWORD PTR ds:0xc002d94c
c0011b29:	03 05 54 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d954
c0011b2f:	c3                   	ret    

c0011b30 <Virt::allocateSwapfilePage()>:
c0011b30:	55                   	push   ebp
c0011b31:	31 d2                	xor    edx,edx
c0011b33:	57                   	push   edi
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	8b 0d 4c d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d94c
c0011b3f:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c0011b44:	f7 f1                	div    ecx
c0011b46:	39 0d 50 d9 02 c0    	cmp    DWORD PTR ds:0xc002d950,ecx
c0011b4c:	72 2d                	jb     c0011b7b <Virt::allocateSwapfilePage()+0x4b>
c0011b4e:	8b 35 2c eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb2c
c0011b54:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b56:	f6 c2 01             	test   dl,0x1
c0011b59:	74 3c                	je     c0011b97 <Virt::allocateSwapfilePage()+0x67>
c0011b5b:	31 c9                	xor    ecx,ecx
c0011b5d:	bf 01 00 00 00       	mov    edi,0x1
c0011b62:	eb 12                	jmp    c0011b76 <Virt::allocateSwapfilePage()+0x46>
c0011b64:	89 fd                	mov    ebp,edi
c0011b66:	89 ca                	mov    edx,ecx
c0011b68:	d3 e5                	shl    ebp,cl
c0011b6a:	c1 ea 05             	shr    edx,0x5
c0011b6d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011b70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b72:	85 ea                	test   edx,ebp
c0011b74:	74 2a                	je     c0011ba0 <Virt::allocateSwapfilePage()+0x70>
c0011b76:	41                   	inc    ecx
c0011b77:	39 c8                	cmp    eax,ecx
c0011b79:	77 e9                	ja     c0011b64 <Virt::allocateSwapfilePage()+0x34>
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	68 4b ab 02 c0       	push   0xc002ab4b
c0011b83:	e8 cf 8a 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011b88:	83 c4 10             	add    esp,0x10
c0011b8b:	31 c9                	xor    ecx,ecx
c0011b8d:	83 c4 0c             	add    esp,0xc
c0011b90:	89 c8                	mov    eax,ecx
c0011b92:	5b                   	pop    ebx
c0011b93:	5e                   	pop    esi
c0011b94:	5f                   	pop    edi
c0011b95:	5d                   	pop    ebp
c0011b96:	c3                   	ret    
c0011b97:	89 f3                	mov    ebx,esi
c0011b99:	bd 01 00 00 00       	mov    ebp,0x1
c0011b9e:	31 c9                	xor    ecx,ecx
c0011ba0:	09 ea                	or     edx,ebp
c0011ba2:	89 c8                	mov    eax,ecx
c0011ba4:	89 13                	mov    DWORD PTR [ebx],edx
c0011ba6:	83 c4 0c             	add    esp,0xc
c0011ba9:	5b                   	pop    ebx
c0011baa:	5e                   	pop    esi
c0011bab:	5f                   	pop    edi
c0011bac:	5d                   	pop    ebp
c0011bad:	c3                   	ret    

c0011bae <Virt::virtualMemorySetup()>:
c0011bae:	53                   	push   ebx
c0011baf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	6a 0f                	push   0xf
c0011bb9:	53                   	push   ebx
c0011bba:	43                   	inc    ebx
c0011bbb:	e8 d6 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc0:	59                   	pop    ecx
c0011bc1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bc7:	58                   	pop    eax
c0011bc8:	75 ed                	jne    c0011bb7 <Virt::virtualMemorySetup()+0x9>
c0011bca:	83 ec 08             	sub    esp,0x8
c0011bcd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bd2:	68 00 00 00 c8       	push   0xc8000000
c0011bd7:	68 62 ab 02 c0       	push   0xc002ab62
c0011bdc:	e8 e2 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011be1:	58                   	pop    eax
c0011be2:	5a                   	pop    edx
c0011be3:	68 00 f0 ff ef       	push   0xeffff000
c0011be8:	68 76 ab 02 c0       	push   0xc002ab76
c0011bed:	e8 d1 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	83 ec 08             	sub    esp,0x8
c0011bf8:	6a 00                	push   0x0
c0011bfa:	53                   	push   ebx
c0011bfb:	43                   	inc    ebx
c0011bfc:	e8 95 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c0a:	75 e9                	jne    c0011bf5 <Virt::virtualMemorySetup()+0x47>
c0011c0c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c11:	83 ec 08             	sub    esp,0x8
c0011c14:	6a 0f                	push   0xf
c0011c16:	53                   	push   ebx
c0011c17:	43                   	inc    ebx
c0011c18:	e8 79 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c26:	75 e9                	jne    c0011c11 <Virt::virtualMemorySetup()+0x63>
c0011c28:	83 c4 08             	add    esp,0x8
c0011c2b:	5b                   	pop    ebx
c0011c2c:	c3                   	ret    

c0011c2d <Virt::swappingSetup()>:
c0011c2d:	c3                   	ret    

c0011c2e <Virt::getAKernelVAS()>:
c0011c2e:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c0011c33:	c3                   	ret    

c0011c34 <Virt::setupPageSwapping(int)>:
c0011c34:	57                   	push   edi
c0011c35:	56                   	push   esi
c0011c36:	53                   	push   ebx
c0011c37:	83 ec 1c             	sub    esp,0x1c
c0011c3a:	68 8a ab 02 c0       	push   0xc002ab8a
c0011c3f:	e8 7f 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011c44:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c4b:	e8 fb db ff ff       	call   c000f84b <malloc>
c0011c50:	83 c4 0c             	add    esp,0xc
c0011c53:	89 c6                	mov    esi,eax
c0011c55:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c0011c5b:	68 9e ab 02 c0       	push   0xc002ab9e
c0011c60:	50                   	push   eax
c0011c61:	e8 bc 16 00 00       	call   c0013322 <File::File(char const*, Process*)>
c0011c66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c69:	e8 90 18 00 00       	call   c00134fe <File::unlink()>
c0011c6e:	59                   	pop    ecx
c0011c6f:	5b                   	pop    ebx
c0011c70:	6a 12                	push   0x12
c0011c72:	56                   	push   esi
c0011c73:	e8 0e 17 00 00       	call   c0013386 <File::open(FileOpenMode)>
c0011c78:	83 c4 10             	add    esp,0x10
c0011c7b:	85 c0                	test   eax,eax
c0011c7d:	0f 85 5b 01 00 00    	jne    c0011dde <Virt::setupPageSwapping(int)+0x1aa>
c0011c83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c8f:	c1 e3 08             	shl    ebx,0x8
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	68 00 00 01 00       	push   0x10000
c0011c9a:	e8 ac db ff ff       	call   c000f84b <malloc>
c0011c9f:	83 c4 0c             	add    esp,0xc
c0011ca2:	89 c7                	mov    edi,eax
c0011ca4:	68 00 00 01 00       	push   0x10000
c0011ca9:	68 ee 00 00 00       	push   0xee
c0011cae:	50                   	push   eax
c0011caf:	e8 cc ea fe ff       	call   c0000780 <memset>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 db                	test   ebx,ebx
c0011cb9:	79 03                	jns    c0011cbe <Virt::setupPageSwapping(int)+0x8a>
c0011cbb:	83 c3 0f             	add    ebx,0xf
c0011cbe:	c1 fb 04             	sar    ebx,0x4
c0011cc1:	4b                   	dec    ebx
c0011cc2:	83 fb ff             	cmp    ebx,0xffffffff
c0011cc5:	74 4f                	je     c0011d16 <Virt::setupPageSwapping(int)+0xe2>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ccc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011cd0:	52                   	push   edx
c0011cd1:	57                   	push   edi
c0011cd2:	6a 00                	push   0x0
c0011cd4:	68 00 00 01 00       	push   0x10000
c0011cd9:	56                   	push   esi
c0011cda:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011cdd:	83 c4 20             	add    esp,0x20
c0011ce0:	85 c0                	test   eax,eax
c0011ce2:	0f 85 e0 00 00 00    	jne    c0011dc8 <Virt::setupPageSwapping(int)+0x194>
c0011ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cec:	3d 00 00 01 00       	cmp    eax,0x10000
c0011cf1:	74 ce                	je     c0011cc1 <Virt::setupPageSwapping(int)+0x8d>
c0011cf3:	83 ec 08             	sub    esp,0x8
c0011cf6:	4b                   	dec    ebx
c0011cf7:	50                   	push   eax
c0011cf8:	68 f1 ab 02 c0       	push   0xc002abf1
c0011cfd:	e8 c1 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011d02:	c7 04 24 fa ab 02 c0 	mov    DWORD PTR [esp],0xc002abfa
c0011d09:	e8 49 89 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	83 fb ff             	cmp    ebx,0xffffffff
c0011d14:	75 b1                	jne    c0011cc7 <Virt::setupPageSwapping(int)+0x93>
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	56                   	push   esi
c0011d1a:	e8 c5 16 00 00       	call   c00133e4 <File::close()>
c0011d1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d22:	e8 44 db ff ff       	call   c000f86b <rfree>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	85 f6                	test   esi,esi
c0011d2c:	74 0c                	je     c0011d3a <Virt::setupPageSwapping(int)+0x106>
c0011d2e:	83 ec 0c             	sub    esp,0xc
c0011d31:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d33:	56                   	push   esi
c0011d34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	83 ec 08             	sub    esp,0x8
c0011d3d:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0011d42:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4a:	68 9e ab 02 c0       	push   0xc002ab9e
c0011d4f:	50                   	push   eax
c0011d50:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d57:	c6 05 58 d9 02 c0 43 	mov    BYTE PTR ds:0xc002d958,0x43
c0011d5e:	c1 e2 0b             	shl    edx,0xb
c0011d61:	a3 54 d9 02 c0       	mov    ds:0xc002d954,eax
c0011d66:	89 15 50 d9 02 c0    	mov    DWORD PTR ds:0xc002d950,edx
c0011d6c:	c7 05 4c d9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d94c,0x8
c0011d76:	c1 ea 08             	shr    edx,0x8
c0011d79:	89 14 24             	mov    DWORD PTR [esp],edx
c0011d7c:	e8 ca da ff ff       	call   c000f84b <malloc>
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 c1                	mov    ecx,eax
c0011d86:	a3 2c eb 02 c0       	mov    ds:0xc002eb2c,eax
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c0011d92:	f7 35 4c d9 02 c0    	div    DWORD PTR ds:0xc002d94c
c0011d98:	c1 e8 05             	shr    eax,0x5
c0011d9b:	50                   	push   eax
c0011d9c:	6a 00                	push   0x0
c0011d9e:	51                   	push   ecx
c0011d9f:	e8 dc e9 fe ff       	call   c0000780 <memset>
c0011da4:	58                   	pop    eax
c0011da5:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c0011daa:	5a                   	pop    edx
c0011dab:	31 d2                	xor    edx,edx
c0011dad:	f7 35 4c d9 02 c0    	div    DWORD PTR ds:0xc002d94c
c0011db3:	c1 e8 05             	shr    eax,0x5
c0011db6:	50                   	push   eax
c0011db7:	68 00 ac 02 c0       	push   0xc002ac00
c0011dbc:	e8 02 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dc1:	83 c4 20             	add    esp,0x20
c0011dc4:	5b                   	pop    ebx
c0011dc5:	5e                   	pop    esi
c0011dc6:	5f                   	pop    edi
c0011dc7:	c3                   	ret    
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	50                   	push   eax
c0011dcc:	68 d9 ab 02 c0       	push   0xc002abd9
c0011dd1:	e8 ed 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	e9 0a ff ff ff       	jmp    c0011ce8 <Virt::setupPageSwapping(int)+0xb4>
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	50                   	push   eax
c0011de2:	68 b5 ab 02 c0       	push   0xc002abb5
c0011de7:	e8 d7 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dec:	c7 04 24 be ab 02 c0 	mov    DWORD PTR [esp],0xc002abbe
c0011df3:	e8 5f 88 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	e9 83 fe ff ff       	jmp    c0011c83 <Virt::setupPageSwapping(int)+0x4f>

c0011e00 <VAS::VAS()>:
c0011e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1a:	a3 30 eb 02 c0       	mov    ds:0xc002eb30,eax
c0011e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e23:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e32:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e39:	90                   	nop
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::VAS(VAS*)>:
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e4e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e55:	83 ec 0c             	sub    esp,0xc
c0011e58:	68 e4 a9 02 c0       	push   0xc002a9e4
c0011e5d:	e8 f5 87 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	90                   	nop
c0011e66:	83 c4 0c             	add    esp,0xc
c0011e69:	c3                   	ret    

c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e6e:	89 c2                	mov    edx,eax
c0011e70:	c1 e8 0a             	shr    eax,0xa
c0011e73:	c1 ea 16             	shr    edx,0x16
c0011e76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e7b:	19 c9                	sbb    ecx,ecx
c0011e7d:	c1 e2 0c             	shl    edx,0xc
c0011e80:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e86:	25 fc 0f 00 00       	and    eax,0xffc
c0011e8b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e92:	01 d0                	add    eax,edx
c0011e94:	c3                   	ret    
c0011e95:	90                   	nop

c0011e96 <VAS::getPageTableEntry(unsigned long)>:
c0011e96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e9a:	89 ca                	mov    edx,ecx
c0011e9c:	c1 e9 0a             	shr    ecx,0xa
c0011e9f:	c1 ea 16             	shr    edx,0x16
c0011ea2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ea8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eae:	c1 e0 0c             	shl    eax,0xc
c0011eb1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011eb4:	c3                   	ret    

c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011eb5:	57                   	push   edi
c0011eb6:	56                   	push   esi
c0011eb7:	be 01 00 00 00       	mov    esi,0x1
c0011ebc:	53                   	push   ebx
c0011ebd:	83 ec 10             	sub    esp,0x10
c0011ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec4:	c1 eb 0c             	shr    ebx,0xc
c0011ec7:	eb 3f                	jmp    c0011f08 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ec9:	e8 60 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011ece:	83 ec 08             	sub    esp,0x8
c0011ed1:	57                   	push   edi
c0011ed2:	50                   	push   eax
c0011ed3:	e8 be ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011edd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ee1:	f6 c4 04             	test   ah,0x4
c0011ee4:	75 5f                	jne    c0011f45 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ee6:	80 fa 04             	cmp    dl,0x4
c0011ee9:	74 78                	je     c0011f63 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eeb:	80 fa 02             	cmp    dl,0x2
c0011eee:	0f 84 88 00 00 00    	je     c0011f7c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ef4:	80 fa 03             	cmp    dl,0x3
c0011ef7:	0f 84 ad 00 00 00    	je     c0011faa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011efd:	fe ca                	dec    dl
c0011eff:	0f 84 92 00 00 00    	je     c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f05:	43                   	inc    ebx
c0011f06:	31 f6                	xor    esi,esi
c0011f08:	53                   	push   ebx
c0011f09:	e8 bd fa ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011f0e:	5f                   	pop    edi
c0011f0f:	89 df                	mov    edi,ebx
c0011f11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f15:	c1 e7 0c             	shl    edi,0xc
c0011f18:	84 c0                	test   al,al
c0011f1a:	75 ad                	jne    c0011ec9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	68 1b ac 02 c0       	push   0xc002ac1b
c0011f24:	e8 2e 87 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011f29:	e8 00 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011f2e:	5a                   	pop    edx
c0011f2f:	59                   	pop    ecx
c0011f30:	57                   	push   edi
c0011f31:	50                   	push   eax
c0011f32:	e8 5f ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f3c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f40:	f6 c4 04             	test   ah,0x4
c0011f43:	74 c0                	je     c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f45:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	50                   	push   eax
c0011f52:	e8 d6 de ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f5e:	80 fa 04             	cmp    dl,0x4
c0011f61:	75 88                	jne    c0011eeb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f63:	89 f0                	mov    eax,esi
c0011f65:	84 c0                	test   al,al
c0011f67:	75 47                	jne    c0011fb0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f69:	c7 44 24 20 08 aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aa08
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	5b                   	pop    ebx
c0011f75:	5e                   	pop    esi
c0011f76:	5f                   	pop    edi
c0011f77:	e9 db 86 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c0011f7c:	89 f0                	mov    eax,esi
c0011f7e:	84 c0                	test   al,al
c0011f80:	75 15                	jne    c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	68 37 ac 02 c0       	push   0xc002ac37
c0011f8a:	e8 c8 86 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	e9 6e ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f97:	83 ec 08             	sub    esp,0x8
c0011f9a:	6a 00                	push   0x0
c0011f9c:	53                   	push   ebx
c0011f9d:	e8 f4 f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	e9 5b ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011faa:	89 f0                	mov    eax,esi
c0011fac:	84 c0                	test   al,al
c0011fae:	75 15                	jne    c0011fc5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fb0:	83 ec 08             	sub    esp,0x8
c0011fb3:	6a 00                	push   0x0
c0011fb5:	53                   	push   ebx
c0011fb6:	e8 db f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	5b                   	pop    ebx
c0011fc2:	5e                   	pop    esi
c0011fc3:	5f                   	pop    edi
c0011fc4:	c3                   	ret    
c0011fc5:	c7 44 24 20 53 ac 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ac53
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	5b                   	pop    ebx
c0011fd1:	5e                   	pop    esi
c0011fd2:	5f                   	pop    edi
c0011fd3:	e9 7f 86 00 00       	jmp    c001a657 <Krnl::panic(char const*)>

c0011fd8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fe0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fe4:	74 09                	je     c0011fef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fea:	e9 c6 fe ff ff       	jmp    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fef:	c7 44 24 04 2c aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa2c
c0011ff7:	e9 c7 0d 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c0011ffc <VAS::virtualToPhysical(unsigned long)>:
c0011ffc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012000:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012004:	e8 8d fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012009:	5a                   	pop    edx
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	59                   	pop    ecx
c001200d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012012:	c3                   	ret    
c0012013:	90                   	nop

c0012014 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012014:	55                   	push   ebp
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	53                   	push   ebx
c0012018:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001201c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012020:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012024:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012028:	85 db                	test   ebx,ebx
c001202a:	7e 22                	jle    c001204e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001202c:	c1 e3 0c             	shl    ebx,0xc
c001202f:	01 f3                	add    ebx,esi
c0012031:	56                   	push   esi
c0012032:	81 c6 00 10 00 00    	add    esi,0x1000
c0012038:	55                   	push   ebp
c0012039:	e8 58 fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001203e:	5a                   	pop    edx
c001203f:	59                   	pop    ecx
c0012040:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012042:	21 f9                	and    ecx,edi
c0012044:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012048:	39 f3                	cmp    ebx,esi
c001204a:	89 08                	mov    DWORD PTR [eax],ecx
c001204c:	75 e3                	jne    c0012031 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001204e:	5b                   	pop    ebx
c001204f:	5e                   	pop    esi
c0012050:	5f                   	pop    edi
c0012051:	5d                   	pop    ebp
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::setToWriteCombining(unsigned long, int)>:
c0012054:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0012059:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001205f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012066:	75 01                	jne    c0012069 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012068:	c3                   	ret    
c0012069:	68 80 00 00 00       	push   0x80
c001206e:	6a ff                	push   0xffffffff
c0012070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001207c:	e8 93 ff ff ff       	call   c0012014 <VAS::reflagRange(unsigned long, int, int, int)>
c0012081:	83 c4 14             	add    esp,0x14
c0012084:	c3                   	ret    
c0012085:	90                   	nop

c0012086 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012086:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001208b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001208f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012096:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012099:	19 c0                	sbb    eax,eax
c001209b:	83 ca 03             	or     edx,0x3
c001209e:	83 e0 fc             	and    eax,0xfffffffc
c00120a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120a8:	0f 20 d8             	mov    eax,cr3
c00120ab:	0f 22 d8             	mov    cr3,eax
c00120ae:	c3                   	ret    
c00120af:	90                   	nop

c00120b0 <VAS::~VAS()>:
c00120b0:	83 ec 2c             	sub    esp,0x2c
c00120b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120bb:	e8 34 be 00 00       	call   c001def4 <lockScheduler()>
c00120c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00120c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ca:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120d0:	83 ec 04             	sub    esp,0x4
c00120d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120d7:	6a 01                	push   0x1
c00120d9:	50                   	push   eax
c00120da:	e8 a7 ff ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120f2:	0f 8f d7 00 00 00    	jg     c00121cf <VAS::~VAS()+0x11f>
c00120f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012103:	c1 e2 02             	shl    edx,0x2
c0012106:	01 d0                	add    eax,edx
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012112:	83 e0 01             	and    eax,0x1
c0012115:	0f 84 ab 00 00 00    	je     c00121c6 <VAS::~VAS()+0x116>
c001211b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012123:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001212b:	7f 75                	jg     c00121a2 <VAS::~VAS()+0xf2>
c001212d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012131:	c1 e0 0a             	shl    eax,0xa
c0012134:	89 c2                	mov    edx,eax
c0012136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001213a:	01 d0                	add    eax,edx
c001213c:	c1 e0 0c             	shl    eax,0xc
c001213f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012143:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001214d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012153:	83 ec 04             	sub    esp,0x4
c0012156:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001215a:	6a 01                	push   0x1
c001215c:	50                   	push   eax
c001215d:	e8 08 fd ff ff       	call   c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012162:	83 c4 10             	add    esp,0x10
c0012165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216d:	8b 00                	mov    eax,DWORD PTR [eax]
c001216f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012177:	25 01 04 00 00       	and    eax,0x401
c001217c:	3d 01 04 00 00       	cmp    eax,0x401
c0012181:	75 19                	jne    c001219c <VAS::~VAS()+0xec>
c0012183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012187:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218c:	83 ec 0c             	sub    esp,0xc
c001218f:	50                   	push   eax
c0012190:	e8 98 dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001219c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121a0:	eb 81                	jmp    c0012123 <VAS::~VAS()+0x73>
c00121a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121a6:	25 00 04 00 00       	and    eax,0x400
c00121ab:	74 19                	je     c00121c6 <VAS::~VAS()+0x116>
c00121ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b6:	83 ec 0c             	sub    esp,0xc
c00121b9:	50                   	push   eax
c00121ba:	e8 6e dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ca:	e9 1b ff ff ff       	jmp    c00120ea <VAS::~VAS()+0x3a>
c00121cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	50                   	push   eax
c00121da:	e8 d6 fc ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121e9:	83 ec 0c             	sub    esp,0xc
c00121ec:	50                   	push   eax
c00121ed:	e8 3b dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121fd:	c1 e0 02             	shl    eax,0x2
c0012200:	83 ec 08             	sub    esp,0x8
c0012203:	50                   	push   eax
c0012204:	68 50 aa 02 c0       	push   0xc002aa50
c0012209:	e8 b5 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	e8 e0 bc 00 00       	call   c001def6 <unlockScheduler()>
c0012216:	90                   	nop
c0012217:	83 c4 2c             	add    esp,0x2c
c001221a:	c3                   	ret    
c001221b:	90                   	nop

c001221c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001221c:	55                   	push   ebp
c001221d:	57                   	push   edi
c001221e:	56                   	push   esi
c001221f:	53                   	push   ebx
c0012220:	83 ec 1c             	sub    esp,0x1c
c0012223:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012227:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001222b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012231:	77 08                	ja     c001223b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012233:	0f 20 d8             	mov    eax,cr3
c0012236:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012239:	75 47                	jne    c0012282 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001223b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223f:	09 d8                	or     eax,ebx
c0012241:	a9 ff 0f 00 00       	test   eax,0xfff
c0012246:	75 57                	jne    c001229f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012248:	89 de                	mov    esi,ebx
c001224a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001224d:	c1 ee 16             	shr    esi,0x16
c0012250:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012257:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001225b:	74 54                	je     c00122b1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001225d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012261:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012267:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001226b:	c1 e6 0c             	shl    esi,0xc
c001226e:	c1 eb 0a             	shr    ebx,0xa
c0012271:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012277:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001227a:	83 c4 1c             	add    esp,0x1c
c001227d:	5b                   	pop    ebx
c001227e:	5e                   	pop    esi
c001227f:	5f                   	pop    edi
c0012280:	5d                   	pop    ebp
c0012281:	c3                   	ret    
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	68 70 aa 02 c0       	push   0xc002aa70
c001228a:	e8 34 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012296:	09 d8                	or     eax,ebx
c0012298:	a9 ff 0f 00 00       	test   eax,0xfff
c001229d:	74 a9                	je     c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229f:	83 ec 0c             	sub    esp,0xc
c00122a2:	68 d8 aa 02 c0       	push   0xc002aad8
c00122a7:	e8 ab 83 00 00       	call   c001a657 <Krnl::panic(char const*)>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	eb 97                	jmp    c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122b5:	e8 fd db ff ff       	call   c000feb7 <Phys::allocatePage()>
c00122ba:	89 c5                	mov    ebp,eax
c00122bc:	e8 6d f9 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122c8:	6a 01                	push   0x1
c00122ca:	e8 20 f7 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00122cf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122d6:	6a 01                	push   0x1
c00122d8:	50                   	push   eax
c00122d9:	55                   	push   ebp
c00122da:	81 cd 07 04 00 00    	or     ebp,0x407
c00122e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122e4:	51                   	push   ecx
c00122e5:	e8 26 02 00 00       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ea:	83 c4 1c             	add    esp,0x1c
c00122ed:	68 00 10 00 00       	push   0x1000
c00122f2:	6a 00                	push   0x0
c00122f4:	50                   	push   eax
c00122f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122f9:	e8 82 e4 fe ff       	call   c0000780 <memset>
c00122fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012302:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012305:	e8 ab fb ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001230a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001230e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012317:	e9 41 ff ff ff       	jmp    c001225d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001231c <VAS::allocatePages(int, int)>:
c001231c:	55                   	push   ebp
c001231d:	57                   	push   edi
c001231e:	56                   	push   esi
c001231f:	53                   	push   ebx
c0012320:	83 ec 1c             	sub    esp,0x1c
c0012323:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012327:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001232c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012332:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012338:	83 e0 01             	and    eax,0x1
c001233b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001233f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012343:	0f 85 cc 00 00 00    	jne    c0012415 <VAS::allocatePages(int, int)+0xf9>
c0012349:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001234c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012350:	85 c0                	test   eax,eax
c0012352:	0f 84 a1 00 00 00    	je     c00123f9 <VAS::allocatePages(int, int)+0xdd>
c0012358:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001235c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012360:	c1 e6 0c             	shl    esi,0xc
c0012363:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012367:	85 c0                	test   eax,eax
c0012369:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001236c:	7e 33                	jle    c00123a1 <VAS::allocatePages(int, int)+0x85>
c001236e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012372:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012376:	81 cd 00 04 00 00    	or     ebp,0x400
c001237c:	e8 36 db ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012381:	55                   	push   ebp
c0012382:	53                   	push   ebx
c0012383:	50                   	push   eax
c0012384:	57                   	push   edi
c0012385:	e8 92 fe ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012392:	74 03                	je     c0012397 <VAS::allocatePages(int, int)+0x7b>
c0012394:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012397:	81 c3 00 10 00 00    	add    ebx,0x1000
c001239d:	39 de                	cmp    esi,ebx
c001239f:	75 db                	jne    c001237c <VAS::allocatePages(int, int)+0x60>
c00123a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123a6:	75 12                	jne    c00123ba <VAS::allocatePages(int, int)+0x9e>
c00123a8:	0f 20 d8             	mov    eax,cr3
c00123ab:	0f 22 d8             	mov    cr3,eax
c00123ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b2:	83 c4 1c             	add    esp,0x1c
c00123b5:	5b                   	pop    ebx
c00123b6:	5e                   	pop    esi
c00123b7:	5f                   	pop    edi
c00123b8:	5d                   	pop    ebp
c00123b9:	c3                   	ret    
c00123ba:	c1 ee 0a             	shr    esi,0xa
c00123bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123c7:	c1 eb 0a             	shr    ebx,0xa
c00123ca:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123dc:	39 c3                	cmp    ebx,eax
c00123de:	77 ce                	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00123e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123e9:	39 d8                	cmp    eax,ebx
c00123eb:	73 f3                	jae    c00123e0 <VAS::allocatePages(int, int)+0xc4>
c00123ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123f1:	83 c4 1c             	add    esp,0x1c
c00123f4:	5b                   	pop    ebx
c00123f5:	5e                   	pop    esi
c00123f6:	5f                   	pop    edi
c00123f7:	5d                   	pop    ebp
c00123f8:	c3                   	ret    
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 fc aa 02 c0       	push   0xc002aafc
c0012401:	e8 51 82 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0012406:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	e9 43 ff ff ff       	jmp    c0012358 <VAS::allocatePages(int, int)+0x3c>
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001241c:	e8 ce f5 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001242d:	0f 87 9b 00 00 00    	ja     c00124ce <VAS::allocatePages(int, int)+0x1b2>
c0012433:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012437:	85 d2                	test   edx,edx
c0012439:	7e 3c                	jle    c0012477 <VAS::allocatePages(int, int)+0x15b>
c001243b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001243f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012443:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012447:	c1 e5 0c             	shl    ebp,0xc
c001244a:	81 ce 00 04 00 00    	or     esi,0x400
c0012450:	01 dd                	add    ebp,ebx
c0012452:	e8 60 da ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012457:	56                   	push   esi
c0012458:	53                   	push   ebx
c0012459:	50                   	push   eax
c001245a:	57                   	push   edi
c001245b:	e8 bc fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012468:	74 03                	je     c001246d <VAS::allocatePages(int, int)+0x151>
c001246a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001246d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012473:	39 dd                	cmp    ebp,ebx
c0012475:	75 db                	jne    c0012452 <VAS::allocatePages(int, int)+0x136>
c0012477:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001247c:	0f 84 26 ff ff ff    	je     c00123a8 <VAS::allocatePages(int, int)+0x8c>
c0012482:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012486:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001248a:	89 d3                	mov    ebx,edx
c001248c:	c1 e0 0c             	shl    eax,0xc
c001248f:	c1 eb 0a             	shr    ebx,0xa
c0012492:	01 d0                	add    eax,edx
c0012494:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001249a:	c1 e8 0a             	shr    eax,0xa
c001249d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124a8:	2d 00 00 40 00       	sub    eax,0x400000
c00124ad:	39 c3                	cmp    ebx,eax
c00124af:	0f 87 f9 fe ff ff    	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00124b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124be:	39 d8                	cmp    eax,ebx
c00124c0:	73 f3                	jae    c00124b5 <VAS::allocatePages(int, int)+0x199>
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00124d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124e0:	0f 84 4d ff ff ff    	je     c0012433 <VAS::allocatePages(int, int)+0x117>
c00124e6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124ee:	e9 40 ff ff ff       	jmp    c0012433 <VAS::allocatePages(int, int)+0x117>
c00124f3:	90                   	nop

c00124f4 <VAS::setCPUSpecific(unsigned long)>:
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	6a 05                	push   0x5
c00124f9:	68 00 00 40 c2       	push   0xc2400000
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012506:	e8 11 fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001250b:	83 c4 1c             	add    esp,0x1c
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012510:	55                   	push   ebp
c0012511:	57                   	push   edi
c0012512:	56                   	push   esi
c0012513:	53                   	push   ebx
c0012514:	83 ec 1c             	sub    esp,0x1c
c0012517:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001251c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012520:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012526:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001252a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012530:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012534:	83 e0 01             	and    eax,0x1
c0012537:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001253b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001253f:	85 c0                	test   eax,eax
c0012541:	7e 39                	jle    c001257c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012547:	89 f3                	mov    ebx,esi
c0012549:	c1 e0 0c             	shl    eax,0xc
c001254c:	01 f0                	add    eax,esi
c001254e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012552:	55                   	push   ebp
c0012553:	53                   	push   ebx
c0012554:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012558:	29 f0                	sub    eax,esi
c001255a:	01 d8                	add    eax,ebx
c001255c:	50                   	push   eax
c001255d:	57                   	push   edi
c001255e:	e8 b9 fc ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256b:	74 03                	je     c0012570 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001256d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012570:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012576:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001257a:	75 d6                	jne    c0012552 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001257c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012581:	75 10                	jne    c0012593 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012583:	0f 20 d8             	mov    eax,cr3
c0012586:	0f 22 d8             	mov    cr3,eax
c0012589:	83 c4 1c             	add    esp,0x1c
c001258c:	89 f0                	mov    eax,esi
c001258e:	5b                   	pop    ebx
c001258f:	5e                   	pop    esi
c0012590:	5f                   	pop    edi
c0012591:	5d                   	pop    ebp
c0012592:	c3                   	ret    
c0012593:	89 f3                	mov    ebx,esi
c0012595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012599:	c1 eb 0a             	shr    ebx,0xa
c001259c:	c1 e0 0c             	shl    eax,0xc
c001259f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a5:	01 f0                	add    eax,esi
c00125a7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ad:	c1 e8 0a             	shr    eax,0xa
c00125b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125b5:	2d 00 00 40 00       	sub    eax,0x400000
c00125ba:	39 c3                	cmp    ebx,eax
c00125bc:	77 cb                	ja     c0012589 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125be:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c7:	39 d8                	cmp    eax,ebx
c00125c9:	73 f3                	jae    c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125cb:	83 c4 1c             	add    esp,0x1c
c00125ce:	89 f0                	mov    eax,esi
c00125d0:	5b                   	pop    ebx
c00125d1:	5e                   	pop    esi
c00125d2:	5f                   	pop    edi
c00125d3:	5d                   	pop    ebp
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	83 ec 1c             	sub    esp,0x1c
c00125dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125e5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125ed:	a9 ff 0f 00 00       	test   eax,0xfff
c00125f2:	75 4a                	jne    c001263e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125f4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125f8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00125fb:	c1 eb 16             	shr    ebx,0x16
c00125fe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012605:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012609:	74 4d                	je     c0012658 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001260b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001260f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012613:	c1 e8 0a             	shr    eax,0xa
c0012616:	80 fa 01             	cmp    dl,0x1
c0012619:	19 d2                	sbb    edx,edx
c001261b:	c1 e3 0c             	shl    ebx,0xc
c001261e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012622:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012628:	25 fc 0f 00 00       	and    eax,0xffc
c001262d:	01 d8                	add    eax,ebx
c001262f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012636:	83 c4 1c             	add    esp,0x1c
c0012639:	5b                   	pop    ebx
c001263a:	5e                   	pop    esi
c001263b:	5f                   	pop    edi
c001263c:	5d                   	pop    ebp
c001263d:	c3                   	ret    
c001263e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012642:	83 ec 0c             	sub    esp,0xc
c0012645:	68 28 ab 02 c0       	push   0xc002ab28
c001264a:	e8 08 80 00 00       	call   c001a657 <Krnl::panic(char const*)>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012656:	eb 9c                	jmp    c00125f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001265c:	e8 56 d8 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012661:	89 c5                	mov    ebp,eax
c0012663:	e8 c6 f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001266f:	6a 01                	push   0x1
c0012671:	e8 79 f3 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012676:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001267d:	6a 01                	push   0x1
c001267f:	50                   	push   eax
c0012680:	55                   	push   ebp
c0012681:	81 cd 07 04 00 00    	or     ebp,0x407
c0012687:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001268b:	51                   	push   ecx
c001268c:	e8 7f fe ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012691:	83 c4 1c             	add    esp,0x1c
c0012694:	68 00 10 00 00       	push   0x1000
c0012699:	6a 00                	push   0x0
c001269b:	50                   	push   eax
c001269c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126a0:	e8 db e0 fe ff       	call   c0000780 <memset>
c00126a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126a9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126ac:	e8 04 f8 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00126b1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126be:	e9 48 ff ff ff       	jmp    c001260b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126c3:	90                   	nop

c00126c4 <VAS::VAS(bool)>:
c00126c4:	53                   	push   ebx
c00126c5:	83 ec 28             	sub    esp,0x28
c00126c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ea:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ee:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126f1:	e8 c1 d7 ff ff       	call   c000feb7 <Phys::allocatePage()>
c00126f6:	89 c2                	mov    edx,eax
c00126f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00126ff:	e8 2a f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012704:	89 c3                	mov    ebx,eax
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	6a 01                	push   0x1
c001270b:	e8 df f2 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	89 c2                	mov    edx,eax
c0012715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012719:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	6a 03                	push   0x3
c0012721:	6a 01                	push   0x1
c0012723:	52                   	push   edx
c0012724:	50                   	push   eax
c0012725:	53                   	push   ebx
c0012726:	e8 e5 fd ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001272b:	83 c4 20             	add    esp,0x20
c001272e:	89 c2                	mov    edx,eax
c0012730:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012734:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012737:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001273f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012747:	7f 1c                	jg     c0012765 <VAS::VAS(bool)+0xa1>
c0012749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012754:	c1 e2 02             	shl    edx,0x2
c0012757:	01 d0                	add    eax,edx
c0012759:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001275f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012763:	eb da                	jmp    c001273f <VAS::VAS(bool)+0x7b>
c0012765:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001276d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012775:	7f 7a                	jg     c00127f1 <VAS::VAS(bool)+0x12d>
c0012777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277b:	2d 00 02 00 00       	sub    eax,0x200
c0012780:	c1 e0 0c             	shl    eax,0xc
c0012783:	83 c8 03             	or     eax,0x3
c0012786:	89 c2                	mov    edx,eax
c0012788:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001278d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012793:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012799:	83 e0 10             	and    eax,0x10
c001279c:	84 c0                	test   al,al
c001279e:	74 07                	je     c00127a7 <VAS::VAS(bool)+0xe3>
c00127a0:	b8 00 01 00 00       	mov    eax,0x100
c00127a5:	eb 05                	jmp    c00127ac <VAS::VAS(bool)+0xe8>
c00127a7:	b8 00 00 00 00       	mov    eax,0x0
c00127ac:	09 d0                	or     eax,edx
c00127ae:	89 c1                	mov    ecx,eax
c00127b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127bb:	c1 e2 02             	shl    edx,0x2
c00127be:	01 d0                	add    eax,edx
c00127c0:	89 ca                	mov    edx,ecx
c00127c2:	89 10                	mov    DWORD PTR [eax],edx
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 40 03 00 00       	sub    eax,0x340
c00127cd:	83 f8 7f             	cmp    eax,0x7f
c00127d0:	77 16                	ja     c00127e8 <VAS::VAS(bool)+0x124>
c00127d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127dd:	c1 e2 02             	shl    edx,0x2
c00127e0:	01 d0                	add    eax,edx
c00127e2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127e8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127ec:	e9 7c ff ff ff       	jmp    c001276d <VAS::VAS(bool)+0xa9>
c00127f1:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00127f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012802:	83 e0 10             	and    eax,0x10
c0012805:	84 c0                	test   al,al
c0012807:	74 07                	je     c0012810 <VAS::VAS(bool)+0x14c>
c0012809:	b8 03 41 00 00       	mov    eax,0x4103
c001280e:	eb 05                	jmp    c0012815 <VAS::VAS(bool)+0x151>
c0012810:	b8 03 40 00 00       	mov    eax,0x4003
c0012815:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012819:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001281c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012822:	89 02                	mov    DWORD PTR [edx],eax
c0012824:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0012829:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001282f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012835:	83 ec 08             	sub    esp,0x8
c0012838:	50                   	push   eax
c0012839:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001283d:	e8 b2 fc ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012849:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001284c:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0012851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012857:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285d:	83 e0 10             	and    eax,0x10
c0012860:	84 c0                	test   al,al
c0012862:	74 07                	je     c001286b <VAS::VAS(bool)+0x1a7>
c0012864:	b8 00 01 00 00       	mov    eax,0x100
c0012869:	eb 05                	jmp    c0012870 <VAS::VAS(bool)+0x1ac>
c001286b:	b8 00 00 00 00       	mov    eax,0x0
c0012870:	09 c2                	or     edx,eax
c0012872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012876:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012879:	05 fc 0f 00 00       	add    eax,0xffc
c001287e:	83 ca 03             	or     edx,0x3
c0012881:	89 10                	mov    DWORD PTR [eax],edx
c0012883:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0012888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288e:	83 ec 0c             	sub    esp,0xc
c0012891:	50                   	push   eax
c0012892:	e8 45 1c 00 00       	call   c00144dc <Device::getName()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	83 ec 08             	sub    esp,0x8
c001289d:	68 6d ac 02 c0       	push   0xc002ac6d
c00128a2:	50                   	push   eax
c00128a3:	e8 20 e0 fe ff       	call   c00008c8 <strcmp>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	85 c0                	test   eax,eax
c00128ad:	0f 94 c0             	sete   al
c00128b0:	84 c0                	test   al,al
c00128b2:	74 70                	je     c0012924 <VAS::VAS(bool)+0x260>
c00128b4:	e8 1e b6 00 00       	call   c001ded7 <disableIRQs()>
c00128b9:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00128be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128c4:	05 7c 09 00 00       	add    eax,0x97c
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	50                   	push   eax
c00128cd:	e8 f2 c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128da:	89 c3                	mov    ebx,eax
c00128dc:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00128e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e7:	05 7c 09 00 00       	add    eax,0x97c
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	50                   	push   eax
c00128f0:	e8 cf c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 ec 08             	sub    esp,0x8
c00128fb:	50                   	push   eax
c00128fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012900:	e8 91 f5 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	8b 00                	mov    eax,DWORD PTR [eax]
c001290a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001290f:	6a 11                	push   0x11
c0012911:	53                   	push   ebx
c0012912:	50                   	push   eax
c0012913:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012917:	e8 00 f9 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	e8 c1 b5 00 00       	call   c001dee5 <enableIRQs()>
c0012924:	90                   	nop
c0012925:	83 c4 28             	add    esp,0x28
c0012928:	5b                   	pop    ebx
c0012929:	c3                   	ret    

c001292a <VAS::evict(unsigned long)>:
c001292a:	55                   	push   ebp
c001292b:	57                   	push   edi
c001292c:	56                   	push   esi
c001292d:	53                   	push   ebx
c001292e:	83 ec 1c             	sub    esp,0x1c
c0012931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012935:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001293d:	e8 ee f1 ff ff       	call   c0011b30 <Virt::allocateSwapfilePage()>
c0012942:	89 c7                	mov    edi,eax
c0012944:	a1 4c d9 02 c0       	mov    eax,ds:0xc002d94c
c0012949:	85 c0                	test   eax,eax
c001294b:	7e 3d                	jle    c001298a <VAS::evict(unsigned long)+0x60>
c001294d:	89 ee                	mov    esi,ebp
c001294f:	31 db                	xor    ebx,ebx
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	57                   	push   edi
c0012955:	e8 c4 f1 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c001295a:	89 34 24             	mov    DWORD PTR [esp],esi
c001295d:	01 d8                	add    eax,ebx
c001295f:	6a 01                	push   0x1
c0012961:	31 d2                	xor    edx,edx
c0012963:	43                   	inc    ebx
c0012964:	52                   	push   edx
c0012965:	81 c6 00 02 00 00    	add    esi,0x200
c001296b:	50                   	push   eax
c001296c:	0f be 05 58 d9 02 c0 	movsx  eax,BYTE PTR ds:0xc002d958
c0012973:	ff 34 85 bc ee 02 c0 	push   DWORD PTR [eax*4-0x3ffd1144]
c001297a:	e8 91 3d 00 00       	call   c0016710 <LogicalDisk::write(unsigned long long, int, void*)>
c001297f:	83 c4 20             	add    esp,0x20
c0012982:	39 1d 4c d9 02 c0    	cmp    DWORD PTR ds:0xc002d94c,ebx
c0012988:	7f c7                	jg     c0012951 <VAS::evict(unsigned long)+0x27>
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	c1 e7 0b             	shl    edi,0xb
c0012990:	55                   	push   ebp
c0012991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012995:	e8 fc f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001299a:	83 c4 0c             	add    esp,0xc
c001299d:	8b 10                	mov    edx,DWORD PTR [eax]
c001299f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129a5:	09 d7                	or     edi,edx
c00129a7:	89 38                	mov    DWORD PTR [eax],edi
c00129a9:	a1 28 eb 02 c0       	mov    eax,ds:0xc002eb28
c00129ae:	40                   	inc    eax
c00129af:	a3 28 eb 02 c0       	mov    ds:0xc002eb28,eax
c00129b4:	0f 20 da             	mov    edx,cr3
c00129b7:	0f 22 da             	mov    cr3,edx
c00129ba:	50                   	push   eax
c00129bb:	55                   	push   ebp
c00129bc:	68 7b ac 02 c0       	push   0xc002ac7b
c00129c1:	e8 fd 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00129c6:	a1 24 eb 02 c0       	mov    eax,ds:0xc002eb24
c00129cb:	c7 44 24 40 90 ac 02 c0 	mov    DWORD PTR [esp+0x40],0xc002ac90
c00129d3:	8d 50 01             	lea    edx,[eax+0x1]
c00129d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129da:	89 15 24 eb 02 c0    	mov    DWORD PTR ds:0xc002eb24,edx
c00129e0:	83 c4 2c             	add    esp,0x2c
c00129e3:	5b                   	pop    ebx
c00129e4:	5e                   	pop    esi
c00129e5:	5f                   	pop    edi
c00129e6:	5d                   	pop    ebp
c00129e7:	e9 d7 03 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129ec:	55                   	push   ebp
c00129ed:	57                   	push   edi
c00129ee:	56                   	push   esi
c00129ef:	53                   	push   ebx
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129f7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00129fd:	0f 84 d1 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a03:	56                   	push   esi
c0012a04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a08:	e8 89 f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012a0d:	5b                   	pop    ebx
c0012a0e:	85 c0                	test   eax,eax
c0012a10:	5f                   	pop    edi
c0012a11:	89 c3                	mov    ebx,eax
c0012a13:	0f 84 bb 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a19:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a1b:	31 c0                	xor    eax,eax
c0012a1d:	89 fa                	mov    edx,edi
c0012a1f:	81 e2 01 04 00 00    	and    edx,0x401
c0012a25:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a2b:	0f 85 a5 00 00 00    	jne    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012a31:	e8 81 d4 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012a36:	c1 ef 0b             	shr    edi,0xb
c0012a39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a3b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a41:	09 c2                	or     edx,eax
c0012a43:	81 ca 01 08 00 00    	or     edx,0x801
c0012a49:	89 13                	mov    DWORD PTR [ebx],edx
c0012a4b:	8b 0d 4c d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d94c
c0012a51:	85 c9                	test   ecx,ecx
c0012a53:	7e 3d                	jle    c0012a92 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012a55:	89 f5                	mov    ebp,esi
c0012a57:	31 db                	xor    ebx,ebx
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	57                   	push   edi
c0012a5d:	e8 bc f0 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c0012a62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a65:	01 d8                	add    eax,ebx
c0012a67:	6a 01                	push   0x1
c0012a69:	31 d2                	xor    edx,edx
c0012a6b:	43                   	inc    ebx
c0012a6c:	52                   	push   edx
c0012a6d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012a73:	50                   	push   eax
c0012a74:	0f be 05 58 d9 02 c0 	movsx  eax,BYTE PTR ds:0xc002d958
c0012a7b:	ff 34 85 bc ee 02 c0 	push   DWORD PTR [eax*4-0x3ffd1144]
c0012a82:	e8 1d 3c 00 00       	call   c00166a4 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a87:	83 c4 20             	add    esp,0x20
c0012a8a:	39 1d 4c d9 02 c0    	cmp    DWORD PTR ds:0xc002d94c,ebx
c0012a90:	7f c7                	jg     c0012a59 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012a92:	a1 28 eb 02 c0       	mov    eax,ds:0xc002eb28
c0012a97:	48                   	dec    eax
c0012a98:	52                   	push   edx
c0012a99:	a3 28 eb 02 c0       	mov    ds:0xc002eb28,eax
c0012a9e:	50                   	push   eax
c0012a9f:	56                   	push   esi
c0012aa0:	68 a1 ac 02 c0       	push   0xc002aca1
c0012aa5:	e8 19 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012aad:	e8 4e f0 ff ff       	call   c0011b00 <Virt::freeSwapfilePage(unsigned long)>
c0012ab2:	e8 3f b4 00 00       	call   c001def6 <unlockScheduler()>
c0012ab7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	25 ff 0f 00 00       	and    eax,0xfff
c0012ac3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ac8:	77 14                	ja     c0012ade <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012aca:	0f 20 d8             	mov    eax,cr3
c0012acd:	0f 22 d8             	mov    cr3,eax
c0012ad0:	b0 01                	mov    al,0x1
c0012ad2:	eb 02                	jmp    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012ad4:	31 c0                	xor    eax,eax
c0012ad6:	83 c4 0c             	add    esp,0xc
c0012ad9:	5b                   	pop    ebx
c0012ada:	5e                   	pop    esi
c0012adb:	5f                   	pop    edi
c0012adc:	5d                   	pop    ebp
c0012add:	c3                   	ret    
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	68 b6 ac 02 c0       	push   0xc002acb6
c0012ae6:	e8 d8 02 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	eb da                	jmp    c0012aca <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012af0 <VAS::scanForEviction()>:
c0012af0:	57                   	push   edi
c0012af1:	56                   	push   esi
c0012af2:	53                   	push   ebx
c0012af3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012af7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012afa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b00:	75 0e                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b02:	89 da                	mov    edx,ebx
c0012b04:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b07:	c1 ea 16             	shr    edx,0x16
c0012b0a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b0e:	74 48                	je     c0012b58 <VAS::scanForEviction()+0x68>
c0012b10:	53                   	push   ebx
c0012b11:	56                   	push   esi
c0012b12:	e8 7f f3 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012b17:	5a                   	pop    edx
c0012b18:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b1a:	59                   	pop    ecx
c0012b1b:	89 fa                	mov    edx,edi
c0012b1d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b23:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b29:	74 3d                	je     c0012b68 <VAS::scanForEviction()+0x78>
c0012b2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b31:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012b37:	76 2a                	jbe    c0012b63 <VAS::scanForEviction()+0x73>
c0012b39:	31 db                	xor    ebx,ebx
c0012b3b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012b42:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b48:	75 c6                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b4a:	89 da                	mov    edx,ebx
c0012b4c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b4f:	c1 ea 16             	shr    edx,0x16
c0012b52:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b56:	75 b8                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b58:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b5e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b61:	eb 97                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b63:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b66:	eb 92                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b68:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b6e:	74 bb                	je     c0012b2b <VAS::scanForEviction()+0x3b>
c0012b70:	f7 c7 20 00 00 00    	test   edi,0x20
c0012b76:	74 0a                	je     c0012b82 <VAS::scanForEviction()+0x92>
c0012b78:	83 e7 df             	and    edi,0xffffffdf
c0012b7b:	89 38                	mov    DWORD PTR [eax],edi
c0012b7d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b80:	eb a9                	jmp    c0012b2b <VAS::scanForEviction()+0x3b>
c0012b82:	83 ec 08             	sub    esp,0x8
c0012b85:	53                   	push   ebx
c0012b86:	56                   	push   esi
c0012b87:	e8 9e fd ff ff       	call   c001292a <VAS::evict(unsigned long)>
c0012b8c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	89 f8                	mov    eax,edi
c0012b98:	5b                   	pop    ebx
c0012b99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b9e:	5e                   	pop    esi
c0012b9f:	5f                   	pop    edi
c0012ba0:	c3                   	ret    

c0012ba1 <mapVASFirstTime>:
c0012ba1:	55                   	push   ebp
c0012ba2:	57                   	push   edi
c0012ba3:	56                   	push   esi
c0012ba4:	53                   	push   ebx
c0012ba5:	83 ec 0c             	sub    esp,0xc
c0012ba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bb0:	4a                   	dec    edx
c0012bb1:	0f 84 8e 00 00 00    	je     c0012c45 <mapVASFirstTime+0xa4>
c0012bb7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bba:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012bbd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012bc2:	c1 e5 15             	shl    ebp,0x15
c0012bc5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bca:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bd0:	29 eb                	sub    ebx,ebp
c0012bd2:	29 ee                	sub    esi,ebp
c0012bd4:	e8 de d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012bd9:	83 ec 0c             	sub    esp,0xc
c0012bdc:	68 03 04 00 00       	push   0x403
c0012be1:	6a 01                	push   0x1
c0012be3:	53                   	push   ebx
c0012be4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bea:	50                   	push   eax
c0012beb:	57                   	push   edi
c0012bec:	e8 1f f9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bf1:	83 c4 20             	add    esp,0x20
c0012bf4:	39 f3                	cmp    ebx,esi
c0012bf6:	75 dc                	jne    c0012bd4 <mapVASFirstTime+0x33>
c0012bf8:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bfd:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c02:	29 ee                	sub    esi,ebp
c0012c04:	29 e8                	sub    eax,ebp
c0012c06:	89 c5                	mov    ebp,eax
c0012c08:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c0c:	19 db                	sbb    ebx,ebx
c0012c0e:	e8 a4 d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012c13:	83 e3 04             	and    ebx,0x4
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c1f:	53                   	push   ebx
c0012c20:	6a 01                	push   0x1
c0012c22:	56                   	push   esi
c0012c23:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c29:	50                   	push   eax
c0012c2a:	57                   	push   edi
c0012c2b:	e8 e0 f8 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c30:	83 c4 20             	add    esp,0x20
c0012c33:	39 f5                	cmp    ebp,esi
c0012c35:	75 d1                	jne    c0012c08 <mapVASFirstTime+0x67>
c0012c37:	0f 20 d8             	mov    eax,cr3
c0012c3a:	0f 22 d8             	mov    cr3,eax
c0012c3d:	83 c4 0c             	add    esp,0xc
c0012c40:	5b                   	pop    ebx
c0012c41:	5e                   	pop    esi
c0012c42:	5f                   	pop    edi
c0012c43:	5d                   	pop    ebp
c0012c44:	c3                   	ret    
c0012c45:	83 ec 0c             	sub    esp,0xc
c0012c48:	68 c6 ac 02 c0       	push   0xc002acc6
c0012c4d:	e8 71 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	83 c4 0c             	add    esp,0xc
c0012c58:	5b                   	pop    ebx
c0012c59:	5e                   	pop    esi
c0012c5a:	5f                   	pop    edi
c0012c5b:	5d                   	pop    ebp
c0012c5c:	c3                   	ret    

c0012c5d <__cxa_atexit>:
c0012c5d:	31 c0                	xor    eax,eax
c0012c5f:	c3                   	ret    

c0012c60 <__cxa_finalize>:
c0012c60:	c3                   	ret    

c0012c61 <__stack_chk_fail>:
c0012c61:	55                   	push   ebp
c0012c62:	89 e5                	mov    ebp,esp
c0012c64:	83 ec 14             	sub    esp,0x14
c0012c67:	68 df ac 02 c0       	push   0xc002acdf
c0012c6c:	e8 52 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c71:	58                   	pop    eax
c0012c72:	5a                   	pop    edx
c0012c73:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c76:	68 2f ad 02 c0       	push   0xc002ad2f
c0012c7b:	e8 43 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c80:	59                   	pop    ecx
c0012c81:	58                   	pop    eax
c0012c82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c88:	68 2f ad 02 c0       	push   0xc002ad2f
c0012c8d:	e8 31 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c92:	5a                   	pop    edx
c0012c93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c96:	59                   	pop    ecx
c0012c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c99:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c9c:	68 2f ad 02 c0       	push   0xc002ad2f
c0012ca1:	e8 1d 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012ca6:	5a                   	pop    edx
c0012ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012caa:	59                   	pop    ecx
c0012cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cb2:	68 2f ad 02 c0       	push   0xc002ad2f
c0012cb7:	e8 07 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012cbc:	c7 04 24 37 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad37
c0012cc3:	e8 8f 79 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	c9                   	leave  
c0012ccc:	c3                   	ret    

c0012ccd <__cxa_pure_virtual>:
c0012ccd:	83 ec 18             	sub    esp,0x18
c0012cd0:	68 4f ad 02 c0       	push   0xc002ad4f
c0012cd5:	e8 7d 79 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0012cda:	83 c4 1c             	add    esp,0x1c
c0012cdd:	c3                   	ret    

c0012cde <operator new[](unsigned long)>:
c0012cde:	e9 68 cb ff ff       	jmp    c000f84b <malloc>

c0012ce3 <operator delete(void*, unsigned long)>:
c0012ce3:	e9 83 cb ff ff       	jmp    c000f86b <rfree>

c0012ce8 <operator delete[](void*)>:
c0012ce8:	e9 7e cb ff ff       	jmp    c000f86b <rfree>

c0012ced <operator delete[](void*, unsigned long)>:
c0012ced:	e9 79 cb ff ff       	jmp    c000f86b <rfree>

c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cf2:	57                   	push   edi
c0012cf3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cf8:	56                   	push   esi
c0012cf9:	be 64 ad 02 c0       	mov    esi,0xc002ad64
c0012cfe:	53                   	push   ebx
c0012cff:	83 ec 40             	sub    esp,0x40
c0012d02:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d06:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d0a:	fc                   	cld    
c0012d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d0d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d11:	83 f9 3e             	cmp    ecx,0x3e
c0012d14:	7e 05                	jle    c0012d1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d16:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d1b:	89 df                	mov    edi,ebx
c0012d1d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d21:	eb 02                	jmp    c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d23:	89 c7                	mov    edi,eax
c0012d25:	31 d2                	xor    edx,edx
c0012d27:	46                   	inc    esi
c0012d28:	89 f8                	mov    eax,edi
c0012d2a:	f7 f1                	div    ecx
c0012d2c:	39 cf                	cmp    edi,ecx
c0012d2e:	73 f3                	jae    c0012d23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d30:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d33:	eb 02                	jmp    c0012d37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d35:	89 c3                	mov    ebx,eax
c0012d37:	31 d2                	xor    edx,edx
c0012d39:	4e                   	dec    esi
c0012d3a:	89 d8                	mov    eax,ebx
c0012d3c:	f7 f1                	div    ecx
c0012d3e:	39 cb                	cmp    ebx,ecx
c0012d40:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d44:	88 16                	mov    BYTE PTR [esi],dl
c0012d46:	73 ed                	jae    c0012d35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d48:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d4c:	83 c4 40             	add    esp,0x40
c0012d4f:	5b                   	pop    ebx
c0012d50:	5e                   	pop    esi
c0012d51:	5f                   	pop    edi
c0012d52:	c3                   	ret    

c0012d53 <Dbg::logc(char)>:
c0012d53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d57:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d5c:	ec                   	in     al,dx
c0012d5d:	a8 20                	test   al,0x20
c0012d5f:	74 fb                	je     c0012d5c <Dbg::logc(char)+0x9>
c0012d61:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d66:	88 c8                	mov    al,cl
c0012d68:	ee                   	out    dx,al
c0012d69:	c3                   	ret    

c0012d6a <Dbg::logs(char*)>:
c0012d6a:	53                   	push   ebx
c0012d6b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d6f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d72:	84 c0                	test   al,al
c0012d74:	74 0f                	je     c0012d85 <Dbg::logs(char*)+0x1b>
c0012d76:	50                   	push   eax
c0012d77:	43                   	inc    ebx
c0012d78:	e8 d6 ff ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012d7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d80:	5a                   	pop    edx
c0012d81:	84 c0                	test   al,al
c0012d83:	75 f1                	jne    c0012d76 <Dbg::logs(char*)+0xc>
c0012d85:	5b                   	pop    ebx
c0012d86:	c3                   	ret    

c0012d87 <Dbg::logWriteInt(unsigned int)>:
c0012d87:	83 ec 10             	sub    esp,0x10
c0012d8a:	6a 0a                	push   0xa
c0012d8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d90:	50                   	push   eax
c0012d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d95:	e8 58 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d9a:	50                   	push   eax
c0012d9b:	e8 ca ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012da0:	83 c4 20             	add    esp,0x20
c0012da3:	c3                   	ret    

c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012da4:	83 ec 10             	sub    esp,0x10
c0012da7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dab:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012daf:	50                   	push   eax
c0012db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db4:	e8 39 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012db9:	50                   	push   eax
c0012dba:	e8 ab ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012dbf:	83 c4 20             	add    esp,0x20
c0012dc2:	c3                   	ret    

c0012dc3 <Dbg::kprintf(char const*, ...)>:
c0012dc3:	55                   	push   ebp
c0012dc4:	57                   	push   edi
c0012dc5:	56                   	push   esi
c0012dc6:	53                   	push   ebx
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dd6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dd9:	84 c0                	test   al,al
c0012ddb:	74 4a                	je     c0012e27 <Dbg::kprintf(char const*, ...)+0x64>
c0012ddd:	31 db                	xor    ebx,ebx
c0012ddf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012de2:	3c 25                	cmp    al,0x25
c0012de4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012de7:	0f 85 e4 00 00 00    	jne    c0012ed1 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ded:	83 c3 02             	add    ebx,0x2
c0012df0:	8a 07                	mov    al,BYTE PTR [edi]
c0012df2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012df5:	83 e8 25             	sub    eax,0x25
c0012df8:	3c 53                	cmp    al,0x53
c0012dfa:	0f 87 ba 00 00 00    	ja     c0012eba <Dbg::kprintf(char const*, ...)+0xf7>
c0012e00:	0f b6 c0             	movzx  eax,al
c0012e03:	ff 24 85 a4 ad 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd525c]
c0012e0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e0e:	89 c8                	mov    eax,ecx
c0012e10:	83 c1 04             	add    ecx,0x4
c0012e13:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e17:	ff 30                	push   DWORD PTR [eax]
c0012e19:	e8 4c ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012e1e:	58                   	pop    eax
c0012e1f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e23:	84 c0                	test   al,al
c0012e25:	75 b8                	jne    c0012ddf <Dbg::kprintf(char const*, ...)+0x1c>
c0012e27:	83 c4 0c             	add    esp,0xc
c0012e2a:	5b                   	pop    ebx
c0012e2b:	5e                   	pop    esi
c0012e2c:	5f                   	pop    edi
c0012e2d:	5d                   	pop    ebp
c0012e2e:	c3                   	ret    
c0012e2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e33:	89 d0                	mov    eax,edx
c0012e35:	83 c2 04             	add    edx,0x4
c0012e38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e3c:	ff 30                	push   DWORD PTR [eax]
c0012e3e:	e8 44 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e43:	58                   	pop    eax
c0012e44:	eb d9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e4a:	89 d0                	mov    eax,edx
c0012e4c:	83 c2 04             	add    edx,0x4
c0012e4f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e56:	50                   	push   eax
c0012e57:	e8 f7 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012e5c:	58                   	pop    eax
c0012e5d:	eb c0                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e63:	89 c8                	mov    eax,ecx
c0012e65:	83 c1 04             	add    ecx,0x4
c0012e68:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e6c:	ff 30                	push   DWORD PTR [eax]
c0012e6e:	e8 14 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e73:	5f                   	pop    edi
c0012e74:	eb a9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7a:	89 c8                	mov    eax,ecx
c0012e7c:	83 c1 04             	add    ecx,0x4
c0012e7f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e83:	6a 10                	push   0x10
c0012e85:	ff 30                	push   DWORD PTR [eax]
c0012e87:	e8 18 ff ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e8c:	59                   	pop    ecx
c0012e8d:	5f                   	pop    edi
c0012e8e:	eb 8f                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e94:	89 d0                	mov    eax,edx
c0012e96:	83 c2 08             	add    edx,0x8
c0012e99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e9d:	6a 10                	push   0x10
c0012e9f:	ff 30                	push   DWORD PTR [eax]
c0012ea1:	e8 fe fe ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ea6:	58                   	pop    eax
c0012ea7:	5a                   	pop    edx
c0012ea8:	e9 72 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ead:	6a 25                	push   0x25
c0012eaf:	e8 9f fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eb4:	58                   	pop    eax
c0012eb5:	e9 65 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012eba:	6a 25                	push   0x25
c0012ebc:	e8 92 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ec1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ec4:	50                   	push   eax
c0012ec5:	e8 89 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eca:	5a                   	pop    edx
c0012ecb:	59                   	pop    ecx
c0012ecc:	e9 4e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed1:	50                   	push   eax
c0012ed2:	89 eb                	mov    ebx,ebp
c0012ed4:	e8 7a fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ed9:	89 fd                	mov    ebp,edi
c0012edb:	58                   	pop    eax
c0012edc:	e9 3e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee1:	90                   	nop

c0012ee2 <File::read(unsigned long long, void*, int*)>:
c0012ee2:	53                   	push   ebx
c0012ee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012eeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ef2:	3c 19                	cmp    al,0x19
c0012ef4:	77 35                	ja     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012ef6:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c0012efd:	85 c0                	test   eax,eax
c0012eff:	74 2a                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f07:	85 c0                	test   eax,eax
c0012f09:	74 20                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0f:	74 21                	je     c0012f32 <File::read(unsigned long long, void*, int*)+0x50>
c0012f11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f25:	5b                   	pop    ebx
c0012f26:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f29:	ff e0                	jmp    eax
c0012f2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f30:	eb 05                	jmp    c0012f37 <File::read(unsigned long long, void*, int*)+0x55>
c0012f32:	b8 05 00 00 00       	mov    eax,0x5
c0012f37:	5b                   	pop    ebx
c0012f38:	c3                   	ret    
c0012f39:	90                   	nop

c0012f3a <File::write(unsigned long long, void*, int*)>:
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f4a:	3c 19                	cmp    al,0x19
c0012f4c:	77 35                	ja     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f4e:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c0012f55:	85 c0                	test   eax,eax
c0012f57:	74 2a                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f5f:	85 c0                	test   eax,eax
c0012f61:	74 20                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f67:	74 21                	je     c0012f8a <File::write(unsigned long long, void*, int*)+0x50>
c0012f69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f7d:	5b                   	pop    ebx
c0012f7e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f81:	ff e0                	jmp    eax
c0012f83:	b8 0b 00 00 00       	mov    eax,0xb
c0012f88:	eb 05                	jmp    c0012f8f <File::write(unsigned long long, void*, int*)+0x55>
c0012f8a:	b8 05 00 00 00       	mov    eax,0x5
c0012f8f:	5b                   	pop    ebx
c0012f90:	c3                   	ret    
c0012f91:	90                   	nop

c0012f92 <Directory::read(unsigned long long, void*, int*)>:
c0012f92:	53                   	push   ebx
c0012f93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f9b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fa2:	3c 19                	cmp    al,0x19
c0012fa4:	77 35                	ja     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fa6:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c0012fad:	85 c0                	test   eax,eax
c0012faf:	74 2a                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fb1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fb7:	85 c0                	test   eax,eax
c0012fb9:	74 20                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fbb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fbf:	74 21                	je     c0012fe2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fc3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fc7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fd5:	5b                   	pop    ebx
c0012fd6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fd9:	ff e0                	jmp    eax
c0012fdb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe0:	eb 05                	jmp    c0012fe7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fe2:	b8 05 00 00 00       	mov    eax,0x5
c0012fe7:	5b                   	pop    ebx
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <Directory::write(unsigned long long, void*, int*)>:
c0012fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fee:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ff5:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffa:	80 fa 19             	cmp    dl,0x19
c0012ffd:	77 18                	ja     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fff:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c0013006:	85 d2                	test   edx,edx
c0013008:	74 0d                	je     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001300a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013011:	19 c0                	sbb    eax,eax
c0013013:	83 e0 0a             	and    eax,0xa
c0013016:	40                   	inc    eax
c0013017:	c3                   	ret    

c0013018 <File::isAtty()>:
c0013018:	31 c0                	xor    eax,eax
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <Directory::isAtty()>:
c001301c:	31 c0                	xor    eax,eax
c001301e:	c3                   	ret    
c001301f:	90                   	nop

c0013020 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013020:	b8 0a 00 00 00       	mov    eax,0xa
c0013025:	c3                   	ret    

c0013026 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013026:	b8 0a 00 00 00       	mov    eax,0xa
c001302b:	c3                   	ret    

c001302c <Filesystem::getFileFirstSector(char const*)>:
c001302c:	31 c0                	xor    eax,eax
c001302e:	31 d2                	xor    edx,edx
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <File::~File()>:
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	ba 64 af 02 c0       	mov    edx,0xc002af64
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	89 10                	mov    DWORD PTR [eax],edx
c0013040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	50                   	push   eax
c0013048:	e8 41 e7 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	90                   	nop
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::~File()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013060:	e8 cd ff ff ff       	call   c0013032 <File::~File()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	83 ec 08             	sub    esp,0x8
c001306b:	68 14 01 00 00       	push   0x114
c0013070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013074:	e8 6a fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	83 c4 0c             	add    esp,0xc
c001307f:	c3                   	ret    

c0013080 <Directory::~Directory()>:
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	ba 80 af 02 c0       	mov    edx,0xc002af80
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 10                	mov    DWORD PTR [eax],edx
c001308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	50                   	push   eax
c0013096:	e8 f3 e6 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	90                   	nop
c001309f:	83 c4 0c             	add    esp,0xc
c00130a2:	c3                   	ret    
c00130a3:	90                   	nop

c00130a4 <Directory::~Directory()>:
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	83 ec 0c             	sub    esp,0xc
c00130aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ae:	e8 cd ff ff ff       	call   c0013080 <Directory::~Directory()>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	83 ec 08             	sub    esp,0x8
c00130b9:	68 14 01 00 00       	push   0x114
c00130be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c2:	e8 1c fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	83 c4 0c             	add    esp,0xc
c00130cd:	c3                   	ret    

c00130ce <Filesystem::Filesystem()>:
c00130ce:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c00130d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d7:	89 10                	mov    DWORD PTR [eax],edx
c00130d9:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c00130df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ea:	a3 34 eb 02 c0       	mov    ds:0xc002eb34,eax
c00130ef:	90                   	nop
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <Filesystem::~Filesystem()>:
c00130f2:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c00130f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fb:	89 10                	mov    DWORD PTR [eax],edx
c00130fd:	90                   	nop
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Filesystem::~Filesystem()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013107:	e8 e6 ff ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c001310c:	83 c4 04             	add    esp,0x4
c001310f:	83 ec 08             	sub    esp,0x8
c0013112:	6a 08                	push   0x8
c0013114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013118:	e8 c6 fb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 c4 0c             	add    esp,0xc
c0013123:	c3                   	ret    

c0013124 <Fs::getcwd(Process*, char*, int)>:
c0013124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013128:	31 c0                	xor    eax,eax
c001312a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001312d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013131:	7d 15                	jge    c0013148 <Fs::getcwd(Process*, char*, int)+0x24>
c0013133:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013137:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001313e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013141:	84 c9                	test   cl,cl
c0013143:	74 06                	je     c001314b <Fs::getcwd(Process*, char*, int)+0x27>
c0013145:	40                   	inc    eax
c0013146:	eb e2                	jmp    c001312a <Fs::getcwd(Process*, char*, int)+0x6>
c0013148:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001314b:	31 c0                	xor    eax,eax
c001314d:	c3                   	ret    

c001314e <Fs::initVFS()>:
c001314e:	83 ec 18             	sub    esp,0x18
c0013151:	6a 08                	push   0x8
c0013153:	e8 f3 c6 ff ff       	call   c000f84b <malloc>
c0013158:	89 04 24             	mov    DWORD PTR [esp],eax
c001315b:	e8 9c e0 00 00       	call   c00211fc <FAT::FAT()>
c0013160:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013167:	e8 df c6 ff ff       	call   c000f84b <malloc>
c001316c:	89 04 24             	mov    DWORD PTR [esp],eax
c001316f:	e8 e0 f2 00 00       	call   c0022454 <ISO9660::ISO9660()>
c0013174:	83 c4 1c             	add    esp,0x1c
c0013177:	c3                   	ret    

c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013178:	55                   	push   ebp
c0013179:	57                   	push   edi
c001317a:	56                   	push   esi
c001317b:	53                   	push   ebx
c001317c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013182:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013189:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013190:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013197:	68 00 04 00 00       	push   0x400
c001319c:	6a 00                	push   0x0
c001319e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131a2:	56                   	push   esi
c00131a3:	e8 d8 d5 fe ff       	call   c0000780 <memset>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131af:	75 0b                	jne    c00131bc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131b1:	50                   	push   eax
c00131b2:	50                   	push   eax
c00131b3:	57                   	push   edi
c00131b4:	56                   	push   esi
c00131b5:	e8 82 d6 fe ff       	call   c000083c <strcpy>
c00131ba:	eb 41                	jmp    c00131fd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131bc:	8a 07                	mov    al,BYTE PTR [edi]
c00131be:	3c 5c                	cmp    al,0x5c
c00131c0:	74 04                	je     c00131c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131c2:	3c 2f                	cmp    al,0x2f
c00131c4:	75 18                	jne    c00131de <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131c6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131c9:	3c 60                	cmp    al,0x60
c00131cb:	7e 03                	jle    c00131d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131cd:	83 e8 20             	sub    eax,0x20
c00131d0:	88 04 24             	mov    BYTE PTR [esp],al
c00131d3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131da:	50                   	push   eax
c00131db:	50                   	push   eax
c00131dc:	eb 18                	jmp    c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131de:	50                   	push   eax
c00131df:	50                   	push   eax
c00131e0:	55                   	push   ebp
c00131e1:	56                   	push   esi
c00131e2:	e8 55 d6 fe ff       	call   c000083c <strcpy>
c00131e7:	5a                   	pop    edx
c00131e8:	59                   	pop    ecx
c00131e9:	68 05 c7 02 c0       	push   0xc002c705
c00131ee:	56                   	push   esi
c00131ef:	e8 88 d7 fe ff       	call   c000097c <strcat>
c00131f4:	5d                   	pop    ebp
c00131f5:	58                   	pop    eax
c00131f6:	57                   	push   edi
c00131f7:	56                   	push   esi
c00131f8:	e8 7f d7 fe ff       	call   c000097c <strcat>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013203:	3c 60                	cmp    al,0x60
c0013205:	7e 03                	jle    c001320a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013207:	83 e8 20             	sub    eax,0x20
c001320a:	88 04 24             	mov    BYTE PTR [esp],al
c001320d:	88 03                	mov    BYTE PTR [ebx],al
c001320f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013216:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001321c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013220:	bf 03 00 00 00       	mov    edi,0x3
c0013225:	b8 03 00 00 00       	mov    eax,0x3
c001322a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001322d:	84 d2                	test   dl,dl
c001322f:	0f 84 91 00 00 00    	je     c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013235:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013238:	80 fa 5c             	cmp    dl,0x5c
c001323b:	74 05                	je     c0013242 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001323d:	80 fa 2f             	cmp    dl,0x2f
c0013240:	75 12                	jne    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013242:	89 c5                	mov    ebp,eax
c0013244:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013249:	74 09                	je     c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001324b:	40                   	inc    eax
c001324c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013250:	89 cf                	mov    edi,ecx
c0013252:	eb d6                	jmp    c001322a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013254:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013259:	75 5b                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001325b:	80 fa 2e             	cmp    dl,0x2e
c001325e:	75 56                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013260:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013264:	74 19                	je     c001327f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013266:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001326b:	74 53                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001326d:	89 f9                	mov    ecx,edi
c001326f:	41                   	inc    ecx
c0013270:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013273:	80 fa 2f             	cmp    dl,0x2f
c0013276:	74 f7                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013278:	80 fa 5c             	cmp    dl,0x5c
c001327b:	74 f2                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001327d:	eb d1                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001327f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013284:	74 3a                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013286:	83 f8 03             	cmp    eax,0x3
c0013289:	74 c5                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328b:	41                   	inc    ecx
c001328c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001328f:	80 fa 2f             	cmp    dl,0x2f
c0013292:	74 f7                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013294:	80 fa 5c             	cmp    dl,0x5c
c0013297:	74 f2                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013299:	48                   	dec    eax
c001329a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001329e:	75 06                	jne    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132a0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132a4:	eb f3                	jmp    c0013299 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132a6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132aa:	74 07                	je     c00132b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132ac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132b0:	48                   	dec    eax
c00132b1:	eb f3                	jmp    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132b3:	40                   	inc    eax
c00132b4:	eb 9a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132b6:	80 fa 2f             	cmp    dl,0x2f
c00132b9:	74 95                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132bb:	80 fa 5c             	cmp    dl,0x5c
c00132be:	74 90                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132c3:	40                   	inc    eax
c00132c4:	eb 8a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	53                   	push   ebx
c00132ce:	e8 c9 d4 fe ff       	call   c000079c <strlen>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132db:	75 26                	jne    c0013303 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	53                   	push   ebx
c00132e1:	e8 b6 d4 fe ff       	call   c000079c <strlen>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132ee:	74 26                	je     c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	53                   	push   ebx
c00132f4:	e8 a3 d4 fe ff       	call   c000079c <strlen>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013301:	eb c7                	jmp    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013303:	83 ec 0c             	sub    esp,0xc
c0013306:	53                   	push   ebx
c0013307:	e8 90 d4 fe ff       	call   c000079c <strlen>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013314:	74 c7                	je     c00132dd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013316:	81 c4 0c 04 00 00    	add    esp,0x40c
c001331c:	5b                   	pop    ebx
c001331d:	5e                   	pop    esi
c001331e:	5f                   	pop    edi
c001331f:	5d                   	pop    ebp
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <File::File(char const*, Process*)>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	6a 00                	push   0x0
c001332e:	50                   	push   eax
c001332f:	e8 78 e2 ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	ba 64 af 02 c0       	mov    edx,0xc002af64
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	89 10                	mov    DWORD PTR [eax],edx
c0013342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013346:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	83 c0 0d             	add    eax,0xd
c0013353:	83 ec 04             	sub    esp,0x4
c0013356:	52                   	push   edx
c0013357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335b:	50                   	push   eax
c001335c:	e8 17 fe ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013368:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001336b:	8d 50 bf             	lea    edx,[eax-0x41]
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013380:	90                   	nop
c0013381:	83 c4 0c             	add    esp,0xc
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <File::open(FileOpenMode)>:
c0013386:	53                   	push   ebx
c0013387:	b8 0b 00 00 00       	mov    eax,0xb
c001338c:	83 ec 08             	sub    esp,0x8
c001338f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013393:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001339a:	80 fa 19             	cmp    dl,0x19
c001339d:	77 40                	ja     c00133df <File::open(FileOpenMode)+0x59>
c001339f:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c00133a6:	85 d2                	test   edx,edx
c00133a8:	74 35                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133aa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133b0:	85 d2                	test   edx,edx
c00133b2:	74 2b                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133b4:	b8 06 00 00 00       	mov    eax,0x6
c00133b9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133bd:	75 20                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00133c1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133cb:	51                   	push   ecx
c00133cc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133cf:	51                   	push   ecx
c00133d0:	52                   	push   edx
c00133d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	85 c0                	test   eax,eax
c00133d9:	75 04                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133db:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133df:	83 c4 08             	add    esp,0x8
c00133e2:	5b                   	pop    ebx
c00133e3:	c3                   	ret    

c00133e4 <File::close()>:
c00133e4:	53                   	push   ebx
c00133e5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ea:	83 ec 08             	sub    esp,0x8
c00133ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133f1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133f8:	80 fa 19             	cmp    dl,0x19
c00133fb:	77 41                	ja     c001343e <File::close()+0x5a>
c00133fd:	8b 1c 95 c0 ef 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1040]
c0013404:	85 db                	test   ebx,ebx
c0013406:	74 36                	je     c001343e <File::close()+0x5a>
c0013408:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001340f:	74 2d                	je     c001343e <File::close()+0x5a>
c0013411:	b8 05 00 00 00       	mov    eax,0x5
c0013416:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001341a:	74 22                	je     c001343e <File::close()+0x5a>
c001341c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013420:	8b 04 95 c0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1040]
c0013427:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001342d:	53                   	push   ebx
c001342e:	53                   	push   ebx
c001342f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013431:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013437:	50                   	push   eax
c0013438:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	83 c4 08             	add    esp,0x8
c0013441:	5b                   	pop    ebx
c0013442:	c3                   	ret    
c0013443:	90                   	nop

c0013444 <File::seek(unsigned long long)>:
c0013444:	56                   	push   esi
c0013445:	53                   	push   ebx
c0013446:	b8 0b 00 00 00       	mov    eax,0xb
c001344b:	51                   	push   ecx
c001344c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013450:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013454:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001345b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001345f:	80 fa 19             	cmp    dl,0x19
c0013462:	77 31                	ja     c0013495 <File::seek(unsigned long long)+0x51>
c0013464:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c001346b:	85 d2                	test   edx,edx
c001346d:	74 26                	je     c0013495 <File::seek(unsigned long long)+0x51>
c001346f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013475:	85 d2                	test   edx,edx
c0013477:	74 1c                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013479:	b8 05 00 00 00       	mov    eax,0x5
c001347e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013482:	74 11                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013484:	8b 02                	mov    eax,DWORD PTR [edx]
c0013486:	53                   	push   ebx
c0013487:	51                   	push   ecx
c0013488:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001348e:	52                   	push   edx
c001348f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	5a                   	pop    edx
c0013496:	5b                   	pop    ebx
c0013497:	5e                   	pop    esi
c0013498:	c3                   	ret    
c0013499:	90                   	nop

c001349a <File::tell(unsigned long long*)>:
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	b8 0b 00 00 00       	mov    eax,0xb
c00134a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ad:	80 fa 19             	cmp    dl,0x19
c00134b0:	77 34                	ja     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134b2:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c00134b9:	85 d2                	test   edx,edx
c00134bb:	74 29                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134bd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134c3:	85 d2                	test   edx,edx
c00134c5:	74 1f                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134c7:	b8 05 00 00 00       	mov    eax,0x5
c00134cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134d0:	74 14                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134d2:	50                   	push   eax
c00134d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00134d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134df:	52                   	push   edx
c00134e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	83 c4 0c             	add    esp,0xc
c00134e9:	c3                   	ret    

c00134ea <File::rewind()>:
c00134ea:	83 ec 10             	sub    esp,0x10
c00134ed:	6a 00                	push   0x0
c00134ef:	6a 00                	push   0x0
c00134f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f5:	e8 4a ff ff ff       	call   c0013444 <File::seek(unsigned long long)>
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <File::unlink()>:
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	b8 0b 00 00 00       	mov    eax,0xb
c0013506:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013511:	80 f9 19             	cmp    cl,0x19
c0013514:	77 2f                	ja     c0013545 <File::unlink()+0x47>
c0013516:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c001351d:	85 c9                	test   ecx,ecx
c001351f:	74 24                	je     c0013545 <File::unlink()+0x47>
c0013521:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013527:	85 c9                	test   ecx,ecx
c0013529:	74 1a                	je     c0013545 <File::unlink()+0x47>
c001352b:	b8 06 00 00 00       	mov    eax,0x6
c0013530:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013534:	75 0f                	jne    c0013545 <File::unlink()+0x47>
c0013536:	83 c2 0d             	add    edx,0xd
c0013539:	50                   	push   eax
c001353a:	50                   	push   eax
c001353b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001353d:	52                   	push   edx
c001353e:	51                   	push   ecx
c001353f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	83 c4 0c             	add    esp,0xc
c0013548:	c3                   	ret    
c0013549:	90                   	nop

c001354a <File::rename(char const*)>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	b8 0b 00 00 00       	mov    eax,0xb
c0013552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013556:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001355d:	80 f9 19             	cmp    cl,0x19
c0013560:	77 32                	ja     c0013594 <File::rename(char const*)+0x4a>
c0013562:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0013569:	85 c9                	test   ecx,ecx
c001356b:	74 27                	je     c0013594 <File::rename(char const*)+0x4a>
c001356d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 1d                	je     c0013594 <File::rename(char const*)+0x4a>
c0013577:	b8 06 00 00 00       	mov    eax,0x6
c001357c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013580:	75 12                	jne    c0013594 <File::rename(char const*)+0x4a>
c0013582:	83 c2 0d             	add    edx,0xd
c0013585:	50                   	push   eax
c0013586:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013588:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358c:	52                   	push   edx
c001358d:	51                   	push   ecx
c001358e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    

c0013598 <File::chfatattr(unsigned char, unsigned char)>:
c0013598:	57                   	push   edi
c0013599:	b8 0b 00 00 00       	mov    eax,0xb
c001359e:	56                   	push   esi
c001359f:	53                   	push   ebx
c00135a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135b3:	80 f9 19             	cmp    cl,0x19
c00135b6:	77 37                	ja     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135b8:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c00135bf:	85 c9                	test   ecx,ecx
c00135c1:	74 2c                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135c9:	85 c9                	test   ecx,ecx
c00135cb:	74 22                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135cd:	b8 06 00 00 00       	mov    eax,0x6
c00135d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135d6:	75 17                	jne    c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135da:	89 f0                	mov    eax,esi
c00135dc:	83 c2 0d             	add    edx,0xd
c00135df:	0f b6 f0             	movzx  esi,al
c00135e2:	0f b6 db             	movzx  ebx,bl
c00135e5:	56                   	push   esi
c00135e6:	53                   	push   ebx
c00135e7:	52                   	push   edx
c00135e8:	51                   	push   ecx
c00135e9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	5b                   	pop    ebx
c00135f0:	5e                   	pop    esi
c00135f1:	5f                   	pop    edi
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <File::exists()>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	31 c0                	xor    eax,eax
c00135f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013604:	80 f9 19             	cmp    cl,0x19
c0013607:	77 24                	ja     c001362d <File::exists()+0x39>
c0013609:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0013610:	85 c9                	test   ecx,ecx
c0013612:	74 19                	je     c001362d <File::exists()+0x39>
c0013614:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001361a:	85 c9                	test   ecx,ecx
c001361c:	74 0f                	je     c001362d <File::exists()+0x39>
c001361e:	83 c2 0d             	add    edx,0xd
c0013621:	50                   	push   eax
c0013622:	50                   	push   eax
c0013623:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013625:	52                   	push   edx
c0013626:	51                   	push   ecx
c0013627:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	83 c4 0c             	add    esp,0xc
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <File::stat(unsigned long long*, bool*)>:
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	50                   	push   eax
c0013635:	b8 0b 00 00 00       	mov    eax,0xb
c001363a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013642:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013649:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001364d:	80 f9 19             	cmp    cl,0x19
c0013650:	77 3d                	ja     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013652:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 32                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c001365d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 28                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013667:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013669:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366d:	74 13                	je     c0013682 <File::stat(unsigned long long*, bool*)+0x50>
c001366f:	83 ec 04             	sub    esp,0x4
c0013672:	56                   	push   esi
c0013673:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013679:	51                   	push   ecx
c001367a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001367d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013680:	eb 0a                	jmp    c001368c <File::stat(unsigned long long*, bool*)+0x5a>
c0013682:	53                   	push   ebx
c0013683:	83 c2 0d             	add    edx,0xd
c0013686:	56                   	push   esi
c0013687:	52                   	push   edx
c0013688:	51                   	push   ecx
c0013689:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	5a                   	pop    edx
c0013690:	5b                   	pop    ebx
c0013691:	5e                   	pop    esi
c0013692:	c3                   	ret    

c0013693 <Fs::setcwd(Process*, char*)>:
c0013693:	55                   	push   ebp
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	81 ec 20 02 00 00    	sub    esp,0x220
c001369d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136a4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136aa:	57                   	push   edi
c00136ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136b2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136b6:	56                   	push   esi
c00136b7:	e8 bc fa ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00136bf:	e8 d8 d0 fe ff       	call   c000079c <strlen>
c00136c4:	83 c4 10             	add    esp,0x10
c00136c7:	83 f8 02             	cmp    eax,0x2
c00136ca:	77 17                	ja     c00136e3 <Fs::setcwd(Process*, char*)+0x50>
c00136cc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136d1:	83 e8 41             	sub    eax,0x41
c00136d4:	83 f8 19             	cmp    eax,0x19
c00136d7:	76 24                	jbe    c00136fd <Fs::setcwd(Process*, char*)+0x6a>
c00136d9:	b8 03 00 00 00       	mov    eax,0x3
c00136de:	e9 e0 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	56                   	push   esi
c00136e7:	e8 b0 d0 fe ff       	call   c000079c <strlen>
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	83 f8 03             	cmp    eax,0x3
c00136f2:	75 34                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136f9:	75 2d                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136fb:	eb cf                	jmp    c00136cc <Fs::setcwd(Process*, char*)+0x39>
c00136fd:	8b 14 85 c0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1040]
c0013704:	b8 05 00 00 00       	mov    eax,0x5
c0013709:	85 d2                	test   edx,edx
c001370b:	0f 84 b2 00 00 00    	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013711:	b8 06 00 00 00       	mov    eax,0x6
c0013716:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001371d:	0f 85 92 00 00 00    	jne    c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c0013723:	e9 9b 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	68 14 01 00 00       	push   0x114
c0013730:	e8 16 c1 ff ff       	call   c000f84b <malloc>
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	89 c3                	mov    ebx,eax
c001373a:	55                   	push   ebp
c001373b:	56                   	push   esi
c001373c:	50                   	push   eax
c001373d:	e8 e0 fb ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013742:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013747:	83 c4 0c             	add    esp,0xc
c001374a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001374e:	50                   	push   eax
c001374f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013753:	50                   	push   eax
c0013754:	53                   	push   ebx
c0013755:	e8 d8 fe ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 f8 02             	cmp    eax,0x2
c0013760:	74 04                	je     c0013766 <Fs::setcwd(Process*, char*)+0xd3>
c0013762:	85 c0                	test   eax,eax
c0013764:	74 1c                	je     c0013782 <Fs::setcwd(Process*, char*)+0xef>
c0013766:	b8 01 00 00 00       	mov    eax,0x1
c001376b:	85 db                	test   ebx,ebx
c001376d:	74 54                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c001376f:	83 ec 0c             	sub    esp,0xc
c0013772:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013774:	53                   	push   ebx
c0013775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	b8 01 00 00 00       	mov    eax,0x1
c0013780:	eb 41                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013782:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013787:	75 1c                	jne    c00137a5 <Fs::setcwd(Process*, char*)+0x112>
c0013789:	b8 02 00 00 00       	mov    eax,0x2
c001378e:	85 db                	test   ebx,ebx
c0013790:	74 31                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013797:	53                   	push   ebx
c0013798:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	b8 02 00 00 00       	mov    eax,0x2
c00137a3:	eb 1e                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00137a5:	85 db                	test   ebx,ebx
c00137a7:	74 0c                	je     c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c00137a9:	83 ec 0c             	sub    esp,0xc
c00137ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ae:	53                   	push   ebx
c00137af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137b2:	83 c4 10             	add    esp,0x10
c00137b5:	50                   	push   eax
c00137b6:	50                   	push   eax
c00137b7:	56                   	push   esi
c00137b8:	57                   	push   edi
c00137b9:	e8 7e d0 fe ff       	call   c000083c <strcpy>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	31 c0                	xor    eax,eax
c00137c3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137c9:	5b                   	pop    ebx
c00137ca:	5e                   	pop    esi
c00137cb:	5f                   	pop    edi
c00137cc:	5d                   	pop    ebp
c00137cd:	c3                   	ret    

c00137ce <Directory::Directory(char const*, Process*)>:
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d5:	83 ec 08             	sub    esp,0x8
c00137d8:	6a 00                	push   0x0
c00137da:	50                   	push   eax
c00137db:	e8 cc dd ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	ba 80 af 02 c0       	mov    edx,0xc002af80
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fc:	83 c0 0d             	add    eax,0xd
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	52                   	push   edx
c0013803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013807:	50                   	push   eax
c0013808:	e8 6b f9 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013814:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013817:	8d 50 bf             	lea    edx,[eax-0x41]
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001382c:	90                   	nop
c001382d:	83 c4 0c             	add    esp,0xc
c0013830:	c3                   	ret    
c0013831:	90                   	nop

c0013832 <Directory::open()>:
c0013832:	53                   	push   ebx
c0013833:	b8 0b 00 00 00       	mov    eax,0xb
c0013838:	83 ec 08             	sub    esp,0x8
c001383b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001383f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013846:	80 fa 19             	cmp    dl,0x19
c0013849:	77 3d                	ja     c0013888 <Directory::open()+0x56>
c001384b:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c0013852:	85 d2                	test   edx,edx
c0013854:	74 32                	je     c0013888 <Directory::open()+0x56>
c0013856:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001385c:	85 d2                	test   edx,edx
c001385e:	74 28                	je     c0013888 <Directory::open()+0x56>
c0013860:	b8 06 00 00 00       	mov    eax,0x6
c0013865:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013869:	75 1d                	jne    c0013888 <Directory::open()+0x56>
c001386b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013871:	50                   	push   eax
c0013872:	8b 02                	mov    eax,DWORD PTR [edx]
c0013874:	51                   	push   ecx
c0013875:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013878:	51                   	push   ecx
c0013879:	52                   	push   edx
c001387a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	85 c0                	test   eax,eax
c0013882:	75 04                	jne    c0013888 <Directory::open()+0x56>
c0013884:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013888:	83 c4 08             	add    esp,0x8
c001388b:	5b                   	pop    ebx
c001388c:	c3                   	ret    
c001388d:	90                   	nop

c001388e <Directory::close()>:
c001388e:	53                   	push   ebx
c001388f:	b8 0b 00 00 00       	mov    eax,0xb
c0013894:	83 ec 08             	sub    esp,0x8
c0013897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001389b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138a2:	80 fa 19             	cmp    dl,0x19
c00138a5:	77 41                	ja     c00138e8 <Directory::close()+0x5a>
c00138a7:	8b 1c 95 c0 ef 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1040]
c00138ae:	85 db                	test   ebx,ebx
c00138b0:	74 36                	je     c00138e8 <Directory::close()+0x5a>
c00138b2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138b9:	74 2d                	je     c00138e8 <Directory::close()+0x5a>
c00138bb:	b8 05 00 00 00       	mov    eax,0x5
c00138c0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138c4:	74 22                	je     c00138e8 <Directory::close()+0x5a>
c00138c6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138ca:	8b 04 95 c0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1040]
c00138d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138d7:	53                   	push   ebx
c00138d8:	53                   	push   ebx
c00138d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00138db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138e1:	50                   	push   eax
c00138e2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 c4 08             	add    esp,0x8
c00138eb:	5b                   	pop    ebx
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <Directory::unlink()>:
c00138ee:	83 ec 0c             	sub    esp,0xc
c00138f1:	b8 0b 00 00 00       	mov    eax,0xb
c00138f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013901:	80 f9 19             	cmp    cl,0x19
c0013904:	77 2f                	ja     c0013935 <Directory::unlink()+0x47>
c0013906:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c001390d:	85 c9                	test   ecx,ecx
c001390f:	74 24                	je     c0013935 <Directory::unlink()+0x47>
c0013911:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013917:	85 c9                	test   ecx,ecx
c0013919:	74 1a                	je     c0013935 <Directory::unlink()+0x47>
c001391b:	b8 06 00 00 00       	mov    eax,0x6
c0013920:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013924:	75 0f                	jne    c0013935 <Directory::unlink()+0x47>
c0013926:	83 c2 0d             	add    edx,0xd
c0013929:	50                   	push   eax
c001392a:	50                   	push   eax
c001392b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001392d:	52                   	push   edx
c001392e:	51                   	push   ecx
c001392f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Directory::rename(char const*)>:
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	b8 0b 00 00 00       	mov    eax,0xb
c0013942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013946:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001394d:	80 f9 19             	cmp    cl,0x19
c0013950:	77 32                	ja     c0013984 <Directory::rename(char const*)+0x4a>
c0013952:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0013959:	85 c9                	test   ecx,ecx
c001395b:	74 27                	je     c0013984 <Directory::rename(char const*)+0x4a>
c001395d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013963:	85 c9                	test   ecx,ecx
c0013965:	74 1d                	je     c0013984 <Directory::rename(char const*)+0x4a>
c0013967:	b8 06 00 00 00       	mov    eax,0x6
c001396c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013970:	75 12                	jne    c0013984 <Directory::rename(char const*)+0x4a>
c0013972:	83 c2 0d             	add    edx,0xd
c0013975:	50                   	push   eax
c0013976:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013978:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001397c:	52                   	push   edx
c001397d:	51                   	push   ecx
c001397e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	83 c4 0c             	add    esp,0xc
c0013987:	c3                   	ret    

c0013988 <Directory::exists()>:
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	31 c0                	xor    eax,eax
c001398d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013991:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013998:	80 f9 19             	cmp    cl,0x19
c001399b:	77 24                	ja     c00139c1 <Directory::exists()+0x39>
c001399d:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c00139a4:	85 c9                	test   ecx,ecx
c00139a6:	74 19                	je     c00139c1 <Directory::exists()+0x39>
c00139a8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139ae:	85 c9                	test   ecx,ecx
c00139b0:	74 0f                	je     c00139c1 <Directory::exists()+0x39>
c00139b2:	83 c2 0d             	add    edx,0xd
c00139b5:	50                   	push   eax
c00139b6:	50                   	push   eax
c00139b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b9:	52                   	push   edx
c00139ba:	51                   	push   ecx
c00139bb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	83 c4 0c             	add    esp,0xc
c00139c4:	c3                   	ret    
c00139c5:	90                   	nop

c00139c6 <Directory::read(dirent*)>:
c00139c6:	83 ec 1c             	sub    esp,0x1c
c00139c9:	b8 0b 00 00 00       	mov    eax,0xb
c00139ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139d9:	80 fa 19             	cmp    dl,0x19
c00139dc:	77 30                	ja     c0013a0e <Directory::read(dirent*)+0x48>
c00139de:	8b 14 95 c0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1040]
c00139e5:	85 d2                	test   edx,edx
c00139e7:	74 25                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139e9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139f0:	74 1c                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139fb:	52                   	push   edx
c00139fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a00:	6a 00                	push   0x0
c0013a02:	68 10 01 00 00       	push   0x110
c0013a07:	51                   	push   ecx
c0013a08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a0b:	83 c4 20             	add    esp,0x20
c0013a0e:	83 c4 1c             	add    esp,0x1c
c0013a11:	c3                   	ret    

c0013a12 <Directory::create()>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a25:	80 f9 19             	cmp    cl,0x19
c0013a28:	77 2f                	ja     c0013a59 <Directory::create()+0x47>
c0013a2a:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0013a31:	85 c9                	test   ecx,ecx
c0013a33:	74 24                	je     c0013a59 <Directory::create()+0x47>
c0013a35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 1a                	je     c0013a59 <Directory::create()+0x47>
c0013a3f:	b8 06 00 00 00       	mov    eax,0x6
c0013a44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a48:	75 0f                	jne    c0013a59 <Directory::create()+0x47>
c0013a4a:	83 c2 0d             	add    edx,0xd
c0013a4d:	50                   	push   eax
c0013a4e:	50                   	push   eax
c0013a4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a51:	52                   	push   edx
c0013a52:	51                   	push   ecx
c0013a53:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a5e:	b8 0a 00 00 00       	mov    eax,0xa
c0013a63:	c3                   	ret    

c0013a64 <Bus::Bus(char const*)>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6b:	83 ec 08             	sub    esp,0x8
c0013a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a72:	50                   	push   eax
c0013a73:	e8 68 09 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0013a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a84:	89 10                	mov    DWORD PTR [eax],edx
c0013a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a94:	90                   	nop
c0013a95:	83 c4 0c             	add    esp,0xc
c0013a98:	c3                   	ret    
c0013a99:	90                   	nop

c0013a9a <Bus::~Bus()>:
c0013a9a:	83 ec 0c             	sub    esp,0xc
c0013a9d:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0013aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa6:	89 10                	mov    DWORD PTR [eax],edx
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	50                   	push   eax
c0013ab0:	e8 0d 06 00 00       	call   c00140c2 <Device::~Device()>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	90                   	nop
c0013ab9:	83 c4 0c             	add    esp,0xc
c0013abc:	c3                   	ret    
c0013abd:	90                   	nop

c0013abe <Bus::~Bus()>:
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	83 ec 0c             	sub    esp,0xc
c0013ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac8:	e8 cd ff ff ff       	call   c0013a9a <Bus::~Bus()>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	83 ec 08             	sub    esp,0x8
c0013ad3:	68 58 01 00 00       	push   0x158
c0013ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013adc:	e8 02 f2 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	83 c4 0c             	add    esp,0xc
c0013ae7:	c3                   	ret    

c0013ae8 <Buzzer::Buzzer(char const*)>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aef:	83 ec 08             	sub    esp,0x8
c0013af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af6:	50                   	push   eax
c0013af7:	e8 e4 08 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	89 10                	mov    DWORD PTR [eax],edx
c0013b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b26:	90                   	nop
c0013b27:	83 c4 0c             	add    esp,0xc
c0013b2a:	c3                   	ret    
c0013b2b:	90                   	nop

c0013b2c <Buzzer::~Buzzer()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0013b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b38:	89 10                	mov    DWORD PTR [eax],edx
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	50                   	push   eax
c0013b42:	e8 7b 05 00 00       	call   c00140c2 <Device::~Device()>
c0013b47:	83 c4 10             	add    esp,0x10
c0013b4a:	90                   	nop
c0013b4b:	83 c4 0c             	add    esp,0xc
c0013b4e:	c3                   	ret    
c0013b4f:	90                   	nop

c0013b50 <Buzzer::~Buzzer()>:
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	83 ec 0c             	sub    esp,0xc
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 cd ff ff ff       	call   c0013b2c <Buzzer::~Buzzer()>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 ec 08             	sub    esp,0x8
c0013b65:	68 5c 01 00 00       	push   0x15c
c0013b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6e:	e8 70 f1 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	83 c4 0c             	add    esp,0xc
c0013b79:	c3                   	ret    

c0013b7a <Buzzer::stop()>:
c0013b7a:	83 ec 14             	sub    esp,0x14
c0013b7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b81:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b83:	6a 00                	push   0x0
c0013b85:	50                   	push   eax
c0013b86:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b89:	83 c4 1c             	add    esp,0x1c
c0013b8c:	c3                   	ret    

c0013b8d <beepThread(void*)>:
c0013b8d:	53                   	push   ebx
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b95:	e8 5c a3 00 00       	call   c001def6 <unlockScheduler()>
c0013b9a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b9f:	52                   	push   edx
c0013ba0:	52                   	push   edx
c0013ba1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ba7:	52                   	push   edx
c0013ba8:	50                   	push   eax
c0013ba9:	e8 d0 a8 00 00       	call   c001e47e <nanoSleep(unsigned long long)>
c0013bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb1:	e8 c4 ff ff ff       	call   c0013b7a <Buzzer::stop()>
c0013bb6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bbe:	83 c4 18             	add    esp,0x18
c0013bc1:	5b                   	pop    ebx
c0013bc2:	e9 fd a7 00 00       	jmp    c001e3c4 <blockTask(TaskState)>
c0013bc7:	90                   	nop

c0013bc8 <Buzzer::beep(int, int, bool)>:
c0013bc8:	57                   	push   edi
c0013bc9:	56                   	push   esi
c0013bca:	53                   	push   ebx
c0013bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bd7:	52                   	push   edx
c0013bd8:	52                   	push   edx
c0013bd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bdf:	56                   	push   esi
c0013be0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	89 f8                	mov    eax,edi
c0013be8:	84 c0                	test   al,al
c0013bea:	74 1f                	je     c0013c0b <Buzzer::beep(int, int, bool)+0x43>
c0013bec:	50                   	push   eax
c0013bed:	50                   	push   eax
c0013bee:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bf4:	99                   	cdq    
c0013bf5:	52                   	push   edx
c0013bf6:	50                   	push   eax
c0013bf7:	e8 82 a8 00 00       	call   c001e47e <nanoSleep(unsigned long long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c03:	5b                   	pop    ebx
c0013c04:	5e                   	pop    esi
c0013c05:	5f                   	pop    edi
c0013c06:	e9 6f ff ff ff       	jmp    c0013b7a <Buzzer::stop()>
c0013c0b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c11:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0013c16:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c1e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c22:	c7 44 24 14 8d 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b8d
c0013c2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c2e:	5b                   	pop    ebx
c0013c2f:	5e                   	pop    esi
c0013c30:	5f                   	pop    edi
c0013c31:	e9 f0 a3 00 00       	jmp    c001e026 <Process::createThread(void (*)(void*), void*, int)>

c0013c36 <User::loadClockSettings(int)>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 14             	sub    esp,0x14
c0013c3a:	68 14 01 00 00       	push   0x114
c0013c3f:	e8 07 bc ff ff       	call   c000f84b <malloc>
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	89 c3                	mov    ebx,eax
c0013c49:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c0013c4f:	68 f0 af 02 c0       	push   0xc002aff0
c0013c54:	50                   	push   eax
c0013c55:	e8 c8 f6 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013c5a:	58                   	pop    eax
c0013c5b:	5a                   	pop    edx
c0013c5c:	6a 01                	push   0x1
c0013c5e:	53                   	push   ebx
c0013c5f:	e8 22 f7 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0013c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c67:	e8 78 f7 ff ff       	call   c00133e4 <File::close()>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	85 db                	test   ebx,ebx
c0013c71:	74 0f                	je     c0013c82 <User::loadClockSettings(int)+0x4c>
c0013c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c7c:	83 c4 08             	add    esp,0x8
c0013c7f:	5b                   	pop    ebx
c0013c80:	ff e0                	jmp    eax
c0013c82:	83 c4 08             	add    esp,0x8
c0013c85:	5b                   	pop    ebx
c0013c86:	c3                   	ret    
c0013c87:	90                   	nop

c0013c88 <Clock::Clock(char const*)>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8f:	83 ec 08             	sub    esp,0x8
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	50                   	push   eax
c0013c97:	e8 44 07 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	ba 18 b0 02 c0       	mov    edx,0xc002b018
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	89 10                	mov    DWORD PTR [eax],edx
c0013caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cae:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013cb8:	90                   	nop
c0013cb9:	83 c4 0c             	add    esp,0xc
c0013cbc:	c3                   	ret    
c0013cbd:	90                   	nop

c0013cbe <Clock::~Clock()>:
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	ba 18 b0 02 c0       	mov    edx,0xc002b018
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	89 10                	mov    DWORD PTR [eax],edx
c0013ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	50                   	push   eax
c0013cd4:	e8 e9 03 00 00       	call   c00140c2 <Device::~Device()>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	90                   	nop
c0013cdd:	83 c4 0c             	add    esp,0xc
c0013ce0:	c3                   	ret    
c0013ce1:	90                   	nop

c0013ce2 <Clock::~Clock()>:
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cec:	e8 cd ff ff ff       	call   c0013cbe <Clock::~Clock()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	68 58 01 00 00       	push   0x158
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	e8 de ef ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	83 c4 0c             	add    esp,0xc
c0013d0b:	c3                   	ret    

c0013d0c <Clock::timeInSecondsLocal()>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 14             	sub    esp,0x14
c0013d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d16:	50                   	push   eax
c0013d17:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d1a:	0f b6 0d 3c eb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002eb3c
c0013d21:	03 0d 40 eb 02 c0    	add    ecx,DWORD PTR ds:0xc002eb40
c0013d27:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d2d:	89 cb                	mov    ebx,ecx
c0013d2f:	c1 fb 1f             	sar    ebx,0x1f
c0013d32:	01 c8                	add    eax,ecx
c0013d34:	11 da                	adc    edx,ebx
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	31 c9                	xor    ecx,ecx
c0013d3b:	80 3d 3d eb 02 c0 00 	cmp    BYTE PTR ds:0xc002eb3d,0x0
c0013d42:	74 05                	je     c0013d49 <Clock::timeInSecondsLocal()+0x3d>
c0013d44:	b9 08 07 00 00       	mov    ecx,0x708
c0013d49:	31 db                	xor    ebx,ebx
c0013d4b:	01 c8                	add    eax,ecx
c0013d4d:	11 da                	adc    edx,ebx
c0013d4f:	83 c4 08             	add    esp,0x8
c0013d52:	5b                   	pop    ebx
c0013d53:	c3                   	ret    

c0013d54 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d54:	57                   	push   edi
c0013d55:	56                   	push   esi
c0013d56:	53                   	push   ebx
c0013d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d65:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d68:	0f b6 05 3c eb 02 c0 	movzx  eax,BYTE PTR ds:0xc002eb3c
c0013d6f:	03 05 40 eb 02 c0    	add    eax,DWORD PTR ds:0xc002eb40
c0013d75:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d7b:	99                   	cdq    
c0013d7c:	29 c6                	sub    esi,eax
c0013d7e:	19 d7                	sbb    edi,edx
c0013d80:	89 f0                	mov    eax,esi
c0013d82:	89 fa                	mov    edx,edi
c0013d84:	31 f6                	xor    esi,esi
c0013d86:	80 3d 3d eb 02 c0 00 	cmp    BYTE PTR ds:0xc002eb3d,0x0
c0013d8d:	74 05                	je     c0013d94 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d8f:	be 08 07 00 00       	mov    esi,0x708
c0013d94:	31 ff                	xor    edi,edi
c0013d96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d9a:	29 f0                	sub    eax,esi
c0013d9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da0:	19 fa                	sbb    edx,edi
c0013da2:	89 d8                	mov    eax,ebx
c0013da4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013da8:	5b                   	pop    ebx
c0013da9:	5e                   	pop    esi
c0013daa:	5f                   	pop    edi
c0013dab:	ff e0                	jmp    eax

c0013dad <datetimeToSeconds(datetime_t)>:
c0013dad:	55                   	push   ebp
c0013dae:	57                   	push   edi
c0013daf:	56                   	push   esi
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 14             	sub    esp,0x14
c0013db4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013db8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013dbc:	89 d3                	mov    ebx,edx
c0013dbe:	0f b6 c6             	movzx  eax,dh
c0013dc1:	c1 eb 10             	shr    ebx,0x10
c0013dc4:	48                   	dec    eax
c0013dc5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013dca:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dce:	0f b6 f5             	movzx  esi,ch
c0013dd1:	89 cf                	mov    edi,ecx
c0013dd3:	6b f6 3c             	imul   esi,esi,0x3c
c0013dd6:	c1 ef 10             	shr    edi,0x10
c0013dd9:	0f b6 c9             	movzx  ecx,cl
c0013ddc:	89 f8                	mov    eax,edi
c0013dde:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013de4:	0f b6 f8             	movzx  edi,al
c0013de7:	0f b6 d2             	movzx  edx,dl
c0013dea:	01 fe                	add    esi,edi
c0013dec:	01 f1                	add    ecx,esi
c0013dee:	0f b7 f3             	movzx  esi,bx
c0013df1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013df5:	c1 f9 1f             	sar    ecx,0x1f
c0013df8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e01:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e06:	8b 0c 8d 60 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4fa0]
c0013e0d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e11:	76 29                	jbe    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e13:	f6 c3 03             	test   bl,0x3
c0013e16:	75 24                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	bf 64 00 00 00       	mov    edi,0x64
c0013e1f:	89 d8                	mov    eax,ebx
c0013e21:	66 f7 f7             	div    di
c0013e24:	66 85 d2             	test   dx,dx
c0013e27:	75 12                	jne    c0013e3b <datetimeToSeconds(datetime_t)+0x8e>
c0013e29:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e2f:	bf 90 01 00 00       	mov    edi,0x190
c0013e34:	99                   	cdq    
c0013e35:	f7 ff                	idiv   edi
c0013e37:	85 d2                	test   edx,edx
c0013e39:	75 01                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e3b:	41                   	inc    ecx
c0013e3c:	66 83 fb 46          	cmp    bx,0x46
c0013e40:	76 45                	jbe    c0013e87 <datetimeToSeconds(datetime_t)+0xda>
c0013e42:	bb 46 00 00 00       	mov    ebx,0x46
c0013e47:	bf 64 00 00 00       	mov    edi,0x64
c0013e4c:	bd 90 01 00 00       	mov    ebp,0x190
c0013e51:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e56:	f6 c3 03             	test   bl,0x3
c0013e59:	75 23                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e5b:	89 d8                	mov    eax,ebx
c0013e5d:	99                   	cdq    
c0013e5e:	f7 ff                	idiv   edi
c0013e60:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e65:	85 d2                	test   edx,edx
c0013e67:	75 15                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e69:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e6f:	99                   	cdq    
c0013e70:	f7 fd                	idiv   ebp
c0013e72:	83 fa 01             	cmp    edx,0x1
c0013e75:	19 c0                	sbb    eax,eax
c0013e77:	f7 d0                	not    eax
c0013e79:	05 6e 01 00 00       	add    eax,0x16e
c0013e7e:	01 c1                	add    ecx,eax
c0013e80:	43                   	inc    ebx
c0013e81:	39 f3                	cmp    ebx,esi
c0013e83:	7c cc                	jl     c0013e51 <datetimeToSeconds(datetime_t)+0xa4>
c0013e85:	eb 35                	jmp    c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e87:	74 33                	je     c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e89:	b8 45 00 00 00       	mov    eax,0x45
c0013e8e:	89 c2                	mov    edx,eax
c0013e90:	83 e2 03             	and    edx,0x3
c0013e93:	39 f0                	cmp    eax,esi
c0013e95:	7e 0f                	jle    c0013ea6 <datetimeToSeconds(datetime_t)+0xf9>
c0013e97:	83 fa 01             	cmp    edx,0x1
c0013e9a:	19 d2                	sbb    edx,edx
c0013e9c:	48                   	dec    eax
c0013e9d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ea4:	eb e8                	jmp    c0013e8e <datetimeToSeconds(datetime_t)+0xe1>
c0013ea6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eab:	85 d2                	test   edx,edx
c0013ead:	75 0b                	jne    c0013eba <datetimeToSeconds(datetime_t)+0x10d>
c0013eaf:	66 83 fb 01          	cmp    bx,0x1
c0013eb3:	19 c0                	sbb    eax,eax
c0013eb5:	05 6e 01 00 00       	add    eax,0x16e
c0013eba:	29 c1                	sub    ecx,eax
c0013ebc:	b8 80 51 01 00       	mov    eax,0x15180
c0013ec1:	f7 e9                	imul   ecx
c0013ec3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ec7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ecb:	83 c4 14             	add    esp,0x14
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	5d                   	pop    ebp
c0013ed2:	c3                   	ret    
c0013ed3:	90                   	nop

c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013edb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013edd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ee0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee8:	e8 c0 fe ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c0013eed:	59                   	pop    ecx
c0013eee:	0f b6 0d 3c eb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002eb3c
c0013ef5:	5b                   	pop    ebx
c0013ef6:	03 0d 40 eb 02 c0    	add    ecx,DWORD PTR ds:0xc002eb40
c0013efc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f02:	89 cb                	mov    ebx,ecx
c0013f04:	c1 fb 1f             	sar    ebx,0x1f
c0013f07:	29 c8                	sub    eax,ecx
c0013f09:	19 da                	sbb    edx,ebx
c0013f0b:	31 c9                	xor    ecx,ecx
c0013f0d:	80 3d 3d eb 02 c0 00 	cmp    BYTE PTR ds:0xc002eb3d,0x0
c0013f14:	74 05                	je     c0013f1b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f16:	b9 08 07 00 00       	mov    ecx,0x708
c0013f1b:	31 db                	xor    ebx,ebx
c0013f1d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f21:	29 c8                	sub    eax,ecx
c0013f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f27:	19 da                	sbb    edx,ebx
c0013f29:	89 f8                	mov    eax,edi
c0013f2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	ff e0                	jmp    eax

c0013f34 <secondsToDatetime(unsigned long long)>:
c0013f34:	55                   	push   ebp
c0013f35:	57                   	push   edi
c0013f36:	56                   	push   esi
c0013f37:	53                   	push   ebx
c0013f38:	83 ec 1c             	sub    esp,0x1c
c0013f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f3f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f43:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f47:	6a 00                	push   0x0
c0013f49:	68 80 51 01 00       	push   0x15180
c0013f4e:	55                   	push   ebp
c0013f4f:	57                   	push   edi
c0013f50:	e8 df 2d 01 00       	call   c0026d34 <__udivdi3>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f62:	6a 00                	push   0x0
c0013f64:	68 80 51 01 00       	push   0x15180
c0013f69:	55                   	push   ebp
c0013f6a:	57                   	push   edi
c0013f6b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f70:	e8 bf 2e 01 00       	call   c0026e34 <__umoddi3>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	99                   	cdq    
c0013f79:	f7 ff                	idiv   edi
c0013f7b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f80:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f83:	89 d0                	mov    eax,edx
c0013f85:	99                   	cdq    
c0013f86:	f7 ff                	idiv   edi
c0013f88:	85 db                	test   ebx,ebx
c0013f8a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f8d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f90:	79 11                	jns    c0013fa3 <secondsToDatetime(unsigned long long)+0x6f>
c0013f92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f96:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f9c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa1:	eb 07                	jmp    c0013faa <secondsToDatetime(unsigned long long)+0x76>
c0013fa3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa8:	89 d8                	mov    eax,ebx
c0013faa:	bf b4 05 00 00       	mov    edi,0x5b4
c0013faf:	99                   	cdq    
c0013fb0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fb5:	f7 f9                	idiv   ecx
c0013fb7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fc0:	31 d2                	xor    edx,edx
c0013fc2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013fca:	01 c3                	add    ebx,eax
c0013fcc:	89 d8                	mov    eax,ebx
c0013fce:	f7 f1                	div    ecx
c0013fd0:	31 d2                	xor    edx,edx
c0013fd2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fd5:	89 d8                	mov    eax,ebx
c0013fd7:	f7 f7                	div    edi
c0013fd9:	31 d2                	xor    edx,edx
c0013fdb:	29 c1                	sub    ecx,eax
c0013fdd:	89 d8                	mov    eax,ebx
c0013fdf:	f7 f5                	div    ebp
c0013fe1:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fe6:	29 c1                	sub    ecx,eax
c0013fe8:	31 d2                	xor    edx,edx
c0013fea:	89 c8                	mov    eax,ecx
c0013fec:	f7 f5                	div    ebp
c0013fee:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff7:	31 d2                	xor    edx,edx
c0013ff9:	89 c8                	mov    eax,ecx
c0013ffb:	f7 f5                	div    ebp
c0013ffd:	31 d2                	xor    edx,edx
c0013fff:	01 c3                	add    ebx,eax
c0014001:	89 c8                	mov    eax,ecx
c0014003:	f7 f7                	div    edi
c0014005:	bf 99 00 00 00       	mov    edi,0x99
c001400a:	29 c3                	sub    ebx,eax
c001400c:	31 d2                	xor    edx,edx
c001400e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014016:	29 c3                	sub    ebx,eax
c0014018:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001401b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001401e:	bb 05 00 00 00       	mov    ebx,0x5
c0014023:	83 c1 02             	add    ecx,0x2
c0014026:	89 c8                	mov    eax,ecx
c0014028:	f7 f7                	div    edi
c001402a:	31 d2                	xor    edx,edx
c001402c:	89 c7                	mov    edi,eax
c001402e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014034:	83 c0 02             	add    eax,0x2
c0014037:	f7 f3                	div    ebx
c0014039:	89 eb                	mov    ebx,ebp
c001403b:	29 c3                	sub    ebx,eax
c001403d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014043:	88 1e                	mov    BYTE PTR [esi],bl
c0014045:	19 c0                	sbb    eax,eax
c0014047:	31 d2                	xor    edx,edx
c0014049:	83 e0 0c             	and    eax,0xc
c001404c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014050:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014058:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001405c:	83 f9 01             	cmp    ecx,0x1
c001405f:	0f 96 c2             	setbe  dl
c0014062:	41                   	inc    ecx
c0014063:	01 d0                	add    eax,edx
c0014065:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014068:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001406c:	83 c4 1c             	add    esp,0x1c
c001406f:	89 f0                	mov    eax,esi
c0014071:	5b                   	pop    ebx
c0014072:	5e                   	pop    esi
c0014073:	5f                   	pop    edi
c0014074:	5d                   	pop    ebp
c0014075:	c2 04 00             	ret    0x4

c0014078 <Clock::timeInDatetimeLocal()>:
c0014078:	53                   	push   ebx
c0014079:	83 ec 14             	sub    esp,0x14
c001407c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014084:	e8 83 fc ff ff       	call   c0013d0c <Clock::timeInSecondsLocal()>
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	52                   	push   edx
c001408d:	50                   	push   eax
c001408e:	53                   	push   ebx
c001408f:	e8 a0 fe ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c0014094:	89 d8                	mov    eax,ebx
c0014096:	83 c4 14             	add    esp,0x14
c0014099:	5b                   	pop    ebx
c001409a:	c2 04 00             	ret    0x4
c001409d:	90                   	nop

c001409e <Device::hibernate()>:
c001409e:	c3                   	ret    
c001409f:	90                   	nop

c00140a0 <Device::wake()>:
c00140a0:	c3                   	ret    
c00140a1:	90                   	nop

c00140a2 <Device::detect()>:
c00140a2:	c3                   	ret    
c00140a3:	90                   	nop

c00140a4 <Device::disableLegacy()>:
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <Device::powerSaving(PowerSavingLevel)>:
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <DriverlessDevice::close(int, int, void*)>:
c00140a8:	31 c0                	xor    eax,eax
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <DriverlessDevice::detect()>:
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <DriverlessDevice::open(int, int, void*)>:
c00140ae:	83 ec 18             	sub    esp,0x18
c00140b1:	68 90 b0 02 c0       	push   0xc002b090
c00140b6:	e8 9c 65 00 00       	call   c001a657 <Krnl::panic(char const*)>
c00140bb:	83 c8 ff             	or     eax,0xffffffff
c00140be:	83 c4 1c             	add    esp,0x1c
c00140c1:	c3                   	ret    

c00140c2 <Device::~Device()>:
c00140c2:	ba b8 b0 02 c0       	mov    edx,0xc002b0b8
c00140c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140cb:	89 10                	mov    DWORD PTR [eax],edx
c00140cd:	90                   	nop
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <Device::~Device()>:
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140d7:	e8 e6 ff ff ff       	call   c00140c2 <Device::~Device()>
c00140dc:	83 c4 04             	add    esp,0x4
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	68 58 01 00 00       	push   0x158
c00140e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140eb:	e8 f3 eb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <Device::findAndLoadDriver()>:
c00140f8:	c3                   	ret    
c00140f9:	90                   	nop

c00140fa <Device::preOpenPCI(PCIDeviceInfo)>:
c00140fa:	57                   	push   edi
c00140fb:	b9 09 00 00 00       	mov    ecx,0x9
c0014100:	56                   	push   esi
c0014101:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014105:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014109:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014113:	81 c7 18 01 00 00    	add    edi,0x118
c0014119:	fc                   	cld    
c001411a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001411c:	5e                   	pop    esi
c001411d:	5f                   	pop    edi
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <Device::preOpenACPI(void*, char*, char*)>:
c0014120:	56                   	push   esi
c0014121:	53                   	push   ebx
c0014122:	83 ec 08             	sub    esp,0x8
c0014125:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014129:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001412d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001413b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014141:	6a 1e                	push   0x1e
c0014143:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014149:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001414d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014153:	50                   	push   eax
c0014154:	e8 f3 c5 fe ff       	call   c000074c <memcpy>
c0014159:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001415d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014161:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014169:	83 c4 14             	add    esp,0x14
c001416c:	5b                   	pop    ebx
c001416d:	5e                   	pop    esi
c001416e:	e9 d9 c5 fe ff       	jmp    c000074c <memcpy>
c0014173:	90                   	nop

c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014178:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001417d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014184:	75 0b                	jne    c0014191 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014186:	8b 00                	mov    eax,DWORD PTR [eax]
c0014188:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001418c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001418f:	eb 1e                	jmp    c00141af <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014191:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0014196:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001419c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141af:	ff e0                	jmp    eax
c00141b1:	90                   	nop

c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141c2:	75 0b                	jne    c00141cf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141ca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141cd:	eb 1e                	jmp    c00141ed <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141cf:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00141d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ea:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141ed:	ff e0                	jmp    eax
c00141ef:	90                   	nop

c00141f0 <Device::addChild(Device*)>:
c00141f0:	53                   	push   ebx
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141fc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014202:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014208:	8b 13                	mov    edx,DWORD PTR [ebx]
c001420a:	85 d2                	test   edx,edx
c001420c:	74 04                	je     c0014212 <Device::addChild(Device*)+0x22>
c001420e:	89 d3                	mov    ebx,edx
c0014210:	eb f6                	jmp    c0014208 <Device::addChild(Device*)+0x18>
c0014212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	6a 08                	push   0x8
c001421a:	e8 2c b6 ff ff       	call   c000f84b <malloc>
c001421f:	89 03                	mov    DWORD PTR [ebx],eax
c0014221:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014227:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001422e:	83 c4 18             	add    esp,0x18
c0014231:	5b                   	pop    ebx
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::removeAllChildren()>:
c0014234:	56                   	push   esi
c0014235:	53                   	push   ebx
c0014236:	52                   	push   edx
c0014237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014241:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014244:	74 17                	je     c001425d <Device::removeAllChildren()+0x29>
c0014246:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014249:	85 c0                	test   eax,eax
c001424b:	74 0c                	je     c0014259 <Device::removeAllChildren()+0x25>
c001424d:	83 ec 0c             	sub    esp,0xc
c0014250:	8b 10                	mov    edx,DWORD PTR [eax]
c0014252:	50                   	push   eax
c0014253:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001425b:	eb e4                	jmp    c0014241 <Device::removeAllChildren()+0xd>
c001425d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014269:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001426f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014276:	58                   	pop    eax
c0014277:	5b                   	pop    ebx
c0014278:	5e                   	pop    esi
c0014279:	c3                   	ret    

c001427a <Device::hibernateAll()>:
c001427a:	53                   	push   ebx
c001427b:	83 ec 14             	sub    esp,0x14
c001427e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014284:	53                   	push   ebx
c0014285:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014288:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014294:	74 0f                	je     c00142a5 <Device::hibernateAll()+0x2b>
c0014296:	83 ec 0c             	sub    esp,0xc
c0014299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001429c:	e8 d9 ff ff ff       	call   c001427a <Device::hibernateAll()>
c00142a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142a3:	eb e9                	jmp    c001428e <Device::hibernateAll()+0x14>
c00142a5:	83 c4 08             	add    esp,0x8
c00142a8:	5b                   	pop    ebx
c00142a9:	c3                   	ret    

c00142aa <Device::wakeAll()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 14             	sub    esp,0x14
c00142ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b4:	53                   	push   ebx
c00142b5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c4:	74 0f                	je     c00142d5 <Device::wakeAll()+0x2b>
c00142c6:	83 ec 0c             	sub    esp,0xc
c00142c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142cc:	e8 d9 ff ff ff       	call   c00142aa <Device::wakeAll()>
c00142d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d3:	eb e9                	jmp    c00142be <Device::wakeAll()+0x14>
c00142d5:	83 c4 08             	add    esp,0x8
c00142d8:	5b                   	pop    ebx
c00142d9:	c3                   	ret    

c00142da <Device::detectAll()>:
c00142da:	53                   	push   ebx
c00142db:	83 ec 14             	sub    esp,0x14
c00142de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e4:	53                   	push   ebx
c00142e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f4:	74 0f                	je     c0014305 <Device::detectAll()+0x2b>
c00142f6:	83 ec 0c             	sub    esp,0xc
c00142f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fc:	e8 d9 ff ff ff       	call   c00142da <Device::detectAll()>
c0014301:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014303:	eb e9                	jmp    c00142ee <Device::detectAll()+0x14>
c0014305:	83 c4 08             	add    esp,0x8
c0014308:	5b                   	pop    ebx
c0014309:	c3                   	ret    

c001430a <Device::disableLegacyAll()>:
c001430a:	53                   	push   ebx
c001430b:	83 ec 14             	sub    esp,0x14
c001430e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014314:	53                   	push   ebx
c0014315:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014324:	74 0f                	je     c0014335 <Device::disableLegacyAll()+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001432c:	e8 d9 ff ff ff       	call   c001430a <Device::disableLegacyAll()>
c0014331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014333:	eb e9                	jmp    c001431e <Device::disableLegacyAll()+0x14>
c0014335:	83 c4 08             	add    esp,0x8
c0014338:	5b                   	pop    ebx
c0014339:	c3                   	ret    

c001433a <Device::loadDriversForAll()>:
c001433a:	53                   	push   ebx
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014342:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014348:	8b 18                	mov    ebx,DWORD PTR [eax]
c001434a:	85 db                	test   ebx,ebx
c001434c:	74 12                	je     c0014360 <Device::loadDriversForAll()+0x26>
c001434e:	83 ec 0c             	sub    esp,0xc
c0014351:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014354:	e8 e1 ff ff ff       	call   c001433a <Device::loadDriversForAll()>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	89 d8                	mov    eax,ebx
c001435e:	eb e8                	jmp    c0014348 <Device::loadDriversForAll()+0xe>
c0014360:	83 c4 08             	add    esp,0x8
c0014363:	5b                   	pop    ebx
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <Device::closeAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	6a 00                	push   0x0
c0014372:	6a 00                	push   0x0
c0014374:	6a 00                	push   0x0
c0014376:	53                   	push   ebx
c0014377:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001437a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014380:	83 c4 10             	add    esp,0x10
c0014383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014386:	74 0f                	je     c0014397 <Device::closeAll()+0x31>
c0014388:	83 ec 0c             	sub    esp,0xc
c001438b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001438e:	e8 d3 ff ff ff       	call   c0014366 <Device::closeAll()>
c0014393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014395:	eb e9                	jmp    c0014380 <Device::closeAll()+0x1a>
c0014397:	83 c4 08             	add    esp,0x8
c001439a:	5b                   	pop    ebx
c001439b:	c3                   	ret    

c001439c <Device::powerSavingAll(PowerSavingLevel)>:
c001439c:	56                   	push   esi
c001439d:	53                   	push   ebx
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ab:	56                   	push   esi
c00143ac:	53                   	push   ebx
c00143ad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b6:	83 c4 10             	add    esp,0x10
c00143b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143bc:	74 0f                	je     c00143cd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143be:	52                   	push   edx
c00143bf:	52                   	push   edx
c00143c0:	56                   	push   esi
c00143c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c4:	e8 d3 ff ff ff       	call   c001439c <Device::powerSavingAll(PowerSavingLevel)>
c00143c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cb:	eb e9                	jmp    c00143b6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143cd:	58                   	pop    eax
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	c3                   	ret    
c00143d1:	90                   	nop

c00143d2 <Device::setName(char const*)>:
c00143d2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143da:	e9 5d c4 fe ff       	jmp    c000083c <strcpy>
c00143df:	90                   	nop

c00143e0 <Device::Device(char const*)>:
c00143e0:	83 ec 1c             	sub    esp,0x1c
c00143e3:	ba b8 b0 02 c0       	mov    edx,0xc002b0b8
c00143e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ec:	89 10                	mov    DWORD PTR [eax],edx
c00143ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014400:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001440a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001441c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014426:	83 ec 08             	sub    esp,0x8
c0014429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001442d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014431:	e8 9c ff ff ff       	call   c00143d2 <Device::setName(char const*)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014441:	83 ec 0c             	sub    esp,0xc
c0014444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014448:	e8 fe b3 ff ff       	call   c000f84b <malloc>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014456:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001445d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014461:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014471:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014481:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014497:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001449e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144be:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00144d6:	90                   	nop
c00144d7:	83 c4 1c             	add    esp,0x1c
c00144da:	c3                   	ret    
c00144db:	90                   	nop

c00144dc <Device::getName()>:
c00144dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144e0:	05 d0 00 00 00       	add    eax,0xd0
c00144e5:	c3                   	ret    

c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ed:	83 ec 08             	sub    esp,0x8
c00144f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f4:	50                   	push   eax
c00144f5:	e8 e6 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	ba e4 b0 02 c0       	mov    edx,0xc002b0e4
c0014502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014506:	89 10                	mov    DWORD PTR [eax],edx
c0014508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001450c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014516:	90                   	nop
c0014517:	83 c4 0c             	add    esp,0xc
c001451a:	c3                   	ret    
c001451b:	90                   	nop

c001451c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001451c:	57                   	push   edi
c001451d:	56                   	push   esi
c001451e:	53                   	push   ebx
c001451f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014523:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001452b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014531:	75 0c                	jne    c001453f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014533:	52                   	push   edx
c0014534:	52                   	push   edx
c0014535:	53                   	push   ebx
c0014536:	56                   	push   esi
c0014537:	e8 3e 47 01 00       	call   c0028c7a <LinkedList<Device>::addElement(Device*)>
c001453c:	83 c4 10             	add    esp,0x10
c001453f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014545:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014548:	74 12                	je     c001455c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001454a:	50                   	push   eax
c001454b:	57                   	push   edi
c001454c:	56                   	push   esi
c001454d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014550:	e8 c7 ff ff ff       	call   c001451c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014555:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	eb e9                	jmp    c0014545 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001455c:	5b                   	pop    ebx
c001455d:	5e                   	pop    esi
c001455e:	5f                   	pop    edi
c001455f:	c3                   	ret    

c0014560 <getDevicesOfType(DeviceType)>:
c0014560:	53                   	push   ebx
c0014561:	83 ec 14             	sub    esp,0x14
c0014564:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014568:	53                   	push   ebx
c0014569:	e8 e8 47 01 00       	call   c0028d56 <LinkedList<Device>::LinkedList()>
c001456e:	83 c4 0c             	add    esp,0xc
c0014571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014575:	53                   	push   ebx
c0014576:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c001457c:	e8 9b ff ff ff       	call   c001451c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014581:	89 d8                	mov    eax,ebx
c0014583:	83 c4 18             	add    esp,0x18
c0014586:	5b                   	pop    ebx
c0014587:	c2 04 00             	ret    0x4

c001458a <HardDiskController::HardDiskController(char const*)>:
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014591:	83 ec 08             	sub    esp,0x8
c0014594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014598:	50                   	push   eax
c0014599:	e8 42 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c00145a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145aa:	89 10                	mov    DWORD PTR [eax],edx
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145ba:	90                   	nop
c00145bb:	83 c4 0c             	add    esp,0xc
c00145be:	c3                   	ret    
c00145bf:	90                   	nop

c00145c0 <HardDiskController::~HardDiskController()>:
c00145c0:	83 ec 0c             	sub    esp,0xc
c00145c3:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c00145c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145cc:	89 10                	mov    DWORD PTR [eax],edx
c00145ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d2:	83 ec 0c             	sub    esp,0xc
c00145d5:	50                   	push   eax
c00145d6:	e8 e7 fa ff ff       	call   c00140c2 <Device::~Device()>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	90                   	nop
c00145df:	83 c4 0c             	add    esp,0xc
c00145e2:	c3                   	ret    
c00145e3:	90                   	nop

c00145e4 <HardDiskController::~HardDiskController()>:
c00145e4:	83 ec 0c             	sub    esp,0xc
c00145e7:	83 ec 0c             	sub    esp,0xc
c00145ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ee:	e8 cd ff ff ff       	call   c00145c0 <HardDiskController::~HardDiskController()>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	83 ec 08             	sub    esp,0x8
c00145f9:	68 58 01 00 00       	push   0x158
c00145fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014602:	e8 dc e6 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	83 c4 0c             	add    esp,0xc
c001460d:	c3                   	ret    

c001460e <PhysicalDisk::eject()>:
c001460e:	83 ec 18             	sub    esp,0x18
c0014611:	68 34 b1 02 c0       	push   0xc002b134
c0014616:	e8 a8 e7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001461b:	83 c8 ff             	or     eax,0xffffffff
c001461e:	83 c4 1c             	add    esp,0x1c
c0014621:	c3                   	ret    

c0014622 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014622:	83 ec 0c             	sub    esp,0xc
c0014625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014629:	83 ec 08             	sub    esp,0x8
c001462c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014630:	50                   	push   eax
c0014631:	e8 aa fd ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c001463e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014642:	89 10                	mov    DWORD PTR [eax],edx
c0014644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014648:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001464f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014653:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014670:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014684:	90                   	nop
c0014685:	83 c4 0c             	add    esp,0xc
c0014688:	c3                   	ret    
c0014689:	90                   	nop

c001468a <PhysicalDisk::startCache()>:
c001468a:	56                   	push   esi
c001468b:	53                   	push   ebx
c001468c:	83 ec 10             	sub    esp,0x10
c001468f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014693:	6a 44                	push   0x44
c0014695:	e8 b1 b1 ff ff       	call   c000f84b <malloc>
c001469a:	89 c6                	mov    esi,eax
c001469c:	58                   	pop    eax
c001469d:	5a                   	pop    edx
c001469e:	53                   	push   ebx
c001469f:	56                   	push   esi
c00146a0:	e8 f1 27 00 00       	call   c0016e96 <VCache::VCache(PhysicalDisk*)>
c00146a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00146ab:	83 c4 14             	add    esp,0x14
c00146ae:	5b                   	pop    ebx
c00146af:	5e                   	pop    esi
c00146b0:	c3                   	ret    
c00146b1:	90                   	nop

c00146b2 <PhysicalDisk::~PhysicalDisk()>:
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c00146ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146be:	89 10                	mov    DWORD PTR [eax],edx
c00146c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	50                   	push   eax
c00146c8:	e8 f5 f9 ff ff       	call   c00140c2 <Device::~Device()>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	90                   	nop
c00146d1:	83 c4 0c             	add    esp,0xc
c00146d4:	c3                   	ret    
c00146d5:	90                   	nop

c00146d6 <PhysicalDisk::~PhysicalDisk()>:
c00146d6:	83 ec 0c             	sub    esp,0xc
c00146d9:	83 ec 0c             	sub    esp,0xc
c00146dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e0:	e8 cd ff ff ff       	call   c00146b2 <PhysicalDisk::~PhysicalDisk()>
c00146e5:	83 c4 10             	add    esp,0x10
c00146e8:	83 ec 08             	sub    esp,0x8
c00146eb:	68 6c 01 00 00       	push   0x16c
c00146f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f4:	e8 ea e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00146f9:	83 c4 10             	add    esp,0x10
c00146fc:	83 c4 0c             	add    esp,0xc
c00146ff:	c3                   	ret    

c0014700 <FPU::FPU(char const*)>:
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014707:	83 ec 08             	sub    esp,0x8
c001470a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470e:	50                   	push   eax
c001470f:	e8 cc fc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c001471c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014720:	89 10                	mov    DWORD PTR [eax],edx
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014730:	90                   	nop
c0014731:	83 c4 0c             	add    esp,0xc
c0014734:	c3                   	ret    
c0014735:	90                   	nop

c0014736 <FPU::~FPU()>:
c0014736:	83 ec 0c             	sub    esp,0xc
c0014739:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c001473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014742:	89 10                	mov    DWORD PTR [eax],edx
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	50                   	push   eax
c001474c:	e8 71 f9 ff ff       	call   c00140c2 <Device::~Device()>
c0014751:	83 c4 10             	add    esp,0x10
c0014754:	90                   	nop
c0014755:	83 c4 0c             	add    esp,0xc
c0014758:	c3                   	ret    
c0014759:	90                   	nop

c001475a <FPU::~FPU()>:
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	83 ec 0c             	sub    esp,0xc
c0014760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014764:	e8 cd ff ff ff       	call   c0014736 <FPU::~FPU()>
c0014769:	83 c4 10             	add    esp,0x10
c001476c:	83 ec 08             	sub    esp,0x8
c001476f:	68 58 01 00 00       	push   0x158
c0014774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014778:	e8 66 e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001477d:	83 c4 10             	add    esp,0x10
c0014780:	83 c4 0c             	add    esp,0xc
c0014783:	c3                   	ret    

c0014784 <setupFPU()>:
c0014784:	53                   	push   ebx
c0014785:	83 ec 08             	sub    esp,0x8
c0014788:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c001478e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014795:	74 19                	je     c00147b0 <setupFPU()+0x2c>
c0014797:	83 ec 0c             	sub    esp,0xc
c001479a:	68 58 01 00 00       	push   0x158
c001479f:	e8 a7 b0 ff ff       	call   c000f84b <malloc>
c00147a4:	89 c3                	mov    ebx,eax
c00147a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a9:	e8 0e 11 01 00       	call   c00258bc <AVX::AVX()>
c00147ae:	eb 5b                	jmp    c001480b <setupFPU()+0x87>
c00147b0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147b6:	84 c0                	test   al,al
c00147b8:	79 19                	jns    c00147d3 <setupFPU()+0x4f>
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	68 58 01 00 00       	push   0x158
c00147c2:	e8 84 b0 ff ff       	call   c000f84b <malloc>
c00147c7:	89 c3                	mov    ebx,eax
c00147c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00147cc:	e8 11 12 01 00       	call   c00259e2 <SSE::SSE()>
c00147d1:	eb 38                	jmp    c001480b <setupFPU()+0x87>
c00147d3:	a8 20                	test   al,0x20
c00147d5:	74 19                	je     c00147f0 <setupFPU()+0x6c>
c00147d7:	83 ec 0c             	sub    esp,0xc
c00147da:	68 58 01 00 00       	push   0x158
c00147df:	e8 67 b0 ff ff       	call   c000f84b <malloc>
c00147e4:	89 c3                	mov    ebx,eax
c00147e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00147e9:	e8 5e 11 01 00       	call   c002594c <MMX::MMX()>
c00147ee:	eb 1b                	jmp    c001480b <setupFPU()+0x87>
c00147f0:	a8 10                	test   al,0x10
c00147f2:	74 1c                	je     c0014810 <setupFPU()+0x8c>
c00147f4:	83 ec 0c             	sub    esp,0xc
c00147f7:	68 58 01 00 00       	push   0x158
c00147fc:	e8 4a b0 ff ff       	call   c000f84b <malloc>
c0014801:	89 c3                	mov    ebx,eax
c0014803:	89 04 24             	mov    DWORD PTR [esp],eax
c0014806:	e8 65 12 01 00       	call   c0025a70 <x87::x87()>
c001480b:	83 c4 10             	add    esp,0x10
c001480e:	eb 24                	jmp    c0014834 <setupFPU()+0xb0>
c0014810:	83 e0 ef             	and    eax,0xffffffef
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001481c:	68 94 b1 02 c0       	push   0xc002b194
c0014821:	e8 9d e5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014826:	0f 20 c0             	mov    eax,cr0
c0014829:	83 c8 04             	or     eax,0x4
c001482c:	0f 22 c0             	mov    cr0,eax
c001482f:	31 db                	xor    ebx,ebx
c0014831:	83 c4 10             	add    esp,0x10
c0014834:	89 d8                	mov    eax,ebx
c0014836:	83 c4 08             	add    esp,0x8
c0014839:	5b                   	pop    ebx
c001483a:	c3                   	ret    
c001483b:	90                   	nop

c001483c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001483c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014844:	c1 e0 04             	shl    eax,0x4
c0014847:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001484b:	8d 50 10             	lea    edx,[eax+0x10]
c001484e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014854:	74 08                	je     c001485e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014856:	83 c0 04             	add    eax,0x4
c0014859:	39 d0                	cmp    eax,edx
c001485b:	75 f1                	jne    c001484e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001485d:	c3                   	ret    
c001485e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014868:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014872:	eb e2                	jmp    c0014856 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014874 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014874:	57                   	push   edi
c0014875:	31 c0                	xor    eax,eax
c0014877:	56                   	push   esi
c0014878:	53                   	push   ebx
c0014879:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001487d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014881:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014885:	89 da                	mov    edx,ebx
c0014887:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001488b:	c1 e2 04             	shl    edx,0x4
c001488e:	01 ca                	add    edx,ecx
c0014890:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014898:	74 16                	je     c00148b0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001489a:	40                   	inc    eax
c001489b:	83 f8 04             	cmp    eax,0x4
c001489e:	75 f0                	jne    c0014890 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00148a0:	c7 44 24 10 d8 b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b1d8
c00148a8:	5b                   	pop    ebx
c00148a9:	5e                   	pop    esi
c00148aa:	5f                   	pop    edi
c00148ab:	e9 a7 5d 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c00148b0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148b3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148b6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148bc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148c2:	5b                   	pop    ebx
c00148c3:	5e                   	pop    esi
c00148c4:	5f                   	pop    edi
c00148c5:	c3                   	ret    

c00148c6 <doubleFault(regs*, void*)>:
c00148c6:	55                   	push   ebp
c00148c7:	89 e5                	mov    ebp,esp
c00148c9:	83 ec 08             	sub    esp,0x8
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	68 13 b2 02 c0       	push   0xc002b213
c00148d4:	e8 7e 5d 00 00       	call   c001a657 <Krnl::panic(char const*)>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	90                   	nop
c00148dd:	c9                   	leave  
c00148de:	c3                   	ret    
c00148df:	90                   	nop

c00148e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148e0:	56                   	push   esi
c00148e1:	53                   	push   ebx
c00148e2:	50                   	push   eax
c00148e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148eb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148f0:	75 35                	jne    c0014927 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148f2:	8d 43 20             	lea    eax,[ebx+0x20]
c00148f5:	31 d2                	xor    edx,edx
c00148f7:	89 c1                	mov    ecx,eax
c00148f9:	c1 e1 04             	shl    ecx,0x4
c00148fc:	01 f1                	add    ecx,esi
c00148fe:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014906:	74 3e                	je     c0014946 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014908:	42                   	inc    edx
c0014909:	83 fa 04             	cmp    edx,0x4
c001490c:	75 f0                	jne    c00148fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001490e:	83 ec 0c             	sub    esp,0xc
c0014911:	68 58 b2 02 c0       	push   0xc002b258
c0014916:	e8 3c 5d 00 00       	call   c001a657 <Krnl::panic(char const*)>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014923:	5a                   	pop    edx
c0014924:	5b                   	pop    ebx
c0014925:	5e                   	pop    esi
c0014926:	c3                   	ret    
c0014927:	83 ec 0c             	sub    esp,0xc
c001492a:	56                   	push   esi
c001492b:	e8 ac fb ff ff       	call   c00144dc <Device::getName()>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014936:	75 ba                	jne    c00148f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014938:	83 fb 0f             	cmp    ebx,0xf
c001493b:	7f 29                	jg     c0014966 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001493d:	0f b6 9b 00 dc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2400]
c0014944:	eb ac                	jmp    c00148f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014946:	8d 04 82             	lea    eax,[edx+eax*4]
c0014949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001494d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014950:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014956:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001495a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014960:	89 d8                	mov    eax,ebx
c0014962:	5a                   	pop    edx
c0014963:	5b                   	pop    ebx
c0014964:	5e                   	pop    esi
c0014965:	c3                   	ret    
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	68 20 b2 02 c0       	push   0xc002b220
c001496e:	e8 e4 5c 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0014973:	83 c4 10             	add    esp,0x10
c0014976:	e9 77 ff ff ff       	jmp    c00148f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001497b:	90                   	nop

c001497c <InterruptController::clearAllHandlers(int, bool)>:
c001497c:	56                   	push   esi
c001497d:	53                   	push   ebx
c001497e:	52                   	push   edx
c001497f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014983:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014987:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001498c:	75 61                	jne    c00149ef <InterruptController::clearAllHandlers(int, bool)+0x73>
c001498e:	8d 46 20             	lea    eax,[esi+0x20]
c0014991:	c1 e6 04             	shl    esi,0x4
c0014994:	c1 e0 04             	shl    eax,0x4
c0014997:	01 de                	add    esi,ebx
c0014999:	01 d8                	add    eax,ebx
c001499b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00149a5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149af:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149b9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149c3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149cd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149d7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149e1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149eb:	58                   	pop    eax
c00149ec:	5b                   	pop    ebx
c00149ed:	5e                   	pop    esi
c00149ee:	c3                   	ret    
c00149ef:	83 ec 0c             	sub    esp,0xc
c00149f2:	53                   	push   ebx
c00149f3:	e8 e4 fa ff ff       	call   c00144dc <Device::getName()>
c00149f8:	83 c4 10             	add    esp,0x10
c00149fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149fe:	75 8e                	jne    c001498e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a00:	83 fe 0f             	cmp    esi,0xf
c0014a03:	7f 09                	jg     c0014a0e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a05:	0f b6 b6 00 dc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2400]
c0014a0c:	eb 80                	jmp    c001498e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	68 94 b2 02 c0       	push   0xc002b294
c0014a16:	e8 3c 5c 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0014a1b:	83 c4 10             	add    esp,0x10
c0014a1e:	e9 6b ff ff ff       	jmp    c001498e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a23:	90                   	nop

c0014a24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a24:	56                   	push   esi
c0014a25:	53                   	push   ebx
c0014a26:	52                   	push   edx
c0014a27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a2f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a34:	75 3a                	jne    c0014a70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a3a:	8d 50 20             	lea    edx,[eax+0x20]
c0014a3d:	c1 e2 04             	shl    edx,0x4
c0014a40:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a43:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a47:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a4d:	74 0b                	je     c0014a5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a4f:	83 c0 04             	add    eax,0x4
c0014a52:	39 d0                	cmp    eax,edx
c0014a54:	75 f1                	jne    c0014a47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a56:	58                   	pop    eax
c0014a57:	5b                   	pop    ebx
c0014a58:	5e                   	pop    esi
c0014a59:	c3                   	ret    
c0014a5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a64:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a6e:	eb df                	jmp    c0014a4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a70:	83 ec 0c             	sub    esp,0xc
c0014a73:	56                   	push   esi
c0014a74:	e8 63 fa ff ff       	call   c00144dc <Device::getName()>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a7f:	75 b5                	jne    c0014a36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a81:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a86:	7f 11                	jg     c0014a99 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a8c:	0f b6 80 00 dc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2400]
c0014a93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a97:	eb 9d                	jmp    c0014a36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a99:	83 ec 0c             	sub    esp,0xc
c0014a9c:	68 94 b2 02 c0       	push   0xc002b294
c0014aa1:	e8 b1 5b 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	eb 8b                	jmp    c0014a36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014aab <nmiHandler(regs*, void*)>:
c0014aab:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0014ab0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ab4:	e9 db a4 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014ab9 <int_handler>:
c0014ab9:	55                   	push   ebp
c0014aba:	57                   	push   edi
c0014abb:	56                   	push   esi
c0014abc:	53                   	push   ebx
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ac4:	80 3d 04 15 03 c0 00 	cmp    BYTE PTR ds:0xc0031504,0x0
c0014acb:	74 0b                	je     c0014ad8 <int_handler+0x1f>
c0014acd:	fa                   	cli    
c0014ace:	f4                   	hlt    
c0014acf:	80 3d 04 15 03 c0 00 	cmp    BYTE PTR ds:0xc0031504,0x0
c0014ad6:	75 f5                	jne    c0014acd <int_handler+0x14>
c0014ad8:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0014add:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ae0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ae6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014aec:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aef:	83 f8 17             	cmp    eax,0x17
c0014af2:	77 13                	ja     c0014b07 <int_handler+0x4e>
c0014af4:	83 ec 08             	sub    esp,0x8
c0014af7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014af9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014afc:	0f b6 c0             	movzx  eax,al
c0014aff:	50                   	push   eax
c0014b00:	57                   	push   edi
c0014b01:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b04:	83 c4 10             	add    esp,0x10
c0014b07:	83 c3 15             	add    ebx,0x15
c0014b0a:	c1 e3 04             	shl    ebx,0x4
c0014b0d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b11:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b18:	31 db                	xor    ebx,ebx
c0014b1a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b1e:	85 c0                	test   eax,eax
c0014b20:	74 13                	je     c0014b35 <int_handler+0x7c>
c0014b22:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b25:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b29:	74 1c                	je     c0014b47 <int_handler+0x8e>
c0014b2b:	83 ec 08             	sub    esp,0x8
c0014b2e:	52                   	push   edx
c0014b2f:	56                   	push   esi
c0014b30:	ff d0                	call   eax
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	43                   	inc    ebx
c0014b36:	83 fb 04             	cmp    ebx,0x4
c0014b39:	75 df                	jne    c0014b1a <int_handler+0x61>
c0014b3b:	83 c4 0c             	add    esp,0xc
c0014b3e:	31 c0                	xor    eax,eax
c0014b40:	5b                   	pop    ebx
c0014b41:	31 d2                	xor    edx,edx
c0014b43:	5e                   	pop    esi
c0014b44:	5f                   	pop    edi
c0014b45:	5d                   	pop    ebp
c0014b46:	c3                   	ret    
c0014b47:	83 ec 08             	sub    esp,0x8
c0014b4a:	52                   	push   edx
c0014b4b:	56                   	push   esi
c0014b4c:	ff d0                	call   eax
c0014b4e:	83 c4 10             	add    esp,0x10
c0014b51:	83 c4 0c             	add    esp,0xc
c0014b54:	5b                   	pop    ebx
c0014b55:	5e                   	pop    esi
c0014b56:	5f                   	pop    edi
c0014b57:	5d                   	pop    ebp
c0014b58:	c3                   	ret    
c0014b59:	90                   	nop

c0014b5a <InterruptController::InterruptController(char const*)>:
c0014b5a:	83 ec 1c             	sub    esp,0x1c
c0014b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b61:	83 ec 08             	sub    esp,0x8
c0014b64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b68:	50                   	push   eax
c0014b69:	e8 72 f8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0014b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7a:	89 10                	mov    DWORD PTR [eax],edx
c0014b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b92:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b9a:	7f 5e                	jg     c0014bfa <InterruptController::InterruptController(char const*)+0xa0>
c0014b9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ba4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ba9:	7f 49                	jg     c0014bf4 <InterruptController::InterruptController(char const*)+0x9a>
c0014bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014baf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bb3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bbe:	01 ca                	add    edx,ecx
c0014bc0:	83 c2 54             	add    edx,0x54
c0014bc3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bd3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bde:	01 ca                	add    edx,ecx
c0014be0:	81 c2 54 04 00 00    	add    edx,0x454
c0014be6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bf2:	eb b0                	jmp    c0014ba4 <InterruptController::InterruptController(char const*)+0x4a>
c0014bf4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bf8:	eb 98                	jmp    c0014b92 <InterruptController::InterruptController(char const*)+0x38>
c0014bfa:	90                   	nop
c0014bfb:	83 c4 1c             	add    esp,0x1c
c0014bfe:	c3                   	ret    
c0014bff:	90                   	nop

c0014c00 <InterruptController::~InterruptController()>:
c0014c00:	83 ec 0c             	sub    esp,0xc
c0014c03:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0014c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c0c:	89 10                	mov    DWORD PTR [eax],edx
c0014c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c12:	83 ec 0c             	sub    esp,0xc
c0014c15:	50                   	push   eax
c0014c16:	e8 a7 f4 ff ff       	call   c00140c2 <Device::~Device()>
c0014c1b:	83 c4 10             	add    esp,0x10
c0014c1e:	90                   	nop
c0014c1f:	83 c4 0c             	add    esp,0xc
c0014c22:	c3                   	ret    
c0014c23:	90                   	nop

c0014c24 <InterruptController::~InterruptController()>:
c0014c24:	83 ec 0c             	sub    esp,0xc
c0014c27:	83 ec 0c             	sub    esp,0xc
c0014c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c2e:	e8 cd ff ff ff       	call   c0014c00 <InterruptController::~InterruptController()>
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	83 ec 08             	sub    esp,0x8
c0014c39:	68 58 21 00 00       	push   0x2158
c0014c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c42:	e8 9c e0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0014c47:	83 c4 10             	add    esp,0x10
c0014c4a:	83 c4 0c             	add    esp,0xc
c0014c4d:	c3                   	ret    

c0014c4e <displayDebugInfo(regs*)>:
c0014c4e:	55                   	push   ebp
c0014c4f:	57                   	push   edi
c0014c50:	56                   	push   esi
c0014c51:	53                   	push   ebx
c0014c52:	83 ec 24             	sub    esp,0x24
c0014c55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c59:	0f 20 c2             	mov    edx,cr0
c0014c5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c60:	0f 20 d7             	mov    edi,cr2
c0014c63:	0f 20 de             	mov    esi,cr3
c0014c66:	0f 20 e5             	mov    ebp,cr4
c0014c69:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c6c:	68 ce b2 02 c0       	push   0xc002b2ce
c0014c71:	e8 4d e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c76:	59                   	pop    ecx
c0014c77:	58                   	pop    eax
c0014c78:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c7b:	68 d9 b2 02 c0       	push   0xc002b2d9
c0014c80:	e8 3e e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c85:	58                   	pop    eax
c0014c86:	5a                   	pop    edx
c0014c87:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c8a:	68 e4 b2 02 c0       	push   0xc002b2e4
c0014c8f:	e8 2f e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c94:	59                   	pop    ecx
c0014c95:	58                   	pop    eax
c0014c96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c99:	68 ef b2 02 c0       	push   0xc002b2ef
c0014c9e:	e8 20 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014ca3:	58                   	pop    eax
c0014ca4:	5a                   	pop    edx
c0014ca5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ca8:	68 fa b2 02 c0       	push   0xc002b2fa
c0014cad:	e8 11 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cb2:	59                   	pop    ecx
c0014cb3:	58                   	pop    eax
c0014cb4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014cb7:	68 05 b3 02 c0       	push   0xc002b305
c0014cbc:	e8 02 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cc1:	58                   	pop    eax
c0014cc2:	5a                   	pop    edx
c0014cc3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014cc6:	68 10 b3 02 c0       	push   0xc002b310
c0014ccb:	e8 f3 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cd0:	59                   	pop    ecx
c0014cd1:	58                   	pop    eax
c0014cd2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cd5:	68 1b b3 02 c0       	push   0xc002b31b
c0014cda:	e8 e4 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cdf:	58                   	pop    eax
c0014ce0:	5a                   	pop    edx
c0014ce1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ce4:	68 26 b3 02 c0       	push   0xc002b326
c0014ce9:	e8 d5 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cee:	59                   	pop    ecx
c0014cef:	58                   	pop    eax
c0014cf0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cf3:	68 35 b3 02 c0       	push   0xc002b335
c0014cf8:	e8 c6 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cfd:	58                   	pop    eax
c0014cfe:	5a                   	pop    edx
c0014cff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d02:	68 40 b3 02 c0       	push   0xc002b340
c0014d07:	e8 b7 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d0c:	59                   	pop    ecx
c0014d0d:	58                   	pop    eax
c0014d0e:	57                   	push   edi
c0014d0f:	68 4b b3 02 c0       	push   0xc002b34b
c0014d14:	e8 aa e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d19:	58                   	pop    eax
c0014d1a:	5a                   	pop    edx
c0014d1b:	56                   	push   esi
c0014d1c:	68 56 b3 02 c0       	push   0xc002b356
c0014d21:	e8 9d e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d26:	59                   	pop    ecx
c0014d27:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014d2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d32:	e8 df be ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0014d37:	58                   	pop    eax
c0014d38:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d3b:	5a                   	pop    edx
c0014d3c:	c1 e0 05             	shl    eax,0x5
c0014d3f:	05 60 d9 02 c0       	add    eax,0xc002d960
c0014d44:	50                   	push   eax
c0014d45:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014d4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d50:	e8 4d c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d55:	59                   	pop    ecx
c0014d56:	58                   	pop    eax
c0014d57:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014d5c:	68 61 b3 02 c0       	push   0xc002b361
c0014d61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d67:	e8 36 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d6c:	58                   	pop    eax
c0014d6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d72:	5a                   	pop    edx
c0014d73:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d76:	83 c0 0c             	add    eax,0xc
c0014d79:	50                   	push   eax
c0014d7a:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 18 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d8a:	59                   	pop    ecx
c0014d8b:	58                   	pop    eax
c0014d8c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014d91:	68 6a b3 02 c0       	push   0xc002b36a
c0014d96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d9c:	e8 01 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014da1:	58                   	pop    eax
c0014da2:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014da7:	5a                   	pop    edx
c0014da8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db1:	e8 12 c2 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014db6:	59                   	pop    ecx
c0014db7:	58                   	pop    eax
c0014db8:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014dbd:	68 72 b3 02 c0       	push   0xc002b372
c0014dc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc8:	e8 d5 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014dcd:	58                   	pop    eax
c0014dce:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014dd3:	5a                   	pop    edx
c0014dd4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddd:	e8 e6 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014de2:	59                   	pop    ecx
c0014de3:	58                   	pop    eax
c0014de4:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014de9:	68 7a b3 02 c0       	push   0xc002b37a
c0014dee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df4:	e8 a9 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014df9:	58                   	pop    eax
c0014dfa:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014dff:	5a                   	pop    edx
c0014e00:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e09:	e8 ba c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e0e:	59                   	pop    ecx
c0014e0f:	58                   	pop    eax
c0014e10:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e15:	68 82 b3 02 c0       	push   0xc002b382
c0014e1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e20:	e8 7d c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e25:	58                   	pop    eax
c0014e26:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e2b:	5a                   	pop    edx
c0014e2c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e35:	e8 8e c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e3a:	59                   	pop    ecx
c0014e3b:	58                   	pop    eax
c0014e3c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e41:	68 8a b3 02 c0       	push   0xc002b38a
c0014e46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4c:	e8 51 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e51:	58                   	pop    eax
c0014e52:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e57:	5a                   	pop    edx
c0014e58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e61:	e8 62 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e66:	59                   	pop    ecx
c0014e67:	58                   	pop    eax
c0014e68:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e6d:	68 92 b3 02 c0       	push   0xc002b392
c0014e72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e78:	e8 25 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e7d:	58                   	pop    eax
c0014e7e:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e83:	5a                   	pop    edx
c0014e84:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8d:	e8 36 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014e99:	68 9a b3 02 c0       	push   0xc002b39a
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 f9 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ea9:	58                   	pop    eax
c0014eaa:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014eaf:	5a                   	pop    edx
c0014eb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014eb4:	52                   	push   edx
c0014eb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebb:	e8 08 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014ec0:	59                   	pop    ecx
c0014ec1:	58                   	pop    eax
c0014ec2:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014ec7:	68 a3 b3 02 c0       	push   0xc002b3a3
c0014ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed2:	e8 cb c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ed7:	58                   	pop    eax
c0014ed8:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014edd:	5a                   	pop    edx
c0014ede:	57                   	push   edi
c0014edf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee5:	e8 de c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014eea:	59                   	pop    ecx
c0014eeb:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014ef0:	5f                   	pop    edi
c0014ef1:	68 ab b3 02 c0       	push   0xc002b3ab
c0014ef6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efc:	e8 a1 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f01:	58                   	pop    eax
c0014f02:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f07:	5a                   	pop    edx
c0014f08:	56                   	push   esi
c0014f09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0f:	e8 b4 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f14:	59                   	pop    ecx
c0014f15:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f1a:	5e                   	pop    esi
c0014f1b:	68 b3 b3 02 c0       	push   0xc002b3b3
c0014f20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f26:	e8 77 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f2b:	5f                   	pop    edi
c0014f2c:	58                   	pop    eax
c0014f2d:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f32:	55                   	push   ebp
c0014f33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f39:	e8 8a c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f3e:	58                   	pop    eax
c0014f3f:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f44:	5a                   	pop    edx
c0014f45:	68 bb b3 02 c0       	push   0xc002b3bb
c0014f4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f50:	e8 4d c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f55:	0f 21 c0             	mov    eax,db0
c0014f58:	59                   	pop    ecx
c0014f59:	5e                   	pop    esi
c0014f5a:	50                   	push   eax
c0014f5b:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f66:	e8 5d c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f6b:	5f                   	pop    edi
c0014f6c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f71:	5d                   	pop    ebp
c0014f72:	68 c4 b3 02 c0       	push   0xc002b3c4
c0014f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7d:	e8 20 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f82:	0f 21 c8             	mov    eax,db1
c0014f85:	5a                   	pop    edx
c0014f86:	59                   	pop    ecx
c0014f87:	50                   	push   eax
c0014f88:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f93:	e8 30 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f98:	5e                   	pop    esi
c0014f99:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014f9e:	5f                   	pop    edi
c0014f9f:	68 cc b3 02 c0       	push   0xc002b3cc
c0014fa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faa:	e8 f3 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014faf:	0f 21 d0             	mov    eax,db2
c0014fb2:	5d                   	pop    ebp
c0014fb3:	5a                   	pop    edx
c0014fb4:	50                   	push   eax
c0014fb5:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014fba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc0:	e8 03 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fc5:	59                   	pop    ecx
c0014fc6:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014fcb:	5e                   	pop    esi
c0014fcc:	68 d4 b3 02 c0       	push   0xc002b3d4
c0014fd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd7:	e8 c6 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fdc:	0f 21 d8             	mov    eax,db3
c0014fdf:	5f                   	pop    edi
c0014fe0:	5d                   	pop    ebp
c0014fe1:	50                   	push   eax
c0014fe2:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014fe7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fed:	e8 d6 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014ff2:	58                   	pop    eax
c0014ff3:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0014ff8:	5a                   	pop    edx
c0014ff9:	68 dc b3 02 c0       	push   0xc002b3dc
c0014ffe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015004:	e8 99 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015009:	0f 21 f0             	mov    eax,db6
c001500c:	59                   	pop    ecx
c001500d:	5e                   	pop    esi
c001500e:	50                   	push   eax
c001500f:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015014:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501a:	e8 a9 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001501f:	5f                   	pop    edi
c0015020:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015025:	5d                   	pop    ebp
c0015026:	68 e4 b3 02 c0       	push   0xc002b3e4
c001502b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015031:	e8 6c bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015036:	0f 21 f8             	mov    eax,db7
c0015039:	5a                   	pop    edx
c001503a:	59                   	pop    ecx
c001503b:	50                   	push   eax
c001503c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015047:	e8 7c bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001504c:	5e                   	pop    esi
c001504d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015050:	e8 a7 87 00 00       	call   c001d7fc <Thr::getDriverNameFromAddress(unsigned long)>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	85 c0                	test   eax,eax
c001505a:	74 7d                	je     c00150d9 <displayDebugInfo(regs*)+0x48b>
c001505c:	89 c6                	mov    esi,eax
c001505e:	50                   	push   eax
c001505f:	50                   	push   eax
c0015060:	56                   	push   esi
c0015061:	68 ec b3 02 c0       	push   0xc002b3ec
c0015066:	e8 58 dd ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001506b:	5a                   	pop    edx
c001506c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015071:	59                   	pop    ecx
c0015072:	68 fa b3 02 c0       	push   0xc002b3fa
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 20 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015082:	5f                   	pop    edi
c0015083:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015088:	5d                   	pop    ebp
c0015089:	56                   	push   esi
c001508a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015090:	e8 0d bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015095:	58                   	pop    eax
c0015096:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001509b:	5a                   	pop    edx
c001509c:	68 06 b4 02 c0       	push   0xc002b406
c00150a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a7:	e8 f6 be ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c00150ac:	59                   	pop    ecx
c00150ad:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c00150b2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00150b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150bb:	e8 73 87 00 00       	call   c001d833 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150c0:	5b                   	pop    ebx
c00150c1:	5d                   	pop    ebp
c00150c2:	50                   	push   eax
c00150c3:	57                   	push   edi
c00150c4:	e8 ff be ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c00150c9:	58                   	pop    eax
c00150ca:	5a                   	pop    edx
c00150cb:	56                   	push   esi
c00150cc:	68 12 b4 02 c0       	push   0xc002b412
c00150d1:	e8 ed dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	fa                   	cli    
c00150da:	f4                   	hlt    
c00150db:	eb fe                	jmp    c00150db <displayDebugInfo(regs*)+0x48d>

c00150dd <x87EmulHandler(regs*, void*)>:
c00150dd:	83 ec 0c             	sub    esp,0xc
c00150e0:	0f 20 c2             	mov    edx,cr0
c00150e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00150ec:	75 4b                	jne    c0015139 <x87EmulHandler(regs*, void*)+0x5c>
c00150ee:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00150f3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00150f9:	85 c0                	test   eax,eax
c00150fb:	74 05                	je     c0015102 <x87EmulHandler(regs*, void*)+0x25>
c00150fd:	83 e2 08             	and    edx,0x8
c0015100:	75 17                	jne    c0015119 <x87EmulHandler(regs*, void*)+0x3c>
c0015102:	83 ec 0c             	sub    esp,0xc
c0015105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015109:	e8 4c ab 00 00       	call   c001fc5a <Vm::x87Handler(regs*)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	84 c0                	test   al,al
c0015113:	74 24                	je     c0015139 <x87EmulHandler(regs*, void*)+0x5c>
c0015115:	83 c4 0c             	add    esp,0xc
c0015118:	c3                   	ret    
c0015119:	83 ec 0c             	sub    esp,0xc
c001511c:	68 38 b4 02 c0       	push   0xc002b438
c0015121:	e8 9d dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015126:	0f 06                	clts   
c0015128:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	a3 48 eb 02 c0       	mov    ds:0xc002eb48,eax
c0015135:	83 c4 0c             	add    esp,0xc
c0015138:	c3                   	ret    
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	68 22 b4 02 c0       	push   0xc002b422
c0015141:	e8 7d dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015146:	5a                   	pop    edx
c0015147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001514b:	e8 fe fa ff ff       	call   c0014c4e <displayDebugInfo(regs*)>

c0015150 <gpFault(regs*, void*)>:
c0015150:	53                   	push   ebx
c0015151:	83 ec 14             	sub    esp,0x14
c0015154:	c7 05 44 eb 02 c0 d7 ef 01 c0 	mov    DWORD PTR ds:0xc002eb44,0xc001efd7
c001515e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015162:	53                   	push   ebx
c0015163:	e8 6f 9e 00 00       	call   c001efd7 <Vm::faultHandler(regs*)>
c0015168:	83 c4 10             	add    esp,0x10
c001516b:	84 c0                	test   al,al
c001516d:	74 05                	je     c0015174 <gpFault(regs*, void*)+0x24>
c001516f:	83 c4 08             	add    esp,0x8
c0015172:	5b                   	pop    ebx
c0015173:	c3                   	ret    
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	68 45 b4 02 c0       	push   0xc002b445
c001517c:	e8 42 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015181:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015184:	e8 c5 fa ff ff       	call   c0014c4e <displayDebugInfo(regs*)>

c0015189 <pgFault(regs*, void*)>:
c0015189:	83 ec 14             	sub    esp,0x14
c001518c:	0f 20 d0             	mov    eax,cr2
c001518f:	50                   	push   eax
c0015190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015195:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015198:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001519e:	e8 49 d8 ff ff       	call   c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	84 c0                	test   al,al
c00151a8:	74 04                	je     c00151ae <pgFault(regs*, void*)+0x25>
c00151aa:	83 c4 0c             	add    esp,0xc
c00151ad:	c3                   	ret    
c00151ae:	83 ec 0c             	sub    esp,0xc
c00151b1:	68 60 b4 02 c0       	push   0xc002b460
c00151b6:	e8 08 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151bb:	58                   	pop    eax
c00151bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151c0:	e8 89 fa ff ff       	call   c0014c4e <displayDebugInfo(regs*)>

c00151c5 <otherISRHandler(regs*, void*)>:
c00151c5:	53                   	push   ebx
c00151c6:	83 ec 0c             	sub    esp,0xc
c00151c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151cd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151d0:	50                   	push   eax
c00151d1:	50                   	push   eax
c00151d2:	68 6d b4 02 c0       	push   0xc002b46d
c00151d7:	e8 e7 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151df:	e8 6a fa ff ff       	call   c0014c4e <displayDebugInfo(regs*)>

c00151e4 <opcodeFault(regs*, void*)>:
c00151e4:	55                   	push   ebp
c00151e5:	89 e5                	mov    ebp,esp
c00151e7:	56                   	push   esi
c00151e8:	53                   	push   ebx
c00151e9:	83 ec 40             	sub    esp,0x40
c00151ec:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00151f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151f7:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151fd:	84 c0                	test   al,al
c00151ff:	74 24                	je     c0015225 <opcodeFault(regs*, void*)+0x41>
c0015201:	83 ec 0c             	sub    esp,0xc
c0015204:	68 8c b4 02 c0       	push   0xc002b48c
c0015209:	e8 b5 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015214:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015217:	8d 50 19             	lea    edx,[eax+0x19]
c001521a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015220:	e9 be 05 00 00       	jmp    c00157e3 <opcodeFault(regs*, void*)+0x5ff>
c0015225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015228:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001522b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001522e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015232:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015239:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001523c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001523f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015242:	8a 00                	mov    al,BYTE PTR [eax]
c0015244:	3c f0                	cmp    al,0xf0
c0015246:	75 17                	jne    c001525f <opcodeFault(regs*, void*)+0x7b>
c0015248:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001524b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015251:	8d 50 01             	lea    edx,[eax+0x1]
c0015254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015257:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001525a:	e9 da 00 00 00       	jmp    c0015339 <opcodeFault(regs*, void*)+0x155>
c001525f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015262:	8a 00                	mov    al,BYTE PTR [eax]
c0015264:	3c f2                	cmp    al,0xf2
c0015266:	74 09                	je     c0015271 <opcodeFault(regs*, void*)+0x8d>
c0015268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526b:	8a 00                	mov    al,BYTE PTR [eax]
c001526d:	3c f3                	cmp    al,0xf3
c001526f:	75 1b                	jne    c001528c <opcodeFault(regs*, void*)+0xa8>
c0015271:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015275:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527e:	8d 50 01             	lea    edx,[eax+0x1]
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015287:	e9 ad 00 00 00       	jmp    c0015339 <opcodeFault(regs*, void*)+0x155>
c001528c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528f:	8a 00                	mov    al,BYTE PTR [eax]
c0015291:	3c 66                	cmp    al,0x66
c0015293:	75 1f                	jne    c00152b4 <opcodeFault(regs*, void*)+0xd0>
c0015295:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015299:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001529d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a6:	8d 50 01             	lea    edx,[eax+0x1]
c00152a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152af:	e9 85 00 00 00       	jmp    c0015339 <opcodeFault(regs*, void*)+0x155>
c00152b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b7:	8a 00                	mov    al,BYTE PTR [eax]
c00152b9:	3c 67                	cmp    al,0x67
c00152bb:	75 18                	jne    c00152d5 <opcodeFault(regs*, void*)+0xf1>
c00152bd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152c1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ca:	8d 50 01             	lea    edx,[eax+0x1]
c00152cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d3:	eb 64                	jmp    c0015339 <opcodeFault(regs*, void*)+0x155>
c00152d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d8:	8a 00                	mov    al,BYTE PTR [eax]
c00152da:	3c 2e                	cmp    al,0x2e
c00152dc:	74 09                	je     c00152e7 <opcodeFault(regs*, void*)+0x103>
c00152de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e1:	8a 00                	mov    al,BYTE PTR [eax]
c00152e3:	3c 3e                	cmp    al,0x3e
c00152e5:	75 18                	jne    c00152ff <opcodeFault(regs*, void*)+0x11b>
c00152e7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f4:	8d 50 01             	lea    edx,[eax+0x1]
c00152f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152fd:	eb 3a                	jmp    c0015339 <opcodeFault(regs*, void*)+0x155>
c00152ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015302:	8a 00                	mov    al,BYTE PTR [eax]
c0015304:	3c 36                	cmp    al,0x36
c0015306:	74 1b                	je     c0015323 <opcodeFault(regs*, void*)+0x13f>
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	8a 00                	mov    al,BYTE PTR [eax]
c001530d:	3c 26                	cmp    al,0x26
c001530f:	74 12                	je     c0015323 <opcodeFault(regs*, void*)+0x13f>
c0015311:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015314:	8a 00                	mov    al,BYTE PTR [eax]
c0015316:	3c 64                	cmp    al,0x64
c0015318:	74 09                	je     c0015323 <opcodeFault(regs*, void*)+0x13f>
c001531a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531d:	8a 00                	mov    al,BYTE PTR [eax]
c001531f:	3c 65                	cmp    al,0x65
c0015321:	75 16                	jne    c0015339 <opcodeFault(regs*, void*)+0x155>
c0015323:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015327:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015330:	8d 50 01             	lea    edx,[eax+0x1]
c0015333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015336:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015339:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533c:	8a 00                	mov    al,BYTE PTR [eax]
c001533e:	3c 0f                	cmp    al,0xf
c0015340:	0f 85 ad 00 00 00    	jne    c00153f3 <opcodeFault(regs*, void*)+0x20f>
c0015346:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015349:	40                   	inc    eax
c001534a:	8a 00                	mov    al,BYTE PTR [eax]
c001534c:	3c c2                	cmp    al,0xc2
c001534e:	74 0e                	je     c001535e <opcodeFault(regs*, void*)+0x17a>
c0015350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015353:	40                   	inc    eax
c0015354:	8a 00                	mov    al,BYTE PTR [eax]
c0015356:	3c c3                	cmp    al,0xc3
c0015358:	0f 85 95 00 00 00    	jne    c00153f3 <opcodeFault(regs*, void*)+0x20f>
c001535e:	83 ec 0c             	sub    esp,0xc
c0015361:	68 af b4 02 c0       	push   0xc002b4af
c0015366:	e8 58 da ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015374:	8d 50 01             	lea    edx,[eax+0x1]
c0015377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001537d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	8a 00                	mov    al,BYTE PTR [eax]
c0015385:	8d 50 fe             	lea    edx,[eax-0x2]
c0015388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538b:	88 10                	mov    BYTE PTR [eax],dl
c001538d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015390:	50                   	push   eax
c0015391:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015394:	50                   	push   eax
c0015395:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015398:	50                   	push   eax
c0015399:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001539c:	e8 7d 49 00 00       	call   c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153aa:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153ad:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00153b0:	01 d0                	add    eax,edx
c00153b2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00153b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153be:	48                   	dec    eax
c00153bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00153c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	83 ec 04             	sub    esp,0x4
c00153d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153d4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153d7:	50                   	push   eax
c00153d8:	e8 d7 ad fe ff       	call   c00001b4 <voodooXADD>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00153e3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00153e6:	01 c2                	add    edx,eax
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ee:	e9 f0 03 00 00       	jmp    c00157e3 <opcodeFault(regs*, void*)+0x5ff>
c00153f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f6:	8a 00                	mov    al,BYTE PTR [eax]
c00153f8:	3c 0f                	cmp    al,0xf
c00153fa:	0f 85 8b 01 00 00    	jne    c001558b <opcodeFault(regs*, void*)+0x3a7>
c0015400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015403:	40                   	inc    eax
c0015404:	8a 00                	mov    al,BYTE PTR [eax]
c0015406:	3c c7                	cmp    al,0xc7
c0015408:	0f 86 7d 01 00 00    	jbe    c001558b <opcodeFault(regs*, void*)+0x3a7>
c001540e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015411:	40                   	inc    eax
c0015412:	8a 00                	mov    al,BYTE PTR [eax]
c0015414:	3c cf                	cmp    al,0xcf
c0015416:	0f 87 6f 01 00 00    	ja     c001558b <opcodeFault(regs*, void*)+0x3a7>
c001541c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541f:	40                   	inc    eax
c0015420:	8a 00                	mov    al,BYTE PTR [eax]
c0015422:	83 c0 38             	add    eax,0x38
c0015425:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015428:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001542c:	75 0b                	jne    c0015439 <opcodeFault(regs*, void*)+0x255>
c001542e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015431:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015434:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015437:	eb 75                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c0015439:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001543d:	75 0b                	jne    c001544a <opcodeFault(regs*, void*)+0x266>
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015445:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015448:	eb 64                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001544a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001544e:	75 0b                	jne    c001545b <opcodeFault(regs*, void*)+0x277>
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015456:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015459:	eb 53                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001545b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001545f:	75 0b                	jne    c001546c <opcodeFault(regs*, void*)+0x288>
c0015461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015464:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015467:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001546a:	eb 42                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001546c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015470:	75 0b                	jne    c001547d <opcodeFault(regs*, void*)+0x299>
c0015472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015475:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015478:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001547b:	eb 31                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001547d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015481:	75 0b                	jne    c001548e <opcodeFault(regs*, void*)+0x2aa>
c0015483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015486:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015489:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001548c:	eb 20                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001548e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015492:	75 0b                	jne    c001549f <opcodeFault(regs*, void*)+0x2bb>
c0015494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015497:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001549a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001549d:	eb 0f                	jmp    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c001549f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154a3:	75 09                	jne    c00154ae <opcodeFault(regs*, void*)+0x2ca>
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00154ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ae:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00154b2:	74 10                	je     c00154c4 <opcodeFault(regs*, void*)+0x2e0>
c00154b4:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00154bb:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00154c2:	eb 2d                	jmp    c00154f1 <opcodeFault(regs*, void*)+0x30d>
c00154c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154c7:	c1 e0 18             	shl    eax,0x18
c00154ca:	89 c2                	mov    edx,eax
c00154cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154cf:	c1 e0 08             	shl    eax,0x8
c00154d2:	25 00 00 ff 00       	and    eax,0xff0000
c00154d7:	09 c2                	or     edx,eax
c00154d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154dc:	c1 e8 08             	shr    eax,0x8
c00154df:	25 00 ff 00 00       	and    eax,0xff00
c00154e4:	09 c2                	or     edx,eax
c00154e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154e9:	c1 e8 18             	shr    eax,0x18
c00154ec:	09 d0                	or     eax,edx
c00154ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154f5:	75 0b                	jne    c0015502 <opcodeFault(regs*, void*)+0x31e>
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154fd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015500:	eb 75                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015502:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015506:	75 0b                	jne    c0015513 <opcodeFault(regs*, void*)+0x32f>
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001550e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015511:	eb 64                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015513:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015517:	75 0b                	jne    c0015524 <opcodeFault(regs*, void*)+0x340>
c0015519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001551f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015522:	eb 53                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015524:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015528:	75 0b                	jne    c0015535 <opcodeFault(regs*, void*)+0x351>
c001552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015530:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015533:	eb 42                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015535:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015539:	75 0b                	jne    c0015546 <opcodeFault(regs*, void*)+0x362>
c001553b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015541:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015544:	eb 31                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015546:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001554a:	75 0b                	jne    c0015557 <opcodeFault(regs*, void*)+0x373>
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015552:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015555:	eb 20                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015557:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001555b:	75 0b                	jne    c0015568 <opcodeFault(regs*, void*)+0x384>
c001555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015560:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015563:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015566:	eb 0f                	jmp    c0015577 <opcodeFault(regs*, void*)+0x393>
c0015568:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001556c:	75 09                	jne    c0015577 <opcodeFault(regs*, void*)+0x393>
c001556e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015571:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015574:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001557d:	8d 50 02             	lea    edx,[eax+0x2]
c0015580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015583:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015586:	e9 58 02 00 00       	jmp    c00157e3 <opcodeFault(regs*, void*)+0x5ff>
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8a 00                	mov    al,BYTE PTR [eax]
c0015590:	3c 0f                	cmp    al,0xf
c0015592:	0f 85 76 01 00 00    	jne    c001570e <opcodeFault(regs*, void*)+0x52a>
c0015598:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559b:	40                   	inc    eax
c001559c:	8a 00                	mov    al,BYTE PTR [eax]
c001559e:	3c c7                	cmp    al,0xc7
c00155a0:	0f 85 68 01 00 00    	jne    c001570e <opcodeFault(regs*, void*)+0x52a>
c00155a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155af:	8d 50 01             	lea    edx,[eax+0x1]
c00155b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155b8:	8d 45 ba             	lea    eax,[ebp-0x46]
c00155bb:	50                   	push   eax
c00155bc:	8d 45 bb             	lea    eax,[ebp-0x45]
c00155bf:	50                   	push   eax
c00155c0:	8d 45 bc             	lea    eax,[ebp-0x44]
c00155c3:	50                   	push   eax
c00155c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155c7:	e8 52 47 00 00       	call   c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155d2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155d5:	83 f0 01             	xor    eax,0x1
c00155d8:	84 c0                	test   al,al
c00155da:	0f 84 2e 01 00 00    	je     c001570e <opcodeFault(regs*, void*)+0x52a>
c00155e0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00155e3:	3c 01                	cmp    al,0x1
c00155e5:	0f 85 23 01 00 00    	jne    c001570e <opcodeFault(regs*, void*)+0x52a>
c00155eb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155ee:	83 f0 01             	xor    eax,0x1
c00155f1:	84 c0                	test   al,al
c00155f3:	0f 84 15 01 00 00    	je     c001570e <opcodeFault(regs*, void*)+0x52a>
c00155f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155ff:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015602:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015609:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001560c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001560f:	89 c2                	mov    edx,eax
c0015611:	b8 00 00 00 00       	mov    eax,0x0
c0015616:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015619:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001561c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015622:	ba 00 00 00 00       	mov    edx,0x0
c0015627:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001562a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015633:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015636:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001563d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015640:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015643:	89 c2                	mov    edx,eax
c0015645:	b8 00 00 00 00       	mov    eax,0x0
c001564a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001564d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015656:	ba 00 00 00 00       	mov    edx,0x0
c001565b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001565e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015661:	e8 8e 88 00 00       	call   c001def4 <lockScheduler()>
c0015666:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015669:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	89 c1                	mov    ecx,eax
c0015670:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015673:	89 cb                	mov    ebx,ecx
c0015675:	89 d0                	mov    eax,edx
c0015677:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001567a:	89 c6                	mov    esi,eax
c001567c:	89 f0                	mov    eax,esi
c001567e:	09 d8                	or     eax,ebx
c0015680:	85 c0                	test   eax,eax
c0015682:	75 21                	jne    c00156a5 <opcodeFault(regs*, void*)+0x4c1>
c0015684:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015687:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001568a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001568d:	89 01                	mov    DWORD PTR [ecx],eax
c001568f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015695:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015698:	83 c8 40             	or     eax,0x40
c001569b:	89 c2                	mov    edx,eax
c001569d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156a3:	eb 3e                	jmp    c00156e3 <opcodeFault(regs*, void*)+0x4ff>
c00156a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ad:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156b0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156b3:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156bf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156c2:	89 d0                	mov    eax,edx
c00156c4:	31 d2                	xor    edx,edx
c00156c6:	89 c3                	mov    ebx,eax
c00156c8:	89 d6                	mov    esi,edx
c00156ca:	89 da                	mov    edx,ebx
c00156cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cf:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156d8:	83 e0 bf             	and    eax,0xffffffbf
c00156db:	89 c2                	mov    edx,eax
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156e3:	e8 0e 88 00 00       	call   c001def6 <unlockScheduler()>
c00156e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156ee:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156f1:	01 c2                	add    edx,eax
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156f9:	83 ec 0c             	sub    esp,0xc
c00156fc:	68 be b4 02 c0       	push   0xc002b4be
c0015701:	e8 bd d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015706:	83 c4 10             	add    esp,0x10
c0015709:	e9 d5 00 00 00       	jmp    c00157e3 <opcodeFault(regs*, void*)+0x5ff>
c001570e:	83 ec 0c             	sub    esp,0xc
c0015711:	68 d1 b4 02 c0       	push   0xc002b4d1
c0015716:	e8 a8 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001571b:	83 c4 10             	add    esp,0x10
c001571e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015721:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001572a:	c1 e0 04             	shl    eax,0x4
c001572d:	01 d0                	add    eax,edx
c001572f:	83 c0 03             	add    eax,0x3
c0015732:	8a 00                	mov    al,BYTE PTR [eax]
c0015734:	0f b6 d8             	movzx  ebx,al
c0015737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015740:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015743:	c1 e0 04             	shl    eax,0x4
c0015746:	01 d0                	add    eax,edx
c0015748:	83 c0 02             	add    eax,0x2
c001574b:	8a 00                	mov    al,BYTE PTR [eax]
c001574d:	0f b6 c8             	movzx  ecx,al
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015759:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001575c:	c1 e0 04             	shl    eax,0x4
c001575f:	01 d0                	add    eax,edx
c0015761:	40                   	inc    eax
c0015762:	8a 00                	mov    al,BYTE PTR [eax]
c0015764:	0f b6 d0             	movzx  edx,al
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015773:	c1 e0 04             	shl    eax,0x4
c0015776:	01 f0                	add    eax,esi
c0015778:	8a 00                	mov    al,BYTE PTR [eax]
c001577a:	0f b6 c0             	movzx  eax,al
c001577d:	83 ec 0c             	sub    esp,0xc
c0015780:	53                   	push   ebx
c0015781:	51                   	push   ecx
c0015782:	52                   	push   edx
c0015783:	50                   	push   eax
c0015784:	68 e4 b4 02 c0       	push   0xc002b4e4
c0015789:	e8 35 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001578e:	83 c4 20             	add    esp,0x20
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015797:	83 c0 03             	add    eax,0x3
c001579a:	8a 00                	mov    al,BYTE PTR [eax]
c001579c:	0f b6 d8             	movzx  ebx,al
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a5:	83 c0 02             	add    eax,0x2
c00157a8:	8a 00                	mov    al,BYTE PTR [eax]
c00157aa:	0f b6 c8             	movzx  ecx,al
c00157ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157b3:	40                   	inc    eax
c00157b4:	8a 00                	mov    al,BYTE PTR [eax]
c00157b6:	0f b6 d0             	movzx  edx,al
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157bf:	8a 00                	mov    al,BYTE PTR [eax]
c00157c1:	0f b6 c0             	movzx  eax,al
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	53                   	push   ebx
c00157c8:	51                   	push   ecx
c00157c9:	52                   	push   edx
c00157ca:	50                   	push   eax
c00157cb:	68 0c b5 02 c0       	push   0xc002b50c
c00157d0:	e8 ee d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00157d5:	83 c4 20             	add    esp,0x20
c00157d8:	83 ec 0c             	sub    esp,0xc
c00157db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157de:	e8 6b f4 ff ff       	call   c0014c4e <displayDebugInfo(regs*)>
c00157e3:	8d 65 f8             	lea    esp,[ebp-0x8]
c00157e6:	5b                   	pop    ebx
c00157e7:	5e                   	pop    esi
c00157e8:	5d                   	pop    ebp
c00157e9:	c3                   	ret    

c00157ea <displayProgramFault(char const*)>:
c00157ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157f8:	85 c0                	test   eax,eax
c00157fa:	74 15                	je     c0015811 <displayProgramFault(char const*)+0x27>
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	6a 04                	push   0x4
c0015801:	6a 0f                	push   0xf
c0015803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015807:	50                   	push   eax
c0015808:	e8 d7 b4 ff ff       	call   c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001580d:	83 c4 1c             	add    esp,0x1c
c0015810:	c3                   	ret    
c0015811:	c3                   	ret    

c0015812 <setupInterruptController()>:
c0015812:	55                   	push   ebp
c0015813:	89 e5                	mov    ebp,esp
c0015815:	53                   	push   ebx
c0015816:	83 ec 24             	sub    esp,0x24
c0015819:	b8 00 00 00 00       	mov    eax,0x0
c001581e:	85 c0                	test   eax,eax
c0015820:	0f 95 c0             	setne  al
c0015823:	84 c0                	test   al,al
c0015825:	74 5b                	je     c0015882 <setupInterruptController()+0x70>
c0015827:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015834:	e8 12 a0 ff ff       	call   c000f84b <malloc>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	89 c3                	mov    ebx,eax
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	53                   	push   ebx
c0015842:	e8 67 04 01 00       	call   c0025cae <APIC::APIC()>
c0015847:	83 c4 10             	add    esp,0x10
c001584a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001584d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015850:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015853:	8b 00                	mov    eax,DWORD PTR [eax]
c0015855:	83 c0 08             	add    eax,0x8
c0015858:	8b 00                	mov    eax,DWORD PTR [eax]
c001585a:	6a 00                	push   0x0
c001585c:	6a 00                	push   0x0
c001585e:	6a 00                	push   0x0
c0015860:	52                   	push   edx
c0015861:	ff d0                	call   eax
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001586b:	83 ec 08             	sub    esp,0x8
c001586e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015871:	50                   	push   eax
c0015872:	e8 79 e9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001587d:	e9 89 03 00 00       	jmp    c0015c0b <setupInterruptController()+0x3f9>
c0015882:	a0 40 13 03 c0       	mov    al,ds:0xc0031340
c0015887:	84 c0                	test   al,al
c0015889:	75 24                	jne    c00158af <setupInterruptController()+0x9d>
c001588b:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0015890:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015896:	83 e2 fe             	and    edx,0xfffffffe
c0015899:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001589f:	83 ec 0c             	sub    esp,0xc
c00158a2:	68 31 b5 02 c0       	push   0xc002b531
c00158a7:	e8 17 d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00158ac:	83 c4 10             	add    esp,0x10
c00158af:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00158b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00158ba:	83 e0 01             	and    eax,0x1
c00158bd:	84 c0                	test   al,al
c00158bf:	0f 95 c0             	setne  al
c00158c2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00158c5:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00158d2:	e8 74 9f ff ff       	call   c000f84b <malloc>
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	89 c3                	mov    ebx,eax
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	53                   	push   ebx
c00158e0:	e8 21 09 01 00       	call   c0026206 <PIC::PIC()>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158eb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f3:	83 c0 08             	add    eax,0x8
c00158f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f8:	6a 00                	push   0x0
c00158fa:	6a 00                	push   0x0
c00158fc:	6a 00                	push   0x0
c00158fe:	52                   	push   edx
c00158ff:	ff d0                	call   eax
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015908:	74 73                	je     c001597d <setupInterruptController()+0x16b>
c001590a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001590d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015910:	8b 00                	mov    eax,DWORD PTR [eax]
c0015912:	83 c0 0c             	add    eax,0xc
c0015915:	8b 00                	mov    eax,DWORD PTR [eax]
c0015917:	6a 00                	push   0x0
c0015919:	6a 00                	push   0x0
c001591b:	6a 00                	push   0x0
c001591d:	52                   	push   edx
c001591e:	ff d0                	call   eax
c0015920:	83 c4 10             	add    esp,0x10
c0015923:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015927:	74 15                	je     c001593e <setupInterruptController()+0x12c>
c0015929:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001592c:	8b 00                	mov    eax,DWORD PTR [eax]
c001592e:	83 c0 04             	add    eax,0x4
c0015931:	8b 00                	mov    eax,DWORD PTR [eax]
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015939:	ff d0                	call   eax
c001593b:	83 c4 10             	add    esp,0x10
c001593e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015945:	83 ec 0c             	sub    esp,0xc
c0015948:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001594b:	e8 fb 9e ff ff       	call   c000f84b <malloc>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	89 c3                	mov    ebx,eax
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	53                   	push   ebx
c0015959:	e8 50 03 01 00       	call   c0025cae <APIC::APIC()>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015964:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596a:	8b 00                	mov    eax,DWORD PTR [eax]
c001596c:	83 c0 08             	add    eax,0x8
c001596f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015971:	6a 00                	push   0x0
c0015973:	6a 00                	push   0x0
c0015975:	6a 00                	push   0x0
c0015977:	52                   	push   edx
c0015978:	ff d0                	call   eax
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0015982:	83 ec 08             	sub    esp,0x8
c0015985:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015988:	50                   	push   eax
c0015989:	e8 62 e8 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	c7 05 48 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb48,0x0
c001599b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599e:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a0:	83 c0 24             	add    eax,0x24
c00159a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a5:	6a 00                	push   0x0
c00159a7:	68 c5 51 01 c0       	push   0xc00151c5
c00159ac:	6a 00                	push   0x0
c00159ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b1:	ff d0                	call   eax
c00159b3:	83 c4 10             	add    esp,0x10
c00159b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bb:	83 c0 24             	add    eax,0x24
c00159be:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c0:	6a 00                	push   0x0
c00159c2:	68 c5 51 01 c0       	push   0xc00151c5
c00159c7:	6a 01                	push   0x1
c00159c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159cc:	ff d0                	call   eax
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d6:	83 c0 24             	add    eax,0x24
c00159d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159db:	6a 00                	push   0x0
c00159dd:	68 ab 4a 01 c0       	push   0xc0014aab
c00159e2:	6a 02                	push   0x2
c00159e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e7:	ff d0                	call   eax
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f1:	83 c0 24             	add    eax,0x24
c00159f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f6:	6a 00                	push   0x0
c00159f8:	68 c5 51 01 c0       	push   0xc00151c5
c00159fd:	6a 03                	push   0x3
c00159ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a02:	ff d0                	call   eax
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0c:	83 c0 24             	add    eax,0x24
c0015a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a11:	6a 00                	push   0x0
c0015a13:	68 c5 51 01 c0       	push   0xc00151c5
c0015a18:	6a 04                	push   0x4
c0015a1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1d:	ff d0                	call   eax
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	83 c0 24             	add    eax,0x24
c0015a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2c:	6a 00                	push   0x0
c0015a2e:	68 c5 51 01 c0       	push   0xc00151c5
c0015a33:	6a 05                	push   0x5
c0015a35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a38:	ff d0                	call   eax
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a42:	83 c0 24             	add    eax,0x24
c0015a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a47:	6a 00                	push   0x0
c0015a49:	68 e4 51 01 c0       	push   0xc00151e4
c0015a4e:	6a 06                	push   0x6
c0015a50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a53:	ff d0                	call   eax
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5d:	83 c0 24             	add    eax,0x24
c0015a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a62:	6a 00                	push   0x0
c0015a64:	68 dd 50 01 c0       	push   0xc00150dd
c0015a69:	6a 07                	push   0x7
c0015a6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6e:	ff d0                	call   eax
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	83 c0 24             	add    eax,0x24
c0015a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7d:	6a 00                	push   0x0
c0015a7f:	68 c6 48 01 c0       	push   0xc00148c6
c0015a84:	6a 08                	push   0x8
c0015a86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a89:	ff d0                	call   eax
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	83 c0 24             	add    eax,0x24
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	6a 00                	push   0x0
c0015a9a:	68 c5 51 01 c0       	push   0xc00151c5
c0015a9f:	6a 09                	push   0x9
c0015aa1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa4:	ff d0                	call   eax
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	83 c0 24             	add    eax,0x24
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	6a 00                	push   0x0
c0015ab5:	68 c5 51 01 c0       	push   0xc00151c5
c0015aba:	6a 0a                	push   0xa
c0015abc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abf:	ff d0                	call   eax
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac9:	83 c0 24             	add    eax,0x24
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	6a 00                	push   0x0
c0015ad0:	68 c5 51 01 c0       	push   0xc00151c5
c0015ad5:	6a 0b                	push   0xb
c0015ad7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ada:	ff d0                	call   eax
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	83 c0 24             	add    eax,0x24
c0015ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae9:	6a 00                	push   0x0
c0015aeb:	68 c5 51 01 c0       	push   0xc00151c5
c0015af0:	6a 0c                	push   0xc
c0015af2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af5:	ff d0                	call   eax
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aff:	83 c0 24             	add    eax,0x24
c0015b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b04:	6a 00                	push   0x0
c0015b06:	68 50 51 01 c0       	push   0xc0015150
c0015b0b:	6a 0d                	push   0xd
c0015b0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b10:	ff d0                	call   eax
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1a:	83 c0 24             	add    eax,0x24
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	6a 00                	push   0x0
c0015b21:	68 89 51 01 c0       	push   0xc0015189
c0015b26:	6a 0e                	push   0xe
c0015b28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2b:	ff d0                	call   eax
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b35:	83 c0 24             	add    eax,0x24
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	6a 00                	push   0x0
c0015b3c:	68 c5 51 01 c0       	push   0xc00151c5
c0015b41:	6a 0f                	push   0xf
c0015b43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b46:	ff d0                	call   eax
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b50:	83 c0 24             	add    eax,0x24
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	6a 00                	push   0x0
c0015b57:	68 c5 51 01 c0       	push   0xc00151c5
c0015b5c:	6a 10                	push   0x10
c0015b5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b61:	ff d0                	call   eax
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6b:	83 c0 24             	add    eax,0x24
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	6a 00                	push   0x0
c0015b72:	68 c5 51 01 c0       	push   0xc00151c5
c0015b77:	6a 11                	push   0x11
c0015b79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7c:	ff d0                	call   eax
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b86:	83 c0 24             	add    eax,0x24
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	6a 00                	push   0x0
c0015b8d:	68 c5 51 01 c0       	push   0xc00151c5
c0015b92:	6a 12                	push   0x12
c0015b94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b97:	ff d0                	call   eax
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba1:	83 c0 24             	add    eax,0x24
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	6a 00                	push   0x0
c0015ba8:	68 c5 51 01 c0       	push   0xc00151c5
c0015bad:	6a 13                	push   0x13
c0015baf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb2:	ff d0                	call   eax
c0015bb4:	83 c4 10             	add    esp,0x10
c0015bb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbc:	83 c0 24             	add    eax,0x24
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	6a 00                	push   0x0
c0015bc3:	68 c5 51 01 c0       	push   0xc00151c5
c0015bc8:	6a 14                	push   0x14
c0015bca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcd:	ff d0                	call   eax
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd7:	83 c0 24             	add    eax,0x24
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	6a 00                	push   0x0
c0015bde:	68 c5 51 01 c0       	push   0xc00151c5
c0015be3:	6a 1e                	push   0x1e
c0015be5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be8:	ff d0                	call   eax
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	83 c0 24             	add    eax,0x24
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	6a 00                	push   0x0
c0015bf9:	68 8a c8 01 c0       	push   0xc001c88a
c0015bfe:	6a 60                	push   0x60
c0015c00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c03:	ff d0                	call   eax
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c0e:	c9                   	leave  
c0015c0f:	c3                   	ret    

c0015c10 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c10:	55                   	push   ebp
c0015c11:	89 e5                	mov    ebp,esp
c0015c13:	83 ec 08             	sub    esp,0x8
c0015c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c19:	83 ec 0c             	sub    esp,0xc
c0015c1c:	50                   	push   eax
c0015c1d:	e8 ba e8 ff ff       	call   c00144dc <Device::getName()>
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	8a 00                	mov    al,BYTE PTR [eax]
c0015c27:	3c 41                	cmp    al,0x41
c0015c29:	0f 94 c0             	sete   al
c0015c2c:	84 c0                	test   al,al
c0015c2e:	74 28                	je     c0015c58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c30:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c34:	7f 12                	jg     c0015c48 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c39:	05 00 dc 02 c0       	add    eax,0xc002dc00
c0015c3e:	8a 00                	mov    al,BYTE PTR [eax]
c0015c40:	0f b6 c0             	movzx  eax,al
c0015c43:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c46:	eb 10                	jmp    c0015c58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	68 20 b2 02 c0       	push   0xc002b220
c0015c50:	e8 02 4a 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c5b:	c9                   	leave  
c0015c5c:	c3                   	ret    
c0015c5d:	90                   	nop

c0015c5e <startGUI(void*)>:
c0015c5e:	55                   	push   ebp
c0015c5f:	89 e5                	mov    ebp,esp
c0015c61:	53                   	push   ebx
c0015c62:	83 ec 04             	sub    esp,0x4
c0015c65:	e8 8c 82 00 00       	call   c001def6 <unlockScheduler()>
c0015c6a:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c0015c70:	83 ec 08             	sub    esp,0x8
c0015c73:	6a 01                	push   0x1
c0015c75:	68 94 b5 02 c0       	push   0xc002b594
c0015c7a:	e8 ce 7b 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	83 ec 08             	sub    esp,0x8
c0015c85:	53                   	push   ebx
c0015c86:	50                   	push   eax
c0015c87:	e8 f5 7d 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c0015c95:	83 ec 08             	sub    esp,0x8
c0015c98:	6a 01                	push   0x1
c0015c9a:	68 ae b5 02 c0       	push   0xc002b5ae
c0015c9f:	e8 a9 7b 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	83 ec 08             	sub    esp,0x8
c0015caa:	53                   	push   ebx
c0015cab:	50                   	push   eax
c0015cac:	e8 d0 7d 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	90                   	nop
c0015cb5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cb8:	c9                   	leave  
c0015cb9:	c3                   	ret    

c0015cba <startGUIVESA(void*)>:
c0015cba:	55                   	push   ebp
c0015cbb:	89 e5                	mov    ebp,esp
c0015cbd:	53                   	push   ebx
c0015cbe:	83 ec 04             	sub    esp,0x4
c0015cc1:	e8 30 82 00 00       	call   c001def6 <unlockScheduler()>
c0015cc6:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c0015ccc:	83 ec 08             	sub    esp,0x8
c0015ccf:	6a 01                	push   0x1
c0015cd1:	68 c8 b5 02 c0       	push   0xc002b5c8
c0015cd6:	e8 72 7b 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c0015cdb:	83 c4 10             	add    esp,0x10
c0015cde:	83 ec 08             	sub    esp,0x8
c0015ce1:	53                   	push   ebx
c0015ce2:	50                   	push   eax
c0015ce3:	e8 99 7d 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c0015ce8:	83 c4 10             	add    esp,0x10
c0015ceb:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c0015cf1:	83 ec 08             	sub    esp,0x8
c0015cf4:	6a 01                	push   0x1
c0015cf6:	68 ae b5 02 c0       	push   0xc002b5ae
c0015cfb:	e8 4d 7b 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	83 ec 08             	sub    esp,0x8
c0015d06:	53                   	push   ebx
c0015d07:	50                   	push   eax
c0015d08:	e8 74 7d 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	90                   	nop
c0015d11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d14:	c9                   	leave  
c0015d15:	c3                   	ret    

c0015d16 <sendKeyToTerminal(unsigned char)>:
c0015d16:	55                   	push   ebp
c0015d17:	89 e5                	mov    ebp,esp
c0015d19:	83 ec 28             	sub    esp,0x28
c0015d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d22:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015d27:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d2b:	83 ec 08             	sub    esp,0x8
c0015d2e:	52                   	push   edx
c0015d2f:	50                   	push   eax
c0015d30:	e8 89 b4 ff ff       	call   c00111be <VgaText::receiveKey(unsigned char)>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d3c:	75 41                	jne    c0015d7f <sendKeyToTerminal(unsigned char)+0x69>
c0015d3e:	e8 d8 81 00 00       	call   c001df1b <lockStuff()>
c0015d43:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c0015d48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d4b:	c7 05 60 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb60,0x0
c0015d55:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d59:	74 1f                	je     c0015d7a <sendKeyToTerminal(unsigned char)+0x64>
c0015d5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d6a:	83 ec 0c             	sub    esp,0xc
c0015d6d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d70:	e8 6a 88 00 00       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c0015d75:	83 c4 10             	add    esp,0x10
c0015d78:	eb db                	jmp    c0015d55 <sendKeyToTerminal(unsigned char)+0x3f>
c0015d7a:	e8 70 85 00 00       	call   c001e2ef <unlockStuff()>
c0015d7f:	90                   	nop
c0015d80:	c9                   	leave  
c0015d81:	c3                   	ret    

c0015d82 <sendKeyboardToken(KeyboardToken)>:
c0015d82:	55                   	push   ebp
c0015d83:	89 e5                	mov    ebp,esp
c0015d85:	83 ec 18             	sub    esp,0x18
c0015d88:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8e:	0f b7 c0             	movzx  eax,ax
c0015d91:	83 f2 01             	xor    edx,0x1
c0015d94:	88 90 80 eb 02 c0    	mov    BYTE PTR [eax-0x3ffd1480],dl
c0015d9a:	a1 68 eb 02 c0       	mov    eax,ds:0xc002eb68
c0015d9f:	85 c0                	test   eax,eax
c0015da1:	74 24                	je     c0015dc7 <sendKeyboardToken(KeyboardToken)+0x45>
c0015da3:	8b 0d 68 eb 02 c0    	mov    ecx,DWORD PTR ds:0xc002eb68
c0015da9:	83 ec 04             	sub    esp,0x4
c0015dac:	68 80 eb 02 c0       	push   0xc002eb80
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	89 e2                	mov    edx,esp
c0015db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db9:	89 02                	mov    DWORD PTR [edx],eax
c0015dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dbe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015dc2:	ff d1                	call   ecx
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dca:	66 3d 03 02          	cmp    ax,0x203
c0015dce:	75 07                	jne    c0015dd7 <sendKeyboardToken(KeyboardToken)+0x55>
c0015dd0:	a0 80 ec 02 c0       	mov    al,ds:0xc002ec80
c0015dd5:	84 c0                	test   al,al
c0015dd7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ddb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015dde:	a0 88 ef 02 c0       	mov    al,ds:0xc002ef88
c0015de3:	38 c2                	cmp    dl,al
c0015de5:	74 1c                	je     c0015e03 <sendKeyboardToken(KeyboardToken)+0x81>
c0015de7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015dea:	a2 88 ef 02 c0       	mov    ds:0xc002ef88,al
c0015def:	a0 88 ef 02 c0       	mov    al,ds:0xc002ef88
c0015df4:	0f b6 c0             	movzx  eax,al
c0015df7:	83 ec 0c             	sub    esp,0xc
c0015dfa:	50                   	push   eax
c0015dfb:	e8 44 a7 ff ff       	call   c0010544 <setTerminalScrollLock(bool)>
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e06:	84 c0                	test   al,al
c0015e08:	0f 84 ae 00 00 00    	je     c0015ebc <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e11:	66 3d 10 03          	cmp    ax,0x310
c0015e15:	75 06                	jne    c0015e1d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e17:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e20:	66 3d 11 03          	cmp    ax,0x311
c0015e24:	75 06                	jne    c0015e2c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e26:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2f:	66 3d 12 03          	cmp    ax,0x312
c0015e33:	75 06                	jne    c0015e3b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015e35:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3e:	66 3d 13 03          	cmp    ax,0x313
c0015e42:	75 06                	jne    c0015e4a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015e44:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4d:	66 3d 14 03          	cmp    ax,0x314
c0015e51:	75 06                	jne    c0015e59 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e53:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5c:	66 3d 15 03          	cmp    ax,0x315
c0015e60:	75 06                	jne    c0015e68 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e62:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6b:	66 3d 16 03          	cmp    ax,0x316
c0015e6f:	75 06                	jne    c0015e77 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e71:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7a:	66 3d 17 03          	cmp    ax,0x317
c0015e7e:	75 06                	jne    c0015e86 <sendKeyboardToken(KeyboardToken)+0x104>
c0015e80:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e89:	66 3d 18 03          	cmp    ax,0x318
c0015e8d:	75 06                	jne    c0015e95 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e8f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e98:	66 3d 19 03          	cmp    ax,0x319
c0015e9c:	75 06                	jne    c0015ea4 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e9e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea7:	66 3d 1a 03          	cmp    ax,0x31a
c0015eab:	0f 85 c9 00 00 00    	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015eb1:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015eb7:	e9 be 00 00 00       	jmp    c0015f7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebf:	66 3d 10 03          	cmp    ax,0x310
c0015ec3:	75 0a                	jne    c0015ecf <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ec5:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ecb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 3d 11 03          	cmp    ax,0x311
c0015ed6:	75 0a                	jne    c0015ee2 <sendKeyboardToken(KeyboardToken)+0x160>
c0015ed8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ede:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee5:	66 3d 12 03          	cmp    ax,0x312
c0015ee9:	75 0a                	jne    c0015ef5 <sendKeyboardToken(KeyboardToken)+0x173>
c0015eeb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ef1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef8:	66 3d 13 03          	cmp    ax,0x313
c0015efc:	75 0a                	jne    c0015f08 <sendKeyboardToken(KeyboardToken)+0x186>
c0015efe:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0b:	66 3d 14 03          	cmp    ax,0x314
c0015f0f:	75 0a                	jne    c0015f1b <sendKeyboardToken(KeyboardToken)+0x199>
c0015f11:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f17:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 15 03          	cmp    ax,0x315
c0015f22:	75 0a                	jne    c0015f2e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f24:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f31:	66 3d 16 03          	cmp    ax,0x316
c0015f35:	75 0a                	jne    c0015f41 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015f37:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015f3d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f44:	66 3d 17 03          	cmp    ax,0x317
c0015f48:	75 0a                	jne    c0015f54 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f4a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f50:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f57:	66 3d 18 03          	cmp    ax,0x318
c0015f5b:	75 0a                	jne    c0015f67 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f5d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6a:	66 3d 19 03          	cmp    ax,0x319
c0015f6e:	75 0a                	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f70:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f76:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7d:	66 3d 00 02          	cmp    ax,0x200
c0015f81:	75 2c                	jne    c0015faf <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f83:	a0 80 ef 02 c0       	mov    al,ds:0xc002ef80
c0015f88:	83 f0 01             	xor    eax,0x1
c0015f8b:	84 c0                	test   al,al
c0015f8d:	74 20                	je     c0015faf <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f8f:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015f94:	6a 01                	push   0x1
c0015f96:	6a 00                	push   0x0
c0015f98:	68 5e 5c 01 c0       	push   0xc0015c5e
c0015f9d:	50                   	push   eax
c0015f9e:	e8 83 80 00 00       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	c6 05 80 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef80,0x1
c0015fad:	eb 33                	jmp    c0015fe2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb2:	66 3d 01 02          	cmp    ax,0x201
c0015fb6:	75 2a                	jne    c0015fe2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fb8:	a0 80 ef 02 c0       	mov    al,ds:0xc002ef80
c0015fbd:	83 f0 01             	xor    eax,0x1
c0015fc0:	84 c0                	test   al,al
c0015fc2:	74 1e                	je     c0015fe2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fc4:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0015fc9:	6a 01                	push   0x1
c0015fcb:	6a 00                	push   0x0
c0015fcd:	68 ba 5c 01 c0       	push   0xc0015cba
c0015fd2:	50                   	push   eax
c0015fd3:	e8 4e 80 00 00       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c0015fd8:	83 c4 10             	add    esp,0x10
c0015fdb:	c6 05 80 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef80,0x1
c0015fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe5:	66 3d 1d 03          	cmp    ax,0x31d
c0015fe9:	75 06                	jne    c0015ff1 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015feb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff4:	66 3d 1c 03          	cmp    ax,0x31c
c0015ff8:	75 06                	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015ffa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 1b 03          	cmp    ax,0x31b
c0016007:	75 06                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x28d>
c0016009:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 1e 03          	cmp    ax,0x31e
c0016016:	75 06                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0x29c>
c0016018:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 1f 03          	cmp    ax,0x31f
c0016025:	75 06                	jne    c001602d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016027:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016030:	66 3d 1a 03          	cmp    ax,0x31a
c0016034:	75 06                	jne    c001603c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016036:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001603c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016040:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016043:	83 f0 01             	xor    eax,0x1
c0016046:	84 c0                	test   al,al
c0016048:	74 77                	je     c00160c1 <sendKeyboardToken(KeyboardToken)+0x33f>
c001604a:	a0 81 ec 02 c0       	mov    al,ds:0xc002ec81
c001604f:	84 c0                	test   al,al
c0016051:	74 41                	je     c0016094 <sendKeyboardToken(KeyboardToken)+0x312>
c0016053:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016057:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001605b:	74 2b                	je     c0016088 <sendKeyboardToken(KeyboardToken)+0x306>
c001605d:	8b 15 84 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef84
c0016063:	89 d0                	mov    eax,edx
c0016065:	c1 e0 02             	shl    eax,0x2
c0016068:	01 d0                	add    eax,edx
c001606a:	01 c0                	add    eax,eax
c001606c:	a3 84 ef 02 c0       	mov    ds:0xc002ef84,eax
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	0f b7 c0             	movzx  eax,ax
c0016077:	8d 50 d0             	lea    edx,[eax-0x30]
c001607a:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c001607f:	01 d0                	add    eax,edx
c0016081:	a3 84 ef 02 c0       	mov    ds:0xc002ef84,eax
c0016086:	eb 6d                	jmp    c00160f5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016088:	c7 05 84 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef84,0x0
c0016092:	eb 61                	jmp    c00160f5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016094:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c0016099:	85 c0                	test   eax,eax
c001609b:	74 18                	je     c00160b5 <sendKeyboardToken(KeyboardToken)+0x333>
c001609d:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c00160a2:	0f b6 c0             	movzx  eax,al
c00160a5:	83 ec 0c             	sub    esp,0xc
c00160a8:	50                   	push   eax
c00160a9:	e8 68 fc ff ff       	call   c0015d16 <sendKeyToTerminal(unsigned char)>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160b5:	c7 05 84 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef84,0x0
c00160bf:	eb 34                	jmp    c00160f5 <sendKeyboardToken(KeyboardToken)+0x373>
c00160c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c4:	66 3d 01 01          	cmp    ax,0x101
c00160c8:	75 2b                	jne    c00160f5 <sendKeyboardToken(KeyboardToken)+0x373>
c00160ca:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c00160cf:	85 c0                	test   eax,eax
c00160d1:	74 18                	je     c00160eb <sendKeyboardToken(KeyboardToken)+0x369>
c00160d3:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c00160d8:	0f b6 c0             	movzx  eax,al
c00160db:	83 ec 0c             	sub    esp,0xc
c00160de:	50                   	push   eax
c00160df:	e8 32 fc ff ff       	call   c0015d16 <sendKeyToTerminal(unsigned char)>
c00160e4:	83 c4 10             	add    esp,0x10
c00160e7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160eb:	c7 05 84 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef84,0x0
c00160f5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160f8:	83 f0 01             	xor    eax,0x1
c00160fb:	84 c0                	test   al,al
c00160fd:	74 4c                	je     c001614b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016102:	83 f0 01             	xor    eax,0x1
c0016105:	84 c0                	test   al,al
c0016107:	74 42                	je     c001614b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016109:	a0 80 ec 02 c0       	mov    al,ds:0xc002ec80
c001610e:	83 f0 01             	xor    eax,0x1
c0016111:	84 c0                	test   al,al
c0016113:	74 36                	je     c001614b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016118:	66 83 f8 1f          	cmp    ax,0x1f
c001611c:	76 09                	jbe    c0016127 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001611e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016121:	66 83 f8 7e          	cmp    ax,0x7e
c0016125:	76 12                	jbe    c0016139 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612a:	66 83 f8 0a          	cmp    ax,0xa
c001612e:	74 09                	je     c0016139 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016133:	66 83 f8 08          	cmp    ax,0x8
c0016137:	75 12                	jne    c001614b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613c:	0f b6 c0             	movzx  eax,al
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	50                   	push   eax
c0016143:	e8 ce fb ff ff       	call   c0015d16 <sendKeyToTerminal(unsigned char)>
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001614e:	83 f0 01             	xor    eax,0x1
c0016151:	84 c0                	test   al,al
c0016153:	74 4f                	je     c00161a4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016155:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016158:	83 f0 01             	xor    eax,0x1
c001615b:	84 c0                	test   al,al
c001615d:	74 45                	je     c00161a4 <sendKeyboardToken(KeyboardToken)+0x422>
c001615f:	a0 80 ec 02 c0       	mov    al,ds:0xc002ec80
c0016164:	84 c0                	test   al,al
c0016166:	74 3c                	je     c00161a4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616b:	66 83 f8 3f          	cmp    ax,0x3f
c001616f:	76 33                	jbe    c00161a4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016174:	66 83 f8 7f          	cmp    ax,0x7f
c0016178:	77 2a                	ja     c00161a4 <sendKeyboardToken(KeyboardToken)+0x422>
c001617a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617d:	88 c2                	mov    dl,al
c001617f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016182:	66 83 f8 5f          	cmp    ax,0x5f
c0016186:	76 04                	jbe    c001618c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016188:	b0 20                	mov    al,0x20
c001618a:	eb 02                	jmp    c001618e <sendKeyboardToken(KeyboardToken)+0x40c>
c001618c:	b0 00                	mov    al,0x0
c001618e:	29 c2                	sub    edx,eax
c0016190:	88 d0                	mov    al,dl
c0016192:	83 e8 40             	sub    eax,0x40
c0016195:	0f b6 c0             	movzx  eax,al
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	50                   	push   eax
c001619c:	e8 75 fb ff ff       	call   c0015d16 <sendKeyToTerminal(unsigned char)>
c00161a1:	83 c4 10             	add    esp,0x10
c00161a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a7:	66 3d 00 03          	cmp    ax,0x300
c00161ab:	75 0f                	jne    c00161bc <sendKeyboardToken(KeyboardToken)+0x43a>
c00161ad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161b0:	83 f0 01             	xor    eax,0x1
c00161b3:	84 c0                	test   al,al
c00161b5:	74 05                	je     c00161bc <sendKeyboardToken(KeyboardToken)+0x43a>
c00161b7:	e8 00 ab ff ff       	call   c0010cbc <doTerminalCycle()>
c00161bc:	90                   	nop
c00161bd:	c9                   	leave  
c00161be:	c3                   	ret    

c00161bf <clearInternalKeybuffer(VgaText*)>:
c00161bf:	55                   	push   ebp
c00161c0:	89 e5                	mov    ebp,esp
c00161c2:	83 ec 08             	sub    esp,0x8
c00161c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c8:	05 98 01 00 00       	add    eax,0x198
c00161cd:	83 ec 0c             	sub    esp,0xc
c00161d0:	50                   	push   eax
c00161d1:	e8 c6 a5 fe ff       	call   c000079c <strlen>
c00161d6:	83 c4 10             	add    esp,0x10
c00161d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161dc:	81 c2 98 01 00 00    	add    edx,0x198
c00161e2:	83 ec 04             	sub    esp,0x4
c00161e5:	50                   	push   eax
c00161e6:	6a 00                	push   0x0
c00161e8:	52                   	push   edx
c00161e9:	e8 92 a5 fe ff       	call   c0000780 <memset>
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	90                   	nop
c00161f2:	c9                   	leave  
c00161f3:	c3                   	ret    

c00161f4 <readKeyboard(VgaText*, char*, unsigned long)>:
c00161f4:	55                   	push   ebp
c00161f5:	89 e5                	mov    ebp,esp
c00161f7:	83 ec 18             	sub    esp,0x18
c00161fa:	a1 68 eb 02 c0       	mov    eax,ds:0xc002eb68
c00161ff:	85 c0                	test   eax,eax
c0016201:	74 2a                	je     c001622d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016203:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016209:	8b 0d 68 eb 02 c0    	mov    ecx,DWORD PTR ds:0xc002eb68
c001620f:	83 ec 04             	sub    esp,0x4
c0016212:	68 80 eb 02 c0       	push   0xc002eb80
c0016217:	83 ec 08             	sub    esp,0x8
c001621a:	89 e2                	mov    edx,esp
c001621c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001621f:	89 02                	mov    DWORD PTR [edx],eax
c0016221:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016224:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016228:	ff d1                	call   ecx
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	83 ec 0c             	sub    esp,0xc
c0016230:	68 e3 b5 02 c0       	push   0xc002b5e3
c0016235:	e8 89 cb ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	fb                   	sti    
c001623e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016249:	0f 84 8a 00 00 00    	je     c00162d9 <readKeyboard(VgaText*, char*, unsigned long)+0xe5>
c001624f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016252:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016258:	84 c0                	test   al,al
c001625a:	75 11                	jne    c001626d <readKeyboard(VgaText*, char*, unsigned long)+0x79>
c001625c:	e8 93 7c 00 00       	call   c001def4 <lockScheduler()>
c0016261:	e8 04 80 00 00       	call   c001e26a <schedule()>
c0016266:	e8 8b 7c 00 00       	call   c001def6 <unlockScheduler()>
c001626b:	eb e2                	jmp    c001624f <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001626d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016270:	8d 50 01             	lea    edx,[eax+0x1]
c0016273:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016276:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016279:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001627f:	88 10                	mov    BYTE PTR [eax],dl
c0016281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016284:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001628a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001628d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016290:	05 98 01 00 00       	add    eax,0x198
c0016295:	83 ec 0c             	sub    esp,0xc
c0016298:	50                   	push   eax
c0016299:	e8 fe a4 fe ff       	call   c000079c <strlen>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162a4:	81 c2 98 01 00 00    	add    edx,0x198
c00162aa:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162b0:	81 c2 98 01 00 00    	add    edx,0x198
c00162b6:	83 ec 04             	sub    esp,0x4
c00162b9:	50                   	push   eax
c00162ba:	51                   	push   ecx
c00162bb:	52                   	push   edx
c00162bc:	e8 c3 a3 fe ff       	call   c0000684 <memmove>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00162c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00162ca:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00162ce:	0f 85 71 ff ff ff    	jne    c0016245 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00162d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162d7:	eb 03                	jmp    c00162dc <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c00162d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162dc:	c9                   	leave  
c00162dd:	c3                   	ret    

c00162de <Keyboard::Keyboard(char const*)>:
c00162de:	83 ec 0c             	sub    esp,0xc
c00162e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e5:	83 ec 08             	sub    esp,0x8
c00162e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ec:	50                   	push   eax
c00162ed:	e8 ee e0 ff ff       	call   c00143e0 <Device::Device(char const*)>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00162fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fe:	89 10                	mov    DWORD PTR [eax],edx
c0016300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016304:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001630e:	c6 05 64 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb64,0x1
c0016315:	90                   	nop
c0016316:	83 c4 0c             	add    esp,0xc
c0016319:	c3                   	ret    

c001631a <Keyboard::~Keyboard()>:
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0016322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016326:	89 10                	mov    DWORD PTR [eax],edx
c0016328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	50                   	push   eax
c0016330:	e8 8d dd ff ff       	call   c00140c2 <Device::~Device()>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	90                   	nop
c0016339:	83 c4 0c             	add    esp,0xc
c001633c:	c3                   	ret    
c001633d:	90                   	nop

c001633e <Keyboard::~Keyboard()>:
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016348:	e8 cd ff ff ff       	call   c001631a <Keyboard::~Keyboard()>
c001634d:	83 c4 10             	add    esp,0x10
c0016350:	83 ec 08             	sub    esp,0x8
c0016353:	68 5c 01 00 00       	push   0x15c
c0016358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635c:	e8 82 c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	c3                   	ret    

c0016368 <LogicalDisk::close(int, int, void*)>:
c0016368:	83 c8 ff             	or     eax,0xffffffff
c001636b:	c3                   	ret    

c001636c <LogicalDisk::~LogicalDisk()>:
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	ba b4 b6 02 c0       	mov    edx,0xc002b6b4
c0016374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016378:	89 10                	mov    DWORD PTR [eax],edx
c001637a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	50                   	push   eax
c0016382:	e8 3b dd ff ff       	call   c00140c2 <Device::~Device()>
c0016387:	83 c4 10             	add    esp,0x10
c001638a:	90                   	nop
c001638b:	83 c4 0c             	add    esp,0xc
c001638e:	c3                   	ret    
c001638f:	90                   	nop

c0016390 <LogicalDisk::~LogicalDisk()>:
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	83 ec 0c             	sub    esp,0xc
c0016396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001639a:	e8 cd ff ff ff       	call   c001636c <LogicalDisk::~LogicalDisk()>
c001639f:	83 c4 10             	add    esp,0x10
c00163a2:	83 ec 08             	sub    esp,0x8
c00163a5:	68 74 01 00 00       	push   0x174
c00163aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ae:	e8 30 c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	83 c4 0c             	add    esp,0xc
c00163b9:	c3                   	ret    

c00163ba <LogicalDisk::open(int, int, void*)>:
c00163ba:	83 ec 18             	sub    esp,0x18
c00163bd:	68 30 b6 02 c0       	push   0xc002b630
c00163c2:	e8 90 42 00 00       	call   c001a657 <Krnl::panic(char const*)>
c00163c7:	83 c8 ff             	or     eax,0xffffffff
c00163ca:	83 c4 1c             	add    esp,0x1c
c00163cd:	c3                   	ret    

c00163ce <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00163ce:	53                   	push   ebx
c00163cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00163d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163db:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00163e1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00163e7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00163ed:	77 10                	ja     c00163ff <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00163ef:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00163f5:	89 d3                	mov    ebx,edx
c00163f7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00163fd:	72 05                	jb     c0016404 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00163ff:	83 c8 ff             	or     eax,0xffffffff
c0016402:	89 c2                	mov    edx,eax
c0016404:	5b                   	pop    ebx
c0016405:	c3                   	ret    

c0016406 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016406:	56                   	push   esi
c0016407:	83 c8 ff             	or     eax,0xffffffff
c001640a:	53                   	push   ebx
c001640b:	89 c2                	mov    edx,eax
c001640d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016411:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016415:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016419:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001641f:	77 27                	ja     c0016448 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016421:	89 d8                	mov    eax,ebx
c0016423:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016429:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001642f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016434:	89 c2                	mov    edx,eax
c0016436:	73 10                	jae    c0016448 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016438:	89 c8                	mov    eax,ecx
c001643a:	89 da                	mov    edx,ebx
c001643c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016442:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016448:	5b                   	pop    ebx
c0016449:	5e                   	pop    esi
c001644a:	c3                   	ret    
c001644b:	90                   	nop

c001644c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001644c:	83 ec 1c             	sub    esp,0x1c
c001644f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016453:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001645b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001645f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016463:	89 04 24             	mov    DWORD PTR [esp],eax
c0016466:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001646a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001646e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016472:	83 ec 08             	sub    esp,0x8
c0016475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016479:	50                   	push   eax
c001647a:	e8 61 df ff ff       	call   c00143e0 <Device::Device(char const*)>
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	ba b4 b6 02 c0       	mov    edx,0xc002b6b4
c0016487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001648b:	89 10                	mov    DWORD PTR [eax],edx
c001648d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016491:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001649c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164a7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164bd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00164c3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00164c9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00164d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164d4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00164da:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00164e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164e8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00164ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00164fc:	90                   	nop
c00164fd:	83 c4 1c             	add    esp,0x1c
c0016500:	c3                   	ret    
c0016501:	90                   	nop

c0016502 <LogicalDisk::assignDriveLetter()>:
c0016502:	55                   	push   ebp
c0016503:	57                   	push   edi
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	83 ec 14             	sub    esp,0x14
c0016509:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650d:	8b 3d a0 ef 02 c0    	mov    edi,DWORD PTR ds:0xc002efa0
c0016513:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016519:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001651d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016523:	8b 3d a4 ef 02 c0    	mov    edi,DWORD PTR ds:0xc002efa4
c0016529:	3c 01                	cmp    al,0x1
c001652b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001652f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016533:	19 c0                	sbb    eax,eax
c0016535:	83 e0 02             	and    eax,0x2
c0016538:	83 c0 41             	add    eax,0x41
c001653b:	0f be e8             	movsx  ebp,al
c001653e:	3c 43                	cmp    al,0x43
c0016540:	75 10                	jne    c0016552 <LogicalDisk::assignDriveLetter()+0x50>
c0016542:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016549:	75 5d                	jne    c00165a8 <LogicalDisk::assignDriveLetter()+0xa6>
c001654b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016550:	75 56                	jne    c00165a8 <LogicalDisk::assignDriveLetter()+0xa6>
c0016552:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016555:	ba 01 00 00 00       	mov    edx,0x1
c001655a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001655e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016562:	d3 e2                	shl    edx,cl
c0016564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016568:	89 d7                	mov    edi,edx
c001656a:	89 d6                	mov    esi,edx
c001656c:	c1 ff 1f             	sar    edi,0x1f
c001656f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016573:	21 f9                	and    ecx,edi
c0016575:	09 d1                	or     ecx,edx
c0016577:	75 2f                	jne    c00165a8 <LogicalDisk::assignDriveLetter()+0xa6>
c0016579:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001657d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016581:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016587:	09 f2                	or     edx,esi
c0016589:	89 15 a0 ef 02 c0    	mov    DWORD PTR ds:0xc002efa0,edx
c001658f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016593:	09 fa                	or     edx,edi
c0016595:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016599:	89 15 a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,edx
c001659f:	89 1c bd c0 ef 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1040],ebx
c00165a6:	eb 08                	jmp    c00165b0 <LogicalDisk::assignDriveLetter()+0xae>
c00165a8:	45                   	inc    ebp
c00165a9:	40                   	inc    eax
c00165aa:	3c 5b                	cmp    al,0x5b
c00165ac:	75 90                	jne    c001653e <LogicalDisk::assignDriveLetter()+0x3c>
c00165ae:	31 c0                	xor    eax,eax
c00165b0:	83 c4 14             	add    esp,0x14
c00165b3:	5b                   	pop    ebx
c00165b4:	5e                   	pop    esi
c00165b5:	5f                   	pop    edi
c00165b6:	5d                   	pop    ebp
c00165b7:	c3                   	ret    

c00165b8 <LogicalDisk::mount()>:
c00165b8:	56                   	push   esi
c00165b9:	53                   	push   ebx
c00165ba:	51                   	push   ecx
c00165bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165bf:	8b 1d 34 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb34
c00165c5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00165cf:	85 db                	test   ebx,ebx
c00165d1:	74 50                	je     c0016623 <LogicalDisk::mount()+0x6b>
c00165d3:	e8 07 79 00 00       	call   c001dedf <getIRQNestingLevel()>
c00165d8:	52                   	push   edx
c00165d9:	52                   	push   edx
c00165da:	50                   	push   eax
c00165db:	68 54 b6 02 c0       	push   0xc002b654
c00165e0:	e8 de c7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00165e5:	83 c4 0c             	add    esp,0xc
c00165e8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00165ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00165f1:	83 e8 41             	sub    eax,0x41
c00165f4:	50                   	push   eax
c00165f5:	56                   	push   esi
c00165f6:	53                   	push   ebx
c00165f7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165fa:	83 c4 10             	add    esp,0x10
c00165fd:	84 c0                	test   al,al
c00165ff:	74 08                	je     c0016609 <LogicalDisk::mount()+0x51>
c0016601:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016607:	eb 1c                	jmp    c0016625 <LogicalDisk::mount()+0x6d>
c0016609:	e8 d1 78 00 00       	call   c001dedf <getIRQNestingLevel()>
c001660e:	51                   	push   ecx
c001660f:	51                   	push   ecx
c0016610:	50                   	push   eax
c0016611:	68 6f b6 02 c0       	push   0xc002b66f
c0016616:	e8 a8 c7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001661b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	eb ac                	jmp    c00165cf <LogicalDisk::mount()+0x17>
c0016623:	31 c0                	xor    eax,eax
c0016625:	5a                   	pop    edx
c0016626:	5b                   	pop    ebx
c0016627:	5e                   	pop    esi
c0016628:	c3                   	ret    
c0016629:	90                   	nop

c001662a <LogicalDisk::unmount()>:
c001662a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001662e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016638:	c3                   	ret    
c0016639:	90                   	nop

c001663a <LogicalDisk::eject()>:
c001663a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001663e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016644:	8b 10                	mov    edx,DWORD PTR [eax]
c0016646:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001664a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001664d:	90                   	nop

c001664e <LogicalDisk::unassignDriveLetter()>:
c001664e:	57                   	push   edi
c001664f:	56                   	push   esi
c0016650:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016654:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001665b:	84 c9                	test   cl,cl
c001665d:	75 0f                	jne    c001666e <LogicalDisk::unassignDriveLetter()+0x20>
c001665f:	c7 44 24 0c 8a b6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b68a
c0016667:	5e                   	pop    esi
c0016668:	5f                   	pop    edi
c0016669:	e9 e9 3f 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c001666e:	83 e9 41             	sub    ecx,0x41
c0016671:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016678:	b8 01 00 00 00       	mov    eax,0x1
c001667d:	c7 04 8d c0 ef 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1040],0x0
c0016688:	d3 e0                	shl    eax,cl
c001668a:	89 c7                	mov    edi,eax
c001668c:	f7 d0                	not    eax
c001668e:	c1 ff 1f             	sar    edi,0x1f
c0016691:	21 05 a0 ef 02 c0    	and    DWORD PTR ds:0xc002efa0,eax
c0016697:	89 fe                	mov    esi,edi
c0016699:	f7 d6                	not    esi
c001669b:	21 35 a4 ef 02 c0    	and    DWORD PTR ds:0xc002efa4,esi
c00166a1:	5e                   	pop    esi
c00166a2:	5f                   	pop    edi
c00166a3:	c3                   	ret    

c00166a4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166a4:	57                   	push   edi
c00166a5:	56                   	push   esi
c00166a6:	53                   	push   ebx
c00166a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166bd:	77 41                	ja     c0016700 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166bf:	99                   	cdq    
c00166c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166c6:	01 c8                	add    eax,ecx
c00166c8:	11 da                	adc    edx,ebx
c00166ca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166d0:	19 d7                	sbb    edi,edx
c00166d2:	72 33                	jb     c0016707 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00166d4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166da:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166e4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166e8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166f8:	5b                   	pop    ebx
c00166f9:	5e                   	pop    esi
c00166fa:	5f                   	pop    edi
c00166fb:	e9 bc 0a 00 00       	jmp    c00171bc <VCache::read(unsigned long long, int, void*)>
c0016700:	b8 05 00 00 00       	mov    eax,0x5
c0016705:	eb 05                	jmp    c001670c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016707:	b8 07 00 00 00       	mov    eax,0x7
c001670c:	5b                   	pop    ebx
c001670d:	5e                   	pop    esi
c001670e:	5f                   	pop    edi
c001670f:	c3                   	ret    

c0016710 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016710:	57                   	push   edi
c0016711:	56                   	push   esi
c0016712:	53                   	push   ebx
c0016713:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001671b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001671f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016723:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016729:	77 41                	ja     c001676c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001672b:	99                   	cdq    
c001672c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016732:	01 c8                	add    eax,ecx
c0016734:	11 da                	adc    edx,ebx
c0016736:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001673c:	19 d7                	sbb    edi,edx
c001673e:	72 33                	jb     c0016773 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016740:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016746:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001674c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016750:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016754:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001675a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016760:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016764:	5b                   	pop    ebx
c0016765:	5e                   	pop    esi
c0016766:	5f                   	pop    edi
c0016767:	e9 5a 09 00 00       	jmp    c00170c6 <VCache::write(unsigned long long, int, void*)>
c001676c:	b8 05 00 00 00       	mov    eax,0x5
c0016771:	eb 05                	jmp    c0016778 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016773:	b8 07 00 00 00       	mov    eax,0x7
c0016778:	5b                   	pop    ebx
c0016779:	5e                   	pop    esi
c001677a:	5f                   	pop    edi
c001677b:	c3                   	ret    

c001677c <Mouse::Mouse(char const*)>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016783:	83 ec 08             	sub    esp,0x8
c0016786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678a:	50                   	push   eax
c001678b:	e8 50 dc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	89 10                	mov    DWORD PTR [eax],edx
c001679e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167ac:	90                   	nop
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <Mouse::~Mouse()>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	89 10                	mov    DWORD PTR [eax],edx
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	50                   	push   eax
c00167c8:	e8 f5 d8 ff ff       	call   c00140c2 <Device::~Device()>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	90                   	nop
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop

c00167d6 <Mouse::~Mouse()>:
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e0:	e8 cd ff ff ff       	call   c00167b2 <Mouse::~Mouse()>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 58 01 00 00       	push   0x158
c00167f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f4:	e8 ea c4 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	83 c4 0c             	add    esp,0xc
c00167ff:	c3                   	ret    

c0016800 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016800:	55                   	push   ebp
c0016801:	57                   	push   edi
c0016802:	56                   	push   esi
c0016803:	53                   	push   ebx
c0016804:	81 ec 20 01 00 00    	sub    esp,0x120
c001680a:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016811:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016818:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001681f:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016826:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001682a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001682e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016832:	56                   	push   esi
c0016833:	68 04 b7 02 c0       	push   0xc002b704
c0016838:	e8 86 c5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001683d:	58                   	pop    eax
c001683e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016845:	e8 92 dc ff ff       	call   c00144dc <Device::getName()>
c001684a:	5a                   	pop    edx
c001684b:	59                   	pop    ecx
c001684c:	50                   	push   eax
c001684d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016851:	53                   	push   ebx
c0016852:	e8 e5 9f fe ff       	call   c000083c <strcpy>
c0016857:	5d                   	pop    ebp
c0016858:	58                   	pop    eax
c0016859:	68 35 b7 02 c0       	push   0xc002b735
c001685e:	53                   	push   ebx
c001685f:	e8 18 a1 fe ff       	call   c000097c <strcat>
c0016864:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001686b:	e8 db 8f ff ff       	call   c000f84b <malloc>
c0016870:	83 c4 0c             	add    esp,0xc
c0016873:	89 c5                	mov    ebp,eax
c0016875:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016879:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001687d:	57                   	push   edi
c001687e:	56                   	push   esi
c001687f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016886:	53                   	push   ebx
c0016887:	50                   	push   eax
c0016888:	e8 bf fb ff ff       	call   c001644c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001688d:	83 c4 14             	add    esp,0x14
c0016890:	55                   	push   ebp
c0016891:	e8 6c fc ff ff       	call   c0016502 <LogicalDisk::assignDriveLetter()>
c0016896:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016899:	0f be d8             	movsx  ebx,al
c001689c:	e8 17 fd ff ff       	call   c00165b8 <LogicalDisk::mount()>
c00168a1:	58                   	pop    eax
c00168a2:	5a                   	pop    edx
c00168a3:	55                   	push   ebp
c00168a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168ab:	e8 40 d9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c00168b0:	59                   	pop    ecx
c00168b1:	5e                   	pop    esi
c00168b2:	53                   	push   ebx
c00168b3:	68 40 b7 02 c0       	push   0xc002b740
c00168b8:	e8 06 c5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00168bd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168c3:	5b                   	pop    ebx
c00168c4:	5e                   	pop    esi
c00168c5:	5f                   	pop    edi
c00168c6:	5d                   	pop    ebp
c00168c7:	c3                   	ret    

c00168c8 <createPartitionsForDisk(PhysicalDisk*)>:
c00168c8:	55                   	push   ebp
c00168c9:	57                   	push   edi
c00168ca:	56                   	push   esi
c00168cb:	53                   	push   ebx
c00168cc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00168d2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00168d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00168df:	3d 00 02 00 00       	cmp    eax,0x200
c00168e4:	74 27                	je     c001690d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00168e6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00168ec:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00168f2:	83 ec 10             	sub    esp,0x10
c00168f5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00168f9:	99                   	cdq    
c00168fa:	c1 e6 0a             	shl    esi,0xa
c00168fd:	52                   	push   edx
c00168fe:	89 fd                	mov    ebp,edi
c0016900:	50                   	push   eax
c0016901:	55                   	push   ebp
c0016902:	56                   	push   esi
c0016903:	e8 2c 04 01 00       	call   c0026d34 <__udivdi3>
c0016908:	e9 b1 00 00 00       	jmp    c00169be <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001690d:	83 ec 0c             	sub    esp,0xc
c0016910:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016912:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016916:	56                   	push   esi
c0016917:	6a 01                	push   0x1
c0016919:	6a 00                	push   0x0
c001691b:	6a 00                	push   0x0
c001691d:	53                   	push   ebx
c001691e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016921:	83 c4 20             	add    esp,0x20
c0016924:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001692c:	75 0a                	jne    c0016938 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001692e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016936:	74 2c                	je     c0016964 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016938:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001693e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016944:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001694a:	83 ec 10             	sub    esp,0x10
c001694d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016951:	89 f7                	mov    edi,esi
c0016953:	c1 e0 0a             	shl    eax,0xa
c0016956:	c1 ff 1f             	sar    edi,0x1f
c0016959:	57                   	push   edi
c001695a:	56                   	push   esi
c001695b:	52                   	push   edx
c001695c:	50                   	push   eax
c001695d:	e8 d2 03 01 00       	call   c0026d34 <__udivdi3>
c0016962:	eb 5a                	jmp    c00169be <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016964:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001696b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016972:	83 e1 7f             	and    ecx,0x7f
c0016975:	83 e0 7f             	and    eax,0x7f
c0016978:	01 c1                	add    ecx,eax
c001697a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016981:	83 e0 7f             	and    eax,0x7f
c0016984:	01 c1                	add    ecx,eax
c0016986:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001698d:	83 e0 7f             	and    eax,0x7f
c0016990:	00 c1                	add    cl,al
c0016992:	74 41                	je     c00169d5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016994:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001699a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169a6:	83 ec 10             	sub    esp,0x10
c00169a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169ad:	89 f7                	mov    edi,esi
c00169af:	c1 e0 0a             	shl    eax,0xa
c00169b2:	c1 ff 1f             	sar    edi,0x1f
c00169b5:	57                   	push   edi
c00169b6:	56                   	push   esi
c00169b7:	52                   	push   edx
c00169b8:	50                   	push   eax
c00169b9:	e8 76 03 01 00       	call   c0026d34 <__udivdi3>
c00169be:	83 c4 14             	add    esp,0x14
c00169c1:	52                   	push   edx
c00169c2:	50                   	push   eax
c00169c3:	6a 00                	push   0x0
c00169c5:	6a 00                	push   0x0
c00169c7:	53                   	push   ebx
c00169c8:	e8 33 fe ff ff       	call   c0016800 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00169cd:	83 c4 20             	add    esp,0x20
c00169d0:	e9 79 01 00 00       	jmp    c0016b4e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00169d5:	89 f0                	mov    eax,esi
c00169d7:	31 f6                	xor    esi,esi
c00169d9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00169e0:	75 02                	jne    c00169e4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00169e2:	89 f1                	mov    ecx,esi
c00169e4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00169eb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00169f2:	c1 e2 08             	shl    edx,0x8
c00169f5:	c1 e7 10             	shl    edi,0x10
c00169f8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a00:	09 fa                	or     edx,edi
c0016a02:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a0a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a11:	83 c0 10             	add    eax,0x10
c0016a14:	09 fa                	or     edx,edi
c0016a16:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a1d:	c1 e7 18             	shl    edi,0x18
c0016a20:	09 fa                	or     edx,edi
c0016a22:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a29:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a2d:	c1 e7 10             	shl    edi,0x10
c0016a30:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a37:	c1 e2 08             	shl    edx,0x8
c0016a3a:	09 fa                	or     edx,edi
c0016a3c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a43:	09 fa                	or     edx,edi
c0016a45:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a4c:	c1 e7 18             	shl    edi,0x18
c0016a4f:	09 fa                	or     edx,edi
c0016a51:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a55:	46                   	inc    esi
c0016a56:	83 fe 04             	cmp    esi,0x4
c0016a59:	0f 85 7a ff ff ff    	jne    c00169d9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a63:	83 f0 01             	xor    eax,0x1
c0016a66:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a6a:	75 57                	jne    c0016ac3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a70:	83 f0 01             	xor    eax,0x1
c0016a73:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a77:	75 4a                	jne    c0016ac3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a79:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016a7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a8d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a93:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a99:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a9f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aa3:	89 f7                	mov    edi,esi
c0016aa5:	c1 e0 0a             	shl    eax,0xa
c0016aa8:	c1 ff 1f             	sar    edi,0x1f
c0016aab:	57                   	push   edi
c0016aac:	56                   	push   esi
c0016aad:	52                   	push   edx
c0016aae:	50                   	push   eax
c0016aaf:	e8 80 02 01 00       	call   c0026d34 <__udivdi3>
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016abb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016abf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016ac3:	84 c9                	test   cl,cl
c0016ac5:	74 53                	je     c0016b1a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016ac7:	0f b6 c9             	movzx  ecx,cl
c0016aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ace:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ad2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ad6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ae2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ae6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016aea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016aee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016af2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016af6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016afa:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016afe:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b02:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b06:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b0e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b12:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b16:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b1a:	31 ed                	xor    ebp,ebp
c0016b1c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b20:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b24:	89 f8                	mov    eax,edi
c0016b26:	09 f0                	or     eax,esi
c0016b28:	74 1e                	je     c0016b48 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b2a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b2e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b32:	89 d1                	mov    ecx,edx
c0016b34:	09 c1                	or     ecx,eax
c0016b36:	74 10                	je     c0016b48 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b38:	83 ec 0c             	sub    esp,0xc
c0016b3b:	57                   	push   edi
c0016b3c:	56                   	push   esi
c0016b3d:	52                   	push   edx
c0016b3e:	50                   	push   eax
c0016b3f:	53                   	push   ebx
c0016b40:	e8 bb fc ff ff       	call   c0016800 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b45:	83 c4 20             	add    esp,0x20
c0016b48:	45                   	inc    ebp
c0016b49:	83 fd 04             	cmp    ebp,0x4
c0016b4c:	75 ce                	jne    c0016b1c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b4e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b54:	5b                   	pop    ebx
c0016b55:	5e                   	pop    esi
c0016b56:	5f                   	pop    edi
c0016b57:	5d                   	pop    ebp
c0016b58:	c3                   	ret    
c0016b59:	90                   	nop

c0016b5a <Serial::Serial(char const*)>:
c0016b5a:	83 ec 0c             	sub    esp,0xc
c0016b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b61:	83 ec 08             	sub    esp,0x8
c0016b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b68:	50                   	push   eax
c0016b69:	e8 72 d8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0016b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7a:	89 10                	mov    DWORD PTR [eax],edx
c0016b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b80:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016b8a:	90                   	nop
c0016b8b:	83 c4 0c             	add    esp,0xc
c0016b8e:	c3                   	ret    
c0016b8f:	90                   	nop

c0016b90 <Serial::~Serial()>:
c0016b90:	83 ec 0c             	sub    esp,0xc
c0016b93:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0016b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b9c:	89 10                	mov    DWORD PTR [eax],edx
c0016b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba2:	83 ec 0c             	sub    esp,0xc
c0016ba5:	50                   	push   eax
c0016ba6:	e8 17 d5 ff ff       	call   c00140c2 <Device::~Device()>
c0016bab:	83 c4 10             	add    esp,0x10
c0016bae:	90                   	nop
c0016baf:	83 c4 0c             	add    esp,0xc
c0016bb2:	c3                   	ret    
c0016bb3:	90                   	nop

c0016bb4 <Serial::~Serial()>:
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	83 ec 0c             	sub    esp,0xc
c0016bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bbe:	e8 cd ff ff ff       	call   c0016b90 <Serial::~Serial()>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	83 ec 08             	sub    esp,0x8
c0016bc9:	68 58 01 00 00       	push   0x158
c0016bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd2:	e8 0c c1 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	83 c4 0c             	add    esp,0xc
c0016bdd:	c3                   	ret    

c0016bde <Timer::Timer(char const*)>:
c0016bde:	83 ec 0c             	sub    esp,0xc
c0016be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be5:	83 ec 08             	sub    esp,0x8
c0016be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bec:	50                   	push   eax
c0016bed:	e8 ee d7 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c0016bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfe:	89 10                	mov    DWORD PTR [eax],edx
c0016c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c04:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c0e:	90                   	nop
c0016c0f:	83 c4 0c             	add    esp,0xc
c0016c12:	c3                   	ret    
c0016c13:	90                   	nop

c0016c14 <Timer::~Timer()>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c0016c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c20:	89 10                	mov    DWORD PTR [eax],edx
c0016c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	50                   	push   eax
c0016c2a:	e8 93 d4 ff ff       	call   c00140c2 <Device::~Device()>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	90                   	nop
c0016c33:	83 c4 0c             	add    esp,0xc
c0016c36:	c3                   	ret    
c0016c37:	90                   	nop

c0016c38 <Timer::~Timer()>:
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	83 ec 0c             	sub    esp,0xc
c0016c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c42:	e8 cd ff ff ff       	call   c0016c14 <Timer::~Timer()>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	83 ec 08             	sub    esp,0x8
c0016c4d:	68 5c 01 00 00       	push   0x15c
c0016c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c56:	e8 88 c0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	83 c4 0c             	add    esp,0xc
c0016c61:	c3                   	ret    

c0016c62 <Timer::read()>:
c0016c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c6c:	c3                   	ret    

c0016c6d <timerHandler(unsigned long long)>:
c0016c6d:	55                   	push   ebp
c0016c6e:	57                   	push   edi
c0016c6f:	56                   	push   esi
c0016c70:	53                   	push   ebx
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016c78:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016c7c:	01 35 30 f0 02 c0    	add    DWORD PTR ds:0xc002f030,esi
c0016c82:	11 3d 34 f0 02 c0    	adc    DWORD PTR ds:0xc002f034,edi
c0016c88:	80 3d ad e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e9ad,0x0
c0016c8f:	0f 84 07 01 00 00    	je     c0016d9c <timerHandler(unsigned long long)+0x12f>
c0016c95:	e8 81 72 00 00       	call   c001df1b <lockStuff()>
c0016c9a:	83 ec 0c             	sub    esp,0xc
c0016c9d:	68 fc 1e 03 c0       	push   0xc0031efc
c0016ca2:	e8 07 21 01 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ca7:	c7 04 24 fc 1e 03 c0 	mov    DWORD PTR [esp],0xc0031efc
c0016cae:	89 c3                	mov    ebx,eax
c0016cb0:	e8 01 21 01 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016cb5:	83 c4 10             	add    esp,0x10
c0016cb8:	84 c0                	test   al,al
c0016cba:	74 60                	je     c0016d1c <timerHandler(unsigned long long)+0xaf>
c0016cbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cc2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cc5:	85 c0                	test   eax,eax
c0016cc7:	0f 85 91 00 00 00    	jne    c0016d5e <timerHandler(unsigned long long)+0xf1>
c0016ccd:	e9 be 00 00 00       	jmp    c0016d90 <timerHandler(unsigned long long)+0x123>
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	55                   	push   ebp
c0016cd6:	e8 04 79 00 00       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	39 eb                	cmp    ebx,ebp
c0016ce0:	75 12                	jne    c0016cf4 <timerHandler(unsigned long long)+0x87>
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	68 fc 1e 03 c0       	push   0xc0031efc
c0016cea:	e8 bf 20 01 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cef:	89 c3                	mov    ebx,eax
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	68 fc 1e 03 c0       	push   0xc0031efc
c0016cfc:	e8 b5 20 01 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	84 c0                	test   al,al
c0016d06:	75 b4                	jne    c0016cbc <timerHandler(unsigned long long)+0x4f>
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	68 fc 1e 03 c0       	push   0xc0031efc
c0016d10:	e8 99 20 01 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	39 d8                	cmp    eax,ebx
c0016d1a:	74 a0                	je     c0016cbc <timerHandler(unsigned long long)+0x4f>
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	68 fc 1e 03 c0       	push   0xc0031efc
c0016d24:	e8 85 20 01 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d29:	c7 04 24 fc 1e 03 c0 	mov    DWORD PTR [esp],0xc0031efc
c0016d30:	89 c5                	mov    ebp,eax
c0016d32:	e8 9b 20 01 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d37:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d3a:	83 c4 10             	add    esp,0x10
c0016d3d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d40:	39 15 30 f0 02 c0    	cmp    DWORD PTR ds:0xc002f030,edx
c0016d46:	a1 34 f0 02 c0       	mov    eax,ds:0xc002f034
c0016d4b:	19 c8                	sbb    eax,ecx
c0016d4d:	73 83                	jae    c0016cd2 <timerHandler(unsigned long long)+0x65>
c0016d4f:	50                   	push   eax
c0016d50:	50                   	push   eax
c0016d51:	55                   	push   ebp
c0016d52:	68 fc 1e 03 c0       	push   0xc0031efc
c0016d57:	e8 24 21 01 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d5c:	eb 93                	jmp    c0016cf1 <timerHandler(unsigned long long)+0x84>
c0016d5e:	80 3d ac e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e9ac,0x0
c0016d65:	74 29                	je     c0016d90 <timerHandler(unsigned long long)+0x123>
c0016d67:	39 c6                	cmp    esi,eax
c0016d69:	bb 00 00 00 00       	mov    ebx,0x0
c0016d6e:	19 df                	sbb    edi,ebx
c0016d70:	72 19                	jb     c0016d8b <timerHandler(unsigned long long)+0x11e>
c0016d72:	e8 7d 71 00 00       	call   c001def4 <lockScheduler()>
c0016d77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016d7f:	e8 e6 74 00 00       	call   c001e26a <schedule()>
c0016d84:	e8 6d 71 00 00       	call   c001def6 <unlockScheduler()>
c0016d89:	eb 05                	jmp    c0016d90 <timerHandler(unsigned long long)+0x123>
c0016d8b:	29 f0                	sub    eax,esi
c0016d8d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016d90:	83 c4 0c             	add    esp,0xc
c0016d93:	5b                   	pop    ebx
c0016d94:	5e                   	pop    esi
c0016d95:	5f                   	pop    edi
c0016d96:	5d                   	pop    ebp
c0016d97:	e9 53 75 00 00       	jmp    c001e2ef <unlockStuff()>
c0016d9c:	83 c4 0c             	add    esp,0xc
c0016d9f:	5b                   	pop    ebx
c0016da0:	5e                   	pop    esi
c0016da1:	5f                   	pop    edi
c0016da2:	5d                   	pop    ebp
c0016da3:	c3                   	ret    

c0016da4 <setupTimer(int)>:
c0016da4:	57                   	push   edi
c0016da5:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0016daa:	56                   	push   esi
c0016dab:	53                   	push   ebx
c0016dac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016db0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016dbf:	e8 18 d7 ff ff       	call   c00144dc <Device::getName()>
c0016dc4:	83 c4 10             	add    esp,0x10
c0016dc7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016dca:	0f 85 8d 00 00 00    	jne    c0016e5d <setupTimer(int)+0xb9>
c0016dd0:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0016dd5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ddc:	74 7f                	je     c0016e5d <setupTimer(int)+0xb9>
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	68 5c 01 00 00       	push   0x15c
c0016de6:	e8 60 8a ff ff       	call   c000f84b <malloc>
c0016deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dee:	89 c3                	mov    ebx,eax
c0016df0:	e8 1b fb 00 00       	call   c0026910 <PIT::PIT()>
c0016df5:	59                   	pop    ecx
c0016df6:	5f                   	pop    edi
c0016df7:	53                   	push   ebx
c0016df8:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c0016dfe:	e8 ed d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e05:	6a 00                	push   0x0
c0016e07:	6a 00                	push   0x0
c0016e09:	56                   	push   esi
c0016e0a:	53                   	push   ebx
c0016e0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e0e:	83 c4 14             	add    esp,0x14
c0016e11:	68 60 01 00 00       	push   0x160
c0016e16:	e8 30 8a ff ff       	call   c000f84b <malloc>
c0016e1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e1e:	89 c7                	mov    edi,eax
c0016e20:	e8 9b f9 00 00       	call   c00267c0 <APICTimer::APICTimer()>
c0016e25:	6a 00                	push   0x0
c0016e27:	6a 00                	push   0x0
c0016e29:	56                   	push   esi
c0016e2a:	57                   	push   edi
c0016e2b:	e8 92 f8 00 00       	call   c00266c2 <APICTimer::open(int, int, void*)>
c0016e30:	83 c4 20             	add    esp,0x20
c0016e33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e35:	6a 00                	push   0x0
c0016e37:	6a 00                	push   0x0
c0016e39:	6a 00                	push   0x0
c0016e3b:	53                   	push   ebx
c0016e3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e3f:	58                   	pop    eax
c0016e40:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0016e45:	5a                   	pop    edx
c0016e46:	57                   	push   edi
c0016e47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e4d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e53:	e8 98 d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e58:	83 c4 10             	add    esp,0x10
c0016e5b:	eb 33                	jmp    c0016e90 <setupTimer(int)+0xec>
c0016e5d:	83 ec 0c             	sub    esp,0xc
c0016e60:	68 5c 01 00 00       	push   0x15c
c0016e65:	e8 e1 89 ff ff       	call   c000f84b <malloc>
c0016e6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e6d:	89 c3                	mov    ebx,eax
c0016e6f:	e8 9c fa 00 00       	call   c0026910 <PIT::PIT()>
c0016e74:	58                   	pop    eax
c0016e75:	5a                   	pop    edx
c0016e76:	53                   	push   ebx
c0016e77:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c0016e7d:	e8 6e d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e84:	6a 00                	push   0x0
c0016e86:	6a 00                	push   0x0
c0016e88:	56                   	push   esi
c0016e89:	53                   	push   ebx
c0016e8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e8d:	83 c4 20             	add    esp,0x20
c0016e90:	89 d8                	mov    eax,ebx
c0016e92:	5b                   	pop    ebx
c0016e93:	5e                   	pop    esi
c0016e94:	5f                   	pop    edi
c0016e95:	c3                   	ret    

c0016e96 <VCache::VCache(PhysicalDisk*)>:
c0016e96:	53                   	push   ebx
c0016e97:	83 ec 18             	sub    esp,0x18
c0016e9a:	ba e0 b7 02 c0       	mov    edx,0xc002b7e0
c0016e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea3:	89 10                	mov    DWORD PTR [eax],edx
c0016ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ebf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ec6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ed8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016efd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f08:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f10:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f18:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f20:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f27:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f2f:	83 ec 0c             	sub    esp,0xc
c0016f32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f36:	e8 10 89 ff ff       	call   c000f84b <malloc>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	89 c3                	mov    ebx,eax
c0016f40:	83 ec 0c             	sub    esp,0xc
c0016f43:	53                   	push   ebx
c0016f44:	e8 cb 70 00 00       	call   c001e014 <Mutex::Mutex()>
c0016f49:	83 c4 10             	add    esp,0x10
c0016f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f50:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f62:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f6d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f7e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016f84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016f8e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016f91:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f98:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fa6:	05 00 01 00 00       	add    eax,0x100
c0016fab:	c1 e0 04             	shl    eax,0x4
c0016fae:	83 ec 0c             	sub    esp,0xc
c0016fb1:	50                   	push   eax
c0016fb2:	e8 94 88 ff ff       	call   c000f84b <malloc>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	89 c2                	mov    edx,eax
c0016fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc7:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fd6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fe0:	c1 e0 07             	shl    eax,0x7
c0016fe3:	83 ec 0c             	sub    esp,0xc
c0016fe6:	50                   	push   eax
c0016fe7:	e8 5f 88 ff ff       	call   c000f84b <malloc>
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	89 c2                	mov    edx,eax
c0016ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ff8:	90                   	nop
c0016ff9:	83 c4 18             	add    esp,0x18
c0016ffc:	5b                   	pop    ebx
c0016ffd:	c3                   	ret    

c0016ffe <VCache::invalidateReadBuffer()>:
c0016ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017002:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017008:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001700c:	c3                   	ret    
c001700d:	90                   	nop

c001700e <VCache::writeWriteBuffer()>:
c001700e:	53                   	push   ebx
c001700f:	83 ec 14             	sub    esp,0x14
c0017012:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017016:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017019:	8b 10                	mov    edx,DWORD PTR [eax]
c001701b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001701e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017021:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017024:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017027:	50                   	push   eax
c0017028:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001702b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017032:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017039:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001703d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017044:	83 c4 28             	add    esp,0x28
c0017047:	5b                   	pop    ebx
c0017048:	c3                   	ret    
c0017049:	90                   	nop

c001704a <VCache::~VCache()>:
c001704a:	83 ec 0c             	sub    esp,0xc
c001704d:	ba e0 b7 02 c0       	mov    edx,0xc002b7e0
c0017052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017056:	89 10                	mov    DWORD PTR [eax],edx
c0017058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001705f:	84 c0                	test   al,al
c0017061:	74 0f                	je     c0017072 <VCache::~VCache()+0x28>
c0017063:	83 ec 0c             	sub    esp,0xc
c0017066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001706a:	e8 9f ff ff ff       	call   c001700e <VCache::writeWriteBuffer()>
c001706f:	83 c4 10             	add    esp,0x10
c0017072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017076:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017079:	83 ec 0c             	sub    esp,0xc
c001707c:	50                   	push   eax
c001707d:	e8 d9 87 ff ff       	call   c000f85b <free>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017089:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	50                   	push   eax
c0017090:	e8 c6 87 ff ff       	call   c000f85b <free>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	90                   	nop
c0017099:	83 c4 0c             	add    esp,0xc
c001709c:	c3                   	ret    
c001709d:	90                   	nop

c001709e <VCache::~VCache()>:
c001709e:	83 ec 0c             	sub    esp,0xc
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a8:	e8 9d ff ff ff       	call   c001704a <VCache::~VCache()>
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	83 ec 08             	sub    esp,0x8
c00170b3:	6a 44                	push   0x44
c00170b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170b9:	e8 25 bc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00170be:	83 c4 10             	add    esp,0x10
c00170c1:	83 c4 0c             	add    esp,0xc
c00170c4:	c3                   	ret    
c00170c5:	90                   	nop

c00170c6 <VCache::write(unsigned long long, int, void*)>:
c00170c6:	55                   	push   ebp
c00170c7:	57                   	push   edi
c00170c8:	56                   	push   esi
c00170c9:	53                   	push   ebx
c00170ca:	83 ec 28             	sub    esp,0x28
c00170cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00170dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170e0:	e8 cb 73 00 00       	call   c001e4b0 <Semaphore::acquire()>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00170ec:	74 0c                	je     c00170fa <VCache::write(unsigned long long, int, void*)+0x34>
c00170ee:	83 ec 0c             	sub    esp,0xc
c00170f1:	53                   	push   ebx
c00170f2:	e8 07 ff ff ff       	call   c0016ffe <VCache::invalidateReadBuffer()>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00170fe:	74 66                	je     c0017166 <VCache::write(unsigned long long, int, void*)+0xa0>
c0017100:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017103:	99                   	cdq    
c0017104:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017108:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001710b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001710e:	89 c1                	mov    ecx,eax
c0017110:	89 d0                	mov    eax,edx
c0017112:	31 f1                	xor    ecx,esi
c0017114:	31 f8                	xor    eax,edi
c0017116:	89 ca                	mov    edx,ecx
c0017118:	09 c2                	or     edx,eax
c001711a:	75 3e                	jne    c001715a <VCache::write(unsigned long long, int, void*)+0x94>
c001711c:	83 fd 01             	cmp    ebp,0x1
c001711f:	75 39                	jne    c001715a <VCache::write(unsigned long long, int, void*)+0x94>
c0017121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017124:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001712a:	51                   	push   ecx
c001712b:	50                   	push   eax
c001712c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017130:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017134:	0f af c8             	imul   ecx,eax
c0017137:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001713a:	51                   	push   ecx
c001713b:	e8 0c 96 fe ff       	call   c000074c <memcpy>
c0017140:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	40                   	inc    eax
c0017147:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001714a:	83 c0 80             	add    eax,0xffffff80
c001714d:	75 57                	jne    c00171a6 <VCache::write(unsigned long long, int, void*)+0xe0>
c001714f:	83 ec 0c             	sub    esp,0xc
c0017152:	53                   	push   ebx
c0017153:	e8 b6 fe ff ff       	call   c001700e <VCache::writeWriteBuffer()>
c0017158:	eb 34                	jmp    c001718e <VCache::write(unsigned long long, int, void*)+0xc8>
c001715a:	83 ec 0c             	sub    esp,0xc
c001715d:	53                   	push   ebx
c001715e:	e8 ab fe ff ff       	call   c001700e <VCache::writeWriteBuffer()>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017169:	83 fd 7f             	cmp    ebp,0x7f
c001716c:	7f 25                	jg     c0017193 <VCache::write(unsigned long long, int, void*)+0xcd>
c001716e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017171:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017174:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017177:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001717b:	52                   	push   edx
c001717c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017182:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017186:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017189:	e8 be 95 fe ff       	call   c000074c <memcpy>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	eb 13                	jmp    c00171a6 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017193:	83 ec 0c             	sub    esp,0xc
c0017196:	8b 10                	mov    edx,DWORD PTR [eax]
c0017198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001719c:	55                   	push   ebp
c001719d:	57                   	push   edi
c001719e:	56                   	push   esi
c001719f:	50                   	push   eax
c00171a0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171a3:	83 c4 20             	add    esp,0x20
c00171a6:	83 ec 0c             	sub    esp,0xc
c00171a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171ac:	e8 45 79 00 00       	call   c001eaf6 <Semaphore::release()>
c00171b1:	83 c4 2c             	add    esp,0x2c
c00171b4:	31 c0                	xor    eax,eax
c00171b6:	5b                   	pop    ebx
c00171b7:	5e                   	pop    esi
c00171b8:	5f                   	pop    edi
c00171b9:	5d                   	pop    ebp
c00171ba:	c3                   	ret    
c00171bb:	90                   	nop

c00171bc <VCache::read(unsigned long long, int, void*)>:
c00171bc:	55                   	push   ebp
c00171bd:	57                   	push   edi
c00171be:	56                   	push   esi
c00171bf:	53                   	push   ebx
c00171c0:	83 ec 28             	sub    esp,0x28
c00171c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171cb:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00171cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00171d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00171db:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00171df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e2:	e8 c9 72 00 00       	call   c001e4b0 <Semaphore::acquire()>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171ee:	74 0c                	je     c00171fc <VCache::read(unsigned long long, int, void*)+0x40>
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	53                   	push   ebx
c00171f4:	e8 15 fe ff ff       	call   c001700e <VCache::writeWriteBuffer()>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	83 fe 01             	cmp    esi,0x1
c00171ff:	0f 85 80 00 00 00    	jne    c0017285 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017205:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017208:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001720f:	75 74                	jne    c0017285 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017211:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017214:	89 d1                	mov    ecx,edx
c0017216:	f7 d9                	neg    ecx
c0017218:	89 cf                	mov    edi,ecx
c001721a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001721e:	c1 ff 1f             	sar    edi,0x1f
c0017221:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017224:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017228:	89 ce                	mov    esi,ecx
c001722a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001722e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017232:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017236:	89 cf                	mov    edi,ecx
c0017238:	74 0a                	je     c0017244 <VCache::read(unsigned long long, int, void*)+0x88>
c001723a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001723d:	75 05                	jne    c0017244 <VCache::read(unsigned long long, int, void*)+0x88>
c001723f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017242:	74 1c                	je     c0017260 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017244:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017248:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001724b:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001724e:	83 ec 0c             	sub    esp,0xc
c0017251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017253:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017256:	52                   	push   edx
c0017257:	57                   	push   edi
c0017258:	56                   	push   esi
c0017259:	50                   	push   eax
c001725a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001725d:	83 c4 20             	add    esp,0x20
c0017260:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017263:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017269:	50                   	push   eax
c001726a:	52                   	push   edx
c001726b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001726e:	48                   	dec    eax
c001726f:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017273:	0f af c2             	imul   eax,edx
c0017276:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017279:	50                   	push   eax
c001727a:	55                   	push   ebp
c001727b:	e8 cc 94 fe ff       	call   c000074c <memcpy>
c0017280:	83 c4 10             	add    esp,0x10
c0017283:	eb 21                	jmp    c00172a6 <VCache::read(unsigned long long, int, void*)+0xea>
c0017285:	83 ec 0c             	sub    esp,0xc
c0017288:	53                   	push   ebx
c0017289:	e8 70 fd ff ff       	call   c0016ffe <VCache::invalidateReadBuffer()>
c001728e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017291:	8b 10                	mov    edx,DWORD PTR [eax]
c0017293:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017296:	56                   	push   esi
c0017297:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001729b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001729f:	50                   	push   eax
c00172a0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172a3:	83 c4 20             	add    esp,0x20
c00172a6:	83 ec 0c             	sub    esp,0xc
c00172a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172ac:	e8 45 78 00 00       	call   c001eaf6 <Semaphore::release()>
c00172b1:	83 c4 2c             	add    esp,0x2c
c00172b4:	31 c0                	xor    eax,eax
c00172b6:	5b                   	pop    ebx
c00172b7:	5e                   	pop    esi
c00172b8:	5f                   	pop    edi
c00172b9:	5d                   	pop    ebp
c00172ba:	c3                   	ret    
c00172bb:	90                   	nop

c00172bc <Video::putrect(int, int, int, int, unsigned int)>:
c00172bc:	55                   	push   ebp
c00172bd:	57                   	push   edi
c00172be:	56                   	push   esi
c00172bf:	53                   	push   ebx
c00172c0:	83 ec 1c             	sub    esp,0x1c
c00172c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00172cf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00172d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172db:	01 df                	add    edi,ebx
c00172dd:	39 fb                	cmp    ebx,edi
c00172df:	7d 1f                	jge    c0017300 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00172e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172e5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00172e9:	7d 12                	jge    c00172fd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00172eb:	8b 16                	mov    edx,DWORD PTR [esi]
c00172ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00172f1:	53                   	push   ebx
c00172f2:	55                   	push   ebp
c00172f3:	45                   	inc    ebp
c00172f4:	56                   	push   esi
c00172f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00172f8:	83 c4 10             	add    esp,0x10
c00172fb:	eb e8                	jmp    c00172e5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00172fd:	43                   	inc    ebx
c00172fe:	eb dd                	jmp    c00172dd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017300:	83 c4 1c             	add    esp,0x1c
c0017303:	5b                   	pop    ebx
c0017304:	5e                   	pop    esi
c0017305:	5f                   	pop    edi
c0017306:	5d                   	pop    ebp
c0017307:	c3                   	ret    

c0017308 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017308:	55                   	push   ebp
c0017309:	57                   	push   edi
c001730a:	31 ff                	xor    edi,edi
c001730c:	56                   	push   esi
c001730d:	53                   	push   ebx
c001730e:	83 ec 1c             	sub    esp,0x1c
c0017311:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017315:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017319:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017320:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017325:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017329:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001732d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017331:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017334:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017338:	01 f9                	add    ecx,edi
c001733a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001733e:	7d 2f                	jge    c001736f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017340:	31 f6                	xor    esi,esi
c0017342:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017346:	01 f2                	add    edx,esi
c0017348:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001734c:	7d 1a                	jge    c0017368 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001734e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017351:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017354:	46                   	inc    esi
c0017355:	51                   	push   ecx
c0017356:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001735a:	52                   	push   edx
c001735b:	55                   	push   ebp
c001735c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001735f:	83 c4 10             	add    esp,0x10
c0017362:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017366:	eb da                	jmp    c0017342 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017368:	47                   	inc    edi
c0017369:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001736d:	eb c5                	jmp    c0017334 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001736f:	83 c4 1c             	add    esp,0x1c
c0017372:	5b                   	pop    ebx
c0017373:	5e                   	pop    esi
c0017374:	5f                   	pop    edi
c0017375:	5d                   	pop    ebp
c0017376:	c3                   	ret    
c0017377:	90                   	nop

c0017378 <Video::blit(unsigned int*, int, int, int, int)>:
c0017378:	55                   	push   ebp
c0017379:	57                   	push   edi
c001737a:	56                   	push   esi
c001737b:	53                   	push   ebx
c001737c:	83 ec 1c             	sub    esp,0x1c
c001737f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017387:	85 c0                	test   eax,eax
c0017389:	79 02                	jns    c001738d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001738b:	31 c0                	xor    eax,eax
c001738d:	c1 e0 02             	shl    eax,0x2
c0017390:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017398:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001739c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173a0:	39 d8                	cmp    eax,ebx
c00173a2:	7e 49                	jle    c00173ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173a4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173aa:	7c 41                	jl     c00173ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173ac:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173b4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173b8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173bc:	39 f9                	cmp    ecx,edi
c00173be:	7e 22                	jle    c00173e2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173c0:	83 c5 04             	add    ebp,0x4
c00173c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173c9:	7c 14                	jl     c00173df <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173cb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00173cd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00173d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173d8:	56                   	push   esi
c00173d9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	47                   	inc    edi
c00173e0:	eb d2                	jmp    c00173b4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00173e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173e6:	43                   	inc    ebx
c00173e7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00173eb:	eb ab                	jmp    c0017398 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00173ed:	83 c4 1c             	add    esp,0x1c
c00173f0:	5b                   	pop    ebx
c00173f1:	5e                   	pop    esi
c00173f2:	5f                   	pop    edi
c00173f3:	5d                   	pop    ebp
c00173f4:	c3                   	ret    
c00173f5:	90                   	nop

c00173f6 <Video::clearScreen(unsigned int)>:
c00173f6:	57                   	push   edi
c00173f7:	56                   	push   esi
c00173f8:	53                   	push   ebx
c00173f9:	31 db                	xor    ebx,ebx
c00173fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00173ff:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017405:	7e 1f                	jle    c0017426 <Video::clearScreen(unsigned int)+0x30>
c0017407:	31 ff                	xor    edi,edi
c0017409:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001740f:	7e 12                	jle    c0017423 <Video::clearScreen(unsigned int)+0x2d>
c0017411:	8b 06                	mov    eax,DWORD PTR [esi]
c0017413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017417:	53                   	push   ebx
c0017418:	57                   	push   edi
c0017419:	47                   	inc    edi
c001741a:	56                   	push   esi
c001741b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001741e:	83 c4 10             	add    esp,0x10
c0017421:	eb e6                	jmp    c0017409 <Video::clearScreen(unsigned int)+0x13>
c0017423:	43                   	inc    ebx
c0017424:	eb d9                	jmp    c00173ff <Video::clearScreen(unsigned int)+0x9>
c0017426:	5b                   	pop    ebx
c0017427:	5e                   	pop    esi
c0017428:	5f                   	pop    edi
c0017429:	c3                   	ret    

c001742a <Video::putpixel(int, int, unsigned int)>:
c001742a:	c7 44 24 04 e8 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b7e8
c0017432:	e9 20 32 00 00       	jmp    c001a657 <Krnl::panic(char const*)>
c0017437:	90                   	nop

c0017438 <Video::Video(char const*)>:
c0017438:	83 ec 0c             	sub    esp,0xc
c001743b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017446:	50                   	push   eax
c0017447:	e8 94 cf ff ff       	call   c00143e0 <Device::Device(char const*)>
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	ba 6c b8 02 c0       	mov    edx,0xc002b86c
c0017454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017458:	89 10                	mov    DWORD PTR [eax],edx
c001745a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001745e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017468:	90                   	nop
c0017469:	83 c4 0c             	add    esp,0xc
c001746c:	c3                   	ret    
c001746d:	90                   	nop

c001746e <Video::~Video()>:
c001746e:	83 ec 0c             	sub    esp,0xc
c0017471:	ba 6c b8 02 c0       	mov    edx,0xc002b86c
c0017476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001747a:	89 10                	mov    DWORD PTR [eax],edx
c001747c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017480:	83 ec 0c             	sub    esp,0xc
c0017483:	50                   	push   eax
c0017484:	e8 39 cc ff ff       	call   c00140c2 <Device::~Device()>
c0017489:	83 c4 10             	add    esp,0x10
c001748c:	90                   	nop
c001748d:	83 c4 0c             	add    esp,0xc
c0017490:	c3                   	ret    
c0017491:	90                   	nop

c0017492 <Video::~Video()>:
c0017492:	83 ec 0c             	sub    esp,0xc
c0017495:	83 ec 0c             	sub    esp,0xc
c0017498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001749c:	e8 cd ff ff ff       	call   c001746e <Video::~Video()>
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	83 ec 08             	sub    esp,0x8
c00174a7:	68 64 01 00 00       	push   0x164
c00174ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174b0:	e8 2e b8 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00174b5:	83 c4 10             	add    esp,0x10
c00174b8:	83 c4 0c             	add    esp,0xc
c00174bb:	c3                   	ret    

c00174bc <Video::isMonochrome()>:
c00174bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174c0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174c6:	c3                   	ret    
c00174c7:	90                   	nop

c00174c8 <Video::getWidth()>:
c00174c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00174d2:	c3                   	ret    
c00174d3:	90                   	nop

c00174d4 <Video::getHeight()>:
c00174d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00174de:	c3                   	ret    
c00174df:	90                   	nop

c00174e0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00174e0:	55                   	push   ebp
c00174e1:	57                   	push   edi
c00174e2:	56                   	push   esi
c00174e3:	53                   	push   ebx
c00174e4:	83 ec 2c             	sub    esp,0x2c
c00174e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00174ef:	83 f8 01             	cmp    eax,0x1
c00174f2:	19 c9                	sbb    ecx,ecx
c00174f4:	31 db                	xor    ebx,ebx
c00174f6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00174fa:	89 cd                	mov    ebp,ecx
c00174fc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017504:	f7 d5                	not    ebp
c0017506:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001750c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017510:	01 d8                	add    eax,ebx
c0017512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017516:	56                   	push   esi
c0017517:	e8 b8 ff ff ff       	call   c00174d4 <Video::getHeight()>
c001751c:	59                   	pop    ecx
c001751d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017521:	7e 70                	jle    c0017593 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017523:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017527:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001752b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001752e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017532:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017536:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001753d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017541:	89 f8                	mov    eax,edi
c0017543:	83 c0 20             	add    eax,0x20
c0017546:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001754a:	56                   	push   esi
c001754b:	e8 78 ff ff ff       	call   c00174c8 <Video::getWidth()>
c0017550:	5a                   	pop    edx
c0017551:	39 c7                	cmp    edi,eax
c0017553:	7d 34                	jge    c0017589 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017555:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001755a:	74 05                	je     c0017561 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001755c:	8b 06                	mov    eax,DWORD PTR [esi]
c001755e:	55                   	push   ebp
c001755f:	eb 0d                	jmp    c001756e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017561:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017566:	74 12                	je     c001757a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017568:	8b 06                	mov    eax,DWORD PTR [esi]
c001756a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001756e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017572:	57                   	push   edi
c0017573:	56                   	push   esi
c0017574:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001757e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017582:	47                   	inc    edi
c0017583:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017587:	75 c1                	jne    c001754a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017589:	43                   	inc    ebx
c001758a:	83 fb 20             	cmp    ebx,0x20
c001758d:	0f 85 79 ff ff ff    	jne    c001750c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017593:	83 c4 2c             	add    esp,0x2c
c0017596:	5b                   	pop    ebx
c0017597:	5e                   	pop    esi
c0017598:	5f                   	pop    edi
c0017599:	5d                   	pop    ebp
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001759c:	55                   	push   ebp
c001759d:	57                   	push   edi
c001759e:	56                   	push   esi
c001759f:	53                   	push   ebx
c00175a0:	83 ec 28             	sub    esp,0x28
c00175a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175a7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175ab:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175af:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175b3:	c1 e7 08             	shl    edi,0x8
c00175b6:	01 c7                	add    edi,eax
c00175b8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175bc:	c1 e0 08             	shl    eax,0x8
c00175bf:	01 d0                	add    eax,edx
c00175c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175c9:	0f af c7             	imul   eax,edi
c00175cc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00175d3:	50                   	push   eax
c00175d4:	e8 72 82 ff ff       	call   c000f84b <malloc>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	89 c5                	mov    ebp,eax
c00175de:	85 c0                	test   eax,eax
c00175e0:	75 15                	jne    c00175f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00175e2:	83 ec 0c             	sub    esp,0xc
c00175e5:	68 09 b8 02 c0       	push   0xc002b809
c00175ea:	e8 d4 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	e9 1c 01 00 00       	jmp    c0017713 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00175f7:	be 12 00 00 00       	mov    esi,0x12
c00175fc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017600:	74 11                	je     c0017613 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017602:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017606:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001760a:	c1 fe 03             	sar    esi,0x3
c001760d:	0f af f0             	imul   esi,eax
c0017610:	83 c6 12             	add    esi,0x12
c0017613:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017617:	74 04                	je     c001761d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017619:	85 ff                	test   edi,edi
c001761b:	75 12                	jne    c001762f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001761d:	83 ec 0c             	sub    esp,0xc
c0017620:	68 20 b8 02 c0       	push   0xc002b820
c0017625:	e8 99 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001762a:	e9 ce 00 00 00       	jmp    c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001762f:	52                   	push   edx
c0017630:	52                   	push   edx
c0017631:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017635:	50                   	push   eax
c0017636:	68 35 b8 02 c0       	push   0xc002b835
c001763b:	e8 83 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017640:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	80 fa 02             	cmp    dl,0x2
c001764a:	0f 85 98 00 00 00    	jne    c00176e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017650:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017655:	75 10                	jne    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017657:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001765b:	75 0a                	jne    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001765d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017660:	83 e8 18             	sub    eax,0x18
c0017663:	a8 f7                	test   al,0xf7
c0017665:	74 0a                	je     c0017671 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017667:	83 ec 0c             	sub    esp,0xc
c001766a:	68 42 b8 02 c0       	push   0xc002b842
c001766f:	eb 7f                	jmp    c00176f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017671:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017679:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017681:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017685:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001768d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017691:	75 0c                	jne    c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017693:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017698:	c1 e0 18             	shl    eax,0x18
c001769b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001769f:	41                   	inc    ecx
c00176a0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176a5:	c1 e2 10             	shl    edx,0x10
c00176a8:	89 d0                	mov    eax,edx
c00176aa:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176af:	c1 e2 08             	shl    edx,0x8
c00176b2:	09 c2                	or     edx,eax
c00176b4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176b8:	09 c2                	or     edx,eax
c00176ba:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176be:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176c2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176c6:	c1 f8 03             	sar    eax,0x3
c00176c9:	01 c6                	add    esi,eax
c00176cb:	89 c8                	mov    eax,ecx
c00176cd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00176d1:	39 c7                	cmp    edi,eax
c00176d3:	7f b0                	jg     c0017685 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00176d5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176dd:	39 14 24             	cmp    DWORD PTR [esp],edx
c00176e0:	7e 22                	jle    c0017704 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00176e2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00176e6:	eb 99                	jmp    c0017681 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00176e8:	50                   	push   eax
c00176e9:	50                   	push   eax
c00176ea:	52                   	push   edx
c00176eb:	68 50 b8 02 c0       	push   0xc002b850
c00176f0:	e8 ce b6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00176f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176f8:	e8 5e 81 ff ff       	call   c000f85b <free>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	31 ed                	xor    ebp,ebp
c0017702:	eb 0f                	jmp    c0017713 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017704:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017708:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001770b:	89 38                	mov    DWORD PTR [eax],edi
c001770d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017711:	89 08                	mov    DWORD PTR [eax],ecx
c0017713:	83 c4 1c             	add    esp,0x1c
c0017716:	89 e8                	mov    eax,ebp
c0017718:	5b                   	pop    ebx
c0017719:	5e                   	pop    esi
c001771a:	5f                   	pop    edi
c001771b:	5d                   	pop    ebp
c001771c:	c3                   	ret    
c001771d:	90                   	nop

c001771e <Video::putTGA(int, int, unsigned char*, int)>:
c001771e:	55                   	push   ebp
c001771f:	57                   	push   edi
c0017720:	56                   	push   esi
c0017721:	53                   	push   ebx
c0017722:	83 ec 28             	sub    esp,0x28
c0017725:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017729:	8d 44 24 18          	lea    eax,[esp+0x18]
c001772d:	50                   	push   eax
c001772e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017732:	50                   	push   eax
c0017733:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017737:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001773b:	56                   	push   esi
c001773c:	e8 5b fe ff ff       	call   c001759c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017741:	83 c4 20             	add    esp,0x20
c0017744:	85 c0                	test   eax,eax
c0017746:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001774a:	74 35                	je     c0017781 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001774c:	89 c7                	mov    edi,eax
c001774e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017752:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017756:	39 d8                	cmp    eax,ebx
c0017758:	7e 27                	jle    c0017781 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001775a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001775e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017762:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017766:	39 e8                	cmp    eax,ebp
c0017768:	7e 14                	jle    c001777e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001776a:	8b 06                	mov    eax,DWORD PTR [esi]
c001776c:	83 c7 04             	add    edi,0x4
c001776f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017772:	53                   	push   ebx
c0017773:	55                   	push   ebp
c0017774:	45                   	inc    ebp
c0017775:	56                   	push   esi
c0017776:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	eb e0                	jmp    c001775e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001777e:	43                   	inc    ebx
c001777f:	eb cd                	jmp    c001774e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017781:	83 c4 1c             	add    esp,0x1c
c0017784:	5b                   	pop    ebx
c0017785:	5e                   	pop    esi
c0017786:	5f                   	pop    edi
c0017787:	5d                   	pop    ebp
c0017788:	c3                   	ret    
c0017789:	90                   	nop

c001778a <ACPI::close(int, int, void*)>:
c001778a:	83 ec 1c             	sub    esp,0x1c
c001778d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017795:	74 0a                	je     c00177a1 <ACPI::close(int, int, void*)+0x17>
c0017797:	b8 00 00 00 00       	mov    eax,0x0
c001779c:	e9 9a 00 00 00       	jmp    c001783b <ACPI::close(int, int, void*)+0xb1>
c00177a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177a6:	75 37                	jne    c00177df <ACPI::close(int, int, void*)+0x55>
c00177a8:	83 ec 0c             	sub    esp,0xc
c00177ab:	68 ac b8 02 c0       	push   0xc002b8ac
c00177b0:	e8 0e b6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c00177bd:	85 c0                	test   eax,eax
c00177bf:	74 07                	je     c00177c8 <ACPI::close(int, int, void*)+0x3e>
c00177c1:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c00177c6:	ff d0                	call   eax
c00177c8:	83 ec 0c             	sub    esp,0xc
c00177cb:	68 14 ba 02 c0       	push   0xc002ba14
c00177d0:	e8 82 2e 00 00       	call   c001a657 <Krnl::panic(char const*)>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00177dd:	eb 5c                	jmp    c001783b <ACPI::close(int, int, void*)+0xb1>
c00177df:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00177e4:	75 50                	jne    c0017836 <ACPI::close(int, int, void*)+0xac>
c00177e6:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c00177eb:	85 c0                	test   eax,eax
c00177ed:	74 07                	je     c00177f6 <ACPI::close(int, int, void*)+0x6c>
c00177ef:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c00177f4:	ff d0                	call   eax
c00177f6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00177fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017800:	83 e0 02             	and    eax,0x2
c0017803:	74 1c                	je     c0017821 <ACPI::close(int, int, void*)+0x97>
c0017805:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001780c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017810:	89 c2                	mov    edx,eax
c0017812:	ec                   	in     al,dx
c0017813:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017817:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001781b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001781f:	eb da                	jmp    c00177fb <ACPI::close(int, int, void*)+0x71>
c0017821:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017828:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001782d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017831:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017835:	ee                   	out    dx,al
c0017836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001783b:	83 c4 1c             	add    esp,0x1c
c001783e:	c3                   	ret    

c001783f <findRSDP()>:
c001783f:	83 ec 1c             	sub    esp,0x1c
c0017842:	83 ec 0c             	sub    esp,0xc
c0017845:	68 b9 b8 02 c0       	push   0xc002b8b9
c001784a:	e8 74 b5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001784f:	83 c4 10             	add    esp,0x10
c0017852:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017857:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001785d:	83 e0 04             	and    eax,0x4
c0017860:	84 c0                	test   al,al
c0017862:	75 07                	jne    c001786b <findRSDP()+0x2c>
c0017864:	b8 00 00 00 00       	mov    eax,0x0
c0017869:	eb 6a                	jmp    c00178d5 <findRSDP()+0x96>
c001786b:	a1 f4 e9 02 c0       	mov    eax,ds:0xc002e9f4
c0017870:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017875:	7f 1b                	jg     c0017892 <findRSDP()+0x53>
c0017877:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001787c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017882:	83 e2 fb             	and    edx,0xfffffffb
c0017885:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001788b:	b8 00 00 00 00       	mov    eax,0x0
c0017890:	eb 43                	jmp    c00178d5 <findRSDP()+0x96>
c0017892:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001789a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178a2:	77 2c                	ja     c00178d0 <findRSDP()+0x91>
c00178a4:	83 ec 04             	sub    esp,0x4
c00178a7:	6a 08                	push   0x8
c00178a9:	68 c7 b8 02 c0       	push   0xc002b8c7
c00178ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178b2:	e8 91 8d fe ff       	call   c0000648 <memcmp>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	85 c0                	test   eax,eax
c00178bc:	0f 94 c0             	sete   al
c00178bf:	84 c0                	test   al,al
c00178c1:	74 06                	je     c00178c9 <findRSDP()+0x8a>
c00178c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c7:	eb 0c                	jmp    c00178d5 <findRSDP()+0x96>
c00178c9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178ce:	eb ca                	jmp    c001789a <findRSDP()+0x5b>
c00178d0:	b8 00 00 00 00       	mov    eax,0x0
c00178d5:	83 c4 1c             	add    esp,0x1c
c00178d8:	c3                   	ret    

c00178d9 <loadACPITables(unsigned char*)>:
c00178d9:	56                   	push   esi
c00178da:	53                   	push   ebx
c00178db:	83 ec 44             	sub    esp,0x44
c00178de:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00178e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178e9:	83 e0 04             	and    eax,0x4
c00178ec:	84 c0                	test   al,al
c00178ee:	0f 84 05 02 00 00    	je     c0017af9 <loadACPITables(unsigned char*)+0x220>
c00178f4:	a0 80 12 03 c0       	mov    al,ds:0xc0031280
c00178f9:	84 c0                	test   al,al
c00178fb:	74 75                	je     c0017972 <loadACPITables(unsigned char*)+0x99>
c00178fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017901:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017909:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001790c:	83 e8 24             	sub    eax,0x24
c001790f:	c1 e8 03             	shr    eax,0x3
c0017912:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017916:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001791e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017922:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017926:	0f 8d b2 00 00 00    	jge    c00179de <loadACPITables(unsigned char*)+0x105>
c001792c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017930:	83 c0 24             	add    eax,0x24
c0017933:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017937:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001793f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017943:	c1 e0 03             	shl    eax,0x3
c0017946:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001794a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001794e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017951:	8b 00                	mov    eax,DWORD PTR [eax]
c0017953:	89 c1                	mov    ecx,eax
c0017955:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c001795a:	8d 50 01             	lea    edx,[eax+0x1]
c001795d:	89 15 6c 10 03 c0    	mov    DWORD PTR ds:0xc003106c,edx
c0017963:	89 ca                	mov    edx,ecx
c0017965:	89 14 c5 84 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef7c],edx
c001796c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017970:	eb ac                	jmp    c001791e <loadACPITables(unsigned char*)+0x45>
c0017972:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017976:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001797a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017981:	83 e8 24             	sub    eax,0x24
c0017984:	c1 e8 02             	shr    eax,0x2
c0017987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001798b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017993:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017997:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001799b:	7d 41                	jge    c00179de <loadACPITables(unsigned char*)+0x105>
c001799d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179a1:	83 c0 24             	add    eax,0x24
c00179a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179b4:	c1 e0 02             	shl    eax,0x2
c00179b7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179c1:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c00179c6:	8d 50 01             	lea    edx,[eax+0x1]
c00179c9:	89 15 6c 10 03 c0    	mov    DWORD PTR ds:0xc003106c,edx
c00179cf:	89 ca                	mov    edx,ecx
c00179d1:	89 14 c5 84 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef7c],edx
c00179d8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00179dc:	eb b5                	jmp    c0017993 <loadACPITables(unsigned char*)+0xba>
c00179de:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00179e6:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c00179eb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00179ef:	0f 8d 05 01 00 00    	jge    c0017afa <loadACPITables(unsigned char*)+0x221>
c00179f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179f9:	8b 04 c5 84 10 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcef7c]
c0017a00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a10:	25 ff 0f 00 00       	and    eax,0xfff
c0017a15:	89 c6                	mov    esi,eax
c0017a17:	e8 12 a2 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017a1c:	89 c3                	mov    ebx,eax
c0017a1e:	83 ec 0c             	sub    esp,0xc
c0017a21:	6a 01                	push   0x1
c0017a23:	e8 c7 9f ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a2f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a35:	83 ec 0c             	sub    esp,0xc
c0017a38:	6a 01                	push   0x1
c0017a3a:	6a 01                	push   0x1
c0017a3c:	50                   	push   eax
c0017a3d:	52                   	push   edx
c0017a3e:	53                   	push   ebx
c0017a3f:	e8 cc aa ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a44:	83 c4 20             	add    esp,0x20
c0017a47:	09 f0                	or     eax,esi
c0017a49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a51:	c1 e0 03             	shl    eax,0x3
c0017a54:	05 80 10 03 c0       	add    eax,0xc0031080
c0017a59:	83 ec 04             	sub    esp,0x4
c0017a5c:	6a 04                	push   0x4
c0017a5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a62:	50                   	push   eax
c0017a63:	e8 e4 8c fe ff       	call   c000074c <memcpy>
c0017a68:	83 c4 10             	add    esp,0x10
c0017a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a7a:	05 00 10 00 00       	add    eax,0x1000
c0017a7f:	c1 e8 0c             	shr    eax,0xc
c0017a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a91:	25 ff 0f 00 00       	and    eax,0xfff
c0017a96:	89 c6                	mov    esi,eax
c0017a98:	e8 91 a1 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017a9d:	89 c3                	mov    ebx,eax
c0017a9f:	83 ec 0c             	sub    esp,0xc
c0017aa2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017aa6:	e8 44 9f ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017aab:	83 c4 10             	add    esp,0x10
c0017aae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ab2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ab8:	83 ec 0c             	sub    esp,0xc
c0017abb:	6a 01                	push   0x1
c0017abd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ac1:	50                   	push   eax
c0017ac2:	52                   	push   edx
c0017ac3:	53                   	push   ebx
c0017ac4:	e8 47 aa ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ac9:	83 c4 20             	add    esp,0x20
c0017acc:	09 f0                	or     eax,esi
c0017ace:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017ad5:	83 ec 0c             	sub    esp,0xc
c0017ad8:	50                   	push   eax
c0017ad9:	e8 d7 a3 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0017ade:	83 c4 10             	add    esp,0x10
c0017ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ae9:	89 14 c5 84 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef7c],edx
c0017af0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017af4:	e9 ed fe ff ff       	jmp    c00179e6 <loadACPITables(unsigned char*)+0x10d>
c0017af9:	90                   	nop
c0017afa:	83 c4 44             	add    esp,0x44
c0017afd:	5b                   	pop    ebx
c0017afe:	5e                   	pop    esi
c0017aff:	c3                   	ret    

c0017b00 <findRSDT(unsigned char*)>:
c0017b00:	56                   	push   esi
c0017b01:	53                   	push   ebx
c0017b02:	83 ec 44             	sub    esp,0x44
c0017b05:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017b0a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b10:	83 e0 04             	and    eax,0x4
c0017b13:	84 c0                	test   al,al
c0017b15:	75 0a                	jne    c0017b21 <findRSDT(unsigned char*)+0x21>
c0017b17:	b8 00 00 00 00       	mov    eax,0x0
c0017b1c:	e9 f7 00 00 00       	jmp    c0017c18 <findRSDT(unsigned char*)+0x118>
c0017b21:	83 ec 04             	sub    esp,0x4
c0017b24:	6a 24                	push   0x24
c0017b26:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b2e:	50                   	push   eax
c0017b2f:	e8 18 8c fe ff       	call   c000074c <memcpy>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b3b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b3f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b4f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b5f:	25 ff 0f 00 00       	and    eax,0xfff
c0017b64:	89 c6                	mov    esi,eax
c0017b66:	e8 c3 a0 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017b6b:	89 c3                	mov    ebx,eax
c0017b6d:	83 ec 0c             	sub    esp,0xc
c0017b70:	6a 02                	push   0x2
c0017b72:	e8 78 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b7e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	6a 01                	push   0x1
c0017b89:	6a 02                	push   0x2
c0017b8b:	50                   	push   eax
c0017b8c:	52                   	push   edx
c0017b8d:	53                   	push   ebx
c0017b8e:	e8 7d a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b93:	83 c4 20             	add    esp,0x20
c0017b96:	09 f0                	or     eax,esi
c0017b98:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba0:	25 ff 0f 00 00       	and    eax,0xfff
c0017ba5:	89 c6                	mov    esi,eax
c0017ba7:	e8 82 a0 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017bac:	89 c3                	mov    ebx,eax
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	6a 02                	push   0x2
c0017bb3:	e8 37 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bbf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bc5:	83 ec 0c             	sub    esp,0xc
c0017bc8:	6a 01                	push   0x1
c0017bca:	6a 02                	push   0x2
c0017bcc:	50                   	push   eax
c0017bcd:	52                   	push   edx
c0017bce:	53                   	push   ebx
c0017bcf:	e8 3c a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bd4:	83 c4 20             	add    esp,0x20
c0017bd7:	09 f0                	or     eax,esi
c0017bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bdd:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017be2:	75 11                	jne    c0017bf5 <findRSDT(unsigned char*)+0xf5>
c0017be4:	c6 05 80 12 03 c0 00 	mov    BYTE PTR ds:0xc0031280,0x0
c0017beb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017bf3:	eb 1f                	jmp    c0017c14 <findRSDT(unsigned char*)+0x114>
c0017bf5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017bfa:	75 11                	jne    c0017c0d <findRSDT(unsigned char*)+0x10d>
c0017bfc:	c6 05 80 12 03 c0 01 	mov    BYTE PTR ds:0xc0031280,0x1
c0017c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c07:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c0b:	eb 07                	jmp    c0017c14 <findRSDT(unsigned char*)+0x114>
c0017c0d:	b8 00 00 00 00       	mov    eax,0x0
c0017c12:	eb 04                	jmp    c0017c18 <findRSDT(unsigned char*)+0x118>
c0017c14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c18:	83 c4 44             	add    esp,0x44
c0017c1b:	5b                   	pop    ebx
c0017c1c:	5e                   	pop    esi
c0017c1d:	c3                   	ret    

c0017c1e <findDataTable(unsigned char*, char*)>:
c0017c1e:	83 ec 1c             	sub    esp,0x1c
c0017c21:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017c26:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c2c:	83 e0 04             	and    eax,0x4
c0017c2f:	84 c0                	test   al,al
c0017c31:	75 07                	jne    c0017c3a <findDataTable(unsigned char*, char*)+0x1c>
c0017c33:	b8 00 00 00 00       	mov    eax,0x0
c0017c38:	eb 7c                	jmp    c0017cb6 <findDataTable(unsigned char*, char*)+0x98>
c0017c3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c42:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c0017c47:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c4b:	7d 3a                	jge    c0017c87 <findDataTable(unsigned char*, char*)+0x69>
c0017c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c51:	c1 e0 03             	shl    eax,0x3
c0017c54:	05 80 10 03 c0       	add    eax,0xc0031080
c0017c59:	83 ec 04             	sub    esp,0x4
c0017c5c:	6a 04                	push   0x4
c0017c5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c62:	50                   	push   eax
c0017c63:	e8 e0 89 fe ff       	call   c0000648 <memcmp>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	85 c0                	test   eax,eax
c0017c6d:	0f 94 c0             	sete   al
c0017c70:	84 c0                	test   al,al
c0017c72:	74 0d                	je     c0017c81 <findDataTable(unsigned char*, char*)+0x63>
c0017c74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c78:	8b 04 c5 84 10 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcef7c]
c0017c7f:	eb 35                	jmp    c0017cb6 <findDataTable(unsigned char*, char*)+0x98>
c0017c81:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c85:	eb bb                	jmp    c0017c42 <findDataTable(unsigned char*, char*)+0x24>
c0017c87:	a0 80 12 03 c0       	mov    al,ds:0xc0031280
c0017c8c:	84 c0                	test   al,al
c0017c8e:	74 07                	je     c0017c97 <findDataTable(unsigned char*, char*)+0x79>
c0017c90:	b8 58 00 00 00       	mov    eax,0x58
c0017c95:	eb 05                	jmp    c0017c9c <findDataTable(unsigned char*, char*)+0x7e>
c0017c97:	b8 52 00 00 00       	mov    eax,0x52
c0017c9c:	83 ec 04             	sub    esp,0x4
c0017c9f:	50                   	push   eax
c0017ca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ca4:	68 38 ba 02 c0       	push   0xc002ba38
c0017ca9:	e8 15 b1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017cae:	83 c4 10             	add    esp,0x10
c0017cb1:	b8 00 00 00 00       	mov    eax,0x0
c0017cb6:	83 c4 1c             	add    esp,0x1c
c0017cb9:	c3                   	ret    

c0017cba <scanMADT()>:
c0017cba:	53                   	push   ebx
c0017cbb:	83 ec 38             	sub    esp,0x38
c0017cbe:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017cc3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cc9:	83 e0 04             	and    eax,0x4
c0017ccc:	84 c0                	test   al,al
c0017cce:	0f 84 63 04 00 00    	je     c0018137 <scanMADT()+0x47d>
c0017cd4:	e8 66 fb ff ff       	call   c001783f <findRSDP()>
c0017cd9:	a3 8c 12 03 c0       	mov    ds:0xc003128c,eax
c0017cde:	a1 8c 12 03 c0       	mov    eax,ds:0xc003128c
c0017ce3:	85 c0                	test   eax,eax
c0017ce5:	75 19                	jne    c0017d00 <scanMADT()+0x46>
c0017ce7:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017cec:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cf2:	83 e2 fb             	and    edx,0xfffffffb
c0017cf5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cfb:	e9 3b 04 00 00       	jmp    c001813b <scanMADT()+0x481>
c0017d00:	a1 8c 12 03 c0       	mov    eax,ds:0xc003128c
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	50                   	push   eax
c0017d09:	e8 f2 fd ff ff       	call   c0017b00 <findRSDT(unsigned char*)>
c0017d0e:	83 c4 10             	add    esp,0x10
c0017d11:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0017d16:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0017d1b:	85 c0                	test   eax,eax
c0017d1d:	75 19                	jne    c0017d38 <scanMADT()+0x7e>
c0017d1f:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017d24:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d2a:	83 e2 fb             	and    edx,0xfffffffb
c0017d2d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d33:	e9 03 04 00 00       	jmp    c001813b <scanMADT()+0x481>
c0017d38:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	50                   	push   eax
c0017d41:	e8 93 fb ff ff       	call   c00178d9 <loadACPITables(unsigned char*)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0017d4e:	83 ec 08             	sub    esp,0x8
c0017d51:	68 d0 b8 02 c0       	push   0xc002b8d0
c0017d56:	50                   	push   eax
c0017d57:	e8 c2 fe ff ff       	call   c0017c1e <findDataTable(unsigned char*, char*)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d63:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d68:	75 19                	jne    c0017d83 <scanMADT()+0xc9>
c0017d6a:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0017d6f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d75:	83 e2 fe             	and    edx,0xfffffffe
c0017d78:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d7e:	e9 b8 03 00 00       	jmp    c001813b <scanMADT()+0x481>
c0017d83:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017d8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d92:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017d96:	0f 87 9f 03 00 00    	ja     c001813b <scanMADT()+0x481>
c0017d9c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017da4:	0f 87 91 03 00 00    	ja     c001813b <scanMADT()+0x481>
c0017daa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017db2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db6:	8d 50 01             	lea    edx,[eax+0x1]
c0017db9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dc5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017dc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dcd:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ddc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017de0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017de5:	0f 86 4f 03 00 00    	jbe    c001813a <scanMADT()+0x480>
c0017deb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017df0:	75 57                	jne    c0017e49 <scanMADT()+0x18f>
c0017df2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df6:	8d 50 01             	lea    edx,[eax+0x1]
c0017df9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dfd:	8a 15 80 14 03 c0    	mov    dl,BYTE PTR ds:0xc0031480
c0017e03:	0f b6 d2             	movzx  edx,dl
c0017e06:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e0a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e0e:	88 82 c0 14 03 c0    	mov    BYTE PTR [edx-0x3ffceb40],al
c0017e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e18:	8d 50 01             	lea    edx,[eax+0x1]
c0017e1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e1f:	8a 15 80 14 03 c0    	mov    dl,BYTE PTR ds:0xc0031480
c0017e25:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e28:	88 0d 80 14 03 c0    	mov    BYTE PTR ds:0xc0031480,cl
c0017e2e:	0f b6 d2             	movzx  edx,dl
c0017e31:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e35:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e39:	88 82 a0 14 03 c0    	mov    BYTE PTR [edx-0x3ffceb60],al
c0017e3f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e44:	e9 da 02 00 00       	jmp    c0018123 <scanMADT()+0x469>
c0017e49:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e4e:	0f 85 14 01 00 00    	jne    c0017f68 <scanMADT()+0x2ae>
c0017e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e58:	8d 50 01             	lea    edx,[eax+0x1]
c0017e5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e5f:	8a 15 40 13 03 c0    	mov    dl,BYTE PTR ds:0xc0031340
c0017e65:	0f b6 d2             	movzx  edx,dl
c0017e68:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e6c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e70:	88 82 60 13 03 c0    	mov    BYTE PTR [edx-0x3ffceca0],al
c0017e76:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e82:	01 d0                	add    eax,edx
c0017e84:	83 c0 2c             	add    eax,0x2c
c0017e87:	8a 00                	mov    al,BYTE PTR [eax]
c0017e89:	0f b6 d0             	movzx  edx,al
c0017e8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e90:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e97:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e9b:	0f b6 c0             	movzx  eax,al
c0017e9e:	c1 e0 08             	shl    eax,0x8
c0017ea1:	89 d1                	mov    ecx,edx
c0017ea3:	09 c1                	or     ecx,eax
c0017ea5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea9:	8d 50 02             	lea    edx,[eax+0x2]
c0017eac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eb0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017eb4:	0f b6 c0             	movzx  eax,al
c0017eb7:	c1 e0 10             	shl    eax,0x10
c0017eba:	09 c1                	or     ecx,eax
c0017ebc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec0:	8d 50 03             	lea    edx,[eax+0x3]
c0017ec3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ecb:	0f b6 c0             	movzx  eax,al
c0017ece:	c1 e0 18             	shl    eax,0x18
c0017ed1:	09 c1                	or     ecx,eax
c0017ed3:	89 ca                	mov    edx,ecx
c0017ed5:	a0 40 13 03 c0       	mov    al,ds:0xc0031340
c0017eda:	0f b6 c0             	movzx  eax,al
c0017edd:	89 14 85 80 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec80],edx
c0017ee4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef1:	01 d0                	add    eax,edx
c0017ef3:	83 c0 2c             	add    eax,0x2c
c0017ef6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ef8:	0f b6 d0             	movzx  edx,al
c0017efb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eff:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f06:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f0a:	0f b6 c0             	movzx  eax,al
c0017f0d:	c1 e0 08             	shl    eax,0x8
c0017f10:	89 d1                	mov    ecx,edx
c0017f12:	09 c1                	or     ecx,eax
c0017f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f18:	8d 50 02             	lea    edx,[eax+0x2]
c0017f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f23:	0f b6 c0             	movzx  eax,al
c0017f26:	c1 e0 10             	shl    eax,0x10
c0017f29:	09 c1                	or     ecx,eax
c0017f2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2f:	8d 50 03             	lea    edx,[eax+0x3]
c0017f32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f3a:	0f b6 c0             	movzx  eax,al
c0017f3d:	c1 e0 18             	shl    eax,0x18
c0017f40:	09 c1                	or     ecx,eax
c0017f42:	89 ca                	mov    edx,ecx
c0017f44:	a0 40 13 03 c0       	mov    al,ds:0xc0031340
c0017f49:	0f b6 c0             	movzx  eax,al
c0017f4c:	89 14 85 00 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec00],edx
c0017f53:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f58:	a0 40 13 03 c0       	mov    al,ds:0xc0031340
c0017f5d:	40                   	inc    eax
c0017f5e:	a2 40 13 03 c0       	mov    ds:0xc0031340,al
c0017f63:	e9 bb 01 00 00       	jmp    c0018123 <scanMADT()+0x469>
c0017f68:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f6d:	0f 85 e9 00 00 00    	jne    c001805c <scanMADT()+0x3a2>
c0017f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f77:	8d 50 01             	lea    edx,[eax+0x1]
c0017f7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f82:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f86:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017f8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f99:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f9d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fa1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa9:	01 d0                	add    eax,edx
c0017fab:	83 c0 2c             	add    eax,0x2c
c0017fae:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb0:	0f b6 d0             	movzx  edx,al
c0017fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fbe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc2:	0f b6 c0             	movzx  eax,al
c0017fc5:	c1 e0 08             	shl    eax,0x8
c0017fc8:	89 d1                	mov    ecx,edx
c0017fca:	09 c1                	or     ecx,eax
c0017fcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd0:	8d 50 02             	lea    edx,[eax+0x2]
c0017fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fdb:	0f b6 c0             	movzx  eax,al
c0017fde:	c1 e0 10             	shl    eax,0x10
c0017fe1:	09 c1                	or     ecx,eax
c0017fe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe7:	8d 50 03             	lea    edx,[eax+0x3]
c0017fea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff2:	0f b6 c0             	movzx  eax,al
c0017ff5:	c1 e0 18             	shl    eax,0x18
c0017ff8:	09 c8                	or     eax,ecx
c0017ffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ffe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018003:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018007:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800b:	01 d0                	add    eax,edx
c001800d:	83 c0 2c             	add    eax,0x2c
c0018010:	8a 00                	mov    al,BYTE PTR [eax]
c0018012:	0f b6 c0             	movzx  eax,al
c0018015:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018019:	8d 4a 01             	lea    ecx,[edx+0x1]
c001801c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018020:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018024:	0f b6 d2             	movzx  edx,dl
c0018027:	c1 e2 08             	shl    edx,0x8
c001802a:	09 d0                	or     eax,edx
c001802c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018031:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018036:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001803b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001803f:	88 90 00 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2400],dl
c0018045:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001804a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001804f:	66 89 84 12 20 13 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcece0],ax
c0018057:	e9 c7 00 00 00       	jmp    c0018123 <scanMADT()+0x469>
c001805c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018061:	0f 85 b0 00 00 00    	jne    c0018117 <scanMADT()+0x45d>
c0018067:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806b:	8d 50 01             	lea    edx,[eax+0x1]
c001806e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018072:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018076:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001807a:	0f b6 c0             	movzx  eax,al
c001807d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018081:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018089:	01 d0                	add    eax,edx
c001808b:	83 c0 2c             	add    eax,0x2c
c001808e:	8a 00                	mov    al,BYTE PTR [eax]
c0018090:	0f b6 d0             	movzx  edx,al
c0018093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018097:	8d 48 01             	lea    ecx,[eax+0x1]
c001809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	c1 e0 08             	shl    eax,0x8
c00180a8:	09 d0                	or     eax,edx
c00180aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180ae:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b7:	8d 50 01             	lea    edx,[eax+0x1]
c00180ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180c6:	0f b6 c0             	movzx  eax,al
c00180c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d1:	c1 e0 08             	shl    eax,0x8
c00180d4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00180d8:	89 c1                	mov    ecx,eax
c00180da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180de:	c1 e0 18             	shl    eax,0x18
c00180e1:	89 c3                	mov    ebx,eax
c00180e3:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c00180e8:	8d 50 01             	lea    edx,[eax+0x1]
c00180eb:	89 15 90 12 03 c0    	mov    DWORD PTR ds:0xc0031290,edx
c00180f1:	09 d9                	or     ecx,ebx
c00180f3:	89 ca                	mov    edx,ecx
c00180f5:	89 14 85 a0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced60],edx
c00180fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018108:	68 68 ba 02 c0       	push   0xc002ba68
c001810d:	e8 b1 ac ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	eb 0c                	jmp    c0018123 <scanMADT()+0x469>
c0018117:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001811c:	75 05                	jne    c0018123 <scanMADT()+0x469>
c001811e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018123:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018128:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001812c:	01 d0                	add    eax,edx
c001812e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018132:	e9 54 fc ff ff       	jmp    c0017d8b <scanMADT()+0xd1>
c0018137:	90                   	nop
c0018138:	eb 01                	jmp    c001813b <scanMADT()+0x481>
c001813a:	90                   	nop
c001813b:	83 c4 38             	add    esp,0x38
c001813e:	5b                   	pop    ebx
c001813f:	c3                   	ret    

c0018140 <ACPI::ACPI()>:
c0018140:	83 ec 0c             	sub    esp,0xc
c0018143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018147:	83 ec 08             	sub    esp,0x8
c001814a:	68 d5 b8 02 c0       	push   0xc002b8d5
c001814f:	50                   	push   eax
c0018150:	e8 8b c2 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	ba 04 bb 02 c0       	mov    edx,0xc002bb04
c001815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018161:	89 10                	mov    DWORD PTR [eax],edx
c0018163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018167:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001816e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018172:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001817c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018180:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018199:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181a0:	e8 15 fb ff ff       	call   c0017cba <scanMADT()>
c00181a5:	90                   	nop
c00181a6:	83 c4 0c             	add    esp,0xc
c00181a9:	c3                   	ret    

c00181aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181aa:	83 ec 2c             	sub    esp,0x2c
c00181ad:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181bd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181c2:	88 d0                	mov    al,dl
c00181c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181df:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00181e3:	0f 8d 97 00 00 00    	jge    c0018280 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00181e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181f1:	83 c2 2a             	add    edx,0x2a
c00181f4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00181f8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00181fd:	75 78                	jne    c0018277 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00181ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018203:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018207:	83 c2 2a             	add    edx,0x2a
c001820a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001820e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018212:	75 63                	jne    c0018277 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018214:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018219:	74 3a                	je     c0018255 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001821b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001821f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018223:	83 c2 2a             	add    edx,0x2a
c0018226:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001822a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001822e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018231:	39 c2                	cmp    edx,eax
c0018233:	74 10                	je     c0018245 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018235:	83 ec 0c             	sub    esp,0xc
c0018238:	68 a4 ba 02 c0       	push   0xc002baa4
c001823d:	e8 15 24 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0018242:	83 c4 10             	add    esp,0x10
c0018245:	83 ec 0c             	sub    esp,0xc
c0018248:	68 da b8 02 c0       	push   0xc002b8da
c001824d:	e8 05 24 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0018252:	83 c4 10             	add    esp,0x10
c0018255:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001825d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018261:	83 c2 2a             	add    edx,0x2a
c0018264:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018268:	8b 02                	mov    eax,DWORD PTR [edx]
c001826a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001826d:	89 01                	mov    DWORD PTR [ecx],eax
c001826f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018272:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018277:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001827b:	e9 55 ff ff ff       	jmp    c00181d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018280:	90                   	nop
c0018281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018285:	83 c4 2c             	add    esp,0x2c
c0018288:	c2 04 00             	ret    0x4
c001828b:	90                   	nop

c001828c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001828c:	83 ec 1c             	sub    esp,0x1c
c001828f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018293:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018297:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001829b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182a0:	88 c8                	mov    al,cl
c00182a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182a6:	88 d0                	mov    al,dl
c00182a8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ba:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182bd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182c1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182d3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182da:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00182df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182e9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00182ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00182f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f4:	83 c2 2a             	add    edx,0x2a
c00182f7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00182fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018309:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001830c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018310:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018318:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001831e:	8d 50 01             	lea    edx,[eax+0x1]
c0018321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018325:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001832b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018335:	3d 00 02 00 00       	cmp    eax,0x200
c001833a:	75 10                	jne    c001834c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	68 e9 b8 02 c0       	push   0xc002b8e9
c0018344:	e8 0e 23 00 00       	call   c001a657 <Krnl::panic(char const*)>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	90                   	nop
c001834d:	83 c4 1c             	add    esp,0x1c
c0018350:	c3                   	ret    
c0018351:	90                   	nop

c0018352 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018352:	b8 00 00 00 00       	mov    eax,0x0
c0018357:	c3                   	ret    

c0018358 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018358:	83 ec 1c             	sub    esp,0x1c
c001835b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001835f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018362:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018366:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001836b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018370:	83 ec 08             	sub    esp,0x8
c0018373:	52                   	push   edx
c0018374:	50                   	push   eax
c0018375:	e8 e6 6a ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c001837a:	83 c4 10             	add    esp,0x10
c001837d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018381:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0018386:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001838b:	83 ec 04             	sub    esp,0x4
c001838e:	6a 01                	push   0x1
c0018390:	52                   	push   edx
c0018391:	50                   	push   eax
c0018392:	e8 df 6b ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	90                   	nop
c001839b:	83 c4 1c             	add    esp,0x1c
c001839e:	c3                   	ret    
c001839f:	90                   	nop

c00183a0 <ACPI::sleep()>:
c00183a0:	83 ec 0c             	sub    esp,0xc
c00183a3:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c00183a8:	85 c0                	test   eax,eax
c00183aa:	74 07                	je     c00183b3 <ACPI::sleep()+0x13>
c00183ac:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c00183b1:	ff d0                	call   eax
c00183b3:	90                   	nop
c00183b4:	83 c4 0c             	add    esp,0xc
c00183b7:	c3                   	ret    

c00183b8 <ACPI::open(int, int, void*)>:
c00183b8:	57                   	push   edi
c00183b9:	56                   	push   esi
c00183ba:	53                   	push   ebx
c00183bb:	83 ec 60             	sub    esp,0x60
c00183be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00183c2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00183cd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183d4:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00183d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183df:	83 e0 04             	and    eax,0x4
c00183e2:	84 c0                	test   al,al
c00183e4:	74 47                	je     c001842d <ACPI::open(int, int, void*)+0x75>
c00183e6:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c00183eb:	83 ec 08             	sub    esp,0x8
c00183ee:	68 06 b9 02 c0       	push   0xc002b906
c00183f3:	50                   	push   eax
c00183f4:	e8 25 f8 ff ff       	call   c0017c1e <findDataTable(unsigned char*, char*)>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018400:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0018405:	74 26                	je     c001842d <ACPI::open(int, int, void*)+0x75>
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 0b b9 02 c0       	push   0xc002b90b
c001840f:	e8 af a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001841b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018422:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018426:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001842d:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018435:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018439:	8a 00                	mov    al,BYTE PTR [eax]
c001843b:	3c 01                	cmp    al,0x1
c001843d:	75 28                	jne    c0018467 <ACPI::open(int, int, void*)+0xaf>
c001843f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018443:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001844a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001844e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018455:	83 ec 0c             	sub    esp,0xc
c0018458:	68 1c b9 02 c0       	push   0xc002b91c
c001845d:	e8 61 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	eb 25                	jmp    c001848c <ACPI::open(int, int, void*)+0xd4>
c0018467:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001846b:	8a 00                	mov    al,BYTE PTR [eax]
c001846d:	3c 02                	cmp    al,0x2
c001846f:	75 1b                	jne    c001848c <ACPI::open(int, int, void*)+0xd4>
c0018471:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018475:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001847c:	83 ec 0c             	sub    esp,0xc
c001847f:	68 24 b9 02 c0       	push   0xc002b924
c0018484:	e8 3a a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018490:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018496:	83 f0 01             	xor    eax,0x1
c0018499:	84 c0                	test   al,al
c001849b:	74 6a                	je     c0018507 <ACPI::open(int, int, void*)+0x14f>
c001849d:	83 ec 0c             	sub    esp,0xc
c00184a0:	68 2c b9 02 c0       	push   0xc002b92c
c00184a5:	e8 19 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	e8 9e 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184b2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00184b6:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00184bb:	75 28                	jne    c00184e5 <ACPI::open(int, int, void*)+0x12d>
c00184bd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00184c1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00184cc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	68 3a b9 02 c0       	push   0xc002b93a
c00184db:	e8 e3 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	eb 22                	jmp    c0018507 <ACPI::open(int, int, void*)+0x14f>
c00184e5:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00184ea:	75 1b                	jne    c0018507 <ACPI::open(int, int, void*)+0x14f>
c00184ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00184f0:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f7:	83 ec 0c             	sub    esp,0xc
c00184fa:	68 44 b9 02 c0       	push   0xc002b944
c00184ff:	e8 bf a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018504:	83 c4 10             	add    esp,0x10
c0018507:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001850b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018511:	84 c0                	test   al,al
c0018513:	74 13                	je     c0018528 <ACPI::open(int, int, void*)+0x170>
c0018515:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018519:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001851f:	83 f0 01             	xor    eax,0x1
c0018522:	0f b6 c0             	movzx  eax,al
c0018525:	40                   	inc    eax
c0018526:	eb 05                	jmp    c001852d <ACPI::open(int, int, void*)+0x175>
c0018528:	b8 00 00 00 00       	mov    eax,0x0
c001852d:	83 ec 08             	sub    esp,0x8
c0018530:	50                   	push   eax
c0018531:	68 4e b9 02 c0       	push   0xc002b94e
c0018536:	e8 88 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018542:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018548:	84 c0                	test   al,al
c001854a:	74 67                	je     c00185b3 <ACPI::open(int, int, void*)+0x1fb>
c001854c:	c7 44 24 3c 58 01 00 00 	mov    DWORD PTR [esp+0x3c],0x158
c0018554:	83 ec 0c             	sub    esp,0xc
c0018557:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001855b:	e8 eb 72 ff ff       	call   c000f84b <malloc>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	89 c3                	mov    ebx,eax
c0018565:	83 ec 0c             	sub    esp,0xc
c0018568:	53                   	push   ebx
c0018569:	e8 1e a6 00 00       	call   c0022b8c <PCI::PCI()>
c001856e:	83 c4 10             	add    esp,0x10
c0018571:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018575:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018579:	83 ec 08             	sub    esp,0x8
c001857c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018580:	50                   	push   eax
c0018581:	e8 6a bc ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0018586:	83 c4 10             	add    esp,0x10
c0018589:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001858d:	8b 00                	mov    eax,DWORD PTR [eax]
c001858f:	83 c0 08             	add    eax,0x8
c0018592:	8b 00                	mov    eax,DWORD PTR [eax]
c0018594:	6a 00                	push   0x0
c0018596:	6a 00                	push   0x0
c0018598:	6a 00                	push   0x0
c001859a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001859e:	ff d0                	call   eax
c00185a0:	83 c4 10             	add    esp,0x10
c00185a3:	83 ec 0c             	sub    esp,0xc
c00185a6:	68 57 b9 02 c0       	push   0xc002b957
c00185ab:	e8 13 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00185b0:	83 c4 10             	add    esp,0x10
c00185b3:	83 ec 0c             	sub    esp,0xc
c00185b6:	68 62 b9 02 c0       	push   0xc002b962
c00185bb:	e8 16 48 00 00       	call   c001cdd6 <Thr::loadKernelSymbolTable(char const*)>
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	83 ec 0c             	sub    esp,0xc
c00185c6:	6a 0c                	push   0xc
c00185c8:	e8 67 96 ff ff       	call   c0011c34 <Virt::setupPageSwapping(int)>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00185d4:	83 ec 08             	sub    esp,0x8
c00185d7:	6a 12                	push   0x12
c00185d9:	50                   	push   eax
c00185da:	e8 81 bf ff ff       	call   c0014560 <getDevicesOfType(DeviceType)>
c00185df:	83 c4 0c             	add    esp,0xc
c00185e2:	83 ec 0c             	sub    esp,0xc
c00185e5:	8d 44 24 38          	lea    eax,[esp+0x38]
c00185e9:	50                   	push   eax
c00185ea:	e8 b5 09 01 00       	call   c0028fa4 <LinkedList<Device>::isEmpty()>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	83 f0 01             	xor    eax,0x1
c00185f5:	84 c0                	test   al,al
c00185f7:	0f 84 b7 00 00 00    	je     c00186b4 <ACPI::open(int, int, void*)+0x2fc>
c00185fd:	83 ec 0c             	sub    esp,0xc
c0018600:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018604:	50                   	push   eax
c0018605:	e8 b6 09 01 00       	call   c0028fc0 <LinkedList<Device>::getFirstElement()>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018611:	83 ec 0c             	sub    esp,0xc
c0018614:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018618:	50                   	push   eax
c0018619:	e8 aa 09 01 00       	call   c0028fc8 <LinkedList<Device>::removeFirst()>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018625:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018629:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001862d:	83 ec 0c             	sub    esp,0xc
c0018630:	50                   	push   eax
c0018631:	e8 a6 be ff ff       	call   c00144dc <Device::getName()>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	83 ec 08             	sub    esp,0x8
c001863c:	50                   	push   eax
c001863d:	68 d4 ba 02 c0       	push   0xc002bad4
c0018642:	e8 7c a7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018647:	83 c4 10             	add    esp,0x10
c001864a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001864e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018652:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018658:	ba 09 00 00 00       	mov    edx,0x9
c001865d:	fc                   	cld    
c001865e:	89 c7                	mov    edi,eax
c0018660:	89 de                	mov    esi,ebx
c0018662:	89 d1                	mov    ecx,edx
c0018664:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018666:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001866a:	0f b6 c0             	movzx  eax,al
c001866d:	83 ec 08             	sub    esp,0x8
c0018670:	50                   	push   eax
c0018671:	68 80 b9 02 c0       	push   0xc002b980
c0018676:	e8 48 a7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018682:	0f b6 c0             	movzx  eax,al
c0018685:	83 ec 08             	sub    esp,0x8
c0018688:	50                   	push   eax
c0018689:	68 92 b9 02 c0       	push   0xc002b992
c001868e:	e8 30 a7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001869b:	0f b7 c0             	movzx  eax,ax
c001869e:	83 ec 08             	sub    esp,0x8
c00186a1:	50                   	push   eax
c00186a2:	68 a4 b9 02 c0       	push   0xc002b9a4
c00186a7:	e8 17 a7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00186ac:	83 c4 10             	add    esp,0x10
c00186af:	e9 2e ff ff ff       	jmp    c00185e2 <ACPI::open(int, int, void*)+0x22a>
c00186b4:	83 ec 0c             	sub    esp,0xc
c00186b7:	8d 44 24 38          	lea    eax,[esp+0x38]
c00186bb:	50                   	push   eax
c00186bc:	e8 e1 08 01 00       	call   c0028fa2 <LinkedList<Device>::~LinkedList()>
c00186c1:	83 c4 10             	add    esp,0x10
c00186c4:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c00186ca:	83 ec 08             	sub    esp,0x8
c00186cd:	6a 01                	push   0x1
c00186cf:	68 b6 b9 02 c0       	push   0xc002b9b6
c00186d4:	e8 74 51 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	83 ec 08             	sub    esp,0x8
c00186df:	53                   	push   ebx
c00186e0:	50                   	push   eax
c00186e1:	e8 9b 53 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c00186e6:	83 c4 10             	add    esp,0x10
c00186e9:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c00186ef:	83 ec 08             	sub    esp,0x8
c00186f2:	6a 01                	push   0x1
c00186f4:	68 d3 b9 02 c0       	push   0xc002b9d3
c00186f9:	e8 4f 51 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	83 ec 08             	sub    esp,0x8
c0018704:	53                   	push   ebx
c0018705:	50                   	push   eax
c0018706:	e8 76 53 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c001870b:	83 c4 10             	add    esp,0x10
c001870e:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0018713:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018719:	83 e0 04             	and    eax,0x4
c001871c:	84 c0                	test   al,al
c001871e:	0f 84 d3 00 00 00    	je     c00187f7 <ACPI::open(int, int, void*)+0x43f>
c0018724:	c7 44 24 38 14 01 00 00 	mov    DWORD PTR [esp+0x38],0x114
c001872c:	83 ec 0c             	sub    esp,0xc
c001872f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018733:	e8 13 71 ff ff       	call   c000f84b <malloc>
c0018738:	83 c4 10             	add    esp,0x10
c001873b:	89 c3                	mov    ebx,eax
c001873d:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0018742:	83 ec 04             	sub    esp,0x4
c0018745:	50                   	push   eax
c0018746:	68 f0 b9 02 c0       	push   0xc002b9f0
c001874b:	53                   	push   ebx
c001874c:	e8 d1 ab ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018758:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c001875d:	74 17                	je     c0018776 <ACPI::open(int, int, void*)+0x3be>
c001875f:	83 ec 0c             	sub    esp,0xc
c0018762:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0018766:	e8 89 ae ff ff       	call   c00135f4 <File::exists()>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	84 c0                	test   al,al
c0018770:	74 04                	je     c0018776 <ACPI::open(int, int, void*)+0x3be>
c0018772:	b0 01                	mov    al,0x1
c0018774:	eb 02                	jmp    c0018778 <ACPI::open(int, int, void*)+0x3c0>
c0018776:	b0 00                	mov    al,0x0
c0018778:	84 c0                	test   al,al
c001877a:	74 22                	je     c001879e <ACPI::open(int, int, void*)+0x3e6>
c001877c:	83 ec 08             	sub    esp,0x8
c001877f:	6a 01                	push   0x1
c0018781:	68 f0 b9 02 c0       	push   0xc002b9f0
c0018786:	e8 c2 50 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	83 ec 08             	sub    esp,0x8
c0018791:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018795:	50                   	push   eax
c0018796:	e8 e6 52 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00187a3:	74 1e                	je     c00187c3 <ACPI::open(int, int, void*)+0x40b>
c00187a5:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00187aa:	74 17                	je     c00187c3 <ACPI::open(int, int, void*)+0x40b>
c00187ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00187b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b2:	83 c0 08             	add    eax,0x8
c00187b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b7:	83 ec 0c             	sub    esp,0xc
c00187ba:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00187be:	ff d0                	call   eax
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c00187c8:	83 ec 08             	sub    esp,0x8
c00187cb:	68 0d ba 02 c0       	push   0xc002ba0d
c00187d0:	50                   	push   eax
c00187d1:	e8 48 f4 ff ff       	call   c0017c1e <findDataTable(unsigned char*, char*)>
c00187d6:	83 c4 10             	add    esp,0x10
c00187d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00187dd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00187e2:	74 13                	je     c00187f7 <ACPI::open(int, int, void*)+0x43f>
c00187e4:	83 ec 08             	sub    esp,0x8
c00187e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00187eb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00187ef:	e8 64 fb ff ff       	call   c0018358 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	b8 00 00 00 00       	mov    eax,0x0
c00187fc:	83 c4 60             	add    esp,0x60
c00187ff:	5b                   	pop    ebx
c0018800:	5e                   	pop    esi
c0018801:	5f                   	pop    edi
c0018802:	c3                   	ret    
c0018803:	90                   	nop

c0018804 <CPU::close(int, int, void*)>:
c0018804:	31 c0                	xor    eax,eax
c0018806:	c3                   	ret    
c0018807:	90                   	nop

c0018808 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018808:	55                   	push   ebp
c0018809:	57                   	push   edi
c001880a:	56                   	push   esi
c001880b:	53                   	push   ebx
c001880c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018810:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018814:	89 ce                	mov    esi,ecx
c0018816:	89 d5                	mov    ebp,edx
c0018818:	80 f9 04             	cmp    cl,0x4
c001881b:	75 28                	jne    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001881d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018820:	3c 03                	cmp    al,0x3
c0018822:	0f 86 63 01 00 00    	jbe    c001898b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018828:	80 fa 03             	cmp    dl,0x3
c001882b:	0f 84 5a 01 00 00    	je     c001898b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018831:	8d 7a f2             	lea    edi,[edx-0xe]
c0018834:	b8 d0 dd 02 c0       	mov    eax,0xc002ddd0
c0018839:	89 fb                	mov    ebx,edi
c001883b:	80 fb 01             	cmp    bl,0x1
c001883e:	77 4e                	ja     c001888e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018840:	e9 52 01 00 00       	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018845:	80 f9 05             	cmp    cl,0x5
c0018848:	75 4d                	jne    c0018897 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001884a:	b8 e0 dd 02 c0       	mov    eax,0xc002dde0
c001884f:	80 fa 03             	cmp    dl,0x3
c0018852:	0f 86 3f 01 00 00    	jbe    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018858:	8d 7a fa             	lea    edi,[edx-0x6]
c001885b:	b8 f0 dd 02 c0       	mov    eax,0xc002ddf0
c0018860:	89 fb                	mov    ebx,edi
c0018862:	80 fb 01             	cmp    bl,0x1
c0018865:	0f 86 2c 01 00 00    	jbe    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886b:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0018870:	80 fa 08             	cmp    dl,0x8
c0018873:	0f 84 1e 01 00 00    	je     c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018879:	89 d7                	mov    edi,edx
c001887b:	b8 10 de 02 c0       	mov    eax,0xc002de10
c0018880:	83 e7 fb             	and    edi,0xfffffffb
c0018883:	89 fb                	mov    ebx,edi
c0018885:	80 fb 09             	cmp    bl,0x9
c0018888:	0f 84 09 01 00 00    	je     c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888e:	31 c0                	xor    eax,eax
c0018890:	89 eb                	mov    ebx,ebp
c0018892:	0f b6 fb             	movzx  edi,bl
c0018895:	eb 30                	jmp    c00188c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018897:	31 c0                	xor    eax,eax
c0018899:	80 f9 06             	cmp    cl,0x6
c001889c:	75 f2                	jne    c0018890 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001889e:	80 fa 0a             	cmp    dl,0xa
c00188a1:	77 ed                	ja     c0018890 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188a3:	bf de 05 00 00       	mov    edi,0x5de
c00188a8:	0f a3 d7             	bt     edi,edx
c00188ab:	73 e3                	jae    c0018890 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188ad:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00188b2:	e9 e0 00 00 00       	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b7:	39 c7                	cmp    edi,eax
c00188b9:	0f 84 d3 00 00 00    	je     c0018992 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188bf:	40                   	inc    eax
c00188c0:	3d d0 00 00 00       	cmp    eax,0xd0
c00188c5:	74 09                	je     c00188d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188c7:	89 f3                	mov    ebx,esi
c00188c9:	80 fb 0f             	cmp    bl,0xf
c00188cc:	75 f1                	jne    c00188bf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188ce:	eb e7                	jmp    c00188b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188d0:	80 f9 10             	cmp    cl,0x10
c00188d3:	75 14                	jne    c00188e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188d5:	8d 42 fc             	lea    eax,[edx-0x4]
c00188d8:	83 e0 fb             	and    eax,0xfffffffb
c00188db:	3c 02                	cmp    al,0x2
c00188dd:	76 34                	jbe    c0018913 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188df:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c00188e4:	80 fa 02             	cmp    dl,0x2
c00188e7:	eb 24                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188e9:	80 f9 11             	cmp    cl,0x11
c00188ec:	75 13                	jne    c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188ee:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c00188f3:	80 fa 03             	cmp    dl,0x3
c00188f6:	0f 85 9b 00 00 00    	jne    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fc:	e9 91 00 00 00       	jmp    c0018992 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018901:	80 f9 12             	cmp    cl,0x12
c0018904:	75 14                	jne    c001891a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018906:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c001890b:	fe ca                	dec    dl
c001890d:	0f 85 84 00 00 00    	jne    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018913:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0018918:	eb 7d                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891a:	80 f9 14             	cmp    cl,0x14
c001891d:	75 12                	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001891f:	4a                   	dec    edx
c0018920:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018925:	80 fa 01             	cmp    dl,0x1
c0018928:	77 6d                	ja     c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892a:	b8 50 de 02 c0       	mov    eax,0xc002de50
c001892f:	eb 66                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018931:	80 f9 15             	cmp    cl,0x15
c0018934:	75 31                	jne    c0018967 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018936:	b8 60 de 02 c0       	mov    eax,0xc002de60
c001893b:	80 fa 01             	cmp    dl,0x1
c001893e:	74 57                	je     c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018940:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018945:	80 fa 13             	cmp    dl,0x13
c0018948:	76 0c                	jbe    c0018956 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001894a:	80 fa 30             	cmp    dl,0x30
c001894d:	75 48                	jne    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894f:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0018954:	eb 41                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018956:	b9 04 00 09 00       	mov    ecx,0x90004
c001895b:	0f a3 d1             	bt     ecx,edx
c001895e:	73 37                	jae    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018960:	b8 70 de 02 c0       	mov    eax,0xc002de70
c0018965:	eb 30                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018967:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c001896c:	80 f9 16             	cmp    cl,0x16
c001896f:	75 26                	jne    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018971:	b8 90 de 02 c0       	mov    eax,0xc002de90
c0018976:	84 d2                	test   dl,dl
c0018978:	74 1d                	je     c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897a:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c001897f:	80 fa 30             	cmp    dl,0x30
c0018982:	75 13                	jne    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018984:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0018989:	eb 0c                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898b:	b8 c0 dd 02 c0       	mov    eax,0xc002ddc0
c0018990:	eb 05                	jmp    c0018997 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018992:	b8 30 de 02 c0       	mov    eax,0xc002de30
c0018997:	5b                   	pop    ebx
c0018998:	5e                   	pop    esi
c0018999:	5f                   	pop    edi
c001899a:	5d                   	pop    ebp
c001899b:	c3                   	ret    

c001899c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001899c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189a4:	80 f9 04             	cmp    cl,0x4
c00189a7:	75 6b                	jne    c0018a14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189a9:	b8 20 dc 02 c0       	mov    eax,0xc002dc20
c00189ae:	80 fa 01             	cmp    dl,0x1
c00189b1:	0f 86 92 02 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b7:	b8 30 dc 02 c0       	mov    eax,0xc002dc30
c00189bc:	80 fa 02             	cmp    dl,0x2
c00189bf:	0f 84 84 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c5:	b8 40 dc 02 c0       	mov    eax,0xc002dc40
c00189ca:	80 fa 03             	cmp    dl,0x3
c00189cd:	0f 84 76 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 50 dc 02 c0       	mov    eax,0xc002dc50
c00189d8:	80 fa 04             	cmp    dl,0x4
c00189db:	0f 84 68 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 60 dc 02 c0       	mov    eax,0xc002dc60
c00189e6:	80 fa 05             	cmp    dl,0x5
c00189e9:	0f 84 5a 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 40 dc 02 c0       	mov    eax,0xc002dc40
c00189f4:	80 fa 07             	cmp    dl,0x7
c00189f7:	0f 84 4c 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	83 ea 08             	sub    edx,0x8
c0018a00:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018a05:	80 fa 01             	cmp    dl,0x1
c0018a08:	0f 87 3b 02 00 00    	ja     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0e:	b8 70 dc 02 c0       	mov    eax,0xc002dc70
c0018a13:	c3                   	ret    
c0018a14:	80 f9 05             	cmp    cl,0x5
c0018a17:	75 45                	jne    c0018a5e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a19:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a1c:	b8 80 dc 02 c0       	mov    eax,0xc002dc80
c0018a21:	80 f9 02             	cmp    cl,0x2
c0018a24:	0f 86 1f 02 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	80 fa 04             	cmp    dl,0x4
c0018a2d:	0f 84 f3 01 00 00    	je     c0018c26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a33:	80 fa 07             	cmp    dl,0x7
c0018a36:	0f 84 0d 02 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3c:	b8 90 dc 02 c0       	mov    eax,0xc002dc90
c0018a41:	80 fa 08             	cmp    dl,0x8
c0018a44:	0f 84 ff 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4a:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018a4f:	80 fa 09             	cmp    dl,0x9
c0018a52:	0f 85 f1 01 00 00    	jne    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a58:	b8 a0 dc 02 c0       	mov    eax,0xc002dca0
c0018a5d:	c3                   	ret    
c0018a5e:	80 f9 06             	cmp    cl,0x6
c0018a61:	0f 85 85 01 00 00    	jne    c0018bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a67:	b8 b0 dc 02 c0       	mov    eax,0xc002dcb0
c0018a6c:	80 fa 01             	cmp    dl,0x1
c0018a6f:	0f 84 d4 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a75:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a78:	3c 01                	cmp    al,0x1
c0018a7a:	0f 86 ac 01 00 00    	jbe    c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a80:	80 fa 03             	cmp    dl,0x3
c0018a83:	0f 84 a3 01 00 00    	je     c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a89:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a8c:	b8 d0 dc 02 c0       	mov    eax,0xc002dcd0
c0018a91:	80 f9 01             	cmp    cl,0x1
c0018a94:	0f 86 af 01 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9a:	80 fa 09             	cmp    dl,0x9
c0018a9d:	0f 84 8f 01 00 00    	je     c0018c32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018aa3:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018aa6:	80 f9 01             	cmp    cl,0x1
c0018aa9:	0f 86 9a 01 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaf:	b8 e0 dc 02 c0       	mov    eax,0xc002dce0
c0018ab4:	80 fa 0d             	cmp    dl,0xd
c0018ab7:	0f 84 8c 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abd:	b8 f0 dc 02 c0       	mov    eax,0xc002dcf0
c0018ac2:	80 fa 0e             	cmp    dl,0xe
c0018ac5:	0f 84 7e 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 00 dd 02 c0       	mov    eax,0xc002dd00
c0018ad0:	80 fa 0f             	cmp    dl,0xf
c0018ad3:	0f 84 70 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	b8 e0 dc 02 c0       	mov    eax,0xc002dce0
c0018ade:	80 fa 15             	cmp    dl,0x15
c0018ae1:	0f 84 62 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae7:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018aea:	b8 00 dd 02 c0       	mov    eax,0xc002dd00
c0018aef:	80 f9 01             	cmp    cl,0x1
c0018af2:	0f 86 51 01 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af8:	80 fa 1a             	cmp    dl,0x1a
c0018afb:	0f 84 37 01 00 00    	je     c0018c38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b01:	80 fa 1c             	cmp    dl,0x1c
c0018b04:	0f 84 34 01 00 00    	je     c0018c3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b0a:	80 fa 1d             	cmp    dl,0x1d
c0018b0d:	0f 84 36 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b13:	b8 30 dd 02 c0       	mov    eax,0xc002dd30
c0018b18:	80 fa 25             	cmp    dl,0x25
c0018b1b:	0f 84 28 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b21:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b24:	b8 20 dd 02 c0       	mov    eax,0xc002dd20
c0018b29:	80 f9 01             	cmp    cl,0x1
c0018b2c:	0f 86 17 01 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b32:	b8 40 dd 02 c0       	mov    eax,0xc002dd40
c0018b37:	80 fa 2a             	cmp    dl,0x2a
c0018b3a:	0f 84 09 01 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b40:	b8 30 dd 02 c0       	mov    eax,0xc002dd30
c0018b45:	80 fa 2c             	cmp    dl,0x2c
c0018b48:	0f 84 fb 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4e:	b8 40 dd 02 c0       	mov    eax,0xc002dd40
c0018b53:	80 fa 2d             	cmp    dl,0x2d
c0018b56:	0f 84 ed 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5c:	b8 10 dd 02 c0       	mov    eax,0xc002dd10
c0018b61:	80 fa 2e             	cmp    dl,0x2e
c0018b64:	0f 84 df 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	b8 30 dd 02 c0       	mov    eax,0xc002dd30
c0018b6f:	80 fa 2f             	cmp    dl,0x2f
c0018b72:	0f 84 d1 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b7b:	b8 20 dd 02 c0       	mov    eax,0xc002dd20
c0018b80:	80 f9 01             	cmp    cl,0x1
c0018b83:	0f 86 c0 00 00 00    	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b89:	b8 50 dd 02 c0       	mov    eax,0xc002dd50
c0018b8e:	80 fa 37             	cmp    dl,0x37
c0018b91:	0f 84 b2 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	b8 60 dd 02 c0       	mov    eax,0xc002dd60
c0018b9c:	80 fa 3a             	cmp    dl,0x3a
c0018b9f:	0f 84 a4 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba5:	b8 70 dd 02 c0       	mov    eax,0xc002dd70
c0018baa:	80 fa 3c             	cmp    dl,0x3c
c0018bad:	0f 84 96 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	b8 80 dd 02 c0       	mov    eax,0xc002dd80
c0018bb8:	80 fa 3d             	cmp    dl,0x3d
c0018bbb:	0f 84 88 00 00 00    	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc1:	b8 60 dd 02 c0       	mov    eax,0xc002dd60
c0018bc6:	80 fa 3e             	cmp    dl,0x3e
c0018bc9:	74 7e                	je     c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcb:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bce:	3c 01                	cmp    al,0x1
c0018bd0:	76 72                	jbe    c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bd2:	80 fa 3f             	cmp    dl,0x3f
c0018bd5:	74 6d                	je     c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bd7:	80 fa 4a             	cmp    dl,0x4a
c0018bda:	74 0a                	je     c0018be6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bdc:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018be1:	80 fa 4d             	cmp    dl,0x4d
c0018be4:	75 63                	jne    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be6:	b8 50 dd 02 c0       	mov    eax,0xc002dd50
c0018beb:	c3                   	ret    
c0018bec:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018bf1:	80 f9 0b             	cmp    cl,0xb
c0018bf4:	75 0a                	jne    c0018c00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bf6:	fe ca                	dec    dl
c0018bf8:	75 4f                	jne    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfa:	b8 90 dd 02 c0       	mov    eax,0xc002dd90
c0018bff:	c3                   	ret    
c0018c00:	80 f9 0f             	cmp    cl,0xf
c0018c03:	75 44                	jne    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c05:	b8 a0 dd 02 c0       	mov    eax,0xc002dda0
c0018c0a:	80 fa 02             	cmp    dl,0x2
c0018c0d:	76 3a                	jbe    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c12:	3c 01                	cmp    al,0x1
c0018c14:	76 0a                	jbe    c0018c20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c16:	b8 1a be 02 c0       	mov    eax,0xc002be1a
c0018c1b:	80 fa 06             	cmp    dl,0x6
c0018c1e:	75 29                	jne    c0018c49 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c20:	b8 b0 dd 02 c0       	mov    eax,0xc002ddb0
c0018c25:	c3                   	ret    
c0018c26:	b8 90 dc 02 c0       	mov    eax,0xc002dc90
c0018c2b:	c3                   	ret    
c0018c2c:	b8 c0 dc 02 c0       	mov    eax,0xc002dcc0
c0018c31:	c3                   	ret    
c0018c32:	b8 e0 dc 02 c0       	mov    eax,0xc002dce0
c0018c37:	c3                   	ret    
c0018c38:	b8 10 dd 02 c0       	mov    eax,0xc002dd10
c0018c3d:	c3                   	ret    
c0018c3e:	b8 20 dd 02 c0       	mov    eax,0xc002dd20
c0018c43:	c3                   	ret    
c0018c44:	b8 70 dd 02 c0       	mov    eax,0xc002dd70
c0018c49:	c3                   	ret    

c0018c4a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c4a:	60                   	pusha  
c0018c4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c57:	9c                   	pushf  
c0018c58:	fa                   	cli    
c0018c59:	0f 09                	wbinvd 
c0018c5b:	0f 30                	wrmsr  
c0018c5d:	9d                   	popf   
c0018c5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c62:	89 02                	mov    DWORD PTR [edx],eax
c0018c64:	61                   	popa   
c0018c65:	c3                   	ret    

c0018c66 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c66:	60                   	pusha  
c0018c67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c6b:	9c                   	pushf  
c0018c6c:	fa                   	cli    
c0018c6d:	0f 09                	wbinvd 
c0018c6f:	31 c0                	xor    eax,eax
c0018c71:	31 d2                	xor    edx,edx
c0018c73:	0f 32                	rdmsr  
c0018c75:	9d                   	popf   
c0018c76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c7a:	89 02                	mov    DWORD PTR [edx],eax
c0018c7c:	61                   	popa   
c0018c7d:	c3                   	ret    

c0018c7e <CPU::AMD_K6_writeback(int, int, int)>:
c0018c7e:	56                   	push   esi
c0018c7f:	53                   	push   ebx
c0018c80:	83 ec 10             	sub    esp,0x10
c0018c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c87:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c8c:	75 5d                	jne    c0018ceb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c8e:	83 f8 08             	cmp    eax,0x8
c0018c91:	75 09                	jne    c0018c9c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c93:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c98:	7e 13                	jle    c0018cad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c9a:	eb 30                	jmp    c0018ccc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c9c:	83 f8 06             	cmp    eax,0x6
c0018c9f:	7c 4a                	jl     c0018ceb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ca1:	83 f8 07             	cmp    eax,0x7
c0018ca4:	7e 07                	jle    c0018cad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ca6:	83 f8 09             	cmp    eax,0x9
c0018ca9:	74 21                	je     c0018ccc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cab:	eb 3e                	jmp    c0018ceb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cad:	89 e6                	mov    esi,esp
c0018caf:	8b 1d e8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9e8
c0018cb5:	56                   	push   esi
c0018cb6:	c1 eb 15             	shr    ebx,0x15
c0018cb9:	68 82 00 00 c0       	push   0xc0000082
c0018cbe:	83 e3 7e             	and    ebx,0x7e
c0018cc1:	e8 a0 ff ff ff       	call   c0018c66 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cc6:	56                   	push   esi
c0018cc7:	6a 00                	push   0x0
c0018cc9:	53                   	push   ebx
c0018cca:	eb 12                	jmp    c0018cde <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ccc:	89 e3                	mov    ebx,esp
c0018cce:	53                   	push   ebx
c0018ccf:	68 82 00 00 c0       	push   0xc0000082
c0018cd4:	e8 8d ff ff ff       	call   c0018c66 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cd9:	53                   	push   ebx
c0018cda:	6a 00                	push   0x0
c0018cdc:	6a 00                	push   0x0
c0018cde:	68 82 00 00 c0       	push   0xc0000082
c0018ce3:	e8 62 ff ff ff       	call   c0018c4a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ce8:	83 c4 18             	add    esp,0x18
c0018ceb:	83 c4 10             	add    esp,0x10
c0018cee:	5b                   	pop    ebx
c0018cef:	5e                   	pop    esi
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop

c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018cf2:	55                   	push   ebp
c0018cf3:	57                   	push   edi
c0018cf4:	56                   	push   esi
c0018cf5:	53                   	push   ebx
c0018cf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cfa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cfe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d02:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d06:	39 05 c0 de 02 c0    	cmp    DWORD PTR ds:0xc002dec0,eax
c0018d0c:	75 23                	jne    c0018d31 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d0e:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0018d13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d17:	89 06                	mov    DWORD PTR [esi],eax
c0018d19:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c0018d1e:	89 07                	mov    DWORD PTR [edi],eax
c0018d20:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c0018d25:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d28:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c0018d2d:	89 02                	mov    DWORD PTR [edx],eax
c0018d2f:	eb 3f                	jmp    c0018d70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d31:	31 c9                	xor    ecx,ecx
c0018d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d37:	0f a2                	cpuid  
c0018d39:	89 06                	mov    DWORD PTR [esi],eax
c0018d3b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d41:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d44:	89 10                	mov    DWORD PTR [eax],edx
c0018d46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d4a:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0018d4f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d51:	a3 ec 14 03 c0       	mov    ds:0xc00314ec,eax
c0018d56:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d58:	a3 e8 14 03 c0       	mov    ds:0xc00314e8,eax
c0018d5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d60:	a3 e4 14 03 c0       	mov    ds:0xc00314e4,eax
c0018d65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d69:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d6b:	a3 e0 14 03 c0       	mov    ds:0xc00314e0,eax
c0018d70:	5b                   	pop    ebx
c0018d71:	5e                   	pop    esi
c0018d72:	5f                   	pop    edi
c0018d73:	5d                   	pop    ebp
c0018d74:	c3                   	ret    
c0018d75:	90                   	nop

c0018d76 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d76:	83 ec 10             	sub    esp,0x10
c0018d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7d:	50                   	push   eax
c0018d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d82:	50                   	push   eax
c0018d83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d87:	50                   	push   eax
c0018d88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8c:	50                   	push   eax
c0018d8d:	6a 01                	push   0x1
c0018d8f:	e8 5e ff ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d98:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d9c:	0f 95 c0             	setne  al
c0018d9f:	83 c4 24             	add    esp,0x24
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <CPU::cpuidCheckECX(unsigned int)>:
c0018da4:	83 ec 10             	sub    esp,0x10
c0018da7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dab:	50                   	push   eax
c0018dac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db0:	50                   	push   eax
c0018db1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db5:	50                   	push   eax
c0018db6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dba:	50                   	push   eax
c0018dbb:	6a 01                	push   0x1
c0018dbd:	e8 30 ff ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dca:	0f 95 c0             	setne  al
c0018dcd:	83 c4 24             	add    esp,0x24
c0018dd0:	c3                   	ret    
c0018dd1:	90                   	nop

c0018dd2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dd2:	83 ec 10             	sub    esp,0x10
c0018dd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd9:	50                   	push   eax
c0018dda:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dde:	50                   	push   eax
c0018ddf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de3:	50                   	push   eax
c0018de4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de8:	50                   	push   eax
c0018de9:	6a 07                	push   0x7
c0018deb:	e8 02 ff ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018df4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018df8:	0f 95 c0             	setne  al
c0018dfb:	83 c4 24             	add    esp,0x24
c0018dfe:	c3                   	ret    
c0018dff:	90                   	nop

c0018e00 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e00:	83 ec 10             	sub    esp,0x10
c0018e03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e07:	50                   	push   eax
c0018e08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e0c:	50                   	push   eax
c0018e0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e11:	50                   	push   eax
c0018e12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e16:	50                   	push   eax
c0018e17:	6a 07                	push   0x7
c0018e19:	e8 d4 fe ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e22:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e26:	0f 95 c0             	setne  al
c0018e29:	83 c4 24             	add    esp,0x24
c0018e2c:	c3                   	ret    
c0018e2d:	90                   	nop

c0018e2e <CPU::CPU()>:
c0018e2e:	83 ec 0c             	sub    esp,0xc
c0018e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e35:	83 ec 08             	sub    esp,0x8
c0018e38:	68 1a be 02 c0       	push   0xc002be1a
c0018e3d:	50                   	push   eax
c0018e3e:	e8 9d b5 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c0018e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e4f:	89 10                	mov    DWORD PTR [eax],edx
c0018e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e55:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e63:	05 78 01 00 00       	add    eax,0x178
c0018e68:	83 ec 0c             	sub    esp,0xc
c0018e6b:	50                   	push   eax
c0018e6c:	e8 ef 61 ff ff       	call   c000f060 <GDT::GDT()>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e78:	05 7c 09 00 00       	add    eax,0x97c
c0018e7d:	83 ec 0c             	sub    esp,0xc
c0018e80:	50                   	push   eax
c0018e81:	e8 3c 64 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018e86:	83 c4 10             	add    esp,0x10
c0018e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8d:	05 7c 11 00 00       	add    eax,0x117c
c0018e92:	83 ec 0c             	sub    esp,0xc
c0018e95:	50                   	push   eax
c0018e96:	e8 85 84 ff ff       	call   c0011320 <TSS::TSS()>
c0018e9b:	83 c4 10             	add    esp,0x10
c0018e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ead:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018eb7:	90                   	nop
c0018eb8:	83 c4 0c             	add    esp,0xc
c0018ebb:	c3                   	ret    

c0018ebc <CPU::displayFeatures()>:
c0018ebc:	53                   	push   ebx
c0018ebd:	83 ec 10             	sub    esp,0x10
c0018ec0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ec4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018eca:	68 28 bb 02 c0       	push   0xc002bb28
c0018ecf:	e8 ef 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ed4:	59                   	pop    ecx
c0018ed5:	58                   	pop    eax
c0018ed6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018edc:	50                   	push   eax
c0018edd:	68 39 bb 02 c0       	push   0xc002bb39
c0018ee2:	e8 dc 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ee7:	58                   	pop    eax
c0018ee8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eee:	5a                   	pop    edx
c0018eef:	c1 e8 0e             	shr    eax,0xe
c0018ef2:	0f b6 c0             	movzx  eax,al
c0018ef5:	50                   	push   eax
c0018ef6:	68 4a bb 02 c0       	push   0xc002bb4a
c0018efb:	e8 c3 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f00:	59                   	pop    ecx
c0018f01:	58                   	pop    eax
c0018f02:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f08:	66 c1 e8 06          	shr    ax,0x6
c0018f0c:	0f b6 c0             	movzx  eax,al
c0018f0f:	50                   	push   eax
c0018f10:	68 5b bb 02 c0       	push   0xc002bb5b
c0018f15:	e8 a9 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f1a:	c7 04 24 08 c0 02 c0 	mov    DWORD PTR [esp],0xc002c008
c0018f21:	e8 9d 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f26:	83 c4 10             	add    esp,0x10
c0018f29:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018f2e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f35:	74 05                	je     c0018f3c <CPU::displayFeatures()+0x80>
c0018f37:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018f3c:	52                   	push   edx
c0018f3d:	52                   	push   edx
c0018f3e:	50                   	push   eax
c0018f3f:	68 6c bb 02 c0       	push   0xc002bb6c
c0018f44:	e8 7a 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f49:	83 c4 10             	add    esp,0x10
c0018f4c:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018f51:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f58:	78 05                	js     c0018f5f <CPU::displayFeatures()+0xa3>
c0018f5a:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018f5f:	51                   	push   ecx
c0018f60:	51                   	push   ecx
c0018f61:	50                   	push   eax
c0018f62:	68 83 bb 02 c0       	push   0xc002bb83
c0018f67:	e8 57 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f6c:	83 c4 10             	add    esp,0x10
c0018f6f:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018f74:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f7b:	75 05                	jne    c0018f82 <CPU::displayFeatures()+0xc6>
c0018f7d:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018f82:	52                   	push   edx
c0018f83:	52                   	push   edx
c0018f84:	50                   	push   eax
c0018f85:	68 9a bb 02 c0       	push   0xc002bb9a
c0018f8a:	e8 34 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018f97:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f9e:	75 05                	jne    c0018fa5 <CPU::displayFeatures()+0xe9>
c0018fa0:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018fa5:	51                   	push   ecx
c0018fa6:	51                   	push   ecx
c0018fa7:	50                   	push   eax
c0018fa8:	68 b1 bb 02 c0       	push   0xc002bbb1
c0018fad:	e8 11 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018fba:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fc1:	75 05                	jne    c0018fc8 <CPU::displayFeatures()+0x10c>
c0018fc3:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018fc8:	52                   	push   edx
c0018fc9:	52                   	push   edx
c0018fca:	50                   	push   eax
c0018fcb:	68 c8 bb 02 c0       	push   0xc002bbc8
c0018fd0:	e8 ee 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0018fdd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fe4:	75 05                	jne    c0018feb <CPU::displayFeatures()+0x12f>
c0018fe6:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0018feb:	51                   	push   ecx
c0018fec:	51                   	push   ecx
c0018fed:	50                   	push   eax
c0018fee:	68 df bb 02 c0       	push   0xc002bbdf
c0018ff3:	e8 cb 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0019000:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019007:	75 05                	jne    c001900e <CPU::displayFeatures()+0x152>
c0019009:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c001900e:	52                   	push   edx
c001900f:	52                   	push   edx
c0019010:	50                   	push   eax
c0019011:	68 f6 bb 02 c0       	push   0xc002bbf6
c0019016:	e8 a8 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0019023:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001902a:	75 05                	jne    c0019031 <CPU::displayFeatures()+0x175>
c001902c:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0019031:	51                   	push   ecx
c0019032:	51                   	push   ecx
c0019033:	50                   	push   eax
c0019034:	68 0d bc 02 c0       	push   0xc002bc0d
c0019039:	e8 85 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0019046:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001904d:	75 05                	jne    c0019054 <CPU::displayFeatures()+0x198>
c001904f:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0019054:	52                   	push   edx
c0019055:	52                   	push   edx
c0019056:	50                   	push   eax
c0019057:	68 24 bc 02 c0       	push   0xc002bc24
c001905c:	e8 62 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0019069:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019070:	75 05                	jne    c0019077 <CPU::displayFeatures()+0x1bb>
c0019072:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0019077:	51                   	push   ecx
c0019078:	51                   	push   ecx
c0019079:	50                   	push   eax
c001907a:	68 3b bc 02 c0       	push   0xc002bc3b
c001907f:	e8 3f 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c001908c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019093:	75 05                	jne    c001909a <CPU::displayFeatures()+0x1de>
c0019095:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c001909a:	52                   	push   edx
c001909b:	52                   	push   edx
c001909c:	50                   	push   eax
c001909d:	68 52 bc 02 c0       	push   0xc002bc52
c00190a2:	e8 1c 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c00190af:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190b6:	75 05                	jne    c00190bd <CPU::displayFeatures()+0x201>
c00190b8:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c00190bd:	51                   	push   ecx
c00190be:	51                   	push   ecx
c00190bf:	50                   	push   eax
c00190c0:	68 69 bc 02 c0       	push   0xc002bc69
c00190c5:	e8 f9 9c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c00190d2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190d9:	75 05                	jne    c00190e0 <CPU::displayFeatures()+0x224>
c00190db:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c00190e0:	52                   	push   edx
c00190e1:	52                   	push   edx
c00190e2:	50                   	push   eax
c00190e3:	68 80 bc 02 c0       	push   0xc002bc80
c00190e8:	e8 d6 9c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c00190f5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190fc:	78 05                	js     c0019103 <CPU::displayFeatures()+0x247>
c00190fe:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0019103:	51                   	push   ecx
c0019104:	51                   	push   ecx
c0019105:	50                   	push   eax
c0019106:	68 97 bc 02 c0       	push   0xc002bc97
c001910b:	e8 b3 9c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	b8 72 a4 02 c0       	mov    eax,0xc002a472
c0019118:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001911f:	75 05                	jne    c0019126 <CPU::displayFeatures()+0x26a>
c0019121:	b8 76 a4 02 c0       	mov    eax,0xc002a476
c0019126:	52                   	push   edx
c0019127:	52                   	push   edx
c0019128:	50                   	push   eax
c0019129:	68 ae bc 02 c0       	push   0xc002bcae
c001912e:	e8 90 9c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019133:	83 c4 18             	add    esp,0x18
c0019136:	5b                   	pop    ebx
c0019137:	c3                   	ret    

c0019138 <CPU::detectFeatures()>:
c0019138:	55                   	push   ebp
c0019139:	57                   	push   edi
c001913a:	56                   	push   esi
c001913b:	53                   	push   ebx
c001913c:	83 ec 50             	sub    esp,0x50
c001913f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019143:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001914d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019154:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001915a:	6a 0d                	push   0xd
c001915c:	6a 00                	push   0x0
c001915e:	57                   	push   edi
c001915f:	e8 1c 76 fe ff       	call   c0000780 <memset>
c0019164:	83 c4 10             	add    esp,0x10
c0019167:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001916c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019173:	0f 84 20 09 00 00    	je     c0019a99 <CPU::detectFeatures()+0x961>
c0019179:	83 ec 0c             	sub    esp,0xc
c001917c:	6a 10                	push   0x10
c001917e:	e8 f3 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c0019183:	83 e0 01             	and    eax,0x1
c0019186:	8d 14 00             	lea    edx,[eax+eax*1]
c0019189:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001918f:	83 e0 fd             	and    eax,0xfffffffd
c0019192:	09 d0                	or     eax,edx
c0019194:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001919a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191a1:	e8 d0 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c00191a6:	83 e0 01             	and    eax,0x1
c00191a9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b6:	83 e0 fb             	and    eax,0xfffffffb
c00191b9:	09 d0                	or     eax,edx
c00191bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191c8:	e8 a9 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c00191cd:	83 e0 01             	and    eax,0x1
c00191d0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191d7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191dd:	83 e0 f7             	and    eax,0xfffffff7
c00191e0:	09 d0                	or     eax,edx
c00191e2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191ef:	e8 82 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c00191f4:	83 e0 01             	and    eax,0x1
c00191f7:	c1 e0 04             	shl    eax,0x4
c00191fa:	88 c2                	mov    dl,al
c00191fc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019202:	83 e0 ef             	and    eax,0xffffffef
c0019205:	09 d0                	or     eax,edx
c0019207:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001920d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019214:	e8 5d fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c0019219:	83 e0 01             	and    eax,0x1
c001921c:	c1 e0 05             	shl    eax,0x5
c001921f:	88 c2                	mov    dl,al
c0019221:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019227:	83 e0 df             	and    eax,0xffffffdf
c001922a:	09 d0                	or     eax,edx
c001922c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019232:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019239:	e8 38 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c001923e:	83 e0 01             	and    eax,0x1
c0019241:	8d 14 00             	lea    edx,[eax+eax*1]
c0019244:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001924a:	83 e0 fd             	and    eax,0xfffffffd
c001924d:	09 d0                	or     eax,edx
c001924f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019255:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001925c:	e8 15 fb ff ff       	call   c0018d76 <CPU::cpuidCheckEDX(unsigned int)>
c0019261:	83 e0 01             	and    eax,0x1
c0019264:	c1 e0 06             	shl    eax,0x6
c0019267:	88 c2                	mov    dl,al
c0019269:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001926f:	83 e0 bf             	and    eax,0xffffffbf
c0019272:	09 d0                	or     eax,edx
c0019274:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001927a:	58                   	pop    eax
c001927b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001927f:	56                   	push   esi
c0019280:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019284:	55                   	push   ebp
c0019285:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019289:	50                   	push   eax
c001928a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001928e:	52                   	push   edx
c001928f:	6a 00                	push   0x0
c0019291:	e8 5c fa ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019296:	83 c4 1c             	add    esp,0x1c
c0019299:	6a 04                	push   0x4
c001929b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001929f:	50                   	push   eax
c00192a0:	57                   	push   edi
c00192a1:	e8 a6 74 fe ff       	call   c000074c <memcpy>
c00192a6:	83 c4 0c             	add    esp,0xc
c00192a9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192af:	6a 04                	push   0x4
c00192b1:	56                   	push   esi
c00192b2:	50                   	push   eax
c00192b3:	e8 94 74 fe ff       	call   c000074c <memcpy>
c00192b8:	83 c4 0c             	add    esp,0xc
c00192bb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192c1:	6a 04                	push   0x4
c00192c3:	55                   	push   ebp
c00192c4:	50                   	push   eax
c00192c5:	e8 82 74 fe ff       	call   c000074c <memcpy>
c00192ca:	58                   	pop    eax
c00192cb:	5a                   	pop    edx
c00192cc:	68 c5 bc 02 c0       	push   0xc002bcc5
c00192d1:	57                   	push   edi
c00192d2:	e8 f1 75 fe ff       	call   c00008c8 <strcmp>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	85 c0                	test   eax,eax
c00192dc:	75 0f                	jne    c00192ed <CPU::detectFeatures()+0x1b5>
c00192de:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192e8:	e9 22 02 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00192ed:	50                   	push   eax
c00192ee:	50                   	push   eax
c00192ef:	68 d2 bc 02 c0       	push   0xc002bcd2
c00192f4:	57                   	push   edi
c00192f5:	e8 ce 75 fe ff       	call   c00008c8 <strcmp>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	85 c0                	test   eax,eax
c00192ff:	74 dd                	je     c00192de <CPU::detectFeatures()+0x1a6>
c0019301:	51                   	push   ecx
c0019302:	51                   	push   ecx
c0019303:	68 df bc 02 c0       	push   0xc002bcdf
c0019308:	57                   	push   edi
c0019309:	e8 ba 75 fe ff       	call   c00008c8 <strcmp>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	85 c0                	test   eax,eax
c0019313:	74 2a                	je     c001933f <CPU::detectFeatures()+0x207>
c0019315:	52                   	push   edx
c0019316:	52                   	push   edx
c0019317:	68 ec bc 02 c0       	push   0xc002bcec
c001931c:	57                   	push   edi
c001931d:	e8 a6 75 fe ff       	call   c00008c8 <strcmp>
c0019322:	83 c4 10             	add    esp,0x10
c0019325:	85 c0                	test   eax,eax
c0019327:	74 16                	je     c001933f <CPU::detectFeatures()+0x207>
c0019329:	50                   	push   eax
c001932a:	50                   	push   eax
c001932b:	68 f9 bc 02 c0       	push   0xc002bcf9
c0019330:	57                   	push   edi
c0019331:	e8 92 75 fe ff       	call   c00008c8 <strcmp>
c0019336:	83 c4 10             	add    esp,0x10
c0019339:	85 c0                	test   eax,eax
c001933b:	74 48                	je     c0019385 <CPU::detectFeatures()+0x24d>
c001933d:	eb 0f                	jmp    c001934e <CPU::detectFeatures()+0x216>
c001933f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019349:	e9 c1 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c001934e:	50                   	push   eax
c001934f:	50                   	push   eax
c0019350:	68 06 bd 02 c0       	push   0xc002bd06
c0019355:	57                   	push   edi
c0019356:	e8 6d 75 fe ff       	call   c00008c8 <strcmp>
c001935b:	83 c4 10             	add    esp,0x10
c001935e:	85 c0                	test   eax,eax
c0019360:	74 23                	je     c0019385 <CPU::detectFeatures()+0x24d>
c0019362:	50                   	push   eax
c0019363:	50                   	push   eax
c0019364:	68 13 bd 02 c0       	push   0xc002bd13
c0019369:	57                   	push   edi
c001936a:	e8 59 75 fe ff       	call   c00008c8 <strcmp>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	85 c0                	test   eax,eax
c0019374:	75 1e                	jne    c0019394 <CPU::detectFeatures()+0x25c>
c0019376:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019380:	e9 8a 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019385:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001938f:	e9 7b 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019394:	50                   	push   eax
c0019395:	50                   	push   eax
c0019396:	68 20 bd 02 c0       	push   0xc002bd20
c001939b:	57                   	push   edi
c001939c:	e8 27 75 fe ff       	call   c00008c8 <strcmp>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	85 c0                	test   eax,eax
c00193a6:	75 0f                	jne    c00193b7 <CPU::detectFeatures()+0x27f>
c00193a8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193b2:	e9 58 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00193b7:	50                   	push   eax
c00193b8:	50                   	push   eax
c00193b9:	68 df bc 02 c0       	push   0xc002bcdf
c00193be:	57                   	push   edi
c00193bf:	e8 04 75 fe ff       	call   c00008c8 <strcmp>
c00193c4:	83 c4 10             	add    esp,0x10
c00193c7:	85 c0                	test   eax,eax
c00193c9:	75 0f                	jne    c00193da <CPU::detectFeatures()+0x2a2>
c00193cb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193d5:	e9 35 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00193da:	50                   	push   eax
c00193db:	50                   	push   eax
c00193dc:	68 2d bd 02 c0       	push   0xc002bd2d
c00193e1:	57                   	push   edi
c00193e2:	e8 e1 74 fe ff       	call   c00008c8 <strcmp>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	85 c0                	test   eax,eax
c00193ec:	75 0f                	jne    c00193fd <CPU::detectFeatures()+0x2c5>
c00193ee:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193f8:	e9 12 01 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00193fd:	51                   	push   ecx
c00193fe:	51                   	push   ecx
c00193ff:	68 3a bd 02 c0       	push   0xc002bd3a
c0019404:	57                   	push   edi
c0019405:	e8 be 74 fe ff       	call   c00008c8 <strcmp>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	85 c0                	test   eax,eax
c001940f:	75 0f                	jne    c0019420 <CPU::detectFeatures()+0x2e8>
c0019411:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001941b:	e9 ef 00 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019420:	52                   	push   edx
c0019421:	52                   	push   edx
c0019422:	68 47 bd 02 c0       	push   0xc002bd47
c0019427:	57                   	push   edi
c0019428:	e8 9b 74 fe ff       	call   c00008c8 <strcmp>
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	85 c0                	test   eax,eax
c0019432:	75 0f                	jne    c0019443 <CPU::detectFeatures()+0x30b>
c0019434:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001943e:	e9 cc 00 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019443:	50                   	push   eax
c0019444:	50                   	push   eax
c0019445:	68 54 bd 02 c0       	push   0xc002bd54
c001944a:	57                   	push   edi
c001944b:	e8 78 74 fe ff       	call   c00008c8 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	75 0f                	jne    c0019466 <CPU::detectFeatures()+0x32e>
c0019457:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019461:	e9 a9 00 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019466:	50                   	push   eax
c0019467:	50                   	push   eax
c0019468:	68 61 bd 02 c0       	push   0xc002bd61
c001946d:	57                   	push   edi
c001946e:	e8 55 74 fe ff       	call   c00008c8 <strcmp>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	85 c0                	test   eax,eax
c0019478:	75 0f                	jne    c0019489 <CPU::detectFeatures()+0x351>
c001947a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019484:	e9 86 00 00 00       	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c0019489:	50                   	push   eax
c001948a:	50                   	push   eax
c001948b:	68 6e bd 02 c0       	push   0xc002bd6e
c0019490:	57                   	push   edi
c0019491:	e8 32 74 fe ff       	call   c00008c8 <strcmp>
c0019496:	83 c4 10             	add    esp,0x10
c0019499:	85 c0                	test   eax,eax
c001949b:	75 0c                	jne    c00194a9 <CPU::detectFeatures()+0x371>
c001949d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194a7:	eb 66                	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00194a9:	50                   	push   eax
c00194aa:	50                   	push   eax
c00194ab:	68 7b bd 02 c0       	push   0xc002bd7b
c00194b0:	57                   	push   edi
c00194b1:	e8 12 74 fe ff       	call   c00008c8 <strcmp>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	85 c0                	test   eax,eax
c00194bb:	75 0c                	jne    c00194c9 <CPU::detectFeatures()+0x391>
c00194bd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194c7:	eb 46                	jmp    c001950f <CPU::detectFeatures()+0x3d7>
c00194c9:	50                   	push   eax
c00194ca:	50                   	push   eax
c00194cb:	68 88 bd 02 c0       	push   0xc002bd88
c00194d0:	57                   	push   edi
c00194d1:	e8 f2 73 fe ff       	call   c00008c8 <strcmp>
c00194d6:	83 c4 10             	add    esp,0x10
c00194d9:	85 c0                	test   eax,eax
c00194db:	74 e0                	je     c00194bd <CPU::detectFeatures()+0x385>
c00194dd:	50                   	push   eax
c00194de:	50                   	push   eax
c00194df:	68 95 bd 02 c0       	push   0xc002bd95
c00194e4:	57                   	push   edi
c00194e5:	e8 de 73 fe ff       	call   c00008c8 <strcmp>
c00194ea:	83 c4 10             	add    esp,0x10
c00194ed:	85 c0                	test   eax,eax
c00194ef:	74 cc                	je     c00194bd <CPU::detectFeatures()+0x385>
c00194f1:	51                   	push   ecx
c00194f2:	51                   	push   ecx
c00194f3:	68 a2 bd 02 c0       	push   0xc002bda2
c00194f8:	57                   	push   edi
c00194f9:	e8 ca 73 fe ff       	call   c00008c8 <strcmp>
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	85 c0                	test   eax,eax
c0019503:	74 b8                	je     c00194bd <CPU::detectFeatures()+0x385>
c0019505:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001950f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019514:	0f 86 be 00 00 00    	jbe    c00195d8 <CPU::detectFeatures()+0x4a0>
c001951a:	83 ec 0c             	sub    esp,0xc
c001951d:	68 80 00 00 00       	push   0x80
c0019522:	e8 ab f8 ff ff       	call   c0018dd2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019527:	83 e0 01             	and    eax,0x1
c001952a:	c1 e0 06             	shl    eax,0x6
c001952d:	88 c2                	mov    dl,al
c001952f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019535:	83 e0 bf             	and    eax,0xffffffbf
c0019538:	09 d0                	or     eax,edx
c001953a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019540:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019547:	e8 86 f8 ff ff       	call   c0018dd2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001954c:	83 e0 01             	and    eax,0x1
c001954f:	c1 e0 04             	shl    eax,0x4
c0019552:	88 c2                	mov    dl,al
c0019554:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001955a:	83 e0 ef             	and    eax,0xffffffef
c001955d:	09 d0                	or     eax,edx
c001955f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019565:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001956c:	e8 61 f8 ff ff       	call   c0018dd2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019571:	c1 e0 07             	shl    eax,0x7
c0019574:	88 c2                	mov    dl,al
c0019576:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001957c:	83 e0 7f             	and    eax,0x7f
c001957f:	09 d0                	or     eax,edx
c0019581:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019587:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001958e:	e8 6d f8 ff ff       	call   c0018e00 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019593:	83 e0 01             	and    eax,0x1
c0019596:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001959d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195a3:	83 e0 f7             	and    eax,0xfffffff7
c00195a6:	09 d0                	or     eax,edx
c00195a8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195ae:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195b5:	e8 46 f8 ff ff       	call   c0018e00 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	83 e0 01             	and    eax,0x1
c00195c0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195c7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195cd:	83 e0 fb             	and    eax,0xfffffffb
c00195d0:	09 d0                	or     eax,edx
c00195d2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195d8:	83 ec 0c             	sub    esp,0xc
c00195db:	56                   	push   esi
c00195dc:	55                   	push   ebp
c00195dd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195e1:	57                   	push   edi
c00195e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195e6:	50                   	push   eax
c00195e7:	6a 01                	push   0x1
c00195e9:	e8 04 f7 ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195ee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195f2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195f8:	88 ca                	mov    dl,cl
c00195fa:	83 e0 f0             	and    eax,0xfffffff0
c00195fd:	83 e2 0f             	and    edx,0xf
c0019600:	09 d0                	or     eax,edx
c0019602:	88 ca                	mov    dl,cl
c0019604:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001960a:	c0 ea 04             	shr    dl,0x4
c001960d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019611:	0f b6 c2             	movzx  eax,dl
c0019614:	83 c4 20             	add    esp,0x20
c0019617:	c1 e0 06             	shl    eax,0x6
c001961a:	89 c5                	mov    ebp,eax
c001961c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019622:	66 25 3f c0          	and    ax,0xc03f
c0019626:	09 e8                	or     eax,ebp
c0019628:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001962f:	89 c8                	mov    eax,ecx
c0019631:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019637:	c1 e8 08             	shr    eax,0x8
c001963a:	83 e2 3f             	and    edx,0x3f
c001963d:	83 e0 0f             	and    eax,0xf
c0019640:	89 c5                	mov    ebp,eax
c0019642:	c1 e5 06             	shl    ebp,0x6
c0019645:	09 d5                	or     ebp,edx
c0019647:	89 ea                	mov    edx,ebp
c0019649:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001964f:	88 c2                	mov    dl,al
c0019651:	c0 ea 02             	shr    dl,0x2
c0019654:	89 d5                	mov    ebp,edx
c0019656:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001965c:	83 e2 c0             	and    edx,0xffffffc0
c001965f:	09 d5                	or     ebp,edx
c0019661:	89 ea                	mov    edx,ebp
c0019663:	89 cd                	mov    ebp,ecx
c0019665:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001966b:	c1 ed 0c             	shr    ebp,0xc
c001966e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019674:	83 e5 03             	and    ebp,0x3
c0019677:	83 e2 cf             	and    edx,0xffffffcf
c001967a:	c1 e5 04             	shl    ebp,0x4
c001967d:	09 d5                	or     ebp,edx
c001967f:	3c 06                	cmp    al,0x6
c0019681:	89 ea                	mov    edx,ebp
c0019683:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019689:	74 04                	je     c001968f <CPU::detectFeatures()+0x557>
c001968b:	3c 0f                	cmp    al,0xf
c001968d:	75 5c                	jne    c00196eb <CPU::detectFeatures()+0x5b3>
c001968f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019693:	89 cd                	mov    ebp,ecx
c0019695:	c1 ed 10             	shr    ebp,0x10
c0019698:	c1 e5 04             	shl    ebp,0x4
c001969b:	09 ea                	or     edx,ebp
c001969d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196a3:	0f b6 d2             	movzx  edx,dl
c00196a6:	66 81 e5 3f c0       	and    bp,0xc03f
c00196ab:	c1 e2 06             	shl    edx,0x6
c00196ae:	09 ea                	or     edx,ebp
c00196b0:	3c 0f                	cmp    al,0xf
c00196b2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196b9:	75 30                	jne    c00196eb <CPU::detectFeatures()+0x5b3>
c00196bb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196c1:	c1 e9 14             	shr    ecx,0x14
c00196c4:	83 e0 3f             	and    eax,0x3f
c00196c7:	83 c1 0f             	add    ecx,0xf
c00196ca:	88 ca                	mov    dl,cl
c00196cc:	c0 e9 02             	shr    cl,0x2
c00196cf:	c1 e2 06             	shl    edx,0x6
c00196d2:	09 d0                	or     eax,edx
c00196d4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196da:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196e0:	83 e0 c0             	and    eax,0xffffffc0
c00196e3:	09 c1                	or     ecx,eax
c00196e5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196f5:	56                   	push   esi
c00196f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196fa:	50                   	push   eax
c00196fb:	57                   	push   edi
c00196fc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019700:	55                   	push   ebp
c0019701:	68 00 00 00 80       	push   0x80000000
c0019706:	e8 e7 f5 ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001970b:	83 c4 20             	add    esp,0x20
c001970e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019716:	8d 44 24 18          	lea    eax,[esp+0x18]
c001971a:	76 1e                	jbe    c001973a <CPU::detectFeatures()+0x602>
c001971c:	83 ec 0c             	sub    esp,0xc
c001971f:	56                   	push   esi
c0019720:	50                   	push   eax
c0019721:	57                   	push   edi
c0019722:	55                   	push   ebp
c0019723:	68 01 00 00 80       	push   0x80000001
c0019728:	e8 c5 f5 ff ff       	call   c0018cf2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001972d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019737:	83 c4 20             	add    esp,0x20
c001973a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019740:	83 f8 01             	cmp    eax,0x1
c0019743:	75 6f                	jne    c00197b4 <CPU::detectFeatures()+0x67c>
c0019745:	51                   	push   ecx
c0019746:	51                   	push   ecx
c0019747:	68 ae bd 02 c0       	push   0xc002bdae
c001974c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019750:	56                   	push   esi
c0019751:	e8 e6 70 fe ff       	call   c000083c <strcpy>
c0019756:	5f                   	pop    edi
c0019757:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001975d:	5d                   	pop    ebp
c001975e:	66 c1 e8 06          	shr    ax,0x6
c0019762:	0f b6 c0             	movzx  eax,al
c0019765:	50                   	push   eax
c0019766:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001976c:	c1 e8 0e             	shr    eax,0xe
c001976f:	0f b6 c0             	movzx  eax,al
c0019772:	50                   	push   eax
c0019773:	e8 24 f2 ff ff       	call   c001899c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019778:	5a                   	pop    edx
c0019779:	59                   	pop    ecx
c001977a:	50                   	push   eax
c001977b:	56                   	push   esi
c001977c:	e8 fb 71 fe ff       	call   c000097c <strcat>
c0019781:	5f                   	pop    edi
c0019782:	5d                   	pop    ebp
c0019783:	56                   	push   esi
c0019784:	53                   	push   ebx
c0019785:	e8 48 ac ff ff       	call   c00143d2 <Device::setName(char const*)>
c001978a:	58                   	pop    eax
c001978b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019791:	5a                   	pop    edx
c0019792:	68 b5 bd 02 c0       	push   0xc002bdb5
c0019797:	50                   	push   eax
c0019798:	e8 2b 71 fe ff       	call   c00008c8 <strcmp>
c001979d:	83 c4 10             	add    esp,0x10
c00197a0:	85 c0                	test   eax,eax
c00197a2:	0f 85 71 03 00 00    	jne    c0019b19 <CPU::detectFeatures()+0x9e1>
c00197a8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197af:	e9 65 03 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x9e1>
c00197b4:	83 f8 02             	cmp    eax,0x2
c00197b7:	0f 85 b5 00 00 00    	jne    c0019872 <CPU::detectFeatures()+0x73a>
c00197bd:	57                   	push   edi
c00197be:	57                   	push   edi
c00197bf:	68 c7 bd 02 c0       	push   0xc002bdc7
c00197c4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197c8:	56                   	push   esi
c00197c9:	e8 6e 70 fe ff       	call   c000083c <strcpy>
c00197ce:	5d                   	pop    ebp
c00197cf:	58                   	pop    eax
c00197d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d6:	66 c1 e8 06          	shr    ax,0x6
c00197da:	0f b6 c0             	movzx  eax,al
c00197dd:	50                   	push   eax
c00197de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197e4:	c1 e8 0e             	shr    eax,0xe
c00197e7:	0f b6 c0             	movzx  eax,al
c00197ea:	50                   	push   eax
c00197eb:	e8 18 f0 ff ff       	call   c0018808 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197f0:	5a                   	pop    edx
c00197f1:	59                   	pop    ecx
c00197f2:	50                   	push   eax
c00197f3:	56                   	push   esi
c00197f4:	e8 83 71 fe ff       	call   c000097c <strcat>
c00197f9:	5f                   	pop    edi
c00197fa:	5d                   	pop    ebp
c00197fb:	56                   	push   esi
c00197fc:	53                   	push   ebx
c00197fd:	e8 d0 ab ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019802:	58                   	pop    eax
c0019803:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019809:	5a                   	pop    edx
c001980a:	68 cc bd 02 c0       	push   0xc002bdcc
c001980f:	50                   	push   eax
c0019810:	e8 b3 70 fe ff       	call   c00008c8 <strcmp>
c0019815:	83 c4 10             	add    esp,0x10
c0019818:	85 c0                	test   eax,eax
c001981a:	75 20                	jne    c001983c <CPU::detectFeatures()+0x704>
c001981c:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c0019822:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019828:	a8 01                	test   al,0x1
c001982a:	74 10                	je     c001983c <CPU::detectFeatures()+0x704>
c001982c:	83 e0 fe             	and    eax,0xfffffffe
c001982f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019835:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001983c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019842:	c1 e8 0e             	shr    eax,0xe
c0019845:	3c 05                	cmp    al,0x5
c0019847:	0f 85 cc 02 00 00    	jne    c0019b19 <CPU::detectFeatures()+0x9e1>
c001984d:	56                   	push   esi
c001984e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019854:	83 e0 0f             	and    eax,0xf
c0019857:	50                   	push   eax
c0019858:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001985e:	66 c1 e8 06          	shr    ax,0x6
c0019862:	0f b6 c0             	movzx  eax,al
c0019865:	50                   	push   eax
c0019866:	6a 05                	push   0x5
c0019868:	e8 11 f4 ff ff       	call   c0018c7e <CPU::AMD_K6_writeback(int, int, int)>
c001986d:	e9 1f 02 00 00       	jmp    c0019a91 <CPU::detectFeatures()+0x959>
c0019872:	8d 50 fd             	lea    edx,[eax-0x3]
c0019875:	83 fa 01             	cmp    edx,0x1
c0019878:	76 09                	jbe    c0019883 <CPU::detectFeatures()+0x74b>
c001987a:	83 f8 06             	cmp    eax,0x6
c001987d:	0f 85 91 01 00 00    	jne    c0019a14 <CPU::detectFeatures()+0x8dc>
c0019883:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019889:	c1 ea 0e             	shr    edx,0xe
c001988c:	80 fa 05             	cmp    dl,0x5
c001988f:	75 7b                	jne    c001990c <CPU::detectFeatures()+0x7d4>
c0019891:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019897:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001989c:	66 81 fa 00 01       	cmp    dx,0x100
c00198a1:	75 0c                	jne    c00198af <CPU::detectFeatures()+0x777>
c00198a3:	51                   	push   ecx
c00198a4:	51                   	push   ecx
c00198a5:	68 d3 bd 02 c0       	push   0xc002bdd3
c00198aa:	e9 dc 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c00198af:	66 81 fa 00 02       	cmp    dx,0x200
c00198b4:	75 0c                	jne    c00198c2 <CPU::detectFeatures()+0x78a>
c00198b6:	52                   	push   edx
c00198b7:	52                   	push   edx
c00198b8:	68 e6 bd 02 c0       	push   0xc002bde6
c00198bd:	e9 c9 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c00198c2:	66 81 fa 40 02       	cmp    dx,0x240
c00198c7:	75 0c                	jne    c00198d5 <CPU::detectFeatures()+0x79d>
c00198c9:	50                   	push   eax
c00198ca:	50                   	push   eax
c00198cb:	68 f8 bd 02 c0       	push   0xc002bdf8
c00198d0:	e9 b6 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c00198d5:	83 f8 06             	cmp    eax,0x6
c00198d8:	75 0c                	jne    c00198e6 <CPU::detectFeatures()+0x7ae>
c00198da:	50                   	push   eax
c00198db:	50                   	push   eax
c00198dc:	68 0a be 02 c0       	push   0xc002be0a
c00198e1:	e9 a5 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c00198e6:	83 f8 04             	cmp    eax,0x4
c00198e9:	75 0c                	jne    c00198f7 <CPU::detectFeatures()+0x7bf>
c00198eb:	50                   	push   eax
c00198ec:	50                   	push   eax
c00198ed:	68 16 be 02 c0       	push   0xc002be16
c00198f2:	e9 94 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c00198f7:	83 f8 03             	cmp    eax,0x3
c00198fa:	0f 85 19 02 00 00    	jne    c0019b19 <CPU::detectFeatures()+0x9e1>
c0019900:	50                   	push   eax
c0019901:	50                   	push   eax
c0019902:	68 1e be 02 c0       	push   0xc002be1e
c0019907:	e9 7f 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c001990c:	80 fa 06             	cmp    dl,0x6
c001990f:	0f 85 db 00 00 00    	jne    c00199f0 <CPU::detectFeatures()+0x8b8>
c0019915:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001991b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019920:	66 81 fa 80 01       	cmp    dx,0x180
c0019925:	75 0c                	jne    c0019933 <CPU::detectFeatures()+0x7fb>
c0019927:	50                   	push   eax
c0019928:	50                   	push   eax
c0019929:	68 29 be 02 c0       	push   0xc002be29
c001992e:	e9 58 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019933:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019939:	66 f7 c1 80 ff       	test   cx,0xff80
c001993e:	75 0c                	jne    c001994c <CPU::detectFeatures()+0x814>
c0019940:	50                   	push   eax
c0019941:	50                   	push   eax
c0019942:	68 39 be 02 c0       	push   0xc002be39
c0019947:	e9 3f 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c001994c:	66 81 fa 40 02       	cmp    dx,0x240
c0019951:	75 0c                	jne    c001995f <CPU::detectFeatures()+0x827>
c0019953:	55                   	push   ebp
c0019954:	55                   	push   ebp
c0019955:	68 40 be 02 c0       	push   0xc002be40
c001995a:	e9 2c 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c001995f:	66 81 fa 80 02       	cmp    dx,0x280
c0019964:	75 0c                	jne    c0019972 <CPU::detectFeatures()+0x83a>
c0019966:	57                   	push   edi
c0019967:	57                   	push   edi
c0019968:	68 49 be 02 c0       	push   0xc002be49
c001996d:	e9 19 01 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019972:	66 81 fa 40 03       	cmp    dx,0x340
c0019977:	74 ed                	je     c0019966 <CPU::detectFeatures()+0x82e>
c0019979:	66 81 fa c0 03       	cmp    dx,0x3c0
c001997e:	75 0c                	jne    c001998c <CPU::detectFeatures()+0x854>
c0019980:	56                   	push   esi
c0019981:	56                   	push   esi
c0019982:	68 50 be 02 c0       	push   0xc002be50
c0019987:	e9 ff 00 00 00       	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c001998c:	83 f8 06             	cmp    eax,0x6
c001998f:	0f 84 45 ff ff ff    	je     c00198da <CPU::detectFeatures()+0x7a2>
c0019995:	83 f8 04             	cmp    eax,0x4
c0019998:	0f 84 4d ff ff ff    	je     c00198eb <CPU::detectFeatures()+0x7b3>
c001999e:	83 f8 03             	cmp    eax,0x3
c00199a1:	0f 85 72 01 00 00    	jne    c0019b19 <CPU::detectFeatures()+0x9e1>
c00199a7:	51                   	push   ecx
c00199a8:	51                   	push   ecx
c00199a9:	68 59 be 02 c0       	push   0xc002be59
c00199ae:	53                   	push   ebx
c00199af:	e8 1e aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c00199b4:	b1 c1                	mov    cl,0xc1
c00199b6:	88 c8                	mov    al,cl
c00199b8:	e6 22                	out    0x22,al
c00199ba:	e4 23                	in     al,0x23
c00199bc:	88 c2                	mov    dl,al
c00199be:	88 c8                	mov    al,cl
c00199c0:	e6 22                	out    0x22,al
c00199c2:	88 d0                	mov    al,dl
c00199c4:	83 c8 10             	or     eax,0x10
c00199c7:	e6 23                	out    0x23,al
c00199c9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199d0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199d3:	89 d0                	mov    eax,edx
c00199d5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199db:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199df:	40                   	inc    eax
c00199e0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199e6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199eb:	e9 a1 00 00 00       	jmp    c0019a91 <CPU::detectFeatures()+0x959>
c00199f0:	83 f8 06             	cmp    eax,0x6
c00199f3:	0f 84 e1 fe ff ff    	je     c00198da <CPU::detectFeatures()+0x7a2>
c00199f9:	83 f8 04             	cmp    eax,0x4
c00199fc:	0f 84 e9 fe ff ff    	je     c00198eb <CPU::detectFeatures()+0x7b3>
c0019a02:	83 f8 03             	cmp    eax,0x3
c0019a05:	0f 85 0e 01 00 00    	jne    c0019b19 <CPU::detectFeatures()+0x9e1>
c0019a0b:	52                   	push   edx
c0019a0c:	52                   	push   edx
c0019a0d:	68 64 be 02 c0       	push   0xc002be64
c0019a12:	eb 77                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a14:	83 f8 07             	cmp    eax,0x7
c0019a17:	75 09                	jne    c0019a22 <CPU::detectFeatures()+0x8ea>
c0019a19:	50                   	push   eax
c0019a1a:	50                   	push   eax
c0019a1b:	68 6e be 02 c0       	push   0xc002be6e
c0019a20:	eb 69                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a22:	83 f8 0a             	cmp    eax,0xa
c0019a25:	75 09                	jne    c0019a30 <CPU::detectFeatures()+0x8f8>
c0019a27:	50                   	push   eax
c0019a28:	50                   	push   eax
c0019a29:	68 79 be 02 c0       	push   0xc002be79
c0019a2e:	eb 5b                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a30:	83 f8 0b             	cmp    eax,0xb
c0019a33:	75 09                	jne    c0019a3e <CPU::detectFeatures()+0x906>
c0019a35:	50                   	push   eax
c0019a36:	50                   	push   eax
c0019a37:	68 81 be 02 c0       	push   0xc002be81
c0019a3c:	eb 4d                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a3e:	83 f8 08             	cmp    eax,0x8
c0019a41:	75 09                	jne    c0019a4c <CPU::detectFeatures()+0x914>
c0019a43:	50                   	push   eax
c0019a44:	50                   	push   eax
c0019a45:	68 8a be 02 c0       	push   0xc002be8a
c0019a4a:	eb 3f                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a4c:	83 f8 09             	cmp    eax,0x9
c0019a4f:	75 09                	jne    c0019a5a <CPU::detectFeatures()+0x922>
c0019a51:	50                   	push   eax
c0019a52:	50                   	push   eax
c0019a53:	68 92 be 02 c0       	push   0xc002be92
c0019a58:	eb 31                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 05             	cmp    eax,0x5
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x930>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 9a be 02 c0       	push   0xc002be9a
c0019a66:	eb 23                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 0c             	cmp    eax,0xc
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x93e>
c0019a6d:	55                   	push   ebp
c0019a6e:	55                   	push   ebp
c0019a6f:	68 a8 be 02 c0       	push   0xc002bea8
c0019a74:	eb 15                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 0d             	cmp    eax,0xd
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x94c>
c0019a7b:	57                   	push   edi
c0019a7c:	57                   	push   edi
c0019a7d:	68 b3 be 02 c0       	push   0xc002beb3
c0019a82:	eb 07                	jmp    c0019a8b <CPU::detectFeatures()+0x953>
c0019a84:	56                   	push   esi
c0019a85:	56                   	push   esi
c0019a86:	68 c7 be 02 c0       	push   0xc002bec7
c0019a8b:	53                   	push   ebx
c0019a8c:	e8 41 a9 ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019a91:	83 c4 10             	add    esp,0x10
c0019a94:	e9 80 00 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x9e1>
c0019a99:	51                   	push   ecx
c0019a9a:	51                   	push   ecx
c0019a9b:	68 13 bd 02 c0       	push   0xc002bd13
c0019aa0:	57                   	push   edi
c0019aa1:	e8 96 6d fe ff       	call   c000083c <strcpy>
c0019aa6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ab0:	e8 f9 67 fe ff       	call   c00002ae <is486>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	85 c0                	test   eax,eax
c0019aba:	74 2b                	je     c0019ae7 <CPU::detectFeatures()+0x9af>
c0019abc:	52                   	push   edx
c0019abd:	52                   	push   edx
c0019abe:	68 d3 be 02 c0       	push   0xc002bed3
c0019ac3:	53                   	push   ebx
c0019ac4:	e8 09 a9 ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019ac9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ad0:	0f 20 c0             	mov    eax,cr0
c0019ad3:	83 e0 14             	and    eax,0x14
c0019ad6:	83 c4 10             	add    esp,0x10
c0019ad9:	83 f8 04             	cmp    eax,0x4
c0019adc:	75 1f                	jne    c0019afd <CPU::detectFeatures()+0x9c5>
c0019ade:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ae5:	eb 32                	jmp    c0019b19 <CPU::detectFeatures()+0x9e1>
c0019ae7:	50                   	push   eax
c0019ae8:	50                   	push   eax
c0019ae9:	68 de be 02 c0       	push   0xc002bede
c0019aee:	53                   	push   ebx
c0019aef:	e8 de a8 ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019af4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019afb:	eb d3                	jmp    c0019ad0 <CPU::detectFeatures()+0x998>
c0019afd:	e8 87 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b02:	83 e0 01             	and    eax,0x1
c0019b05:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b08:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b0e:	83 e0 fd             	and    eax,0xfffffffd
c0019b11:	09 d0                	or     eax,edx
c0019b13:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b19:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b20:	83 c4 4c             	add    esp,0x4c
c0019b23:	5b                   	pop    ebx
c0019b24:	5e                   	pop    esi
c0019b25:	5f                   	pop    edi
c0019b26:	5d                   	pop    ebp
c0019b27:	c3                   	ret    

c0019b28 <CPU::setupSMEP()>:
c0019b28:	0f 20 e0             	mov    eax,cr4
c0019b2b:	0d 00 00 10 00       	or     eax,0x100000
c0019b30:	0f 22 e0             	mov    cr4,eax
c0019b33:	c3                   	ret    

c0019b34 <CPU::setupUMIP()>:
c0019b34:	0f 20 e0             	mov    eax,cr4
c0019b37:	80 cc 08             	or     ah,0x8
c0019b3a:	0f 22 e0             	mov    cr4,eax
c0019b3d:	c3                   	ret    

c0019b3e <CPU::setupTSC()>:
c0019b3e:	0f 20 e0             	mov    eax,cr4
c0019b41:	83 c8 04             	or     eax,0x4
c0019b44:	0f 22 e0             	mov    cr4,eax
c0019b47:	c3                   	ret    

c0019b48 <CPU::setupLargePages()>:
c0019b48:	0f 20 e0             	mov    eax,cr4
c0019b4b:	83 c8 10             	or     eax,0x10
c0019b4e:	0f 22 e0             	mov    cr4,eax
c0019b51:	c3                   	ret    

c0019b52 <CPU::setupPAT()>:
c0019b52:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0019b57:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b5e:	74 2c                	je     c0019b8c <CPU::setupPAT()+0x3a>
c0019b60:	53                   	push   ebx
c0019b61:	83 ec 10             	sub    esp,0x10
c0019b64:	68 77 02 00 00       	push   0x277
c0019b69:	50                   	push   eax
c0019b6a:	e8 81 52 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019b6f:	83 e2 f8             	and    edx,0xfffffff8
c0019b72:	83 ca 01             	or     edx,0x1
c0019b75:	52                   	push   edx
c0019b76:	50                   	push   eax
c0019b77:	68 77 02 00 00       	push   0x277
c0019b7c:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c0019b82:	e8 95 52 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b87:	83 c4 28             	add    esp,0x28
c0019b8a:	5b                   	pop    ebx
c0019b8b:	c3                   	ret    
c0019b8c:	c3                   	ret    
c0019b8d:	90                   	nop

c0019b8e <CPU::setupMTRR()>:
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <CPU::setupGlobalPages()>:
c0019b90:	0f 20 e0             	mov    eax,cr4
c0019b93:	0c 80                	or     al,0x80
c0019b95:	0f 22 e0             	mov    cr4,eax
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop

c0019b9a <CPU::allowUsermodeDataAccess()>:
c0019b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ba5:	74 03                	je     c0019baa <CPU::allowUsermodeDataAccess()+0x10>
c0019ba7:	0f 01 cb             	stac   
c0019baa:	c3                   	ret    
c0019bab:	90                   	nop

c0019bac <CPU::prohibitUsermodeDataAccess()>:
c0019bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bb7:	74 03                	je     c0019bbc <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bb9:	0f 01 ca             	clac   
c0019bbc:	c3                   	ret    
c0019bbd:	90                   	nop

c0019bbe <CPU::setupSMAP()>:
c0019bbe:	0f 20 e0             	mov    eax,cr4
c0019bc1:	0d 00 00 20 00       	or     eax,0x200000
c0019bc6:	0f 22 e0             	mov    cr4,eax
c0019bc9:	eb e1                	jmp    c0019bac <CPU::prohibitUsermodeDataAccess()>
c0019bcb:	90                   	nop

c0019bcc <CPU::setupFeatures()>:
c0019bcc:	83 ec 0c             	sub    esp,0xc
c0019bcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bd3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bda:	74 07                	je     c0019be3 <CPU::setupFeatures()+0x17>
c0019bdc:	52                   	push   edx
c0019bdd:	e8 46 ff ff ff       	call   c0019b28 <CPU::setupSMEP()>
c0019be2:	58                   	pop    eax
c0019be3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bea:	74 07                	je     c0019bf3 <CPU::setupFeatures()+0x27>
c0019bec:	52                   	push   edx
c0019bed:	e8 cc ff ff ff       	call   c0019bbe <CPU::setupSMAP()>
c0019bf2:	58                   	pop    eax
c0019bf3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bfa:	74 07                	je     c0019c03 <CPU::setupFeatures()+0x37>
c0019bfc:	52                   	push   edx
c0019bfd:	e8 32 ff ff ff       	call   c0019b34 <CPU::setupUMIP()>
c0019c02:	58                   	pop    eax
c0019c03:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c0a:	74 07                	je     c0019c13 <CPU::setupFeatures()+0x47>
c0019c0c:	52                   	push   edx
c0019c0d:	e8 2c ff ff ff       	call   c0019b3e <CPU::setupTSC()>
c0019c12:	58                   	pop    eax
c0019c13:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c1a:	74 07                	je     c0019c23 <CPU::setupFeatures()+0x57>
c0019c1c:	52                   	push   edx
c0019c1d:	e8 26 ff ff ff       	call   c0019b48 <CPU::setupLargePages()>
c0019c22:	59                   	pop    ecx
c0019c23:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c2a:	74 07                	je     c0019c33 <CPU::setupFeatures()+0x67>
c0019c2c:	52                   	push   edx
c0019c2d:	e8 5e ff ff ff       	call   c0019b90 <CPU::setupGlobalPages()>
c0019c32:	58                   	pop    eax
c0019c33:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c3a:	74 0c                	je     c0019c48 <CPU::setupFeatures()+0x7c>
c0019c3c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c40:	83 c4 0c             	add    esp,0xc
c0019c43:	e9 0a ff ff ff       	jmp    c0019b52 <CPU::setupPAT()>
c0019c48:	83 c4 0c             	add    esp,0xc
c0019c4b:	c3                   	ret    

c0019c4c <CPU::open(int, int, void*)>:
c0019c4c:	57                   	push   edi
c0019c4d:	56                   	push   esi
c0019c4e:	53                   	push   ebx
c0019c4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c57:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c5d:	83 ec 0c             	sub    esp,0xc
c0019c60:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c66:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c6c:	50                   	push   eax
c0019c6d:	e8 6a 54 ff ff       	call   c000f0dc <GDT::setup()>
c0019c72:	83 c4 0c             	add    esp,0xc
c0019c75:	6a 00                	push   0x0
c0019c77:	68 ef be ad de       	push   0xdeadbeef
c0019c7c:	57                   	push   edi
c0019c7d:	e8 de 76 ff ff       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c0019c82:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c85:	e8 b6 76 ff ff       	call   c0011340 <TSS::flush()>
c0019c8a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c90:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c93:	e8 a0 56 ff ff       	call   c000f338 <IDT::setup()>
c0019c98:	b8 00 04 00 00       	mov    eax,0x400
c0019c9d:	0f 23 f8             	mov    db7,eax
c0019ca0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019caa:	e8 08 62 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0019caf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cb5:	89 30                	mov    DWORD PTR [eax],esi
c0019cb7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cbd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cc0:	58                   	pop    eax
c0019cc1:	5a                   	pop    edx
c0019cc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ccc:	e8 23 88 ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0019cd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cd4:	e8 5f f4 ff ff       	call   c0019138 <CPU::detectFeatures()>
c0019cd9:	e8 34 bb ff ff       	call   c0015812 <setupInterruptController()>
c0019cde:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019ce4:	a1 c0 e9 02 c0       	mov    eax,ds:0xc002e9c0
c0019ce9:	83 e0 10             	and    eax,0x10
c0019cec:	83 f8 01             	cmp    eax,0x1
c0019cef:	19 c0                	sbb    eax,eax
c0019cf1:	83 e0 46             	and    eax,0x46
c0019cf4:	83 c0 1e             	add    eax,0x1e
c0019cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cfa:	e8 a5 d0 ff ff       	call   c0016da4 <setupTimer(int)>
c0019cff:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d08:	e8 bf fe ff ff       	call   c0019bcc <CPU::setupFeatures()>
c0019d0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d10:	e8 a7 f1 ff ff       	call   c0018ebc <CPU::displayFeatures()>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	31 c0                	xor    eax,eax
c0019d1a:	5b                   	pop    ebx
c0019d1b:	5e                   	pop    esi
c0019d1c:	5f                   	pop    edi
c0019d1d:	c3                   	ret    

c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d1e:	57                   	push   edi
c0019d1f:	56                   	push   esi
c0019d20:	53                   	push   ebx
c0019d21:	51                   	push   ecx
c0019d22:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d26:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d29:	0f 02 c0             	lar    eax,ax
c0019d2c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d2f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d33:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d36:	88 ca                	mov    dl,cl
c0019d38:	c0 ea 06             	shr    dl,0x6
c0019d3b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d3f:	89 ca                	mov    edx,ecx
c0019d41:	66 c1 ea 03          	shr    dx,0x3
c0019d45:	83 e2 07             	and    edx,0x7
c0019d48:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d4d:	88 17                	mov    BYTE PTR [edi],dl
c0019d4f:	0f 84 a6 01 00 00    	je     c0019efb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d55:	83 e1 07             	and    ecx,0x7
c0019d58:	80 f9 04             	cmp    cl,0x4
c0019d5b:	0f 84 98 00 00 00    	je     c0019df9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d61:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d66:	0f 95 c0             	setne  al
c0019d69:	80 f9 05             	cmp    cl,0x5
c0019d6c:	0f 95 c2             	setne  dl
c0019d6f:	08 c2                	or     dl,al
c0019d71:	74 79                	je     c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d73:	84 c9                	test   cl,cl
c0019d75:	75 05                	jne    c0019d7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d77:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d7a:	eb 3c                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7c:	80 f9 01             	cmp    cl,0x1
c0019d7f:	75 05                	jne    c0019d86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d81:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d84:	eb 32                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d86:	80 f9 02             	cmp    cl,0x2
c0019d89:	75 05                	jne    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d8b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d8e:	eb 28                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d90:	31 c0                	xor    eax,eax
c0019d92:	80 f9 03             	cmp    cl,0x3
c0019d95:	75 05                	jne    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d97:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d9a:	eb 1c                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d9c:	80 f9 05             	cmp    cl,0x5
c0019d9f:	75 05                	jne    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019da1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019da4:	eb 12                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da6:	80 f9 06             	cmp    cl,0x6
c0019da9:	75 05                	jne    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019dab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dae:	eb 08                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db0:	80 f9 07             	cmp    cl,0x7
c0019db3:	75 03                	jne    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019db8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dbd:	75 10                	jne    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019dbf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019dc3:	b9 03 00 00 00       	mov    ecx,0x3
c0019dc8:	01 d0                	add    eax,edx
c0019dca:	e9 37 01 00 00       	jmp    c0019f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dcf:	b9 02 00 00 00       	mov    ecx,0x2
c0019dd4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019dd9:	0f 85 27 01 00 00    	jne    c0019f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ddf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019de2:	b9 06 00 00 00       	mov    ecx,0x6
c0019de7:	e9 1a 01 00 00       	jmp    c0019f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dec:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019def:	b9 06 00 00 00       	mov    ecx,0x6
c0019df4:	e9 0f 01 00 00       	jmp    c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019df9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dfc:	88 ca                	mov    dl,cl
c0019dfe:	c0 ea 06             	shr    dl,0x6
c0019e01:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e05:	89 ca                	mov    edx,ecx
c0019e07:	66 c1 ea 03          	shr    dx,0x3
c0019e0b:	83 e2 07             	and    edx,0x7
c0019e0e:	80 e1 07             	and    cl,0x7
c0019e11:	75 05                	jne    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e13:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e16:	eb 4c                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e18:	80 f9 01             	cmp    cl,0x1
c0019e1b:	75 05                	jne    c0019e22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e1d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e20:	eb 42                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e22:	80 f9 02             	cmp    cl,0x2
c0019e25:	75 05                	jne    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e27:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e2a:	eb 38                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e2c:	80 f9 03             	cmp    cl,0x3
c0019e2f:	75 05                	jne    c0019e36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e31:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e34:	eb 2e                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e36:	80 f9 04             	cmp    cl,0x4
c0019e39:	75 12                	jne    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e3b:	f6 c4 60             	test   ah,0x60
c0019e3e:	75 08                	jne    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e40:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e43:	8d 78 14             	lea    edi,[eax+0x14]
c0019e46:	eb 1c                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e48:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e4b:	eb 17                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e4d:	80 f9 05             	cmp    cl,0x5
c0019e50:	75 05                	jne    c0019e57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e52:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e55:	eb 0d                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e57:	80 f9 06             	cmp    cl,0x6
c0019e5a:	75 05                	jne    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e5c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e5f:	eb 03                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e61:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e64:	84 d2                	test   dl,dl
c0019e66:	75 05                	jne    c0019e6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e68:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e6b:	eb 3c                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e6d:	80 fa 01             	cmp    dl,0x1
c0019e70:	75 05                	jne    c0019e77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e72:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e75:	eb 32                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e77:	80 fa 02             	cmp    dl,0x2
c0019e7a:	75 05                	jne    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e7c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e7f:	eb 28                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e81:	80 fa 03             	cmp    dl,0x3
c0019e84:	75 05                	jne    c0019e8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e86:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e89:	eb 1e                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8b:	31 c0                	xor    eax,eax
c0019e8d:	80 fa 04             	cmp    dl,0x4
c0019e90:	74 17                	je     c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e92:	80 fa 05             	cmp    dl,0x5
c0019e95:	75 05                	jne    c0019e9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e97:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e9a:	eb 0d                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e9c:	80 fa 06             	cmp    dl,0x6
c0019e9f:	75 05                	jne    c0019ea6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ea1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ea4:	eb 03                	jmp    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ea9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019eae:	0f 94 c2             	sete   dl
c0019eb1:	80 f9 05             	cmp    cl,0x5
c0019eb4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019eb8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ebd:	d3 e0                	shl    eax,cl
c0019ebf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ec3:	74 0a                	je     c0019ecf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ec5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ec8:	b9 07 00 00 00       	mov    ecx,0x7
c0019ecd:	eb 37                	jmp    c0019f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ecf:	01 f8                	add    eax,edi
c0019ed1:	b9 03 00 00 00       	mov    ecx,0x3
c0019ed6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019edb:	74 2b                	je     c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019edd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ee2:	75 0d                	jne    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ee4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ee8:	01 c8                	add    eax,ecx
c0019eea:	b9 04 00 00 00       	mov    ecx,0x4
c0019eef:	eb 17                	jmp    c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ef4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ef9:	eb 0d                	jmp    c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019efb:	b9 02 00 00 00       	mov    ecx,0x2
c0019f00:	b2 01                	mov    dl,0x1
c0019f02:	31 c0                	xor    eax,eax
c0019f04:	eb 02                	jmp    c0019f08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f06:	31 d2                	xor    edx,edx
c0019f08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f0c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f12:	88 11                	mov    BYTE PTR [ecx],dl
c0019f14:	5a                   	pop    edx
c0019f15:	5b                   	pop    ebx
c0019f16:	5e                   	pop    esi
c0019f17:	5f                   	pop    edi
c0019f18:	c3                   	ret    

c0019f19 <Krnl::smpEntry()>:
c0019f19:	eb fe                	jmp    c0019f19 <Krnl::smpEntry()>

c0019f1b <Krnl::startCPU(int)>:
c0019f1b:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0019f20:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f27:	0f 84 36 01 00 00    	je     c001a063 <Krnl::startCPU(int)+0x148>
c0019f2d:	53                   	push   ebx
c0019f2e:	83 ec 08             	sub    esp,0x8
c0019f31:	e8 be 3f 00 00       	call   c001def4 <lockScheduler()>
c0019f36:	52                   	push   edx
c0019f37:	52                   	push   edx
c0019f38:	6a 1b                	push   0x1b
c0019f3a:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c0019f40:	e8 ab 4e ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019f45:	59                   	pop    ecx
c0019f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f4b:	89 c3                	mov    ebx,eax
c0019f4d:	58                   	pop    eax
c0019f4e:	53                   	push   ebx
c0019f4f:	68 18 bf 02 c0       	push   0xc002bf18
c0019f54:	e8 6a 8e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019f59:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f67:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f71:	c1 e0 18             	shl    eax,0x18
c0019f74:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f83:	09 c2                	or     edx,eax
c0019f85:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f8b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f91:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f97:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f9d:	80 cd c5             	or     ch,0xc5
c0019fa0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fa6:	f3 90                	pause  
c0019fa8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019faa:	0f ba e1 0c          	bt     ecx,0xc
c0019fae:	72 f6                	jb     c0019fa6 <Krnl::startCPU(int)+0x8b>
c0019fb0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fb6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fbc:	09 c1                	or     ecx,eax
c0019fbe:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fc4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fca:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fd0:	80 cd 85             	or     ch,0x85
c0019fd3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fd9:	f3 90                	pause  
c0019fdb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fdd:	0f ba e1 0c          	bt     ecx,0xc
c0019fe1:	72 f6                	jb     c0019fd9 <Krnl::startCPU(int)+0xbe>
c0019fe3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fed:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ff3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ff9:	09 c1                	or     ecx,eax
c0019ffb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a001:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a007:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a00d:	81 c9 02 06 00 00    	or     ecx,0x602
c001a013:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a019:	f3 90                	pause  
c001a01b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a01d:	0f ba e1 0c          	bt     ecx,0xc
c001a021:	72 f6                	jb     c001a019 <Krnl::startCPU(int)+0xfe>
c001a023:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a02d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a033:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a039:	09 c8                	or     eax,ecx
c001a03b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a041:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a047:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a04c:	0d 02 06 00 00       	or     eax,0x602
c001a051:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a057:	f3 90                	pause  
c001a059:	8b 02                	mov    eax,DWORD PTR [edx]
c001a05b:	0f ba e0 0c          	bt     eax,0xc
c001a05f:	72 f6                	jb     c001a057 <Krnl::startCPU(int)+0x13c>
c001a061:	eb fe                	jmp    c001a061 <Krnl::startCPU(int)+0x146>
c001a063:	c3                   	ret    

c001a064 <Krnl::startCPUs()>:
c001a064:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001a069:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a06f:	88 c2                	mov    dl,al
c001a071:	83 e2 0a             	and    edx,0xa
c001a074:	80 fa 0a             	cmp    dl,0xa
c001a077:	75 09                	jne    c001a082 <Krnl::startCPUs()+0x1e>
c001a079:	a8 01                	test   al,0x1
c001a07b:	74 05                	je     c001a082 <Krnl::startCPUs()+0x1e>
c001a07d:	e9 19 61 fe ff       	jmp    c000019b <prepareTramp>
c001a082:	c3                   	ret    
c001a083:	90                   	nop

c001a084 <EnvVarContainer::getEnv(char const*)>:
c001a084:	57                   	push   edi
c001a085:	56                   	push   esi
c001a086:	53                   	push   ebx
c001a087:	31 db                	xor    ebx,ebx
c001a089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a08d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a08f:	7e 2b                	jle    c001a0bc <EnvVarContainer::getEnv(char const*)+0x38>
c001a091:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a098:	50                   	push   eax
c001a099:	50                   	push   eax
c001a09a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a09d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0a4:	e8 1f 68 fe ff       	call   c00008c8 <strcmp>
c001a0a9:	83 c4 10             	add    esp,0x10
c001a0ac:	85 c0                	test   eax,eax
c001a0ae:	75 09                	jne    c001a0b9 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0b0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0b3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0b7:	eb 05                	jmp    c001a0be <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0b9:	43                   	inc    ebx
c001a0ba:	eb d1                	jmp    c001a08d <EnvVarContainer::getEnv(char const*)+0x9>
c001a0bc:	31 c0                	xor    eax,eax
c001a0be:	5b                   	pop    ebx
c001a0bf:	5e                   	pop    esi
c001a0c0:	5f                   	pop    edi
c001a0c1:	c3                   	ret    

c001a0c2 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0c2:	57                   	push   edi
c001a0c3:	56                   	push   esi
c001a0c4:	53                   	push   ebx
c001a0c5:	83 ec 1c             	sub    esp,0x1c
c001a0c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0cc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0d0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0d4:	57                   	push   edi
c001a0d5:	e8 c2 66 fe ff       	call   c000079c <strlen>
c001a0da:	40                   	inc    eax
c001a0db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0de:	e8 68 57 ff ff       	call   c000f84b <malloc>
c001a0e3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0ea:	e8 ad 66 fe ff       	call   c000079c <strlen>
c001a0ef:	40                   	inc    eax
c001a0f0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0f3:	e8 53 57 ff ff       	call   c000f84b <malloc>
c001a0f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0ff:	e8 98 66 fe ff       	call   c000079c <strlen>
c001a104:	83 c4 0c             	add    esp,0xc
c001a107:	40                   	inc    eax
c001a108:	50                   	push   eax
c001a109:	6a 00                	push   0x0
c001a10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a10f:	e8 6c 66 fe ff       	call   c0000780 <memset>
c001a114:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a117:	e8 80 66 fe ff       	call   c000079c <strlen>
c001a11c:	83 c4 0c             	add    esp,0xc
c001a11f:	40                   	inc    eax
c001a120:	50                   	push   eax
c001a121:	57                   	push   edi
c001a122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a126:	e8 21 66 fe ff       	call   c000074c <memcpy>
c001a12b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a12e:	e8 69 66 fe ff       	call   c000079c <strlen>
c001a133:	83 c4 0c             	add    esp,0xc
c001a136:	40                   	inc    eax
c001a137:	50                   	push   eax
c001a138:	6a 00                	push   0x0
c001a13a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a13e:	e8 3d 66 fe ff       	call   c0000780 <memset>
c001a143:	89 34 24             	mov    DWORD PTR [esp],esi
c001a146:	e8 51 66 fe ff       	call   c000079c <strlen>
c001a14b:	83 c4 0c             	add    esp,0xc
c001a14e:	40                   	inc    eax
c001a14f:	50                   	push   eax
c001a150:	56                   	push   esi
c001a151:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a155:	e8 f2 65 fe ff       	call   c000074c <memcpy>
c001a15a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a15c:	40                   	inc    eax
c001a15d:	89 03                	mov    DWORD PTR [ebx],eax
c001a15f:	c1 e0 03             	shl    eax,0x3
c001a162:	5a                   	pop    edx
c001a163:	59                   	pop    ecx
c001a164:	50                   	push   eax
c001a165:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a168:	e8 ca 56 ff ff       	call   c000f837 <realloc>
c001a16d:	83 c4 0c             	add    esp,0xc
c001a170:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a173:	6a 08                	push   0x8
c001a175:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a179:	52                   	push   edx
c001a17a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a17c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a180:	50                   	push   eax
c001a181:	e8 c6 65 fe ff       	call   c000074c <memcpy>
c001a186:	83 c4 20             	add    esp,0x20
c001a189:	5b                   	pop    ebx
c001a18a:	5e                   	pop    esi
c001a18b:	5f                   	pop    edi
c001a18c:	c3                   	ret    
c001a18d:	90                   	nop

c001a18e <EnvVarContainer::deleteEnv(char const*)>:
c001a18e:	c3                   	ret    
c001a18f:	90                   	nop

c001a190 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a190:	55                   	push   ebp
c001a191:	57                   	push   edi
c001a192:	56                   	push   esi
c001a193:	53                   	push   ebx
c001a194:	81 ec 38 01 00 00    	sub    esp,0x138
c001a19a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1a1:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1a8:	68 14 01 00 00       	push   0x114
c001a1ad:	e8 99 56 ff ff       	call   c000f84b <malloc>
c001a1b2:	83 c4 0c             	add    esp,0xc
c001a1b5:	89 c7                	mov    edi,eax
c001a1b7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1ba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1c1:	50                   	push   eax
c001a1c2:	e8 5b 91 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001a1c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1ca:	e8 25 94 ff ff       	call   c00135f4 <File::exists()>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	84 c0                	test   al,al
c001a1d4:	75 31                	jne    c001a207 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1d6:	51                   	push   ecx
c001a1d7:	51                   	push   ecx
c001a1d8:	6a 12                	push   0x12
c001a1da:	57                   	push   edi
c001a1db:	e8 a6 91 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a1e0:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1e2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1e8:	e8 af 65 fe ff       	call   c000079c <strlen>
c001a1ed:	5a                   	pop    edx
c001a1ee:	31 d2                	xor    edx,edx
c001a1f0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1f4:	51                   	push   ecx
c001a1f5:	55                   	push   ebp
c001a1f6:	52                   	push   edx
c001a1f7:	50                   	push   eax
c001a1f8:	57                   	push   edi
c001a1f9:	ff d3                	call   ebx
c001a1fb:	83 c4 14             	add    esp,0x14
c001a1fe:	57                   	push   edi
c001a1ff:	e8 e0 91 ff ff       	call   c00133e4 <File::close()>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	31 db                	xor    ebx,ebx
c001a209:	50                   	push   eax
c001a20a:	31 ed                	xor    ebp,ebp
c001a20c:	68 00 01 00 00       	push   0x100
c001a211:	6a 00                	push   0x0
c001a213:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a217:	50                   	push   eax
c001a218:	e8 63 65 fe ff       	call   c0000780 <memset>
c001a21d:	58                   	pop    eax
c001a21e:	5a                   	pop    edx
c001a21f:	6a 01                	push   0x1
c001a221:	57                   	push   edi
c001a222:	e8 5f 91 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	83 ec 0c             	sub    esp,0xc
c001a22d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a22f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a233:	51                   	push   ecx
c001a234:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a238:	52                   	push   edx
c001a239:	6a 00                	push   0x0
c001a23b:	6a 01                	push   0x1
c001a23d:	57                   	push   edi
c001a23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a241:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a245:	83 c4 20             	add    esp,0x20
c001a248:	3c 0d                	cmp    al,0xd
c001a24a:	0f 84 12 01 00 00    	je     c001a362 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a250:	85 db                	test   ebx,ebx
c001a252:	0f 84 fd 00 00 00    	je     c001a355 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a258:	3c 0a                	cmp    al,0xa
c001a25a:	74 13                	je     c001a26f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a25c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a261:	74 0c                	je     c001a26f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a263:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a269:	0f 8e e6 00 00 00    	jle    c001a355 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a26f:	83 ec 0c             	sub    esp,0xc
c001a272:	8d 53 01             	lea    edx,[ebx+0x1]
c001a275:	29 dd                	sub    ebp,ebx
c001a277:	52                   	push   edx
c001a278:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a27c:	e8 ca 55 ff ff       	call   c000f84b <malloc>
c001a281:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a284:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a288:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a28b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a28f:	e8 b7 55 ff ff       	call   c000f84b <malloc>
c001a294:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a298:	83 c4 0c             	add    esp,0xc
c001a29b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a29f:	52                   	push   edx
c001a2a0:	6a 00                	push   0x0
c001a2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2a6:	e8 d5 64 fe ff       	call   c0000780 <memset>
c001a2ab:	83 c4 0c             	add    esp,0xc
c001a2ae:	53                   	push   ebx
c001a2af:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2b3:	55                   	push   ebp
c001a2b4:	01 eb                	add    ebx,ebp
c001a2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ba:	e8 8d 64 fe ff       	call   c000074c <memcpy>
c001a2bf:	83 c4 0c             	add    esp,0xc
c001a2c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2c6:	51                   	push   ecx
c001a2c7:	6a 00                	push   0x0
c001a2c9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2cd:	e8 ae 64 fe ff       	call   c0000780 <memset>
c001a2d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2d5:	e8 c2 64 fe ff       	call   c000079c <strlen>
c001a2da:	83 c4 0c             	add    esp,0xc
c001a2dd:	50                   	push   eax
c001a2de:	53                   	push   ebx
c001a2df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2e3:	e8 64 64 fe ff       	call   c000074c <memcpy>
c001a2e8:	5b                   	pop    ebx
c001a2e9:	58                   	pop    eax
c001a2ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ee:	68 29 bf 02 c0       	push   0xc002bf29
c001a2f3:	e8 cb 8a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a2f8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2fa:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2fd:	40                   	inc    eax
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	89 06                	mov    DWORD PTR [esi],eax
c001a303:	85 d2                	test   edx,edx
c001a305:	75 0c                	jne    c001a313 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a307:	83 ec 0c             	sub    esp,0xc
c001a30a:	6a 08                	push   0x8
c001a30c:	e8 3a 55 ff ff       	call   c000f84b <malloc>
c001a311:	eb 0c                	jmp    c001a31f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a313:	c1 e0 03             	shl    eax,0x3
c001a316:	51                   	push   ecx
c001a317:	51                   	push   ecx
c001a318:	50                   	push   eax
c001a319:	52                   	push   edx
c001a31a:	e8 18 55 ff ff       	call   c000f837 <realloc>
c001a31f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	31 db                	xor    ebx,ebx
c001a327:	52                   	push   edx
c001a328:	6a 08                	push   0x8
c001a32a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a32e:	50                   	push   eax
c001a32f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a331:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a334:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a338:	50                   	push   eax
c001a339:	e8 0e 64 fe ff       	call   c000074c <memcpy>
c001a33e:	83 c4 0c             	add    esp,0xc
c001a341:	68 00 01 00 00       	push   0x100
c001a346:	6a 00                	push   0x0
c001a348:	55                   	push   ebp
c001a349:	31 ed                	xor    ebp,ebp
c001a34b:	e8 30 64 fe ff       	call   c0000780 <memset>
c001a350:	83 c4 10             	add    esp,0x10
c001a353:	eb 0d                	jmp    c001a362 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a355:	3c 3d                	cmp    al,0x3d
c001a357:	74 07                	je     c001a360 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a359:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a35d:	45                   	inc    ebp
c001a35e:	eb 02                	jmp    c001a362 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a360:	89 eb                	mov    ebx,ebp
c001a362:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a367:	0f 85 bd fe ff ff    	jne    c001a22a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a36d:	50                   	push   eax
c001a36e:	50                   	push   eax
c001a36f:	ff 36                	push   DWORD PTR [esi]
c001a371:	68 37 bf 02 c0       	push   0xc002bf37
c001a376:	e8 48 8a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a37b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a381:	5b                   	pop    ebx
c001a382:	5e                   	pop    esi
c001a383:	5f                   	pop    edi
c001a384:	5d                   	pop    ebp
c001a385:	c3                   	ret    

c001a386 <EnvVarContainer::__loadSystem()>:
c001a386:	83 ec 10             	sub    esp,0x10
c001a389:	68 e0 de 02 c0       	push   0xc002dee0
c001a38e:	68 62 bf 02 c0       	push   0xc002bf62
c001a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a397:	e8 f4 fd ff ff       	call   c001a190 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a39c:	83 c4 1c             	add    esp,0x1c
c001a39f:	c3                   	ret    

c001a3a0 <EnvVarContainer::__loadUser()>:
c001a3a0:	c3                   	ret    
c001a3a1:	90                   	nop

c001a3a2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3c2:	90                   	nop
c001a3c3:	c3                   	ret    

c001a3c4 <EnvVarContainer::~EnvVarContainer()>:
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3ce:	85 c0                	test   eax,eax
c001a3d0:	74 1d                	je     c001a3ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3d8:	85 c0                	test   eax,eax
c001a3da:	74 13                	je     c001a3ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	50                   	push   eax
c001a3e7:	e8 6f 54 ff ff       	call   c000f85b <free>
c001a3ec:	83 c4 10             	add    esp,0x10
c001a3ef:	90                   	nop
c001a3f0:	83 c4 0c             	add    esp,0xc
c001a3f3:	c3                   	ret    

c001a3f4 <Krnl::getEnv(Process*, char const*)>:
c001a3f4:	53                   	push   ebx
c001a3f5:	83 ec 08             	sub    esp,0x8
c001a3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a400:	39 05 14 1f 03 c0    	cmp    DWORD PTR ds:0xc0031f14,eax
c001a406:	74 04                	je     c001a40c <Krnl::getEnv(Process*, char const*)+0x18>
c001a408:	85 c0                	test   eax,eax
c001a40a:	75 0b                	jne    c001a417 <Krnl::getEnv(Process*, char const*)+0x23>
c001a40c:	a1 f4 14 03 c0       	mov    eax,ds:0xc00314f4
c001a411:	85 c0                	test   eax,eax
c001a413:	75 19                	jne    c001a42e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a415:	eb 27                	jmp    c001a43e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a417:	52                   	push   edx
c001a418:	52                   	push   edx
c001a419:	53                   	push   ebx
c001a41a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a420:	e8 5f fc ff ff       	call   c001a084 <EnvVarContainer::getEnv(char const*)>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	85 c0                	test   eax,eax
c001a42a:	75 28                	jne    c001a454 <Krnl::getEnv(Process*, char const*)+0x60>
c001a42c:	eb de                	jmp    c001a40c <Krnl::getEnv(Process*, char const*)+0x18>
c001a42e:	52                   	push   edx
c001a42f:	52                   	push   edx
c001a430:	53                   	push   ebx
c001a431:	50                   	push   eax
c001a432:	e8 4d fc ff ff       	call   c001a084 <EnvVarContainer::getEnv(char const*)>
c001a437:	83 c4 10             	add    esp,0x10
c001a43a:	85 c0                	test   eax,eax
c001a43c:	75 16                	jne    c001a454 <Krnl::getEnv(Process*, char const*)+0x60>
c001a43e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a442:	a1 f8 14 03 c0       	mov    eax,ds:0xc00314f8
c001a447:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a44b:	83 c4 08             	add    esp,0x8
c001a44e:	5b                   	pop    ebx
c001a44f:	e9 30 fc ff ff       	jmp    c001a084 <EnvVarContainer::getEnv(char const*)>
c001a454:	83 c4 08             	add    esp,0x8
c001a457:	5b                   	pop    ebx
c001a458:	c3                   	ret    

c001a459 <Krnl::setEnvSystem(char const*, char const*)>:
c001a459:	83 ec 10             	sub    esp,0x10
c001a45c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a464:	ff 35 f8 14 03 c0    	push   DWORD PTR ds:0xc00314f8
c001a46a:	e8 53 fc ff ff       	call   c001a0c2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a46f:	83 c4 1c             	add    esp,0x1c
c001a472:	c3                   	ret    

c001a473 <Krnl::setEnvUser(char const*, char const*)>:
c001a473:	a1 f4 14 03 c0       	mov    eax,ds:0xc00314f4
c001a478:	85 c0                	test   eax,eax
c001a47a:	74 15                	je     c001a491 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a47c:	83 ec 10             	sub    esp,0x10
c001a47f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a483:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a487:	50                   	push   eax
c001a488:	e8 35 fc ff ff       	call   c001a0c2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a48d:	83 c4 1c             	add    esp,0x1c
c001a490:	c3                   	ret    
c001a491:	c3                   	ret    

c001a492 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a496:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a49c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4a0:	e9 1d fc ff ff       	jmp    c001a0c2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4a5 <Krnl::deleteEnvSystem(char const*)>:
c001a4a5:	c3                   	ret    

c001a4a6 <Krnl::deleteEnvUser(char const*)>:
c001a4a6:	c3                   	ret    

c001a4a7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4a7:	c3                   	ret    

c001a4a8 <Krnl::newProcessEnv(Process*)>:
c001a4a8:	83 ec 28             	sub    esp,0x28
c001a4ab:	6a 0c                	push   0xc
c001a4ad:	e8 99 53 ff ff       	call   c000f84b <malloc>
c001a4b2:	5a                   	pop    edx
c001a4b3:	59                   	pop    ecx
c001a4b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4b8:	50                   	push   eax
c001a4b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4bd:	e8 e0 fe ff ff       	call   c001a3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4c6:	83 c4 2c             	add    esp,0x2c
c001a4c9:	c3                   	ret    

c001a4ca <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4ca:	56                   	push   esi
c001a4cb:	53                   	push   ebx
c001a4cc:	83 ec 10             	sub    esp,0x10
c001a4cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4d3:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4d9:	6a 0c                	push   0xc
c001a4db:	e8 6b 53 ff ff       	call   c000f84b <malloc>
c001a4e0:	89 c3                	mov    ebx,eax
c001a4e2:	58                   	pop    eax
c001a4e3:	5a                   	pop    edx
c001a4e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4e8:	53                   	push   ebx
c001a4e9:	e8 b4 fe ff ff       	call   c001a3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4ee:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4f0:	89 03                	mov    DWORD PTR [ebx],eax
c001a4f2:	c1 e0 03             	shl    eax,0x3
c001a4f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4f8:	e8 4e 53 ff ff       	call   c000f84b <malloc>
c001a4fd:	83 c4 0c             	add    esp,0xc
c001a500:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a503:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a505:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a50c:	52                   	push   edx
c001a50d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a510:	50                   	push   eax
c001a511:	e8 36 62 fe ff       	call   c000074c <memcpy>
c001a516:	89 d8                	mov    eax,ebx
c001a518:	83 c4 14             	add    esp,0x14
c001a51b:	5b                   	pop    ebx
c001a51c:	5e                   	pop    esi
c001a51d:	c3                   	ret    

c001a51e <Krnl::loadSystemEnv()>:
c001a51e:	53                   	push   ebx
c001a51f:	83 ec 14             	sub    esp,0x14
c001a522:	6a 0c                	push   0xc
c001a524:	e8 22 53 ff ff       	call   c000f84b <malloc>
c001a529:	89 c3                	mov    ebx,eax
c001a52b:	58                   	pop    eax
c001a52c:	5a                   	pop    edx
c001a52d:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001a533:	53                   	push   ebx
c001a534:	e8 69 fe ff ff       	call   c001a3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a53c:	89 1d f8 14 03 c0    	mov    DWORD PTR ds:0xc00314f8,ebx
c001a542:	e8 3f fe ff ff       	call   c001a386 <EnvVarContainer::__loadSystem()>
c001a547:	83 c4 18             	add    esp,0x18
c001a54a:	5b                   	pop    ebx
c001a54b:	c3                   	ret    

c001a54c <Krnl::loadUserEnv()>:
c001a54c:	53                   	push   ebx
c001a54d:	83 ec 14             	sub    esp,0x14
c001a550:	6a 0c                	push   0xc
c001a552:	e8 f4 52 ff ff       	call   c000f84b <malloc>
c001a557:	89 c3                	mov    ebx,eax
c001a559:	58                   	pop    eax
c001a55a:	5a                   	pop    edx
c001a55b:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001a561:	53                   	push   ebx
c001a562:	e8 3b fe ff ff       	call   c001a3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a567:	89 1d f4 14 03 c0    	mov    DWORD PTR ds:0xc00314f4,ebx
c001a56d:	83 c4 18             	add    esp,0x18
c001a570:	5b                   	pop    ebx
c001a571:	c3                   	ret    

c001a572 <Krnl::flushEnv()>:
c001a572:	c3                   	ret    

c001a573 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a577:	8b 15 f4 14 03 c0    	mov    edx,DWORD PTR ds:0xc00314f4
c001a57d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a583:	a1 f8 14 03 c0       	mov    eax,ds:0xc00314f8
c001a588:	8b 00                	mov    eax,DWORD PTR [eax]
c001a58a:	03 01                	add    eax,DWORD PTR [ecx]
c001a58c:	85 d2                	test   edx,edx
c001a58e:	74 02                	je     c001a592 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a590:	03 02                	add    eax,DWORD PTR [edx]
c001a592:	c3                   	ret    

c001a593 <Krnl::getProcessEnvPair(Process*, int)>:
c001a593:	57                   	push   edi
c001a594:	8b 0d f4 14 03 c0    	mov    ecx,DWORD PTR ds:0xc00314f4
c001a59a:	56                   	push   esi
c001a59b:	85 c9                	test   ecx,ecx
c001a59d:	53                   	push   ebx
c001a59e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5a6:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5b0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5b2:	75 47                	jne    c001a5fb <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5b4:	39 c3                	cmp    ebx,eax
c001a5b6:	7c 47                	jl     c001a5ff <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5b8:	8b 15 f8 14 03 c0    	mov    edx,DWORD PTR ds:0xc00314f8
c001a5be:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5c0:	01 c1                	add    ecx,eax
c001a5c2:	39 d9                	cmp    ecx,ebx
c001a5c4:	7e 6c                	jle    c001a632 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5c6:	51                   	push   ecx
c001a5c7:	89 d9                	mov    ecx,ebx
c001a5c9:	29 c1                	sub    ecx,eax
c001a5cb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5ce:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5d2:	53                   	push   ebx
c001a5d3:	68 84 bf 02 c0       	push   0xc002bf84
c001a5d8:	e8 e6 87 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a5dd:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5e3:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5e5:	a1 f8 14 03 c0       	mov    eax,ds:0xc00314f8
c001a5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5ed:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5f1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5f4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5f7:	89 06                	mov    DWORD PTR [esi],eax
c001a5f9:	eb 51                	jmp    c001a64c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5fb:	39 c3                	cmp    ebx,eax
c001a5fd:	7d 05                	jge    c001a604 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5ff:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a602:	eb 20                	jmp    c001a624 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a604:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a606:	8d 14 07             	lea    edx,[edi+eax*1]
c001a609:	39 da                	cmp    edx,ebx
c001a60b:	7e 04                	jle    c001a611 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a60d:	29 c3                	sub    ebx,eax
c001a60f:	eb 10                	jmp    c001a621 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a611:	8b 0d f8 14 03 c0    	mov    ecx,DWORD PTR ds:0xc00314f8
c001a617:	03 11                	add    edx,DWORD PTR [ecx]
c001a619:	39 da                	cmp    edx,ebx
c001a61b:	7e 15                	jle    c001a632 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a61d:	29 c3                	sub    ebx,eax
c001a61f:	29 fb                	sub    ebx,edi
c001a621:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a624:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a628:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a62b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a62e:	89 06                	mov    DWORD PTR [esi],eax
c001a630:	eb 1d                	jmp    c001a64f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a632:	83 ec 0c             	sub    esp,0xc
c001a635:	68 98 bf 02 c0       	push   0xc002bf98
c001a63a:	e8 18 00 00 00       	call   c001a657 <Krnl::panic(char const*)>
c001a63f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a645:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	89 f0                	mov    eax,esi
c001a651:	5b                   	pop    ebx
c001a652:	5e                   	pop    esi
c001a653:	5f                   	pop    edi
c001a654:	c2 04 00             	ret    0x4

c001a657 <Krnl::panic(char const*)>:
c001a657:	55                   	push   ebp
c001a658:	89 e5                	mov    ebp,esp
c001a65a:	53                   	push   ebx
c001a65b:	83 ec 0c             	sub    esp,0xc
c001a65e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a661:	fa                   	cli    
c001a662:	c6 05 04 15 03 c0 01 	mov    BYTE PTR ds:0xc0031504,0x1
c001a669:	53                   	push   ebx
c001a66a:	c6 05 e4 d8 02 c0 00 	mov    BYTE PTR ds:0xc002d8e4,0x0
c001a671:	68 b2 bf 02 c0       	push   0xc002bfb2
c001a676:	e8 48 87 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a67b:	58                   	pop    eax
c001a67c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a681:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a687:	e8 8a 65 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001a68c:	83 c4 0c             	add    esp,0xc
c001a68f:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a694:	6a 01                	push   0x1
c001a696:	6a 0f                	push   0xf
c001a698:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69e:	e8 11 60 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6a3:	58                   	pop    eax
c001a6a4:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a6a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6af:	e8 a8 67 ff ff       	call   c0010e5c <VgaText::clearScreen()>
c001a6b4:	58                   	pop    eax
c001a6b5:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a6ba:	5a                   	pop    edx
c001a6bb:	68 cb bf 02 c0       	push   0xc002bfcb
c001a6c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c6:	e8 d7 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6cb:	59                   	pop    ecx
c001a6cc:	58                   	pop    eax
c001a6cd:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a6d2:	68 70 c0 02 c0       	push   0xc002c070
c001a6d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6dd:	e8 c0 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6e2:	58                   	pop    eax
c001a6e3:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a6e8:	5a                   	pop    edx
c001a6e9:	68 e7 bf 02 c0       	push   0xc002bfe7
c001a6ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f4:	e8 a9 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6f9:	59                   	pop    ecx
c001a6fa:	58                   	pop    eax
c001a6fb:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a700:	53                   	push   ebx
c001a701:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a707:	e8 96 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a70c:	58                   	pop    eax
c001a70d:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a712:	5a                   	pop    edx
c001a713:	68 07 c0 02 c0       	push   0xc002c007
c001a718:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71e:	e8 7f 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a723:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	85 c0                	test   eax,eax
c001a72d:	74 02                	je     c001a731 <Krnl::panic(char const*)+0xda>
c001a72f:	ff d0                	call   eax
c001a731:	83 ec 0c             	sub    esp,0xc
c001a734:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a737:	e8 c0 30 00 00       	call   c001d7fc <Thr::getDriverNameFromAddress(unsigned long)>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	89 c3                	mov    ebx,eax
c001a741:	85 c0                	test   eax,eax
c001a743:	0f 84 50 02 00 00    	je     c001a999 <Krnl::panic(char const*)+0x342>
c001a749:	83 ec 08             	sub    esp,0x8
c001a74c:	8b 15 14 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f14
c001a752:	68 ac c0 02 c0       	push   0xc002c0ac
c001a757:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a75d:	e8 40 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a762:	58                   	pop    eax
c001a763:	5a                   	pop    edx
c001a764:	8b 15 14 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f14
c001a76a:	68 e7 bf 02 c0       	push   0xc002bfe7
c001a76f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a775:	e8 28 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a77a:	59                   	pop    ecx
c001a77b:	58                   	pop    eax
c001a77c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a781:	53                   	push   ebx
c001a782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a788:	e8 15 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	83 ec 08             	sub    esp,0x8
c001a793:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a798:	68 06 c0 02 c0       	push   0xc002c006
c001a79d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a3:	e8 fa 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7a8:	58                   	pop    eax
c001a7a9:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a7ae:	5a                   	pop    edx
c001a7af:	68 04 c1 02 c0       	push   0xc002c104
c001a7b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ba:	e8 e3 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7bf:	59                   	pop    ecx
c001a7c0:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a7c5:	5b                   	pop    ebx
c001a7c6:	68 44 c1 02 c0       	push   0xc002c144
c001a7cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d1:	e8 cc 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7d6:	58                   	pop    eax
c001a7d7:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a7dc:	5a                   	pop    edx
c001a7dd:	68 f2 bf 02 c0       	push   0xc002bff2
c001a7e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e8:	e8 b5 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7ed:	59                   	pop    ecx
c001a7ee:	5b                   	pop    ebx
c001a7ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7f2:	68 0a c0 02 c0       	push   0xc002c00a
c001a7f7:	e8 c7 85 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a7fc:	58                   	pop    eax
c001a7fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a800:	5a                   	pop    edx
c001a801:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a804:	68 13 c0 02 c0       	push   0xc002c013
c001a809:	e8 b5 85 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a80e:	59                   	pop    ecx
c001a80f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a812:	5b                   	pop    ebx
c001a813:	8b 00                	mov    eax,DWORD PTR [eax]
c001a815:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a818:	68 1c c0 02 c0       	push   0xc002c01c
c001a81d:	e8 a1 85 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a822:	58                   	pop    eax
c001a823:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a828:	5a                   	pop    edx
c001a829:	68 88 c1 02 c0       	push   0xc002c188
c001a82e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a834:	e8 69 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a839:	59                   	pop    ecx
c001a83a:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a83f:	5b                   	pop    ebx
c001a840:	68 25 c0 02 c0       	push   0xc002c025
c001a845:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84b:	e8 52 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a850:	0f 20 c0             	mov    eax,cr0
c001a853:	5a                   	pop    edx
c001a854:	59                   	pop    ecx
c001a855:	50                   	push   eax
c001a856:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a85b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a861:	e8 62 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a866:	5b                   	pop    ebx
c001a867:	58                   	pop    eax
c001a868:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a86d:	68 2f c0 02 c0       	push   0xc002c02f
c001a872:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a878:	e8 25 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a87d:	0f 20 d0             	mov    eax,cr2
c001a880:	5a                   	pop    edx
c001a881:	59                   	pop    ecx
c001a882:	50                   	push   eax
c001a883:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a888:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88e:	e8 35 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a893:	5b                   	pop    ebx
c001a894:	58                   	pop    eax
c001a895:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a89a:	68 39 c0 02 c0       	push   0xc002c039
c001a89f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a5:	e8 f8 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a8aa:	0f 20 d8             	mov    eax,cr3
c001a8ad:	5a                   	pop    edx
c001a8ae:	59                   	pop    ecx
c001a8af:	50                   	push   eax
c001a8b0:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a8b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bb:	e8 08 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a8c0:	5b                   	pop    ebx
c001a8c1:	58                   	pop    eax
c001a8c2:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a8c7:	68 4c c0 02 c0       	push   0xc002c04c
c001a8cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d2:	e8 cb 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a8d7:	0f 20 e0             	mov    eax,cr4
c001a8da:	5a                   	pop    edx
c001a8db:	59                   	pop    ecx
c001a8dc:	50                   	push   eax
c001a8dd:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a8e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e8:	e8 db 66 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a8ed:	5b                   	pop    ebx
c001a8ee:	58                   	pop    eax
c001a8ef:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a8f4:	68 56 c0 02 c0       	push   0xc002c056
c001a8f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ff:	e8 9e 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a904:	5a                   	pop    edx
c001a905:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a90a:	59                   	pop    ecx
c001a90b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a911:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a914:	50                   	push   eax
c001a915:	e8 ae 66 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a91a:	5b                   	pop    ebx
c001a91b:	58                   	pop    eax
c001a91c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a921:	68 6d c0 02 c0       	push   0xc002c06d
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 71 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a931:	5a                   	pop    edx
c001a932:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a937:	59                   	pop    ecx
c001a938:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a93e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a941:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a944:	50                   	push   eax
c001a945:	e8 7e 66 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a94a:	5b                   	pop    ebx
c001a94b:	58                   	pop    eax
c001a94c:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a951:	68 6d c0 02 c0       	push   0xc002c06d
c001a956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95c:	e8 41 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a961:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a966:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a969:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a96f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a971:	59                   	pop    ecx
c001a972:	5b                   	pop    ebx
c001a973:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a976:	50                   	push   eax
c001a977:	e8 4c 66 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a97c:	83 c4 10             	add    esp,0x10
c001a97f:	b2 fe                	mov    dl,0xfe
c001a981:	e4 60                	in     al,0x60
c001a983:	3c 1c                	cmp    al,0x1c
c001a985:	74 04                	je     c001a98b <Krnl::panic(char const*)+0x334>
c001a987:	3c 5a                	cmp    al,0x5a
c001a989:	75 f6                	jne    c001a981 <Krnl::panic(char const*)+0x32a>
c001a98b:	e4 64                	in     al,0x64
c001a98d:	a8 02                	test   al,0x2
c001a98f:	75 fa                	jne    c001a98b <Krnl::panic(char const*)+0x334>
c001a991:	88 d0                	mov    al,dl
c001a993:	e6 64                	out    0x64,al
c001a995:	fa                   	cli    
c001a996:	f4                   	hlt    
c001a997:	eb e8                	jmp    c001a981 <Krnl::panic(char const*)+0x32a>
c001a999:	50                   	push   eax
c001a99a:	50                   	push   eax
c001a99b:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a9a0:	68 d8 c0 02 c0       	push   0xc002c0d8
c001a9a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ab:	e8 f2 65 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a9b0:	58                   	pop    eax
c001a9b1:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a9b6:	5a                   	pop    edx
c001a9b7:	68 e7 bf 02 c0       	push   0xc002bfe7
c001a9bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c2:	e8 db 65 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a9c7:	59                   	pop    ecx
c001a9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9cd:	5b                   	pop    ebx
c001a9ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9d1:	83 c0 0c             	add    eax,0xc
c001a9d4:	50                   	push   eax
c001a9d5:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001a9da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e0:	e8 bd 65 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a9e5:	83 c4 10             	add    esp,0x10
c001a9e8:	e9 a3 fd ff ff       	jmp    c001a790 <Krnl::panic(char const*)+0x139>

c001a9ed <Net::switchEndian16(unsigned short)>:
c001a9ed:	83 ec 04             	sub    esp,0x4
c001a9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9f8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9fc:	c1 f8 08             	sar    eax,0x8
c001a9ff:	89 c2                	mov    edx,eax
c001aa01:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa05:	c1 e0 08             	shl    eax,0x8
c001aa08:	09 d0                	or     eax,edx
c001aa0a:	83 c4 04             	add    esp,0x4
c001aa0d:	c3                   	ret    

c001aa0e <Net::switchEndian32(unsigned int)>:
c001aa0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa12:	c1 e8 18             	shr    eax,0x18
c001aa15:	89 c2                	mov    edx,eax
c001aa17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1b:	c1 e0 08             	shl    eax,0x8
c001aa1e:	25 00 00 ff 00       	and    eax,0xff0000
c001aa23:	09 c2                	or     edx,eax
c001aa25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa29:	c1 e8 08             	shr    eax,0x8
c001aa2c:	25 00 ff 00 00       	and    eax,0xff00
c001aa31:	09 c2                	or     edx,eax
c001aa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa37:	c1 e0 18             	shl    eax,0x18
c001aa3a:	09 d0                	or     eax,edx
c001aa3c:	c3                   	ret    

c001aa3d <Net::crc32Calc(unsigned char*, int)>:
c001aa3d:	83 ec 10             	sub    esp,0x10
c001aa40:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa45:	75 07                	jne    c001aa4e <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa47:	b8 00 00 00 00       	mov    eax,0x0
c001aa4c:	eb 7c                	jmp    c001aaca <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa4e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa53:	7f 07                	jg     c001aa5c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa55:	b8 00 00 00 00       	mov    eax,0x0
c001aa5a:	eb 6e                	jmp    c001aaca <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa5c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa70:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa74:	7d 4e                	jge    c001aac4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa7e:	01 d0                	add    eax,edx
c001aa80:	8a 00                	mov    al,BYTE PTR [eax]
c001aa82:	0f b6 c0             	movzx  eax,al
c001aa85:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa91:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa96:	7f 26                	jg     c001aabe <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9c:	83 e0 01             	and    eax,0x1
c001aa9f:	74 0d                	je     c001aaae <Net::crc32Calc(unsigned char*, int)+0x71>
c001aaa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa5:	d1 e8                	shr    eax,1
c001aaa7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaac:	eb 06                	jmp    c001aab4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab2:	d1 e8                	shr    eax,1
c001aab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aab8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aabc:	eb d3                	jmp    c001aa91 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aabe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aac2:	eb a8                	jmp    c001aa6c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac8:	f7 d0                	not    eax
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	c3                   	ret    

c001aace <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aace:	83 ec 1c             	sub    esp,0x1c
c001aad1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aad5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aad9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aae1:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aae6:	7f 14                	jg     c001aafc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aae8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaec:	8d 50 01             	lea    edx,[eax+0x1]
c001aaef:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aaf6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aafa:	eb e5                	jmp    c001aae1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aafc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab00:	8d 50 01             	lea    edx,[eax+0x1]
c001ab03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab07:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab0a:	83 ec 04             	sub    esp,0x4
c001ab0d:	6a 06                	push   0x6
c001ab0f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab13:	50                   	push   eax
c001ab14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab18:	e8 2f 5c fe ff       	call   c000074c <memcpy>
c001ab1d:	83 c4 10             	add    esp,0x10
c001ab20:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab25:	83 ec 04             	sub    esp,0x4
c001ab28:	6a 06                	push   0x6
c001ab2a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab2e:	50                   	push   eax
c001ab2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab33:	e8 14 5c fe ff       	call   c000074c <memcpy>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab44:	0f b7 c0             	movzx  eax,ax
c001ab47:	c1 f8 08             	sar    eax,0x8
c001ab4a:	89 c1                	mov    ecx,eax
c001ab4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab50:	8d 50 01             	lea    edx,[eax+0x1]
c001ab53:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab57:	88 ca                	mov    dl,cl
c001ab59:	88 10                	mov    BYTE PTR [eax],dl
c001ab5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab63:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab66:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab6a:	88 10                	mov    BYTE PTR [eax],dl
c001ab6c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab74:	83 ec 04             	sub    esp,0x4
c001ab77:	52                   	push   edx
c001ab78:	50                   	push   eax
c001ab79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab7d:	e8 ca 5b fe ff       	call   c000074c <memcpy>
c001ab82:	83 c4 10             	add    esp,0x10
c001ab85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab89:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab91:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab95:	83 ec 08             	sub    esp,0x8
c001ab98:	50                   	push   eax
c001ab99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab9d:	e8 9b fe ff ff       	call   c001aa3d <Net::crc32Calc(unsigned char*, int)>
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abad:	c1 e8 18             	shr    eax,0x18
c001abb0:	89 c1                	mov    ecx,eax
c001abb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb6:	8d 50 01             	lea    edx,[eax+0x1]
c001abb9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abbd:	88 ca                	mov    dl,cl
c001abbf:	88 10                	mov    BYTE PTR [eax],dl
c001abc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc5:	c1 e8 10             	shr    eax,0x10
c001abc8:	89 c1                	mov    ecx,eax
c001abca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abce:	8d 50 01             	lea    edx,[eax+0x1]
c001abd1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abd5:	88 ca                	mov    dl,cl
c001abd7:	88 10                	mov    BYTE PTR [eax],dl
c001abd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdd:	c1 e8 08             	shr    eax,0x8
c001abe0:	89 c1                	mov    ecx,eax
c001abe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe6:	8d 50 01             	lea    edx,[eax+0x1]
c001abe9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abed:	88 ca                	mov    dl,cl
c001abef:	88 10                	mov    BYTE PTR [eax],dl
c001abf1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf5:	8d 50 01             	lea    edx,[eax+0x1]
c001abf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac00:	88 10                	mov    BYTE PTR [eax],dl
c001ac02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac06:	83 c4 1c             	add    esp,0x1c
c001ac09:	c3                   	ret    

c001ac0a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac0a:	83 ec 2c             	sub    esp,0x2c
c001ac0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac15:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac1a:	83 ec 04             	sub    esp,0x4
c001ac1d:	6a 06                	push   0x6
c001ac1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac27:	83 c0 0e             	add    eax,0xe
c001ac2a:	50                   	push   eax
c001ac2b:	e8 1c 5b fe ff       	call   c000074c <memcpy>
c001ac30:	83 c4 10             	add    esp,0x10
c001ac33:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac38:	83 ec 04             	sub    esp,0x4
c001ac3b:	6a 06                	push   0x6
c001ac3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac45:	83 c0 08             	add    eax,0x8
c001ac48:	50                   	push   eax
c001ac49:	e8 fe 5a fe ff       	call   c000074c <memcpy>
c001ac4e:	83 c4 10             	add    esp,0x10
c001ac51:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac61:	8a 00                	mov    al,BYTE PTR [eax]
c001ac63:	0f b6 c0             	movzx  eax,al
c001ac66:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac72:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac76:	8a 00                	mov    al,BYTE PTR [eax]
c001ac78:	0f b6 c0             	movzx  eax,al
c001ac7b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac85:	c1 e0 08             	shl    eax,0x8
c001ac88:	89 c2                	mov    edx,eax
c001ac8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac8e:	09 d0                	or     eax,edx
c001ac90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac94:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac98:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac9d:	75 3a                	jne    c001acd9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aca3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aca6:	66 3d dc 05          	cmp    ax,0x5dc
c001acaa:	77 10                	ja     c001acbc <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acb3:	0f b7 c0             	movzx  eax,ax
c001acb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acba:	eb 1d                	jmp    c001acd9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acbc:	83 ec 0c             	sub    esp,0xc
c001acbf:	68 b0 c1 02 c0       	push   0xc002c1b0
c001acc4:	e8 fa 80 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001acc9:	83 c4 10             	add    esp,0x10
c001accc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acd0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acd4:	e9 c0 00 00 00       	jmp    c001ad99 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acd9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001acdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ace3:	83 ec 04             	sub    esp,0x4
c001ace6:	52                   	push   edx
c001ace7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aceb:	50                   	push   eax
c001acec:	e8 5b 5a fe ff       	call   c000074c <memcpy>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acf8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad00:	8d 50 01             	lea    edx,[eax+0x1]
c001ad03:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad07:	8a 00                	mov    al,BYTE PTR [eax]
c001ad09:	0f b6 c0             	movzx  eax,al
c001ad0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad14:	8d 50 01             	lea    edx,[eax+0x1]
c001ad17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad1b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad1d:	0f b6 c0             	movzx  eax,al
c001ad20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad28:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad2f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad31:	0f b6 c0             	movzx  eax,al
c001ad34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad43:	8a 00                	mov    al,BYTE PTR [eax]
c001ad45:	0f b6 c0             	movzx  eax,al
c001ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad50:	c1 e0 18             	shl    eax,0x18
c001ad53:	89 c2                	mov    edx,eax
c001ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad59:	c1 e0 10             	shl    eax,0x10
c001ad5c:	09 c2                	or     edx,eax
c001ad5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad62:	c1 e0 08             	shl    eax,0x8
c001ad65:	09 d0                	or     eax,edx
c001ad67:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad73:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad77:	83 e8 04             	sub    eax,0x4
c001ad7a:	83 ec 08             	sub    esp,0x8
c001ad7d:	50                   	push   eax
c001ad7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad82:	e8 b6 fc ff ff       	call   c001aa3d <Net::crc32Calc(unsigned char*, int)>
c001ad87:	83 c4 10             	add    esp,0x10
c001ad8a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad8e:	0f 94 c2             	sete   dl
c001ad91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad95:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad98:	90                   	nop
c001ad99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad9d:	83 c4 2c             	add    esp,0x2c
c001ada0:	c2 04 00             	ret    0x4

c001ada3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ada3:	55                   	push   ebp
c001ada4:	57                   	push   edi
c001ada5:	56                   	push   esi
c001ada6:	53                   	push   ebx
c001ada7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adad:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adb4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adb6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adb9:	80 fb 40             	cmp    bl,0x40
c001adbc:	75 1b                	jne    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adbe:	8a 16                	mov    dl,BYTE PTR [esi]
c001adc0:	84 d2                	test   dl,dl
c001adc2:	0f 84 f1 00 00 00    	je     c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc8:	8d 46 01             	lea    eax,[esi+0x1]
c001adcb:	80 fa 3a             	cmp    dl,0x3a
c001adce:	74 04                	je     c001add4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001add0:	89 c6                	mov    esi,eax
c001add2:	eb ea                	jmp    c001adbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001add4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001add7:	89 c6                	mov    esi,eax
c001add9:	50                   	push   eax
c001adda:	6a 40                	push   0x40
c001addc:	6a 00                	push   0x0
c001adde:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ade2:	50                   	push   eax
c001ade3:	e8 98 59 fe ff       	call   c0000780 <memset>
c001ade8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001adef:	31 c0                	xor    eax,eax
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adf6:	84 c9                	test   cl,cl
c001adf8:	0f 84 bb 00 00 00    	je     c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adfe:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae03:	0f 8f b0 00 00 00    	jg     c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae09:	80 f9 0a             	cmp    cl,0xa
c001ae0c:	0f 85 98 00 00 00    	jne    c001aeaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae12:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae17:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae1b:	a8 df                	test   al,0xdf
c001ae1d:	0f 94 c1             	sete   cl
c001ae20:	3c 23                	cmp    al,0x23
c001ae22:	0f 94 c2             	sete   dl
c001ae25:	08 d1                	or     cl,dl
c001ae27:	75 4a                	jne    c001ae73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae29:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae2c:	80 fa 01             	cmp    dl,0x1
c001ae2f:	76 42                	jbe    c001ae73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae31:	3c 5b                	cmp    al,0x5b
c001ae33:	75 42                	jne    c001ae77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae35:	80 fb 40             	cmp    bl,0x40
c001ae38:	75 39                	jne    c001ae73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae3a:	83 ec 0c             	sub    esp,0xc
c001ae3d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae41:	52                   	push   edx
c001ae42:	e8 55 59 fe ff       	call   c000079c <strlen>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	83 f8 3f             	cmp    eax,0x3f
c001ae4d:	77 6a                	ja     c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4f:	50                   	push   eax
c001ae50:	50                   	push   eax
c001ae51:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae55:	52                   	push   edx
c001ae56:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae5a:	52                   	push   edx
c001ae5b:	e8 dc 59 fe ff       	call   c000083c <strcpy>
c001ae60:	58                   	pop    eax
c001ae61:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae65:	52                   	push   edx
c001ae66:	e8 31 59 fe ff       	call   c000079c <strlen>
c001ae6b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae70:	83 c4 10             	add    esp,0x10
c001ae73:	31 d2                	xor    edx,edx
c001ae75:	eb 3a                	jmp    c001aeb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae77:	80 fb 40             	cmp    bl,0x40
c001ae7a:	74 06                	je     c001ae82 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae7c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae80:	eb 20                	jmp    c001aea2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae82:	50                   	push   eax
c001ae83:	50                   	push   eax
c001ae84:	55                   	push   ebp
c001ae85:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae89:	50                   	push   eax
c001ae8a:	e8 39 5a fe ff       	call   c00008c8 <strcmp>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	85 c0                	test   eax,eax
c001ae94:	75 dd                	jne    c001ae73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae96:	eb e4                	jmp    c001ae7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae98:	8d 50 01             	lea    edx,[eax+0x1]
c001ae9b:	80 f9 3d             	cmp    cl,0x3d
c001ae9e:	74 1d                	je     c001aebd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aea0:	89 d0                	mov    eax,edx
c001aea2:	8a 08                	mov    cl,BYTE PTR [eax]
c001aea4:	84 c9                	test   cl,cl
c001aea6:	75 f0                	jne    c001ae98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aea8:	eb 0f                	jmp    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aeaa:	8d 50 01             	lea    edx,[eax+0x1]
c001aead:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aeb1:	47                   	inc    edi
c001aeb2:	89 d0                	mov    eax,edx
c001aeb4:	e9 3b ff ff ff       	jmp    c001adf4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aeb9:	31 c0                	xor    eax,eax
c001aebb:	eb 33                	jmp    c001aef0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aebd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aec1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aec4:	50                   	push   eax
c001aec5:	50                   	push   eax
c001aec6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aeca:	50                   	push   eax
c001aecb:	56                   	push   esi
c001aecc:	e8 f7 59 fe ff       	call   c00008c8 <strcmp>
c001aed1:	83 c4 10             	add    esp,0x10
c001aed4:	85 c0                	test   eax,eax
c001aed6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aeda:	75 97                	jne    c001ae73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aedc:	51                   	push   ecx
c001aedd:	51                   	push   ecx
c001aede:	52                   	push   edx
c001aedf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aee6:	e8 51 59 fe ff       	call   c000083c <strcpy>
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	b0 01                	mov    al,0x1
c001aef0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aef6:	5b                   	pop    ebx
c001aef7:	5e                   	pop    esi
c001aef8:	5f                   	pop    edi
c001aef9:	5d                   	pop    ebp
c001aefa:	c3                   	ret    

c001aefb <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aefb:	57                   	push   edi
c001aefc:	56                   	push   esi
c001aefd:	53                   	push   ebx
c001aefe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af04:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af0b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af12:	53                   	push   ebx
c001af13:	e8 84 58 fe ff       	call   c000079c <strlen>
c001af18:	89 34 24             	mov    DWORD PTR [esp],esi
c001af1b:	89 c7                	mov    edi,eax
c001af1d:	e8 7a 58 fe ff       	call   c000079c <strlen>
c001af22:	83 c4 10             	add    esp,0x10
c001af25:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af29:	3d ff 00 00 00       	cmp    eax,0xff
c001af2e:	0f 87 d3 00 00 00    	ja     c001b007 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af34:	57                   	push   edi
c001af35:	57                   	push   edi
c001af36:	56                   	push   esi
c001af37:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af3b:	56                   	push   esi
c001af3c:	e8 fb 58 fe ff       	call   c000083c <strcpy>
c001af41:	58                   	pop    eax
c001af42:	5a                   	pop    edx
c001af43:	68 05 c7 02 c0       	push   0xc002c705
c001af48:	56                   	push   esi
c001af49:	e8 2e 5a fe ff       	call   c000097c <strcat>
c001af4e:	59                   	pop    ecx
c001af4f:	5f                   	pop    edi
c001af50:	53                   	push   ebx
c001af51:	56                   	push   esi
c001af52:	e8 25 5a fe ff       	call   c000097c <strcat>
c001af57:	58                   	pop    eax
c001af58:	5a                   	pop    edx
c001af59:	68 fc c1 02 c0       	push   0xc002c1fc
c001af5e:	56                   	push   esi
c001af5f:	e8 18 5a fe ff       	call   c000097c <strcat>
c001af64:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af6b:	e8 db 48 ff ff       	call   c000f84b <malloc>
c001af70:	83 c4 0c             	add    esp,0xc
c001af73:	89 c3                	mov    ebx,eax
c001af75:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001af7b:	56                   	push   esi
c001af7c:	50                   	push   eax
c001af7d:	e8 a0 83 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	85 db                	test   ebx,ebx
c001af87:	74 7e                	je     c001b007 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af89:	51                   	push   ecx
c001af8a:	51                   	push   ecx
c001af8b:	6a 01                	push   0x1
c001af8d:	53                   	push   ebx
c001af8e:	e8 f3 83 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	85 c0                	test   eax,eax
c001af98:	74 08                	je     c001afa2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af9f:	53                   	push   ebx
c001afa0:	eb 5f                	jmp    c001b001 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afa2:	52                   	push   edx
c001afa3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afa7:	50                   	push   eax
c001afa8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afac:	50                   	push   eax
c001afad:	53                   	push   ebx
c001afae:	e8 7f 86 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001afb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	89 c1                	mov    ecx,eax
c001afbc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afc0:	74 31                	je     c001aff3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	50                   	push   eax
c001afc6:	e8 80 48 ff ff       	call   c000f84b <malloc>
c001afcb:	89 c6                	mov    esi,eax
c001afcd:	58                   	pop    eax
c001afce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afd0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afd4:	52                   	push   edx
c001afd5:	56                   	push   esi
c001afd6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afde:	53                   	push   ebx
c001afdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afe2:	83 c4 20             	add    esp,0x20
c001afe5:	85 c0                	test   eax,eax
c001afe7:	75 0a                	jne    c001aff3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afed:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aff1:	74 18                	je     c001b00b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aff3:	83 ec 0c             	sub    esp,0xc
c001aff6:	53                   	push   ebx
c001aff7:	e8 e8 83 ff ff       	call   c00133e4 <File::close()>
c001affc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001affe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b001:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b004:	83 c4 10             	add    esp,0x10
c001b007:	31 c0                	xor    eax,eax
c001b009:	eb 3b                	jmp    c001b046 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b00b:	83 ec 0c             	sub    esp,0xc
c001b00e:	53                   	push   ebx
c001b00f:	e8 d0 83 ff ff       	call   c00133e4 <File::close()>
c001b014:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b01c:	83 c4 0c             	add    esp,0xc
c001b01f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b026:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b02d:	56                   	push   esi
c001b02e:	e8 70 fd ff ff       	call   c001ada3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b033:	89 34 24             	mov    DWORD PTR [esp],esi
c001b036:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b03a:	e8 1c 48 ff ff       	call   c000f85b <free>
c001b03f:	83 c4 10             	add    esp,0x10
c001b042:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b046:	81 c4 20 01 00 00    	add    esp,0x120
c001b04c:	5b                   	pop    ebx
c001b04d:	5e                   	pop    esi
c001b04e:	5f                   	pop    edi
c001b04f:	c3                   	ret    

c001b050 <Reg::getLine(char*, char*, char*)>:
c001b050:	57                   	push   edi
c001b051:	56                   	push   esi
c001b052:	53                   	push   ebx
c001b053:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b05b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b05f:	57                   	push   edi
c001b060:	56                   	push   esi
c001b061:	53                   	push   ebx
c001b062:	68 01 c2 02 c0       	push   0xc002c201
c001b067:	e8 8f fe ff ff       	call   c001aefb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b06c:	83 c4 10             	add    esp,0x10
c001b06f:	84 c0                	test   al,al
c001b071:	75 10                	jne    c001b083 <Reg::getLine(char*, char*, char*)+0x33>
c001b073:	57                   	push   edi
c001b074:	56                   	push   esi
c001b075:	53                   	push   ebx
c001b076:	68 26 c2 02 c0       	push   0xc002c226
c001b07b:	e8 7b fe ff ff       	call   c001aefb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	5b                   	pop    ebx
c001b084:	5e                   	pop    esi
c001b085:	5f                   	pop    edi
c001b086:	c3                   	ret    

c001b087 <Reg::readInt(char*, char*, int*)>:
c001b087:	55                   	push   ebp
c001b088:	57                   	push   edi
c001b089:	56                   	push   esi
c001b08a:	53                   	push   ebx
c001b08b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b091:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b095:	57                   	push   edi
c001b096:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b09d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0a4:	e8 a7 ff ff ff       	call   c001b050 <Reg::getLine(char*, char*, char*)>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	84 c0                	test   al,al
c001b0ae:	0f 84 b3 00 00 00    	je     c001b167 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0b4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0b8:	80 fa 2b             	cmp    dl,0x2b
c001b0bb:	74 0c                	je     c001b0c9 <Reg::readInt(char*, char*, int*)+0x42>
c001b0bd:	80 fa 2d             	cmp    dl,0x2d
c001b0c0:	75 0e                	jne    c001b0d0 <Reg::readInt(char*, char*, int*)+0x49>
c001b0c2:	ba 01 00 00 00       	mov    edx,0x1
c001b0c7:	eb 0b                	jmp    c001b0d4 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0c9:	ba 01 00 00 00       	mov    edx,0x1
c001b0ce:	eb 02                	jmp    c001b0d2 <Reg::readInt(char*, char*, int*)+0x4b>
c001b0d0:	31 d2                	xor    edx,edx
c001b0d2:	31 c0                	xor    eax,eax
c001b0d4:	be 0a 00 00 00       	mov    esi,0xa
c001b0d9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0de:	75 20                	jne    c001b100 <Reg::readInt(char*, char*, int*)+0x79>
c001b0e0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0e4:	80 f9 78             	cmp    cl,0x78
c001b0e7:	75 0a                	jne    c001b0f3 <Reg::readInt(char*, char*, int*)+0x6c>
c001b0e9:	83 c2 02             	add    edx,0x2
c001b0ec:	be 10 00 00 00       	mov    esi,0x10
c001b0f1:	eb 0d                	jmp    c001b100 <Reg::readInt(char*, char*, int*)+0x79>
c001b0f3:	80 f9 62             	cmp    cl,0x62
c001b0f6:	75 08                	jne    c001b100 <Reg::readInt(char*, char*, int*)+0x79>
c001b0f8:	83 c2 02             	add    edx,0x2
c001b0fb:	be 02 00 00 00       	mov    esi,0x2
c001b100:	01 d7                	add    edi,edx
c001b102:	31 d2                	xor    edx,edx
c001b104:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b106:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b10a:	80 fb 0d             	cmp    bl,0xd
c001b10d:	0f 94 c3             	sete   bl
c001b110:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b115:	0f 94 c1             	sete   cl
c001b118:	08 cb                	or     bl,cl
c001b11a:	75 3a                	jne    c001b156 <Reg::readInt(char*, char*, int*)+0xcf>
c001b11c:	0f af d6             	imul   edx,esi
c001b11f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b124:	83 fe 10             	cmp    esi,0x10
c001b127:	75 26                	jne    c001b14f <Reg::readInt(char*, char*, int*)+0xc8>
c001b129:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b12d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b130:	89 e9                	mov    ecx,ebp
c001b132:	80 f9 05             	cmp    cl,0x5
c001b135:	77 06                	ja     c001b13d <Reg::readInt(char*, char*, int*)+0xb6>
c001b137:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b13b:	eb 16                	jmp    c001b153 <Reg::readInt(char*, char*, int*)+0xcc>
c001b13d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b141:	83 e9 61             	sub    ecx,0x61
c001b144:	80 f9 05             	cmp    cl,0x5
c001b147:	77 06                	ja     c001b14f <Reg::readInt(char*, char*, int*)+0xc8>
c001b149:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b14d:	eb 04                	jmp    c001b153 <Reg::readInt(char*, char*, int*)+0xcc>
c001b14f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b153:	47                   	inc    edi
c001b154:	eb ae                	jmp    c001b104 <Reg::readInt(char*, char*, int*)+0x7d>
c001b156:	84 c0                	test   al,al
c001b158:	74 02                	je     c001b15c <Reg::readInt(char*, char*, int*)+0xd5>
c001b15a:	f7 da                	neg    edx
c001b15c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b163:	89 10                	mov    DWORD PTR [eax],edx
c001b165:	88 d8                	mov    al,bl
c001b167:	81 c4 ec 00 00 00    	add    esp,0xec
c001b16d:	5b                   	pop    ebx
c001b16e:	5e                   	pop    esi
c001b16f:	5f                   	pop    edi
c001b170:	5d                   	pop    ebp
c001b171:	c3                   	ret    

c001b172 <Reg::readString(char*, char*, char*, int)>:
c001b172:	57                   	push   edi
c001b173:	56                   	push   esi
c001b174:	53                   	push   ebx
c001b175:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b17b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b182:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b186:	57                   	push   edi
c001b187:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b18e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b195:	e8 b6 fe ff ff       	call   c001b050 <Reg::getLine(char*, char*, char*)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	89 c6                	mov    esi,eax
c001b19f:	84 c0                	test   al,al
c001b1a1:	74 44                	je     c001b1e7 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1a3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1aa:	31 c0                	xor    eax,eax
c001b1ac:	4a                   	dec    edx
c001b1ad:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1b0:	84 c9                	test   cl,cl
c001b1b2:	74 0f                	je     c001b1c3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1b4:	39 c2                	cmp    edx,eax
c001b1b6:	7e 0b                	jle    c001b1c3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1b8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1bb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1c0:	40                   	inc    eax
c001b1c1:	eb ea                	jmp    c001b1ad <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1c3:	83 ec 0c             	sub    esp,0xc
c001b1c6:	53                   	push   ebx
c001b1c7:	e8 d0 55 fe ff       	call   c000079c <strlen>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1d4:	75 11                	jne    c001b1e7 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1d6:	83 ec 0c             	sub    esp,0xc
c001b1d9:	53                   	push   ebx
c001b1da:	e8 bd 55 fe ff       	call   c000079c <strlen>
c001b1df:	83 c4 10             	add    esp,0x10
c001b1e2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1e7:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1ed:	89 f0                	mov    eax,esi
c001b1ef:	5b                   	pop    ebx
c001b1f0:	5e                   	pop    esi
c001b1f1:	5f                   	pop    edi
c001b1f2:	c3                   	ret    

c001b1f3 <Reg::readBool(char*, char*, bool*)>:
c001b1f3:	83 ec 20             	sub    esp,0x20
c001b1f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1fa:	50                   	push   eax
c001b1fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b203:	e8 7f fe ff ff       	call   c001b087 <Reg::readInt(char*, char*, int*)>
c001b208:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b20d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b211:	0f 95 02             	setne  BYTE PTR [edx]
c001b214:	83 c4 2c             	add    esp,0x2c
c001b217:	c3                   	ret    

c001b218 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b218:	53                   	push   ebx
c001b219:	83 ec 1c             	sub    esp,0x1c
c001b21c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b220:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b224:	50                   	push   eax
c001b225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b22d:	e8 c1 ff ff ff       	call   c001b1f3 <Reg::readBool(char*, char*, bool*)>
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	84 c0                	test   al,al
c001b237:	74 04                	je     c001b23d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b239:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b23d:	88 d8                	mov    al,bl
c001b23f:	83 c4 18             	add    esp,0x18
c001b242:	5b                   	pop    ebx
c001b243:	c3                   	ret    

c001b244 <Reg::readIntWithDefault(char*, char*, int)>:
c001b244:	53                   	push   ebx
c001b245:	83 ec 1c             	sub    esp,0x1c
c001b248:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b24c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b250:	50                   	push   eax
c001b251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b259:	e8 29 fe ff ff       	call   c001b087 <Reg::readInt(char*, char*, int*)>
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	84 c0                	test   al,al
c001b263:	74 04                	je     c001b269 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b265:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b269:	89 d8                	mov    eax,ebx
c001b26b:	83 c4 18             	add    esp,0x18
c001b26e:	5b                   	pop    ebx
c001b26f:	c3                   	ret    

c001b270 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b270:	57                   	push   edi
c001b271:	56                   	push   esi
c001b272:	53                   	push   ebx
c001b273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b277:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b27b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b27f:	56                   	push   esi
c001b280:	53                   	push   ebx
c001b281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b289:	e8 e4 fe ff ff       	call   c001b172 <Reg::readString(char*, char*, char*, int)>
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	84 c0                	test   al,al
c001b293:	75 1b                	jne    c001b2b0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b295:	50                   	push   eax
c001b296:	56                   	push   esi
c001b297:	4e                   	dec    esi
c001b298:	6a 00                	push   0x0
c001b29a:	53                   	push   ebx
c001b29b:	e8 e0 54 fe ff       	call   c0000780 <memset>
c001b2a0:	83 c4 0c             	add    esp,0xc
c001b2a3:	56                   	push   esi
c001b2a4:	57                   	push   edi
c001b2a5:	53                   	push   ebx
c001b2a6:	89 fb                	mov    ebx,edi
c001b2a8:	e8 9f 54 fe ff       	call   c000074c <memcpy>
c001b2ad:	83 c4 10             	add    esp,0x10
c001b2b0:	89 d8                	mov    eax,ebx
c001b2b2:	5b                   	pop    ebx
c001b2b3:	5e                   	pop    esi
c001b2b4:	5f                   	pop    edi
c001b2b5:	c3                   	ret    

c001b2b6 <Sys::eject(regs*)>:
c001b2b6:	83 ec 0c             	sub    esp,0xc
c001b2b9:	83 ca ff             	or     edx,0xffffffff
c001b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2c8:	83 e9 41             	sub    ecx,0x41
c001b2cb:	83 f9 19             	cmp    ecx,0x19
c001b2ce:	77 18                	ja     c001b2e8 <Sys::eject(regs*)+0x32>
c001b2d0:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c001b2d7:	85 c9                	test   ecx,ecx
c001b2d9:	74 0d                	je     c001b2e8 <Sys::eject(regs*)+0x32>
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	51                   	push   ecx
c001b2df:	e8 56 b3 ff ff       	call   c001663a <LogicalDisk::eject()>
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	99                   	cdq    
c001b2e8:	83 c4 0c             	add    esp,0xc
c001b2eb:	c3                   	ret    

c001b2ec <Sys::exit(regs*)>:
c001b2ec:	83 ec 18             	sub    esp,0x18
c001b2ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2f6:	e8 0f 37 00 00       	call   c001ea0a <terminateTask(int)>
c001b2fb:	83 c8 ff             	or     eax,0xffffffff
c001b2fe:	83 c4 1c             	add    esp,0x1c
c001b301:	89 c2                	mov    edx,eax
c001b303:	c3                   	ret    

c001b304 <Sys::getCwd(regs*)>:
c001b304:	83 ec 10             	sub    esp,0x10
c001b307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b30b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b30e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b316:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b319:	e8 06 7e ff ff       	call   c0013124 <Fs::getcwd(Process*, char*, int)>
c001b31e:	83 c4 1c             	add    esp,0x1c
c001b321:	99                   	cdq    
c001b322:	c3                   	ret    

c001b323 <Sys::getPID(regs*)>:
c001b323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b328:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b32b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b32d:	99                   	cdq    
c001b32e:	c3                   	ret    

c001b32f <Sys::getRAMData(regs*)>:
c001b32f:	8b 0d f4 e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e9f4
c001b335:	6b 05 f0 e9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e9f0,0x64
c001b33c:	99                   	cdq    
c001b33d:	f7 f9                	idiv   ecx
c001b33f:	c1 e0 18             	shl    eax,0x18
c001b342:	09 c8                	or     eax,ecx
c001b344:	99                   	cdq    
c001b345:	c3                   	ret    

c001b346 <Sys::getVGAPtr(regs*)>:
c001b346:	56                   	push   esi
c001b347:	53                   	push   ebx
c001b348:	83 ec 10             	sub    esp,0x10
c001b34b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b34f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b352:	e8 ef 31 00 00       	call   c001e546 <Thr::processFromPID(int)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	89 c1                	mov    ecx,eax
c001b35c:	b8 01 00 00 00       	mov    eax,0x1
c001b361:	85 c9                	test   ecx,ecx
c001b363:	74 5d                	je     c001b3c2 <Sys::getVGAPtr(regs*)+0x7c>
c001b365:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b36b:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b36f:	74 0c                	je     c001b37d <Sys::getVGAPtr(regs*)+0x37>
c001b371:	83 ec 0c             	sub    esp,0xc
c001b374:	53                   	push   ebx
c001b375:	e8 9c 58 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	81 c3 82 00 00 00    	add    ebx,0x82
c001b383:	50                   	push   eax
c001b384:	68 a0 0f 00 00       	push   0xfa0
c001b389:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b38c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b38f:	e8 b8 53 fe ff       	call   c000074c <memcpy>
c001b394:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b397:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b39a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b3a0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b3a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3a6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b3ac:	58                   	pop    eax
c001b3ad:	5a                   	pop    edx
c001b3ae:	53                   	push   ebx
c001b3af:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3b2:	05 a8 0f 00 00       	add    eax,0xfa8
c001b3b7:	50                   	push   eax
c001b3b8:	e8 7f 54 fe ff       	call   c000083c <strcpy>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	31 c0                	xor    eax,eax
c001b3c2:	59                   	pop    ecx
c001b3c3:	31 d2                	xor    edx,edx
c001b3c5:	5b                   	pop    ebx
c001b3c6:	5e                   	pop    esi
c001b3c7:	c3                   	ret    

c001b3c8 <Sys::loadDLL(regs*)>:
c001b3c8:	56                   	push   esi
c001b3c9:	53                   	push   ebx
c001b3ca:	31 d2                	xor    edx,edx
c001b3cc:	51                   	push   ecx
c001b3cd:	b8 01 00 00 00       	mov    eax,0x1
c001b3d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3d6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b3da:	0f 84 8c 00 00 00    	je     c001b46c <Sys::loadDLL(regs*)+0xa4>
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	68 14 01 00 00       	push   0x114
c001b3e8:	e8 5e 44 ff ff       	call   c000f84b <malloc>
c001b3ed:	83 c4 0c             	add    esp,0xc
c001b3f0:	89 c3                	mov    ebx,eax
c001b3f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3fd:	53                   	push   ebx
c001b3fe:	e8 1f 7f ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	31 d2                	xor    edx,edx
c001b408:	b8 02 00 00 00       	mov    eax,0x2
c001b40d:	85 db                	test   ebx,ebx
c001b40f:	74 5b                	je     c001b46c <Sys::loadDLL(regs*)+0xa4>
c001b411:	83 ec 0c             	sub    esp,0xc
c001b414:	53                   	push   ebx
c001b415:	e8 da 81 ff ff       	call   c00135f4 <File::exists()>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	84 c0                	test   al,al
c001b41f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b421:	75 11                	jne    c001b434 <Sys::loadDLL(regs*)+0x6c>
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	53                   	push   ebx
c001b427:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b42a:	83 c4 10             	add    esp,0x10
c001b42d:	b8 03 00 00 00       	mov    eax,0x3
c001b432:	eb 36                	jmp    c001b46a <Sys::loadDLL(regs*)+0xa2>
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	53                   	push   ebx
c001b438:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b43b:	58                   	pop    eax
c001b43c:	5a                   	pop    edx
c001b43d:	6a 00                	push   0x0
c001b43f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b442:	e8 06 24 00 00       	call   c001d84d <Thr::loadDLL(char const*, bool)>
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	89 c1                	mov    ecx,eax
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	b8 04 00 00 00       	mov    eax,0x4
c001b453:	85 c9                	test   ecx,ecx
c001b455:	74 15                	je     c001b46c <Sys::loadDLL(regs*)+0xa4>
c001b457:	53                   	push   ebx
c001b458:	53                   	push   ebx
c001b459:	ff 35 a8 e9 02 c0    	push   DWORD PTR ds:0xc002e9a8
c001b45f:	51                   	push   ecx
c001b460:	e8 1c 26 00 00       	call   c001da81 <Thr::executeDLL(unsigned long, void*)>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	31 c0                	xor    eax,eax
c001b46a:	31 d2                	xor    edx,edx
c001b46c:	59                   	pop    ecx
c001b46d:	5b                   	pop    ebx
c001b46e:	5e                   	pop    esi
c001b46f:	c3                   	ret    

c001b470 <Sys::read(regs*)>:
c001b470:	57                   	push   edi
c001b471:	56                   	push   esi
c001b472:	53                   	push   ebx
c001b473:	83 ec 10             	sub    esp,0x10
c001b476:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b47a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b47d:	83 f8 02             	cmp    eax,0x2
c001b480:	77 10                	ja     c001b492 <Sys::read(regs*)+0x22>
c001b482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b487:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b48a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b490:	eb 0e                	jmp    c001b4a0 <Sys::read(regs*)+0x30>
c001b492:	83 ec 0c             	sub    esp,0xc
c001b495:	50                   	push   eax
c001b496:	e8 fe 63 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b49b:	83 c4 10             	add    esp,0x10
c001b49e:	89 c1                	mov    ecx,eax
c001b4a0:	83 c8 ff             	or     eax,0xffffffff
c001b4a3:	85 c9                	test   ecx,ecx
c001b4a5:	89 c2                	mov    edx,eax
c001b4a7:	74 28                	je     c001b4d1 <Sys::read(regs*)+0x61>
c001b4a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4b1:	31 ff                	xor    edi,edi
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4b8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4bc:	52                   	push   edx
c001b4bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4c0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4c3:	57                   	push   edi
c001b4c4:	56                   	push   esi
c001b4c5:	51                   	push   ecx
c001b4c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4cd:	83 c4 20             	add    esp,0x20
c001b4d0:	99                   	cdq    
c001b4d1:	83 c4 10             	add    esp,0x10
c001b4d4:	5b                   	pop    ebx
c001b4d5:	5e                   	pop    esi
c001b4d6:	5f                   	pop    edi
c001b4d7:	c3                   	ret    

c001b4d8 <Sys::sbrk(regs*)>:
c001b4d8:	56                   	push   esi
c001b4d9:	53                   	push   ebx
c001b4da:	50                   	push   eax
c001b4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4e7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4ea:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4f0:	85 db                	test   ebx,ebx
c001b4f2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b4f5:	74 02                	je     c001b4f9 <Sys::sbrk(regs*)+0x21>
c001b4f7:	79 06                	jns    c001b4ff <Sys::sbrk(regs*)+0x27>
c001b4f9:	89 f0                	mov    eax,esi
c001b4fb:	31 d2                	xor    edx,edx
c001b4fd:	eb 2a                	jmp    c001b529 <Sys::sbrk(regs*)+0x51>
c001b4ff:	83 c8 ff             	or     eax,0xffffffff
c001b502:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b508:	89 c2                	mov    edx,eax
c001b50a:	77 1d                	ja     c001b529 <Sys::sbrk(regs*)+0x51>
c001b50c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b512:	50                   	push   eax
c001b513:	c1 ea 0c             	shr    edx,0xc
c001b516:	68 07 0c 00 00       	push   0xc07
c001b51b:	52                   	push   edx
c001b51c:	51                   	push   ecx
c001b51d:	e8 fa 6d ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001b522:	89 f0                	mov    eax,esi
c001b524:	31 d2                	xor    edx,edx
c001b526:	83 c4 10             	add    esp,0x10
c001b529:	59                   	pop    ecx
c001b52a:	5b                   	pop    ebx
c001b52b:	5e                   	pop    esi
c001b52c:	c3                   	ret    

c001b52d <Sys::setCwd(regs*)>:
c001b52d:	83 ec 14             	sub    esp,0x14
c001b530:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b534:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b53c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b53f:	e8 4f 81 ff ff       	call   c0013693 <Fs::setcwd(Process*, char*)>
c001b544:	83 c4 1c             	add    esp,0x1c
c001b547:	99                   	cdq    
c001b548:	c3                   	ret    

c001b549 <Sys::setTime(regs*)>:
c001b549:	55                   	push   ebp
c001b54a:	31 d2                	xor    edx,edx
c001b54c:	57                   	push   edi
c001b54d:	bf 18 00 00 00       	mov    edi,0x18
c001b552:	56                   	push   esi
c001b553:	53                   	push   ebx
c001b554:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b559:	83 ec 30             	sub    esp,0x30
c001b55c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b560:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b563:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b566:	f7 f3                	div    ebx
c001b568:	89 d6                	mov    esi,edx
c001b56a:	31 d2                	xor    edx,edx
c001b56c:	f7 f3                	div    ebx
c001b56e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b571:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b575:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b57a:	31 d2                	xor    edx,edx
c001b57c:	f7 f3                	div    ebx
c001b57e:	31 d2                	xor    edx,edx
c001b580:	bb 0c 00 00 00       	mov    ebx,0xc
c001b585:	f7 f7                	div    edi
c001b587:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b58a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b58e:	0f b7 cd             	movzx  ecx,bp
c001b591:	56                   	push   esi
c001b592:	89 c7                	mov    edi,eax
c001b594:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b598:	c1 e6 10             	shl    esi,0x10
c001b59b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b59f:	83 e7 1f             	and    edi,0x1f
c001b5a2:	51                   	push   ecx
c001b5a3:	47                   	inc    edi
c001b5a4:	c1 e8 05             	shr    eax,0x5
c001b5a7:	31 d2                	xor    edx,edx
c001b5a9:	f7 f3                	div    ebx
c001b5ab:	31 db                	xor    ebx,ebx
c001b5ad:	52                   	push   edx
c001b5ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5b2:	57                   	push   edi
c001b5b3:	68 41 c2 02 c0       	push   0xc002c241
c001b5b8:	e8 06 78 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b5bd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5c1:	89 f8                	mov    eax,edi
c001b5c3:	31 c9                	xor    ecx,ecx
c001b5c5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5c9:	88 c1                	mov    cl,al
c001b5cb:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5d1:	88 d5                	mov    ch,dl
c001b5d3:	c1 e0 10             	shl    eax,0x10
c001b5d6:	0f b7 d1             	movzx  edx,cx
c001b5d9:	09 c2                	or     edx,eax
c001b5db:	89 d8                	mov    eax,ebx
c001b5dd:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5e2:	09 f0                	or     eax,esi
c001b5e4:	89 c3                	mov    ebx,eax
c001b5e6:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5ea:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5ee:	83 c4 18             	add    esp,0x18
c001b5f1:	53                   	push   ebx
c001b5f2:	52                   	push   edx
c001b5f3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5f7:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5ff:	e8 a9 87 ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c001b604:	83 c4 0c             	add    esp,0xc
c001b607:	52                   	push   edx
c001b608:	50                   	push   eax
c001b609:	56                   	push   esi
c001b60a:	e8 25 89 ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c001b60f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b613:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b617:	51                   	push   ecx
c001b618:	89 d6                	mov    esi,edx
c001b61a:	51                   	push   ecx
c001b61b:	c1 ee 10             	shr    esi,0x10
c001b61e:	89 f3                	mov    ebx,esi
c001b620:	0f b6 f3             	movzx  esi,bl
c001b623:	56                   	push   esi
c001b624:	0f b6 f6             	movzx  esi,dh
c001b627:	0f b6 d2             	movzx  edx,dl
c001b62a:	56                   	push   esi
c001b62b:	52                   	push   edx
c001b62c:	89 c2                	mov    edx,eax
c001b62e:	c1 ea 10             	shr    edx,0x10
c001b631:	52                   	push   edx
c001b632:	0f b6 d4             	movzx  edx,ah
c001b635:	0f b6 c0             	movzx  eax,al
c001b638:	52                   	push   edx
c001b639:	50                   	push   eax
c001b63a:	68 5d c2 02 c0       	push   0xc002c25d
c001b63f:	e8 7f 77 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b644:	83 c4 2c             	add    esp,0x2c
c001b647:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001b64c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b650:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b654:	53                   	push   ebx
c001b655:	51                   	push   ecx
c001b656:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b65c:	e8 73 88 ff ff       	call   c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b661:	83 f0 01             	xor    eax,0x1
c001b664:	31 d2                	xor    edx,edx
c001b666:	0f b6 c0             	movzx  eax,al
c001b669:	83 c4 3c             	add    esp,0x3c
c001b66c:	5b                   	pop    ebx
c001b66d:	5e                   	pop    esi
c001b66e:	5f                   	pop    edi
c001b66f:	5d                   	pop    ebp
c001b670:	c3                   	ret    

c001b671 <Sys::timezone(regs*)>:
c001b671:	53                   	push   ebx
c001b672:	83 ec 08             	sub    esp,0x8
c001b675:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b679:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b67d:	75 17                	jne    c001b696 <Sys::timezone(regs*)+0x25>
c001b67f:	83 ec 0c             	sub    esp,0xc
c001b682:	68 79 c2 02 c0       	push   0xc002c279
c001b687:	e8 37 77 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b68c:	83 c8 ff             	or     eax,0xffffffff
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	89 c2                	mov    edx,eax
c001b694:	eb 20                	jmp    c001b6b6 <Sys::timezone(regs*)+0x45>
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	68 b1 c2 02 c0       	push   0xc002c2b1
c001b69e:	e8 20 77 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b6a3:	58                   	pop    eax
c001b6a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6a7:	e8 8a 85 ff ff       	call   c0013c36 <User::loadClockSettings(int)>
c001b6ac:	83 c4 10             	add    esp,0x10
c001b6af:	b8 01 00 00 00       	mov    eax,0x1
c001b6b4:	31 d2                	xor    edx,edx
c001b6b6:	83 c4 08             	add    esp,0x8
c001b6b9:	5b                   	pop    ebx
c001b6ba:	c3                   	ret    

c001b6bb <Sys::write(regs*)>:
c001b6bb:	57                   	push   edi
c001b6bc:	56                   	push   esi
c001b6bd:	53                   	push   ebx
c001b6be:	83 ec 10             	sub    esp,0x10
c001b6c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6c8:	83 f8 02             	cmp    eax,0x2
c001b6cb:	77 10                	ja     c001b6dd <Sys::write(regs*)+0x22>
c001b6cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6d5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6db:	eb 0e                	jmp    c001b6eb <Sys::write(regs*)+0x30>
c001b6dd:	83 ec 0c             	sub    esp,0xc
c001b6e0:	50                   	push   eax
c001b6e1:	e8 b3 61 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	89 c1                	mov    ecx,eax
c001b6eb:	83 c8 ff             	or     eax,0xffffffff
c001b6ee:	85 c9                	test   ecx,ecx
c001b6f0:	89 c2                	mov    edx,eax
c001b6f2:	74 28                	je     c001b71c <Sys::write(regs*)+0x61>
c001b6f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6fc:	31 ff                	xor    edi,edi
c001b6fe:	83 ec 0c             	sub    esp,0xc
c001b701:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b703:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b707:	52                   	push   edx
c001b708:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b70b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b70e:	57                   	push   edi
c001b70f:	56                   	push   esi
c001b710:	51                   	push   ecx
c001b711:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b714:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b718:	83 c4 20             	add    esp,0x20
c001b71b:	99                   	cdq    
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	5b                   	pop    ebx
c001b720:	5e                   	pop    esi
c001b721:	5f                   	pop    edi
c001b722:	c3                   	ret    

c001b723 <Sys::wsbe(regs*)>:
c001b723:	57                   	push   edi
c001b724:	b9 0b 00 00 00       	mov    ecx,0xb
c001b729:	56                   	push   esi
c001b72a:	be f0 c2 02 c0       	mov    esi,0xc002c2f0
c001b72f:	53                   	push   ebx
c001b730:	83 ec 30             	sub    esp,0x30
c001b733:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b737:	fc                   	cld    
c001b738:	83 ec 0c             	sub    esp,0xc
c001b73b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b73d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b746:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b749:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b74f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b751:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b754:	57                   	push   edi
c001b755:	e8 42 50 fe ff       	call   c000079c <strlen>
c001b75a:	5a                   	pop    edx
c001b75b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b75f:	52                   	push   edx
c001b760:	31 d2                	xor    edx,edx
c001b762:	57                   	push   edi
c001b763:	52                   	push   edx
c001b764:	50                   	push   eax
c001b765:	56                   	push   esi
c001b766:	ff d3                	call   ebx
c001b768:	83 c4 14             	add    esp,0x14
c001b76b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b76f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b772:	e8 93 32 00 00       	call   c001ea0a <terminateTask(int)>
c001b777:	83 c4 40             	add    esp,0x40
c001b77a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b77f:	5b                   	pop    ebx
c001b780:	31 d2                	xor    edx,edx
c001b782:	5e                   	pop    esi
c001b783:	5f                   	pop    edi
c001b784:	c3                   	ret    

c001b785 <Sys::yield(regs*)>:
c001b785:	57                   	push   edi
c001b786:	56                   	push   esi
c001b787:	53                   	push   ebx
c001b788:	e8 67 27 00 00       	call   c001def4 <lockScheduler()>
c001b78d:	e8 d8 2a 00 00       	call   c001e26a <schedule()>
c001b792:	e8 5f 27 00 00       	call   c001def6 <unlockScheduler()>
c001b797:	8b 35 30 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f030
c001b79d:	8b 3d 34 f0 02 c0    	mov    edi,DWORD PTR ds:0xc002f034
c001b7a3:	89 f0                	mov    eax,esi
c001b7a5:	89 fb                	mov    ebx,edi
c001b7a7:	89 f1                	mov    ecx,esi
c001b7a9:	c1 e0 07             	shl    eax,0x7
c001b7ac:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7b0:	25 80 30 0f 00       	and    eax,0xf3080
c001b7b5:	c1 eb 17             	shr    ebx,0x17
c001b7b8:	31 c8                	xor    eax,ecx
c001b7ba:	89 da                	mov    edx,ebx
c001b7bc:	5b                   	pop    ebx
c001b7bd:	5e                   	pop    esi
c001b7be:	5f                   	pop    edi
c001b7bf:	c3                   	ret    

c001b7c0 <sysCallSeekDir(regs*)>:
c001b7c0:	31 c0                	xor    eax,eax
c001b7c2:	31 d2                	xor    edx,edx
c001b7c4:	c3                   	ret    

c001b7c5 <sysCallTellDir(regs*)>:
c001b7c5:	31 c0                	xor    eax,eax
c001b7c7:	31 d2                	xor    edx,edx
c001b7c9:	c3                   	ret    

c001b7ca <sysCallVerify(regs*)>:
c001b7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ce:	31 d2                	xor    edx,edx
c001b7d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7d3:	c3                   	ret    

c001b7d4 <sysFormatDisk(regs*)>:
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	53                   	push   ebx
c001b7d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7db:	8b 1d 34 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb34
c001b7e1:	eb 25                	jmp    c001b808 <sysFormatDisk(regs*)+0x34>
c001b7e3:	83 ec 0c             	sub    esp,0xc
c001b7e6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7eb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7ee:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7f1:	50                   	push   eax
c001b7f2:	ff 34 85 c0 ef 02 c0 	push   DWORD PTR [eax*4-0x3ffd1040]
c001b7f9:	53                   	push   ebx
c001b7fa:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7fd:	83 c4 20             	add    esp,0x20
c001b800:	83 f8 08             	cmp    eax,0x8
c001b803:	75 12                	jne    c001b817 <sysFormatDisk(regs*)+0x43>
c001b805:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b808:	85 db                	test   ebx,ebx
c001b80a:	75 d7                	jne    c001b7e3 <sysFormatDisk(regs*)+0xf>
c001b80c:	59                   	pop    ecx
c001b80d:	b8 03 00 00 00       	mov    eax,0x3
c001b812:	31 d2                	xor    edx,edx
c001b814:	5b                   	pop    ebx
c001b815:	5e                   	pop    esi
c001b816:	c3                   	ret    
c001b817:	85 c0                	test   eax,eax
c001b819:	74 1b                	je     c001b836 <sysFormatDisk(regs*)+0x62>
c001b81b:	83 f8 09             	cmp    eax,0x9
c001b81e:	74 0b                	je     c001b82b <sysFormatDisk(regs*)+0x57>
c001b820:	59                   	pop    ecx
c001b821:	b8 02 00 00 00       	mov    eax,0x2
c001b826:	31 d2                	xor    edx,edx
c001b828:	5b                   	pop    ebx
c001b829:	5e                   	pop    esi
c001b82a:	c3                   	ret    
c001b82b:	59                   	pop    ecx
c001b82c:	b8 01 00 00 00       	mov    eax,0x1
c001b831:	31 d2                	xor    edx,edx
c001b833:	5b                   	pop    ebx
c001b834:	5e                   	pop    esi
c001b835:	c3                   	ret    
c001b836:	59                   	pop    ecx
c001b837:	31 c0                	xor    eax,eax
c001b839:	31 d2                	xor    edx,edx
c001b83b:	5b                   	pop    ebx
c001b83c:	5e                   	pop    esi
c001b83d:	c3                   	ret    

c001b83e <sysSetDiskVolumeLabel(regs*)>:
c001b83e:	56                   	push   esi
c001b83f:	53                   	push   ebx
c001b840:	53                   	push   ebx
c001b841:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b845:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b848:	83 f8 19             	cmp    eax,0x19
c001b84b:	77 29                	ja     c001b876 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b84d:	8b 0c 85 c0 ef 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1040]
c001b854:	85 c9                	test   ecx,ecx
c001b856:	74 1e                	je     c001b876 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b858:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b85b:	85 d2                	test   edx,edx
c001b85d:	74 17                	je     c001b876 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b85f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b865:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b867:	52                   	push   edx
c001b868:	50                   	push   eax
c001b869:	51                   	push   ecx
c001b86a:	53                   	push   ebx
c001b86b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b86e:	83 c4 10             	add    esp,0x10
c001b871:	99                   	cdq    
c001b872:	59                   	pop    ecx
c001b873:	5b                   	pop    ebx
c001b874:	5e                   	pop    esi
c001b875:	c3                   	ret    
c001b876:	59                   	pop    ecx
c001b877:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b87c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b881:	5b                   	pop    ebx
c001b882:	5e                   	pop    esi
c001b883:	c3                   	ret    

c001b884 <sysGetDiskVolumeLabel(regs*)>:
c001b884:	57                   	push   edi
c001b885:	56                   	push   esi
c001b886:	53                   	push   ebx
c001b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b88e:	83 fa 19             	cmp    edx,0x19
c001b891:	77 34                	ja     c001b8c7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b893:	8b 0c 95 c0 ef 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1040]
c001b89a:	85 c9                	test   ecx,ecx
c001b89c:	74 29                	je     c001b8c7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b89e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8a1:	85 db                	test   ebx,ebx
c001b8a3:	74 22                	je     c001b8c7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8a8:	85 c0                	test   eax,eax
c001b8aa:	74 1b                	je     c001b8c7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8ac:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8b2:	83 ec 0c             	sub    esp,0xc
c001b8b5:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8b7:	50                   	push   eax
c001b8b8:	53                   	push   ebx
c001b8b9:	52                   	push   edx
c001b8ba:	51                   	push   ecx
c001b8bb:	56                   	push   esi
c001b8bc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8bf:	83 c4 20             	add    esp,0x20
c001b8c2:	99                   	cdq    
c001b8c3:	5b                   	pop    ebx
c001b8c4:	5e                   	pop    esi
c001b8c5:	5f                   	pop    edi
c001b8c6:	c3                   	ret    
c001b8c7:	5b                   	pop    ebx
c001b8c8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d2:	5e                   	pop    esi
c001b8d3:	5f                   	pop    edi
c001b8d4:	c3                   	ret    

c001b8d5 <sysShutdown(regs*)>:
c001b8d5:	83 ec 0c             	sub    esp,0xc
c001b8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8df:	85 c0                	test   eax,eax
c001b8e1:	74 18                	je     c001b8fb <sysShutdown(regs*)+0x26>
c001b8e3:	83 f8 01             	cmp    eax,0x1
c001b8e6:	74 38                	je     c001b920 <sysShutdown(regs*)+0x4b>
c001b8e8:	83 f8 02             	cmp    eax,0x2
c001b8eb:	74 24                	je     c001b911 <sysShutdown(regs*)+0x3c>
c001b8ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8f7:	83 c4 0c             	add    esp,0xc
c001b8fa:	c3                   	ret    
c001b8fb:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001b900:	8b 10                	mov    edx,DWORD PTR [eax]
c001b902:	6a 00                	push   0x0
c001b904:	6a 00                	push   0x0
c001b906:	6a 00                	push   0x0
c001b908:	50                   	push   eax
c001b909:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b90c:	83 c4 10             	add    esp,0x10
c001b90f:	eb dc                	jmp    c001b8ed <sysShutdown(regs*)+0x18>
c001b911:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001b916:	8b 10                	mov    edx,DWORD PTR [eax]
c001b918:	6a 00                	push   0x0
c001b91a:	6a 00                	push   0x0
c001b91c:	6a 01                	push   0x1
c001b91e:	eb e8                	jmp    c001b908 <sysShutdown(regs*)+0x33>
c001b920:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c001b925:	85 c0                	test   eax,eax
c001b927:	74 02                	je     c001b92b <sysShutdown(regs*)+0x56>
c001b929:	ff d0                	call   eax
c001b92b:	31 c0                	xor    eax,eax
c001b92d:	31 d2                	xor    edx,edx
c001b92f:	83 c4 0c             	add    esp,0xc
c001b932:	c3                   	ret    

c001b933 <sysCallRealpath(regs*)>:
c001b933:	83 ec 0c             	sub    esp,0xc
c001b936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b93d:	85 d2                	test   edx,edx
c001b93f:	74 07                	je     c001b948 <sysCallRealpath(regs*)+0x15>
c001b941:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b944:	85 c0                	test   eax,eax
c001b946:	75 0b                	jne    c001b953 <sysCallRealpath(regs*)+0x20>
c001b948:	b8 01 00 00 00       	mov    eax,0x1
c001b94d:	31 d2                	xor    edx,edx
c001b94f:	83 c4 0c             	add    esp,0xc
c001b952:	c3                   	ret    
c001b953:	51                   	push   ecx
c001b954:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b95a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b95d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b963:	51                   	push   ecx
c001b964:	52                   	push   edx
c001b965:	50                   	push   eax
c001b966:	e8 0d 78 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	31 c0                	xor    eax,eax
c001b970:	31 d2                	xor    edx,edx
c001b972:	83 c4 0c             	add    esp,0xc
c001b975:	c3                   	ret    

c001b976 <sysCallGetArgc(regs*)>:
c001b976:	83 ec 14             	sub    esp,0x14
c001b979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b981:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b987:	68 1c c3 02 c0       	push   0xc002c31c
c001b98c:	e8 32 74 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b996:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b999:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b99f:	83 c4 1c             	add    esp,0x1c
c001b9a2:	99                   	cdq    
c001b9a3:	c3                   	ret    

c001b9a4 <sysCallReadDir(regs*)>:
c001b9a4:	53                   	push   ebx
c001b9a5:	83 ec 18             	sub    esp,0x18
c001b9a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9af:	83 f8 02             	cmp    eax,0x2
c001b9b2:	76 53                	jbe    c001ba07 <sysCallReadDir(regs*)+0x63>
c001b9b4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9b7:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9bd:	77 4f                	ja     c001ba0e <sysCallReadDir(regs*)+0x6a>
c001b9bf:	83 ec 0c             	sub    esp,0xc
c001b9c2:	50                   	push   eax
c001b9c3:	e8 d1 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b9c8:	83 c4 10             	add    esp,0x10
c001b9cb:	85 c0                	test   eax,eax
c001b9cd:	74 50                	je     c001ba1f <sysCallReadDir(regs*)+0x7b>
c001b9cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9d7:	83 ec 0c             	sub    esp,0xc
c001b9da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9dc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9e0:	51                   	push   ecx
c001b9e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9e4:	6a 00                	push   0x0
c001b9e6:	68 10 01 00 00       	push   0x110
c001b9eb:	50                   	push   eax
c001b9ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9ef:	83 c4 20             	add    esp,0x20
c001b9f2:	85 c0                	test   eax,eax
c001b9f4:	74 38                	je     c001ba2e <sysCallReadDir(regs*)+0x8a>
c001b9f6:	83 f8 07             	cmp    eax,0x7
c001b9f9:	74 0c                	je     c001ba07 <sysCallReadDir(regs*)+0x63>
c001b9fb:	b8 02 00 00 00       	mov    eax,0x2
c001ba00:	31 d2                	xor    edx,edx
c001ba02:	83 c4 18             	add    esp,0x18
c001ba05:	5b                   	pop    ebx
c001ba06:	c3                   	ret    
c001ba07:	b8 01 00 00 00       	mov    eax,0x1
c001ba0c:	eb f2                	jmp    c001ba00 <sysCallReadDir(regs*)+0x5c>
c001ba0e:	83 ec 08             	sub    esp,0x8
c001ba11:	52                   	push   edx
c001ba12:	68 40 c4 02 c0       	push   0xc002c440
c001ba17:	e8 a7 73 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba29:	83 c4 18             	add    esp,0x18
c001ba2c:	5b                   	pop    ebx
c001ba2d:	c3                   	ret    
c001ba2e:	31 c0                	xor    eax,eax
c001ba30:	eb ce                	jmp    c001ba00 <sysCallReadDir(regs*)+0x5c>

c001ba32 <sysCallIsATTY(regs*)>:
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba3c:	83 f8 02             	cmp    eax,0x2
c001ba3f:	76 07                	jbe    c001ba48 <sysCallIsATTY(regs*)+0x16>
c001ba41:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba46:	75 26                	jne    c001ba6e <sysCallIsATTY(regs*)+0x3c>
c001ba48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba50:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba56:	85 c0                	test   eax,eax
c001ba58:	74 24                	je     c001ba7e <sysCallIsATTY(regs*)+0x4c>
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba5f:	50                   	push   eax
c001ba60:	ff 12                	call   DWORD PTR [edx]
c001ba62:	31 d2                	xor    edx,edx
c001ba64:	0f b6 c0             	movzx  eax,al
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	83 c4 0c             	add    esp,0xc
c001ba6d:	c3                   	ret    
c001ba6e:	83 ec 0c             	sub    esp,0xc
c001ba71:	50                   	push   eax
c001ba72:	e8 22 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001ba77:	83 c4 10             	add    esp,0x10
c001ba7a:	85 c0                	test   eax,eax
c001ba7c:	75 dc                	jne    c001ba5a <sysCallIsATTY(regs*)+0x28>
c001ba7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba83:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba88:	83 c4 0c             	add    esp,0xc
c001ba8b:	c3                   	ret    

c001ba8c <sysCallSeek(regs*)>:
c001ba8c:	53                   	push   ebx
c001ba8d:	83 ec 08             	sub    esp,0x8
c001ba90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba97:	83 f8 02             	cmp    eax,0x2
c001ba9a:	76 4a                	jbe    c001bae6 <sysCallSeek(regs*)+0x5a>
c001ba9c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa1:	77 32                	ja     c001bad5 <sysCallSeek(regs*)+0x49>
c001baa3:	83 ec 0c             	sub    esp,0xc
c001baa6:	50                   	push   eax
c001baa7:	e8 ed 5d ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001baac:	83 c4 0c             	add    esp,0xc
c001baaf:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bab2:	31 db                	xor    ebx,ebx
c001bab4:	53                   	push   ebx
c001bab5:	51                   	push   ecx
c001bab6:	50                   	push   eax
c001bab7:	e8 88 79 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001babc:	83 c4 10             	add    esp,0x10
c001babf:	85 c0                	test   eax,eax
c001bac1:	0f 95 c0             	setne  al
c001bac4:	31 d2                	xor    edx,edx
c001bac6:	0f b6 c0             	movzx  eax,al
c001bac9:	f7 d8                	neg    eax
c001bacb:	83 d2 00             	adc    edx,0x0
c001bace:	83 c4 08             	add    esp,0x8
c001bad1:	f7 da                	neg    edx
c001bad3:	5b                   	pop    ebx
c001bad4:	c3                   	ret    
c001bad5:	83 ec 08             	sub    esp,0x8
c001bad8:	50                   	push   eax
c001bad9:	68 27 c3 02 c0       	push   0xc002c327
c001bade:	e8 e0 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bae3:	83 c4 10             	add    esp,0x10
c001bae6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baf0:	83 c4 08             	add    esp,0x8
c001baf3:	5b                   	pop    ebx
c001baf4:	c3                   	ret    

c001baf5 <sysCallTell(regs*)>:
c001baf5:	53                   	push   ebx
c001baf6:	83 ec 08             	sub    esp,0x8
c001baf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bafd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb00:	83 f8 02             	cmp    eax,0x2
c001bb03:	76 5e                	jbe    c001bb63 <sysCallTell(regs*)+0x6e>
c001bb05:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb0a:	77 2d                	ja     c001bb39 <sysCallTell(regs*)+0x44>
c001bb0c:	83 ec 0c             	sub    esp,0xc
c001bb0f:	50                   	push   eax
c001bb10:	e8 84 5d ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bb15:	5a                   	pop    edx
c001bb16:	59                   	pop    ecx
c001bb17:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb1a:	50                   	push   eax
c001bb1b:	e8 7a 79 ff ff       	call   c001349a <File::tell(unsigned long long*)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	85 c0                	test   eax,eax
c001bb25:	0f 95 c0             	setne  al
c001bb28:	31 d2                	xor    edx,edx
c001bb2a:	0f b6 c0             	movzx  eax,al
c001bb2d:	f7 d8                	neg    eax
c001bb2f:	83 d2 00             	adc    edx,0x0
c001bb32:	83 c4 08             	add    esp,0x8
c001bb35:	f7 da                	neg    edx
c001bb37:	5b                   	pop    ebx
c001bb38:	c3                   	ret    
c001bb39:	83 ec 08             	sub    esp,0x8
c001bb3c:	50                   	push   eax
c001bb3d:	68 41 c3 02 c0       	push   0xc002c341
c001bb42:	e8 7c 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bb47:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb5a:	31 d2                	xor    edx,edx
c001bb5c:	31 c0                	xor    eax,eax
c001bb5e:	83 c4 08             	add    esp,0x8
c001bb61:	5b                   	pop    ebx
c001bb62:	c3                   	ret    
c001bb63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb68:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb6d:	83 c4 08             	add    esp,0x8
c001bb70:	5b                   	pop    ebx
c001bb71:	c3                   	ret    

c001bb72 <sysCallSize(regs*)>:
c001bb72:	53                   	push   ebx
c001bb73:	83 ec 18             	sub    esp,0x18
c001bb76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb7d:	83 f8 02             	cmp    eax,0x2
c001bb80:	76 64                	jbe    c001bbe6 <sysCallSize(regs*)+0x74>
c001bb82:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb87:	77 33                	ja     c001bbbc <sysCallSize(regs*)+0x4a>
c001bb89:	83 ec 0c             	sub    esp,0xc
c001bb8c:	50                   	push   eax
c001bb8d:	e8 07 5d ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bb92:	83 c4 0c             	add    esp,0xc
c001bb95:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb99:	52                   	push   edx
c001bb9a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb9d:	50                   	push   eax
c001bb9e:	e8 8f 7a ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	85 c0                	test   eax,eax
c001bba8:	0f 95 c0             	setne  al
c001bbab:	31 d2                	xor    edx,edx
c001bbad:	0f b6 c0             	movzx  eax,al
c001bbb0:	f7 d8                	neg    eax
c001bbb2:	83 d2 00             	adc    edx,0x0
c001bbb5:	83 c4 18             	add    esp,0x18
c001bbb8:	f7 da                	neg    edx
c001bbba:	5b                   	pop    ebx
c001bbbb:	c3                   	ret    
c001bbbc:	83 ec 08             	sub    esp,0x8
c001bbbf:	50                   	push   eax
c001bbc0:	68 5b c3 02 c0       	push   0xc002c35b
c001bbc5:	e8 f9 71 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bbca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbcd:	83 c4 10             	add    esp,0x10
c001bbd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbdd:	31 d2                	xor    edx,edx
c001bbdf:	31 c0                	xor    eax,eax
c001bbe1:	83 c4 18             	add    esp,0x18
c001bbe4:	5b                   	pop    ebx
c001bbe5:	c3                   	ret    
c001bbe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf0:	83 c4 18             	add    esp,0x18
c001bbf3:	5b                   	pop    ebx
c001bbf4:	c3                   	ret    

c001bbf5 <sysCallSizeFromFilename(regs*)>:
c001bbf5:	57                   	push   edi
c001bbf6:	56                   	push   esi
c001bbf7:	53                   	push   ebx
c001bbf8:	83 ec 20             	sub    esp,0x20
c001bbfb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbff:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc02:	83 fb 02             	cmp    ebx,0x2
c001bc05:	0f 86 99 00 00 00    	jbe    c001bca4 <sysCallSizeFromFilename(regs*)+0xaf>
c001bc0b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc11:	77 65                	ja     c001bc78 <sysCallSizeFromFilename(regs*)+0x83>
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	68 14 01 00 00       	push   0x114
c001bc1b:	e8 2b 3c ff ff       	call   c000f84b <malloc>
c001bc20:	83 c4 0c             	add    esp,0xc
c001bc23:	89 c6                	mov    esi,eax
c001bc25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc2a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc2d:	53                   	push   ebx
c001bc2e:	56                   	push   esi
c001bc2f:	e8 ee 76 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bc34:	83 c4 0c             	add    esp,0xc
c001bc37:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc3b:	50                   	push   eax
c001bc3c:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc3f:	56                   	push   esi
c001bc40:	e8 ed 79 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001bc45:	83 c4 10             	add    esp,0x10
c001bc48:	85 f6                	test   esi,esi
c001bc4a:	74 14                	je     c001bc60 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc50:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	56                   	push   esi
c001bc56:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc59:	83 c4 10             	add    esp,0x10
c001bc5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc60:	85 c0                	test   eax,eax
c001bc62:	0f 95 c0             	setne  al
c001bc65:	31 d2                	xor    edx,edx
c001bc67:	0f b6 c0             	movzx  eax,al
c001bc6a:	f7 d8                	neg    eax
c001bc6c:	83 d2 00             	adc    edx,0x0
c001bc6f:	83 c4 20             	add    esp,0x20
c001bc72:	f7 da                	neg    edx
c001bc74:	5b                   	pop    ebx
c001bc75:	5e                   	pop    esi
c001bc76:	5f                   	pop    edi
c001bc77:	c3                   	ret    
c001bc78:	83 ec 08             	sub    esp,0x8
c001bc7b:	53                   	push   ebx
c001bc7c:	68 5b c3 02 c0       	push   0xc002c35b
c001bc81:	e8 3d 71 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bc86:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc99:	31 d2                	xor    edx,edx
c001bc9b:	83 c4 20             	add    esp,0x20
c001bc9e:	31 c0                	xor    eax,eax
c001bca0:	5b                   	pop    ebx
c001bca1:	5e                   	pop    esi
c001bca2:	5f                   	pop    edi
c001bca3:	c3                   	ret    
c001bca4:	83 c4 20             	add    esp,0x20
c001bca7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcac:	5b                   	pop    ebx
c001bcad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb2:	5e                   	pop    esi
c001bcb3:	5f                   	pop    edi
c001bcb4:	c3                   	ret    

c001bcb5 <sysCallClose(regs*)>:
c001bcb5:	53                   	push   ebx
c001bcb6:	83 ec 08             	sub    esp,0x8
c001bcb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcc0:	83 f8 02             	cmp    eax,0x2
c001bcc3:	76 50                	jbe    c001bd15 <sysCallClose(regs*)+0x60>
c001bcc5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcca:	74 58                	je     c001bd24 <sysCallClose(regs*)+0x6f>
c001bccc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcd1:	74 60                	je     c001bd33 <sysCallClose(regs*)+0x7e>
c001bcd3:	77 2f                	ja     c001bd04 <sysCallClose(regs*)+0x4f>
c001bcd5:	83 ec 0c             	sub    esp,0xc
c001bcd8:	50                   	push   eax
c001bcd9:	e8 bb 5b ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bcde:	89 c3                	mov    ebx,eax
c001bce0:	89 04 24             	mov    DWORD PTR [esp],eax
c001bce3:	e8 fc 76 ff ff       	call   c00133e4 <File::close()>
c001bce8:	83 c4 10             	add    esp,0x10
c001bceb:	85 db                	test   ebx,ebx
c001bced:	74 0c                	je     c001bcfb <sysCallClose(regs*)+0x46>
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcf4:	53                   	push   ebx
c001bcf5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcf8:	83 c4 10             	add    esp,0x10
c001bcfb:	31 c0                	xor    eax,eax
c001bcfd:	31 d2                	xor    edx,edx
c001bcff:	83 c4 08             	add    esp,0x8
c001bd02:	5b                   	pop    ebx
c001bd03:	c3                   	ret    
c001bd04:	83 ec 08             	sub    esp,0x8
c001bd07:	50                   	push   eax
c001bd08:	68 64 c4 02 c0       	push   0xc002c464
c001bd0d:	e8 b1 70 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1f:	83 c4 08             	add    esp,0x8
c001bd22:	5b                   	pop    ebx
c001bd23:	c3                   	ret    
c001bd24:	83 ec 0c             	sub    esp,0xc
c001bd27:	68 76 c3 02 c0       	push   0xc002c376
c001bd2c:	e8 92 70 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bd31:	eb c5                	jmp    c001bcf8 <sysCallClose(regs*)+0x43>
c001bd33:	83 ec 0c             	sub    esp,0xc
c001bd36:	68 84 c3 02 c0       	push   0xc002c384
c001bd3b:	eb ef                	jmp    c001bd2c <sysCallClose(regs*)+0x77>

c001bd3d <sysCallOpenDir(regs*)>:
c001bd3d:	56                   	push   esi
c001bd3e:	53                   	push   ebx
c001bd3f:	53                   	push   ebx
c001bd40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd44:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd47:	85 f6                	test   esi,esi
c001bd49:	74 59                	je     c001bda4 <sysCallOpenDir(regs*)+0x67>
c001bd4b:	83 ec 0c             	sub    esp,0xc
c001bd4e:	68 14 01 00 00       	push   0x114
c001bd53:	e8 f3 3a ff ff       	call   c000f84b <malloc>
c001bd58:	83 c4 0c             	add    esp,0xc
c001bd5b:	89 c6                	mov    esi,eax
c001bd5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd62:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd65:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd68:	56                   	push   esi
c001bd69:	e8 60 7a ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001bd6e:	83 c4 10             	add    esp,0x10
c001bd71:	85 f6                	test   esi,esi
c001bd73:	74 2f                	je     c001bda4 <sysCallOpenDir(regs*)+0x67>
c001bd75:	83 ec 0c             	sub    esp,0xc
c001bd78:	56                   	push   esi
c001bd79:	e8 b4 7a ff ff       	call   c0013832 <Directory::open()>
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	85 c0                	test   eax,eax
c001bd83:	75 1f                	jne    c001bda4 <sysCallOpenDir(regs*)+0x67>
c001bd85:	83 ec 0c             	sub    esp,0xc
c001bd88:	56                   	push   esi
c001bd89:	e8 16 58 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001bd8e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd91:	83 c4 10             	add    esp,0x10
c001bd94:	89 02                	mov    DWORD PTR [edx],eax
c001bd96:	c1 f8 1f             	sar    eax,0x1f
c001bd99:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd9c:	31 c0                	xor    eax,eax
c001bd9e:	59                   	pop    ecx
c001bd9f:	31 d2                	xor    edx,edx
c001bda1:	5b                   	pop    ebx
c001bda2:	5e                   	pop    esi
c001bda3:	c3                   	ret    
c001bda4:	59                   	pop    ecx
c001bda5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdaf:	5b                   	pop    ebx
c001bdb0:	5e                   	pop    esi
c001bdb1:	c3                   	ret    

c001bdb2 <sysCallCloseDir(regs*)>:
c001bdb2:	53                   	push   ebx
c001bdb3:	83 ec 08             	sub    esp,0x8
c001bdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdbd:	83 f8 02             	cmp    eax,0x2
c001bdc0:	76 47                	jbe    c001be09 <sysCallCloseDir(regs*)+0x57>
c001bdc2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdc7:	77 2f                	ja     c001bdf8 <sysCallCloseDir(regs*)+0x46>
c001bdc9:	83 ec 0c             	sub    esp,0xc
c001bdcc:	50                   	push   eax
c001bdcd:	e8 c7 5a ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bdd2:	89 c3                	mov    ebx,eax
c001bdd4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdd7:	e8 b2 7a ff ff       	call   c001388e <Directory::close()>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	85 db                	test   ebx,ebx
c001bde1:	74 0c                	je     c001bdef <sysCallCloseDir(regs*)+0x3d>
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde8:	53                   	push   ebx
c001bde9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	31 c0                	xor    eax,eax
c001bdf1:	31 d2                	xor    edx,edx
c001bdf3:	83 c4 08             	add    esp,0x8
c001bdf6:	5b                   	pop    ebx
c001bdf7:	c3                   	ret    
c001bdf8:	83 ec 08             	sub    esp,0x8
c001bdfb:	50                   	push   eax
c001bdfc:	68 8c c4 02 c0       	push   0xc002c48c
c001be01:	e8 bd 6f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001be06:	83 c4 10             	add    esp,0x10
c001be09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be13:	83 c4 08             	add    esp,0x8
c001be16:	5b                   	pop    ebx
c001be17:	c3                   	ret    

c001be18 <sysCallMakeDir(regs*)>:
c001be18:	56                   	push   esi
c001be19:	53                   	push   ebx
c001be1a:	83 ec 10             	sub    esp,0x10
c001be1d:	68 14 01 00 00       	push   0x114
c001be22:	e8 24 3a ff ff       	call   c000f84b <malloc>
c001be27:	83 c4 0c             	add    esp,0xc
c001be2a:	89 c3                	mov    ebx,eax
c001be2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be3b:	53                   	push   ebx
c001be3c:	e8 8d 79 ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	85 db                	test   ebx,ebx
c001be46:	74 32                	je     c001be7a <sysCallMakeDir(regs*)+0x62>
c001be48:	83 ec 0c             	sub    esp,0xc
c001be4b:	53                   	push   ebx
c001be4c:	e8 c1 7b ff ff       	call   c0013a12 <Directory::create()>
c001be51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be54:	89 c6                	mov    esi,eax
c001be56:	e8 33 7a ff ff       	call   c001388e <Directory::close()>
c001be5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	31 c0                	xor    eax,eax
c001be68:	59                   	pop    ecx
c001be69:	85 f6                	test   esi,esi
c001be6b:	5b                   	pop    ebx
c001be6c:	0f 95 c0             	setne  al
c001be6f:	5e                   	pop    esi
c001be70:	31 d2                	xor    edx,edx
c001be72:	f7 d8                	neg    eax
c001be74:	83 d2 00             	adc    edx,0x0
c001be77:	f7 da                	neg    edx
c001be79:	c3                   	ret    
c001be7a:	59                   	pop    ecx
c001be7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be80:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be85:	5b                   	pop    ebx
c001be86:	5e                   	pop    esi
c001be87:	c3                   	ret    

c001be88 <sysCallWait(regs*)>:
c001be88:	83 ec 10             	sub    esp,0x10
c001be8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be8f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be92:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be95:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be98:	e8 48 25 00 00       	call   c001e3e5 <waitTask(int, int*, int)>
c001be9d:	83 c4 1c             	add    esp,0x1c
c001bea0:	99                   	cdq    
c001bea1:	c3                   	ret    

c001bea2 <sysCallNotImpl(regs*)>:
c001bea2:	83 ec 18             	sub    esp,0x18
c001bea5:	68 92 c3 02 c0       	push   0xc002c392
c001beaa:	e8 a8 e7 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001beaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beb9:	83 c4 1c             	add    esp,0x1c
c001bebc:	c3                   	ret    

c001bebd <sysPanic(regs*)>:
c001bebd:	83 ec 18             	sub    esp,0x18
c001bec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bec4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bec7:	e8 8b e7 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001becc:	c7 04 24 ac c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ac
c001bed3:	e8 7f e7 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001bed8:	b8 01 00 00 00       	mov    eax,0x1
c001bedd:	31 d2                	xor    edx,edx
c001bedf:	83 c4 1c             	add    esp,0x1c
c001bee2:	c3                   	ret    

c001bee3 <sysCallRmdir(regs*)>:
c001bee3:	56                   	push   esi
c001bee4:	53                   	push   ebx
c001bee5:	83 ec 20             	sub    esp,0x20
c001bee8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001beec:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001beef:	68 14 01 00 00       	push   0x114
c001bef4:	e8 52 39 ff ff       	call   c000f84b <malloc>
c001bef9:	83 c4 0c             	add    esp,0xc
c001befc:	89 c3                	mov    ebx,eax
c001befe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf03:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf06:	56                   	push   esi
c001bf07:	53                   	push   ebx
c001bf08:	e8 15 74 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bf0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf10:	e8 e9 75 ff ff       	call   c00134fe <File::unlink()>
c001bf15:	83 c4 10             	add    esp,0x10
c001bf18:	85 db                	test   ebx,ebx
c001bf1a:	74 14                	je     c001bf30 <sysCallRmdir(regs*)+0x4d>
c001bf1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf20:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf22:	83 ec 0c             	sub    esp,0xc
c001bf25:	53                   	push   ebx
c001bf26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf30:	85 c0                	test   eax,eax
c001bf32:	0f 95 c0             	setne  al
c001bf35:	31 d2                	xor    edx,edx
c001bf37:	0f b6 c0             	movzx  eax,al
c001bf3a:	f7 d8                	neg    eax
c001bf3c:	83 d2 00             	adc    edx,0x0
c001bf3f:	83 c4 14             	add    esp,0x14
c001bf42:	f7 da                	neg    edx
c001bf44:	5b                   	pop    ebx
c001bf45:	5e                   	pop    esi
c001bf46:	c3                   	ret    

c001bf47 <sysCallUnlink(regs*)>:
c001bf47:	56                   	push   esi
c001bf48:	53                   	push   ebx
c001bf49:	83 ec 20             	sub    esp,0x20
c001bf4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf50:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf53:	68 14 01 00 00       	push   0x114
c001bf58:	e8 ee 38 ff ff       	call   c000f84b <malloc>
c001bf5d:	83 c4 0c             	add    esp,0xc
c001bf60:	89 c3                	mov    ebx,eax
c001bf62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf67:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf6a:	56                   	push   esi
c001bf6b:	53                   	push   ebx
c001bf6c:	e8 b1 73 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bf71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf74:	e8 85 75 ff ff       	call   c00134fe <File::unlink()>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	85 db                	test   ebx,ebx
c001bf7e:	74 14                	je     c001bf94 <sysCallUnlink(regs*)+0x4d>
c001bf80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf84:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	53                   	push   ebx
c001bf8a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf94:	85 c0                	test   eax,eax
c001bf96:	0f 95 c0             	setne  al
c001bf99:	31 d2                	xor    edx,edx
c001bf9b:	0f b6 c0             	movzx  eax,al
c001bf9e:	f7 d8                	neg    eax
c001bfa0:	83 d2 00             	adc    edx,0x0
c001bfa3:	83 c4 14             	add    esp,0x14
c001bfa6:	f7 da                	neg    edx
c001bfa8:	5b                   	pop    ebx
c001bfa9:	5e                   	pop    esi
c001bfaa:	c3                   	ret    

c001bfab <sysCallGetArgv(regs*)>:
c001bfab:	83 ec 0c             	sub    esp,0xc
c001bfae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfb2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfb5:	85 c0                	test   eax,eax
c001bfb7:	78 2b                	js     c001bfe4 <sysCallGetArgv(regs*)+0x39>
c001bfb9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfbf:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfc2:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfc8:	7d 1a                	jge    c001bfe4 <sysCallGetArgv(regs*)+0x39>
c001bfca:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	74 17                	je     c001bfec <sysCallGetArgv(regs*)+0x41>
c001bfd5:	83 ec 08             	sub    esp,0x8
c001bfd8:	50                   	push   eax
c001bfd9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfdc:	e8 5b 48 fe ff       	call   c000083c <strcpy>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	31 c0                	xor    eax,eax
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	83 c4 0c             	add    esp,0xc
c001bfeb:	c3                   	ret    
c001bfec:	b8 01 00 00 00       	mov    eax,0x1
c001bff1:	31 d2                	xor    edx,edx
c001bff3:	83 c4 0c             	add    esp,0xc
c001bff6:	c3                   	ret    

c001bff7 <sysCallTTYName(regs*)>:
c001bff7:	56                   	push   esi
c001bff8:	53                   	push   ebx
c001bff9:	53                   	push   ebx
c001bffa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bffe:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c001:	85 c0                	test   eax,eax
c001c003:	74 5f                	je     c001c064 <sysCallTTYName(regs*)+0x6d>
c001c005:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c008:	83 f8 02             	cmp    eax,0x2
c001c00b:	77 3e                	ja     c001c04b <sysCallTTYName(regs*)+0x54>
c001c00d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c012:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c015:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c01b:	85 db                	test   ebx,ebx
c001c01d:	74 45                	je     c001c064 <sysCallTTYName(regs*)+0x6d>
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c024:	53                   	push   ebx
c001c025:	ff 10                	call   DWORD PTR [eax]
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	84 c0                	test   al,al
c001c02c:	74 41                	je     c001c06f <sysCallTTYName(regs*)+0x78>
c001c02e:	83 ec 08             	sub    esp,0x8
c001c031:	81 c3 82 00 00 00    	add    ebx,0x82
c001c037:	53                   	push   ebx
c001c038:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c03b:	e8 fc 47 fe ff       	call   c000083c <strcpy>
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	31 c0                	xor    eax,eax
c001c045:	59                   	pop    ecx
c001c046:	31 d2                	xor    edx,edx
c001c048:	5b                   	pop    ebx
c001c049:	5e                   	pop    esi
c001c04a:	c3                   	ret    
c001c04b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c050:	74 bb                	je     c001c00d <sysCallTTYName(regs*)+0x16>
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	50                   	push   eax
c001c056:	e8 3e 58 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001c05b:	83 c4 10             	add    esp,0x10
c001c05e:	89 c3                	mov    ebx,eax
c001c060:	85 db                	test   ebx,ebx
c001c062:	75 bb                	jne    c001c01f <sysCallTTYName(regs*)+0x28>
c001c064:	59                   	pop    ecx
c001c065:	b8 01 00 00 00       	mov    eax,0x1
c001c06a:	31 d2                	xor    edx,edx
c001c06c:	5b                   	pop    ebx
c001c06d:	5e                   	pop    esi
c001c06e:	c3                   	ret    
c001c06f:	59                   	pop    ecx
c001c070:	b8 02 00 00 00       	mov    eax,0x2
c001c075:	31 d2                	xor    edx,edx
c001c077:	5b                   	pop    ebx
c001c078:	5e                   	pop    esi
c001c079:	c3                   	ret    

c001c07a <sysCallUSleep(regs*)>:
c001c07a:	83 ec 14             	sub    esp,0x14
c001c07d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c082:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c086:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c08d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c090:	01 ca                	add    edx,ecx
c001c092:	52                   	push   edx
c001c093:	50                   	push   eax
c001c094:	e8 e5 23 00 00       	call   c001e47e <nanoSleep(unsigned long long)>
c001c099:	31 c0                	xor    eax,eax
c001c09b:	31 d2                	xor    edx,edx
c001c09d:	83 c4 1c             	add    esp,0x1c
c001c0a0:	c3                   	ret    

c001c0a1 <sysCallSpawn(regs*)>:
c001c0a1:	56                   	push   esi
c001c0a2:	53                   	push   ebx
c001c0a3:	50                   	push   eax
c001c0a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c0ab:	85 c0                	test   eax,eax
c001c0ad:	75 08                	jne    c001c0b7 <sysCallSpawn(regs*)+0x16>
c001c0af:	59                   	pop    ecx
c001c0b0:	31 c0                	xor    eax,eax
c001c0b2:	31 d2                	xor    edx,edx
c001c0b4:	5b                   	pop    ebx
c001c0b5:	5e                   	pop    esi
c001c0b6:	c3                   	ret    
c001c0b7:	83 ec 08             	sub    esp,0x8
c001c0ba:	50                   	push   eax
c001c0bb:	68 bb c3 02 c0       	push   0xc002c3bb
c001c0c0:	e8 fe 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c0c5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c0cc:	e8 7a 37 ff ff       	call   c000f84b <malloc>
c001c0d1:	83 c4 10             	add    esp,0x10
c001c0d4:	89 c6                	mov    esi,eax
c001c0d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c0d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c0dc:	85 c0                	test   eax,eax
c001c0de:	75 32                	jne    c001c112 <sysCallSpawn(regs*)+0x71>
c001c0e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0e8:	52                   	push   edx
c001c0e9:	50                   	push   eax
c001c0ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0ed:	56                   	push   esi
c001c0ee:	e8 51 1a 00 00       	call   c001db44 <Process::Process(char const*, Process*, char**)>
c001c0f3:	83 c4 10             	add    esp,0x10
c001c0f6:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0fd:	75 b0                	jne    c001c0af <sysCallSpawn(regs*)+0xe>
c001c0ff:	83 ec 0c             	sub    esp,0xc
c001c102:	56                   	push   esi
c001c103:	e8 24 20 00 00       	call   c001e12c <Process::createUserThread()>
c001c108:	8b 06                	mov    eax,DWORD PTR [esi]
c001c10a:	83 c4 10             	add    esp,0x10
c001c10d:	99                   	cdq    
c001c10e:	59                   	pop    ecx
c001c10f:	5b                   	pop    ebx
c001c110:	5e                   	pop    esi
c001c111:	c3                   	ret    
c001c112:	31 c0                	xor    eax,eax
c001c114:	eb d2                	jmp    c001c0e8 <sysCallSpawn(regs*)+0x47>

c001c116 <sysCallGetEnv(regs*)>:
c001c116:	55                   	push   ebp
c001c117:	57                   	push   edi
c001c118:	56                   	push   esi
c001c119:	53                   	push   ebx
c001c11a:	83 ec 28             	sub    esp,0x28
c001c11d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c121:	68 c9 c3 02 c0       	push   0xc002c3c9
c001c126:	e8 98 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c12b:	5f                   	pop    edi
c001c12c:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c12f:	5d                   	pop    ebp
c001c130:	53                   	push   ebx
c001c131:	68 f6 c6 02 c0       	push   0xc002c6f6
c001c136:	e8 88 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c13b:	58                   	pop    eax
c001c13c:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c13f:	5a                   	pop    edx
c001c140:	57                   	push   edi
c001c141:	68 d2 c3 02 c0       	push   0xc002c3d2
c001c146:	e8 78 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c14b:	59                   	pop    ecx
c001c14c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c151:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c154:	e8 1a e4 ff ff       	call   c001a573 <Krnl::getProcessTotalEnvCount(Process*)>
c001c159:	5a                   	pop    edx
c001c15a:	89 c5                	mov    ebp,eax
c001c15c:	59                   	pop    ecx
c001c15d:	50                   	push   eax
c001c15e:	68 dc c3 02 c0       	push   0xc002c3dc
c001c163:	e8 5b 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	39 ef                	cmp    edi,ebp
c001c16d:	7c 15                	jl     c001c184 <sysCallGetEnv(regs*)+0x6e>
c001c16f:	85 db                	test   ebx,ebx
c001c171:	75 0c                	jne    c001c17f <sysCallGetEnv(regs*)+0x69>
c001c173:	83 c4 1c             	add    esp,0x1c
c001c176:	31 c0                	xor    eax,eax
c001c178:	5b                   	pop    ebx
c001c179:	31 d2                	xor    edx,edx
c001c17b:	5e                   	pop    esi
c001c17c:	5f                   	pop    edi
c001c17d:	5d                   	pop    ebp
c001c17e:	c3                   	ret    
c001c17f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c182:	eb ef                	jmp    c001c173 <sysCallGetEnv(regs*)+0x5d>
c001c184:	83 ec 0c             	sub    esp,0xc
c001c187:	68 e8 c3 02 c0       	push   0xc002c3e8
c001c18c:	e8 32 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c191:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c195:	83 c4 0c             	add    esp,0xc
c001c198:	57                   	push   edi
c001c199:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c19f:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c1a2:	50                   	push   eax
c001c1a3:	e8 eb e3 ff ff       	call   c001a593 <Krnl::getProcessEnvPair(Process*, int)>
c001c1a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1b0:	68 a7 c7 02 c0       	push   0xc002c7a7
c001c1b5:	e8 09 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c1ba:	83 c4 10             	add    esp,0x10
c001c1bd:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c1c0:	85 f6                	test   esi,esi
c001c1c2:	75 47                	jne    c001c20b <sysCallGetEnv(regs*)+0xf5>
c001c1c4:	83 ec 0c             	sub    esp,0xc
c001c1c7:	55                   	push   ebp
c001c1c8:	e8 cf 45 fe ff       	call   c000079c <strlen>
c001c1cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1d0:	89 c3                	mov    ebx,eax
c001c1d2:	e8 c5 45 fe ff       	call   c000079c <strlen>
c001c1d7:	5a                   	pop    edx
c001c1d8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1dc:	59                   	pop    ecx
c001c1dd:	50                   	push   eax
c001c1de:	68 eb c3 02 c0       	push   0xc002c3eb
c001c1e3:	e8 db 6b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c1e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1eb:	e8 ac 45 fe ff       	call   c000079c <strlen>
c001c1f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1f3:	89 c3                	mov    ebx,eax
c001c1f5:	e8 a2 45 fe ff       	call   c000079c <strlen>
c001c1fa:	83 c4 10             	add    esp,0x10
c001c1fd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c201:	83 c4 1c             	add    esp,0x1c
c001c204:	31 d2                	xor    edx,edx
c001c206:	5b                   	pop    ebx
c001c207:	5e                   	pop    esi
c001c208:	5f                   	pop    edi
c001c209:	5d                   	pop    ebp
c001c20a:	c3                   	ret    
c001c20b:	83 ec 0c             	sub    esp,0xc
c001c20e:	68 c1 c7 02 c0       	push   0xc002c7c1
c001c213:	e8 ab 6b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c218:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c21b:	58                   	pop    eax
c001c21c:	5a                   	pop    edx
c001c21d:	55                   	push   ebp
c001c21e:	53                   	push   ebx
c001c21f:	e8 18 46 fe ff       	call   c000083c <strcpy>
c001c224:	59                   	pop    ecx
c001c225:	5e                   	pop    esi
c001c226:	68 f5 c3 02 c0       	push   0xc002c3f5
c001c22b:	53                   	push   ebx
c001c22c:	e8 4b 47 fe ff       	call   c000097c <strcat>
c001c231:	5d                   	pop    ebp
c001c232:	58                   	pop    eax
c001c233:	57                   	push   edi
c001c234:	53                   	push   ebx
c001c235:	e8 42 47 fe ff       	call   c000097c <strcat>
c001c23a:	c7 04 24 db c7 02 c0 	mov    DWORD PTR [esp],0xc002c7db
c001c241:	e8 7d 6b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c246:	83 c4 10             	add    esp,0x10
c001c249:	e9 25 ff ff ff       	jmp    c001c173 <sysCallGetEnv(regs*)+0x5d>

c001c24e <sysAppSettings(regs*)>:
c001c24e:	53                   	push   ebx
c001c24f:	83 ec 08             	sub    esp,0x8
c001c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c256:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c259:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c25f:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c264:	66 3d c0 09          	cmp    ax,0x9c0
c001c268:	75 2f                	jne    c001c299 <sysAppSettings(regs*)+0x4b>
c001c26a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c270:	83 e0 1f             	and    eax,0x1f
c001c273:	3c 01                	cmp    al,0x1
c001c275:	74 2e                	je     c001c2a5 <sysAppSettings(regs*)+0x57>
c001c277:	3c 07                	cmp    al,0x7
c001c279:	0f 84 bd 00 00 00    	je     c001c33c <sysAppSettings(regs*)+0xee>
c001c27f:	84 c0                	test   al,al
c001c281:	0f 84 dc 00 00 00    	je     c001c363 <sysAppSettings(regs*)+0x115>
c001c287:	3c 08                	cmp    al,0x8
c001c289:	74 6d                	je     c001c2f8 <sysAppSettings(regs*)+0xaa>
c001c28b:	0f b6 c0             	movzx  eax,al
c001c28e:	83 c4 08             	add    esp,0x8
c001c291:	05 e8 03 00 00       	add    eax,0x3e8
c001c296:	5b                   	pop    ebx
c001c297:	99                   	cdq    
c001c298:	c3                   	ret    
c001c299:	b8 01 00 00 00       	mov    eax,0x1
c001c29e:	31 d2                	xor    edx,edx
c001c2a0:	83 c4 08             	add    esp,0x8
c001c2a3:	5b                   	pop    ebx
c001c2a4:	c3                   	ret    
c001c2a5:	51                   	push   ecx
c001c2a6:	68 00 01 00 00       	push   0x100
c001c2ab:	6a 00                	push   0x0
c001c2ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b5:	83 c0 0c             	add    eax,0xc
c001c2b8:	50                   	push   eax
c001c2b9:	e8 c2 44 fe ff       	call   c0000780 <memset>
c001c2be:	83 c4 0c             	add    esp,0xc
c001c2c1:	68 ff 00 00 00       	push   0xff
c001c2c6:	53                   	push   ebx
c001c2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2cf:	83 c0 0c             	add    eax,0xc
c001c2d2:	50                   	push   eax
c001c2d3:	e8 74 44 fe ff       	call   c000074c <memcpy>
c001c2d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2dd:	5b                   	pop    ebx
c001c2de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2e1:	5a                   	pop    edx
c001c2e2:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2e5:	52                   	push   edx
c001c2e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ec:	e8 d1 47 ff ff       	call   c0010ac2 <VgaText::setTitle(char*)>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	31 c0                	xor    eax,eax
c001c2f6:	eb a6                	jmp    c001c29e <sysAppSettings(regs*)+0x50>
c001c2f8:	83 ec 08             	sub    esp,0x8
c001c2fb:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c301:	83 e0 0f             	and    eax,0xf
c001c304:	50                   	push   eax
c001c305:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c30a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c30d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c313:	e8 9c 47 ff ff       	call   c0010ab4 <VgaText::setTitleColour(VgaColour)>
c001c318:	58                   	pop    eax
c001c319:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c31f:	5a                   	pop    edx
c001c320:	c1 e8 04             	shr    eax,0x4
c001c323:	83 e0 0f             	and    eax,0xf
c001c326:	50                   	push   eax
c001c327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c32c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c32f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c335:	e8 6c 47 ff ff       	call   c0010aa6 <VgaText::setTitleTextColour(VgaColour)>
c001c33a:	eb b5                	jmp    c001c2f1 <sysAppSettings(regs*)+0xa3>
c001c33c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c341:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c344:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c34a:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c350:	c0 e8 06             	shr    al,0x6
c001c353:	83 e0 01             	and    eax,0x1
c001c356:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c35c:	31 c0                	xor    eax,eax
c001c35e:	e9 3b ff ff ff       	jmp    c001c29e <sysAppSettings(regs*)+0x50>
c001c363:	b8 02 00 00 00       	mov    eax,0x2
c001c368:	e9 31 ff ff ff       	jmp    c001c29e <sysAppSettings(regs*)+0x50>

c001c36d <sysSetFatAttrib(regs*)>:
c001c36d:	57                   	push   edi
c001c36e:	56                   	push   esi
c001c36f:	53                   	push   ebx
c001c370:	83 ec 1c             	sub    esp,0x1c
c001c373:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c377:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c37a:	68 14 01 00 00       	push   0x114
c001c37f:	e8 c7 34 ff ff       	call   c000f84b <malloc>
c001c384:	83 c4 0c             	add    esp,0xc
c001c387:	89 c3                	mov    ebx,eax
c001c389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c391:	57                   	push   edi
c001c392:	53                   	push   ebx
c001c393:	e8 8a 6f ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c398:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c39b:	83 c4 0c             	add    esp,0xc
c001c39e:	0f b6 d4             	movzx  edx,ah
c001c3a1:	0f b6 c0             	movzx  eax,al
c001c3a4:	52                   	push   edx
c001c3a5:	50                   	push   eax
c001c3a6:	53                   	push   ebx
c001c3a7:	e8 ec 71 ff ff       	call   c0013598 <File::chfatattr(unsigned char, unsigned char)>
c001c3ac:	83 c4 10             	add    esp,0x10
c001c3af:	85 db                	test   ebx,ebx
c001c3b1:	74 14                	je     c001c3c7 <sysSetFatAttrib(regs*)+0x5a>
c001c3b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3b9:	83 ec 0c             	sub    esp,0xc
c001c3bc:	53                   	push   ebx
c001c3bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3c7:	85 c0                	test   eax,eax
c001c3c9:	0f 95 c0             	setne  al
c001c3cc:	31 d2                	xor    edx,edx
c001c3ce:	0f b6 c0             	movzx  eax,al
c001c3d1:	f7 d8                	neg    eax
c001c3d3:	83 d2 00             	adc    edx,0x0
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	f7 da                	neg    edx
c001c3db:	5b                   	pop    ebx
c001c3dc:	5e                   	pop    esi
c001c3dd:	5f                   	pop    edi
c001c3de:	c3                   	ret    

c001c3df <sysPipe(regs*)>:
c001c3df:	57                   	push   edi
c001c3e0:	56                   	push   esi
c001c3e1:	53                   	push   ebx
c001c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3ec:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3ef:	6a 20                	push   0x20
c001c3f1:	e8 55 34 ff ff       	call   c000f84b <malloc>
c001c3f6:	89 c3                	mov    ebx,eax
c001c3f8:	58                   	pop    eax
c001c3f9:	5a                   	pop    edx
c001c3fa:	68 00 50 00 00       	push   0x5000
c001c3ff:	53                   	push   ebx
c001c400:	e8 65 40 ff ff       	call   c001046a <Pipe::Pipe(int)>
c001c405:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c408:	e8 97 51 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c40d:	89 07                	mov    DWORD PTR [edi],eax
c001c40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c412:	e8 8d 51 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	89 06                	mov    DWORD PTR [esi],eax
c001c41c:	31 d2                	xor    edx,edx
c001c41e:	5b                   	pop    ebx
c001c41f:	31 c0                	xor    eax,eax
c001c421:	5e                   	pop    esi
c001c422:	5f                   	pop    edi
c001c423:	c3                   	ret    

c001c424 <sysGetUnixTime(regs*)>:
c001c424:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001c429:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c42f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c433:	e9 d4 78 ff ff       	jmp    c0013d0c <Clock::timeInSecondsLocal()>

c001c438 <string_ends_with(char const*, char const*)>:
c001c438:	57                   	push   edi
c001c439:	56                   	push   esi
c001c43a:	53                   	push   ebx
c001c43b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c43f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c443:	83 ec 0c             	sub    esp,0xc
c001c446:	53                   	push   ebx
c001c447:	e8 50 43 fe ff       	call   c000079c <strlen>
c001c44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c44f:	89 c6                	mov    esi,eax
c001c451:	e8 46 43 fe ff       	call   c000079c <strlen>
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	39 c6                	cmp    esi,eax
c001c45b:	7d 06                	jge    c001c463 <string_ends_with(char const*, char const*)+0x2b>
c001c45d:	5b                   	pop    ebx
c001c45e:	31 c0                	xor    eax,eax
c001c460:	5e                   	pop    esi
c001c461:	5f                   	pop    edi
c001c462:	c3                   	ret    
c001c463:	83 ec 08             	sub    esp,0x8
c001c466:	29 c6                	sub    esi,eax
c001c468:	57                   	push   edi
c001c469:	01 f3                	add    ebx,esi
c001c46b:	53                   	push   ebx
c001c46c:	e8 57 44 fe ff       	call   c00008c8 <strcmp>
c001c471:	83 c4 10             	add    esp,0x10
c001c474:	85 c0                	test   eax,eax
c001c476:	5b                   	pop    ebx
c001c477:	0f 94 c0             	sete   al
c001c47a:	5e                   	pop    esi
c001c47b:	0f b6 c0             	movzx  eax,al
c001c47e:	5f                   	pop    edi
c001c47f:	c3                   	ret    

c001c480 <sysCallOpen(regs*)>:
c001c480:	56                   	push   esi
c001c481:	53                   	push   ebx
c001c482:	81 ec 04 01 00 00    	sub    esp,0x104
c001c488:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c48f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c492:	85 c9                	test   ecx,ecx
c001c494:	0f 84 b3 00 00 00    	je     c001c54d <sysCallOpen(regs*)+0xcd>
c001c49a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c49d:	85 c0                	test   eax,eax
c001c49f:	0f 84 a8 00 00 00    	je     c001c54d <sysCallOpen(regs*)+0xcd>
c001c4a5:	52                   	push   edx
c001c4a6:	68 f7 c3 02 c0       	push   0xc002c3f7
c001c4ab:	50                   	push   eax
c001c4ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c4b0:	56                   	push   esi
c001c4b1:	e8 c2 6c ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c4b6:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4b9:	e8 de 42 fe ff       	call   c000079c <strlen>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	48                   	dec    eax
c001c4c2:	74 1d                	je     c001c4e1 <sysCallOpen(regs*)+0x61>
c001c4c4:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c4c7:	eb 0f                	jmp    c001c4d8 <sysCallOpen(regs*)+0x58>
c001c4c9:	80 fa 3a             	cmp    dl,0x3a
c001c4cc:	74 0f                	je     c001c4dd <sysCallOpen(regs*)+0x5d>
c001c4ce:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4d2:	48                   	dec    eax
c001c4d3:	74 0c                	je     c001c4e1 <sysCallOpen(regs*)+0x61>
c001c4d5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4d8:	80 fa 2e             	cmp    dl,0x2e
c001c4db:	75 ec                	jne    c001c4c9 <sysCallOpen(regs*)+0x49>
c001c4dd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4e1:	83 ec 08             	sub    esp,0x8
c001c4e4:	68 fb c3 02 c0       	push   0xc002c3fb
c001c4e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ec:	e8 47 ff ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	85 c0                	test   eax,eax
c001c4f6:	75 17                	jne    c001c50f <sysCallOpen(regs*)+0x8f>
c001c4f8:	83 ec 08             	sub    esp,0x8
c001c4fb:	68 1c c4 02 c0       	push   0xc002c41c
c001c500:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c503:	e8 30 ff ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	85 c0                	test   eax,eax
c001c50d:	74 51                	je     c001c560 <sysCallOpen(regs*)+0xe0>
c001c50f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c512:	83 ec 08             	sub    esp,0x8
c001c515:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c51b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c522:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c525:	ff 30                	push   DWORD PTR [eax]
c001c527:	68 00 c4 02 c0       	push   0xc002c400
c001c52c:	e8 92 68 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c531:	c7 04 24 0f c4 02 c0 	mov    DWORD PTR [esp],0xc002c40f
c001c538:	e8 86 68 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c53d:	83 c4 10             	add    esp,0x10
c001c540:	81 c4 04 01 00 00    	add    esp,0x104
c001c546:	31 c0                	xor    eax,eax
c001c548:	31 d2                	xor    edx,edx
c001c54a:	5b                   	pop    ebx
c001c54b:	5e                   	pop    esi
c001c54c:	c3                   	ret    
c001c54d:	81 c4 04 01 00 00    	add    esp,0x104
c001c553:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c558:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c55d:	5b                   	pop    ebx
c001c55e:	5e                   	pop    esi
c001c55f:	c3                   	ret    
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	68 fc c3 02 c0       	push   0xc002c3fc
c001c568:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c56b:	e8 58 43 fe ff       	call   c00008c8 <strcmp>
c001c570:	83 c4 10             	add    esp,0x10
c001c573:	85 c0                	test   eax,eax
c001c575:	74 98                	je     c001c50f <sysCallOpen(regs*)+0x8f>
c001c577:	83 ec 08             	sub    esp,0x8
c001c57a:	68 fb c3 02 c0       	push   0xc002c3fb
c001c57f:	56                   	push   esi
c001c580:	e8 b3 fe ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c585:	83 c4 10             	add    esp,0x10
c001c588:	85 c0                	test   eax,eax
c001c58a:	75 83                	jne    c001c50f <sysCallOpen(regs*)+0x8f>
c001c58c:	83 ec 08             	sub    esp,0x8
c001c58f:	68 21 c4 02 c0       	push   0xc002c421
c001c594:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c597:	e8 9c fe ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c59c:	83 c4 10             	add    esp,0x10
c001c59f:	85 c0                	test   eax,eax
c001c5a1:	0f 85 d9 00 00 00    	jne    c001c680 <sysCallOpen(regs*)+0x200>
c001c5a7:	83 ec 08             	sub    esp,0x8
c001c5aa:	68 26 c4 02 c0       	push   0xc002c426
c001c5af:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5b2:	e8 81 fe ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	85 c0                	test   eax,eax
c001c5bc:	0f 85 be 00 00 00    	jne    c001c680 <sysCallOpen(regs*)+0x200>
c001c5c2:	83 ec 08             	sub    esp,0x8
c001c5c5:	68 22 c4 02 c0       	push   0xc002c422
c001c5ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5cd:	e8 f6 42 fe ff       	call   c00008c8 <strcmp>
c001c5d2:	83 c4 10             	add    esp,0x10
c001c5d5:	85 c0                	test   eax,eax
c001c5d7:	0f 84 a3 00 00 00    	je     c001c680 <sysCallOpen(regs*)+0x200>
c001c5dd:	83 ec 08             	sub    esp,0x8
c001c5e0:	68 21 c4 02 c0       	push   0xc002c421
c001c5e5:	56                   	push   esi
c001c5e6:	e8 4d fe ff ff       	call   c001c438 <string_ends_with(char const*, char const*)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	85 c0                	test   eax,eax
c001c5f0:	0f 85 8a 00 00 00    	jne    c001c680 <sysCallOpen(regs*)+0x200>
c001c5f6:	83 ec 0c             	sub    esp,0xc
c001c5f9:	68 14 01 00 00       	push   0x114
c001c5fe:	e8 48 32 ff ff       	call   c000f84b <malloc>
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	89 c6                	mov    esi,eax
c001c608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c60d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c610:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c613:	56                   	push   esi
c001c614:	e8 09 6d ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	85 f6                	test   esi,esi
c001c61e:	0f 84 29 ff ff ff    	je     c001c54d <sysCallOpen(regs*)+0xcd>
c001c624:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c627:	0f b6 c2             	movzx  eax,dl
c001c62a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c62d:	89 d0                	mov    eax,edx
c001c62f:	83 e0 01             	and    eax,0x1
c001c632:	f6 c2 02             	test   dl,0x2
c001c635:	74 03                	je     c001c63a <sysCallOpen(regs*)+0x1ba>
c001c637:	83 c8 02             	or     eax,0x2
c001c63a:	f6 c2 04             	test   dl,0x4
c001c63d:	74 03                	je     c001c642 <sysCallOpen(regs*)+0x1c2>
c001c63f:	83 c8 04             	or     eax,0x4
c001c642:	f6 c2 08             	test   dl,0x8
c001c645:	74 03                	je     c001c64a <sysCallOpen(regs*)+0x1ca>
c001c647:	83 c8 0a             	or     eax,0xa
c001c64a:	83 e2 10             	and    edx,0x10
c001c64d:	74 03                	je     c001c652 <sysCallOpen(regs*)+0x1d2>
c001c64f:	83 c8 12             	or     eax,0x12
c001c652:	83 ec 08             	sub    esp,0x8
c001c655:	50                   	push   eax
c001c656:	56                   	push   esi
c001c657:	e8 2a 6d ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	85 c0                	test   eax,eax
c001c661:	0f 85 e6 fe ff ff    	jne    c001c54d <sysCallOpen(regs*)+0xcd>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	56                   	push   esi
c001c66b:	e8 34 4f ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c670:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c673:	89 02                	mov    DWORD PTR [edx],eax
c001c675:	c1 f8 1f             	sar    eax,0x1f
c001c678:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c67b:	e9 bd fe ff ff       	jmp    c001c53d <sysCallOpen(regs*)+0xbd>
c001c680:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c683:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c690:	e9 ab fe ff ff       	jmp    c001c540 <sysCallOpen(regs*)+0xc0>

c001c695 <Sys::loadSyscalls()>:
c001c695:	c7 05 20 15 03 c0 85 b7 01 c0 	mov    DWORD PTR ds:0xc0031520,0xc001b785
c001c69f:	c7 05 24 15 03 c0 ec b2 01 c0 	mov    DWORD PTR ds:0xc0031524,0xc001b2ec
c001c6a9:	c7 05 28 15 03 c0 d8 b4 01 c0 	mov    DWORD PTR ds:0xc0031528,0xc001b4d8
c001c6b3:	c7 05 2c 15 03 c0 bb b6 01 c0 	mov    DWORD PTR ds:0xc003152c,0xc001b6bb
c001c6bd:	c7 05 30 15 03 c0 70 b4 01 c0 	mov    DWORD PTR ds:0xc0031530,0xc001b470
c001c6c7:	c7 05 34 15 03 c0 23 b3 01 c0 	mov    DWORD PTR ds:0xc0031534,0xc001b323
c001c6d1:	c7 05 38 15 03 c0 04 b3 01 c0 	mov    DWORD PTR ds:0xc0031538,0xc001b304
c001c6db:	c7 05 3c 15 03 c0 2d b5 01 c0 	mov    DWORD PTR ds:0xc003153c,0xc001b52d
c001c6e5:	c7 05 44 15 03 c0 b5 bc 01 c0 	mov    DWORD PTR ds:0xc0031544,0xc001bcb5
c001c6ef:	c7 05 40 15 03 c0 80 c4 01 c0 	mov    DWORD PTR ds:0xc0031540,0xc001c480
c001c6f9:	c7 05 48 15 03 c0 3d bd 01 c0 	mov    DWORD PTR ds:0xc0031548,0xc001bd3d
c001c703:	c7 05 4c 15 03 c0 a4 b9 01 c0 	mov    DWORD PTR ds:0xc003154c,0xc001b9a4
c001c70d:	c7 05 50 15 03 c0 c0 b7 01 c0 	mov    DWORD PTR ds:0xc0031550,0xc001b7c0
c001c717:	c7 05 54 15 03 c0 c5 b7 01 c0 	mov    DWORD PTR ds:0xc0031554,0xc001b7c5
c001c721:	c7 05 58 15 03 c0 18 be 01 c0 	mov    DWORD PTR ds:0xc0031558,0xc001be18
c001c72b:	c7 05 5c 15 03 c0 b2 bd 01 c0 	mov    DWORD PTR ds:0xc003155c,0xc001bdb2
c001c735:	c7 05 60 15 03 c0 8c ba 01 c0 	mov    DWORD PTR ds:0xc0031560,0xc001ba8c
c001c73f:	c7 05 64 15 03 c0 f5 ba 01 c0 	mov    DWORD PTR ds:0xc0031564,0xc001baf5
c001c749:	c7 05 68 15 03 c0 72 bb 01 c0 	mov    DWORD PTR ds:0xc0031568,0xc001bb72
c001c753:	c7 05 6c 15 03 c0 ca b7 01 c0 	mov    DWORD PTR ds:0xc003156c,0xc001b7ca
c001c75d:	c7 05 70 15 03 c0 88 be 01 c0 	mov    DWORD PTR ds:0xc0031570,0xc001be88
c001c767:	c7 05 74 15 03 c0 a2 be 01 c0 	mov    DWORD PTR ds:0xc0031574,0xc001bea2
c001c771:	c7 05 78 15 03 c0 a2 be 01 c0 	mov    DWORD PTR ds:0xc0031578,0xc001bea2
c001c77b:	c7 05 7c 15 03 c0 e3 be 01 c0 	mov    DWORD PTR ds:0xc003157c,0xc001bee3
c001c785:	c7 05 80 15 03 c0 47 bf 01 c0 	mov    DWORD PTR ds:0xc0031580,0xc001bf47
c001c78f:	c7 05 84 15 03 c0 76 b9 01 c0 	mov    DWORD PTR ds:0xc0031584,0xc001b976
c001c799:	c7 05 88 15 03 c0 ab bf 01 c0 	mov    DWORD PTR ds:0xc0031588,0xc001bfab
c001c7a3:	c7 05 8c 15 03 c0 33 b9 01 c0 	mov    DWORD PTR ds:0xc003158c,0xc001b933
c001c7ad:	c7 05 90 15 03 c0 f7 bf 01 c0 	mov    DWORD PTR ds:0xc0031590,0xc001bff7
c001c7b7:	c7 05 94 15 03 c0 32 ba 01 c0 	mov    DWORD PTR ds:0xc0031594,0xc001ba32
c001c7c1:	c7 05 98 15 03 c0 7a c0 01 c0 	mov    DWORD PTR ds:0xc0031598,0xc001c07a
c001c7cb:	c7 05 9c 15 03 c0 f5 bb 01 c0 	mov    DWORD PTR ds:0xc003159c,0xc001bbf5
c001c7d5:	c7 05 a0 15 03 c0 a1 c0 01 c0 	mov    DWORD PTR ds:0xc00315a0,0xc001c0a1
c001c7df:	c7 05 a4 15 03 c0 16 c1 01 c0 	mov    DWORD PTR ds:0xc00315a4,0xc001c116
c001c7e9:	c7 05 a8 15 03 c0 4e c2 01 c0 	mov    DWORD PTR ds:0xc00315a8,0xc001c24e
c001c7f3:	c7 05 ac 15 03 c0 d4 b7 01 c0 	mov    DWORD PTR ds:0xc00315ac,0xc001b7d4
c001c7fd:	c7 05 b0 15 03 c0 3e b8 01 c0 	mov    DWORD PTR ds:0xc00315b0,0xc001b83e
c001c807:	c7 05 b4 15 03 c0 84 b8 01 c0 	mov    DWORD PTR ds:0xc00315b4,0xc001b884
c001c811:	c7 05 b8 15 03 c0 6d c3 01 c0 	mov    DWORD PTR ds:0xc00315b8,0xc001c36d
c001c81b:	c7 05 bc 15 03 c0 bd be 01 c0 	mov    DWORD PTR ds:0xc00315bc,0xc001bebd
c001c825:	c7 05 c0 15 03 c0 d5 b8 01 c0 	mov    DWORD PTR ds:0xc00315c0,0xc001b8d5
c001c82f:	c7 05 c4 15 03 c0 df c3 01 c0 	mov    DWORD PTR ds:0xc00315c4,0xc001c3df
c001c839:	c7 05 c8 15 03 c0 24 c4 01 c0 	mov    DWORD PTR ds:0xc00315c8,0xc001c424
c001c843:	c7 05 cc 15 03 c0 c8 b3 01 c0 	mov    DWORD PTR ds:0xc00315cc,0xc001b3c8
c001c84d:	c7 05 d0 15 03 c0 49 b5 01 c0 	mov    DWORD PTR ds:0xc00315d0,0xc001b549
c001c857:	c7 05 d4 15 03 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc00315d4,0xc001b671
c001c861:	c7 05 d8 15 03 c0 b6 b2 01 c0 	mov    DWORD PTR ds:0xc00315d8,0xc001b2b6
c001c86b:	c7 05 dc 15 03 c0 23 b7 01 c0 	mov    DWORD PTR ds:0xc00315dc,0xc001b723
c001c875:	c7 05 e0 15 03 c0 2f b3 01 c0 	mov    DWORD PTR ds:0xc00315e0,0xc001b32f
c001c87f:	c7 05 e4 15 03 c0 46 b3 01 c0 	mov    DWORD PTR ds:0xc00315e4,0xc001b346
c001c889:	c3                   	ret    

c001c88a <Sys::systemCall(regs*, void*)>:
c001c88a:	53                   	push   ebx
c001c88b:	83 ec 08             	sub    esp,0x8
c001c88e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c892:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c895:	83 f8 7f             	cmp    eax,0x7f
c001c898:	77 16                	ja     c001c8b0 <Sys::systemCall(regs*, void*)+0x26>
c001c89a:	8b 14 85 20 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceae0]
c001c8a1:	85 d2                	test   edx,edx
c001c8a3:	74 0b                	je     c001c8b0 <Sys::systemCall(regs*, void*)+0x26>
c001c8a5:	83 ec 0c             	sub    esp,0xc
c001c8a8:	53                   	push   ebx
c001c8a9:	ff d2                	call   edx
c001c8ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c8ae:	eb 0d                	jmp    c001c8bd <Sys::systemCall(regs*, void*)+0x33>
c001c8b0:	52                   	push   edx
c001c8b1:	52                   	push   edx
c001c8b2:	50                   	push   eax
c001c8b3:	68 2b c4 02 c0       	push   0xc002c42b
c001c8b8:	e8 06 65 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c8c5:	31 d2                	xor    edx,edx
c001c8c7:	83 c4 08             	add    esp,0x8
c001c8ca:	5b                   	pop    ebx
c001c8cb:	c3                   	ret    

c001c8cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c8cc:	55                   	push   ebp
c001c8cd:	57                   	push   edi
c001c8ce:	56                   	push   esi
c001c8cf:	53                   	push   ebx
c001c8d0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8d6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8dd:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8e4:	85 c0                	test   eax,eax
c001c8e6:	0f 95 c1             	setne  cl
c001c8e9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8f1:	0f 94 c2             	sete   dl
c001c8f4:	84 d1                	test   cl,dl
c001c8f6:	74 23                	je     c001c91b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8f8:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8fe:	74 1b                	je     c001c91b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c900:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c906:	89 da                	mov    edx,ebx
c001c908:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c90e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c914:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c91b:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c922:	05 ff 0f 00 00       	add    eax,0xfff
c001c927:	83 ec 0c             	sub    esp,0xc
c001c92a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c92e:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c934:	c1 e8 0c             	shr    eax,0xc
c001c937:	89 ef                	mov    edi,ebp
c001c939:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c93d:	c1 ef 0c             	shr    edi,0xc
c001c940:	6a 01                	push   0x1
c001c942:	e8 a8 50 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c001c947:	89 c6                	mov    esi,eax
c001c949:	58                   	pop    eax
c001c94a:	5a                   	pop    edx
c001c94b:	57                   	push   edi
c001c94c:	68 af c4 02 c0       	push   0xc002c4af
c001c951:	e8 6d 64 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c956:	59                   	pop    ecx
c001c957:	58                   	pop    eax
c001c958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c95c:	68 c1 c4 02 c0       	push   0xc002c4c1
c001c961:	e8 5d 64 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c96f:	0f 86 24 01 00 00    	jbe    c001ca99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c975:	c1 e7 0c             	shl    edi,0xc
c001c978:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c97b:	89 df                	mov    edi,ebx
c001c97d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c981:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c988:	01 dd                	add    ebp,ebx
c001c98a:	29 fd                	sub    ebp,edi
c001c98c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c990:	0f 84 01 01 00 00    	je     c001ca97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c996:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c99c:	76 05                	jbe    c001c9a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c99e:	bd 00 10 00 00       	mov    ebp,0x1000
c001c9a3:	83 ec 0c             	sub    esp,0xc
c001c9a6:	31 d2                	xor    edx,edx
c001c9a8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c9af:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9b5:	50                   	push   eax
c001c9b6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c9ba:	50                   	push   eax
c001c9bb:	52                   	push   edx
c001c9bc:	55                   	push   ebp
c001c9bd:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c9c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9c7:	83 c4 20             	add    esp,0x20
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	74 0a                	je     c001c9d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c9ce:	53                   	push   ebx
c001c9cf:	53                   	push   ebx
c001c9d0:	50                   	push   eax
c001c9d1:	68 d3 c4 02 c0       	push   0xc002c4d3
c001c9d6:	eb 0f                	jmp    c001c9e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9d8:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9dc:	74 20                	je     c001c9fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9de:	51                   	push   ecx
c001c9df:	51                   	push   ecx
c001c9e0:	6a 00                	push   0x0
c001c9e2:	68 fe c4 02 c0       	push   0xc002c4fe
c001c9e7:	e8 d7 63 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c9ec:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9ef:	e8 c1 54 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	31 c0                	xor    eax,eax
c001c9f9:	e9 55 01 00 00       	jmp    c001cb53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9fe:	e8 f1 14 00 00       	call   c001def4 <lockScheduler()>
c001ca03:	e8 af 34 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001ca08:	6a 07                	push   0x7
c001ca0a:	89 c5                	mov    ebp,eax
c001ca0c:	56                   	push   esi
c001ca0d:	50                   	push   eax
c001ca0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca16:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1c:	e8 fb 57 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca21:	83 c4 0c             	add    esp,0xc
c001ca24:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca31:	6a 00                	push   0x0
c001ca33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca3b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca41:	e8 40 56 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca46:	58                   	pop    eax
c001ca47:	5a                   	pop    edx
c001ca48:	68 07 0c 00 00       	push   0xc07
c001ca4d:	57                   	push   edi
c001ca4e:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca54:	55                   	push   ebp
c001ca55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca5c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca62:	6a 00                	push   0x0
c001ca64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca6c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca72:	e8 5f 5b ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca77:	83 c4 1c             	add    esp,0x1c
c001ca7a:	68 00 10 00 00       	push   0x1000
c001ca7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca83:	50                   	push   eax
c001ca84:	56                   	push   esi
c001ca85:	e8 c2 3c fe ff       	call   c000074c <memcpy>
c001ca8a:	e8 67 14 00 00       	call   c001def6 <unlockScheduler()>
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	e9 ea fe ff ff       	jmp    c001c981 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca97:	89 fb                	mov    ebx,edi
c001ca99:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001caa1:	0f 86 9e 00 00 00    	jbe    c001cb45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001caa7:	e8 48 14 00 00       	call   c001def4 <lockScheduler()>
c001caac:	51                   	push   ecx
c001caad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cab4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caba:	6a 00                	push   0x0
c001cabc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cac1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cac4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caca:	e8 b7 55 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001cacf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cad3:	c1 e7 0c             	shl    edi,0xc
c001cad6:	01 df                	add    edi,ebx
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	39 fb                	cmp    ebx,edi
c001cadd:	74 61                	je     c001cb40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001cadf:	e8 d3 33 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001cae4:	6a 07                	push   0x7
c001cae6:	89 c5                	mov    ebp,eax
c001cae8:	56                   	push   esi
c001cae9:	50                   	push   eax
c001caea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caf2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caf8:	e8 1f 57 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001cafd:	58                   	pop    eax
c001cafe:	5a                   	pop    edx
c001caff:	68 07 0c 00 00       	push   0xc07
c001cb04:	53                   	push   ebx
c001cb05:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb0b:	55                   	push   ebp
c001cb0c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cb13:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb19:	6a 00                	push   0x0
c001cb1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb23:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb29:	e8 a8 5a ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb2e:	83 c4 1c             	add    esp,0x1c
c001cb31:	68 00 10 00 00       	push   0x1000
c001cb36:	6a 00                	push   0x0
c001cb38:	56                   	push   esi
c001cb39:	e8 42 3c fe ff       	call   c0000780 <memset>
c001cb3e:	eb 98                	jmp    c001cad8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb40:	e8 b1 13 00 00       	call   c001def6 <unlockScheduler()>
c001cb45:	83 ec 0c             	sub    esp,0xc
c001cb48:	56                   	push   esi
c001cb49:	e8 67 53 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	b0 01                	mov    al,0x1
c001cb53:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb59:	5b                   	pop    ebx
c001cb5a:	5e                   	pop    esi
c001cb5b:	5f                   	pop    edi
c001cb5c:	5d                   	pop    ebp
c001cb5d:	c3                   	ret    

c001cb5e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb5e:	55                   	push   ebp
c001cb5f:	57                   	push   edi
c001cb60:	56                   	push   esi
c001cb61:	53                   	push   ebx
c001cb62:	83 ec 48             	sub    esp,0x48
c001cb65:	68 14 01 00 00       	push   0x114
c001cb6a:	e8 dc 2c ff ff       	call   c000f84b <malloc>
c001cb6f:	83 c4 0c             	add    esp,0xc
c001cb72:	89 c6                	mov    esi,eax
c001cb74:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb78:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb7c:	50                   	push   eax
c001cb7d:	e8 a0 67 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001cb82:	58                   	pop    eax
c001cb83:	5a                   	pop    edx
c001cb84:	6a 01                	push   0x1
c001cb86:	56                   	push   esi
c001cb87:	e8 fa 67 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	85 c0                	test   eax,eax
c001cb91:	0f 85 47 01 00 00    	jne    c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb9f:	83 ec 0c             	sub    esp,0xc
c001cba2:	6a 34                	push   0x34
c001cba4:	e8 a2 2c ff ff       	call   c000f84b <malloc>
c001cba9:	89 c3                	mov    ebx,eax
c001cbab:	58                   	pop    eax
c001cbac:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbae:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cbb2:	57                   	push   edi
c001cbb3:	53                   	push   ebx
c001cbb4:	6a 00                	push   0x0
c001cbb6:	6a 34                	push   0x34
c001cbb8:	56                   	push   esi
c001cbb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbbc:	83 c4 20             	add    esp,0x20
c001cbbf:	85 c0                	test   eax,eax
c001cbc1:	0f 85 17 01 00 00    	jne    c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbc7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cbcd:	0f 85 0b 01 00 00    	jne    c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cbd6:	85 c0                	test   eax,eax
c001cbd8:	0f 84 00 01 00 00    	je     c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbde:	31 d2                	xor    edx,edx
c001cbe0:	55                   	push   ebp
c001cbe1:	52                   	push   edx
c001cbe2:	50                   	push   eax
c001cbe3:	56                   	push   esi
c001cbe4:	e8 5b 68 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	85 c0                	test   eax,eax
c001cbee:	0f 85 ea 00 00 00    	jne    c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbfa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc02:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc06:	0f af c2             	imul   eax,edx
c001cc09:	50                   	push   eax
c001cc0a:	e8 3c 2c ff ff       	call   c000f84b <malloc>
c001cc0f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc15:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc1c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc20:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc24:	0f af c2             	imul   eax,edx
c001cc27:	99                   	cdq    
c001cc28:	52                   	push   edx
c001cc29:	50                   	push   eax
c001cc2a:	56                   	push   esi
c001cc2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc2e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc31:	83 c4 20             	add    esp,0x20
c001cc34:	85 c0                	test   eax,eax
c001cc36:	0f 84 a2 00 00 00    	je     c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc3c:	31 d2                	xor    edx,edx
c001cc3e:	51                   	push   ecx
c001cc3f:	52                   	push   edx
c001cc40:	50                   	push   eax
c001cc41:	56                   	push   esi
c001cc42:	e8 fd 67 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	85 c0                	test   eax,eax
c001cc4c:	0f 85 8c 00 00 00    	jne    c001ccde <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc59:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc5d:	31 ed                	xor    ebp,ebp
c001cc5f:	0f af c2             	imul   eax,edx
c001cc62:	50                   	push   eax
c001cc63:	e8 e3 2b ff ff       	call   c000f84b <malloc>
c001cc68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc75:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc79:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc7d:	0f af c2             	imul   eax,edx
c001cc80:	99                   	cdq    
c001cc81:	52                   	push   edx
c001cc82:	50                   	push   eax
c001cc83:	56                   	push   esi
c001cc84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc87:	83 c4 20             	add    esp,0x20
c001cc8a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc92:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc96:	0f 86 80 00 00 00    	jbe    c001cd1c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc9c:	0f b7 fd             	movzx  edi,bp
c001cc9f:	c1 e7 05             	shl    edi,0x5
c001cca2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cca6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cca9:	75 6b                	jne    c001cd16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccab:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ccae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccb2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ccb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccb9:	52                   	push   edx
c001ccba:	31 d2                	xor    edx,edx
c001ccbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ccbf:	52                   	push   edx
c001ccc0:	50                   	push   eax
c001ccc1:	56                   	push   esi
c001ccc2:	e8 7d 67 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	85 c0                	test   eax,eax
c001cccc:	74 17                	je     c001cce5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ccce:	83 ec 0c             	sub    esp,0xc
c001ccd1:	68 2a c5 02 c0       	push   0xc002c52a
c001ccd6:	e8 e8 60 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	31 c0                	xor    eax,eax
c001cce0:	e9 87 00 00 00       	jmp    c001cd6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cceb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccee:	50                   	push   eax
c001ccef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccf7:	56                   	push   esi
c001ccf8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccfc:	e8 cb fb ff ff       	call   c001c8cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cd01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd05:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cd09:	83 c4 20             	add    esp,0x20
c001cd0c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cd10:	73 04                	jae    c001cd16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cd12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd16:	45                   	inc    ebp
c001cd17:	e9 76 ff ff ff       	jmp    c001cc92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cd1c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cd20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd28:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd37:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd3c:	05 00 10 00 00       	add    eax,0x1000
c001cd41:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd48:	e8 0e 2b ff ff       	call   c000f85b <free>
c001cd4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd50:	e8 06 2b ff ff       	call   c000f85b <free>
c001cd55:	58                   	pop    eax
c001cd56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd5a:	e8 fc 2a ff ff       	call   c000f85b <free>
c001cd5f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd62:	e8 7d 66 ff ff       	call   c00133e4 <File::close()>
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	b0 01                	mov    al,0x1
c001cd6c:	83 c4 3c             	add    esp,0x3c
c001cd6f:	5b                   	pop    ebx
c001cd70:	5e                   	pop    esi
c001cd71:	5f                   	pop    edi
c001cd72:	5d                   	pop    ebp
c001cd73:	c3                   	ret    

c001cd74 <Thr::runtimeReferenceHelper()>:
c001cd74:	83 ec 18             	sub    esp,0x18
c001cd77:	68 32 c5 02 c0       	push   0xc002c532
c001cd7c:	e8 42 60 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001cd81:	fa                   	cli    
c001cd82:	83 c4 10             	add    esp,0x10
c001cd85:	eb fe                	jmp    c001cd85 <Thr::runtimeReferenceHelper()+0x11>

c001cd87 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd87:	57                   	push   edi
c001cd88:	56                   	push   esi
c001cd89:	53                   	push   ebx
c001cd8a:	31 db                	xor    ebx,ebx
c001cd8c:	39 1d c0 1e 03 c0    	cmp    DWORD PTR ds:0xc0031ec0,ebx
c001cd92:	7e 3c                	jle    c001cdd0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd94:	8b 34 9d 40 1e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce1c0]
c001cd9b:	31 ff                	xor    edi,edi
c001cd9d:	39 3c 9d 40 1d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce2c0],edi
c001cda4:	7e 27                	jle    c001cdcd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cda6:	50                   	push   eax
c001cda7:	50                   	push   eax
c001cda8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdac:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdae:	03 04 9d c0 1d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce240]
c001cdb5:	50                   	push   eax
c001cdb6:	e8 0d 3b fe ff       	call   c00008c8 <strcmp>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	85 c0                	test   eax,eax
c001cdc0:	75 05                	jne    c001cdc7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cdc2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cdc5:	eb 0b                	jmp    c001cdd2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cdc7:	83 c6 10             	add    esi,0x10
c001cdca:	47                   	inc    edi
c001cdcb:	eb d0                	jmp    c001cd9d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cdcd:	43                   	inc    ebx
c001cdce:	eb bc                	jmp    c001cd8c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cdd0:	31 c0                	xor    eax,eax
c001cdd2:	5b                   	pop    ebx
c001cdd3:	5e                   	pop    esi
c001cdd4:	5f                   	pop    edi
c001cdd5:	c3                   	ret    

c001cdd6 <Thr::loadKernelSymbolTable(char const*)>:
c001cdd6:	55                   	push   ebp
c001cdd7:	57                   	push   edi
c001cdd8:	56                   	push   esi
c001cdd9:	53                   	push   ebx
c001cdda:	83 ec 68             	sub    esp,0x68
c001cddd:	8b 35 14 1f 03 c0    	mov    esi,DWORD PTR ds:0xc0031f14
c001cde3:	68 14 01 00 00       	push   0x114
c001cde8:	e8 5e 2a ff ff       	call   c000f84b <malloc>
c001cded:	83 c4 0c             	add    esp,0xc
c001cdf0:	89 c3                	mov    ebx,eax
c001cdf2:	56                   	push   esi
c001cdf3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdf7:	50                   	push   eax
c001cdf8:	e8 25 65 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001cdfd:	5e                   	pop    esi
c001cdfe:	5f                   	pop    edi
c001cdff:	6a 01                	push   0x1
c001ce01:	53                   	push   ebx
c001ce02:	e8 7f 65 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	85 c0                	test   eax,eax
c001ce0c:	74 0a                	je     c001ce18 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ce0e:	83 ec 0c             	sub    esp,0xc
c001ce11:	68 54 c5 02 c0       	push   0xc002c554
c001ce16:	eb 34                	jmp    c001ce4c <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ce18:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ce20:	83 ec 0c             	sub    esp,0xc
c001ce23:	6a 34                	push   0x34
c001ce25:	e8 21 2a ff ff       	call   c000f84b <malloc>
c001ce2a:	59                   	pop    ecx
c001ce2b:	89 c7                	mov    edi,eax
c001ce2d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce31:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce33:	56                   	push   esi
c001ce34:	57                   	push   edi
c001ce35:	6a 00                	push   0x0
c001ce37:	6a 34                	push   0x34
c001ce39:	53                   	push   ebx
c001ce3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce3d:	83 c4 20             	add    esp,0x20
c001ce40:	85 c0                	test   eax,eax
c001ce42:	74 17                	je     c001ce5b <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce44:	83 ec 0c             	sub    esp,0xc
c001ce47:	68 6b c5 02 c0       	push   0xc002c56b
c001ce4c:	e8 06 d8 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001ce51:	83 c4 10             	add    esp,0x10
c001ce54:	31 c0                	xor    eax,eax
c001ce56:	e9 31 02 00 00       	jmp    c001d08c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce5b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce61:	75 e1                	jne    c001ce44 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce63:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce66:	85 c0                	test   eax,eax
c001ce68:	74 da                	je     c001ce44 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce6a:	52                   	push   edx
c001ce6b:	31 d2                	xor    edx,edx
c001ce6d:	52                   	push   edx
c001ce6e:	50                   	push   eax
c001ce6f:	53                   	push   ebx
c001ce70:	e8 cf 65 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001ce75:	83 c4 10             	add    esp,0x10
c001ce78:	85 c0                	test   eax,eax
c001ce7a:	75 c8                	jne    c001ce44 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce7c:	83 ec 0c             	sub    esp,0xc
c001ce7f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce83:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce87:	31 ed                	xor    ebp,ebp
c001ce89:	0f af c2             	imul   eax,edx
c001ce8c:	50                   	push   eax
c001ce8d:	e8 b9 29 ff ff       	call   c000f84b <malloc>
c001ce92:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce98:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce9f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cea3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cea7:	0f af c2             	imul   eax,edx
c001ceaa:	99                   	cdq    
c001ceab:	52                   	push   edx
c001ceac:	50                   	push   eax
c001cead:	53                   	push   ebx
c001ceae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb1:	83 c4 20             	add    esp,0x20
c001ceb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cebc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cec4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cecc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ced4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ced8:	0f 86 aa 00 00 00    	jbe    c001cf88 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cede:	0f b7 f5             	movzx  esi,bp
c001cee1:	6b f6 28             	imul   esi,esi,0x28
c001cee4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cee8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ceeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ceef:	50                   	push   eax
c001cef0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cef4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cef8:	8b 16                	mov    edx,DWORD PTR [esi]
c001cefa:	6b c0 28             	imul   eax,eax,0x28
c001cefd:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cf01:	89 d0                	mov    eax,edx
c001cf03:	31 d2                	xor    edx,edx
c001cf05:	52                   	push   edx
c001cf06:	50                   	push   eax
c001cf07:	53                   	push   ebx
c001cf08:	e8 37 65 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cf0d:	83 c4 0c             	add    esp,0xc
c001cf10:	6a 20                	push   0x20
c001cf12:	6a 00                	push   0x0
c001cf14:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf18:	52                   	push   edx
c001cf19:	e8 62 38 fe ff       	call   c0000780 <memset>
c001cf1e:	58                   	pop    eax
c001cf1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf21:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf25:	51                   	push   ecx
c001cf26:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf2a:	52                   	push   edx
c001cf2b:	6a 00                	push   0x0
c001cf2d:	6a 1f                	push   0x1f
c001cf2f:	53                   	push   ebx
c001cf30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf33:	83 c4 18             	add    esp,0x18
c001cf36:	68 82 c5 02 c0       	push   0xc002c582
c001cf3b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf3f:	52                   	push   edx
c001cf40:	e8 83 39 fe ff       	call   c00008c8 <strcmp>
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	85 c0                	test   eax,eax
c001cf4a:	75 0f                	jne    c001cf5b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf4c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf5b:	50                   	push   eax
c001cf5c:	50                   	push   eax
c001cf5d:	68 8a c5 02 c0       	push   0xc002c58a
c001cf62:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf66:	50                   	push   eax
c001cf67:	e8 5c 39 fe ff       	call   c00008c8 <strcmp>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	85 c0                	test   eax,eax
c001cf71:	75 0f                	jne    c001cf82 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf73:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf82:	45                   	inc    ebp
c001cf83:	e9 4c ff ff ff       	jmp    c001ced4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf8d:	75 10                	jne    c001cf9f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	68 92 c5 02 c0       	push   0xc002c592
c001cf97:	e8 bb d6 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001cf9c:	83 c4 10             	add    esp,0x10
c001cf9f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cfa4:	75 10                	jne    c001cfb6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cfa6:	83 ec 0c             	sub    esp,0xc
c001cfa9:	68 92 c5 02 c0       	push   0xc002c592
c001cfae:	e8 a4 d6 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	31 d2                	xor    edx,edx
c001cfb8:	50                   	push   eax
c001cfb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbd:	52                   	push   edx
c001cfbe:	50                   	push   eax
c001cfbf:	53                   	push   ebx
c001cfc0:	e8 7f 64 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cfc5:	5a                   	pop    edx
c001cfc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfca:	e8 7c 28 ff ff       	call   c000f84b <malloc>
c001cfcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfd7:	31 c9                	xor    ecx,ecx
c001cfd9:	5e                   	pop    esi
c001cfda:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfdc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfe0:	55                   	push   ebp
c001cfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfe5:	51                   	push   ecx
c001cfe6:	52                   	push   edx
c001cfe7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfeb:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfef:	53                   	push   ebx
c001cff0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cff3:	83 c4 14             	add    esp,0x14
c001cff6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cffa:	e8 4c 28 ff ff       	call   c000f84b <malloc>
c001cfff:	89 c6                	mov    esi,eax
c001d001:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d003:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d006:	56                   	push   esi
c001d007:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d00b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d00f:	51                   	push   ecx
c001d010:	52                   	push   edx
c001d011:	53                   	push   ebx
c001d012:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d015:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d019:	8b 15 c0 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031ec0
c001d01f:	83 c4 1c             	add    esp,0x1c
c001d022:	c1 e8 04             	shr    eax,0x4
c001d025:	89 04 95 40 1d 03 c0 	mov    DWORD PTR [edx*4-0x3ffce2c0],eax
c001d02c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d030:	31 d2                	xor    edx,edx
c001d032:	52                   	push   edx
c001d033:	50                   	push   eax
c001d034:	53                   	push   ebx
c001d035:	e8 0a 64 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d03a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d03c:	31 d2                	xor    edx,edx
c001d03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d041:	56                   	push   esi
c001d042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d046:	52                   	push   edx
c001d047:	50                   	push   eax
c001d048:	53                   	push   ebx
c001d049:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d04c:	83 c4 14             	add    esp,0x14
c001d04f:	53                   	push   ebx
c001d050:	e8 8f 63 ff ff       	call   c00133e4 <File::close()>
c001d055:	5d                   	pop    ebp
c001d056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d05a:	e8 fc 27 ff ff       	call   c000f85b <free>
c001d05f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d062:	e8 f4 27 ff ff       	call   c000f85b <free>
c001d067:	a1 c0 1e 03 c0       	mov    eax,ds:0xc0031ec0
c001d06c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d070:	8d 50 01             	lea    edx,[eax+0x1]
c001d073:	89 0c 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],ecx
c001d07a:	89 34 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],esi
c001d081:	89 15 c0 1e 03 c0    	mov    DWORD PTR ds:0xc0031ec0,edx
c001d087:	83 c4 10             	add    esp,0x10
c001d08a:	b0 01                	mov    al,0x1
c001d08c:	83 c4 5c             	add    esp,0x5c
c001d08f:	5b                   	pop    ebx
c001d090:	5e                   	pop    esi
c001d091:	5f                   	pop    edi
c001d092:	5d                   	pop    ebp
c001d093:	c3                   	ret    

c001d094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d094:	55                   	push   ebp
c001d095:	57                   	push   edi
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	81 ec 68 03 00 00    	sub    esp,0x368
c001d09e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d0a5:	8b 1d 14 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f14
c001d0ab:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d0af:	68 14 01 00 00       	push   0x114
c001d0b4:	e8 92 27 ff ff       	call   c000f84b <malloc>
c001d0b9:	83 c4 0c             	add    esp,0xc
c001d0bc:	89 c5                	mov    ebp,eax
c001d0be:	53                   	push   ebx
c001d0bf:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d0c6:	50                   	push   eax
c001d0c7:	e8 56 62 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001d0cc:	5e                   	pop    esi
c001d0cd:	5f                   	pop    edi
c001d0ce:	6a 01                	push   0x1
c001d0d0:	55                   	push   ebp
c001d0d1:	e8 b0 62 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001d0d6:	83 c4 10             	add    esp,0x10
c001d0d9:	85 c0                	test   eax,eax
c001d0db:	0f 85 a7 06 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0e1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0e9:	83 ec 0c             	sub    esp,0xc
c001d0ec:	6a 34                	push   0x34
c001d0ee:	e8 58 27 ff ff       	call   c000f84b <malloc>
c001d0f3:	5b                   	pop    ebx
c001d0f4:	89 c7                	mov    edi,eax
c001d0f6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0fd:	53                   	push   ebx
c001d0fe:	57                   	push   edi
c001d0ff:	6a 00                	push   0x0
c001d101:	6a 34                	push   0x34
c001d103:	55                   	push   ebp
c001d104:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d107:	83 c4 20             	add    esp,0x20
c001d10a:	85 c0                	test   eax,eax
c001d10c:	0f 85 76 06 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d112:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d118:	0f 85 6a 06 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d11e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d121:	85 c0                	test   eax,eax
c001d123:	0f 84 5f 06 00 00    	je     c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d129:	31 d2                	xor    edx,edx
c001d12b:	51                   	push   ecx
c001d12c:	52                   	push   edx
c001d12d:	50                   	push   eax
c001d12e:	55                   	push   ebp
c001d12f:	e8 10 63 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	85 c0                	test   eax,eax
c001d139:	0f 85 49 06 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d145:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d149:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d14d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d151:	0f af c2             	imul   eax,edx
c001d154:	50                   	push   eax
c001d155:	e8 f1 26 ff ff       	call   c000f84b <malloc>
c001d15a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d161:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d168:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d16c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d170:	0f af c2             	imul   eax,edx
c001d173:	99                   	cdq    
c001d174:	52                   	push   edx
c001d175:	50                   	push   eax
c001d176:	55                   	push   ebp
c001d177:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d17a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d17d:	83 c4 20             	add    esp,0x20
c001d180:	85 c0                	test   eax,eax
c001d182:	0f 84 00 06 00 00    	je     c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d188:	52                   	push   edx
c001d189:	31 d2                	xor    edx,edx
c001d18b:	52                   	push   edx
c001d18c:	50                   	push   eax
c001d18d:	55                   	push   ebp
c001d18e:	e8 b1 62 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d193:	83 c4 10             	add    esp,0x10
c001d196:	85 c0                	test   eax,eax
c001d198:	0f 85 ea 05 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1a5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1a9:	31 f6                	xor    esi,esi
c001d1ab:	0f af c2             	imul   eax,edx
c001d1ae:	50                   	push   eax
c001d1af:	e8 97 26 ff ff       	call   c000f84b <malloc>
c001d1b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1c2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1c6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1ca:	0f af c2             	imul   eax,edx
c001d1cd:	99                   	cdq    
c001d1ce:	52                   	push   edx
c001d1cf:	50                   	push   eax
c001d1d0:	55                   	push   ebp
c001d1d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1d4:	83 c4 20             	add    esp,0x20
c001d1d7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1db:	0f 86 8a 00 00 00    	jbe    c001d26b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1e1:	0f b7 de             	movzx  ebx,si
c001d1e4:	c1 e3 05             	shl    ebx,0x5
c001d1e7:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1eb:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1ee:	75 75                	jne    c001d265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1f3:	31 d2                	xor    edx,edx
c001d1f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d200:	50                   	push   eax
c001d201:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d204:	52                   	push   edx
c001d205:	50                   	push   eax
c001d206:	55                   	push   ebp
c001d207:	e8 38 62 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d20c:	83 c4 10             	add    esp,0x10
c001d20f:	85 c0                	test   eax,eax
c001d211:	0f 85 71 05 00 00    	jne    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d217:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d21e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d221:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d225:	31 d2                	xor    edx,edx
c001d227:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d232:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d239:	50                   	push   eax
c001d23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d242:	52                   	push   edx
c001d243:	50                   	push   eax
c001d244:	55                   	push   ebp
c001d245:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d248:	83 c4 1c             	add    esp,0x1c
c001d24b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d24e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d251:	50                   	push   eax
c001d252:	6a 00                	push   0x0
c001d254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d258:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d25c:	50                   	push   eax
c001d25d:	e8 1e 35 fe ff       	call   c0000780 <memset>
c001d262:	83 c4 10             	add    esp,0x10
c001d265:	46                   	inc    esi
c001d266:	e9 6c ff ff ff       	jmp    c001d1d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d26b:	53                   	push   ebx
c001d26c:	31 db                	xor    ebx,ebx
c001d26e:	68 00 01 00 00       	push   0x100
c001d273:	6a 00                	push   0x0
c001d275:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d279:	50                   	push   eax
c001d27a:	e8 01 35 fe ff       	call   c0000780 <memset>
c001d27f:	83 c4 0c             	add    esp,0xc
c001d282:	68 00 01 00 00       	push   0x100
c001d287:	6a 00                	push   0x0
c001d289:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d290:	50                   	push   eax
c001d291:	e8 ea 34 fe ff       	call   c0000780 <memset>
c001d296:	83 c4 10             	add    esp,0x10
c001d299:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d2a1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d2a9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d2b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2b9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2c1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d2c5:	0f 86 30 01 00 00    	jbe    c001d3fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d2cb:	0f b7 f3             	movzx  esi,bx
c001d2ce:	6b f6 28             	imul   esi,esi,0x28
c001d2d1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2d5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2dc:	52                   	push   edx
c001d2dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2e1:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2e5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2e7:	6b d2 28             	imul   edx,edx,0x28
c001d2ea:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2ee:	31 d2                	xor    edx,edx
c001d2f0:	52                   	push   edx
c001d2f1:	50                   	push   eax
c001d2f2:	55                   	push   ebp
c001d2f3:	e8 4c 61 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d2f8:	83 c4 0c             	add    esp,0xc
c001d2fb:	6a 20                	push   0x20
c001d2fd:	6a 00                	push   0x0
c001d2ff:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d306:	51                   	push   ecx
c001d307:	e8 74 34 fe ff       	call   c0000780 <memset>
c001d30c:	59                   	pop    ecx
c001d30d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d310:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d314:	52                   	push   edx
c001d315:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d31c:	51                   	push   ecx
c001d31d:	6a 00                	push   0x0
c001d31f:	6a 1f                	push   0x1f
c001d321:	55                   	push   ebp
c001d322:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d325:	83 c4 1c             	add    esp,0x1c
c001d328:	6a 09                	push   0x9
c001d32a:	68 ac c5 02 c0       	push   0xc002c5ac
c001d32f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d336:	51                   	push   ecx
c001d337:	e8 0c 33 fe ff       	call   c0000648 <memcmp>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	85 c0                	test   eax,eax
c001d341:	75 21                	jne    c001d364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d34b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d34f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d353:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d356:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d35d:	89 d0                	mov    eax,edx
c001d35f:	40                   	inc    eax
c001d360:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d364:	50                   	push   eax
c001d365:	6a 09                	push   0x9
c001d367:	68 b6 c5 02 c0       	push   0xc002c5b6
c001d36c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d373:	50                   	push   eax
c001d374:	e8 cf 32 fe ff       	call   c0000648 <memcmp>
c001d379:	83 c4 10             	add    esp,0x10
c001d37c:	85 c0                	test   eax,eax
c001d37e:	75 21                	jne    c001d3a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d388:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d38c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d390:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d393:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d39a:	89 d0                	mov    eax,edx
c001d39c:	40                   	inc    eax
c001d39d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3a1:	50                   	push   eax
c001d3a2:	50                   	push   eax
c001d3a3:	68 82 c5 02 c0       	push   0xc002c582
c001d3a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3af:	50                   	push   eax
c001d3b0:	e8 13 35 fe ff       	call   c00008c8 <strcmp>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	85 c0                	test   eax,eax
c001d3ba:	75 0f                	jne    c001d3cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d3bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3cb:	50                   	push   eax
c001d3cc:	50                   	push   eax
c001d3cd:	68 8a c5 02 c0       	push   0xc002c58a
c001d3d2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3d9:	50                   	push   eax
c001d3da:	e8 e9 34 fe ff       	call   c00008c8 <strcmp>
c001d3df:	83 c4 10             	add    esp,0x10
c001d3e2:	85 c0                	test   eax,eax
c001d3e4:	75 0f                	jne    c001d3f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3f5:	43                   	inc    ebx
c001d3f6:	e9 c6 fe ff ff       	jmp    c001d2c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3fb:	31 d2                	xor    edx,edx
c001d3fd:	50                   	push   eax
c001d3fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d402:	52                   	push   edx
c001d403:	50                   	push   eax
c001d404:	55                   	push   ebp
c001d405:	e8 3a 60 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d40a:	58                   	pop    eax
c001d40b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d40f:	e8 37 24 ff ff       	call   c000f84b <malloc>
c001d414:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d417:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d41b:	31 d2                	xor    edx,edx
c001d41d:	58                   	pop    eax
c001d41e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d422:	53                   	push   ebx
c001d423:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d427:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d42b:	52                   	push   edx
c001d42c:	50                   	push   eax
c001d42d:	55                   	push   ebp
c001d42e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d431:	83 c4 14             	add    esp,0x14
c001d434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d438:	e8 0e 24 ff ff       	call   c000f84b <malloc>
c001d43d:	31 d2                	xor    edx,edx
c001d43f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d443:	83 c4 0c             	add    esp,0xc
c001d446:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d44a:	52                   	push   edx
c001d44b:	50                   	push   eax
c001d44c:	55                   	push   ebp
c001d44d:	e8 f2 5f ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d452:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d455:	31 d2                	xor    edx,edx
c001d457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d45a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d45e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d462:	52                   	push   edx
c001d463:	50                   	push   eax
c001d464:	55                   	push   ebp
c001d465:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d468:	83 c4 20             	add    esp,0x20
c001d46b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d477:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d47b:	0f 84 0b 03 00 00    	je     c001d78c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d481:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d488:	31 d2                	xor    edx,edx
c001d48a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d48e:	c1 e8 03             	shr    eax,0x3
c001d491:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d495:	51                   	push   ecx
c001d496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d49a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d49e:	52                   	push   edx
c001d49f:	50                   	push   eax
c001d4a0:	55                   	push   ebp
c001d4a1:	e8 9e 5f ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d4a6:	5b                   	pop    ebx
c001d4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ab:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d4b2:	e8 94 23 ff ff       	call   c000f84b <malloc>
c001d4b7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4be:	31 d2                	xor    edx,edx
c001d4c0:	5e                   	pop    esi
c001d4c1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d4c5:	50                   	push   eax
c001d4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4ce:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4d5:	52                   	push   edx
c001d4d6:	50                   	push   eax
c001d4d7:	55                   	push   ebp
c001d4d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4db:	83 c4 20             	add    esp,0x20
c001d4de:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4e6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4ea:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4ee:	0f 8d 7c 02 00 00    	jge    c001d770 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d4f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4fc:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d501:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d504:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d50c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d510:	89 d8                	mov    eax,ebx
c001d512:	c1 e8 08             	shr    eax,0x8
c001d515:	89 c6                	mov    esi,eax
c001d517:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d51b:	c1 e6 04             	shl    esi,0x4
c001d51e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d522:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d525:	85 d2                	test   edx,edx
c001d527:	0f 85 bf 00 00 00    	jne    c001d5ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d52d:	83 ec 0c             	sub    esp,0xc
c001d530:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d534:	03 06                	add    eax,DWORD PTR [esi]
c001d536:	50                   	push   eax
c001d537:	e8 4b f8 ff ff       	call   c001cd87 <Thr::getAddressOfKernelSymbol(char const*)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	89 c2                	mov    edx,eax
c001d541:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d546:	85 c0                	test   eax,eax
c001d548:	0f 85 9e 00 00 00    	jne    c001d5ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d54e:	83 ec 0c             	sub    esp,0xc
c001d551:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d555:	03 06                	add    eax,DWORD PTR [esi]
c001d557:	50                   	push   eax
c001d558:	e8 a0 0f ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	89 c2                	mov    edx,eax
c001d562:	85 c0                	test   eax,eax
c001d564:	0f 85 82 00 00 00    	jne    c001d5ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d56a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d56e:	50                   	push   eax
c001d56f:	50                   	push   eax
c001d570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d574:	03 06                	add    eax,DWORD PTR [esi]
c001d576:	50                   	push   eax
c001d577:	68 c0 c5 02 c0       	push   0xc002c5c0
c001d57c:	e8 42 58 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d581:	58                   	pop    eax
c001d582:	5a                   	pop    edx
c001d583:	68 da c5 02 c0       	push   0xc002c5da
c001d588:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d58f:	50                   	push   eax
c001d590:	e8 a7 32 fe ff       	call   c000083c <strcpy>
c001d595:	59                   	pop    ecx
c001d596:	58                   	pop    eax
c001d597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d59b:	03 06                	add    eax,DWORD PTR [esi]
c001d59d:	50                   	push   eax
c001d59e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5a5:	50                   	push   eax
c001d5a6:	e8 d1 33 fe ff       	call   c000097c <strcat>
c001d5ab:	58                   	pop    eax
c001d5ac:	5a                   	pop    edx
c001d5ad:	68 70 c6 02 c0       	push   0xc002c670
c001d5b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5b9:	50                   	push   eax
c001d5ba:	e8 bd 33 fe ff       	call   c000097c <strcat>
c001d5bf:	83 c4 10             	add    esp,0x10
c001d5c2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5c7:	0f 84 5d 01 00 00    	je     c001d72a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5cd:	83 ec 0c             	sub    esp,0xc
c001d5d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5d7:	50                   	push   eax
c001d5d8:	e8 7a d0 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d5dd:	83 c4 10             	add    esp,0x10
c001d5e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5e4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5e8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5ec:	80 fb 01             	cmp    bl,0x1
c001d5ef:	0f 85 88 00 00 00    	jne    c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d5f5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5fc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d600:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d604:	01 ce                	add    esi,ecx
c001d606:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d60c:	0f 94 c0             	sete   al
c001d60f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d615:	0f 94 c3             	sete   bl
c001d618:	09 c3                	or     ebx,eax
c001d61a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d61c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d621:	74 41                	je     c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d623:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d626:	84 db                	test   bl,bl
c001d628:	75 15                	jne    c001d63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d62a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d62e:	66 83 f8 0c          	cmp    ax,0xc
c001d632:	76 05                	jbe    c001d639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d634:	b8 0c 00 00 00       	mov    eax,0xc
c001d639:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d63d:	76 37                	jbe    c001d676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d63f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d643:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d648:	0f 84 dc 00 00 00    	je     c001d72a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d64e:	83 ec 0c             	sub    esp,0xc
c001d651:	68 f1 c5 02 c0       	push   0xc002c5f1
c001d656:	e8 fc cf ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d65b:	83 c4 10             	add    esp,0x10
c001d65e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d662:	eb 12                	jmp    c001d676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d664:	01 c1                	add    ecx,eax
c001d666:	84 db                	test   bl,bl
c001d668:	75 0c                	jne    c001d676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d66a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d66e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d672:	77 02                	ja     c001d676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d674:	01 d1                	add    ecx,edx
c001d676:	89 0e                	mov    DWORD PTR [esi],ecx
c001d678:	e9 ea 00 00 00       	jmp    c001d767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d67d:	80 fb 02             	cmp    bl,0x2
c001d680:	75 7c                	jne    c001d6fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d682:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d689:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d68d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d691:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d697:	74 20                	je     c001d6b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d699:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d69f:	74 18                	je     c001d6b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d6a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d6a5:	b9 0a 00 00 00       	mov    ecx,0xa
c001d6aa:	66 83 f8 0e          	cmp    ax,0xe
c001d6ae:	77 03                	ja     c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d6b0:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d6b3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d6b7:	76 1f                	jbe    c001d6d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d6b9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d6bd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6c2:	74 66                	je     c001d72a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	68 0d c6 02 c0       	push   0xc002c60d
c001d6cc:	e8 86 cf ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6da:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d6df:	74 13                	je     c001d6f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d6e1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6e5:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d6ec:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6f0:	01 c8                	add    eax,ecx
c001d6f2:	eb 04                	jmp    c001d6f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d6f4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6f8:	01 c2                	add    edx,eax
c001d6fa:	89 16                	mov    DWORD PTR [esi],edx
c001d6fc:	eb 69                	jmp    c001d767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d6fe:	0f b6 db             	movzx  ebx,bl
c001d701:	50                   	push   eax
c001d702:	50                   	push   eax
c001d703:	53                   	push   ebx
c001d704:	68 29 c6 02 c0       	push   0xc002c629
c001d709:	e8 b5 56 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d70e:	83 c4 10             	add    esp,0x10
c001d711:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d716:	74 12                	je     c001d72a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	68 34 c6 02 c0       	push   0xc002c634
c001d720:	e8 32 cf ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	eb 3d                	jmp    c001d767 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d72a:	83 ec 0c             	sub    esp,0xc
c001d72d:	55                   	push   ebp
c001d72e:	e8 b1 5c ff ff       	call   c00133e4 <File::close()>
c001d733:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d736:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d739:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d73c:	59                   	pop    ecx
c001d73d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d741:	e8 15 21 ff ff       	call   c000f85b <free>
c001d746:	5b                   	pop    ebx
c001d747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d74b:	e8 0b 21 ff ff       	call   c000f85b <free>
c001d750:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d753:	e8 03 21 ff ff       	call   c000f85b <free>
c001d758:	5e                   	pop    esi
c001d759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d75d:	e8 f9 20 ff ff       	call   c000f85b <free>
c001d762:	83 c4 10             	add    esp,0x10
c001d765:	eb 21                	jmp    c001d788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d767:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d76b:	e9 76 fd ff ff       	jmp    c001d4e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d770:	83 ec 0c             	sub    esp,0xc
c001d773:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d777:	e8 df 20 ff ff       	call   c000f85b <free>
c001d77c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	e9 eb fc ff ff       	jmp    c001d473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d788:	31 c0                	xor    eax,eax
c001d78a:	eb 33                	jmp    c001d7bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	55                   	push   ebp
c001d790:	e8 4f 5c ff ff       	call   c00133e4 <File::close()>
c001d795:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d798:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d79b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d79e:	58                   	pop    eax
c001d79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7a3:	e8 b3 20 ff ff       	call   c000f85b <free>
c001d7a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ab:	e8 ab 20 ff ff       	call   c000f85b <free>
c001d7b0:	5a                   	pop    edx
c001d7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7b5:	e8 a1 20 ff ff       	call   c000f85b <free>
c001d7ba:	83 c4 10             	add    esp,0x10
c001d7bd:	b0 01                	mov    al,0x1
c001d7bf:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d7c5:	5b                   	pop    ebx
c001d7c6:	5e                   	pop    esi
c001d7c7:	5f                   	pop    edi
c001d7c8:	5d                   	pop    ebp
c001d7c9:	c3                   	ret    

c001d7ca <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d7ca:	56                   	push   esi
c001d7cb:	31 d2                	xor    edx,edx
c001d7cd:	53                   	push   ebx
c001d7ce:	8b 1d 20 17 03 c0    	mov    ebx,DWORD PTR ds:0xc0031720
c001d7d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7d8:	39 d3                	cmp    ebx,edx
c001d7da:	7e 1b                	jle    c001d7f7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d7dc:	8b 04 95 40 19 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce6c0]
c001d7e3:	39 c8                	cmp    eax,ecx
c001d7e5:	77 0d                	ja     c001d7f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d7e7:	8b 34 95 40 17 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce8c0]
c001d7ee:	01 c6                	add    esi,eax
c001d7f0:	39 ce                	cmp    esi,ecx
c001d7f2:	77 05                	ja     c001d7f9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7f4:	42                   	inc    edx
c001d7f5:	eb e1                	jmp    c001d7d8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7f7:	31 c0                	xor    eax,eax
c001d7f9:	5b                   	pop    ebx
c001d7fa:	5e                   	pop    esi
c001d7fb:	c3                   	ret    

c001d7fc <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7fc:	53                   	push   ebx
c001d7fd:	31 c0                	xor    eax,eax
c001d7ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d803:	8b 1d 20 17 03 c0    	mov    ebx,DWORD PTR ds:0xc0031720
c001d809:	39 c3                	cmp    ebx,eax
c001d80b:	7e 22                	jle    c001d82f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d80d:	8b 14 85 40 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6c0]
c001d814:	39 ca                	cmp    edx,ecx
c001d816:	77 14                	ja     c001d82c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d818:	03 14 85 40 17 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce8c0]
c001d81f:	39 ca                	cmp    edx,ecx
c001d821:	76 09                	jbe    c001d82c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d823:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c001d82a:	eb 05                	jmp    c001d831 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d82c:	40                   	inc    eax
c001d82d:	eb da                	jmp    c001d809 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d82f:	31 c0                	xor    eax,eax
c001d831:	5b                   	pop    ebx
c001d832:	c3                   	ret    

c001d833 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d833:	53                   	push   ebx
c001d834:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d838:	53                   	push   ebx
c001d839:	e8 8c ff ff ff       	call   c001d7ca <Thr::getDriverBaseFromAddress(unsigned long)>
c001d83e:	5a                   	pop    edx
c001d83f:	31 d2                	xor    edx,edx
c001d841:	85 c0                	test   eax,eax
c001d843:	74 04                	je     c001d849 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d845:	89 da                	mov    edx,ebx
c001d847:	29 c2                	sub    edx,eax
c001d849:	89 d0                	mov    eax,edx
c001d84b:	5b                   	pop    ebx
c001d84c:	c3                   	ret    

c001d84d <Thr::loadDLL(char const*, bool)>:
c001d84d:	55                   	push   ebp
c001d84e:	57                   	push   edi
c001d84f:	56                   	push   esi
c001d850:	53                   	push   ebx
c001d851:	81 ec 34 01 00 00    	sub    esp,0x134
c001d857:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d85e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d865:	56                   	push   esi
c001d866:	68 4c c6 02 c0       	push   0xc002c64c
c001d86b:	e8 53 55 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d870:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d877:	e8 cf 1f ff ff       	call   c000f84b <malloc>
c001d87c:	83 c4 0c             	add    esp,0xc
c001d87f:	89 c3                	mov    ebx,eax
c001d881:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001d887:	56                   	push   esi
c001d888:	50                   	push   eax
c001d889:	e8 94 5a ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001d88e:	83 c4 10             	add    esp,0x10
c001d891:	85 db                	test   ebx,ebx
c001d893:	75 3c                	jne    c001d8d1 <Thr::loadDLL(char const*, bool)+0x84>
c001d895:	89 e8                	mov    eax,ebp
c001d897:	84 c0                	test   al,al
c001d899:	0f 84 d5 01 00 00    	je     c001da74 <Thr::loadDLL(char const*, bool)+0x227>
c001d89f:	57                   	push   edi
c001d8a0:	57                   	push   edi
c001d8a1:	68 5d c6 02 c0       	push   0xc002c65d
c001d8a6:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d8aa:	57                   	push   edi
c001d8ab:	e8 8c 2f fe ff       	call   c000083c <strcpy>
c001d8b0:	58                   	pop    eax
c001d8b1:	5a                   	pop    edx
c001d8b2:	56                   	push   esi
c001d8b3:	57                   	push   edi
c001d8b4:	e8 c3 30 fe ff       	call   c000097c <strcat>
c001d8b9:	59                   	pop    ecx
c001d8ba:	58                   	pop    eax
c001d8bb:	68 70 c6 02 c0       	push   0xc002c670
c001d8c0:	57                   	push   edi
c001d8c1:	e8 b6 30 fe ff       	call   c000097c <strcat>
c001d8c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d8c9:	e8 89 cd ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	51                   	push   ecx
c001d8d2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d8d6:	50                   	push   eax
c001d8d7:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d8db:	50                   	push   eax
c001d8dc:	53                   	push   ebx
c001d8dd:	e8 50 5d ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001d8e2:	83 c4 10             	add    esp,0x10
c001d8e5:	85 db                	test   ebx,ebx
c001d8e7:	74 0c                	je     c001d8f5 <Thr::loadDLL(char const*, bool)+0xa8>
c001d8e9:	83 ec 0c             	sub    esp,0xc
c001d8ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8ee:	53                   	push   ebx
c001d8ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8fa:	75 0a                	jne    c001d906 <Thr::loadDLL(char const*, bool)+0xb9>
c001d8fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d900:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d904:	75 3c                	jne    c001d942 <Thr::loadDLL(char const*, bool)+0xf5>
c001d906:	89 e8                	mov    eax,ebp
c001d908:	84 c0                	test   al,al
c001d90a:	0f 84 4c 01 00 00    	je     c001da5c <Thr::loadDLL(char const*, bool)+0x20f>
c001d910:	51                   	push   ecx
c001d911:	51                   	push   ecx
c001d912:	68 5d c6 02 c0       	push   0xc002c65d
c001d917:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d91b:	53                   	push   ebx
c001d91c:	e8 1b 2f fe ff       	call   c000083c <strcpy>
c001d921:	5f                   	pop    edi
c001d922:	58                   	pop    eax
c001d923:	56                   	push   esi
c001d924:	53                   	push   ebx
c001d925:	e8 52 30 fe ff       	call   c000097c <strcat>
c001d92a:	58                   	pop    eax
c001d92b:	5a                   	pop    edx
c001d92c:	68 70 c6 02 c0       	push   0xc002c670
c001d931:	53                   	push   ebx
c001d932:	e8 45 30 fe ff       	call   c000097c <strcat>
c001d937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d93a:	e8 18 cd ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d93f:	83 c4 10             	add    esp,0x10
c001d942:	e8 e7 42 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001d947:	51                   	push   ecx
c001d948:	6a 03                	push   0x3
c001d94a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d94e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d952:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d958:	83 d3 00             	adc    ebx,0x0
c001d95b:	89 ca                	mov    edx,ecx
c001d95d:	89 d1                	mov    ecx,edx
c001d95f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d963:	51                   	push   ecx
c001d964:	50                   	push   eax
c001d965:	e8 b2 49 ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001d96a:	5f                   	pop    edi
c001d96b:	89 c3                	mov    ebx,eax
c001d96d:	58                   	pop    eax
c001d96e:	53                   	push   ebx
c001d96f:	68 72 c6 02 c0       	push   0xc002c672
c001d974:	e8 4a 54 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d979:	89 34 24             	mov    DWORD PTR [esp],esi
c001d97c:	e8 1b 2e fe ff       	call   c000079c <strlen>
c001d981:	8b 3d 20 17 03 c0    	mov    edi,DWORD PTR ds:0xc0031720
c001d987:	40                   	inc    eax
c001d988:	89 04 24             	mov    DWORD PTR [esp],eax
c001d98b:	e8 bb 1e ff ff       	call   c000f84b <malloc>
c001d990:	89 04 bd 40 1b 03 c0 	mov    DWORD PTR [edi*4-0x3ffce4c0],eax
c001d997:	58                   	pop    eax
c001d998:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c001d99d:	5a                   	pop    edx
c001d99e:	56                   	push   esi
c001d99f:	ff 34 85 40 1b 03 c0 	push   DWORD PTR [eax*4-0x3ffce4c0]
c001d9a6:	e8 91 2e fe ff       	call   c000083c <strcpy>
c001d9ab:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c001d9b0:	8d 50 01             	lea    edx,[eax+0x1]
c001d9b3:	89 1c 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],ebx
c001d9ba:	89 15 20 17 03 c0    	mov    DWORD PTR ds:0xc0031720,edx
c001d9c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9c4:	83 c4 0c             	add    esp,0xc
c001d9c7:	89 14 85 40 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8c0],edx
c001d9ce:	6a 01                	push   0x1
c001d9d0:	53                   	push   ebx
c001d9d1:	56                   	push   esi
c001d9d2:	e8 bd f6 ff ff       	call   c001d094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d9d7:	83 c4 10             	add    esp,0x10
c001d9da:	89 c7                	mov    edi,eax
c001d9dc:	84 c0                	test   al,al
c001d9de:	0f 85 8c 00 00 00    	jne    c001da70 <Thr::loadDLL(char const*, bool)+0x223>
c001d9e4:	89 e8                	mov    eax,ebp
c001d9e6:	84 c0                	test   al,al
c001d9e8:	74 76                	je     c001da60 <Thr::loadDLL(char const*, bool)+0x213>
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	68 7f c6 02 c0       	push   0xc002c67f
c001d9f2:	e8 60 cc ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	eb 64                	jmp    c001da60 <Thr::loadDLL(char const*, bool)+0x213>
c001d9fc:	e8 2d 42 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001da01:	89 f5                	mov    ebp,esi
c001da03:	c1 e5 0c             	shl    ebp,0xc
c001da06:	52                   	push   edx
c001da07:	01 dd                	add    ebp,ebx
c001da09:	52                   	push   edx
c001da0a:	55                   	push   ebp
c001da0b:	50                   	push   eax
c001da0c:	e8 85 44 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001da11:	83 c4 10             	add    esp,0x10
c001da14:	f6 00 60             	test   BYTE PTR [eax],0x60
c001da17:	75 0c                	jne    c001da25 <Thr::loadDLL(char const*, bool)+0x1d8>
c001da19:	83 ec 0c             	sub    esp,0xc
c001da1c:	55                   	push   ebp
c001da1d:	e8 0b 24 ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c001da22:	83 c4 10             	add    esp,0x10
c001da25:	46                   	inc    esi
c001da26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da2e:	05 ff 0f 00 00       	add    eax,0xfff
c001da33:	83 d2 00             	adc    edx,0x0
c001da36:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da3a:	c1 ea 0c             	shr    edx,0xc
c001da3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da45:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da49:	ba 00 00 00 00       	mov    edx,0x0
c001da4e:	89 d0                	mov    eax,edx
c001da50:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da54:	72 a6                	jb     c001d9fc <Thr::loadDLL(char const*, bool)+0x1af>
c001da56:	89 f8                	mov    eax,edi
c001da58:	84 c0                	test   al,al
c001da5a:	75 18                	jne    c001da74 <Thr::loadDLL(char const*, bool)+0x227>
c001da5c:	31 db                	xor    ebx,ebx
c001da5e:	eb 14                	jmp    c001da74 <Thr::loadDLL(char const*, bool)+0x227>
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	68 9e c6 02 c0       	push   0xc002c69e
c001da68:	e8 ea cb ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001da6d:	83 c4 10             	add    esp,0x10
c001da70:	31 f6                	xor    esi,esi
c001da72:	eb b2                	jmp    c001da26 <Thr::loadDLL(char const*, bool)+0x1d9>
c001da74:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da7a:	89 d8                	mov    eax,ebx
c001da7c:	5b                   	pop    ebx
c001da7d:	5e                   	pop    esi
c001da7e:	5f                   	pop    edi
c001da7f:	5d                   	pop    ebp
c001da80:	c3                   	ret    

c001da81 <Thr::executeDLL(unsigned long, void*)>:
c001da81:	56                   	push   esi
c001da82:	53                   	push   ebx
c001da83:	52                   	push   edx
c001da84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da8c:	85 db                	test   ebx,ebx
c001da8e:	75 10                	jne    c001daa0 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da90:	83 ec 0c             	sub    esp,0xc
c001da93:	68 ba c6 02 c0       	push   0xc002c6ba
c001da98:	e8 ba cb ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001da9d:	83 c4 10             	add    esp,0x10
c001daa0:	50                   	push   eax
c001daa1:	50                   	push   eax
c001daa2:	53                   	push   ebx
c001daa3:	68 e4 c6 02 c0       	push   0xc002c6e4
c001daa8:	e8 16 53 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001daad:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dab1:	89 d8                	mov    eax,ebx
c001dab3:	83 c4 14             	add    esp,0x14
c001dab6:	5b                   	pop    ebx
c001dab7:	5e                   	pop    esi
c001dab8:	ff e0                	jmp    eax

c001daba <changeTSS>:
c001daba:	83 ec 14             	sub    esp,0x14
c001dabd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dac2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dac5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001daca:	c1 e2 15             	shl    edx,0x15
c001dacd:	29 d0                	sub    eax,edx
c001dacf:	50                   	push   eax
c001dad0:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001dad5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dadb:	05 7c 11 00 00       	add    eax,0x117c
c001dae0:	50                   	push   eax
c001dae1:	e8 48 38 ff ff       	call   c001132e <TSS::setESP(unsigned long)>
c001dae6:	83 c4 1c             	add    esp,0x1c
c001dae9:	c3                   	ret    

c001daea <Process::addArgs(char**)>:
c001daea:	57                   	push   edi
c001daeb:	56                   	push   esi
c001daec:	53                   	push   ebx
c001daed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001daf1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001daf5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001daff:	85 ff                	test   edi,edi
c001db01:	74 3d                	je     c001db40 <Process::addArgs(char**)+0x56>
c001db03:	8b 07                	mov    eax,DWORD PTR [edi]
c001db05:	85 c0                	test   eax,eax
c001db07:	74 37                	je     c001db40 <Process::addArgs(char**)+0x56>
c001db09:	31 db                	xor    ebx,ebx
c001db0b:	83 ec 0c             	sub    esp,0xc
c001db0e:	50                   	push   eax
c001db0f:	e8 88 2c fe ff       	call   c000079c <strlen>
c001db14:	40                   	inc    eax
c001db15:	89 04 24             	mov    DWORD PTR [esp],eax
c001db18:	e8 2e 1d ff ff       	call   c000f84b <malloc>
c001db1d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db24:	5a                   	pop    edx
c001db25:	59                   	pop    ecx
c001db26:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db29:	43                   	inc    ebx
c001db2a:	50                   	push   eax
c001db2b:	e8 0c 2d fe ff       	call   c000083c <strcpy>
c001db30:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db36:	83 c4 10             	add    esp,0x10
c001db39:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db3c:	85 c0                	test   eax,eax
c001db3e:	75 cb                	jne    c001db0b <Process::addArgs(char**)+0x21>
c001db40:	5b                   	pop    ebx
c001db41:	5e                   	pop    esi
c001db42:	5f                   	pop    edi
c001db43:	c3                   	ret    

c001db44 <Process::Process(char const*, Process*, char**)>:
c001db44:	56                   	push   esi
c001db45:	53                   	push   ebx
c001db46:	83 ec 14             	sub    esp,0x14
c001db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4d:	05 0c 02 00 00       	add    eax,0x20c
c001db52:	bb 07 00 00 00       	mov    ebx,0x7
c001db57:	89 c6                	mov    esi,eax
c001db59:	85 db                	test   ebx,ebx
c001db5b:	78 12                	js     c001db6f <Process::Process(char const*, Process*, char**)+0x2b>
c001db5d:	83 ec 0c             	sub    esp,0xc
c001db60:	56                   	push   esi
c001db61:	e8 60 b5 00 00       	call   c00290c6 <ThreadControlBlock::ThreadControlBlock()>
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	83 c6 63             	add    esi,0x63
c001db6c:	4b                   	dec    ebx
c001db6d:	eb ea                	jmp    c001db59 <Process::Process(char const*, Process*, char**)+0x15>
c001db6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db73:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db7a:	83 ec 0c             	sub    esp,0xc
c001db7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db81:	e8 22 c9 ff ff       	call   c001a4a8 <Krnl::newProcessEnv(Process*)>
c001db86:	83 c4 10             	add    esp,0x10
c001db89:	89 c2                	mov    edx,eax
c001db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db99:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dba2:	a1 30 df 02 c0       	mov    eax,ds:0xc002df30
c001dba7:	8d 50 01             	lea    edx,[eax+0x1]
c001dbaa:	89 15 30 df 02 c0    	mov    DWORD PTR ds:0xc002df30,edx
c001dbb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbb4:	89 02                	mov    DWORD PTR [edx],eax
c001dbb6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dbbe:	83 ec 0c             	sub    esp,0xc
c001dbc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbc5:	e8 81 1c ff ff       	call   c000f84b <malloc>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	89 c3                	mov    ebx,eax
c001dbcf:	83 ec 08             	sub    esp,0x8
c001dbd2:	6a 00                	push   0x0
c001dbd4:	53                   	push   ebx
c001dbd5:	e8 ea 4a ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001dbda:	83 c4 10             	add    esp,0x10
c001dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbeb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbfd:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc0d:	85 c0                	test   eax,eax
c001dc0f:	74 42                	je     c001dc53 <Process::Process(char const*, Process*, char**)+0x10f>
c001dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc1b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc25:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc35:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3f:	05 0c 01 00 00       	add    eax,0x10c
c001dc44:	83 ec 08             	sub    esp,0x8
c001dc47:	52                   	push   edx
c001dc48:	50                   	push   eax
c001dc49:	e8 ee 2b fe ff       	call   c000083c <strcpy>
c001dc4e:	83 c4 10             	add    esp,0x10
c001dc51:	eb 63                	jmp    c001dcb6 <Process::Process(char const*, Process*, char**)+0x172>
c001dc53:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dc5b:	83 ec 0c             	sub    esp,0xc
c001dc5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc62:	e8 e4 1b ff ff       	call   c000f84b <malloc>
c001dc67:	83 c4 10             	add    esp,0x10
c001dc6a:	89 c3                	mov    ebx,eax
c001dc6c:	83 ec 08             	sub    esp,0x8
c001dc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc73:	53                   	push   ebx
c001dc74:	e8 95 33 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001dc79:	83 c4 10             	add    esp,0x10
c001dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc80:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc8a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	50                   	push   eax
c001dc94:	e8 ac 28 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca0:	05 0c 01 00 00       	add    eax,0x10c
c001dca5:	83 ec 08             	sub    esp,0x8
c001dca8:	68 03 c7 02 c0       	push   0xc002c703
c001dcad:	50                   	push   eax
c001dcae:	e8 89 2b fe ff       	call   c000083c <strcpy>
c001dcb3:	83 c4 10             	add    esp,0x10
c001dcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcba:	83 c0 0c             	add    eax,0xc
c001dcbd:	83 ec 08             	sub    esp,0x8
c001dcc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc4:	50                   	push   eax
c001dcc5:	e8 72 2b fe ff       	call   c000083c <strcpy>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	83 ec 08             	sub    esp,0x8
c001dcd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd8:	e8 0d fe ff ff       	call   c001daea <Process::addArgs(char**)>
c001dcdd:	83 c4 10             	add    esp,0x10
c001dce0:	83 ec 08             	sub    esp,0x8
c001dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dceb:	e8 6e ee ff ff       	call   c001cb5e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dcfb:	83 f0 01             	xor    eax,0x1
c001dcfe:	88 c2                	mov    dl,al
c001dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd04:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dd0a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd0f:	83 ec 08             	sub    esp,0x8
c001dd12:	50                   	push   eax
c001dd13:	68 30 c8 02 c0       	push   0xc002c830
c001dd18:	e8 a6 50 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001dd1d:	83 c4 10             	add    esp,0x10
c001dd20:	90                   	nop
c001dd21:	83 c4 14             	add    esp,0x14
c001dd24:	5b                   	pop    ebx
c001dd25:	5e                   	pop    esi
c001dd26:	c3                   	ret    
c001dd27:	90                   	nop

c001dd28 <Process::Process(bool, char const*, Process*, char**)>:
c001dd28:	56                   	push   esi
c001dd29:	53                   	push   ebx
c001dd2a:	83 ec 24             	sub    esp,0x24
c001dd2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd31:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd39:	05 0c 02 00 00       	add    eax,0x20c
c001dd3e:	bb 07 00 00 00       	mov    ebx,0x7
c001dd43:	89 c6                	mov    esi,eax
c001dd45:	85 db                	test   ebx,ebx
c001dd47:	78 12                	js     c001dd5b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd49:	83 ec 0c             	sub    esp,0xc
c001dd4c:	56                   	push   esi
c001dd4d:	e8 74 b3 00 00       	call   c00290c6 <ThreadControlBlock::ThreadControlBlock()>
c001dd52:	83 c4 10             	add    esp,0x10
c001dd55:	83 c6 63             	add    esi,0x63
c001dd58:	4b                   	dec    ebx
c001dd59:	eb ea                	jmp    c001dd45 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd66:	83 ec 0c             	sub    esp,0xc
c001dd69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd6d:	e8 36 c7 ff ff       	call   c001a4a8 <Krnl::newProcessEnv(Process*)>
c001dd72:	83 c4 10             	add    esp,0x10
c001dd75:	89 c2                	mov    edx,eax
c001dd77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd85:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd8e:	a1 30 df 02 c0       	mov    eax,ds:0xc002df30
c001dd93:	8d 50 01             	lea    edx,[eax+0x1]
c001dd96:	89 15 30 df 02 c0    	mov    DWORD PTR ds:0xc002df30,edx
c001dd9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dda0:	89 02                	mov    DWORD PTR [edx],eax
c001dda2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001ddaa:	83 ec 0c             	sub    esp,0xc
c001ddad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ddb1:	e8 95 1a ff ff       	call   c000f84b <malloc>
c001ddb6:	83 c4 10             	add    esp,0x10
c001ddb9:	89 c3                	mov    ebx,eax
c001ddbb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddc0:	83 ec 08             	sub    esp,0x8
c001ddc3:	50                   	push   eax
c001ddc4:	53                   	push   ebx
c001ddc5:	e8 fa 48 ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001ddca:	83 c4 10             	add    esp,0x10
c001ddcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ddd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dddb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dde5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dded:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddfd:	85 c0                	test   eax,eax
c001ddff:	74 42                	je     c001de43 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001de01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de15:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de1f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de25:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de2f:	05 0c 01 00 00       	add    eax,0x10c
c001de34:	83 ec 08             	sub    esp,0x8
c001de37:	52                   	push   edx
c001de38:	50                   	push   eax
c001de39:	e8 fe 29 fe ff       	call   c000083c <strcpy>
c001de3e:	83 c4 10             	add    esp,0x10
c001de41:	eb 63                	jmp    c001dea6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de43:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001de4b:	83 ec 0c             	sub    esp,0xc
c001de4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de52:	e8 f4 19 ff ff       	call   c000f84b <malloc>
c001de57:	83 c4 10             	add    esp,0x10
c001de5a:	89 c3                	mov    ebx,eax
c001de5c:	83 ec 08             	sub    esp,0x8
c001de5f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de63:	53                   	push   ebx
c001de64:	e8 a5 31 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de70:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	50                   	push   eax
c001de84:	e8 bc 26 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001de89:	83 c4 10             	add    esp,0x10
c001de8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de90:	05 0c 01 00 00       	add    eax,0x10c
c001de95:	83 ec 08             	sub    esp,0x8
c001de98:	68 03 c7 02 c0       	push   0xc002c703
c001de9d:	50                   	push   eax
c001de9e:	e8 99 29 fe ff       	call   c000083c <strcpy>
c001dea3:	83 c4 10             	add    esp,0x10
c001dea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001deaa:	83 c0 0c             	add    eax,0xc
c001dead:	83 ec 08             	sub    esp,0x8
c001deb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001deb4:	50                   	push   eax
c001deb5:	e8 82 29 fe ff       	call   c000083c <strcpy>
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	83 ec 08             	sub    esp,0x8
c001dec0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dec4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dec8:	e8 1d fc ff ff       	call   c001daea <Process::addArgs(char**)>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	90                   	nop
c001ded1:	83 c4 24             	add    esp,0x24
c001ded4:	5b                   	pop    ebx
c001ded5:	5e                   	pop    esi
c001ded6:	c3                   	ret    

c001ded7 <disableIRQs()>:
c001ded7:	fa                   	cli    
c001ded8:	ff 05 ec 1e 03 c0    	inc    DWORD PTR ds:0xc0031eec
c001dede:	c3                   	ret    

c001dedf <getIRQNestingLevel()>:
c001dedf:	a1 ec 1e 03 c0       	mov    eax,ds:0xc0031eec
c001dee4:	c3                   	ret    

c001dee5 <enableIRQs()>:
c001dee5:	a1 ec 1e 03 c0       	mov    eax,ds:0xc0031eec
c001deea:	48                   	dec    eax
c001deeb:	a3 ec 1e 03 c0       	mov    ds:0xc0031eec,eax
c001def0:	75 01                	jne    c001def3 <enableIRQs()+0xe>
c001def2:	fb                   	sti    
c001def3:	c3                   	ret    

c001def4 <lockScheduler()>:
c001def4:	eb e1                	jmp    c001ded7 <disableIRQs()>

c001def6 <unlockScheduler()>:
c001def6:	eb ed                	jmp    c001dee5 <enableIRQs()>

c001def8 <userModeEntryPoint(void*)>:
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	e8 f6 ff ff ff       	call   c001def6 <unlockScheduler()>
c001df00:	fb                   	sti    
c001df01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df09:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df13:	83 c4 0c             	add    esp,0xc
c001df16:	e9 0f 24 fe ff       	jmp    c000032a <goToUsermode>

c001df1b <lockStuff()>:
c001df1b:	e8 b7 ff ff ff       	call   c001ded7 <disableIRQs()>
c001df20:	ff 05 e8 1e 03 c0    	inc    DWORD PTR ds:0xc0031ee8
c001df26:	c3                   	ret    

c001df27 <taskStartupFunction>:
c001df27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df2c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001df2f:	c3                   	ret    

c001df30 <updateTimeUsed()>:
c001df30:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c001df35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df3b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df42:	74 50                	je     c001df94 <updateTimeUsed()+0x64>
c001df44:	57                   	push   edi
c001df45:	56                   	push   esi
c001df46:	53                   	push   ebx
c001df47:	0f 31                	rdtsc  
c001df49:	89 c1                	mov    ecx,eax
c001df4b:	a3 28 1f 03 c0       	mov    ds:0xc0031f28,eax
c001df50:	2b 0d 18 1f 03 c0    	sub    ecx,DWORD PTR ds:0xc0031f18
c001df56:	89 d3                	mov    ebx,edx
c001df58:	89 0d 20 1f 03 c0    	mov    DWORD PTR ds:0xc0031f20,ecx
c001df5e:	1b 1d 1c 1f 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031f1c
c001df64:	a3 18 1f 03 c0       	mov    ds:0xc0031f18,eax
c001df69:	89 1d 24 1f 03 c0    	mov    DWORD PTR ds:0xc0031f24,ebx
c001df6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df74:	89 15 2c 1f 03 c0    	mov    DWORD PTR ds:0xc0031f2c,edx
c001df7a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df7d:	89 15 1c 1f 03 c0    	mov    DWORD PTR ds:0xc0031f1c,edx
c001df83:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df86:	01 f1                	add    ecx,esi
c001df88:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df8b:	11 fb                	adc    ebx,edi
c001df8d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df90:	5b                   	pop    ebx
c001df91:	5e                   	pop    esi
c001df92:	5f                   	pop    edi
c001df93:	c3                   	ret    
c001df94:	c3                   	ret    

c001df95 <switchToThread(ThreadControlBlock*)>:
c001df95:	53                   	push   ebx
c001df96:	83 ec 08             	sub    esp,0x8
c001df99:	a1 e8 1e 03 c0       	mov    eax,ds:0xc0031ee8
c001df9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfa2:	85 c0                	test   eax,eax
c001dfa4:	75 30                	jne    c001dfd6 <switchToThread(ThreadControlBlock*)+0x41>
c001dfa6:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dfa9:	3c ff                	cmp    al,0xff
c001dfab:	74 25                	je     c001dfd2 <switchToThread(ThreadControlBlock*)+0x3d>
c001dfad:	0f b6 d0             	movzx  edx,al
c001dfb0:	b8 84 03 00 00       	mov    eax,0x384
c001dfb5:	29 d0                	sub    eax,edx
c001dfb7:	c1 e0 10             	shl    eax,0x10
c001dfba:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dfbd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dfc0:	e8 6b ff ff ff       	call   c001df30 <updateTimeUsed()>
c001dfc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dfc9:	83 c4 08             	add    esp,0x8
c001dfcc:	5b                   	pop    ebx
c001dfcd:	e9 90 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dfd2:	31 c0                	xor    eax,eax
c001dfd4:	eb e7                	jmp    c001dfbd <switchToThread(ThreadControlBlock*)+0x28>
c001dfd6:	c7 05 e4 1e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ee4,0x1
c001dfe0:	83 c4 08             	add    esp,0x8
c001dfe3:	5b                   	pop    ebx
c001dfe4:	c3                   	ret    
c001dfe5:	90                   	nop

c001dfe6 <Semaphore::Semaphore(int)>:
c001dfe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfee:	89 10                	mov    DWORD PTR [eax],edx
c001dff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dff4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e00a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e011:	90                   	nop
c001e012:	c3                   	ret    
c001e013:	90                   	nop

c001e014 <Mutex::Mutex()>:
c001e014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e018:	6a 01                	push   0x1
c001e01a:	50                   	push   eax
c001e01b:	e8 c6 ff ff ff       	call   c001dfe6 <Semaphore::Semaphore(int)>
c001e020:	83 c4 08             	add    esp,0x8
c001e023:	90                   	nop
c001e024:	c3                   	ret    
c001e025:	90                   	nop

c001e026 <Process::createThread(void (*)(void*), void*, int)>:
c001e026:	55                   	push   ebp
c001e027:	31 c9                	xor    ecx,ecx
c001e029:	57                   	push   edi
c001e02a:	56                   	push   esi
c001e02b:	53                   	push   ebx
c001e02c:	83 ec 1c             	sub    esp,0x1c
c001e02f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e033:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e03a:	89 f2                	mov    edx,esi
c001e03c:	0f b7 c2             	movzx  eax,dx
c001e03f:	83 e2 01             	and    edx,0x1
c001e042:	74 16                	je     c001e05a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e044:	d1 f8                	sar    eax,1
c001e046:	41                   	inc    ecx
c001e047:	89 c2                	mov    edx,eax
c001e049:	83 f9 10             	cmp    ecx,0x10
c001e04c:	75 ee                	jne    c001e03c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e04e:	83 c4 1c             	add    esp,0x1c
c001e051:	31 db                	xor    ebx,ebx
c001e053:	89 d8                	mov    eax,ebx
c001e055:	5b                   	pop    ebx
c001e056:	5e                   	pop    esi
c001e057:	5f                   	pop    edi
c001e058:	5d                   	pop    ebp
c001e059:	c3                   	ret    
c001e05a:	b8 01 00 00 00       	mov    eax,0x1
c001e05f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e062:	d3 e0                	shl    eax,cl
c001e064:	09 c6                	or     esi,eax
c001e066:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e069:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e070:	89 c6                	mov    esi,eax
c001e072:	c1 e6 05             	shl    esi,0x5
c001e075:	01 f0                	add    eax,esi
c001e077:	01 d8                	add    eax,ebx
c001e079:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e080:	75 0a                	jne    c001e08c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e082:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e08c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e092:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e096:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e099:	01 ca                	add    edx,ecx
c001e09b:	83 ec 08             	sub    esp,0x8
c001e09e:	89 d0                	mov    eax,edx
c001e0a0:	c1 e0 05             	shl    eax,0x5
c001e0a3:	01 d0                	add    eax,edx
c001e0a5:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e0a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e0ad:	01 d8                	add    eax,ebx
c001e0af:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e0b5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e0bb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e0c1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e0c7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e0cd:	89 cd                	mov    ebp,ecx
c001e0cf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e0d3:	f7 dd                	neg    ebp
c001e0d5:	c1 e5 15             	shl    ebp,0x15
c001e0d8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e0de:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e0e4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e0ee:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e0f4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0fe:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e10c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e113:	53                   	push   ebx
c001e114:	68 08 1f 03 c0       	push   0xc0031f08
c001e119:	e8 62 ad 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e11e:	89 d8                	mov    eax,ebx
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	83 c4 1c             	add    esp,0x1c
c001e126:	5b                   	pop    ebx
c001e127:	5e                   	pop    esi
c001e128:	5f                   	pop    edi
c001e129:	5d                   	pop    ebp
c001e12a:	c3                   	ret    
c001e12b:	90                   	nop

c001e12c <Process::createUserThread()>:
c001e12c:	83 ec 0c             	sub    esp,0xc
c001e12f:	68 80 00 00 00       	push   0x80
c001e134:	6a 00                	push   0x0
c001e136:	68 f8 de 01 c0       	push   0xc001def8
c001e13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e13f:	e8 e2 fe ff ff       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c001e144:	83 c4 1c             	add    esp,0x1c
c001e147:	c3                   	ret    

c001e148 <setupMultitasking(void (*)())>:
c001e148:	56                   	push   esi
c001e149:	53                   	push   ebx
c001e14a:	51                   	push   ecx
c001e14b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e14f:	eb 10                	jmp    c001e161 <setupMultitasking(void (*)())+0x19>
c001e151:	83 ec 0c             	sub    esp,0xc
c001e154:	68 08 1f 03 c0       	push   0xc0031f08
c001e159:	e8 74 ac 00 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e15e:	83 c4 10             	add    esp,0x10
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	68 08 1f 03 c0       	push   0xc0031f08
c001e169:	e8 48 ac 00 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	84 c0                	test   al,al
c001e173:	74 dc                	je     c001e151 <setupMultitasking(void (*)())+0x9>
c001e175:	83 ec 0c             	sub    esp,0xc
c001e178:	68 3f 07 00 00       	push   0x73f
c001e17d:	e8 c9 16 ff ff       	call   c000f84b <malloc>
c001e182:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e189:	89 c3                	mov    ebx,eax
c001e18b:	6a 00                	push   0x0
c001e18d:	68 07 c7 02 c0       	push   0xc002c707
c001e192:	6a 01                	push   0x1
c001e194:	50                   	push   eax
c001e195:	e8 8e fb ff ff       	call   c001dd28 <Process::Process(bool, char const*, Process*, char**)>
c001e19a:	83 c4 18             	add    esp,0x18
c001e19d:	89 1d 14 1f 03 c0    	mov    DWORD PTR ds:0xc0031f14,ebx
c001e1a3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e1a9:	68 58 c8 02 c0       	push   0xc002c858
c001e1ae:	e8 10 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e1b3:	58                   	pop    eax
c001e1b4:	5a                   	pop    edx
c001e1b5:	6a 63                	push   0x63
c001e1b7:	68 8c c8 02 c0       	push   0xc002c88c
c001e1bc:	e8 02 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e1c1:	59                   	pop    ecx
c001e1c2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e1c8:	e8 49 2a ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001e1cd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e1d5:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e1df:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e1e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e1e8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e1f2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e1f8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e1fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e208:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e212:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e21c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e222:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e22c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e232:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e23c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e242:	58                   	pop    eax
c001e243:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e249:	5a                   	pop    edx
c001e24a:	68 03 c7 02 c0       	push   0xc002c703
c001e24f:	50                   	push   eax
c001e250:	e8 e7 25 fe ff       	call   c000083c <strcpy>
c001e255:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e25c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e260:	83 c4 14             	add    esp,0x14
c001e263:	5b                   	pop    ebx
c001e264:	5e                   	pop    esi
c001e265:	e9 ea 20 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e26a <schedule()>:
c001e26a:	a1 e8 1e 03 c0       	mov    eax,ds:0xc0031ee8
c001e26f:	85 c0                	test   eax,eax
c001e271:	74 0b                	je     c001e27e <schedule()+0x14>
c001e273:	c7 05 e4 1e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ee4,0x1
c001e27d:	c3                   	ret    
c001e27e:	53                   	push   ebx
c001e27f:	83 ec 14             	sub    esp,0x14
c001e282:	68 08 1f 03 c0       	push   0xc0031f08
c001e287:	e8 2a ab 00 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	84 c0                	test   al,al
c001e291:	75 38                	jne    c001e2cb <schedule()+0x61>
c001e293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e298:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e29b:	4a                   	dec    edx
c001e29c:	74 32                	je     c001e2d0 <schedule()+0x66>
c001e29e:	83 ec 0c             	sub    esp,0xc
c001e2a1:	68 08 1f 03 c0       	push   0xc0031f08
c001e2a6:	e8 03 ab 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2ab:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e2b2:	89 c3                	mov    ebx,eax
c001e2b4:	e8 19 ab 00 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2b9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e2c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2c3:	e8 cd fc ff ff       	call   c001df95 <switchToThread(ThreadControlBlock*)>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	83 c4 08             	add    esp,0x8
c001e2ce:	5b                   	pop    ebx
c001e2cf:	c3                   	ret    
c001e2d0:	83 ec 08             	sub    esp,0x8
c001e2d3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e2da:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2e0:	68 08 1f 03 c0       	push   0xc0031f08
c001e2e5:	e8 96 ab 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	eb af                	jmp    c001e29e <schedule()+0x34>

c001e2ef <unlockStuff()>:
c001e2ef:	a1 e8 1e 03 c0       	mov    eax,ds:0xc0031ee8
c001e2f4:	48                   	dec    eax
c001e2f5:	a3 e8 1e 03 c0       	mov    ds:0xc0031ee8,eax
c001e2fa:	75 09                	jne    c001e305 <unlockStuff()+0x16>
c001e2fc:	a1 e4 1e 03 c0       	mov    eax,ds:0xc0031ee4
c001e301:	85 c0                	test   eax,eax
c001e303:	75 05                	jne    c001e30a <unlockStuff()+0x1b>
c001e305:	e9 db fb ff ff       	jmp    c001dee5 <enableIRQs()>
c001e30a:	83 ec 0c             	sub    esp,0xc
c001e30d:	c7 05 e4 1e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ee4,0x0
c001e317:	e8 4e ff ff ff       	call   c001e26a <schedule()>
c001e31c:	83 c4 0c             	add    esp,0xc
c001e31f:	e9 c1 fb ff ff       	jmp    c001dee5 <enableIRQs()>

c001e324 <Semaphore::tryAcquire()>:
c001e324:	83 ec 0c             	sub    esp,0xc
c001e327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32b:	e8 eb fb ff ff       	call   c001df1b <lockStuff()>
c001e330:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e333:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e335:	7c 0b                	jl     c001e342 <Semaphore::tryAcquire()+0x1e>
c001e337:	e8 b3 ff ff ff       	call   c001e2ef <unlockStuff()>
c001e33c:	31 c0                	xor    eax,eax
c001e33e:	83 c4 0c             	add    esp,0xc
c001e341:	c3                   	ret    
c001e342:	42                   	inc    edx
c001e343:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e346:	e8 a4 ff ff ff       	call   c001e2ef <unlockStuff()>
c001e34b:	b0 01                	mov    al,0x1
c001e34d:	83 c4 0c             	add    esp,0xc
c001e350:	c3                   	ret    
c001e351:	90                   	nop

c001e352 <Semaphore::assertLocked(char const*)>:
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e359:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e35d:	e8 b9 fb ff ff       	call   c001df1b <lockStuff()>
c001e362:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e364:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e367:	7c 05                	jl     c001e36e <Semaphore::assertLocked(char const*)+0x1c>
c001e369:	83 c4 0c             	add    esp,0xc
c001e36c:	eb 81                	jmp    c001e2ef <unlockStuff()>
c001e36e:	83 ec 0c             	sub    esp,0xc
c001e371:	52                   	push   edx
c001e372:	e8 e0 c2 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	83 c4 0c             	add    esp,0xc
c001e37d:	e9 6d ff ff ff       	jmp    c001e2ef <unlockStuff()>

c001e382 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e382:	83 ec 0c             	sub    esp,0xc
c001e385:	e8 55 fb ff ff       	call   c001dedf <getIRQNestingLevel()>
c001e38a:	83 ec 08             	sub    esp,0x8
c001e38d:	50                   	push   eax
c001e38e:	68 b0 c8 02 c0       	push   0xc002c8b0
c001e393:	e8 2b 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e398:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e39c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3a4:	e8 c1 fe ff ff       	call   c001e26a <schedule()>
c001e3a9:	e8 48 fb ff ff       	call   c001def6 <unlockScheduler()>
c001e3ae:	e8 2c fb ff ff       	call   c001dedf <getIRQNestingLevel()>
c001e3b3:	5a                   	pop    edx
c001e3b4:	59                   	pop    ecx
c001e3b5:	50                   	push   eax
c001e3b6:	68 e4 c8 02 c0       	push   0xc002c8e4
c001e3bb:	e8 03 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e3c0:	83 c4 1c             	add    esp,0x1c
c001e3c3:	c3                   	ret    

c001e3c4 <blockTask(TaskState)>:
c001e3c4:	83 ec 0c             	sub    esp,0xc
c001e3c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3cb:	e8 24 fb ff ff       	call   c001def4 <lockScheduler()>
c001e3d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3d8:	e8 8d fe ff ff       	call   c001e26a <schedule()>
c001e3dd:	83 c4 0c             	add    esp,0xc
c001e3e0:	e9 11 fb ff ff       	jmp    c001def6 <unlockScheduler()>

c001e3e5 <waitTask(int, int*, int)>:
c001e3e5:	83 ec 18             	sub    esp,0x18
c001e3e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3f1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e3f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e3f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3fd:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e400:	6a 07                	push   0x7
c001e402:	e8 bd ff ff ff       	call   c001e3c4 <blockTask(TaskState)>
c001e407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e412:	85 d2                	test   edx,edx
c001e414:	74 0a                	je     c001e420 <waitTask(int, int*, int)+0x3b>
c001e416:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e419:	89 02                	mov    DWORD PTR [edx],eax
c001e41b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e420:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e423:	83 c4 0c             	add    esp,0xc
c001e426:	c3                   	ret    

c001e427 <nanoSleepUntil(unsigned long long)>:
c001e427:	83 ec 0c             	sub    esp,0xc
c001e42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e432:	3b 05 30 f0 02 c0    	cmp    eax,DWORD PTR ds:0xc002f030
c001e438:	89 d1                	mov    ecx,edx
c001e43a:	1b 0d 34 f0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f034
c001e440:	73 04                	jae    c001e446 <nanoSleepUntil(unsigned long long)+0x1f>
c001e442:	83 c4 0c             	add    esp,0xc
c001e445:	c3                   	ret    
c001e446:	e8 d0 fa ff ff       	call   c001df1b <lockStuff()>
c001e44b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e451:	83 ec 08             	sub    esp,0x8
c001e454:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e457:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e45a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e460:	68 fc 1e 03 c0       	push   0xc0031efc
c001e465:	e8 16 aa 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e46a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e471:	e8 4e ff ff ff       	call   c001e3c4 <blockTask(TaskState)>
c001e476:	83 c4 1c             	add    esp,0x1c
c001e479:	e9 71 fe ff ff       	jmp    c001e2ef <unlockStuff()>

c001e47e <nanoSleep(unsigned long long)>:
c001e47e:	a1 30 f0 02 c0       	mov    eax,ds:0xc002f030
c001e483:	8b 15 34 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f034
c001e489:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e48d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e491:	eb 94                	jmp    c001e427 <nanoSleepUntil(unsigned long long)>

c001e493 <sleep(unsigned long long)>:
c001e493:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e49b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e4a0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e4a4:	01 ca                	add    edx,ecx
c001e4a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e4aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e4ae:	eb ce                	jmp    c001e47e <nanoSleep(unsigned long long)>

c001e4b0 <Semaphore::acquire()>:
c001e4b0:	83 ec 0c             	sub    esp,0xc
c001e4b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b7:	e8 5f fa ff ff       	call   c001df1b <lockStuff()>
c001e4bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e4bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e4c1:	7d 0c                	jge    c001e4cf <Semaphore::acquire()+0x1f>
c001e4c3:	42                   	inc    edx
c001e4c4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e4c7:	83 c4 0c             	add    esp,0xc
c001e4ca:	e9 20 fe ff ff       	jmp    c001e2ef <unlockStuff()>
c001e4cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4d5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e4dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e4df:	85 d2                	test   edx,edx
c001e4e1:	74 2a                	je     c001e50d <Semaphore::acquire()+0x5d>
c001e4e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e4e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e4ec:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e4ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4fb:	6a 05                	push   0x5
c001e4fd:	e8 c2 fe ff ff       	call   c001e3c4 <blockTask(TaskState)>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	83 c4 0c             	add    esp,0xc
c001e508:	e9 e2 fd ff ff       	jmp    c001e2ef <unlockStuff()>
c001e50d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e513:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e516:	eb d7                	jmp    c001e4ef <Semaphore::acquire()+0x3f>

c001e518 <taskReturned>:
c001e518:	83 ec 18             	sub    esp,0x18
c001e51b:	68 18 c9 02 c0       	push   0xc002c918
c001e520:	e8 32 c1 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001e525:	83 c4 10             	add    esp,0x10
c001e528:	83 ec 0c             	sub    esp,0xc
c001e52b:	6a 02                	push   0x2
c001e52d:	e8 92 fe ff ff       	call   c001e3c4 <blockTask(TaskState)>
c001e532:	e8 bd f9 ff ff       	call   c001def4 <lockScheduler()>
c001e537:	e8 2e fd ff ff       	call   c001e26a <schedule()>
c001e53c:	e8 b5 f9 ff ff       	call   c001def6 <unlockScheduler()>
c001e541:	83 c4 10             	add    esp,0x10
c001e544:	eb e2                	jmp    c001e528 <taskReturned+0x10>

c001e546 <Thr::processFromPID(int)>:
c001e546:	57                   	push   edi
c001e547:	56                   	push   esi
c001e548:	53                   	push   ebx
c001e549:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e54d:	83 ec 0c             	sub    esp,0xc
c001e550:	68 0e c7 02 c0       	push   0xc002c70e
c001e555:	e8 69 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e55a:	e8 95 f9 ff ff       	call   c001def4 <lockScheduler()>
c001e55f:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e566:	e8 43 a8 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e56b:	83 c4 10             	add    esp,0x10
c001e56e:	89 c7                	mov    edi,eax
c001e570:	eb 14                	jmp    c001e586 <Thr::processFromPID(int)+0x40>
c001e572:	83 ec 0c             	sub    esp,0xc
c001e575:	68 08 1f 03 c0       	push   0xc0031f08
c001e57a:	e8 2f a8 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e57f:	83 c4 10             	add    esp,0x10
c001e582:	39 f8                	cmp    eax,edi
c001e584:	74 3e                	je     c001e5c4 <Thr::processFromPID(int)+0x7e>
c001e586:	83 ec 0c             	sub    esp,0xc
c001e589:	68 08 1f 03 c0       	push   0xc0031f08
c001e58e:	e8 1b a8 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e593:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e59a:	89 c3                	mov    ebx,eax
c001e59c:	e8 31 a8 00 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5a1:	58                   	pop    eax
c001e5a2:	5a                   	pop    edx
c001e5a3:	53                   	push   ebx
c001e5a4:	68 08 1f 03 c0       	push   0xc0031f08
c001e5a9:	e8 d2 a8 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	39 30                	cmp    DWORD PTR [eax],esi
c001e5b6:	75 ba                	jne    c001e572 <Thr::processFromPID(int)+0x2c>
c001e5b8:	e8 39 f9 ff ff       	call   c001def6 <unlockScheduler()>
c001e5bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c0:	5b                   	pop    ebx
c001e5c1:	5e                   	pop    esi
c001e5c2:	5f                   	pop    edi
c001e5c3:	c3                   	ret    
c001e5c4:	e8 2d f9 ff ff       	call   c001def6 <unlockScheduler()>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 29 c7 02 c0       	push   0xc002c729
c001e5d1:	e8 ed 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	31 c0                	xor    eax,eax
c001e5db:	5b                   	pop    ebx
c001e5dc:	5e                   	pop    esi
c001e5dd:	5f                   	pop    edi
c001e5de:	c3                   	ret    

c001e5df <unblockTask(ThreadControlBlock*)>:
c001e5df:	53                   	push   ebx
c001e5e0:	83 ec 08             	sub    esp,0x8
c001e5e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5e7:	e8 08 f9 ff ff       	call   c001def4 <lockScheduler()>
c001e5ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5ef:	85 c0                	test   eax,eax
c001e5f1:	74 5c                	je     c001e64f <unblockTask(ThreadControlBlock*)+0x70>
c001e5f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5f6:	48                   	dec    eax
c001e5f7:	74 31                	je     c001e62a <unblockTask(ThreadControlBlock*)+0x4b>
c001e5f9:	83 ec 0c             	sub    esp,0xc
c001e5fc:	68 08 1f 03 c0       	push   0xc0031f08
c001e601:	e8 a8 a7 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	85 c0                	test   eax,eax
c001e60b:	75 17                	jne    c001e624 <unblockTask(ThreadControlBlock*)+0x45>
c001e60d:	eb 65                	jmp    c001e674 <unblockTask(ThreadControlBlock*)+0x95>
c001e60f:	83 ec 08             	sub    esp,0x8
c001e612:	50                   	push   eax
c001e613:	68 08 1f 03 c0       	push   0xc0031f08
c001e618:	e8 4b ab 00 00       	call   c0029168 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e61d:	83 c4 10             	add    esp,0x10
c001e620:	85 c0                	test   eax,eax
c001e622:	74 50                	je     c001e674 <unblockTask(ThreadControlBlock*)+0x95>
c001e624:	39 c3                	cmp    ebx,eax
c001e626:	75 e7                	jne    c001e60f <unblockTask(ThreadControlBlock*)+0x30>
c001e628:	eb 1c                	jmp    c001e646 <unblockTask(ThreadControlBlock*)+0x67>
c001e62a:	83 ec 0c             	sub    esp,0xc
c001e62d:	68 08 ca 02 c0       	push   0xc002ca08
c001e632:	e8 8c 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e637:	c7 04 24 94 c9 02 c0 	mov    DWORD PTR [esp],0xc002c994
c001e63e:	e8 80 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e643:	83 c4 10             	add    esp,0x10
c001e646:	83 c4 08             	add    esp,0x8
c001e649:	5b                   	pop    ebx
c001e64a:	e9 a7 f8 ff ff       	jmp    c001def6 <unlockScheduler()>
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	68 4c c9 02 c0       	push   0xc002c94c
c001e657:	e8 67 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e65c:	c7 04 24 94 c9 02 c0 	mov    DWORD PTR [esp],0xc002c994
c001e663:	e8 5b 47 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e668:	83 c4 10             	add    esp,0x10
c001e66b:	83 c4 08             	add    esp,0x8
c001e66e:	5b                   	pop    ebx
c001e66f:	e9 82 f8 ff ff       	jmp    c001def6 <unlockScheduler()>
c001e674:	83 ec 08             	sub    esp,0x8
c001e677:	53                   	push   ebx
c001e678:	68 08 1f 03 c0       	push   0xc0031f08
c001e67d:	e8 fe a7 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e682:	83 c4 10             	add    esp,0x10
c001e685:	83 c4 08             	add    esp,0x8
c001e688:	5b                   	pop    ebx
c001e689:	e9 68 f8 ff ff       	jmp    c001def6 <unlockScheduler()>

c001e68e <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e68e:	55                   	push   ebp
c001e68f:	57                   	push   edi
c001e690:	56                   	push   esi
c001e691:	53                   	push   ebx
c001e692:	83 ec 1c             	sub    esp,0x1c
c001e695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e699:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e69c:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e6a2:	85 ff                	test   edi,edi
c001e6a4:	7e 20                	jle    c001e6c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e6a6:	31 f6                	xor    esi,esi
c001e6a8:	83 ec 0c             	sub    esp,0xc
c001e6ab:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e6b2:	46                   	inc    esi
c001e6b3:	e8 a3 11 ff ff       	call   c000f85b <free>
c001e6b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e6c4:	7f e2                	jg     c001e6a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e6c6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e6d0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e6d5:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e6d8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e6db:	d3 c0                	rol    eax,cl
c001e6dd:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e6e4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6e7:	89 f7                	mov    edi,esi
c001e6e9:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e6f1:	0f 85 74 01 00 00    	jne    c001e86b <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e6f7:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e6fd:	85 ed                	test   ebp,ebp
c001e6ff:	74 1b                	je     c001e71c <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e701:	83 ec 0c             	sub    esp,0xc
c001e704:	55                   	push   ebp
c001e705:	e8 ba bc ff ff       	call   c001a3c4 <EnvVarContainer::~EnvVarContainer()>
c001e70a:	59                   	pop    ecx
c001e70b:	5e                   	pop    esi
c001e70c:	6a 0c                	push   0xc
c001e70e:	55                   	push   ebp
c001e70f:	e8 cf 45 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e714:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e717:	83 c4 10             	add    esp,0x10
c001e71a:	89 f7                	mov    edi,esi
c001e71c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e722:	85 c0                	test   eax,eax
c001e724:	0f 84 aa 00 00 00    	je     c001e7d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e72a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e72d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e731:	31 c9                	xor    ecx,ecx
c001e733:	eb 10                	jmp    c001e745 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e735:	41                   	inc    ecx
c001e736:	83 f9 10             	cmp    ecx,0x10
c001e739:	0f 84 95 00 00 00    	je     c001e7d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e73f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e745:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e74c:	d3 fa                	sar    edx,cl
c001e74e:	83 e2 01             	and    edx,0x1
c001e751:	74 e2                	je     c001e735 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e753:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e756:	01 ca                	add    edx,ecx
c001e758:	89 d5                	mov    ebp,edx
c001e75a:	c1 e5 05             	shl    ebp,0x5
c001e75d:	01 ea                	add    edx,ebp
c001e75f:	01 d0                	add    eax,edx
c001e761:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e767:	83 fd 07             	cmp    ebp,0x7
c001e76a:	75 c9                	jne    c001e735 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e76c:	05 40 02 00 00       	add    eax,0x240
c001e771:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e774:	83 fd ff             	cmp    ebp,0xffffffff
c001e777:	0f 8c 08 01 00 00    	jl     c001e885 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e77d:	0f 84 b9 01 00 00    	je     c001e93c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e783:	85 ed                	test   ebp,ebp
c001e785:	0f 84 a0 01 00 00    	je     c001e92b <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e78b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e78d:	75 a6                	jne    c001e735 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e78f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e795:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e799:	01 d0                	add    eax,edx
c001e79b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e79f:	83 ec 0c             	sub    esp,0xc
c001e7a2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e7a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7ab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e7b1:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e7b8:	50                   	push   eax
c001e7b9:	e8 21 fe ff ff       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7c8:	89 f7                	mov    edi,esi
c001e7ca:	41                   	inc    ecx
c001e7cb:	83 f9 10             	cmp    ecx,0x10
c001e7ce:	0f 85 6b ff ff ff    	jne    c001e73f <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e7d4:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e7da:	85 c0                	test   eax,eax
c001e7dc:	74 5d                	je     c001e83b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e7de:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e7e4:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e7ea:	74 4f                	je     c001e83b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 08 1f 03 c0       	push   0xc0031f08
c001e7f4:	e8 b5 a5 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7f9:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e800:	89 c7                	mov    edi,eax
c001e802:	e8 af a5 00 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e807:	83 c4 10             	add    esp,0x10
c001e80a:	84 c0                	test   al,al
c001e80c:	0f 84 e4 00 00 00    	je     c001e8f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e812:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e815:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e81b:	85 d2                	test   edx,edx
c001e81d:	74 0f                	je     c001e82e <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e81f:	83 ec 0c             	sub    esp,0xc
c001e822:	8b 02                	mov    eax,DWORD PTR [edx]
c001e824:	52                   	push   edx
c001e825:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e828:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e838:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e83b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e841:	85 db                	test   ebx,ebx
c001e843:	74 16                	je     c001e85b <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e845:	83 ec 0c             	sub    esp,0xc
c001e848:	53                   	push   ebx
c001e849:	e8 62 38 ff ff       	call   c00120b0 <VAS::~VAS()>
c001e84e:	58                   	pop    eax
c001e84f:	5a                   	pop    edx
c001e850:	6a 14                	push   0x14
c001e852:	53                   	push   ebx
c001e853:	e8 8b 44 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e858:	83 c4 10             	add    esp,0x10
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	68 40 c7 02 c0       	push   0xc002c740
c001e863:	e8 5b 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e868:	83 c4 10             	add    esp,0x10
c001e86b:	83 ec 08             	sub    esp,0x8
c001e86e:	68 3f 07 00 00       	push   0x73f
c001e873:	68 4e c7 02 c0       	push   0xc002c74e
c001e878:	e8 46 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e87d:	83 c4 2c             	add    esp,0x2c
c001e880:	5b                   	pop    ebx
c001e881:	5e                   	pop    esi
c001e882:	5f                   	pop    edi
c001e883:	5d                   	pop    ebp
c001e884:	c3                   	ret    
c001e885:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e889:	83 ec 0c             	sub    esp,0xc
c001e88c:	68 4c ca 02 c0       	push   0xc002ca4c
c001e891:	e8 c1 bd ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001e896:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e899:	83 c4 10             	add    esp,0x10
c001e89c:	89 f7                	mov    edi,esi
c001e89e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8a2:	e9 8e fe ff ff       	jmp    c001e735 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e8ad:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e8b3:	75 1c                	jne    c001e8d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8b5:	83 ec 0c             	sub    esp,0xc
c001e8b8:	68 b4 ca 02 c0       	push   0xc002cab4
c001e8bd:	e8 01 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e8c2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e8c9:	e8 f6 fa ff ff       	call   c001e3c4 <blockTask(TaskState)>
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	83 ec 08             	sub    esp,0x8
c001e8d4:	56                   	push   esi
c001e8d5:	68 08 1f 03 c0       	push   0xc0031f08
c001e8da:	e8 a1 a5 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8df:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e8e6:	e8 c3 a4 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	39 f8                	cmp    eax,edi
c001e8f0:	0f 84 1c ff ff ff    	je     c001e812 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e8f6:	83 ec 0c             	sub    esp,0xc
c001e8f9:	68 08 1f 03 c0       	push   0xc0031f08
c001e8fe:	e8 ab a4 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e903:	c7 04 24 08 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f08
c001e90a:	89 c6                	mov    esi,eax
c001e90c:	e8 c1 a4 00 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	39 f3                	cmp    ebx,esi
c001e916:	74 b9                	je     c001e8d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e918:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e91b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e91e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e924:	75 ab                	jne    c001e8d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e926:	e9 7c ff ff ff       	jmp    c001e8a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e92b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e92f:	83 ec 0c             	sub    esp,0xc
c001e932:	68 80 ca 02 c0       	push   0xc002ca80
c001e937:	e9 55 ff ff ff       	jmp    c001e891 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e93c:	8b 36                	mov    esi,DWORD PTR [esi]
c001e93e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e942:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e945:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e948:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e94e:	01 d7                	add    edi,edx
c001e950:	89 f8                	mov    eax,edi
c001e952:	e9 44 fe ff ff       	jmp    c001e79b <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e957 <cleanerTaskFunction(void*)>:
c001e957:	53                   	push   ebx
c001e958:	83 ec 08             	sub    esp,0x8
c001e95b:	e8 96 f5 ff ff       	call   c001def6 <unlockScheduler()>
c001e960:	e8 8f f5 ff ff       	call   c001def4 <lockScheduler()>
c001e965:	80 3d cc 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031ecc,0x0
c001e96c:	0f 85 8e 00 00 00    	jne    c001ea00 <cleanerTaskFunction(void*)+0xa9>
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	6a 02                	push   0x2
c001e977:	e8 06 fa ff ff       	call   c001e382 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	c6 05 cc 1e 03 c0 00 	mov    BYTE PTR ds:0xc0031ecc,0x0
c001e986:	e8 90 f5 ff ff       	call   c001df1b <lockStuff()>
c001e98b:	e8 64 f5 ff ff       	call   c001def4 <lockScheduler()>
c001e990:	83 ec 0c             	sub    esp,0xc
c001e993:	68 f0 1e 03 c0       	push   0xc0031ef0
c001e998:	e8 19 a4 00 00       	call   c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	84 c0                	test   al,al
c001e9a2:	75 40                	jne    c001e9e4 <cleanerTaskFunction(void*)+0x8d>
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	68 f0 1e 03 c0       	push   0xc0031ef0
c001e9ac:	e8 fd a3 00 00       	call   c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e9b1:	c7 04 24 f0 1e 03 c0 	mov    DWORD PTR [esp],0xc0031ef0
c001e9b8:	89 c3                	mov    ebx,eax
c001e9ba:	e8 13 a4 00 00       	call   c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e9bf:	c7 04 24 64 c7 02 c0 	mov    DWORD PTR [esp],0xc002c764
c001e9c6:	e8 f8 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e9ce:	e8 bb fc ff ff       	call   c001e68e <cleanupTerminatedTask(ThreadControlBlock*)>
c001e9d3:	c7 04 24 7d c7 02 c0 	mov    DWORD PTR [esp],0xc002c77d
c001e9da:	e8 e4 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	eb ac                	jmp    c001e990 <cleanerTaskFunction(void*)+0x39>
c001e9e4:	e8 0d f5 ff ff       	call   c001def6 <unlockScheduler()>
c001e9e9:	e8 01 f9 ff ff       	call   c001e2ef <unlockStuff()>
c001e9ee:	e8 01 f5 ff ff       	call   c001def4 <lockScheduler()>
c001e9f3:	80 3d cc 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031ecc,0x0
c001e9fa:	0f 84 72 ff ff ff    	je     c001e972 <cleanerTaskFunction(void*)+0x1b>
c001ea00:	e8 f1 f4 ff ff       	call   c001def6 <unlockScheduler()>
c001ea05:	e9 75 ff ff ff       	jmp    c001e97f <cleanerTaskFunction(void*)+0x28>

c001ea0a <terminateTask(int)>:
c001ea0a:	83 ec 14             	sub    esp,0x14
c001ea0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ea15:	83 c0 0c             	add    eax,0xc
c001ea18:	50                   	push   eax
c001ea19:	68 dc ca 02 c0       	push   0xc002cadc
c001ea1e:	e8 a0 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ea23:	e8 f3 f4 ff ff       	call   c001df1b <lockStuff()>
c001ea28:	e8 c7 f4 ff ff       	call   c001def4 <lockScheduler()>
c001ea2d:	c7 04 24 90 c7 02 c0 	mov    DWORD PTR [esp],0xc002c790
c001ea34:	e8 8a 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ea39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea42:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea4d:	5a                   	pop    edx
c001ea4e:	59                   	pop    ecx
c001ea4f:	50                   	push   eax
c001ea50:	68 f0 1e 03 c0       	push   0xc0031ef0
c001ea55:	e8 26 a4 00 00       	call   c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea5f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea66:	c7 04 24 aa c7 02 c0 	mov    DWORD PTR [esp],0xc002c7aa
c001ea6d:	e8 51 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ea72:	83 c4 10             	add    esp,0x10
c001ea75:	a1 c8 1e 03 c0       	mov    eax,ds:0xc0031ec8
c001ea7a:	85 c0                	test   eax,eax
c001ea7c:	74 5a                	je     c001ead8 <terminateTask(int)+0xce>
c001ea7e:	83 ec 0c             	sub    esp,0xc
c001ea81:	68 c4 c7 02 c0       	push   0xc002c7c4
c001ea86:	e8 38 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ea8b:	58                   	pop    eax
c001ea8c:	c6 05 cc 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031ecc,0x1
c001ea93:	ff 35 c8 1e 03 c0    	push   DWORD PTR ds:0xc0031ec8
c001ea99:	e8 41 fb ff ff       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c001ea9e:	c7 04 24 de c7 02 c0 	mov    DWORD PTR [esp],0xc002c7de
c001eaa5:	e8 19 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	e8 44 f4 ff ff       	call   c001def6 <unlockScheduler()>
c001eab2:	e8 38 f8 ff ff       	call   c001e2ef <unlockStuff()>
c001eab7:	83 ec 0c             	sub    esp,0xc
c001eaba:	68 16 c8 02 c0       	push   0xc002c816
c001eabf:	e8 ff 42 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001eac4:	83 c4 10             	add    esp,0x10
c001eac7:	e8 28 f4 ff ff       	call   c001def4 <lockScheduler()>
c001eacc:	e8 99 f7 ff ff       	call   c001e26a <schedule()>
c001ead1:	e8 20 f4 ff ff       	call   c001def6 <unlockScheduler()>
c001ead6:	eb ef                	jmp    c001eac7 <terminateTask(int)+0xbd>
c001ead8:	83 ec 0c             	sub    esp,0xc
c001eadb:	68 f8 c7 02 c0       	push   0xc002c7f8
c001eae0:	e8 de 42 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001eae5:	83 c4 10             	add    esp,0x10
c001eae8:	eb c3                	jmp    c001eaad <terminateTask(int)+0xa3>

c001eaea <Thr::terminateFromIRQ(int)>:
c001eaea:	83 ec 18             	sub    esp,0x18
c001eaed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaf1:	e8 14 ff ff ff       	call   c001ea0a <terminateTask(int)>

c001eaf6 <Semaphore::release()>:
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafd:	e8 19 f4 ff ff       	call   c001df1b <lockStuff()>
c001eb02:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001eb05:	85 d2                	test   edx,edx
c001eb07:	74 1a                	je     c001eb23 <Semaphore::release()+0x2d>
c001eb09:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001eb12:	52                   	push   edx
c001eb13:	e8 c7 fa ff ff       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	83 c4 0c             	add    esp,0xc
c001eb1e:	e9 cc f7 ff ff       	jmp    c001e2ef <unlockStuff()>
c001eb23:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001eb26:	83 c4 0c             	add    esp,0xc
c001eb29:	e9 c1 f7 ff ff       	jmp    c001e2ef <unlockStuff()>

c001eb2e <__static_initialization_and_destruction_0(int, int)>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eb36:	0f 85 88 00 00 00    	jne    c001ebc4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001eb3c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001eb44:	75 7e                	jne    c001ebc4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001eb46:	83 ec 0c             	sub    esp,0xc
c001eb49:	68 08 1f 03 c0       	push   0xc0031f08
c001eb4e:	e8 bd a5 00 00       	call   c0029110 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	83 ec 04             	sub    esp,0x4
c001eb59:	68 c4 d8 02 c0       	push   0xc002d8c4
c001eb5e:	68 08 1f 03 c0       	push   0xc0031f08
c001eb63:	68 c4 90 02 c0       	push   0xc00290c4
c001eb68:	e8 f0 40 ff ff       	call   c0012c5d <__cxa_atexit>
c001eb6d:	83 c4 10             	add    esp,0x10
c001eb70:	83 ec 0c             	sub    esp,0xc
c001eb73:	68 fc 1e 03 c0       	push   0xc0031efc
c001eb78:	e8 93 a5 00 00       	call   c0029110 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	83 ec 04             	sub    esp,0x4
c001eb83:	68 c4 d8 02 c0       	push   0xc002d8c4
c001eb88:	68 fc 1e 03 c0       	push   0xc0031efc
c001eb8d:	68 c4 90 02 c0       	push   0xc00290c4
c001eb92:	e8 c6 40 ff ff       	call   c0012c5d <__cxa_atexit>
c001eb97:	83 c4 10             	add    esp,0x10
c001eb9a:	83 ec 0c             	sub    esp,0xc
c001eb9d:	68 f0 1e 03 c0       	push   0xc0031ef0
c001eba2:	e8 69 a5 00 00       	call   c0029110 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eba7:	83 c4 10             	add    esp,0x10
c001ebaa:	83 ec 04             	sub    esp,0x4
c001ebad:	68 c4 d8 02 c0       	push   0xc002d8c4
c001ebb2:	68 f0 1e 03 c0       	push   0xc0031ef0
c001ebb7:	68 c4 90 02 c0       	push   0xc00290c4
c001ebbc:	e8 9c 40 ff ff       	call   c0012c5d <__cxa_atexit>
c001ebc1:	83 c4 10             	add    esp,0x10
c001ebc4:	90                   	nop
c001ebc5:	83 c4 0c             	add    esp,0xc
c001ebc8:	c3                   	ret    

c001ebc9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ebc9:	83 ec 0c             	sub    esp,0xc
c001ebcc:	83 ec 08             	sub    esp,0x8
c001ebcf:	68 ff ff 00 00       	push   0xffff
c001ebd4:	6a 01                	push   0x1
c001ebd6:	e8 53 ff ff ff       	call   c001eb2e <__static_initialization_and_destruction_0(int, int)>
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	83 c4 0c             	add    esp,0xc
c001ebe1:	c3                   	ret    

c001ebe2 <Vm::inbv(unsigned short)>:
c001ebe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ebe6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ebeb:	75 06                	jne    c001ebf3 <Vm::inbv(unsigned short)+0x11>
c001ebed:	a0 4c 1f 03 c0       	mov    al,ds:0xc0031f4c
c001ebf2:	c3                   	ret    
c001ebf3:	ec                   	in     al,dx
c001ebf4:	c3                   	ret    

c001ebf5 <Vm::outbv(unsigned short, unsigned char)>:
c001ebf5:	53                   	push   ebx
c001ebf6:	83 ec 08             	sub    esp,0x8
c001ebf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebfd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec01:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec06:	75 38                	jne    c001ec40 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ec08:	0f b6 c3             	movzx  eax,bl
c001ec0b:	51                   	push   ecx
c001ec0c:	51                   	push   ecx
c001ec0d:	50                   	push   eax
c001ec0e:	68 fb ca 02 c0       	push   0xc002cafb
c001ec13:	e8 ab 41 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ec18:	8b 15 4c 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f4c
c001ec1e:	83 c4 10             	add    esp,0x10
c001ec21:	8d 42 01             	lea    eax,[edx+0x1]
c001ec24:	88 9a 60 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce0a0],bl
c001ec2a:	a3 4c 1f 03 c0       	mov    ds:0xc0031f4c,eax
c001ec2f:	83 f8 20             	cmp    eax,0x20
c001ec32:	75 0f                	jne    c001ec43 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ec34:	c7 05 4c 1f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031f4c,0x1f
c001ec3e:	eb 03                	jmp    c001ec43 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ec40:	88 d8                	mov    al,bl
c001ec42:	ee                   	out    dx,al
c001ec43:	83 c4 08             	add    esp,0x8
c001ec46:	5b                   	pop    ebx
c001ec47:	c3                   	ret    

c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ec48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec52:	c1 e0 04             	shl    eax,0x4
c001ec55:	01 d0                	add    eax,edx
c001ec57:	c3                   	ret    

c001ec58 <Vm::getSegment(unsigned int)>:
c001ec58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5c:	c1 e8 10             	shr    eax,0x10
c001ec5f:	c3                   	ret    

c001ec60 <Vm::getOffset(unsigned int)>:
c001ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec64:	c3                   	ret    

c001ec65 <Vm::mainloop2()>:
c001ec65:	83 ec 0c             	sub    esp,0xc
c001ec68:	e8 87 f2 ff ff       	call   c001def4 <lockScheduler()>
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	c6 05 45 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f45,0x1
c001ec77:	6a 02                	push   0x2
c001ec79:	e8 04 f7 ff ff       	call   c001e382 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ec7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec83:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ec87:	52                   	push   edx
c001ec88:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ec8c:	52                   	push   edx
c001ec8d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ec91:	52                   	push   edx
c001ec92:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ec96:	50                   	push   eax
c001ec97:	e8 5e 16 fe ff       	call   c00002fa <goToVM86>
c001ec9c:	83 c4 2c             	add    esp,0x2c
c001ec9f:	c3                   	ret    

c001eca0 <Vm::mainVm8086Loop(void*)>:
c001eca0:	83 ec 0c             	sub    esp,0xc
c001eca3:	e8 4e f2 ff ff       	call   c001def6 <unlockScheduler()>
c001eca8:	83 c4 0c             	add    esp,0xc
c001ecab:	eb b8                	jmp    c001ec65 <Vm::mainloop2()>

c001ecad <Vm::mainloop3(unsigned long)>:
c001ecad:	53                   	push   ebx
c001ecae:	83 ec 08             	sub    esp,0x8
c001ecb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ecb5:	e8 3a f2 ff ff       	call   c001def4 <lockScheduler()>
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	89 1d 40 1f 03 c0    	mov    DWORD PTR ds:0xc0031f40,ebx
c001ecc3:	6a 02                	push   0x2
c001ecc5:	c6 05 44 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f44,0x1
c001eccc:	e8 b1 f6 ff ff       	call   c001e382 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ecd1:	83 c4 18             	add    esp,0x18
c001ecd4:	5b                   	pop    ebx
c001ecd5:	eb 8e                	jmp    c001ec65 <Vm::mainloop2()>

c001ecd7 <Vm::initialise8086()>:
c001ecd7:	83 ec 0c             	sub    esp,0xc
c001ecda:	68 80 00 00 00       	push   0x80
c001ecdf:	6a 00                	push   0x0
c001ece1:	68 a0 ec 01 c0       	push   0xc001eca0
c001ece6:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001ecec:	e8 35 f3 ff ff       	call   c001e026 <Process::createThread(void (*)(void*), void*, int)>
c001ecf1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ecf8:	a3 48 1f 03 c0       	mov    ds:0xc0031f48,eax
c001ecfd:	68 00 01 00 00       	push   0x100
c001ed02:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c001ed07:	6a 00                	push   0x0
c001ed09:	6a 00                	push   0x0
c001ed0b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed11:	e8 fa 37 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed16:	83 c4 2c             	add    esp,0x2c
c001ed19:	c3                   	ret    

c001ed1a <Vm::finish8086()>:
c001ed1a:	53                   	push   ebx
c001ed1b:	83 ec 08             	sub    esp,0x8
c001ed1e:	e8 d1 f1 ff ff       	call   c001def4 <lockScheduler()>
c001ed23:	80 3d 44 1f 03 c0 00 	cmp    BYTE PTR ds:0xc0031f44,0x0
c001ed2a:	75 0c                	jne    c001ed38 <Vm::finish8086()+0x1e>
c001ed2c:	e8 39 f5 ff ff       	call   c001e26a <schedule()>
c001ed31:	e8 c0 f1 ff ff       	call   c001def6 <unlockScheduler()>
c001ed36:	eb e6                	jmp    c001ed1e <Vm::finish8086()+0x4>
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	8b 1d 40 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f40
c001ed41:	ff 35 48 1f 03 c0    	push   DWORD PTR ds:0xc0031f48
c001ed47:	c6 05 44 1f 03 c0 00 	mov    BYTE PTR ds:0xc0031f44,0x0
c001ed4e:	e8 8c f8 ff ff       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c001ed53:	e8 9e f1 ff ff       	call   c001def6 <unlockScheduler()>
c001ed58:	89 d8                	mov    eax,ebx
c001ed5a:	83 c4 18             	add    esp,0x18
c001ed5d:	5b                   	pop    ebx
c001ed5e:	c3                   	ret    

c001ed5f <Vm::getOutput8086(unsigned char*)>:
c001ed5f:	83 ec 10             	sub    esp,0x10
c001ed62:	ff 35 4c 1f 03 c0    	push   DWORD PTR ds:0xc0031f4c
c001ed68:	68 60 1f 03 c0       	push   0xc0031f60
c001ed6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed71:	e8 d6 19 fe ff       	call   c000074c <memcpy>
c001ed76:	a1 4c 1f 03 c0       	mov    eax,ds:0xc0031f4c
c001ed7b:	c7 05 4c 1f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031f4c,0x0
c001ed85:	83 c4 1c             	add    esp,0x1c
c001ed88:	c3                   	ret    

c001ed89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ed89:	55                   	push   ebp
c001ed8a:	57                   	push   edi
c001ed8b:	56                   	push   esi
c001ed8c:	53                   	push   ebx
c001ed8d:	83 ec 2c             	sub    esp,0x2c
c001ed90:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed94:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ed98:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ed9c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eda0:	e8 4f f1 ff ff       	call   c001def4 <lockScheduler()>
c001eda5:	a0 45 1f 03 c0       	mov    al,ds:0xc0031f45
c001edaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001edae:	84 c0                	test   al,al
c001edb0:	75 0c                	jne    c001edbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001edb2:	e8 b3 f4 ff ff       	call   c001e26a <schedule()>
c001edb7:	e8 3a f1 ff ff       	call   c001def6 <unlockScheduler()>
c001edbc:	eb e2                	jmp    c001eda0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001edbe:	a1 48 1f 03 c0       	mov    eax,ds:0xc0031f48
c001edc3:	c7 05 4c 1f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031f4c,0x0
c001edcd:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001edd1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001edd5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001edd9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eddd:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ede1:	50                   	push   eax
c001ede2:	6a 20                	push   0x20
c001ede4:	6a 00                	push   0x0
c001ede6:	68 60 1f 03 c0       	push   0xc0031f60
c001edeb:	e8 90 19 fe ff       	call   c0000780 <memset>
c001edf0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001edf7:	e8 4f 0a ff ff       	call   c000f84b <malloc>
c001edfc:	83 c4 0c             	add    esp,0xc
c001edff:	89 c7                	mov    edi,eax
c001ee01:	ff 35 14 1f 03 c0    	push   DWORD PTR ds:0xc0031f14
c001ee07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ee0b:	50                   	push   eax
c001ee0c:	e8 11 45 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	85 ff                	test   edi,edi
c001ee16:	75 0a                	jne    c001ee22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	68 17 cb 02 c0       	push   0xc002cb17
c001ee20:	eb 27                	jmp    c001ee49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ee22:	50                   	push   eax
c001ee23:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ee27:	50                   	push   eax
c001ee28:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ee2c:	50                   	push   eax
c001ee2d:	57                   	push   edi
c001ee2e:	e8 ff 47 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001ee33:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ee38:	83 c4 10             	add    esp,0x10
c001ee3b:	89 e8                	mov    eax,ebp
c001ee3d:	84 c0                	test   al,al
c001ee3f:	74 19                	je     c001ee5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ee41:	83 ec 0c             	sub    esp,0xc
c001ee44:	68 2b cb 02 c0       	push   0xc002cb2b
c001ee49:	e8 09 b8 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001ee4e:	31 ed                	xor    ebp,ebp
c001ee50:	e8 a1 f0 ff ff       	call   c001def6 <unlockScheduler()>
c001ee55:	83 c4 10             	add    esp,0x10
c001ee58:	eb 75                	jmp    c001eecf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ee5a:	50                   	push   eax
c001ee5b:	50                   	push   eax
c001ee5c:	6a 01                	push   0x1
c001ee5e:	57                   	push   edi
c001ee5f:	e8 22 45 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ee64:	83 c4 10             	add    esp,0x10
c001ee67:	85 c0                	test   eax,eax
c001ee69:	74 17                	je     c001ee82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ee6b:	83 ec 0c             	sub    esp,0xc
c001ee6e:	68 44 cb 02 c0       	push   0xc002cb44
c001ee73:	e8 df b7 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001ee78:	e8 79 f0 ff ff       	call   c001def6 <unlockScheduler()>
c001ee7d:	83 c4 10             	add    esp,0x10
c001ee80:	eb 4d                	jmp    c001eecf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ee82:	0f b7 f6             	movzx  esi,si
c001ee85:	50                   	push   eax
c001ee86:	0f b7 db             	movzx  ebx,bx
c001ee89:	50                   	push   eax
c001ee8a:	56                   	push   esi
c001ee8b:	53                   	push   ebx
c001ee8c:	e8 b7 fd ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee91:	5a                   	pop    edx
c001ee92:	8b 17                	mov    edx,DWORD PTR [edi]
c001ee94:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ee98:	51                   	push   ecx
c001ee99:	50                   	push   eax
c001ee9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eea2:	57                   	push   edi
c001eea3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eea6:	83 c4 14             	add    esp,0x14
c001eea9:	57                   	push   edi
c001eeaa:	e8 35 45 ff ff       	call   c00133e4 <File::close()>
c001eeaf:	c6 05 45 1f 03 c0 00 	mov    BYTE PTR ds:0xc0031f45,0x0
c001eeb6:	e8 3b f0 ff ff       	call   c001def6 <unlockScheduler()>
c001eebb:	59                   	pop    ecx
c001eebc:	ff 35 48 1f 03 c0    	push   DWORD PTR ds:0xc0031f48
c001eec2:	e8 18 f7 ff ff       	call   c001e5df <unblockTask(ThreadControlBlock*)>
c001eec7:	83 c4 10             	add    esp,0x10
c001eeca:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eecf:	83 c4 2c             	add    esp,0x2c
c001eed2:	89 e8                	mov    eax,ebp
c001eed4:	5b                   	pop    ebx
c001eed5:	5e                   	pop    esi
c001eed6:	5f                   	pop    edi
c001eed7:	5d                   	pop    ebp
c001eed8:	c3                   	ret    

c001eed9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eed9:	57                   	push   edi
c001eeda:	56                   	push   esi
c001eedb:	53                   	push   ebx
c001eedc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eee4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eee8:	83 e8 06             	sub    eax,0x6
c001eeeb:	0f b7 c0             	movzx  eax,ax
c001eeee:	50                   	push   eax
c001eeef:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eef4:	50                   	push   eax
c001eef5:	e8 4e fd ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001eefa:	5a                   	pop    edx
c001eefb:	5e                   	pop    esi
c001eefc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eeff:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef02:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef08:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ef0b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ef0e:	83 c2 02             	add    edx,0x2
c001ef11:	66 89 10             	mov    WORD PTR [eax],dx
c001ef14:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ef17:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ef1b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ef1e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ef22:	89 d6                	mov    esi,edx
c001ef24:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ef2a:	66 81 e6 ff fd       	and    si,0xfdff
c001ef2f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ef33:	74 07                	je     c001ef3c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ef35:	89 d6                	mov    esi,edx
c001ef37:	66 81 ce 00 02       	or     si,0x200
c001ef3c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ef40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef45:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef49:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ef51:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ef54:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ef5c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ef5f:	5b                   	pop    ebx
c001ef60:	5e                   	pop    esi
c001ef61:	5f                   	pop    edi
c001ef62:	c3                   	ret    

c001ef63 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ef63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ef68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ef6d:	c1 e0 04             	shl    eax,0x4
c001ef70:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ef73:	c3                   	ret    

c001ef74 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ef74:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ef79:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ef7e:	c1 e0 04             	shl    eax,0x4
c001ef81:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ef85:	c3                   	ret    

c001ef86 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ef86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ef8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ef90:	c1 e0 04             	shl    eax,0x4
c001ef93:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ef96:	c3                   	ret    

c001ef97 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ef97:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ef9c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efa1:	c1 e0 04             	shl    eax,0x4
c001efa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efa8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001efab:	c3                   	ret    

c001efac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001efac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efb1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efb6:	c1 e0 04             	shl    eax,0x4
c001efb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efbd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001efc1:	c3                   	ret    

c001efc2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001efc2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efc7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efcc:	c1 e0 04             	shl    eax,0x4
c001efcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efd3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001efd6:	c3                   	ret    

c001efd7 <Vm::faultHandler(regs*)>:
c001efd7:	55                   	push   ebp
c001efd8:	57                   	push   edi
c001efd9:	56                   	push   esi
c001efda:	53                   	push   ebx
c001efdb:	83 ec 1c             	sub    esp,0x1c
c001efde:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001efe2:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001efe5:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001efe8:	0f b7 c1             	movzx  eax,cx
c001efeb:	50                   	push   eax
c001efec:	0f b7 c3             	movzx  eax,bx
c001efef:	c1 e3 04             	shl    ebx,0x4
c001eff2:	50                   	push   eax
c001eff3:	e8 50 fc ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001eff8:	5a                   	pop    edx
c001eff9:	89 c5                	mov    ebp,eax
c001effb:	5e                   	pop    esi
c001effc:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f000:	50                   	push   eax
c001f001:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f005:	50                   	push   eax
c001f006:	e8 3d fc ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001f00b:	01 cb                	add    ebx,ecx
c001f00d:	89 c6                	mov    esi,eax
c001f00f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f013:	50                   	push   eax
c001f014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f018:	50                   	push   eax
c001f019:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f01d:	50                   	push   eax
c001f01e:	55                   	push   ebp
c001f01f:	53                   	push   ebx
c001f020:	b3 06                	mov    bl,0x6
c001f022:	68 5d cb 02 c0       	push   0xc002cb5d
c001f027:	e8 97 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f02c:	83 c4 20             	add    esp,0x20
c001f02f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f034:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f039:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f03d:	3c 9d                	cmp    al,0x9d
c001f03f:	0f 84 d7 02 00 00    	je     c001f31c <Vm::faultHandler(regs*)+0x345>
c001f045:	0f 87 a3 00 00 00    	ja     c001f0ee <Vm::faultHandler(regs*)+0x117>
c001f04b:	3c 66                	cmp    al,0x66
c001f04d:	0f 84 15 02 00 00    	je     c001f268 <Vm::faultHandler(regs*)+0x291>
c001f053:	77 5f                	ja     c001f0b4 <Vm::faultHandler(regs*)+0xdd>
c001f055:	3c 36                	cmp    al,0x36
c001f057:	0f 84 f1 01 00 00    	je     c001f24e <Vm::faultHandler(regs*)+0x277>
c001f05d:	77 28                	ja     c001f087 <Vm::faultHandler(regs*)+0xb0>
c001f05f:	3c 26                	cmp    al,0x26
c001f061:	0f 84 99 01 00 00    	je     c001f200 <Vm::faultHandler(regs*)+0x229>
c001f067:	3c 2e                	cmp    al,0x2e
c001f069:	0f 85 3b 07 00 00    	jne    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f06f:	83 ec 0c             	sub    esp,0xc
c001f072:	31 db                	xor    ebx,ebx
c001f074:	68 72 cb 02 c0       	push   0xc002cb72
c001f079:	e8 45 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f07e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	45                   	inc    ebp
c001f085:	eb b2                	jmp    c001f039 <Vm::faultHandler(regs*)+0x62>
c001f087:	3c 64                	cmp    al,0x64
c001f089:	0f 84 8b 01 00 00    	je     c001f21a <Vm::faultHandler(regs*)+0x243>
c001f08f:	0f 87 9f 01 00 00    	ja     c001f234 <Vm::faultHandler(regs*)+0x25d>
c001f095:	3c 3e                	cmp    al,0x3e
c001f097:	0f 85 0d 07 00 00    	jne    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f09d:	83 ec 0c             	sub    esp,0xc
c001f0a0:	b3 01                	mov    bl,0x1
c001f0a2:	68 76 cb 02 c0       	push   0xc002cb76
c001f0a7:	e8 17 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f0ac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0af:	83 c4 10             	add    esp,0x10
c001f0b2:	eb d0                	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f0b4:	3c 6d                	cmp    al,0x6d
c001f0b6:	0f 84 af 03 00 00    	je     c001f46b <Vm::faultHandler(regs*)+0x494>
c001f0bc:	77 15                	ja     c001f0d3 <Vm::faultHandler(regs*)+0xfc>
c001f0be:	3c 67                	cmp    al,0x67
c001f0c0:	0f 84 bf 01 00 00    	je     c001f285 <Vm::faultHandler(regs*)+0x2ae>
c001f0c6:	3c 6c                	cmp    al,0x6c
c001f0c8:	0f 84 3f 03 00 00    	je     c001f40d <Vm::faultHandler(regs*)+0x436>
c001f0ce:	e9 d7 06 00 00       	jmp    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f0d3:	3c 6f                	cmp    al,0x6f
c001f0d5:	0f 84 a4 04 00 00    	je     c001f57f <Vm::faultHandler(regs*)+0x5a8>
c001f0db:	0f 82 11 04 00 00    	jb     c001f4f2 <Vm::faultHandler(regs*)+0x51b>
c001f0e1:	3c 9c                	cmp    al,0x9c
c001f0e3:	0f 84 ba 01 00 00    	je     c001f2a3 <Vm::faultHandler(regs*)+0x2cc>
c001f0e9:	e9 bc 06 00 00       	jmp    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f0ee:	3c ec                	cmp    al,0xec
c001f0f0:	0f 84 24 06 00 00    	je     c001f71a <Vm::faultHandler(regs*)+0x743>
c001f0f6:	0f 87 93 00 00 00    	ja     c001f18f <Vm::faultHandler(regs*)+0x1b8>
c001f0fc:	3c e4                	cmp    al,0xe4
c001f0fe:	0f 84 5c 05 00 00    	je     c001f660 <Vm::faultHandler(regs*)+0x689>
c001f104:	77 6a                	ja     c001f170 <Vm::faultHandler(regs*)+0x199>
c001f106:	3c cd                	cmp    al,0xcd
c001f108:	0f 84 7e 02 00 00    	je     c001f38c <Vm::faultHandler(regs*)+0x3b5>
c001f10e:	3c cf                	cmp    al,0xcf
c001f110:	0f 85 94 06 00 00    	jne    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	68 ba cb 02 c0       	push   0xc002cbba
c001f11e:	e8 a0 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f123:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f126:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f129:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f12d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f130:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f134:	0d 00 02 02 00       	or     eax,0x20200
c001f139:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f13c:	56                   	push   esi
c001f13d:	53                   	push   ebx
c001f13e:	52                   	push   edx
c001f13f:	68 c0 cb 02 c0       	push   0xc002cbc0
c001f144:	e8 7a 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f149:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f14d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f153:	66 c1 e8 09          	shr    ax,0x9
c001f157:	83 e0 01             	and    eax,0x1
c001f15a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f15d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f160:	83 c0 06             	add    eax,0x6
c001f163:	25 ff ff 00 00       	and    eax,0xffff
c001f168:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f16b:	e9 95 02 00 00       	jmp    c001f405 <Vm::faultHandler(regs*)+0x42e>
c001f170:	3c e6                	cmp    al,0xe6
c001f172:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f176:	0f 84 4e 05 00 00    	je     c001f6ca <Vm::faultHandler(regs*)+0x6f3>
c001f17c:	0f 82 0a 05 00 00    	jb     c001f68c <Vm::faultHandler(regs*)+0x6b5>
c001f182:	3c e7                	cmp    al,0xe7
c001f184:	0f 84 69 05 00 00    	je     c001f6f3 <Vm::faultHandler(regs*)+0x71c>
c001f18a:	e9 1b 06 00 00       	jmp    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f18f:	3c ef                	cmp    al,0xef
c001f191:	0f 84 e6 05 00 00    	je     c001f77d <Vm::faultHandler(regs*)+0x7a6>
c001f197:	77 37                	ja     c001f1d0 <Vm::faultHandler(regs*)+0x1f9>
c001f199:	3c ed                	cmp    al,0xed
c001f19b:	0f 84 a3 05 00 00    	je     c001f744 <Vm::faultHandler(regs*)+0x76d>
c001f1a1:	3c ee                	cmp    al,0xee
c001f1a3:	0f 85 01 06 00 00    	jne    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f1a9:	52                   	push   edx
c001f1aa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1ad:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1b0:	68 5b cc 02 c0       	push   0xc002cc5b
c001f1b5:	e8 09 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1ba:	59                   	pop    ecx
c001f1bb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f1bf:	5b                   	pop    ebx
c001f1c0:	50                   	push   eax
c001f1c1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1c5:	50                   	push   eax
c001f1c6:	e8 2a fa ff ff       	call   c001ebf5 <Vm::outbv(unsigned short, unsigned char)>
c001f1cb:	e9 a5 05 00 00       	jmp    c001f775 <Vm::faultHandler(regs*)+0x79e>
c001f1d0:	3c fa                	cmp    al,0xfa
c001f1d2:	0f 84 f7 01 00 00    	je     c001f3cf <Vm::faultHandler(regs*)+0x3f8>
c001f1d8:	3c fb                	cmp    al,0xfb
c001f1da:	0f 84 0a 02 00 00    	je     c001f3ea <Vm::faultHandler(regs*)+0x413>
c001f1e0:	3c f3                	cmp    al,0xf3
c001f1e2:	0f 85 c2 05 00 00    	jne    c001f7aa <Vm::faultHandler(regs*)+0x7d3>
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	68 93 cb 02 c0       	push   0xc002cb93
c001f1f0:	e8 ce 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1f5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1f8:	83 c4 10             	add    esp,0x10
c001f1fb:	e9 84 fe ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f200:	83 ec 0c             	sub    esp,0xc
c001f203:	b3 02                	mov    bl,0x2
c001f205:	68 6e cb 02 c0       	push   0xc002cb6e
c001f20a:	e8 b4 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f20f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f212:	83 c4 10             	add    esp,0x10
c001f215:	e9 6a fe ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	b3 03                	mov    bl,0x3
c001f21f:	68 7a cb 02 c0       	push   0xc002cb7a
c001f224:	e8 9a 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f229:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f22c:	83 c4 10             	add    esp,0x10
c001f22f:	e9 50 fe ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	b3 04                	mov    bl,0x4
c001f239:	68 7e cb 02 c0       	push   0xc002cb7e
c001f23e:	e8 80 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f243:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f246:	83 c4 10             	add    esp,0x10
c001f249:	e9 36 fe ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f24e:	83 ec 0c             	sub    esp,0xc
c001f251:	b3 05                	mov    bl,0x5
c001f253:	68 82 cb 02 c0       	push   0xc002cb82
c001f258:	e8 66 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f25d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f260:	83 c4 10             	add    esp,0x10
c001f263:	e9 1c fe ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	68 86 cb 02 c0       	push   0xc002cb86
c001f270:	e8 4e 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f275:	83 c4 10             	add    esp,0x10
c001f278:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f27b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f280:	e9 ff fd ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f285:	50                   	push   eax
c001f286:	50                   	push   eax
c001f287:	6a 01                	push   0x1
c001f289:	68 8b cb 02 c0       	push   0xc002cb8b
c001f28e:	e8 30 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f293:	83 c4 10             	add    esp,0x10
c001f296:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f299:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f29e:	e9 e1 fd ff ff       	jmp    c001f084 <Vm::faultHandler(regs*)+0xad>
c001f2a3:	83 ec 0c             	sub    esp,0xc
c001f2a6:	68 99 cb 02 c0       	push   0xc002cb99
c001f2ab:	e8 13 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f2b6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2bb:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f2be:	74 2f                	je     c001f2ef <Vm::faultHandler(regs*)+0x318>
c001f2c0:	83 ea 04             	sub    edx,0x4
c001f2c3:	25 ff 0d 00 00       	and    eax,0xdff
c001f2c8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f2ce:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f2d1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f2d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f2da:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f2de:	0f 84 bf 04 00 00    	je     c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f2e4:	80 cc 02             	or     ah,0x2
c001f2e7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f2ea:	e9 b4 04 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f2ef:	83 ea 02             	sub    edx,0x2
c001f2f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f2f8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f2fb:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f2ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f305:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f309:	74 05                	je     c001f310 <Vm::faultHandler(regs*)+0x339>
c001f30b:	80 cc 02             	or     ah,0x2
c001f30e:	eb 03                	jmp    c001f313 <Vm::faultHandler(regs*)+0x33c>
c001f310:	80 e4 fd             	and    ah,0xfd
c001f313:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f317:	e9 87 04 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f31c:	83 ec 0c             	sub    esp,0xc
c001f31f:	68 a0 cb 02 c0       	push   0xc002cba0
c001f324:	e8 9a 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f329:	83 c4 10             	add    esp,0x10
c001f32c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f331:	74 28                	je     c001f35b <Vm::faultHandler(regs*)+0x384>
c001f333:	8b 06                	mov    eax,DWORD PTR [esi]
c001f335:	25 ff 0d 00 00       	and    eax,0xdff
c001f33a:	0d 00 02 02 00       	or     eax,0x20200
c001f33f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f342:	8b 06                	mov    eax,DWORD PTR [esi]
c001f344:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f34a:	c1 e8 09             	shr    eax,0x9
c001f34d:	83 e0 01             	and    eax,0x1
c001f350:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f353:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f356:	83 c0 04             	add    eax,0x4
c001f359:	eb 24                	jmp    c001f37f <Vm::faultHandler(regs*)+0x3a8>
c001f35b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f35e:	0d 00 02 02 00       	or     eax,0x20200
c001f363:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f366:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f369:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f36f:	66 c1 e8 09          	shr    ax,0x9
c001f373:	83 e0 01             	and    eax,0x1
c001f376:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f379:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f37c:	83 c0 02             	add    eax,0x2
c001f37f:	25 ff ff 00 00       	and    eax,0xffff
c001f384:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f387:	e9 17 04 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f38c:	53                   	push   ebx
c001f38d:	53                   	push   ebx
c001f38e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f392:	50                   	push   eax
c001f393:	68 a6 cb 02 c0       	push   0xc002cba6
c001f398:	e8 26 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f39d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	3c ee                	cmp    al,0xee
c001f3a6:	75 10                	jne    c001f3b8 <Vm::faultHandler(regs*)+0x3e1>
c001f3a8:	83 ec 0c             	sub    esp,0xc
c001f3ab:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3ae:	e8 fa f8 ff ff       	call   c001ecad <Vm::mainloop3(unsigned long)>
c001f3b3:	e9 c0 03 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x7a1>
c001f3b8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	53                   	push   ebx
c001f3c0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f3c4:	53                   	push   ebx
c001f3c5:	55                   	push   ebp
c001f3c6:	50                   	push   eax
c001f3c7:	57                   	push   edi
c001f3c8:	e8 0c fb ff ff       	call   c001eed9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f3cd:	eb 36                	jmp    c001f405 <Vm::faultHandler(regs*)+0x42e>
c001f3cf:	83 ec 0c             	sub    esp,0xc
c001f3d2:	68 b0 cb 02 c0       	push   0xc002cbb0
c001f3d7:	e8 e7 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f3dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3e1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3e5:	e9 8b 03 00 00       	jmp    c001f775 <Vm::faultHandler(regs*)+0x79e>
c001f3ea:	83 ec 0c             	sub    esp,0xc
c001f3ed:	68 b5 cb 02 c0       	push   0xc002cbb5
c001f3f2:	e8 cc 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3fc:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f400:	e9 70 03 00 00       	jmp    c001f775 <Vm::faultHandler(regs*)+0x79e>
c001f405:	83 c4 20             	add    esp,0x20
c001f408:	e9 99 03 00 00       	jmp    c001f7a6 <Vm::faultHandler(regs*)+0x7cf>
c001f40d:	83 ec 0c             	sub    esp,0xc
c001f410:	68 f3 cb 02 c0       	push   0xc002cbf3
c001f415:	e8 a9 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f420:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f425:	74 0d                	je     c001f434 <Vm::faultHandler(regs*)+0x45d>
c001f427:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f42e:	0f 87 9e 01 00 00    	ja     c001f5d2 <Vm::faultHandler(regs*)+0x5fb>
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f43b:	0f b7 db             	movzx  ebx,bx
c001f43e:	50                   	push   eax
c001f43f:	e8 9e f7 ff ff       	call   c001ebe2 <Vm::inbv(unsigned short)>
c001f444:	83 c4 0c             	add    esp,0xc
c001f447:	0f b6 c0             	movzx  eax,al
c001f44a:	50                   	push   eax
c001f44b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f44f:	50                   	push   eax
c001f450:	53                   	push   ebx
c001f451:	e8 41 fb ff ff       	call   c001ef97 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f456:	83 c4 10             	add    esp,0x10
c001f459:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f45c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f460:	74 03                	je     c001f465 <Vm::faultHandler(regs*)+0x48e>
c001f462:	48                   	dec    eax
c001f463:	eb 01                	jmp    c001f466 <Vm::faultHandler(regs*)+0x48f>
c001f465:	40                   	inc    eax
c001f466:	0f b7 c0             	movzx  eax,ax
c001f469:	eb 7f                	jmp    c001f4ea <Vm::faultHandler(regs*)+0x513>
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	68 25 cc 02 c0       	push   0xc002cc25
c001f473:	e8 4b 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f478:	83 c4 10             	add    esp,0x10
c001f47b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f47e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f483:	74 0d                	je     c001f492 <Vm::faultHandler(regs*)+0x4bb>
c001f485:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f48c:	0f 87 40 01 00 00    	ja     c001f5d2 <Vm::faultHandler(regs*)+0x5fb>
c001f492:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f495:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f499:	0f b7 db             	movzx  ebx,bx
c001f49c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4a1:	74 20                	je     c001f4c3 <Vm::faultHandler(regs*)+0x4ec>
c001f4a3:	ed                   	in     eax,dx
c001f4a4:	51                   	push   ecx
c001f4a5:	50                   	push   eax
c001f4a6:	56                   	push   esi
c001f4a7:	53                   	push   ebx
c001f4a8:	e8 15 fb ff ff       	call   c001efc2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f4b3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f4b7:	74 05                	je     c001f4be <Vm::faultHandler(regs*)+0x4e7>
c001f4b9:	83 e8 04             	sub    eax,0x4
c001f4bc:	eb 27                	jmp    c001f4e5 <Vm::faultHandler(regs*)+0x50e>
c001f4be:	83 c0 04             	add    eax,0x4
c001f4c1:	eb 22                	jmp    c001f4e5 <Vm::faultHandler(regs*)+0x50e>
c001f4c3:	66 ed                	in     ax,dx
c001f4c5:	0f b7 c0             	movzx  eax,ax
c001f4c8:	52                   	push   edx
c001f4c9:	50                   	push   eax
c001f4ca:	56                   	push   esi
c001f4cb:	53                   	push   ebx
c001f4cc:	e8 db fa ff ff       	call   c001efac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f4d1:	83 c4 10             	add    esp,0x10
c001f4d4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f4d7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f4db:	74 05                	je     c001f4e2 <Vm::faultHandler(regs*)+0x50b>
c001f4dd:	83 e8 02             	sub    eax,0x2
c001f4e0:	eb 03                	jmp    c001f4e5 <Vm::faultHandler(regs*)+0x50e>
c001f4e2:	83 c0 02             	add    eax,0x2
c001f4e5:	25 ff ff 00 00       	and    eax,0xffff
c001f4ea:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f4ed:	e9 b1 02 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	4b                   	dec    ebx
c001f4f6:	68 2b cc 02 c0       	push   0xc002cc2b
c001f4fb:	e8 c3 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f500:	83 c4 10             	add    esp,0x10
c001f503:	80 fb 05             	cmp    bl,0x5
c001f506:	77 0a                	ja     c001f512 <Vm::faultHandler(regs*)+0x53b>
c001f508:	0f b6 db             	movzx  ebx,bl
c001f50b:	ff 24 9d 9c cc 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3364]
c001f512:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f516:	eb 1b                	jmp    c001f533 <Vm::faultHandler(regs*)+0x55c>
c001f518:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f51c:	eb 15                	jmp    c001f533 <Vm::faultHandler(regs*)+0x55c>
c001f51e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f522:	eb 0f                	jmp    c001f533 <Vm::faultHandler(regs*)+0x55c>
c001f524:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f528:	eb 09                	jmp    c001f533 <Vm::faultHandler(regs*)+0x55c>
c001f52a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f52d:	eb 04                	jmp    c001f533 <Vm::faultHandler(regs*)+0x55c>
c001f52f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f533:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f538:	74 0d                	je     c001f547 <Vm::faultHandler(regs*)+0x570>
c001f53a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f541:	0f 87 8b 00 00 00    	ja     c001f5d2 <Vm::faultHandler(regs*)+0x5fb>
c001f547:	53                   	push   ebx
c001f548:	53                   	push   ebx
c001f549:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f54d:	52                   	push   edx
c001f54e:	50                   	push   eax
c001f54f:	e8 0f fa ff ff       	call   c001ef63 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f554:	5e                   	pop    esi
c001f555:	0f b6 c0             	movzx  eax,al
c001f558:	5d                   	pop    ebp
c001f559:	50                   	push   eax
c001f55a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f55e:	50                   	push   eax
c001f55f:	e8 91 f6 ff ff       	call   c001ebf5 <Vm::outbv(unsigned short, unsigned char)>
c001f564:	83 c4 10             	add    esp,0x10
c001f567:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f56a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f56e:	74 03                	je     c001f573 <Vm::faultHandler(regs*)+0x59c>
c001f570:	48                   	dec    eax
c001f571:	eb 01                	jmp    c001f574 <Vm::faultHandler(regs*)+0x59d>
c001f573:	40                   	inc    eax
c001f574:	0f b7 c0             	movzx  eax,ax
c001f577:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f57a:	e9 24 02 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f57f:	83 ec 0c             	sub    esp,0xc
c001f582:	4b                   	dec    ebx
c001f583:	68 2b cc 02 c0       	push   0xc002cc2b
c001f588:	e8 36 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f58d:	83 c4 10             	add    esp,0x10
c001f590:	80 fb 05             	cmp    bl,0x5
c001f593:	77 0a                	ja     c001f59f <Vm::faultHandler(regs*)+0x5c8>
c001f595:	0f b6 db             	movzx  ebx,bl
c001f598:	ff 24 9d b4 cc 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd334c]
c001f59f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f5a3:	eb 1b                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x5e9>
c001f5a5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f5a9:	eb 15                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x5e9>
c001f5ab:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f5af:	eb 0f                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x5e9>
c001f5b1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f5b5:	eb 09                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x5e9>
c001f5b7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f5ba:	eb 04                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x5e9>
c001f5bc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f5c0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f5c3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f5c8:	74 39                	je     c001f603 <Vm::faultHandler(regs*)+0x62c>
c001f5ca:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f5d0:	76 31                	jbe    c001f603 <Vm::faultHandler(regs*)+0x62c>
c001f5d2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5d6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f5da:	51                   	push   ecx
c001f5db:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5df:	51                   	push   ecx
c001f5e0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5e4:	51                   	push   ecx
c001f5e5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5e9:	51                   	push   ecx
c001f5ea:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5ee:	52                   	push   edx
c001f5ef:	50                   	push   eax
c001f5f0:	50                   	push   eax
c001f5f1:	68 f8 cb 02 c0       	push   0xc002cbf8
c001f5f6:	e8 c8 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f5fb:	83 c4 20             	add    esp,0x20
c001f5fe:	e9 fb 01 00 00       	jmp    c001f7fe <Vm::faultHandler(regs*)+0x827>
c001f603:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f606:	0f b7 d3             	movzx  edx,bx
c001f609:	81 e6 00 04 00 00    	and    esi,0x400
c001f60f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f612:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f617:	74 1d                	je     c001f636 <Vm::faultHandler(regs*)+0x65f>
c001f619:	51                   	push   ecx
c001f61a:	51                   	push   ecx
c001f61b:	52                   	push   edx
c001f61c:	50                   	push   eax
c001f61d:	e8 64 f9 ff ff       	call   c001ef86 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f622:	83 c4 10             	add    esp,0x10
c001f625:	89 ea                	mov    edx,ebp
c001f627:	ef                   	out    dx,eax
c001f628:	85 f6                	test   esi,esi
c001f62a:	74 05                	je     c001f631 <Vm::faultHandler(regs*)+0x65a>
c001f62c:	83 eb 04             	sub    ebx,0x4
c001f62f:	eb 21                	jmp    c001f652 <Vm::faultHandler(regs*)+0x67b>
c001f631:	83 c3 04             	add    ebx,0x4
c001f634:	eb 1c                	jmp    c001f652 <Vm::faultHandler(regs*)+0x67b>
c001f636:	51                   	push   ecx
c001f637:	51                   	push   ecx
c001f638:	52                   	push   edx
c001f639:	50                   	push   eax
c001f63a:	e8 35 f9 ff ff       	call   c001ef74 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f63f:	83 c4 10             	add    esp,0x10
c001f642:	89 ea                	mov    edx,ebp
c001f644:	66 ef                	out    dx,ax
c001f646:	85 f6                	test   esi,esi
c001f648:	74 05                	je     c001f64f <Vm::faultHandler(regs*)+0x678>
c001f64a:	83 eb 02             	sub    ebx,0x2
c001f64d:	eb 03                	jmp    c001f652 <Vm::faultHandler(regs*)+0x67b>
c001f64f:	83 c3 02             	add    ebx,0x2
c001f652:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f658:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f65b:	e9 43 01 00 00       	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f660:	53                   	push   ebx
c001f661:	53                   	push   ebx
c001f662:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f666:	50                   	push   eax
c001f667:	68 31 cc 02 c0       	push   0xc002cc31
c001f66c:	e8 52 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f671:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f678:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f67c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f67f:	e8 5e f5 ff ff       	call   c001ebe2 <Vm::inbv(unsigned short)>
c001f684:	0f b6 c0             	movzx  eax,al
c001f687:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f68a:	eb 5e                	jmp    c001f6ea <Vm::faultHandler(regs*)+0x713>
c001f68c:	51                   	push   ecx
c001f68d:	51                   	push   ecx
c001f68e:	53                   	push   ebx
c001f68f:	68 37 cc 02 c0       	push   0xc002cc37
c001f694:	e8 2a 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f699:	83 c4 10             	add    esp,0x10
c001f69c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6a1:	74 07                	je     c001f6aa <Vm::faultHandler(regs*)+0x6d3>
c001f6a3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6a7:	ed                   	in     eax,dx
c001f6a8:	eb 14                	jmp    c001f6be <Vm::faultHandler(regs*)+0x6e7>
c001f6aa:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f6ad:	66 31 db             	xor    bx,bx
c001f6b0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f6b3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6b7:	66 ed                	in     ax,dx
c001f6b9:	0f b7 c0             	movzx  eax,ax
c001f6bc:	09 d8                	or     eax,ebx
c001f6be:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f6c1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f6c5:	e9 dc 00 00 00       	jmp    c001f7a6 <Vm::faultHandler(regs*)+0x7cf>
c001f6ca:	50                   	push   eax
c001f6cb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f6ce:	53                   	push   ebx
c001f6cf:	68 3d cc 02 c0       	push   0xc002cc3d
c001f6d4:	e8 ea 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f6d9:	58                   	pop    eax
c001f6da:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f6de:	5a                   	pop    edx
c001f6df:	50                   	push   eax
c001f6e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e4:	50                   	push   eax
c001f6e5:	e8 0b f5 ff ff       	call   c001ebf5 <Vm::outbv(unsigned short, unsigned char)>
c001f6ea:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f6ee:	e9 85 00 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x7a1>
c001f6f3:	50                   	push   eax
c001f6f4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f6f7:	53                   	push   ebx
c001f6f8:	68 46 cc 02 c0       	push   0xc002cc46
c001f6fd:	e8 c1 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f702:	83 c4 10             	add    esp,0x10
c001f705:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f709:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f70e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f711:	74 03                	je     c001f716 <Vm::faultHandler(regs*)+0x73f>
c001f713:	ef                   	out    dx,eax
c001f714:	eb ab                	jmp    c001f6c1 <Vm::faultHandler(regs*)+0x6ea>
c001f716:	66 ef                	out    dx,ax
c001f718:	eb a7                	jmp    c001f6c1 <Vm::faultHandler(regs*)+0x6ea>
c001f71a:	55                   	push   ebp
c001f71b:	55                   	push   ebp
c001f71c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f71f:	68 4f cc 02 c0       	push   0xc002cc4f
c001f724:	e8 9a 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f729:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f730:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f734:	89 04 24             	mov    DWORD PTR [esp],eax
c001f737:	e8 a6 f4 ff ff       	call   c001ebe2 <Vm::inbv(unsigned short)>
c001f73c:	0f b6 c0             	movzx  eax,al
c001f73f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f742:	eb 31                	jmp    c001f775 <Vm::faultHandler(regs*)+0x79e>
c001f744:	56                   	push   esi
c001f745:	56                   	push   esi
c001f746:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f749:	68 55 cc 02 c0       	push   0xc002cc55
c001f74e:	e8 70 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f753:	83 c4 10             	add    esp,0x10
c001f756:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f759:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f75e:	74 03                	je     c001f763 <Vm::faultHandler(regs*)+0x78c>
c001f760:	ed                   	in     eax,dx
c001f761:	eb 0d                	jmp    c001f770 <Vm::faultHandler(regs*)+0x799>
c001f763:	66 ed                	in     ax,dx
c001f765:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f768:	0f b7 c0             	movzx  eax,ax
c001f76b:	66 31 d2             	xor    dx,dx
c001f76e:	09 d0                	or     eax,edx
c001f770:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f773:	eb 2e                	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f775:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f778:	83 c4 10             	add    esp,0x10
c001f77b:	eb 29                	jmp    c001f7a6 <Vm::faultHandler(regs*)+0x7cf>
c001f77d:	50                   	push   eax
c001f77e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f781:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f784:	68 64 cc 02 c0       	push   0xc002cc64
c001f789:	e8 35 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f794:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f799:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f79c:	74 03                	je     c001f7a1 <Vm::faultHandler(regs*)+0x7ca>
c001f79e:	ef                   	out    dx,eax
c001f79f:	eb 02                	jmp    c001f7a3 <Vm::faultHandler(regs*)+0x7cc>
c001f7a1:	66 ef                	out    dx,ax
c001f7a3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7a6:	b0 01                	mov    al,0x1
c001f7a8:	eb 56                	jmp    c001f800 <Vm::faultHandler(regs*)+0x829>
c001f7aa:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f7ae:	51                   	push   ecx
c001f7af:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f7b3:	51                   	push   ecx
c001f7b4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f7b8:	51                   	push   ecx
c001f7b9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f7bd:	51                   	push   ecx
c001f7be:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f7c2:	52                   	push   edx
c001f7c3:	50                   	push   eax
c001f7c4:	50                   	push   eax
c001f7c5:	68 6d cc 02 c0       	push   0xc002cc6d
c001f7ca:	e8 f4 35 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f7cf:	83 c4 20             	add    esp,0x20
c001f7d2:	83 ec 0c             	sub    esp,0xc
c001f7d5:	6a 60                	push   0x60
c001f7d7:	e8 06 f4 ff ff       	call   c001ebe2 <Vm::inbv(unsigned short)>
c001f7dc:	83 c4 10             	add    esp,0x10
c001f7df:	3c 1c                	cmp    al,0x1c
c001f7e1:	74 04                	je     c001f7e7 <Vm::faultHandler(regs*)+0x810>
c001f7e3:	3c 5a                	cmp    al,0x5a
c001f7e5:	75 eb                	jne    c001f7d2 <Vm::faultHandler(regs*)+0x7fb>
c001f7e7:	3c 1c                	cmp    al,0x1c
c001f7e9:	74 04                	je     c001f7ef <Vm::faultHandler(regs*)+0x818>
c001f7eb:	3c 5a                	cmp    al,0x5a
c001f7ed:	75 0f                	jne    c001f7fe <Vm::faultHandler(regs*)+0x827>
c001f7ef:	83 ec 0c             	sub    esp,0xc
c001f7f2:	6a 60                	push   0x60
c001f7f4:	e8 e9 f3 ff ff       	call   c001ebe2 <Vm::inbv(unsigned short)>
c001f7f9:	83 c4 10             	add    esp,0x10
c001f7fc:	eb e9                	jmp    c001f7e7 <Vm::faultHandler(regs*)+0x810>
c001f7fe:	31 c0                	xor    eax,eax
c001f800:	83 c4 1c             	add    esp,0x1c
c001f803:	5b                   	pop    ebx
c001f804:	5e                   	pop    esi
c001f805:	5f                   	pop    edi
c001f806:	5d                   	pop    ebp
c001f807:	c3                   	ret    

c001f808 <Vm::fpuInternalTo32(unsigned long long)>:
c001f808:	57                   	push   edi
c001f809:	56                   	push   esi
c001f80a:	53                   	push   ebx
c001f80b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	89 d6                	mov    esi,edx
c001f815:	89 d7                	mov    edi,edx
c001f817:	89 c1                	mov    ecx,eax
c001f819:	c1 ef 14             	shr    edi,0x14
c001f81c:	89 d3                	mov    ebx,edx
c001f81e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f824:	31 d2                	xor    edx,edx
c001f826:	89 f8                	mov    eax,edi
c001f828:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f82e:	bf ff 00 00 00       	mov    edi,0xff
c001f833:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f838:	83 d2 ff             	adc    edx,0xffffffff
c001f83b:	39 c7                	cmp    edi,eax
c001f83d:	bf 00 00 00 00       	mov    edi,0x0
c001f842:	19 d7                	sbb    edi,edx
c001f844:	72 15                	jb     c001f85b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f846:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f84a:	c1 e0 17             	shl    eax,0x17
c001f84d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f853:	09 f1                	or     ecx,esi
c001f855:	09 c1                	or     ecx,eax
c001f857:	89 cf                	mov    edi,ecx
c001f859:	eb 02                	jmp    c001f85d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f85b:	31 ff                	xor    edi,edi
c001f85d:	89 f8                	mov    eax,edi
c001f85f:	5b                   	pop    ebx
c001f860:	5e                   	pop    esi
c001f861:	5f                   	pop    edi
c001f862:	c3                   	ret    

c001f863 <Vm::fpuInternalTo64(unsigned long long)>:
c001f863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f867:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f86b:	c3                   	ret    

c001f86c <Vm::fpu32ToInternal(unsigned int)>:
c001f86c:	57                   	push   edi
c001f86d:	31 ff                	xor    edi,edi
c001f86f:	56                   	push   esi
c001f870:	53                   	push   ebx
c001f871:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f875:	89 cb                	mov    ebx,ecx
c001f877:	89 ce                	mov    esi,ecx
c001f879:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f87f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f885:	c1 e9 17             	shr    ecx,0x17
c001f888:	89 f0                	mov    eax,esi
c001f88a:	0f b6 d1             	movzx  edx,cl
c001f88d:	81 c2 80 03 00 00    	add    edx,0x380
c001f893:	89 d1                	mov    ecx,edx
c001f895:	89 fa                	mov    edx,edi
c001f897:	c1 e1 14             	shl    ecx,0x14
c001f89a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f89e:	c1 e0 1d             	shl    eax,0x1d
c001f8a1:	89 d7                	mov    edi,edx
c001f8a3:	89 c6                	mov    esi,eax
c001f8a5:	89 ca                	mov    edx,ecx
c001f8a7:	89 f0                	mov    eax,esi
c001f8a9:	09 fa                	or     edx,edi
c001f8ab:	09 da                	or     edx,ebx
c001f8ad:	5b                   	pop    ebx
c001f8ae:	5e                   	pop    esi
c001f8af:	5f                   	pop    edi
c001f8b0:	c3                   	ret    

c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>:
c001f8b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8b9:	c3                   	ret    

c001f8ba <Vm::fpuFloatToLong(unsigned long long)>:
c001f8ba:	57                   	push   edi
c001f8bb:	31 c0                	xor    eax,eax
c001f8bd:	56                   	push   esi
c001f8be:	31 d2                	xor    edx,edx
c001f8c0:	53                   	push   ebx
c001f8c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f8c9:	89 d9                	mov    ecx,ebx
c001f8cb:	c1 e9 14             	shr    ecx,0x14
c001f8ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f8d4:	89 cf                	mov    edi,ecx
c001f8d6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f8dc:	78 33                	js     c001f911 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f8de:	89 d9                	mov    ecx,ebx
c001f8e0:	89 f0                	mov    eax,esi
c001f8e2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8e8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f8ee:	89 ca                	mov    edx,ecx
c001f8f0:	b9 34 00 00 00       	mov    ecx,0x34
c001f8f5:	29 f9                	sub    ecx,edi
c001f8f7:	0f ad d0             	shrd   eax,edx,cl
c001f8fa:	d3 fa                	sar    edx,cl
c001f8fc:	f6 c1 20             	test   cl,0x20
c001f8ff:	74 05                	je     c001f906 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f901:	89 d0                	mov    eax,edx
c001f903:	c1 fa 1f             	sar    edx,0x1f
c001f906:	85 db                	test   ebx,ebx
c001f908:	79 07                	jns    c001f911 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f90a:	f7 d8                	neg    eax
c001f90c:	83 d2 00             	adc    edx,0x0
c001f90f:	f7 da                	neg    edx
c001f911:	5b                   	pop    ebx
c001f912:	5e                   	pop    esi
c001f913:	5f                   	pop    edi
c001f914:	c3                   	ret    

c001f915 <Vm::fpuULongToFloat(unsigned long long)>:
c001f915:	57                   	push   edi
c001f916:	31 c9                	xor    ecx,ecx
c001f918:	56                   	push   esi
c001f919:	53                   	push   ebx
c001f91a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f91e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f922:	0f ba e7 14          	bt     edi,0x14
c001f926:	72 07                	jb     c001f92f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f928:	01 f6                	add    esi,esi
c001f92a:	11 ff                	adc    edi,edi
c001f92c:	41                   	inc    ecx
c001f92d:	eb f3                	jmp    c001f922 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f92f:	89 fa                	mov    edx,edi
c001f931:	89 f0                	mov    eax,esi
c001f933:	bb 33 04 00 00       	mov    ebx,0x433
c001f938:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f93e:	29 cb                	sub    ebx,ecx
c001f940:	89 d9                	mov    ecx,ebx
c001f942:	5b                   	pop    ebx
c001f943:	c1 e1 14             	shl    ecx,0x14
c001f946:	5e                   	pop    esi
c001f947:	09 ca                	or     edx,ecx
c001f949:	5f                   	pop    edi
c001f94a:	c3                   	ret    

c001f94b <Vm::fpuLongToFloat(long long)>:
c001f94b:	56                   	push   esi
c001f94c:	31 c0                	xor    eax,eax
c001f94e:	53                   	push   ebx
c001f94f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f953:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f957:	39 c8                	cmp    eax,ecx
c001f959:	19 d8                	sbb    eax,ebx
c001f95b:	7d 04                	jge    c001f961 <Vm::fpuLongToFloat(long long)+0x16>
c001f95d:	31 f6                	xor    esi,esi
c001f95f:	eb 0c                	jmp    c001f96d <Vm::fpuLongToFloat(long long)+0x22>
c001f961:	f7 d9                	neg    ecx
c001f963:	be 01 00 00 00       	mov    esi,0x1
c001f968:	83 d3 00             	adc    ebx,0x0
c001f96b:	f7 db                	neg    ebx
c001f96d:	31 c0                	xor    eax,eax
c001f96f:	0f ba e3 14          	bt     ebx,0x14
c001f973:	72 07                	jb     c001f97c <Vm::fpuLongToFloat(long long)+0x31>
c001f975:	01 c9                	add    ecx,ecx
c001f977:	11 db                	adc    ebx,ebx
c001f979:	40                   	inc    eax
c001f97a:	eb f3                	jmp    c001f96f <Vm::fpuLongToFloat(long long)+0x24>
c001f97c:	ba 33 04 00 00       	mov    edx,0x433
c001f981:	29 c2                	sub    edx,eax
c001f983:	89 c8                	mov    eax,ecx
c001f985:	c1 e2 14             	shl    edx,0x14
c001f988:	89 d9                	mov    ecx,ebx
c001f98a:	89 f3                	mov    ebx,esi
c001f98c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f992:	09 ca                	or     edx,ecx
c001f994:	84 db                	test   bl,bl
c001f996:	74 06                	je     c001f99e <Vm::fpuLongToFloat(long long)+0x53>
c001f998:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f99e:	5b                   	pop    ebx
c001f99f:	5e                   	pop    esi
c001f9a0:	c3                   	ret    

c001f9a1 <Vm::fpuGet0()>:
c001f9a1:	31 c0                	xor    eax,eax
c001f9a3:	31 d2                	xor    edx,edx
c001f9a5:	c3                   	ret    

c001f9a6 <Vm::fpuGet1()>:
c001f9a6:	b8 01 00 00 00       	mov    eax,0x1
c001f9ab:	31 d2                	xor    edx,edx
c001f9ad:	c3                   	ret    

c001f9ae <Vm::fpuGetPi()>:
c001f9ae:	b8 03 00 00 00       	mov    eax,0x3
c001f9b3:	31 d2                	xor    edx,edx
c001f9b5:	c3                   	ret    

c001f9b6 <Vm::fpuGetLog2E()>:
c001f9b6:	83 ec 18             	sub    esp,0x18
c001f9b9:	68 cc cc 02 c0       	push   0xc002cccc
c001f9be:	e8 94 ac ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001f9c3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9c8:	31 d2                	xor    edx,edx
c001f9ca:	83 c4 1c             	add    esp,0x1c
c001f9cd:	c3                   	ret    

c001f9ce <Vm::fpuGetLogE2()>:
c001f9ce:	83 ec 18             	sub    esp,0x18
c001f9d1:	68 d8 cc 02 c0       	push   0xc002ccd8
c001f9d6:	e8 7c ac ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001f9db:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9e0:	31 d2                	xor    edx,edx
c001f9e2:	83 c4 1c             	add    esp,0x1c
c001f9e5:	c3                   	ret    

c001f9e6 <Vm::fpuGetLog210()>:
c001f9e6:	83 ec 18             	sub    esp,0x18
c001f9e9:	68 e4 cc 02 c0       	push   0xc002cce4
c001f9ee:	e8 64 ac ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001f9f3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9f8:	31 d2                	xor    edx,edx
c001f9fa:	83 c4 1c             	add    esp,0x1c
c001f9fd:	c3                   	ret    

c001f9fe <Vm::fpuGetLog102()>:
c001f9fe:	83 ec 18             	sub    esp,0x18
c001fa01:	68 f1 cc 02 c0       	push   0xc002ccf1
c001fa06:	e8 4c ac ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001fa0b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fa10:	31 d2                	xor    edx,edx
c001fa12:	83 c4 1c             	add    esp,0x1c
c001fa15:	c3                   	ret    

c001fa16 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fa16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa1a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fa1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa22:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fa26:	0f 92 c0             	setb   al
c001fa29:	c3                   	ret    

c001fa2a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fa2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fa36:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fa3a:	09 c2                	or     edx,eax
c001fa3c:	0f 94 c0             	sete   al
c001fa3f:	c3                   	ret    

c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fa40:	57                   	push   edi
c001fa41:	56                   	push   esi
c001fa42:	53                   	push   ebx
c001fa43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa4b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa53:	57                   	push   edi
c001fa54:	56                   	push   esi
c001fa55:	53                   	push   ebx
c001fa56:	51                   	push   ecx
c001fa57:	e8 ce ff ff ff       	call   c001fa2a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fa5c:	83 c4 10             	add    esp,0x10
c001fa5f:	88 c2                	mov    dl,al
c001fa61:	31 c0                	xor    eax,eax
c001fa63:	84 d2                	test   dl,dl
c001fa65:	75 0c                	jne    c001fa73 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fa67:	57                   	push   edi
c001fa68:	56                   	push   esi
c001fa69:	53                   	push   ebx
c001fa6a:	51                   	push   ecx
c001fa6b:	e8 a6 ff ff ff       	call   c001fa16 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fa70:	83 c4 10             	add    esp,0x10
c001fa73:	83 e0 01             	and    eax,0x1
c001fa76:	5b                   	pop    ebx
c001fa77:	88 c1                	mov    cl,al
c001fa79:	83 e2 01             	and    edx,0x1
c001fa7c:	a0 81 1f 03 c0       	mov    al,ds:0xc0031f81
c001fa81:	c1 e2 06             	shl    edx,0x6
c001fa84:	83 e0 ba             	and    eax,0xffffffba
c001fa87:	5e                   	pop    esi
c001fa88:	09 c8                	or     eax,ecx
c001fa8a:	5f                   	pop    edi
c001fa8b:	09 d0                	or     eax,edx
c001fa8d:	a2 81 1f 03 c0       	mov    ds:0xc0031f81,al
c001fa92:	c3                   	ret    

c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fa93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa9b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fa9f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001faa3:	c3                   	ret    

c001faa4 <Vm::fpuAbs(unsigned long long)>:
c001faa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001faac:	c3                   	ret    

c001faad <Vm::fpuChs(unsigned long long)>:
c001faad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fab5:	f7 d8                	neg    eax
c001fab7:	83 d2 00             	adc    edx,0x0
c001faba:	f7 da                	neg    edx
c001fabc:	c3                   	ret    

c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fabd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fac1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fac6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001faca:	eb c7                	jmp    c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001facc:	53                   	push   ebx
c001facd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fad1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fad5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fad9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fadd:	0f af ca             	imul   ecx,edx
c001fae0:	0f af d8             	imul   ebx,eax
c001fae3:	f7 e2                	mul    edx
c001fae5:	01 d9                	add    ecx,ebx
c001fae7:	5b                   	pop    ebx
c001fae8:	01 ca                	add    edx,ecx
c001faea:	c3                   	ret    

c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001faeb:	83 ec 0c             	sub    esp,0xc
c001faee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fafe:	e8 31 72 00 00       	call   c0026d34 <__udivdi3>
c001fb03:	83 c4 1c             	add    esp,0x1c
c001fb06:	c3                   	ret    

c001fb07 <Vm::fpuSquare(unsigned long long)>:
c001fb07:	50                   	push   eax
c001fb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb10:	52                   	push   edx
c001fb11:	50                   	push   eax
c001fb12:	52                   	push   edx
c001fb13:	50                   	push   eax
c001fb14:	e8 b3 ff ff ff       	call   c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb19:	83 c4 14             	add    esp,0x14
c001fb1c:	c3                   	ret    

c001fb1d <Vm::fpuGetReg(int)>:
c001fb1d:	83 ec 0c             	sub    esp,0xc
c001fb20:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb25:	76 10                	jbe    c001fb37 <Vm::fpuGetReg(int)+0x1a>
c001fb27:	83 ec 0c             	sub    esp,0xc
c001fb2a:	68 fe cc 02 c0       	push   0xc002ccfe
c001fb2f:	e8 23 ab ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001fb34:	83 c4 10             	add    esp,0x10
c001fb37:	a0 81 1f 03 c0       	mov    al,ds:0xc0031f81
c001fb3c:	b9 08 00 00 00       	mov    ecx,0x8
c001fb41:	c0 e8 03             	shr    al,0x3
c001fb44:	83 e0 07             	and    eax,0x7
c001fb47:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb4b:	99                   	cdq    
c001fb4c:	f7 f9                	idiv   ecx
c001fb4e:	8b 04 d5 84 1f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce07c]
c001fb55:	8b 14 d5 88 1f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce078]
c001fb5c:	83 c4 0c             	add    esp,0xc
c001fb5f:	c3                   	ret    

c001fb60 <Vm::fpuSetReg(int, unsigned long long)>:
c001fb60:	57                   	push   edi
c001fb61:	56                   	push   esi
c001fb62:	52                   	push   edx
c001fb63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fb67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fb6b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb70:	76 10                	jbe    c001fb82 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	68 11 cd 02 c0       	push   0xc002cd11
c001fb7a:	e8 d8 aa ff ff       	call   c001a657 <Krnl::panic(char const*)>
c001fb7f:	83 c4 10             	add    esp,0x10
c001fb82:	a0 81 1f 03 c0       	mov    al,ds:0xc0031f81
c001fb87:	b9 08 00 00 00       	mov    ecx,0x8
c001fb8c:	c0 e8 03             	shr    al,0x3
c001fb8f:	83 e0 07             	and    eax,0x7
c001fb92:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb96:	99                   	cdq    
c001fb97:	f7 f9                	idiv   ecx
c001fb99:	89 34 d5 84 1f 03 c0 	mov    DWORD PTR [edx*8-0x3ffce07c],esi
c001fba0:	89 3c d5 88 1f 03 c0 	mov    DWORD PTR [edx*8-0x3ffce078],edi
c001fba7:	58                   	pop    eax
c001fba8:	5e                   	pop    esi
c001fba9:	5f                   	pop    edi
c001fbaa:	c3                   	ret    

c001fbab <Vm::fpuPush(unsigned long long)>:
c001fbab:	a0 81 1f 03 c0       	mov    al,ds:0xc0031f81
c001fbb0:	c0 e8 03             	shr    al,0x3
c001fbb3:	83 e0 07             	and    eax,0x7
c001fbb6:	83 c0 07             	add    eax,0x7
c001fbb9:	88 c2                	mov    dl,al
c001fbbb:	83 e0 07             	and    eax,0x7
c001fbbe:	83 e2 07             	and    edx,0x7
c001fbc1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fbc8:	8a 15 81 1f 03 c0    	mov    dl,BYTE PTR ds:0xc0031f81
c001fbce:	83 e2 c7             	and    edx,0xffffffc7
c001fbd1:	09 ca                	or     edx,ecx
c001fbd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbd7:	88 15 81 1f 03 c0    	mov    BYTE PTR ds:0xc0031f81,dl
c001fbdd:	89 0c c5 88 1f 03 c0 	mov    DWORD PTR [eax*8-0x3ffce078],ecx
c001fbe4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fbe8:	89 14 c5 84 1f 03 c0 	mov    DWORD PTR [eax*8-0x3ffce07c],edx
c001fbef:	a1 c4 1f 03 c0       	mov    eax,ds:0xc0031fc4
c001fbf4:	83 f8 08             	cmp    eax,0x8
c001fbf7:	75 08                	jne    c001fc01 <Vm::fpuPush(unsigned long long)+0x56>
c001fbf9:	80 0d 80 1f 03 c0 40 	or     BYTE PTR ds:0xc0031f80,0x40
c001fc00:	c3                   	ret    
c001fc01:	40                   	inc    eax
c001fc02:	a3 c4 1f 03 c0       	mov    ds:0xc0031fc4,eax
c001fc07:	c3                   	ret    

c001fc08 <Vm::fpuPop()>:
c001fc08:	8a 0d 81 1f 03 c0    	mov    cl,BYTE PTR ds:0xc0031f81
c001fc0e:	53                   	push   ebx
c001fc0f:	c0 e9 03             	shr    cl,0x3
c001fc12:	8a 1d 81 1f 03 c0    	mov    bl,BYTE PTR ds:0xc0031f81
c001fc18:	83 e1 07             	and    ecx,0x7
c001fc1b:	83 e3 c7             	and    ebx,0xffffffc7
c001fc1e:	8b 04 cd 84 1f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce07c]
c001fc25:	8b 14 cd 88 1f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce078]
c001fc2c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fc33:	83 e1 38             	and    ecx,0x38
c001fc36:	09 d9                	or     ecx,ebx
c001fc38:	88 0d 81 1f 03 c0    	mov    BYTE PTR ds:0xc0031f81,cl
c001fc3e:	8b 0d c4 1f 03 c0    	mov    ecx,DWORD PTR ds:0xc0031fc4
c001fc44:	85 c9                	test   ecx,ecx
c001fc46:	74 09                	je     c001fc51 <Vm::fpuPop()+0x49>
c001fc48:	49                   	dec    ecx
c001fc49:	89 0d c4 1f 03 c0    	mov    DWORD PTR ds:0xc0031fc4,ecx
c001fc4f:	eb 07                	jmp    c001fc58 <Vm::fpuPop()+0x50>
c001fc51:	80 0d 80 1f 03 c0 40 	or     BYTE PTR ds:0xc0031f80,0x40
c001fc58:	5b                   	pop    ebx
c001fc59:	c3                   	ret    

c001fc5a <Vm::x87Handler(regs*)>:
c001fc5a:	55                   	push   ebp
c001fc5b:	57                   	push   edi
c001fc5c:	56                   	push   esi
c001fc5d:	53                   	push   ebx
c001fc5e:	83 ec 1c             	sub    esp,0x1c
c001fc61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc65:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fc6a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fc6d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fc75:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fc79:	50                   	push   eax
c001fc7a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fc7e:	50                   	push   eax
c001fc7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc83:	50                   	push   eax
c001fc84:	53                   	push   ebx
c001fc85:	e8 94 a0 ff ff       	call   c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fc8a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	89 c6                	mov    esi,eax
c001fc92:	80 fa d9             	cmp    dl,0xd9
c001fc95:	0f 85 52 01 00 00    	jne    c001fded <Vm::x87Handler(regs*)+0x193>
c001fc9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9f:	8d 50 20             	lea    edx,[eax+0x20]
c001fca2:	80 fa 0e             	cmp    dl,0xe
c001fca5:	0f 87 86 00 00 00    	ja     c001fd31 <Vm::x87Handler(regs*)+0xd7>
c001fcab:	0f b6 d2             	movzx  edx,dl
c001fcae:	ff 24 95 24 cd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd32dc]
c001fcb5:	e8 e7 fc ff ff       	call   c001f9a1 <Vm::fpuGet0()>
c001fcba:	eb 05                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fcbc:	e8 e5 fc ff ff       	call   c001f9a6 <Vm::fpuGet1()>
c001fcc1:	57                   	push   edi
c001fcc2:	57                   	push   edi
c001fcc3:	52                   	push   edx
c001fcc4:	50                   	push   eax
c001fcc5:	e8 e1 fe ff ff       	call   c001fbab <Vm::fpuPush(unsigned long long)>
c001fcca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	b0 01                	mov    al,0x1
c001fcd3:	e9 e3 09 00 00       	jmp    c00206bb <Vm::x87Handler(regs*)+0xa61>
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	6a 00                	push   0x0
c001fcdd:	e8 3b fe ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fce2:	59                   	pop    ecx
c001fce3:	5e                   	pop    esi
c001fce4:	52                   	push   edx
c001fce5:	50                   	push   eax
c001fce6:	e8 c2 fd ff ff       	call   c001faad <Vm::fpuChs(unsigned long long)>
c001fceb:	eb 13                	jmp    c001fd00 <Vm::x87Handler(regs*)+0xa6>
c001fced:	83 ec 0c             	sub    esp,0xc
c001fcf0:	6a 00                	push   0x0
c001fcf2:	e8 26 fe ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fcf7:	5f                   	pop    edi
c001fcf8:	5d                   	pop    ebp
c001fcf9:	52                   	push   edx
c001fcfa:	50                   	push   eax
c001fcfb:	e8 a4 fd ff ff       	call   c001faa4 <Vm::fpuAbs(unsigned long long)>
c001fd00:	83 c4 0c             	add    esp,0xc
c001fd03:	52                   	push   edx
c001fd04:	50                   	push   eax
c001fd05:	6a 00                	push   0x0
c001fd07:	e8 54 fe ff ff       	call   c001fb60 <Vm::fpuSetReg(int, unsigned long long)>
c001fd0c:	eb bc                	jmp    c001fcca <Vm::x87Handler(regs*)+0x70>
c001fd0e:	e8 d3 fc ff ff       	call   c001f9e6 <Vm::fpuGetLog210()>
c001fd13:	eb ac                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fd15:	e8 9c fc ff ff       	call   c001f9b6 <Vm::fpuGetLog2E()>
c001fd1a:	eb a5                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fd1c:	e8 8d fc ff ff       	call   c001f9ae <Vm::fpuGetPi()>
c001fd21:	eb 9e                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fd23:	e8 d6 fc ff ff       	call   c001f9fe <Vm::fpuGetLog102()>
c001fd28:	eb 97                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fd2a:	e8 9f fc ff ff       	call   c001f9ce <Vm::fpuGetLogE2()>
c001fd2f:	eb 90                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x67>
c001fd31:	8d 50 40             	lea    edx,[eax+0x40]
c001fd34:	80 fa 07             	cmp    dl,0x7
c001fd37:	77 15                	ja     c001fd4e <Vm::x87Handler(regs*)+0xf4>
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd41:	50                   	push   eax
c001fd42:	e8 d6 fd ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fd47:	59                   	pop    ecx
c001fd48:	5e                   	pop    esi
c001fd49:	e9 75 ff ff ff       	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x69>
c001fd4e:	8d 50 38             	lea    edx,[eax+0x38]
c001fd51:	80 fa 07             	cmp    dl,0x7
c001fd54:	77 3c                	ja     c001fd92 <Vm::x87Handler(regs*)+0x138>
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	2d c8 00 00 00       	sub    eax,0xc8
c001fd5e:	50                   	push   eax
c001fd5f:	e8 b9 fd ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fd64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6b:	89 c6                	mov    esi,eax
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	e8 a9 fd ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fd74:	83 c4 0c             	add    esp,0xc
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7d:	2d c8 00 00 00       	sub    eax,0xc8
c001fd82:	50                   	push   eax
c001fd83:	e8 d8 fd ff ff       	call   c001fb60 <Vm::fpuSetReg(int, unsigned long long)>
c001fd88:	83 c4 0c             	add    esp,0xc
c001fd8b:	57                   	push   edi
c001fd8c:	56                   	push   esi
c001fd8d:	e9 73 ff ff ff       	jmp    c001fd05 <Vm::x87Handler(regs*)+0xab>
c001fd92:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd96:	84 d2                	test   dl,dl
c001fd98:	75 0f                	jne    c001fda9 <Vm::x87Handler(regs*)+0x14f>
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	ff 36                	push   DWORD PTR [esi]
c001fd9f:	e8 c8 fa ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c001fda4:	e9 bf 00 00 00       	jmp    c001fe68 <Vm::x87Handler(regs*)+0x20e>
c001fda9:	80 fa 03             	cmp    dl,0x3
c001fdac:	75 13                	jne    c001fdc1 <Vm::x87Handler(regs*)+0x167>
c001fdae:	e8 55 fe ff ff       	call   c001fc08 <Vm::fpuPop()>
c001fdb3:	55                   	push   ebp
c001fdb4:	55                   	push   ebp
c001fdb5:	52                   	push   edx
c001fdb6:	50                   	push   eax
c001fdb7:	e8 4c fa ff ff       	call   c001f808 <Vm::fpuInternalTo32(unsigned long long)>
c001fdbc:	e9 88 00 00 00       	jmp    c001fe49 <Vm::x87Handler(regs*)+0x1ef>
c001fdc1:	80 fa 05             	cmp    dl,0x5
c001fdc4:	75 0e                	jne    c001fdd4 <Vm::x87Handler(regs*)+0x17a>
c001fdc6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fdc9:	66 a3 82 1f 03 c0    	mov    ds:0xc0031f82,ax
c001fdcf:	e9 df 00 00 00       	jmp    c001feb3 <Vm::x87Handler(regs*)+0x259>
c001fdd4:	31 c0                	xor    eax,eax
c001fdd6:	80 fa 07             	cmp    dl,0x7
c001fdd9:	0f 85 dc 08 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c001fddf:	66 a1 82 1f 03 c0    	mov    ax,ds:0xc0031f82
c001fde5:	66 89 06             	mov    WORD PTR [esi],ax
c001fde8:	e9 c6 00 00 00       	jmp    c001feb3 <Vm::x87Handler(regs*)+0x259>
c001fded:	80 fa d8             	cmp    dl,0xd8
c001fdf0:	0f 84 c9 00 00 00    	je     c001febf <Vm::x87Handler(regs*)+0x265>
c001fdf6:	80 fa dc             	cmp    dl,0xdc
c001fdf9:	0f 84 0d 02 00 00    	je     c002000c <Vm::x87Handler(regs*)+0x3b2>
c001fdff:	80 fa de             	cmp    dl,0xde
c001fe02:	0f 84 cd 02 00 00    	je     c00200d5 <Vm::x87Handler(regs*)+0x47b>
c001fe08:	80 fa dd             	cmp    dl,0xdd
c001fe0b:	0f 84 5f 04 00 00    	je     c0020270 <Vm::x87Handler(regs*)+0x616>
c001fe11:	80 fa da             	cmp    dl,0xda
c001fe14:	0f 84 24 05 00 00    	je     c002033e <Vm::x87Handler(regs*)+0x6e4>
c001fe1a:	80 fa df             	cmp    dl,0xdf
c001fe1d:	0f 84 68 05 00 00    	je     c002038b <Vm::x87Handler(regs*)+0x731>
c001fe23:	31 c0                	xor    eax,eax
c001fe25:	80 fa db             	cmp    dl,0xdb
c001fe28:	0f 85 8d 08 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c001fe2e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe32:	80 fa 03             	cmp    dl,0x3
c001fe35:	0f 85 70 06 00 00    	jne    c00204ab <Vm::x87Handler(regs*)+0x851>
c001fe3b:	e8 c8 fd ff ff       	call   c001fc08 <Vm::fpuPop()>
c001fe40:	55                   	push   ebp
c001fe41:	55                   	push   ebp
c001fe42:	52                   	push   edx
c001fe43:	50                   	push   eax
c001fe44:	e8 71 fa ff ff       	call   c001f8ba <Vm::fpuFloatToLong(unsigned long long)>
c001fe49:	83 c4 10             	add    esp,0x10
c001fe4c:	89 06                	mov    DWORD PTR [esi],eax
c001fe4e:	eb 63                	jmp    c001feb3 <Vm::x87Handler(regs*)+0x259>
c001fe50:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe54:	84 d2                	test   dl,dl
c001fe56:	0f 85 e6 05 00 00    	jne    c0020442 <Vm::x87Handler(regs*)+0x7e8>
c001fe5c:	57                   	push   edi
c001fe5d:	57                   	push   edi
c001fe5e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe61:	ff 36                	push   DWORD PTR [esi]
c001fe63:	e8 49 fa ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c001fe68:	5e                   	pop    esi
c001fe69:	5f                   	pop    edi
c001fe6a:	52                   	push   edx
c001fe6b:	50                   	push   eax
c001fe6c:	e8 3a fd ff ff       	call   c001fbab <Vm::fpuPush(unsigned long long)>
c001fe71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe75:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe78:	e9 51 fe ff ff       	jmp    c001fcce <Vm::x87Handler(regs*)+0x74>
c001fe7d:	80 fa 03             	cmp    dl,0x3
c001fe80:	0f 85 d7 06 00 00    	jne    c002055d <Vm::x87Handler(regs*)+0x903>
c001fe86:	57                   	push   edi
c001fe87:	57                   	push   edi
c001fe88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe8b:	ff 36                	push   DWORD PTR [esi]
c001fe8d:	e8 1f fa ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c001fe92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe99:	89 c6                	mov    esi,eax
c001fe9b:	89 d7                	mov    edi,edx
c001fe9d:	e8 7b fc ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fea2:	57                   	push   edi
c001fea3:	56                   	push   esi
c001fea4:	52                   	push   edx
c001fea5:	50                   	push   eax
c001fea6:	e8 95 fb ff ff       	call   c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001feab:	83 c4 20             	add    esp,0x20
c001feae:	e8 55 fd ff ff       	call   c001fc08 <Vm::fpuPop()>
c001feb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001feb7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001feba:	e9 12 fe ff ff       	jmp    c001fcd1 <Vm::x87Handler(regs*)+0x77>
c001febf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec3:	8d 50 40             	lea    edx,[eax+0x40]
c001fec6:	80 fa 07             	cmp    dl,0x7
c001fec9:	77 29                	ja     c001fef4 <Vm::x87Handler(regs*)+0x29a>
c001fecb:	83 ec 0c             	sub    esp,0xc
c001fece:	2d c0 00 00 00       	sub    eax,0xc0
c001fed3:	50                   	push   eax
c001fed4:	e8 44 fc ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fed9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fee0:	89 c6                	mov    esi,eax
c001fee2:	89 d7                	mov    edi,edx
c001fee4:	e8 34 fc ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fee9:	57                   	push   edi
c001feea:	56                   	push   esi
c001feeb:	52                   	push   edx
c001feec:	50                   	push   eax
c001feed:	e8 a1 fb ff ff       	call   c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fef2:	eb 2f                	jmp    c001ff23 <Vm::x87Handler(regs*)+0x2c9>
c001fef4:	8d 50 38             	lea    edx,[eax+0x38]
c001fef7:	80 fa 07             	cmp    dl,0x7
c001fefa:	77 2f                	ja     c001ff2b <Vm::x87Handler(regs*)+0x2d1>
c001fefc:	83 ec 0c             	sub    esp,0xc
c001feff:	2d c8 00 00 00       	sub    eax,0xc8
c001ff04:	50                   	push   eax
c001ff05:	e8 13 fc ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ff0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff11:	89 c6                	mov    esi,eax
c001ff13:	89 d7                	mov    edi,edx
c001ff15:	e8 03 fc ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ff1a:	57                   	push   edi
c001ff1b:	56                   	push   esi
c001ff1c:	52                   	push   edx
c001ff1d:	50                   	push   eax
c001ff1e:	e8 a9 fb ff ff       	call   c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff23:	83 c4 1c             	add    esp,0x1c
c001ff26:	e9 d8 fd ff ff       	jmp    c001fd03 <Vm::x87Handler(regs*)+0xa9>
c001ff2b:	8d 50 30             	lea    edx,[eax+0x30]
c001ff2e:	80 fa 07             	cmp    dl,0x7
c001ff31:	77 0d                	ja     c001ff40 <Vm::x87Handler(regs*)+0x2e6>
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	2d d0 00 00 00       	sub    eax,0xd0
c001ff3b:	e9 99 03 00 00       	jmp    c00202d9 <Vm::x87Handler(regs*)+0x67f>
c001ff40:	8d 50 28             	lea    edx,[eax+0x28]
c001ff43:	80 fa 07             	cmp    dl,0x7
c001ff46:	77 0d                	ja     c001ff55 <Vm::x87Handler(regs*)+0x2fb>
c001ff48:	83 ec 0c             	sub    esp,0xc
c001ff4b:	2d d8 00 00 00       	sub    eax,0xd8
c001ff50:	e9 c0 03 00 00       	jmp    c0020315 <Vm::x87Handler(regs*)+0x6bb>
c001ff55:	8d 50 20             	lea    edx,[eax+0x20]
c001ff58:	80 fa 07             	cmp    dl,0x7
c001ff5b:	77 1b                	ja     c001ff78 <Vm::x87Handler(regs*)+0x31e>
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	2d e0 00 00 00       	sub    eax,0xe0
c001ff65:	50                   	push   eax
c001ff66:	e8 b2 fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ff6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff72:	89 c6                	mov    esi,eax
c001ff74:	89 d7                	mov    edi,edx
c001ff76:	eb 22                	jmp    c001ff9a <Vm::x87Handler(regs*)+0x340>
c001ff78:	8d 50 18             	lea    edx,[eax+0x18]
c001ff7b:	80 fa 07             	cmp    dl,0x7
c001ff7e:	77 2d                	ja     c001ffad <Vm::x87Handler(regs*)+0x353>
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	6a 00                	push   0x0
c001ff85:	e8 93 fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ff8a:	89 c6                	mov    esi,eax
c001ff8c:	89 d7                	mov    edi,edx
c001ff8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff92:	2d e8 00 00 00       	sub    eax,0xe8
c001ff97:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff9a:	e8 7e fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ff9f:	57                   	push   edi
c001ffa0:	56                   	push   esi
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	e8 15 fb ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa8:	e9 76 ff ff ff       	jmp    c001ff23 <Vm::x87Handler(regs*)+0x2c9>
c001ffad:	8d 50 10             	lea    edx,[eax+0x10]
c001ffb0:	80 fa 07             	cmp    dl,0x7
c001ffb3:	77 1b                	ja     c001ffd0 <Vm::x87Handler(regs*)+0x376>
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	2d f0 00 00 00       	sub    eax,0xf0
c001ffbd:	50                   	push   eax
c001ffbe:	e8 5a fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ffc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffca:	89 c6                	mov    esi,eax
c001ffcc:	89 d7                	mov    edi,edx
c001ffce:	eb 22                	jmp    c001fff2 <Vm::x87Handler(regs*)+0x398>
c001ffd0:	3c f7                	cmp    al,0xf7
c001ffd2:	0f 86 d1 03 00 00    	jbe    c00203a9 <Vm::x87Handler(regs*)+0x74f>
c001ffd8:	83 ec 0c             	sub    esp,0xc
c001ffdb:	6a 00                	push   0x0
c001ffdd:	e8 3b fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001ffe2:	89 c6                	mov    esi,eax
c001ffe4:	89 d7                	mov    edi,edx
c001ffe6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffea:	2d f8 00 00 00       	sub    eax,0xf8
c001ffef:	89 04 24             	mov    DWORD PTR [esp],eax
c001fff2:	e8 26 fb ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c001fff7:	57                   	push   edi
c001fff8:	56                   	push   esi
c001fff9:	52                   	push   edx
c001fffa:	50                   	push   eax
c001fffb:	e8 eb fa ff ff       	call   c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020000:	83 c4 1c             	add    esp,0x1c
c0020003:	52                   	push   edx
c0020004:	50                   	push   eax
c0020005:	6a 00                	push   0x0
c0020007:	e9 51 02 00 00       	jmp    c002025d <Vm::x87Handler(regs*)+0x603>
c002000c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020010:	8d 50 40             	lea    edx,[eax+0x40]
c0020013:	80 fa 07             	cmp    dl,0x7
c0020016:	77 37                	ja     c002004f <Vm::x87Handler(regs*)+0x3f5>
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	2d c0 00 00 00       	sub    eax,0xc0
c0020020:	50                   	push   eax
c0020021:	e8 f7 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002d:	89 c6                	mov    esi,eax
c002002f:	89 d7                	mov    edi,edx
c0020031:	e8 e7 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020036:	57                   	push   edi
c0020037:	56                   	push   esi
c0020038:	52                   	push   edx
c0020039:	50                   	push   eax
c002003a:	e8 54 fa ff ff       	call   c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002003f:	83 c4 1c             	add    esp,0x1c
c0020042:	52                   	push   edx
c0020043:	50                   	push   eax
c0020044:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020048:	2d c0 00 00 00       	sub    eax,0xc0
c002004d:	eb 3d                	jmp    c002008c <Vm::x87Handler(regs*)+0x432>
c002004f:	8d 50 38             	lea    edx,[eax+0x38]
c0020052:	80 fa 07             	cmp    dl,0x7
c0020055:	77 3b                	ja     c0020092 <Vm::x87Handler(regs*)+0x438>
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	2d c8 00 00 00       	sub    eax,0xc8
c002005f:	50                   	push   eax
c0020060:	e8 b8 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020065:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002006c:	89 c6                	mov    esi,eax
c002006e:	89 d7                	mov    edi,edx
c0020070:	e8 a8 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020075:	57                   	push   edi
c0020076:	56                   	push   esi
c0020077:	52                   	push   edx
c0020078:	50                   	push   eax
c0020079:	e8 4e fa ff ff       	call   c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002007e:	83 c4 1c             	add    esp,0x1c
c0020081:	52                   	push   edx
c0020082:	50                   	push   eax
c0020083:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020087:	2d c8 00 00 00       	sub    eax,0xc8
c002008c:	50                   	push   eax
c002008d:	e9 75 fc ff ff       	jmp    c001fd07 <Vm::x87Handler(regs*)+0xad>
c0020092:	83 c0 18             	add    eax,0x18
c0020095:	3c 07                	cmp    al,0x7
c0020097:	0f 87 3b 04 00 00    	ja     c00204d8 <Vm::x87Handler(regs*)+0x87e>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	6a 00                	push   0x0
c00200a2:	e8 76 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00200a7:	89 c6                	mov    esi,eax
c00200a9:	89 d7                	mov    edi,edx
c00200ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200af:	2d e8 00 00 00       	sub    eax,0xe8
c00200b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00200b7:	e8 61 fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00200bc:	57                   	push   edi
c00200bd:	56                   	push   esi
c00200be:	52                   	push   edx
c00200bf:	50                   	push   eax
c00200c0:	e8 f8 f9 ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200c5:	83 c4 1c             	add    esp,0x1c
c00200c8:	52                   	push   edx
c00200c9:	50                   	push   eax
c00200ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ce:	2d e8 00 00 00       	sub    eax,0xe8
c00200d3:	eb b7                	jmp    c002008c <Vm::x87Handler(regs*)+0x432>
c00200d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d9:	8d 50 40             	lea    edx,[eax+0x40]
c00200dc:	80 fa 07             	cmp    dl,0x7
c00200df:	77 3a                	ja     c002011b <Vm::x87Handler(regs*)+0x4c1>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	2d c0 00 00 00       	sub    eax,0xc0
c00200e9:	50                   	push   eax
c00200ea:	e8 2e fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00200ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f6:	89 c6                	mov    esi,eax
c00200f8:	89 d7                	mov    edi,edx
c00200fa:	e8 1e fa ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00200ff:	57                   	push   edi
c0020100:	56                   	push   esi
c0020101:	52                   	push   edx
c0020102:	50                   	push   eax
c0020103:	e8 8b f9 ff ff       	call   c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020108:	83 c4 1c             	add    esp,0x1c
c002010b:	52                   	push   edx
c002010c:	50                   	push   eax
c002010d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020111:	2d c0 00 00 00       	sub    eax,0xc0
c0020116:	e9 9e 01 00 00       	jmp    c00202b9 <Vm::x87Handler(regs*)+0x65f>
c002011b:	8d 50 20             	lea    edx,[eax+0x20]
c002011e:	80 fa 07             	cmp    dl,0x7
c0020121:	77 3a                	ja     c002015d <Vm::x87Handler(regs*)+0x503>
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	2d e0 00 00 00       	sub    eax,0xe0
c002012b:	50                   	push   eax
c002012c:	e8 ec f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020131:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020138:	89 c6                	mov    esi,eax
c002013a:	89 d7                	mov    edi,edx
c002013c:	e8 dc f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020141:	57                   	push   edi
c0020142:	56                   	push   esi
c0020143:	52                   	push   edx
c0020144:	50                   	push   eax
c0020145:	e8 73 f9 ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c002014a:	83 c4 1c             	add    esp,0x1c
c002014d:	52                   	push   edx
c002014e:	50                   	push   eax
c002014f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020153:	2d e0 00 00 00       	sub    eax,0xe0
c0020158:	e9 5c 01 00 00       	jmp    c00202b9 <Vm::x87Handler(regs*)+0x65f>
c002015d:	8d 50 18             	lea    edx,[eax+0x18]
c0020160:	80 fa 07             	cmp    dl,0x7
c0020163:	77 3b                	ja     c00201a0 <Vm::x87Handler(regs*)+0x546>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	6a 00                	push   0x0
c002016a:	e8 ae f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c002016f:	89 c6                	mov    esi,eax
c0020171:	89 d7                	mov    edi,edx
c0020173:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020177:	2d e8 00 00 00       	sub    eax,0xe8
c002017c:	89 04 24             	mov    DWORD PTR [esp],eax
c002017f:	e8 99 f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020184:	57                   	push   edi
c0020185:	56                   	push   esi
c0020186:	52                   	push   edx
c0020187:	50                   	push   eax
c0020188:	e8 30 f9 ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c002018d:	83 c4 1c             	add    esp,0x1c
c0020190:	52                   	push   edx
c0020191:	50                   	push   eax
c0020192:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020196:	2d e8 00 00 00       	sub    eax,0xe8
c002019b:	e9 19 01 00 00       	jmp    c00202b9 <Vm::x87Handler(regs*)+0x65f>
c00201a0:	8d 50 38             	lea    edx,[eax+0x38]
c00201a3:	80 fa 07             	cmp    dl,0x7
c00201a6:	77 37                	ja     c00201df <Vm::x87Handler(regs*)+0x585>
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	2d c8 00 00 00       	sub    eax,0xc8
c00201b0:	50                   	push   eax
c00201b1:	e8 67 f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00201b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201bd:	89 c6                	mov    esi,eax
c00201bf:	89 d7                	mov    edi,edx
c00201c1:	e8 57 f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00201c6:	57                   	push   edi
c00201c7:	56                   	push   esi
c00201c8:	52                   	push   edx
c00201c9:	50                   	push   eax
c00201ca:	e8 fd f8 ff ff       	call   c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201cf:	83 c4 1c             	add    esp,0x1c
c00201d2:	52                   	push   edx
c00201d3:	50                   	push   eax
c00201d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201d8:	2d c8 00 00 00       	sub    eax,0xc8
c00201dd:	eb 7d                	jmp    c002025c <Vm::x87Handler(regs*)+0x602>
c00201df:	3c f7                	cmp    al,0xf7
c00201e1:	76 38                	jbe    c002021b <Vm::x87Handler(regs*)+0x5c1>
c00201e3:	83 ec 0c             	sub    esp,0xc
c00201e6:	6a 00                	push   0x0
c00201e8:	e8 30 f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00201ed:	89 c6                	mov    esi,eax
c00201ef:	89 d7                	mov    edi,edx
c00201f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201f5:	2d f8 00 00 00       	sub    eax,0xf8
c00201fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00201fd:	e8 1b f9 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020202:	57                   	push   edi
c0020203:	56                   	push   esi
c0020204:	52                   	push   edx
c0020205:	50                   	push   eax
c0020206:	e8 e0 f8 ff ff       	call   c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002020b:	83 c4 1c             	add    esp,0x1c
c002020e:	52                   	push   edx
c002020f:	50                   	push   eax
c0020210:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020214:	2d f8 00 00 00       	sub    eax,0xf8
c0020219:	eb 41                	jmp    c002025c <Vm::x87Handler(regs*)+0x602>
c002021b:	8d 50 10             	lea    edx,[eax+0x10]
c002021e:	80 fa 07             	cmp    dl,0x7
c0020221:	0f 87 5a 01 00 00    	ja     c0020381 <Vm::x87Handler(regs*)+0x727>
c0020227:	83 ec 0c             	sub    esp,0xc
c002022a:	2d f0 00 00 00       	sub    eax,0xf0
c002022f:	50                   	push   eax
c0020230:	e8 e8 f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020235:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002023c:	89 c6                	mov    esi,eax
c002023e:	89 d7                	mov    edi,edx
c0020240:	e8 d8 f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020245:	57                   	push   edi
c0020246:	56                   	push   esi
c0020247:	52                   	push   edx
c0020248:	50                   	push   eax
c0020249:	e8 9d f8 ff ff       	call   c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002024e:	83 c4 1c             	add    esp,0x1c
c0020251:	52                   	push   edx
c0020252:	50                   	push   eax
c0020253:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020257:	2d f0 00 00 00       	sub    eax,0xf0
c002025c:	50                   	push   eax
c002025d:	e8 fe f8 ff ff       	call   c001fb60 <Vm::fpuSetReg(int, unsigned long long)>
c0020262:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020266:	e8 9d f9 ff ff       	call   c001fc08 <Vm::fpuPop()>
c002026b:	e9 5e fa ff ff       	jmp    c001fcce <Vm::x87Handler(regs*)+0x74>
c0020270:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020274:	8d 50 30             	lea    edx,[eax+0x30]
c0020277:	80 fa 07             	cmp    dl,0x7
c002027a:	77 1d                	ja     c0020299 <Vm::x87Handler(regs*)+0x63f>
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	6a 00                	push   0x0
c0020281:	e8 97 f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020286:	83 c4 0c             	add    esp,0xc
c0020289:	52                   	push   edx
c002028a:	50                   	push   eax
c002028b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002028f:	2d d0 00 00 00       	sub    eax,0xd0
c0020294:	e9 f3 fd ff ff       	jmp    c002008c <Vm::x87Handler(regs*)+0x432>
c0020299:	8d 50 28             	lea    edx,[eax+0x28]
c002029c:	80 fa 07             	cmp    dl,0x7
c002029f:	77 28                	ja     c00202c9 <Vm::x87Handler(regs*)+0x66f>
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	6a 00                	push   0x0
c00202a6:	e8 72 f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00202ab:	83 c4 0c             	add    esp,0xc
c00202ae:	52                   	push   edx
c00202af:	50                   	push   eax
c00202b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202b4:	2d d8 00 00 00       	sub    eax,0xd8
c00202b9:	50                   	push   eax
c00202ba:	e8 a1 f8 ff ff       	call   c001fb60 <Vm::fpuSetReg(int, unsigned long long)>
c00202bf:	e8 44 f9 ff ff       	call   c001fc08 <Vm::fpuPop()>
c00202c4:	e9 01 fa ff ff       	jmp    c001fcca <Vm::x87Handler(regs*)+0x70>
c00202c9:	8d 50 20             	lea    edx,[eax+0x20]
c00202cc:	80 fa 07             	cmp    dl,0x7
c00202cf:	77 30                	ja     c0020301 <Vm::x87Handler(regs*)+0x6a7>
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	2d e0 00 00 00       	sub    eax,0xe0
c00202d9:	50                   	push   eax
c00202da:	e8 3e f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00202df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202e6:	89 c6                	mov    esi,eax
c00202e8:	89 d7                	mov    edi,edx
c00202ea:	e8 2e f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00202ef:	57                   	push   edi
c00202f0:	56                   	push   esi
c00202f1:	52                   	push   edx
c00202f2:	50                   	push   eax
c00202f3:	e8 48 f7 ff ff       	call   c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202fc:	e9 54 02 00 00       	jmp    c0020555 <Vm::x87Handler(regs*)+0x8fb>
c0020301:	8d 50 18             	lea    edx,[eax+0x18]
c0020304:	80 fa 07             	cmp    dl,0x7
c0020307:	0f 87 43 fb ff ff    	ja     c001fe50 <Vm::x87Handler(regs*)+0x1f6>
c002030d:	83 ec 0c             	sub    esp,0xc
c0020310:	2d e8 00 00 00       	sub    eax,0xe8
c0020315:	50                   	push   eax
c0020316:	e8 02 f8 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c002031b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020322:	89 c6                	mov    esi,eax
c0020324:	89 d7                	mov    edi,edx
c0020326:	e8 f2 f7 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c002032b:	57                   	push   edi
c002032c:	56                   	push   esi
c002032d:	52                   	push   edx
c002032e:	50                   	push   eax
c002032f:	e8 0c f7 ff ff       	call   c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020334:	83 c4 20             	add    esp,0x20
c0020337:	e8 cc f8 ff ff       	call   c001fc08 <Vm::fpuPop()>
c002033c:	eb 62                	jmp    c00203a0 <Vm::x87Handler(regs*)+0x746>
c002033e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020342:	0f 85 0f 01 00 00    	jne    c0020457 <Vm::x87Handler(regs*)+0x7fd>
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	6a 01                	push   0x1
c002034d:	e8 cb f7 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020352:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020359:	89 c6                	mov    esi,eax
c002035b:	89 d7                	mov    edi,edx
c002035d:	e8 bb f7 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020362:	57                   	push   edi
c0020363:	56                   	push   esi
c0020364:	52                   	push   edx
c0020365:	50                   	push   eax
c0020366:	e8 d5 f6 ff ff       	call   c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002036b:	83 c4 20             	add    esp,0x20
c002036e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020372:	e8 91 f8 ff ff       	call   c001fc08 <Vm::fpuPop()>
c0020377:	e8 8c f8 ff ff       	call   c001fc08 <Vm::fpuPop()>
c002037c:	e9 50 f9 ff ff       	jmp    c001fcd1 <Vm::x87Handler(regs*)+0x77>
c0020381:	3c d9                	cmp    al,0xd9
c0020383:	0f 85 b5 02 00 00    	jne    c002063e <Vm::x87Handler(regs*)+0x9e4>
c0020389:	eb bd                	jmp    c0020348 <Vm::x87Handler(regs*)+0x6ee>
c002038b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002038f:	0f 85 ea 02 00 00    	jne    c002067f <Vm::x87Handler(regs*)+0xa25>
c0020395:	0f b7 05 80 1f 03 c0 	movzx  eax,WORD PTR ds:0xc0031f80
c002039c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00203a0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00203a4:	e9 28 f9 ff ff       	jmp    c001fcd1 <Vm::x87Handler(regs*)+0x77>
c00203a9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203ad:	84 d2                	test   dl,dl
c00203af:	75 0f                	jne    c00203c0 <Vm::x87Handler(regs*)+0x766>
c00203b1:	83 ec 0c             	sub    esp,0xc
c00203b4:	ff 36                	push   DWORD PTR [esi]
c00203b6:	e8 b1 f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c00203bb:	e9 2c 01 00 00       	jmp    c00204ec <Vm::x87Handler(regs*)+0x892>
c00203c0:	80 fa 01             	cmp    dl,0x1
c00203c3:	75 0f                	jne    c00203d4 <Vm::x87Handler(regs*)+0x77a>
c00203c5:	83 ec 0c             	sub    esp,0xc
c00203c8:	ff 36                	push   DWORD PTR [esi]
c00203ca:	e8 9d f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c00203cf:	e9 81 02 00 00       	jmp    c0020655 <Vm::x87Handler(regs*)+0x9fb>
c00203d4:	80 fa 04             	cmp    dl,0x4
c00203d7:	75 0f                	jne    c00203e8 <Vm::x87Handler(regs*)+0x78e>
c00203d9:	83 ec 0c             	sub    esp,0xc
c00203dc:	ff 36                	push   DWORD PTR [esi]
c00203de:	e8 89 f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c00203e3:	e9 86 01 00 00       	jmp    c002056e <Vm::x87Handler(regs*)+0x914>
c00203e8:	80 fa 05             	cmp    dl,0x5
c00203eb:	75 1b                	jne    c0020408 <Vm::x87Handler(regs*)+0x7ae>
c00203ed:	83 ec 0c             	sub    esp,0xc
c00203f0:	6a 00                	push   0x0
c00203f2:	e8 26 f7 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00203f7:	89 c7                	mov    edi,eax
c00203f9:	89 d5                	mov    ebp,edx
c00203fb:	58                   	pop    eax
c00203fc:	ff 36                	push   DWORD PTR [esi]
c00203fe:	e8 69 f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c0020403:	e9 a3 01 00 00       	jmp    c00205ab <Vm::x87Handler(regs*)+0x951>
c0020408:	80 fa 06             	cmp    dl,0x6
c002040b:	75 0f                	jne    c002041c <Vm::x87Handler(regs*)+0x7c2>
c002040d:	83 ec 0c             	sub    esp,0xc
c0020410:	ff 36                	push   DWORD PTR [esi]
c0020412:	e8 55 f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c0020417:	e9 ae 01 00 00       	jmp    c00205ca <Vm::x87Handler(regs*)+0x970>
c002041c:	31 c0                	xor    eax,eax
c002041e:	80 fa 07             	cmp    dl,0x7
c0020421:	0f 85 94 02 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c0020427:	83 ec 0c             	sub    esp,0xc
c002042a:	6a 00                	push   0x0
c002042c:	e8 ec f6 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020431:	89 c7                	mov    edi,eax
c0020433:	89 d5                	mov    ebp,edx
c0020435:	58                   	pop    eax
c0020436:	ff 36                	push   DWORD PTR [esi]
c0020438:	e8 2f f4 ff ff       	call   c001f86c <Vm::fpu32ToInternal(unsigned int)>
c002043d:	e9 cb 01 00 00       	jmp    c002060d <Vm::x87Handler(regs*)+0x9b3>
c0020442:	80 fa 03             	cmp    dl,0x3
c0020445:	0f 85 d3 01 00 00    	jne    c002061e <Vm::x87Handler(regs*)+0x9c4>
c002044b:	e8 b8 f7 ff ff       	call   c001fc08 <Vm::fpuPop()>
c0020450:	51                   	push   ecx
c0020451:	51                   	push   ecx
c0020452:	e9 de 01 00 00       	jmp    c0020635 <Vm::x87Handler(regs*)+0x9db>
c0020457:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002045b:	80 fa 01             	cmp    dl,0x1
c002045e:	75 09                	jne    c0020469 <Vm::x87Handler(regs*)+0x80f>
c0020460:	57                   	push   edi
c0020461:	57                   	push   edi
c0020462:	8b 06                	mov    eax,DWORD PTR [esi]
c0020464:	e9 e3 01 00 00       	jmp    c002064c <Vm::x87Handler(regs*)+0x9f2>
c0020469:	80 fa 04             	cmp    dl,0x4
c002046c:	75 12                	jne    c0020480 <Vm::x87Handler(regs*)+0x826>
c002046e:	31 d2                	xor    edx,edx
c0020470:	51                   	push   ecx
c0020471:	51                   	push   ecx
c0020472:	8b 06                	mov    eax,DWORD PTR [esi]
c0020474:	52                   	push   edx
c0020475:	50                   	push   eax
c0020476:	e8 d0 f4 ff ff       	call   c001f94b <Vm::fpuLongToFloat(long long)>
c002047b:	e9 ee 00 00 00       	jmp    c002056e <Vm::x87Handler(regs*)+0x914>
c0020480:	31 c0                	xor    eax,eax
c0020482:	80 fa 07             	cmp    dl,0x7
c0020485:	0f 85 30 02 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c002048b:	83 ec 0c             	sub    esp,0xc
c002048e:	6a 00                	push   0x0
c0020490:	e8 88 f6 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020495:	89 c7                	mov    edi,eax
c0020497:	89 d5                	mov    ebp,edx
c0020499:	58                   	pop    eax
c002049a:	8b 06                	mov    eax,DWORD PTR [esi]
c002049c:	5a                   	pop    edx
c002049d:	31 d2                	xor    edx,edx
c002049f:	52                   	push   edx
c00204a0:	50                   	push   eax
c00204a1:	e8 a5 f4 ff ff       	call   c001f94b <Vm::fpuLongToFloat(long long)>
c00204a6:	e9 62 01 00 00       	jmp    c002060d <Vm::x87Handler(regs*)+0x9b3>
c00204ab:	84 d2                	test   dl,dl
c00204ad:	75 0d                	jne    c00204bc <Vm::x87Handler(regs*)+0x862>
c00204af:	31 d2                	xor    edx,edx
c00204b1:	55                   	push   ebp
c00204b2:	55                   	push   ebp
c00204b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00204b5:	52                   	push   edx
c00204b6:	50                   	push   eax
c00204b7:	e9 d3 01 00 00       	jmp    c002068f <Vm::x87Handler(regs*)+0xa35>
c00204bc:	31 c0                	xor    eax,eax
c00204be:	80 fa 02             	cmp    dl,0x2
c00204c1:	0f 85 f4 01 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c00204c7:	83 ec 0c             	sub    esp,0xc
c00204ca:	6a 00                	push   0x0
c00204cc:	e8 4c f6 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00204d1:	59                   	pop    ecx
c00204d2:	5f                   	pop    edi
c00204d3:	e9 6a f9 ff ff       	jmp    c001fe42 <Vm::x87Handler(regs*)+0x1e8>
c00204d8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204dc:	84 d2                	test   dl,dl
c00204de:	75 2a                	jne    c002050a <Vm::x87Handler(regs*)+0x8b0>
c00204e0:	50                   	push   eax
c00204e1:	50                   	push   eax
c00204e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e5:	ff 36                	push   DWORD PTR [esi]
c00204e7:	e8 c5 f3 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c00204ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f3:	89 c6                	mov    esi,eax
c00204f5:	89 d7                	mov    edi,edx
c00204f7:	e8 21 f6 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00204fc:	57                   	push   edi
c00204fd:	56                   	push   esi
c00204fe:	52                   	push   edx
c00204ff:	50                   	push   eax
c0020500:	e8 8e f5 ff ff       	call   c001fa93 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020505:	e9 64 01 00 00       	jmp    c002066e <Vm::x87Handler(regs*)+0xa14>
c002050a:	80 fa 01             	cmp    dl,0x1
c002050d:	75 11                	jne    c0020520 <Vm::x87Handler(regs*)+0x8c6>
c002050f:	50                   	push   eax
c0020510:	50                   	push   eax
c0020511:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020514:	ff 36                	push   DWORD PTR [esi]
c0020516:	e8 96 f3 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c002051b:	e9 35 01 00 00       	jmp    c0020655 <Vm::x87Handler(regs*)+0x9fb>
c0020520:	80 fa 02             	cmp    dl,0x2
c0020523:	0f 85 54 f9 ff ff    	jne    c001fe7d <Vm::x87Handler(regs*)+0x223>
c0020529:	55                   	push   ebp
c002052a:	55                   	push   ebp
c002052b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002052e:	ff 36                	push   DWORD PTR [esi]
c0020530:	e8 7c f3 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c0020535:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002053c:	89 c6                	mov    esi,eax
c002053e:	89 d7                	mov    edi,edx
c0020540:	e8 d8 f5 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020545:	57                   	push   edi
c0020546:	56                   	push   esi
c0020547:	52                   	push   edx
c0020548:	50                   	push   eax
c0020549:	e8 f2 f4 ff ff       	call   c001fa40 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002054e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020552:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020555:	83 c4 20             	add    esp,0x20
c0020558:	e9 74 f7 ff ff       	jmp    c001fcd1 <Vm::x87Handler(regs*)+0x77>
c002055d:	80 fa 04             	cmp    dl,0x4
c0020560:	75 2a                	jne    c002058c <Vm::x87Handler(regs*)+0x932>
c0020562:	51                   	push   ecx
c0020563:	51                   	push   ecx
c0020564:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020567:	ff 36                	push   DWORD PTR [esi]
c0020569:	e8 43 f3 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c002056e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020575:	89 c6                	mov    esi,eax
c0020577:	89 d7                	mov    edi,edx
c0020579:	e8 9f f5 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c002057e:	57                   	push   edi
c002057f:	56                   	push   esi
c0020580:	52                   	push   edx
c0020581:	50                   	push   eax
c0020582:	e8 36 f5 ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020587:	e9 e2 00 00 00       	jmp    c002066e <Vm::x87Handler(regs*)+0xa14>
c002058c:	80 fa 05             	cmp    dl,0x5
c002058f:	75 28                	jne    c00205b9 <Vm::x87Handler(regs*)+0x95f>
c0020591:	83 ec 0c             	sub    esp,0xc
c0020594:	6a 00                	push   0x0
c0020596:	e8 82 f5 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c002059b:	89 c7                	mov    edi,eax
c002059d:	89 d5                	mov    ebp,edx
c002059f:	58                   	pop    eax
c00205a0:	5a                   	pop    edx
c00205a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205a4:	ff 36                	push   DWORD PTR [esi]
c00205a6:	e8 06 f3 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c00205ab:	83 c4 10             	add    esp,0x10
c00205ae:	55                   	push   ebp
c00205af:	57                   	push   edi
c00205b0:	52                   	push   edx
c00205b1:	50                   	push   eax
c00205b2:	e8 06 f5 ff ff       	call   c001fabd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205b7:	eb 60                	jmp    c0020619 <Vm::x87Handler(regs*)+0x9bf>
c00205b9:	80 fa 06             	cmp    dl,0x6
c00205bc:	75 2a                	jne    c00205e8 <Vm::x87Handler(regs*)+0x98e>
c00205be:	51                   	push   ecx
c00205bf:	51                   	push   ecx
c00205c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205c3:	ff 36                	push   DWORD PTR [esi]
c00205c5:	e8 e7 f2 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c00205ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205d1:	89 c6                	mov    esi,eax
c00205d3:	89 d7                	mov    edi,edx
c00205d5:	e8 43 f5 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00205da:	57                   	push   edi
c00205db:	56                   	push   esi
c00205dc:	52                   	push   edx
c00205dd:	50                   	push   eax
c00205de:	e8 08 f5 ff ff       	call   c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205e3:	e9 86 00 00 00       	jmp    c002066e <Vm::x87Handler(regs*)+0xa14>
c00205e8:	31 c0                	xor    eax,eax
c00205ea:	80 fa 07             	cmp    dl,0x7
c00205ed:	0f 85 c8 00 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c00205f3:	83 ec 0c             	sub    esp,0xc
c00205f6:	6a 00                	push   0x0
c00205f8:	e8 20 f5 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c00205fd:	89 c7                	mov    edi,eax
c00205ff:	89 d5                	mov    ebp,edx
c0020601:	58                   	pop    eax
c0020602:	5a                   	pop    edx
c0020603:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020606:	ff 36                	push   DWORD PTR [esi]
c0020608:	e8 a4 f2 ff ff       	call   c001f8b1 <Vm::fpu64ToInternal(unsigned long long)>
c002060d:	83 c4 10             	add    esp,0x10
c0020610:	55                   	push   ebp
c0020611:	57                   	push   edi
c0020612:	52                   	push   edx
c0020613:	50                   	push   eax
c0020614:	e8 d2 f4 ff ff       	call   c001faeb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020619:	83 c4 0c             	add    esp,0xc
c002061c:	eb 53                	jmp    c0020671 <Vm::x87Handler(regs*)+0xa17>
c002061e:	31 c0                	xor    eax,eax
c0020620:	80 fa 02             	cmp    dl,0x2
c0020623:	0f 85 92 00 00 00    	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c0020629:	83 ec 0c             	sub    esp,0xc
c002062c:	6a 00                	push   0x0
c002062e:	e8 ea f4 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020633:	59                   	pop    ecx
c0020634:	5f                   	pop    edi
c0020635:	52                   	push   edx
c0020636:	50                   	push   eax
c0020637:	e8 27 f2 ff ff       	call   c001f863 <Vm::fpuInternalTo64(unsigned long long)>
c002063c:	eb 70                	jmp    c00206ae <Vm::x87Handler(regs*)+0xa54>
c002063e:	31 c0                	xor    eax,eax
c0020640:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020645:	75 74                	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c0020647:	50                   	push   eax
c0020648:	50                   	push   eax
c0020649:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002064c:	31 d2                	xor    edx,edx
c002064e:	52                   	push   edx
c002064f:	50                   	push   eax
c0020650:	e8 f6 f2 ff ff       	call   c001f94b <Vm::fpuLongToFloat(long long)>
c0020655:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002065c:	89 c6                	mov    esi,eax
c002065e:	89 d7                	mov    edi,edx
c0020660:	e8 b8 f4 ff ff       	call   c001fb1d <Vm::fpuGetReg(int)>
c0020665:	57                   	push   edi
c0020666:	56                   	push   esi
c0020667:	52                   	push   edx
c0020668:	50                   	push   eax
c0020669:	e8 5e f4 ff ff       	call   c001facc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002066e:	83 c4 1c             	add    esp,0x1c
c0020671:	52                   	push   edx
c0020672:	50                   	push   eax
c0020673:	6a 00                	push   0x0
c0020675:	e8 e6 f4 ff ff       	call   c001fb60 <Vm::fpuSetReg(int, unsigned long long)>
c002067a:	e9 f2 f7 ff ff       	jmp    c001fe71 <Vm::x87Handler(regs*)+0x217>
c002067f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020683:	80 fa 05             	cmp    dl,0x5
c0020686:	75 11                	jne    c0020699 <Vm::x87Handler(regs*)+0xa3f>
c0020688:	55                   	push   ebp
c0020689:	55                   	push   ebp
c002068a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002068d:	ff 36                	push   DWORD PTR [esi]
c002068f:	e8 81 f2 ff ff       	call   c001f915 <Vm::fpuULongToFloat(unsigned long long)>
c0020694:	e9 cf f7 ff ff       	jmp    c001fe68 <Vm::x87Handler(regs*)+0x20e>
c0020699:	31 c0                	xor    eax,eax
c002069b:	80 fa 07             	cmp    dl,0x7
c002069e:	75 1b                	jne    c00206bb <Vm::x87Handler(regs*)+0xa61>
c00206a0:	e8 63 f5 ff ff       	call   c001fc08 <Vm::fpuPop()>
c00206a5:	51                   	push   ecx
c00206a6:	51                   	push   ecx
c00206a7:	52                   	push   edx
c00206a8:	50                   	push   eax
c00206a9:	e8 0c f2 ff ff       	call   c001f8ba <Vm::fpuFloatToLong(unsigned long long)>
c00206ae:	83 c4 10             	add    esp,0x10
c00206b1:	89 06                	mov    DWORD PTR [esi],eax
c00206b3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00206b6:	e9 f8 f7 ff ff       	jmp    c001feb3 <Vm::x87Handler(regs*)+0x259>
c00206bb:	83 c4 1c             	add    esp,0x1c
c00206be:	5b                   	pop    ebx
c00206bf:	5e                   	pop    esi
c00206c0:	5f                   	pop    edi
c00206c1:	5d                   	pop    ebp
c00206c2:	c3                   	ret    

c00206c3 <__static_initialization_and_destruction_0(int, int)>:
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00206cb:	75 1a                	jne    c00206e7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00206cd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00206d5:	75 10                	jne    c00206e7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00206d7:	83 ec 0c             	sub    esp,0xc
c00206da:	68 80 1f 03 c0       	push   0xc0031f80
c00206df:	e8 8c 8a 00 00       	call   c0029170 <Vm::_FPUState::_FPUState()>
c00206e4:	83 c4 10             	add    esp,0x10
c00206e7:	90                   	nop
c00206e8:	83 c4 0c             	add    esp,0xc
c00206eb:	c3                   	ret    

c00206ec <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00206ec:	83 ec 0c             	sub    esp,0xc
c00206ef:	83 ec 08             	sub    esp,0x8
c00206f2:	68 ff ff 00 00       	push   0xffff
c00206f7:	6a 01                	push   0x1
c00206f9:	e8 c5 ff ff ff       	call   c00206c3 <__static_initialization_and_destruction_0(int, int)>
c00206fe:	83 c4 10             	add    esp,0x10
c0020701:	83 c4 0c             	add    esp,0xc
c0020704:	c3                   	ret    
c0020705:	90                   	nop

c0020706 <FAT::getName()>:
c0020706:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c002070b:	c3                   	ret    

c002070c <FAT::tell(void*, unsigned long long*)>:
c002070c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020711:	75 06                	jne    c0020719 <FAT::tell(void*, unsigned long long*)+0xd>
c0020713:	b8 04 00 00 00       	mov    eax,0x4
c0020718:	c3                   	ret    
c0020719:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002071e:	75 06                	jne    c0020726 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020720:	b8 04 00 00 00       	mov    eax,0x4
c0020725:	c3                   	ret    
c0020726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002072a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002072d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020730:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020734:	89 01                	mov    DWORD PTR [ecx],eax
c0020736:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020739:	b8 00 00 00 00       	mov    eax,0x0
c002073e:	c3                   	ret    
c002073f:	90                   	nop

c0020740 <FAT::stat(void*, unsigned long long*)>:
c0020740:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020745:	75 06                	jne    c002074d <FAT::stat(void*, unsigned long long*)+0xd>
c0020747:	b8 04 00 00 00       	mov    eax,0x4
c002074c:	c3                   	ret    
c002074d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020752:	75 06                	jne    c002075a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020754:	b8 04 00 00 00       	mov    eax,0x4
c0020759:	c3                   	ret    
c002075a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002075e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020761:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020768:	89 01                	mov    DWORD PTR [ecx],eax
c002076a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002076d:	b8 00 00 00 00       	mov    eax,0x0
c0020772:	c3                   	ret    
c0020773:	90                   	nop

c0020774 <FAT::~FAT()>:
c0020774:	83 ec 0c             	sub    esp,0xc
c0020777:	ba f0 cd 02 c0       	mov    edx,0xc002cdf0
c002077c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020780:	89 10                	mov    DWORD PTR [eax],edx
c0020782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020786:	83 ec 0c             	sub    esp,0xc
c0020789:	50                   	push   eax
c002078a:	e8 63 29 ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	90                   	nop
c0020793:	83 c4 0c             	add    esp,0xc
c0020796:	c3                   	ret    
c0020797:	90                   	nop

c0020798 <FAT::~FAT()>:
c0020798:	83 ec 0c             	sub    esp,0xc
c002079b:	83 ec 0c             	sub    esp,0xc
c002079e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a2:	e8 cd ff ff ff       	call   c0020774 <FAT::~FAT()>
c00207a7:	83 c4 10             	add    esp,0x10
c00207aa:	83 ec 08             	sub    esp,0x8
c00207ad:	6a 08                	push   0x8
c00207af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207b3:	e8 2b 25 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00207b8:	83 c4 10             	add    esp,0x10
c00207bb:	83 c4 0c             	add    esp,0xc
c00207be:	c3                   	ret    
c00207bf:	90                   	nop

c00207c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00207c0:	83 ec 1c             	sub    esp,0x1c
c00207c3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00207ca:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00207cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207d3:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c00207da:	83 f8 ff             	cmp    eax,0xffffffff
c00207dd:	75 34                	jne    c0020813 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00207df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207e3:	88 c2                	mov    dl,al
c00207e5:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c00207ea:	01 d0                	add    eax,edx
c00207ec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207f0:	8b 15 e0 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031fe0
c00207f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207fa:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c0020801:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020806:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002080a:	89 14 85 80 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf80],edx
c0020811:	eb 17                	jmp    c002082a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020813:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020817:	88 c2                	mov    dl,al
c0020819:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002081d:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0020824:	01 d0                	add    eax,edx
c0020826:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002082a:	83 ec 04             	sub    esp,0x4
c002082d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020835:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020839:	50                   	push   eax
c002083a:	e8 01 65 fe ff       	call   c0006d40 <f_getlabel>
c002083f:	83 c4 10             	add    esp,0x10
c0020842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020846:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002084b:	75 07                	jne    c0020854 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002084d:	b8 00 00 00 00       	mov    eax,0x0
c0020852:	eb 05                	jmp    c0020859 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020854:	b8 01 00 00 00       	mov    eax,0x1
c0020859:	83 c4 1c             	add    esp,0x1c
c002085c:	c3                   	ret    
c002085d:	90                   	nop

c002085e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002085e:	57                   	push   edi
c002085f:	83 ec 58             	sub    esp,0x58
c0020862:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002086a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002086e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020873:	b8 00 00 00 00       	mov    eax,0x0
c0020878:	fc                   	cld    
c0020879:	89 d7                	mov    edi,edx
c002087b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002087d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020881:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0020888:	83 f8 ff             	cmp    eax,0xffffffff
c002088b:	75 34                	jne    c00208c1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002088d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020891:	88 c2                	mov    dl,al
c0020893:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020898:	01 d0                	add    eax,edx
c002089a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002089e:	8b 15 e0 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031fe0
c00208a4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208a8:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c00208af:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c00208b4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00208b8:	89 14 85 80 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf80],edx
c00208bf:	eb 17                	jmp    c00208d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00208c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00208c5:	88 c2                	mov    dl,al
c00208c7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208cb:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c00208d2:	01 d0                	add    eax,edx
c00208d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208d8:	83 ec 08             	sub    esp,0x8
c00208db:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00208df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208e3:	50                   	push   eax
c00208e4:	e8 93 00 fe ff       	call   c000097c <strcat>
c00208e9:	83 c4 10             	add    esp,0x10
c00208ec:	83 ec 0c             	sub    esp,0xc
c00208ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208f3:	50                   	push   eax
c00208f4:	e8 35 66 fe ff       	call   c0006f2e <f_setlabel>
c00208f9:	83 c4 10             	add    esp,0x10
c00208fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020900:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020905:	75 07                	jne    c002090e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020907:	b8 00 00 00 00       	mov    eax,0x0
c002090c:	eb 05                	jmp    c0020913 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002090e:	b8 01 00 00 00       	mov    eax,0x1
c0020913:	83 c4 58             	add    esp,0x58
c0020916:	5f                   	pop    edi
c0020917:	c3                   	ret    

c0020918 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020918:	83 ec 2c             	sub    esp,0x2c
c002091b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020923:	83 ec 08             	sub    esp,0x8
c0020926:	68 84 cd 02 c0       	push   0xc002cd84
c002092b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002092f:	e8 94 ff fd ff       	call   c00008c8 <strcmp>
c0020934:	83 c4 10             	add    esp,0x10
c0020937:	85 c0                	test   eax,eax
c0020939:	0f 94 c0             	sete   al
c002093c:	84 c0                	test   al,al
c002093e:	74 0d                	je     c002094d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020940:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020948:	e9 a6 00 00 00       	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002094d:	83 ec 08             	sub    esp,0x8
c0020950:	68 76 cd 02 c0       	push   0xc002cd76
c0020955:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020959:	e8 6a ff fd ff       	call   c00008c8 <strcmp>
c002095e:	83 c4 10             	add    esp,0x10
c0020961:	85 c0                	test   eax,eax
c0020963:	0f 94 c0             	sete   al
c0020966:	84 c0                	test   al,al
c0020968:	74 0a                	je     c0020974 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002096a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020972:	eb 7f                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020974:	83 ec 08             	sub    esp,0x8
c0020977:	68 7c cd 02 c0       	push   0xc002cd7c
c002097c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020980:	e8 43 ff fd ff       	call   c00008c8 <strcmp>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	85 c0                	test   eax,eax
c002098a:	0f 94 c0             	sete   al
c002098d:	84 c0                	test   al,al
c002098f:	74 0a                	je     c002099b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020991:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020999:	eb 58                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002099b:	83 ec 08             	sub    esp,0x8
c002099e:	68 cc 98 02 c0       	push   0xc00298cc
c00209a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209a7:	e8 1c ff fd ff       	call   c00008c8 <strcmp>
c00209ac:	83 c4 10             	add    esp,0x10
c00209af:	85 c0                	test   eax,eax
c00209b1:	0f 94 c0             	sete   al
c00209b4:	84 c0                	test   al,al
c00209b6:	74 0a                	je     c00209c2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00209b8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00209c0:	eb 31                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209c2:	83 ec 08             	sub    esp,0x8
c00209c5:	68 82 cd 02 c0       	push   0xc002cd82
c00209ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209ce:	e8 f5 fe fd ff       	call   c00008c8 <strcmp>
c00209d3:	83 c4 10             	add    esp,0x10
c00209d6:	85 c0                	test   eax,eax
c00209d8:	0f 94 c0             	sete   al
c00209db:	84 c0                	test   al,al
c00209dd:	74 0a                	je     c00209e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00209df:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00209e7:	eb 0a                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209e9:	b8 08 00 00 00       	mov    eax,0x8
c00209ee:	e9 04 01 00 00       	jmp    c0020af7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209f3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00209fa:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00209ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a03:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0020a0a:	83 f8 ff             	cmp    eax,0xffffffff
c0020a0d:	75 34                	jne    c0020a43 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020a0f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a13:	88 c2                	mov    dl,al
c0020a15:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020a1a:	01 d0                	add    eax,edx
c0020a1c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a20:	8b 15 e0 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031fe0
c0020a26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a2a:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c0020a31:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020a36:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020a3a:	89 14 85 80 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf80],edx
c0020a41:	eb 17                	jmp    c0020a5a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020a43:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a47:	88 c2                	mov    dl,al
c0020a49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a4d:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0020a54:	01 d0                	add    eax,edx
c0020a56:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a5e:	88 04 24             	mov    BYTE PTR [esp],al
c0020a61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020a65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020a71:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020a76:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020a7e:	83 ec 0c             	sub    esp,0xc
c0020a81:	68 00 20 00 00       	push   0x2000
c0020a86:	e8 c0 ed fe ff       	call   c000f84b <malloc>
c0020a8b:	83 c4 10             	add    esp,0x10
c0020a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a92:	68 00 20 00 00       	push   0x2000
c0020a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a9f:	50                   	push   eax
c0020aa0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020aa4:	50                   	push   eax
c0020aa5:	e8 cf 68 fe ff       	call   c0007379 <f_mkfs>
c0020aaa:	83 c4 10             	add    esp,0x10
c0020aad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ab1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ab6:	75 07                	jne    c0020abf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020ab8:	b8 00 00 00 00       	mov    eax,0x0
c0020abd:	eb 38                	jmp    c0020af7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020abf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020ac4:	75 17                	jne    c0020add <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020ac6:	83 ec 0c             	sub    esp,0xc
c0020ac9:	68 c0 cd 02 c0       	push   0xc002cdc0
c0020ace:	e8 f0 22 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020ad3:	83 c4 10             	add    esp,0x10
c0020ad6:	b8 09 00 00 00       	mov    eax,0x9
c0020adb:	eb 1a                	jmp    c0020af7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020add:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ae1:	83 ec 08             	sub    esp,0x8
c0020ae4:	50                   	push   eax
c0020ae5:	68 88 cd 02 c0       	push   0xc002cd88
c0020aea:	e8 d4 22 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020aef:	83 c4 10             	add    esp,0x10
c0020af2:	b8 01 00 00 00       	mov    eax,0x1
c0020af7:	83 c4 2c             	add    esp,0x2c
c0020afa:	c3                   	ret    
c0020afb:	90                   	nop

c0020afc <FAT::tryMount(LogicalDisk*, int)>:
c0020afc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020b02:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020b07:	83 f8 14             	cmp    eax,0x14
c0020b0a:	75 17                	jne    c0020b23 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020b0c:	83 ec 0c             	sub    esp,0xc
c0020b0f:	68 9a cd 02 c0       	push   0xc002cd9a
c0020b14:	e8 3e 9b ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0020b19:	83 c4 10             	add    esp,0x10
c0020b1c:	b0 00                	mov    al,0x0
c0020b1e:	e9 d7 01 00 00       	jmp    c0020cfa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b23:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020b2a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b30:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b36:	3d 00 02 00 00       	cmp    eax,0x200
c0020b3b:	74 07                	je     c0020b44 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020b3d:	b0 00                	mov    al,0x0
c0020b3f:	e9 b6 01 00 00       	jmp    c0020cfa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b44:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020b4c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b53:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0020b5a:	83 f8 ff             	cmp    eax,0xffffffff
c0020b5d:	74 07                	je     c0020b66 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020b5f:	b0 01                	mov    al,0x1
c0020b61:	e9 94 01 00 00       	jmp    c0020cfa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b66:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020b70:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020b78:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020b7f:	88 c2                	mov    dl,al
c0020b81:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020b86:	01 d0                	add    eax,edx
c0020b88:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020b8f:	8b 15 e0 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031fe0
c0020b95:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b9c:	89 14 85 00 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffce000],edx
c0020ba3:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020ba8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020baf:	89 14 85 80 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf80],edx
c0020bb6:	83 ec 0c             	sub    esp,0xc
c0020bb9:	68 54 02 00 00       	push   0x254
c0020bbe:	e8 88 ec fe ff       	call   c000f84b <malloc>
c0020bc3:	83 c4 10             	add    esp,0x10
c0020bc6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020bcd:	83 ec 04             	sub    esp,0x4
c0020bd0:	6a 00                	push   0x0
c0020bd2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bd9:	50                   	push   eax
c0020bda:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020be1:	e8 51 43 fe ff       	call   c0004f37 <f_mount>
c0020be6:	83 c4 10             	add    esp,0x10
c0020be9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bf0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020bf8:	74 19                	je     c0020c13 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020bfa:	83 ec 0c             	sub    esp,0xc
c0020bfd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c04:	e8 62 ec fe ff       	call   c000f86b <rfree>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	b0 00                	mov    al,0x0
c0020c0e:	e9 e7 00 00 00       	jmp    c0020cfa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c13:	83 ec 04             	sub    esp,0x4
c0020c16:	68 00 01 00 00       	push   0x100
c0020c1b:	6a 00                	push   0x0
c0020c1d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c24:	50                   	push   eax
c0020c25:	e8 56 fb fd ff       	call   c0000780 <memset>
c0020c2a:	83 c4 10             	add    esp,0x10
c0020c2d:	83 ec 08             	sub    esp,0x8
c0020c30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c37:	50                   	push   eax
c0020c38:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c3f:	50                   	push   eax
c0020c40:	e8 37 fd fd ff       	call   c000097c <strcat>
c0020c45:	83 c4 10             	add    esp,0x10
c0020c48:	83 ec 08             	sub    esp,0x8
c0020c4b:	68 a8 cd 02 c0       	push   0xc002cda8
c0020c50:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c57:	50                   	push   eax
c0020c58:	e8 1f fd fd ff       	call   c000097c <strcat>
c0020c5d:	83 c4 10             	add    esp,0x10
c0020c60:	83 ec 04             	sub    esp,0x4
c0020c63:	6a 01                	push   0x1
c0020c65:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020c6c:	50                   	push   eax
c0020c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c71:	50                   	push   eax
c0020c72:	e8 22 43 fe ff       	call   c0004f99 <f_open>
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020c81:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020c88:	85 c0                	test   eax,eax
c0020c8a:	74 0a                	je     c0020c96 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020c8c:	78 2d                	js     c0020cbb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c8e:	83 e8 04             	sub    eax,0x4
c0020c91:	83 f8 01             	cmp    eax,0x1
c0020c94:	77 25                	ja     c0020cbb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c96:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020c9e:	83 ec 0c             	sub    esp,0xc
c0020ca1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ca5:	50                   	push   eax
c0020ca6:	e8 40 4e fe ff       	call   c0005aeb <f_close>
c0020cab:	83 c4 10             	add    esp,0x10
c0020cae:	90                   	nop
c0020caf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020cb7:	74 3a                	je     c0020cf3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020cb9:	eb 2d                	jmp    c0020ce8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020cbb:	83 ec 0c             	sub    esp,0xc
c0020cbe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020cc5:	e8 a1 eb fe ff       	call   c000f86b <rfree>
c0020cca:	83 c4 10             	add    esp,0x10
c0020ccd:	83 ec 04             	sub    esp,0x4
c0020cd0:	6a 00                	push   0x0
c0020cd2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020cd9:	50                   	push   eax
c0020cda:	6a 00                	push   0x0
c0020cdc:	e8 56 42 fe ff       	call   c0004f37 <f_mount>
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	b0 00                	mov    al,0x0
c0020ce6:	eb 12                	jmp    c0020cfa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ce8:	a1 e0 1f 03 c0       	mov    eax,ds:0xc0031fe0
c0020ced:	40                   	inc    eax
c0020cee:	a3 e0 1f 03 c0       	mov    ds:0xc0031fe0,eax
c0020cf3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020cfa:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020d00:	c3                   	ret    
c0020d01:	90                   	nop

c0020d02 <FAT::getFileFirstSector(char const*)>:
c0020d02:	53                   	push   ebx
c0020d03:	83 ec 28             	sub    esp,0x28
c0020d06:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020d0e:	83 ec 0c             	sub    esp,0xc
c0020d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d15:	e8 31 eb fe ff       	call   c000f84b <malloc>
c0020d1a:	83 c4 10             	add    esp,0x10
c0020d1d:	89 c3                	mov    ebx,eax
c0020d1f:	a1 14 1f 03 c0       	mov    eax,ds:0xc0031f14
c0020d24:	83 ec 04             	sub    esp,0x4
c0020d27:	50                   	push   eax
c0020d28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020d2c:	53                   	push   ebx
c0020d2d:	e8 f0 25 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0020d32:	83 c4 10             	add    esp,0x10
c0020d35:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020d39:	83 ec 08             	sub    esp,0x8
c0020d3c:	6a 01                	push   0x1
c0020d3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d42:	e8 3f 26 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0020d47:	83 c4 10             	add    esp,0x10
c0020d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d50:	83 c0 0c             	add    eax,0xc
c0020d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d55:	83 ec 0c             	sub    esp,0xc
c0020d58:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020d5c:	52                   	push   edx
c0020d5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020d61:	52                   	push   edx
c0020d62:	6a 00                	push   0x0
c0020d64:	6a 04                	push   0x4
c0020d66:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020d6a:	ff d0                	call   eax
c0020d6c:	83 c4 20             	add    esp,0x20
c0020d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d73:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020d79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d81:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020d84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020d87:	83 ec 04             	sub    esp,0x4
c0020d8a:	52                   	push   edx
c0020d8b:	50                   	push   eax
c0020d8c:	68 b3 cd 02 c0       	push   0xc002cdb3
c0020d91:	e8 2d 20 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d9d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020da0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020da3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020da7:	83 ec 0c             	sub    esp,0xc
c0020daa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020dae:	e8 31 26 ff ff       	call   c00133e4 <File::close()>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dba:	ba 00 00 00 00       	mov    edx,0x0
c0020dbf:	83 c4 28             	add    esp,0x28
c0020dc2:	5b                   	pop    ebx
c0020dc3:	c3                   	ret    

c0020dc4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020dc4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020dca:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020dd2:	74 0a                	je     c0020dde <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020dd4:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ddc:	75 0a                	jne    c0020de8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020dde:	b8 04 00 00 00       	mov    eax,0x4
c0020de3:	e9 db 00 00 00       	jmp    c0020ec3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020de8:	83 ec 08             	sub    esp,0x8
c0020deb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020df2:	50                   	push   eax
c0020df3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020dfa:	e8 f6 52 fe ff       	call   c00060f5 <f_readdir>
c0020dff:	83 c4 10             	add    esp,0x10
c0020e02:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020e09:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020e0f:	83 ec 0c             	sub    esp,0xc
c0020e12:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020e19:	83 c0 1a             	add    eax,0x1a
c0020e1c:	50                   	push   eax
c0020e1d:	e8 7a f9 fd ff       	call   c000079c <strlen>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	ba 00 00 00 00       	mov    edx,0x0
c0020e2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e2e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e32:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020e39:	0f b6 c0             	movzx  eax,al
c0020e3c:	83 e0 10             	and    eax,0x10
c0020e3f:	74 07                	je     c0020e48 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020e41:	b8 02 00 00 00       	mov    eax,0x2
c0020e46:	eb 05                	jmp    c0020e4d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020e48:	b8 01 00 00 00       	mov    eax,0x1
c0020e4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e51:	83 ec 08             	sub    esp,0x8
c0020e54:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e5b:	83 c0 1a             	add    eax,0x1a
c0020e5e:	50                   	push   eax
c0020e5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e63:	83 c0 10             	add    eax,0x10
c0020e66:	50                   	push   eax
c0020e67:	e8 d0 f9 fd ff       	call   c000083c <strcpy>
c0020e6c:	83 c4 10             	add    esp,0x10
c0020e6f:	83 ec 04             	sub    esp,0x4
c0020e72:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020e79:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e7d:	50                   	push   eax
c0020e7e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020e85:	e8 c2 f8 fd ff       	call   c000074c <memcpy>
c0020e8a:	83 c4 10             	add    esp,0x10
c0020e8d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020e94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e9a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020ea1:	84 c0                	test   al,al
c0020ea3:	75 07                	jne    c0020eac <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ea5:	b8 07 00 00 00       	mov    eax,0x7
c0020eaa:	eb 17                	jmp    c0020ec3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020eac:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020eb3:	85 c0                	test   eax,eax
c0020eb5:	75 07                	jne    c0020ebe <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020eb7:	b8 00 00 00 00       	mov    eax,0x0
c0020ebc:	eb 05                	jmp    c0020ec3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ebe:	b8 01 00 00 00       	mov    eax,0x1
c0020ec3:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020ec9:	c3                   	ret    

c0020eca <FAT::read(void*, unsigned long, void*, int*)>:
c0020eca:	83 ec 1c             	sub    esp,0x1c
c0020ecd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ed2:	74 07                	je     c0020edb <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ed4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ed9:	75 07                	jne    c0020ee2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020edb:	b8 04 00 00 00       	mov    eax,0x4
c0020ee0:	eb 3d                	jmp    c0020f1f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ee2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ee6:	50                   	push   eax
c0020ee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020eeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020eef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ef3:	e8 dd 44 fe ff       	call   c00053d5 <f_read>
c0020ef8:	83 c4 10             	add    esp,0x10
c0020efb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f03:	89 c2                	mov    edx,eax
c0020f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f09:	89 10                	mov    DWORD PTR [eax],edx
c0020f0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f0f:	85 c0                	test   eax,eax
c0020f11:	75 07                	jne    c0020f1a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020f13:	b8 00 00 00 00       	mov    eax,0x0
c0020f18:	eb 05                	jmp    c0020f1f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f1a:	b8 01 00 00 00       	mov    eax,0x1
c0020f1f:	83 c4 1c             	add    esp,0x1c
c0020f22:	c3                   	ret    
c0020f23:	90                   	nop

c0020f24 <FAT::write(void*, unsigned long, void*, int*)>:
c0020f24:	83 ec 1c             	sub    esp,0x1c
c0020f27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f2c:	74 07                	je     c0020f35 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020f2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020f33:	75 07                	jne    c0020f3c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020f35:	b8 04 00 00 00       	mov    eax,0x4
c0020f3a:	eb 3d                	jmp    c0020f79 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f40:	50                   	push   eax
c0020f41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f4d:	e8 03 47 fe ff       	call   c0005655 <f_write>
c0020f52:	83 c4 10             	add    esp,0x10
c0020f55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5d:	89 c2                	mov    edx,eax
c0020f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f63:	89 10                	mov    DWORD PTR [eax],edx
c0020f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f69:	85 c0                	test   eax,eax
c0020f6b:	75 07                	jne    c0020f74 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020f6d:	b8 00 00 00 00       	mov    eax,0x0
c0020f72:	eb 05                	jmp    c0020f79 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f74:	b8 01 00 00 00       	mov    eax,0x1
c0020f79:	83 c4 1c             	add    esp,0x1c
c0020f7c:	c3                   	ret    
c0020f7d:	90                   	nop

c0020f7e <FAT::close(void*)>:
c0020f7e:	83 ec 1c             	sub    esp,0x1c
c0020f81:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f86:	75 07                	jne    c0020f8f <FAT::close(void*)+0x11>
c0020f88:	b8 04 00 00 00       	mov    eax,0x4
c0020f8d:	eb 36                	jmp    c0020fc5 <FAT::close(void*)+0x47>
c0020f8f:	83 ec 0c             	sub    esp,0xc
c0020f92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f96:	e8 50 4b fe ff       	call   c0005aeb <f_close>
c0020f9b:	83 c4 10             	add    esp,0x10
c0020f9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fa2:	83 ec 0c             	sub    esp,0xc
c0020fa5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fa9:	e8 ad e8 fe ff       	call   c000f85b <free>
c0020fae:	83 c4 10             	add    esp,0x10
c0020fb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fb5:	85 c0                	test   eax,eax
c0020fb7:	75 07                	jne    c0020fc0 <FAT::close(void*)+0x42>
c0020fb9:	b8 00 00 00 00       	mov    eax,0x0
c0020fbe:	eb 05                	jmp    c0020fc5 <FAT::close(void*)+0x47>
c0020fc0:	b8 01 00 00 00       	mov    eax,0x1
c0020fc5:	83 c4 1c             	add    esp,0x1c
c0020fc8:	c3                   	ret    
c0020fc9:	90                   	nop

c0020fca <FAT::closeDir(void*)>:
c0020fca:	83 ec 1c             	sub    esp,0x1c
c0020fcd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020fd2:	75 07                	jne    c0020fdb <FAT::closeDir(void*)+0x11>
c0020fd4:	b8 04 00 00 00       	mov    eax,0x4
c0020fd9:	eb 36                	jmp    c0021011 <FAT::closeDir(void*)+0x47>
c0020fdb:	83 ec 0c             	sub    esp,0xc
c0020fde:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fe2:	e8 ec 50 fe ff       	call   c00060d3 <f_closedir>
c0020fe7:	83 c4 10             	add    esp,0x10
c0020fea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fee:	83 ec 0c             	sub    esp,0xc
c0020ff1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ff5:	e8 61 e8 fe ff       	call   c000f85b <free>
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021001:	85 c0                	test   eax,eax
c0021003:	75 07                	jne    c002100c <FAT::closeDir(void*)+0x42>
c0021005:	b8 00 00 00 00       	mov    eax,0x0
c002100a:	eb 05                	jmp    c0021011 <FAT::closeDir(void*)+0x47>
c002100c:	b8 01 00 00 00       	mov    eax,0x1
c0021011:	83 c4 1c             	add    esp,0x1c
c0021014:	c3                   	ret    
c0021015:	90                   	nop

c0021016 <FAT::seek(void*, unsigned long long)>:
c0021016:	83 ec 2c             	sub    esp,0x2c
c0021019:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002101d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021021:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021029:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002102e:	75 07                	jne    c0021037 <FAT::seek(void*, unsigned long long)+0x21>
c0021030:	b8 04 00 00 00       	mov    eax,0x4
c0021035:	eb 2f                	jmp    c0021066 <FAT::seek(void*, unsigned long long)+0x50>
c0021037:	83 ec 04             	sub    esp,0x4
c002103a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002103e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021042:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021046:	e8 cf 4a fe ff       	call   c0005b1a <f_lseek>
c002104b:	83 c4 10             	add    esp,0x10
c002104e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021052:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021056:	85 c0                	test   eax,eax
c0021058:	75 07                	jne    c0021061 <FAT::seek(void*, unsigned long long)+0x4b>
c002105a:	b8 00 00 00 00       	mov    eax,0x0
c002105f:	eb 05                	jmp    c0021066 <FAT::seek(void*, unsigned long long)+0x50>
c0021061:	b8 01 00 00 00       	mov    eax,0x1
c0021066:	83 c4 2c             	add    esp,0x2c
c0021069:	c3                   	ret    

c002106a <fatWrapperReadDisk>:
c002106a:	83 ec 1c             	sub    esp,0x1c
c002106d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021071:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021075:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021079:	89 04 24             	mov    DWORD PTR [esp],eax
c002107c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021080:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021084:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021089:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c0021090:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021094:	83 ec 0c             	sub    esp,0xc
c0021097:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002109b:	52                   	push   edx
c002109c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210a4:	50                   	push   eax
c00210a5:	e8 fa 55 ff ff       	call   c00166a4 <LogicalDisk::read(unsigned long long, int, void*)>
c00210aa:	83 c4 20             	add    esp,0x20
c00210ad:	83 c4 1c             	add    esp,0x1c
c00210b0:	c3                   	ret    

c00210b1 <fatWrapperWriteDisk>:
c00210b1:	83 ec 1c             	sub    esp,0x1c
c00210b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00210c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00210c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210d0:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c00210d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00210db:	83 ec 0c             	sub    esp,0xc
c00210de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210e2:	52                   	push   edx
c00210e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210eb:	50                   	push   eax
c00210ec:	e8 1f 56 ff ff       	call   c0016710 <LogicalDisk::write(unsigned long long, int, void*)>
c00210f1:	83 c4 20             	add    esp,0x20
c00210f4:	83 c4 1c             	add    esp,0x1c
c00210f7:	c3                   	ret    

c00210f8 <fatWrapperIoctl>:
c00210f8:	53                   	push   ebx
c00210f9:	83 ec 28             	sub    esp,0x28
c00210fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021100:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021104:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021108:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002110c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021111:	75 31                	jne    c0021144 <fatWrapperIoctl+0x4c>
c0021113:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021117:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002111b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021120:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c0021127:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002112d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021137:	66 89 02             	mov    WORD PTR [edx],ax
c002113a:	b8 00 00 00 00       	mov    eax,0x0
c002113f:	e9 b2 00 00 00       	jmp    c00211f6 <fatWrapperIoctl+0xfe>
c0021144:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021149:	75 6a                	jne    c00211b5 <fatWrapperIoctl+0xbd>
c002114b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002114f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021153:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021158:	8b 04 85 c0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1040]
c002115f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021165:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002116b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021171:	89 c8                	mov    eax,ecx
c0021173:	89 da                	mov    edx,ebx
c0021175:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021179:	c1 e0 0a             	shl    eax,0xa
c002117c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021181:	8b 0c 8d c0 ef 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1040]
c0021188:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002118e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021194:	89 cb                	mov    ebx,ecx
c0021196:	c1 fb 1f             	sar    ebx,0x1f
c0021199:	53                   	push   ebx
c002119a:	51                   	push   ecx
c002119b:	52                   	push   edx
c002119c:	50                   	push   eax
c002119d:	e8 92 5b 00 00       	call   c0026d34 <__udivdi3>
c00211a2:	83 c4 10             	add    esp,0x10
c00211a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211a9:	89 01                	mov    DWORD PTR [ecx],eax
c00211ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00211ae:	b8 00 00 00 00       	mov    eax,0x0
c00211b3:	eb 41                	jmp    c00211f6 <fatWrapperIoctl+0xfe>
c00211b5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00211ba:	75 07                	jne    c00211c3 <fatWrapperIoctl+0xcb>
c00211bc:	b8 00 00 00 00       	mov    eax,0x0
c00211c1:	eb 33                	jmp    c00211f6 <fatWrapperIoctl+0xfe>
c00211c3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00211c8:	75 19                	jne    c00211e3 <fatWrapperIoctl+0xeb>
c00211ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00211ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211d6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00211dc:	b8 00 00 00 00       	mov    eax,0x0
c00211e1:	eb 13                	jmp    c00211f6 <fatWrapperIoctl+0xfe>
c00211e3:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00211e8:	75 07                	jne    c00211f1 <fatWrapperIoctl+0xf9>
c00211ea:	b8 00 00 00 00       	mov    eax,0x0
c00211ef:	eb 05                	jmp    c00211f6 <fatWrapperIoctl+0xfe>
c00211f1:	b8 04 00 00 00       	mov    eax,0x4
c00211f6:	83 c4 28             	add    esp,0x28
c00211f9:	5b                   	pop    ebx
c00211fa:	c3                   	ret    
c00211fb:	90                   	nop

c00211fc <FAT::FAT()>:
c00211fc:	83 ec 1c             	sub    esp,0x1c
c00211ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021203:	83 ec 0c             	sub    esp,0xc
c0021206:	50                   	push   eax
c0021207:	e8 c2 1e ff ff       	call   c00130ce <Filesystem::Filesystem()>
c002120c:	83 c4 10             	add    esp,0x10
c002120f:	ba f0 cd 02 c0       	mov    edx,0xc002cdf0
c0021214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021218:	89 10                	mov    DWORD PTR [eax],edx
c002121a:	c7 05 e0 1f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031fe0,0x0
c0021224:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002122c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021231:	7f 15                	jg     c0021248 <FAT::FAT()+0x4c>
c0021233:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021237:	c7 04 85 00 20 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce000],0xffffffff
c0021242:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021246:	eb e4                	jmp    c002122c <FAT::FAT()+0x30>
c0021248:	90                   	nop
c0021249:	83 c4 1c             	add    esp,0x1c
c002124c:	c3                   	ret    
c002124d:	90                   	nop

c002124e <FAT::fixFilepath(char*)>:
c002124e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021252:	8a 00                	mov    al,BYTE PTR [eax]
c0021254:	3c 40                	cmp    al,0x40
c0021256:	7e 2c                	jle    c0021284 <FAT::fixFilepath(char*)+0x36>
c0021258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002125c:	8a 00                	mov    al,BYTE PTR [eax]
c002125e:	83 e8 41             	sub    eax,0x41
c0021261:	88 c2                	mov    dl,al
c0021263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021267:	88 10                	mov    BYTE PTR [eax],dl
c0021269:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002126d:	8a 00                	mov    al,BYTE PTR [eax]
c002126f:	0f be c0             	movsx  eax,al
c0021272:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c0021279:	83 c0 30             	add    eax,0x30
c002127c:	88 c2                	mov    dl,al
c002127e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021282:	88 10                	mov    BYTE PTR [eax],dl
c0021284:	90                   	nop
c0021285:	c3                   	ret    

c0021286 <FAT::open(char const*, void**, FileOpenMode)>:
c0021286:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002128c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021294:	74 0a                	je     c00212a0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021296:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002129e:	75 0a                	jne    c00212aa <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00212a0:	b8 04 00 00 00       	mov    eax,0x4
c00212a5:	e9 fd 00 00 00       	jmp    c00213a7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00212aa:	83 ec 08             	sub    esp,0x8
c00212ad:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212b8:	50                   	push   eax
c00212b9:	e8 7e f5 fd ff       	call   c000083c <strcpy>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	83 ec 08             	sub    esp,0x8
c00212c4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00212c8:	50                   	push   eax
c00212c9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212d0:	e8 79 ff ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c00212d5:	83 c4 10             	add    esp,0x10
c00212d8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00212e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212e7:	83 e0 01             	and    eax,0x1
c00212ea:	74 08                	je     c00212f4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00212ec:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00212f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212fb:	83 e0 04             	and    eax,0x4
c00212fe:	74 10                	je     c0021310 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021300:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021308:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021310:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021317:	83 e0 02             	and    eax,0x2
c002131a:	74 08                	je     c0021324 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002131c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002132b:	83 e0 08             	and    eax,0x8
c002132e:	74 08                	je     c0021338 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021330:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021338:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002133f:	83 e0 10             	and    eax,0x10
c0021342:	74 08                	je     c002134c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021344:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002134c:	83 ec 0c             	sub    esp,0xc
c002134f:	68 50 02 00 00       	push   0x250
c0021354:	e8 f2 e4 fe ff       	call   c000f84b <malloc>
c0021359:	83 c4 10             	add    esp,0x10
c002135c:	89 c2                	mov    edx,eax
c002135e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021365:	89 10                	mov    DWORD PTR [eax],edx
c0021367:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002136f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021376:	8b 00                	mov    eax,DWORD PTR [eax]
c0021378:	83 ec 04             	sub    esp,0x4
c002137b:	52                   	push   edx
c002137c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021380:	52                   	push   edx
c0021381:	50                   	push   eax
c0021382:	e8 12 3c fe ff       	call   c0004f99 <f_open>
c0021387:	83 c4 10             	add    esp,0x10
c002138a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021391:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021399:	74 07                	je     c00213a2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002139b:	b8 01 00 00 00       	mov    eax,0x1
c00213a0:	eb 05                	jmp    c00213a7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00213a2:	b8 00 00 00 00       	mov    eax,0x0
c00213a7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213ad:	c3                   	ret    

c00213ae <FAT::openDir(char const*, void**)>:
c00213ae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213b4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213bc:	74 0a                	je     c00213c8 <FAT::openDir(char const*, void**)+0x1a>
c00213be:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00213c6:	75 07                	jne    c00213cf <FAT::openDir(char const*, void**)+0x21>
c00213c8:	b8 04 00 00 00       	mov    eax,0x4
c00213cd:	eb 7d                	jmp    c002144c <FAT::openDir(char const*, void**)+0x9e>
c00213cf:	83 ec 08             	sub    esp,0x8
c00213d2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213dd:	50                   	push   eax
c00213de:	e8 59 f4 fd ff       	call   c000083c <strcpy>
c00213e3:	83 c4 10             	add    esp,0x10
c00213e6:	83 ec 08             	sub    esp,0x8
c00213e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ed:	50                   	push   eax
c00213ee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213f5:	e8 54 fe ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c00213fa:	83 c4 10             	add    esp,0x10
c00213fd:	83 ec 0c             	sub    esp,0xc
c0021400:	6a 4c                	push   0x4c
c0021402:	e8 44 e4 fe ff       	call   c000f84b <malloc>
c0021407:	83 c4 10             	add    esp,0x10
c002140a:	89 c2                	mov    edx,eax
c002140c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021413:	89 10                	mov    DWORD PTR [eax],edx
c0021415:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002141c:	8b 00                	mov    eax,DWORD PTR [eax]
c002141e:	83 ec 08             	sub    esp,0x8
c0021421:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021425:	52                   	push   edx
c0021426:	50                   	push   eax
c0021427:	e8 a5 4b fe ff       	call   c0005fd1 <f_opendir>
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021436:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002143e:	74 07                	je     c0021447 <FAT::openDir(char const*, void**)+0x99>
c0021440:	b8 01 00 00 00       	mov    eax,0x1
c0021445:	eb 05                	jmp    c002144c <FAT::openDir(char const*, void**)+0x9e>
c0021447:	b8 00 00 00 00       	mov    eax,0x0
c002144c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021452:	c3                   	ret    
c0021453:	90                   	nop

c0021454 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021454:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002145a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021462:	75 0a                	jne    c002146e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021464:	b8 04 00 00 00       	mov    eax,0x4
c0021469:	e9 c9 00 00 00       	jmp    c0021537 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002146e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021476:	75 0a                	jne    c0021482 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021478:	b8 04 00 00 00       	mov    eax,0x4
c002147d:	e9 b5 00 00 00       	jmp    c0021537 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021482:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002148a:	75 0a                	jne    c0021496 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002148c:	b8 04 00 00 00       	mov    eax,0x4
c0021491:	e9 a1 00 00 00       	jmp    c0021537 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021496:	83 ec 08             	sub    esp,0x8
c0021499:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214a0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00214a7:	50                   	push   eax
c00214a8:	e8 8f f3 fd ff       	call   c000083c <strcpy>
c00214ad:	83 c4 10             	add    esp,0x10
c00214b0:	83 ec 08             	sub    esp,0x8
c00214b3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00214ba:	50                   	push   eax
c00214bb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214c2:	e8 87 fd ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c00214c7:	83 c4 10             	add    esp,0x10
c00214ca:	83 ec 08             	sub    esp,0x8
c00214cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214d1:	50                   	push   eax
c00214d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00214d9:	50                   	push   eax
c00214da:	e8 b1 4c fe ff       	call   c0006190 <f_stat>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214e9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214f0:	85 c0                	test   eax,eax
c00214f2:	74 07                	je     c00214fb <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00214f4:	83 f8 04             	cmp    eax,0x4
c00214f7:	74 32                	je     c002152b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00214f9:	eb 37                	jmp    c0021532 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00214fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00214ff:	0f b6 c0             	movzx  eax,al
c0021502:	83 e0 10             	and    eax,0x10
c0021505:	0f 95 c2             	setne  dl
c0021508:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002150f:	88 10                	mov    BYTE PTR [eax],dl
c0021511:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021518:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002151f:	89 01                	mov    DWORD PTR [ecx],eax
c0021521:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021524:	b8 00 00 00 00       	mov    eax,0x0
c0021529:	eb 0c                	jmp    c0021537 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002152b:	b8 02 00 00 00       	mov    eax,0x2
c0021530:	eb 05                	jmp    c0021537 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021532:	b8 01 00 00 00       	mov    eax,0x1
c0021537:	81 c4 2c 02 00 00    	add    esp,0x22c
c002153d:	c3                   	ret    

c002153e <FAT::unlink(char const*)>:
c002153e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021544:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002154c:	75 07                	jne    c0021555 <FAT::unlink(char const*)+0x17>
c002154e:	b8 04 00 00 00       	mov    eax,0x4
c0021553:	eb 5c                	jmp    c00215b1 <FAT::unlink(char const*)+0x73>
c0021555:	83 ec 08             	sub    esp,0x8
c0021558:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021563:	50                   	push   eax
c0021564:	e8 d3 f2 fd ff       	call   c000083c <strcpy>
c0021569:	83 c4 10             	add    esp,0x10
c002156c:	83 ec 08             	sub    esp,0x8
c002156f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021573:	50                   	push   eax
c0021574:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002157b:	e8 ce fc ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c0021580:	83 c4 10             	add    esp,0x10
c0021583:	83 ec 0c             	sub    esp,0xc
c0021586:	8d 44 24 18          	lea    eax,[esp+0x18]
c002158a:	50                   	push   eax
c002158b:	e8 52 4f fe ff       	call   c00064e2 <f_unlink>
c0021590:	83 c4 10             	add    esp,0x10
c0021593:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002159a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215a1:	85 c0                	test   eax,eax
c00215a3:	75 07                	jne    c00215ac <FAT::unlink(char const*)+0x6e>
c00215a5:	b8 00 00 00 00       	mov    eax,0x0
c00215aa:	eb 05                	jmp    c00215b1 <FAT::unlink(char const*)+0x73>
c00215ac:	b8 01 00 00 00       	mov    eax,0x1
c00215b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215b7:	c3                   	ret    

c00215b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00215b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00215be:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00215c5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00215cc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215d4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00215dc:	75 0a                	jne    c00215e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00215de:	b8 04 00 00 00       	mov    eax,0x4
c00215e3:	e9 1c 01 00 00       	jmp    c0021704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00215f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00215f6:	50                   	push   eax
c00215f7:	e8 40 f2 fd ff       	call   c000083c <strcpy>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	83 ec 08             	sub    esp,0x8
c0021602:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021606:	50                   	push   eax
c0021607:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002160e:	e8 3b fc ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002161e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021626:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002162b:	83 e0 01             	and    eax,0x1
c002162e:	74 08                	je     c0021638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021630:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021638:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002163d:	83 e0 02             	and    eax,0x2
c0021640:	74 08                	je     c002164a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021642:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002164a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002164f:	83 e0 04             	and    eax,0x4
c0021652:	74 08                	je     c002165c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021654:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002165c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021661:	83 e0 08             	and    eax,0x8
c0021664:	74 08                	je     c002166e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021666:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002166e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021673:	83 e0 01             	and    eax,0x1
c0021676:	74 08                	je     c0021680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021678:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021680:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021685:	83 e0 02             	and    eax,0x2
c0021688:	74 08                	je     c0021692 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002168a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021692:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021697:	83 e0 04             	and    eax,0x4
c002169a:	74 08                	je     c00216a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002169c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00216a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216a9:	83 e0 08             	and    eax,0x8
c00216ac:	74 08                	je     c00216b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00216ae:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00216b6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00216bd:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00216c4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00216cc:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00216d4:	83 ec 04             	sub    esp,0x4
c00216d7:	52                   	push   edx
c00216d8:	50                   	push   eax
c00216d9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00216dd:	50                   	push   eax
c00216de:	e8 a1 54 fe ff       	call   c0006b84 <f_chmod>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00216ed:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00216f4:	85 c0                	test   eax,eax
c00216f6:	75 07                	jne    c00216ff <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00216f8:	b8 00 00 00 00       	mov    eax,0x0
c00216fd:	eb 05                	jmp    c0021704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00216ff:	b8 01 00 00 00       	mov    eax,0x1
c0021704:	81 c4 2c 01 00 00    	add    esp,0x12c
c002170a:	c3                   	ret    
c002170b:	90                   	nop

c002170c <FAT::rename(char const*, char const*)>:
c002170c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021712:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002171a:	74 0a                	je     c0021726 <FAT::rename(char const*, char const*)+0x1a>
c002171c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021724:	75 0a                	jne    c0021730 <FAT::rename(char const*, char const*)+0x24>
c0021726:	b8 04 00 00 00       	mov    eax,0x4
c002172b:	e9 98 00 00 00       	jmp    c00217c8 <FAT::rename(char const*, char const*)+0xbc>
c0021730:	83 ec 08             	sub    esp,0x8
c0021733:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002173a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021741:	50                   	push   eax
c0021742:	e8 f5 f0 fd ff       	call   c000083c <strcpy>
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	83 ec 08             	sub    esp,0x8
c002174d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021754:	50                   	push   eax
c0021755:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002175c:	e8 ed fa ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c0021761:	83 c4 10             	add    esp,0x10
c0021764:	83 ec 08             	sub    esp,0x8
c0021767:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002176e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021772:	50                   	push   eax
c0021773:	e8 c4 f0 fd ff       	call   c000083c <strcpy>
c0021778:	83 c4 10             	add    esp,0x10
c002177b:	83 ec 08             	sub    esp,0x8
c002177e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021782:	50                   	push   eax
c0021783:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002178a:	e8 bf fa ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021799:	50                   	push   eax
c002179a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00217a1:	50                   	push   eax
c00217a2:	e8 ea 50 fe ff       	call   c0006891 <f_rename>
c00217a7:	83 c4 10             	add    esp,0x10
c00217aa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00217b1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00217b8:	85 c0                	test   eax,eax
c00217ba:	75 07                	jne    c00217c3 <FAT::rename(char const*, char const*)+0xb7>
c00217bc:	b8 00 00 00 00       	mov    eax,0x0
c00217c1:	eb 05                	jmp    c00217c8 <FAT::rename(char const*, char const*)+0xbc>
c00217c3:	b8 01 00 00 00       	mov    eax,0x1
c00217c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00217ce:	c3                   	ret    
c00217cf:	90                   	nop

c00217d0 <FAT::mkdir(char const*)>:
c00217d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00217de:	75 07                	jne    c00217e7 <FAT::mkdir(char const*)+0x17>
c00217e0:	b8 04 00 00 00       	mov    eax,0x4
c00217e5:	eb 5c                	jmp    c0021843 <FAT::mkdir(char const*)+0x73>
c00217e7:	83 ec 08             	sub    esp,0x8
c00217ea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217f5:	50                   	push   eax
c00217f6:	e8 41 f0 fd ff       	call   c000083c <strcpy>
c00217fb:	83 c4 10             	add    esp,0x10
c00217fe:	83 ec 08             	sub    esp,0x8
c0021801:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021805:	50                   	push   eax
c0021806:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002180d:	e8 3c fa ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c0021812:	83 c4 10             	add    esp,0x10
c0021815:	83 ec 0c             	sub    esp,0xc
c0021818:	8d 44 24 18          	lea    eax,[esp+0x18]
c002181c:	50                   	push   eax
c002181d:	e8 43 4e fe ff       	call   c0006665 <f_mkdir>
c0021822:	83 c4 10             	add    esp,0x10
c0021825:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002182c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021833:	85 c0                	test   eax,eax
c0021835:	75 07                	jne    c002183e <FAT::mkdir(char const*)+0x6e>
c0021837:	b8 00 00 00 00       	mov    eax,0x0
c002183c:	eb 05                	jmp    c0021843 <FAT::mkdir(char const*)+0x73>
c002183e:	b8 01 00 00 00       	mov    eax,0x1
c0021843:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021849:	c3                   	ret    

c002184a <FAT::exists(char const*)>:
c002184a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021850:	83 ec 08             	sub    esp,0x8
c0021853:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002185a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002185e:	50                   	push   eax
c002185f:	e8 d8 ef fd ff       	call   c000083c <strcpy>
c0021864:	83 c4 10             	add    esp,0x10
c0021867:	83 ec 08             	sub    esp,0x8
c002186a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002186e:	50                   	push   eax
c002186f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021876:	e8 d3 f9 ff ff       	call   c002124e <FAT::fixFilepath(char*)>
c002187b:	83 c4 10             	add    esp,0x10
c002187e:	83 ec 08             	sub    esp,0x8
c0021881:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021888:	50                   	push   eax
c0021889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002188d:	50                   	push   eax
c002188e:	e8 fd 48 fe ff       	call   c0006190 <f_stat>
c0021893:	83 c4 10             	add    esp,0x10
c0021896:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002189d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00218a4:	85 c0                	test   eax,eax
c00218a6:	75 04                	jne    c00218ac <FAT::exists(char const*)+0x62>
c00218a8:	b0 01                	mov    al,0x1
c00218aa:	eb 02                	jmp    c00218ae <FAT::exists(char const*)+0x64>
c00218ac:	b0 00                	mov    al,0x0
c00218ae:	81 c4 2c 02 00 00    	add    esp,0x22c
c00218b4:	c3                   	ret    
c00218b5:	90                   	nop

c00218b6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00218b6:	b8 08 00 00 00       	mov    eax,0x8
c00218bb:	c3                   	ret    

c00218bc <ISO9660::seek(void*, unsigned long long)>:
c00218bc:	53                   	push   ebx
c00218bd:	b8 04 00 00 00       	mov    eax,0x4
c00218c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218ce:	85 d2                	test   edx,edx
c00218d0:	74 17                	je     c00218e9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00218d2:	89 c8                	mov    eax,ecx
c00218d4:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00218d7:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00218da:	b8 01 00 00 00       	mov    eax,0x1
c00218df:	73 08                	jae    c00218e9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00218e1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00218e4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00218e7:	31 c0                	xor    eax,eax
c00218e9:	5b                   	pop    ebx
c00218ea:	c3                   	ret    
c00218eb:	90                   	nop

c00218ec <ISO9660::tell(void*, unsigned long long*)>:
c00218ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f4:	85 d2                	test   edx,edx
c00218f6:	74 12                	je     c002190a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00218f8:	85 c0                	test   eax,eax
c00218fa:	74 0e                	je     c002190a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00218fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00218ff:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021902:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021905:	89 10                	mov    DWORD PTR [eax],edx
c0021907:	31 c0                	xor    eax,eax
c0021909:	c3                   	ret    
c002190a:	b8 04 00 00 00       	mov    eax,0x4
c002190f:	c3                   	ret    

c0021910 <ISO9660::getName()>:
c0021910:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0021915:	c3                   	ret    

c0021916 <ISO9660::stat(void*, unsigned long long*)>:
c0021916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002191a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191e:	85 d2                	test   edx,edx
c0021920:	74 12                	je     c0021934 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021922:	85 c0                	test   eax,eax
c0021924:	74 0e                	je     c0021934 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021926:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021929:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002192c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002192f:	89 10                	mov    DWORD PTR [eax],edx
c0021931:	31 c0                	xor    eax,eax
c0021933:	c3                   	ret    
c0021934:	b8 04 00 00 00       	mov    eax,0x4
c0021939:	c3                   	ret    

c002193a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002193a:	b8 01 00 00 00       	mov    eax,0x1
c002193f:	c3                   	ret    

c0021940 <ISO9660::unlink(char const*)>:
c0021940:	b8 01 00 00 00       	mov    eax,0x1
c0021945:	c3                   	ret    

c0021946 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021946:	b8 01 00 00 00       	mov    eax,0x1
c002194b:	c3                   	ret    

c002194c <ISO9660::rename(char const*, char const*)>:
c002194c:	b8 01 00 00 00       	mov    eax,0x1
c0021951:	c3                   	ret    

c0021952 <ISO9660::mkdir(char const*)>:
c0021952:	b8 01 00 00 00       	mov    eax,0x1
c0021957:	c3                   	ret    

c0021958 <ISO9660::close(void*)>:
c0021958:	83 ec 0c             	sub    esp,0xc
c002195b:	b8 04 00 00 00       	mov    eax,0x4
c0021960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021964:	85 d2                	test   edx,edx
c0021966:	74 0e                	je     c0021976 <ISO9660::close(void*)+0x1e>
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	52                   	push   edx
c002196c:	e8 ea de fe ff       	call   c000f85b <free>
c0021971:	83 c4 10             	add    esp,0x10
c0021974:	31 c0                	xor    eax,eax
c0021976:	83 c4 0c             	add    esp,0xc
c0021979:	c3                   	ret    

c002197a <ISO9660::closeDir(void*)>:
c002197a:	83 ec 0c             	sub    esp,0xc
c002197d:	b8 04 00 00 00       	mov    eax,0x4
c0021982:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021986:	85 d2                	test   edx,edx
c0021988:	74 0e                	je     c0021998 <ISO9660::closeDir(void*)+0x1e>
c002198a:	83 ec 0c             	sub    esp,0xc
c002198d:	52                   	push   edx
c002198e:	e8 c8 de fe ff       	call   c000f85b <free>
c0021993:	83 c4 10             	add    esp,0x10
c0021996:	31 c0                	xor    eax,eax
c0021998:	83 c4 0c             	add    esp,0xc
c002199b:	c3                   	ret    

c002199c <ISO9660::~ISO9660()>:
c002199c:	83 ec 0c             	sub    esp,0xc
c002199f:	ba b4 ce 02 c0       	mov    edx,0xc002ceb4
c00219a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a8:	89 10                	mov    DWORD PTR [eax],edx
c00219aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ae:	83 ec 0c             	sub    esp,0xc
c00219b1:	50                   	push   eax
c00219b2:	e8 3b 17 ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	90                   	nop
c00219bb:	83 c4 0c             	add    esp,0xc
c00219be:	c3                   	ret    
c00219bf:	90                   	nop

c00219c0 <ISO9660::~ISO9660()>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	83 ec 0c             	sub    esp,0xc
c00219c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ca:	e8 cd ff ff ff       	call   c002199c <ISO9660::~ISO9660()>
c00219cf:	83 c4 10             	add    esp,0x10
c00219d2:	83 ec 08             	sub    esp,0x8
c00219d5:	6a 08                	push   0x8
c00219d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219db:	e8 03 13 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00219e0:	83 c4 10             	add    esp,0x10
c00219e3:	83 c4 0c             	add    esp,0xc
c00219e6:	c3                   	ret    

c00219e7 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00219e7:	55                   	push   ebp
c00219e8:	31 c9                	xor    ecx,ecx
c00219ea:	57                   	push   edi
c00219eb:	56                   	push   esi
c00219ec:	53                   	push   ebx
c00219ed:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00219f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00219f5:	89 eb                	mov    ebx,ebp
c00219f7:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00219fb:	39 ce                	cmp    esi,ecx
c00219fd:	7e 17                	jle    c0021a16 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00219ff:	31 d2                	xor    edx,edx
c0021a01:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021a05:	7d 13                	jge    c0021a1a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021a07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a0b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021a0e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021a11:	75 0d                	jne    c0021a20 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021a13:	42                   	inc    edx
c0021a14:	eb eb                	jmp    c0021a01 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021a16:	31 c0                	xor    eax,eax
c0021a18:	eb 0a                	jmp    c0021a24 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a1a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021a1e:	eb 04                	jmp    c0021a24 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a20:	41                   	inc    ecx
c0021a21:	43                   	inc    ebx
c0021a22:	eb d7                	jmp    c00219fb <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021a24:	5b                   	pop    ebx
c0021a25:	5e                   	pop    esi
c0021a26:	5f                   	pop    edi
c0021a27:	5d                   	pop    ebp
c0021a28:	c3                   	ret    

c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021a29:	56                   	push   esi
c0021a2a:	53                   	push   ebx
c0021a2b:	52                   	push   edx
c0021a2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021a34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a38:	39 0d e0 20 03 c0    	cmp    DWORD PTR ds:0xc00320e0,ecx
c0021a3e:	75 08                	jne    c0021a48 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021a40:	38 05 34 df 02 c0    	cmp    BYTE PTR ds:0xc002df34,al
c0021a46:	74 2b                	je     c0021a73 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021a48:	83 ec 0c             	sub    esp,0xc
c0021a4b:	a2 34 df 02 c0       	mov    ds:0xc002df34,al
c0021a50:	68 00 21 03 c0       	push   0xc0032100
c0021a55:	0f be c0             	movsx  eax,al
c0021a58:	6a 01                	push   0x1
c0021a5a:	89 0d e0 20 03 c0    	mov    DWORD PTR ds:0xc00320e0,ecx
c0021a60:	31 db                	xor    ebx,ebx
c0021a62:	53                   	push   ebx
c0021a63:	51                   	push   ecx
c0021a64:	ff 34 85 bc ee 02 c0 	push   DWORD PTR [eax*4-0x3ffd1144]
c0021a6b:	e8 34 4c ff ff       	call   c00166a4 <LogicalDisk::read(unsigned long long, int, void*)>
c0021a70:	83 c4 20             	add    esp,0x20
c0021a73:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021a7b:	c7 44 24 14 00 21 03 c0 	mov    DWORD PTR [esp+0x14],0xc0032100
c0021a83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a87:	58                   	pop    eax
c0021a88:	5b                   	pop    ebx
c0021a89:	5e                   	pop    esi
c0021a8a:	e9 bd ec fd ff       	jmp    c000074c <memcpy>
c0021a8f:	90                   	nop

c0021a90 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a90:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a96:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a9d:	83 c0 41             	add    eax,0x41
c0021aa0:	0f be c0             	movsx  eax,al
c0021aa3:	50                   	push   eax
c0021aa4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021aa8:	50                   	push   eax
c0021aa9:	6a 10                	push   0x10
c0021aab:	e8 79 ff ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab0:	83 c4 10             	add    esp,0x10
c0021ab3:	31 c0                	xor    eax,eax
c0021ab5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021aba:	75 1d                	jne    c0021ad9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021abc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021ac1:	75 16                	jne    c0021ad9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ac3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021ac8:	75 0f                	jne    c0021ad9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021aca:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021acf:	75 08                	jne    c0021ad9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ad1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021ad6:	0f 94 c0             	sete   al
c0021ad9:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021adf:	c3                   	ret    

c0021ae0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021ae0:	55                   	push   ebp
c0021ae1:	57                   	push   edi
c0021ae2:	56                   	push   esi
c0021ae3:	53                   	push   ebx
c0021ae4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021aea:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021af1:	85 ed                	test   ebp,ebp
c0021af3:	0f 84 d6 01 00 00    	je     c0021ccf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021af9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021b01:	0f 84 c8 01 00 00    	je     c0021ccf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b07:	b8 01 00 00 00       	mov    eax,0x1
c0021b0c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021b10:	0f 85 be 01 00 00    	jne    c0021cd4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b16:	31 d2                	xor    edx,edx
c0021b18:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021b1f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b22:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021b25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021b29:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021b2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b33:	01 f0                	add    eax,esi
c0021b35:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021b38:	11 fa                	adc    edx,edi
c0021b3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021b3e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021b42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021b46:	19 d1                	sbb    ecx,edx
c0021b48:	72 0a                	jb     c0021b54 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021b4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b52:	eb 13                	jmp    c0021b67 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b5c:	29 f0                	sub    eax,esi
c0021b5e:	19 fa                	sbb    edx,edi
c0021b60:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b6a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021b6d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021b71:	51                   	push   ecx
c0021b72:	c1 e0 0b             	shl    eax,0xb
c0021b75:	01 c6                	add    esi,eax
c0021b77:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b7b:	11 d7                	adc    edi,edx
c0021b7d:	50                   	push   eax
c0021b7e:	89 fa                	mov    edx,edi
c0021b80:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021b84:	89 f0                	mov    eax,esi
c0021b86:	53                   	push   ebx
c0021b87:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b8b:	50                   	push   eax
c0021b8c:	e8 98 fe ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b95:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b98:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021b9c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021ba2:	83 c4 10             	add    esp,0x10
c0021ba5:	b8 00 08 00 00       	mov    eax,0x800
c0021baa:	29 d0                	sub    eax,edx
c0021bac:	39 c1                	cmp    ecx,eax
c0021bae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021bb2:	83 d9 00             	sbb    ecx,0x0
c0021bb5:	7d 1c                	jge    c0021bd3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021bb7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021bbc:	75 12                	jne    c0021bd0 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021bbe:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bc5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bcb:	e9 fb 00 00 00       	jmp    c0021ccb <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021bd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bd3:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021bd6:	31 d2                	xor    edx,edx
c0021bd8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021bdc:	39 c2                	cmp    edx,eax
c0021bde:	7d 14                	jge    c0021bf4 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021be0:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021be7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021beb:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021bee:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021bf1:	42                   	inc    edx
c0021bf2:	eb e8                	jmp    c0021bdc <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021bf4:	89 c3                	mov    ebx,eax
c0021bf6:	85 c0                	test   eax,eax
c0021bf8:	79 02                	jns    c0021bfc <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021bfa:	31 db                	xor    ebx,ebx
c0021bfc:	99                   	cdq    
c0021bfd:	01 c3                	add    ebx,eax
c0021bff:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021c06:	01 c6                	add    esi,eax
c0021c08:	11 d7                	adc    edi,edx
c0021c0a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021c0e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021c12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021c15:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021c19:	29 c6                	sub    esi,eax
c0021c1b:	19 d7                	sbb    edi,edx
c0021c1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021c24:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021c29:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021c2c:	b8 00 00 00 00       	mov    eax,0x0
c0021c31:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021c35:	7d 3e                	jge    c0021c75 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021c37:	52                   	push   edx
c0021c38:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c3c:	50                   	push   eax
c0021c3d:	53                   	push   ebx
c0021c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c46:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021c4a:	50                   	push   eax
c0021c4b:	e8 d9 fd ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c50:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021c58:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021c5d:	81 c3 00 08 00 00    	add    ebx,0x800
c0021c63:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021c6b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021c70:	83 c4 10             	add    esp,0x10
c0021c73:	eb af                	jmp    c0021c24 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c79:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021c7c:	74 32                	je     c0021cb0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021c7e:	50                   	push   eax
c0021c7f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c83:	50                   	push   eax
c0021c84:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021c88:	50                   	push   eax
c0021c89:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021c8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021c91:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021c95:	56                   	push   esi
c0021c96:	e8 8e fd ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c9b:	83 c4 0c             	add    esp,0xc
c0021c9e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021ca2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ca6:	50                   	push   eax
c0021ca7:	53                   	push   ebx
c0021ca8:	e8 9f ea fd ff       	call   c000074c <memcpy>
c0021cad:	83 c4 10             	add    esp,0x10
c0021cb0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cb7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021cbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021cbf:	89 38                	mov    DWORD PTR [eax],edi
c0021cc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cc5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021cc8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ccb:	31 c0                	xor    eax,eax
c0021ccd:	eb 05                	jmp    c0021cd4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021ccf:	b8 04 00 00 00       	mov    eax,0x4
c0021cd4:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021cda:	5b                   	pop    ebx
c0021cdb:	5e                   	pop    esi
c0021cdc:	5f                   	pop    edi
c0021cdd:	5d                   	pop    ebp
c0021cde:	c3                   	ret    
c0021cdf:	90                   	nop

c0021ce0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021ce0:	55                   	push   ebp
c0021ce1:	57                   	push   edi
c0021ce2:	56                   	push   esi
c0021ce3:	53                   	push   ebx
c0021ce4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021cea:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021cf1:	85 f6                	test   esi,esi
c0021cf3:	0f 84 64 02 00 00    	je     c0021f5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021cf9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021d01:	0f 84 56 02 00 00    	je     c0021f5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021d07:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021d0a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021d0d:	75 0a                	jne    c0021d19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021d0f:	b8 07 00 00 00       	mov    eax,0x7
c0021d14:	e9 49 02 00 00       	jmp    c0021f62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d19:	50                   	push   eax
c0021d1a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021d1e:	50                   	push   eax
c0021d1f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d26:	53                   	push   ebx
c0021d27:	8b 06                	mov    eax,DWORD PTR [esi]
c0021d29:	c1 e0 0b             	shl    eax,0xb
c0021d2c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021d2f:	c1 e8 0b             	shr    eax,0xb
c0021d32:	50                   	push   eax
c0021d33:	e8 f1 fc ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d38:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021d3b:	83 c4 10             	add    esp,0x10
c0021d3e:	89 c1                	mov    ecx,eax
c0021d40:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021d43:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021d49:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021d4c:	84 db                	test   bl,bl
c0021d4e:	0f 85 90 00 00 00    	jne    c0021de4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021d54:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021d5a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021d60:	29 c7                	sub    edi,eax
c0021d62:	89 fb                	mov    ebx,edi
c0021d64:	c1 fb 1f             	sar    ebx,0x1f
c0021d67:	01 f8                	add    eax,edi
c0021d69:	11 da                	adc    edx,ebx
c0021d6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021d73:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021d76:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021d79:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d7c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d82:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021d86:	89 d8                	mov    eax,ebx
c0021d88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021d8b:	ba 00 00 00 00       	mov    edx,0x0
c0021d90:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021d94:	b8 00 00 00 00       	mov    eax,0x0
c0021d99:	73 0b                	jae    c0021da6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021d9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021d9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021da2:	29 f8                	sub    eax,edi
c0021da4:	19 da                	sbb    edx,ebx
c0021da6:	89 d3                	mov    ebx,edx
c0021da8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021dab:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021dae:	09 c3                	or     ebx,eax
c0021db0:	0f 84 59 ff ff ff    	je     c0021d0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021db6:	55                   	push   ebp
c0021db7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021dbb:	50                   	push   eax
c0021dbc:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021dc3:	53                   	push   ebx
c0021dc4:	8b 06                	mov    eax,DWORD PTR [esi]
c0021dc6:	c1 e0 0b             	shl    eax,0xb
c0021dc9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021dcd:	c1 e8 0b             	shr    eax,0xb
c0021dd0:	50                   	push   eax
c0021dd1:	e8 53 fc ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021dd9:	83 c4 10             	add    esp,0x10
c0021ddc:	25 ff 07 00 00       	and    eax,0x7ff
c0021de1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021de4:	57                   	push   edi
c0021de5:	6a 28                	push   0x28
c0021de7:	6a 00                	push   0x0
c0021de9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ded:	50                   	push   eax
c0021dee:	e8 8d e9 fd ff       	call   c0000780 <memset>
c0021df3:	31 d2                	xor    edx,edx
c0021df5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021df8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021dfe:	89 f8                	mov    eax,edi
c0021e00:	83 c0 21             	add    eax,0x21
c0021e03:	83 d2 00             	adc    edx,0x0
c0021e06:	89 c7                	mov    edi,eax
c0021e08:	89 d5                	mov    ebp,edx
c0021e0a:	83 c4 10             	add    esp,0x10
c0021e0d:	31 c9                	xor    ecx,ecx
c0021e0f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021e16:	83 f9 28             	cmp    ecx,0x28
c0021e19:	88 04 24             	mov    BYTE PTR [esp],al
c0021e1c:	0f 94 c2             	sete   dl
c0021e1f:	88 d0                	mov    al,dl
c0021e21:	ba ff 07 00 00       	mov    edx,0x7ff
c0021e26:	39 fa                	cmp    edx,edi
c0021e28:	ba 00 00 00 00       	mov    edx,0x0
c0021e2d:	19 ea                	sbb    edx,ebp
c0021e2f:	0f 92 c2             	setb   dl
c0021e32:	09 c2                	or     edx,eax
c0021e34:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021e38:	0f 94 c0             	sete   al
c0021e3b:	08 d0                	or     al,dl
c0021e3d:	75 16                	jne    c0021e55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021e3f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021e43:	74 10                	je     c0021e55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021e45:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021e48:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021e4c:	41                   	inc    ecx
c0021e4d:	83 c7 01             	add    edi,0x1
c0021e50:	83 d5 00             	adc    ebp,0x0
c0021e53:	eb ba                	jmp    c0021e0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021e55:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021e63:	57                   	push   edi
c0021e64:	e8 33 e9 fd ff       	call   c000079c <strlen>
c0021e69:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021e71:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e75:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021e7c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021e7f:	5a                   	pop    edx
c0021e80:	25 ff 07 00 00       	and    eax,0x7ff
c0021e85:	01 c8                	add    eax,ecx
c0021e87:	59                   	pop    ecx
c0021e88:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021e8e:	83 e0 02             	and    eax,0x2
c0021e91:	3c 01                	cmp    al,0x1
c0021e93:	19 c0                	sbb    eax,eax
c0021e95:	83 c0 02             	add    eax,0x2
c0021e98:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e9c:	57                   	push   edi
c0021e9d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ea1:	50                   	push   eax
c0021ea2:	e8 95 e9 fd ff       	call   c000083c <strcpy>
c0021ea7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021eab:	83 c4 10             	add    esp,0x10
c0021eae:	84 c0                	test   al,al
c0021eb0:	75 21                	jne    c0021ed3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021eb2:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021eba:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ec2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021eca:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ed1:	eb 28                	jmp    c0021efb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ed3:	fe c8                	dec    al
c0021ed5:	75 24                	jne    c0021efb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ed7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021edf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ee7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021eef:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ef6:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021efb:	0f b6 fb             	movzx  edi,bl
c0021efe:	31 db                	xor    ebx,ebx
c0021f00:	50                   	push   eax
c0021f01:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021f08:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021f0c:	50                   	push   eax
c0021f0d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021f14:	e8 33 e8 fd ff       	call   c000074c <memcpy>
c0021f19:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021f20:	89 f9                	mov    ecx,edi
c0021f22:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021f28:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021f2b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021f2e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021f31:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021f34:	83 c4 10             	add    esp,0x10
c0021f37:	39 c7                	cmp    edi,eax
c0021f39:	89 df                	mov    edi,ebx
c0021f3b:	19 d7                	sbb    edi,edx
c0021f3d:	72 10                	jb     c0021f4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021f3f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021f46:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021f4d:	eb 0a                	jmp    c0021f59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021f4f:	29 c8                	sub    eax,ecx
c0021f51:	19 da                	sbb    edx,ebx
c0021f53:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021f56:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021f59:	31 c0                	xor    eax,eax
c0021f5b:	eb 05                	jmp    c0021f62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021f5d:	b8 04 00 00 00       	mov    eax,0x4
c0021f62:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021f68:	5b                   	pop    ebx
c0021f69:	5e                   	pop    esi
c0021f6a:	5f                   	pop    edi
c0021f6b:	5d                   	pop    ebp
c0021f6c:	c3                   	ret    

c0021f6d <readRoot(unsigned int*, unsigned int*, char)>:
c0021f6d:	81 ec 40 08 00 00    	sub    esp,0x840
c0021f73:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021f7b:	50                   	push   eax
c0021f7c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021f80:	50                   	push   eax
c0021f81:	6a 10                	push   0x10
c0021f83:	e8 a1 fa ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f88:	83 c4 0c             	add    esp,0xc
c0021f8b:	6a 22                	push   0x22
c0021f8d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021f94:	50                   	push   eax
c0021f95:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021f99:	50                   	push   eax
c0021f9a:	e8 ad e7 fd ff       	call   c000074c <memcpy>
c0021f9f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021fa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021faa:	89 10                	mov    DWORD PTR [eax],edx
c0021fac:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021fb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021fb7:	89 10                	mov    DWORD PTR [eax],edx
c0021fb9:	b0 01                	mov    al,0x1
c0021fbb:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021fc1:	c3                   	ret    

c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021fc2:	55                   	push   ebp
c0021fc3:	57                   	push   edi
c0021fc4:	56                   	push   esi
c0021fc5:	53                   	push   ebx
c0021fc6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021fcc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021fd3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fde:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021fe2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021fe6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021fea:	75 03                	jne    c0021fef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021fec:	83 c3 02             	add    ebx,0x2
c0021fef:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021ff2:	75 03                	jne    c0021ff7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021ff4:	43                   	inc    ebx
c0021ff5:	eb f8                	jmp    c0021fef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021ff7:	51                   	push   ecx
c0021ff8:	68 00 01 00 00       	push   0x100
c0021ffd:	6a 00                	push   0x0
c0021fff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022003:	50                   	push   eax
c0022004:	e8 77 e7 fd ff       	call   c0000780 <memset>
c0022009:	83 c4 10             	add    esp,0x10
c002200c:	31 d2                	xor    edx,edx
c002200e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022011:	84 c0                	test   al,al
c0022013:	74 21                	je     c0022036 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022015:	3c 2f                	cmp    al,0x2f
c0022017:	75 0b                	jne    c0022024 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022019:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002201d:	bd 01 00 00 00       	mov    ebp,0x1
c0022022:	eb 14                	jmp    c0022038 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022024:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022027:	80 f9 19             	cmp    cl,0x19
c002202a:	77 03                	ja     c002202f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002202c:	83 e8 20             	sub    eax,0x20
c002202f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022033:	42                   	inc    edx
c0022034:	eb d8                	jmp    c002200e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022036:	31 ed                	xor    ebp,ebp
c0022038:	83 ec 0c             	sub    esp,0xc
c002203b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022042:	e8 04 d8 fe ff       	call   c000f84b <malloc>
c0022047:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002204e:	89 c6                	mov    esi,eax
c0022050:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022056:	c1 ef 0b             	shr    edi,0xb
c0022059:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022060:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022064:	83 c4 10             	add    esp,0x10
c0022067:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002206c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022070:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022077:	74 28                	je     c00220a1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022079:	52                   	push   edx
c002207a:	57                   	push   edi
c002207b:	50                   	push   eax
c002207c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022080:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022087:	e8 9d f9 ff ff       	call   c0021a29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002208c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022090:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022097:	05 00 08 00 00       	add    eax,0x800
c002209c:	83 c4 10             	add    esp,0x10
c002209f:	eb cb                	jmp    c002206c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00220a1:	83 ec 0c             	sub    esp,0xc
c00220a4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00220a8:	57                   	push   edi
c00220a9:	e8 ee e6 fd ff       	call   c000079c <strlen>
c00220ae:	50                   	push   eax
c00220af:	57                   	push   edi
c00220b0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00220b7:	56                   	push   esi
c00220b8:	e8 2a f9 ff ff       	call   c00219e7 <__memmem(unsigned char*, int, unsigned char*, int)>
c00220bd:	83 c4 20             	add    esp,0x20
c00220c0:	85 c0                	test   eax,eax
c00220c2:	75 13                	jne    c00220d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	56                   	push   esi
c00220c8:	e8 8e d7 fe ff       	call   c000f85b <free>
c00220cd:	83 c4 10             	add    esp,0x10
c00220d0:	31 c0                	xor    eax,eax
c00220d2:	e9 b3 00 00 00       	jmp    c002218a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220d7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00220db:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00220df:	c1 e7 08             	shl    edi,0x8
c00220e2:	c1 e2 10             	shl    edx,0x10
c00220e5:	09 d7                	or     edi,edx
c00220e7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00220eb:	09 d7                	or     edi,edx
c00220ed:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00220f1:	c1 e2 18             	shl    edx,0x18
c00220f4:	09 d7                	or     edi,edx
c00220f6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00220fa:	89 d1                	mov    ecx,edx
c00220fc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022100:	c1 e1 08             	shl    ecx,0x8
c0022103:	c1 e2 10             	shl    edx,0x10
c0022106:	09 ca                	or     edx,ecx
c0022108:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002210c:	09 ca                	or     edx,ecx
c002210e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022112:	c1 e1 18             	shl    ecx,0x18
c0022115:	09 ca                	or     edx,ecx
c0022117:	89 e9                	mov    ecx,ebp
c0022119:	84 c9                	test   cl,cl
c002211b:	74 3c                	je     c0022159 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002211d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022121:	83 ec 0c             	sub    esp,0xc
c0022124:	56                   	push   esi
c0022125:	e8 31 d7 fe ff       	call   c000f85b <free>
c002212a:	83 c4 0c             	add    esp,0xc
c002212d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022134:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022139:	50                   	push   eax
c002213a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022141:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002214c:	52                   	push   edx
c002214d:	57                   	push   edi
c002214e:	53                   	push   ebx
c002214f:	e8 6e fe ff ff       	call   c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022154:	83 c4 20             	add    esp,0x20
c0022157:	eb 31                	jmp    c002218a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022159:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002215c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022163:	d0 e8                	shr    al,1
c0022165:	89 3b                	mov    DWORD PTR [ebx],edi
c0022167:	83 e0 01             	and    eax,0x1
c002216a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022171:	83 ec 0c             	sub    esp,0xc
c0022174:	89 13                	mov    DWORD PTR [ebx],edx
c0022176:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002217d:	89 03                	mov    DWORD PTR [ebx],eax
c002217f:	56                   	push   esi
c0022180:	e8 d6 d6 fe ff       	call   c000f85b <free>
c0022185:	83 c4 10             	add    esp,0x10
c0022188:	b0 01                	mov    al,0x1
c002218a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022190:	5b                   	pop    ebx
c0022191:	5e                   	pop    esi
c0022192:	5f                   	pop    edi
c0022193:	5d                   	pop    ebp
c0022194:	c3                   	ret    

c0022195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022195:	55                   	push   ebp
c0022196:	57                   	push   edi
c0022197:	56                   	push   esi
c0022198:	53                   	push   ebx
c0022199:	83 ec 20             	sub    esp,0x20
c002219c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00221a0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00221a4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00221a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221b0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00221b8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00221bd:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00221c3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00221c9:	57                   	push   edi
c00221ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221ce:	50                   	push   eax
c00221cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221d3:	50                   	push   eax
c00221d4:	e8 94 fd ff ff       	call   c0021f6d <readRoot(unsigned int*, unsigned int*, char)>
c00221d9:	5a                   	pop    edx
c00221da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221de:	e8 b9 e5 fd ff       	call   c000079c <strlen>
c00221e3:	83 c4 10             	add    esp,0x10
c00221e6:	83 f8 03             	cmp    eax,0x3
c00221e9:	77 17                	ja     c0022202 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00221eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221ef:	89 03                	mov    DWORD PTR [ebx],eax
c00221f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221f5:	89 06                	mov    DWORD PTR [esi],eax
c00221f7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00221fe:	b0 01                	mov    al,0x1
c0022200:	eb 19                	jmp    c002221b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022202:	50                   	push   eax
c0022203:	55                   	push   ebp
c0022204:	57                   	push   edi
c0022205:	56                   	push   esi
c0022206:	53                   	push   ebx
c0022207:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002220b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002220f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022213:	e8 aa fd ff ff       	call   c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022218:	83 c4 20             	add    esp,0x20
c002221b:	83 c4 1c             	add    esp,0x1c
c002221e:	5b                   	pop    ebx
c002221f:	5e                   	pop    esi
c0022220:	5f                   	pop    edi
c0022221:	5d                   	pop    ebp
c0022222:	c3                   	ret    
c0022223:	90                   	nop

c0022224 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022224:	57                   	push   edi
c0022225:	56                   	push   esi
c0022226:	53                   	push   ebx
c0022227:	83 ec 10             	sub    esp,0x10
c002222a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002222e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022232:	85 ff                	test   edi,edi
c0022234:	0f 84 9d 00 00 00    	je     c00222d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002223a:	85 f6                	test   esi,esi
c002223c:	0f 84 95 00 00 00    	je     c00222d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022242:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022247:	74 17                	je     c0022260 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022249:	83 ec 0c             	sub    esp,0xc
c002224c:	68 6b ce 02 c0       	push   0xc002ce6b
c0022251:	e8 6d 0b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022256:	83 c4 10             	add    esp,0x10
c0022259:	b8 03 00 00 00       	mov    eax,0x3
c002225e:	eb 7c                	jmp    c00222dc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	6a 1c                	push   0x1c
c0022265:	e8 e1 d5 fe ff       	call   c000f84b <malloc>
c002226a:	89 07                	mov    DWORD PTR [edi],eax
c002226c:	89 c3                	mov    ebx,eax
c002226e:	58                   	pop    eax
c002226f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022273:	50                   	push   eax
c0022274:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022277:	50                   	push   eax
c0022278:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002227c:	50                   	push   eax
c002227d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022281:	50                   	push   eax
c0022282:	56                   	push   esi
c0022283:	e8 0d ff ff ff       	call   c0022195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022288:	83 c4 20             	add    esp,0x20
c002228b:	84 c0                	test   al,al
c002228d:	74 07                	je     c0022296 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002228f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022294:	74 0b                	je     c00222a1 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022296:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002229a:	b8 01 00 00 00       	mov    eax,0x1
c002229f:	eb 3b                	jmp    c00222dc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00222a9:	89 03                	mov    DWORD PTR [ebx],eax
c00222ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00222b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00222bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00222c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00222ce:	8a 06                	mov    al,BYTE PTR [esi]
c00222d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00222d3:	31 c0                	xor    eax,eax
c00222d5:	eb 05                	jmp    c00222dc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222d7:	b8 04 00 00 00       	mov    eax,0x4
c00222dc:	83 c4 10             	add    esp,0x10
c00222df:	5b                   	pop    ebx
c00222e0:	5e                   	pop    esi
c00222e1:	5f                   	pop    edi
c00222e2:	c3                   	ret    
c00222e3:	90                   	nop

c00222e4 <ISO9660::exists(char const*)>:
c00222e4:	83 ec 28             	sub    esp,0x28
c00222e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00222ef:	52                   	push   edx
c00222f0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00222f3:	52                   	push   edx
c00222f4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00222f8:	52                   	push   edx
c00222f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00222fd:	52                   	push   edx
c00222fe:	50                   	push   eax
c00222ff:	e8 91 fe ff ff       	call   c0022195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022304:	83 c4 3c             	add    esp,0x3c
c0022307:	c3                   	ret    

c0022308 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022308:	56                   	push   esi
c0022309:	53                   	push   ebx
c002230a:	83 ec 14             	sub    esp,0x14
c002230d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022311:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022315:	85 db                	test   ebx,ebx
c0022317:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002231b:	0f 94 c2             	sete   dl
c002231e:	85 f6                	test   esi,esi
c0022320:	0f 94 c0             	sete   al
c0022323:	08 c2                	or     dl,al
c0022325:	75 68                	jne    c002238f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022327:	85 c9                	test   ecx,ecx
c0022329:	74 64                	je     c002238f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002232b:	83 ec 0c             	sub    esp,0xc
c002232e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022331:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022335:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002233b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022342:	50                   	push   eax
c0022343:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022346:	50                   	push   eax
c0022347:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002234b:	50                   	push   eax
c002234c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022350:	50                   	push   eax
c0022351:	51                   	push   ecx
c0022352:	e8 3e fe ff ff       	call   c0022195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022357:	83 c4 20             	add    esp,0x20
c002235a:	ba 01 00 00 00       	mov    edx,0x1
c002235f:	84 c0                	test   al,al
c0022361:	74 31                	je     c0022394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022363:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022367:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002236e:	89 03                	mov    DWORD PTR [ebx],eax
c0022370:	ba 00 00 00 00       	mov    edx,0x0
c0022375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022379:	85 c0                	test   eax,eax
c002237b:	0f 95 06             	setne  BYTE PTR [esi]
c002237e:	74 14                	je     c0022394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022380:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022386:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002238d:	eb 05                	jmp    c0022394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002238f:	ba 04 00 00 00       	mov    edx,0x4
c0022394:	83 c4 14             	add    esp,0x14
c0022397:	89 d0                	mov    eax,edx
c0022399:	5b                   	pop    ebx
c002239a:	5e                   	pop    esi
c002239b:	c3                   	ret    

c002239c <ISO9660::openDir(char const*, void**)>:
c002239c:	57                   	push   edi
c002239d:	56                   	push   esi
c002239e:	53                   	push   ebx
c002239f:	83 ec 10             	sub    esp,0x10
c00223a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00223a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00223aa:	85 ff                	test   edi,edi
c00223ac:	0f 84 95 00 00 00    	je     c0022447 <ISO9660::openDir(char const*, void**)+0xab>
c00223b2:	85 f6                	test   esi,esi
c00223b4:	0f 84 8d 00 00 00    	je     c0022447 <ISO9660::openDir(char const*, void**)+0xab>
c00223ba:	83 ec 0c             	sub    esp,0xc
c00223bd:	6a 1c                	push   0x1c
c00223bf:	e8 87 d4 fe ff       	call   c000f84b <malloc>
c00223c4:	89 07                	mov    DWORD PTR [edi],eax
c00223c6:	89 c3                	mov    ebx,eax
c00223c8:	59                   	pop    ecx
c00223c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00223cd:	50                   	push   eax
c00223ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00223d1:	50                   	push   eax
c00223d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223d6:	50                   	push   eax
c00223d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223db:	50                   	push   eax
c00223dc:	56                   	push   esi
c00223dd:	e8 b3 fd ff ff       	call   c0022195 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00223e2:	83 c4 20             	add    esp,0x20
c00223e5:	84 c0                	test   al,al
c00223e7:	74 07                	je     c00223f0 <ISO9660::openDir(char const*, void**)+0x54>
c00223e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00223ee:	75 21                	jne    c0022411 <ISO9660::openDir(char const*, void**)+0x75>
c00223f0:	0f b6 c0             	movzx  eax,al
c00223f3:	52                   	push   edx
c00223f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00223f8:	50                   	push   eax
c00223f9:	68 91 ce 02 c0       	push   0xc002ce91
c00223fe:	e8 c0 09 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022403:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022407:	83 c4 10             	add    esp,0x10
c002240a:	b8 01 00 00 00       	mov    eax,0x1
c002240f:	eb 3b                	jmp    c002244c <ISO9660::openDir(char const*, void**)+0xb0>
c0022411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022415:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022419:	89 03                	mov    DWORD PTR [ebx],eax
c002241b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022426:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002242d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022434:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022437:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002243e:	8a 06                	mov    al,BYTE PTR [esi]
c0022440:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022443:	31 c0                	xor    eax,eax
c0022445:	eb 05                	jmp    c002244c <ISO9660::openDir(char const*, void**)+0xb0>
c0022447:	b8 04 00 00 00       	mov    eax,0x4
c002244c:	83 c4 10             	add    esp,0x10
c002244f:	5b                   	pop    ebx
c0022450:	5e                   	pop    esi
c0022451:	5f                   	pop    edi
c0022452:	c3                   	ret    
c0022453:	90                   	nop

c0022454 <ISO9660::ISO9660()>:
c0022454:	83 ec 0c             	sub    esp,0xc
c0022457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245b:	83 ec 0c             	sub    esp,0xc
c002245e:	50                   	push   eax
c002245f:	e8 6a 0c ff ff       	call   c00130ce <Filesystem::Filesystem()>
c0022464:	83 c4 10             	add    esp,0x10
c0022467:	ba b4 ce 02 c0       	mov    edx,0xc002ceb4
c002246c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022470:	89 10                	mov    DWORD PTR [eax],edx
c0022472:	90                   	nop
c0022473:	83 c4 0c             	add    esp,0xc
c0022476:	c3                   	ret    
c0022477:	90                   	nop

c0022478 <SoundChannel::~SoundChannel()>:
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022482:	83 ec 0c             	sub    esp,0xc
c0022485:	50                   	push   eax
c0022486:	e8 d0 d3 fe ff       	call   c000f85b <free>
c002248b:	83 c4 10             	add    esp,0x10
c002248e:	90                   	nop
c002248f:	83 c4 0c             	add    esp,0xc
c0022492:	c3                   	ret    
c0022493:	90                   	nop

c0022494 <SoundChannel::setSpeed(float)>:
c0022494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002249c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002249f:	c3                   	ret    

c00224a0 <SoundChannel::getSpeed()>:
c00224a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00224a7:	c3                   	ret    

c00224a8 <SoundChannel::setVolume(int)>:
c00224a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224ac:	83 f8 64             	cmp    eax,0x64
c00224af:	7e 05                	jle    c00224b6 <SoundChannel::setVolume(int)+0xe>
c00224b1:	b8 64 00 00 00       	mov    eax,0x64
c00224b6:	85 c0                	test   eax,eax
c00224b8:	79 02                	jns    c00224bc <SoundChannel::setVolume(int)+0x14>
c00224ba:	31 c0                	xor    eax,eax
c00224bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224c0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00224c3:	c3                   	ret    

c00224c4 <SoundChannel::getVolume()>:
c00224c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00224cb:	c3                   	ret    

c00224cc <SoundChannel::pause()>:
c00224cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224d0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00224d4:	c3                   	ret    
c00224d5:	90                   	nop

c00224d6 <SoundChannel::SoundChannel(int, int, int, int)>:
c00224d6:	83 ec 1c             	sub    esp,0x1c
c00224d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224dd:	e8 ea ff ff ff       	call   c00224cc <SoundChannel::pause()>
c00224e2:	83 c4 04             	add    esp,0x4
c00224e5:	6a 50                	push   0x50
c00224e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00224eb:	e8 b8 ff ff ff       	call   c00224a8 <SoundChannel::setVolume(int)>
c00224f0:	83 c4 08             	add    esp,0x8
c00224f3:	a1 30 cf 02 c0       	mov    eax,ds:0xc002cf30
c00224f8:	50                   	push   eax
c00224f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00224fd:	e8 92 ff ff ff       	call   c0022494 <SoundChannel::setSpeed(float)>
c0022502:	83 c4 08             	add    esp,0x8
c0022505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022509:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002250d:	89 10                	mov    DWORD PTR [eax],edx
c002250f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022513:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002251a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022522:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022525:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002252a:	75 23                	jne    c002254f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002252c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022530:	8b 10                	mov    edx,DWORD PTR [eax]
c0022532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022539:	0f af c2             	imul   eax,edx
c002253c:	85 c0                	test   eax,eax
c002253e:	79 03                	jns    c0022543 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022540:	83 c0 03             	add    eax,0x3
c0022543:	c1 f8 02             	sar    eax,0x2
c0022546:	05 a0 0f 00 00       	add    eax,0xfa0
c002254b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002254f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022553:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022557:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002255a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022569:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022574:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022577:	c1 e0 02             	shl    eax,0x2
c002257a:	83 ec 0c             	sub    esp,0xc
c002257d:	50                   	push   eax
c002257e:	e8 c8 d2 fe ff       	call   c000f84b <malloc>
c0022583:	83 c4 10             	add    esp,0x10
c0022586:	89 c2                	mov    edx,eax
c0022588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002258f:	83 ec 04             	sub    esp,0x4
c0022592:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022596:	50                   	push   eax
c0022597:	6a 01                	push   0x1
c0022599:	6a 04                	push   0x4
c002259b:	e8 07 66 fe ff       	call   c0008ba7 <src_new>
c00225a0:	83 c4 10             	add    esp,0x10
c00225a3:	89 c2                	mov    edx,eax
c00225a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00225ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225b0:	85 c0                	test   eax,eax
c00225b2:	74 10                	je     c00225c4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00225b4:	83 ec 0c             	sub    esp,0xc
c00225b7:	68 14 cf 02 c0       	push   0xc002cf14
c00225bc:	e8 96 80 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c00225c1:	83 c4 10             	add    esp,0x10
c00225c4:	a0 00 2d 03 c0       	mov    al,ds:0xc0032d00
c00225c9:	83 f0 01             	xor    eax,0x1
c00225cc:	84 c0                	test   al,al
c00225ce:	74 57                	je     c0022627 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00225d0:	a1 34 cf 02 c0       	mov    eax,ds:0xc002cf34
c00225d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225e1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00225e9:	7f 35                	jg     c0022620 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00225eb:	83 ec 0c             	sub    esp,0xc
c00225ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00225f2:	e8 68 50 00 00       	call   c002765f <__floatsisf>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	8b 15 34 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf34
c0022600:	83 ec 08             	sub    esp,0x8
c0022603:	52                   	push   edx
c0022604:	50                   	push   eax
c0022605:	e8 67 4c 00 00       	call   c0027271 <__mulsf3>
c002260a:	83 c4 10             	add    esp,0x10
c002260d:	89 c2                	mov    edx,eax
c002260f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022613:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c002261a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002261e:	eb c1                	jmp    c00225e1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022620:	c6 05 00 2d 03 c0 01 	mov    BYTE PTR ds:0xc0032d00,0x1
c0022627:	90                   	nop
c0022628:	83 c4 1c             	add    esp,0x1c
c002262b:	c3                   	ret    

c002262c <SoundChannel::play()>:
c002262c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022630:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022634:	c3                   	ret    
c0022635:	90                   	nop

c0022636 <SoundChannel::paused()>:
c0022636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002263a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002263d:	c3                   	ret    

c002263e <SoundChannel::getSampleRate()>:
c002263e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022642:	8b 00                	mov    eax,DWORD PTR [eax]
c0022644:	c3                   	ret    
c0022645:	90                   	nop

c0022646 <SoundChannel::getBits()>:
c0022646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002264a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002264d:	c3                   	ret    

c002264e <SoundChannel::getBufferUsed()>:
c002264e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022652:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022655:	c3                   	ret    

c0022656 <SoundChannel::getBufferSize()>:
c0022656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002265a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002265d:	c3                   	ret    

c002265e <SoundChannel::unbuffer(float*, int, int)>:
c002265e:	56                   	push   esi
c002265f:	53                   	push   ebx
c0022660:	83 ec 40             	sub    esp,0x40
c0022663:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022667:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002266a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002266e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022671:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022675:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002267d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022681:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022685:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022689:	e8 d1 4f 00 00       	call   c002765f <__floatsisf>
c002268e:	5a                   	pop    edx
c002268f:	89 c6                	mov    esi,eax
c0022691:	ff 33                	push   DWORD PTR [ebx]
c0022693:	e8 c7 4f 00 00       	call   c002765f <__floatsisf>
c0022698:	59                   	pop    ecx
c0022699:	5a                   	pop    edx
c002269a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002269d:	50                   	push   eax
c002269e:	e8 ce 4b 00 00       	call   c0027271 <__mulsf3>
c00226a3:	59                   	pop    ecx
c00226a4:	5a                   	pop    edx
c00226a5:	50                   	push   eax
c00226a6:	56                   	push   esi
c00226a7:	e8 88 4d 00 00       	call   c0027434 <__divsf3>
c00226ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00226af:	e8 7b 62 00 00       	call   c002892f <__extendsfdf2>
c00226b4:	59                   	pop    ecx
c00226b5:	5e                   	pop    esi
c00226b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00226ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00226be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00226c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226ca:	50                   	push   eax
c00226cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00226ce:	e8 c9 60 fe ff       	call   c000879c <src_process>
c00226d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00226d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00226da:	83 c4 0c             	add    esp,0xc
c00226dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00226e0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00226e3:	29 d0                	sub    eax,edx
c00226e5:	c1 e0 02             	shl    eax,0x2
c00226e8:	50                   	push   eax
c00226e9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00226ec:	50                   	push   eax
c00226ed:	51                   	push   ecx
c00226ee:	e8 91 df fd ff       	call   c0000684 <memmove>
c00226f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226f7:	83 c4 44             	add    esp,0x44
c00226fa:	5b                   	pop    ebx
c00226fb:	5e                   	pop    esi
c00226fc:	c3                   	ret    
c00226fd:	90                   	nop

c00226fe <SoundChannel::buffer8(unsigned char*, int)>:
c00226fe:	55                   	push   ebp
c00226ff:	57                   	push   edi
c0022700:	56                   	push   esi
c0022701:	53                   	push   ebx
c0022702:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022706:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002270a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002270d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022711:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022714:	74 7a                	je     c0022790 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022716:	85 ff                	test   edi,edi
c0022718:	7e 76                	jle    c0022790 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002271a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002271e:	8d 70 01             	lea    esi,[eax+0x1]
c0022721:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022724:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022727:	8b 1c 9d 00 29 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd700]
c002272e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022731:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022734:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022737:	74 5e                	je     c0022797 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022739:	83 ff 01             	cmp    edi,0x1
c002273c:	74 4b                	je     c0022789 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002273e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022742:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022745:	8d 70 01             	lea    esi,[eax+0x1]
c0022748:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002274b:	8b 1c 9d 00 29 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd700]
c0022752:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022755:	b8 02 00 00 00       	mov    eax,0x2
c002275a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002275d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022760:	75 23                	jne    c0022785 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022762:	eb 27                	jmp    c002278b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022764:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022769:	8d 71 01             	lea    esi,[ecx+0x1]
c002276c:	40                   	inc    eax
c002276d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022770:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022773:	8b 1c 9d 00 29 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd700]
c002277a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002277d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022780:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022783:	74 06                	je     c002278b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022785:	39 c7                	cmp    edi,eax
c0022787:	75 db                	jne    c0022764 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022789:	89 f8                	mov    eax,edi
c002278b:	5b                   	pop    ebx
c002278c:	5e                   	pop    esi
c002278d:	5f                   	pop    edi
c002278e:	5d                   	pop    ebp
c002278f:	c3                   	ret    
c0022790:	5b                   	pop    ebx
c0022791:	31 c0                	xor    eax,eax
c0022793:	5e                   	pop    esi
c0022794:	5f                   	pop    edi
c0022795:	5d                   	pop    ebp
c0022796:	c3                   	ret    
c0022797:	b8 01 00 00 00       	mov    eax,0x1
c002279c:	eb ed                	jmp    c002278b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002279e <SoundDevice::SoundDevice(char const*)>:
c002279e:	83 ec 1c             	sub    esp,0x1c
c00227a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227a5:	83 ec 08             	sub    esp,0x8
c00227a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227ac:	50                   	push   eax
c00227ad:	e8 2e 1c ff ff       	call   c00143e0 <Device::Device(char const*)>
c00227b2:	83 c4 10             	add    esp,0x10
c00227b5:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c00227ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227be:	89 10                	mov    DWORD PTR [eax],edx
c00227c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227e4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227e9:	7f 19                	jg     c0022804 <SoundDevice::SoundDevice(char const*)+0x66>
c00227eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227f3:	83 c2 54             	add    edx,0x54
c00227f6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00227fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022802:	eb e0                	jmp    c00227e4 <SoundDevice::SoundDevice(char const*)+0x46>
c0022804:	90                   	nop
c0022805:	83 c4 1c             	add    esp,0x1c
c0022808:	c3                   	ret    
c0022809:	90                   	nop

c002280a <SoundDevice::~SoundDevice()>:
c002280a:	53                   	push   ebx
c002280b:	83 ec 18             	sub    esp,0x18
c002280e:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0022813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022817:	89 10                	mov    DWORD PTR [eax],edx
c0022819:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022821:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022826:	7f 46                	jg     c002286e <SoundDevice::~SoundDevice()+0x64>
c0022828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002282c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022830:	83 c2 54             	add    edx,0x54
c0022833:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022837:	85 c0                	test   eax,eax
c0022839:	74 2d                	je     c0022868 <SoundDevice::~SoundDevice()+0x5e>
c002283b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002283f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022843:	83 c2 54             	add    edx,0x54
c0022846:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002284a:	85 db                	test   ebx,ebx
c002284c:	74 1a                	je     c0022868 <SoundDevice::~SoundDevice()+0x5e>
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	53                   	push   ebx
c0022852:	e8 21 fc ff ff       	call   c0022478 <SoundChannel::~SoundChannel()>
c0022857:	83 c4 10             	add    esp,0x10
c002285a:	83 ec 08             	sub    esp,0x8
c002285d:	6a 2c                	push   0x2c
c002285f:	53                   	push   ebx
c0022860:	e8 7e 04 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0022865:	83 c4 10             	add    esp,0x10
c0022868:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002286c:	eb b3                	jmp    c0022821 <SoundDevice::~SoundDevice()+0x17>
c002286e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022872:	83 ec 0c             	sub    esp,0xc
c0022875:	50                   	push   eax
c0022876:	e8 47 18 ff ff       	call   c00140c2 <Device::~Device()>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	90                   	nop
c002287f:	83 c4 18             	add    esp,0x18
c0022882:	5b                   	pop    ebx
c0022883:	c3                   	ret    

c0022884 <SoundDevice::~SoundDevice()>:
c0022884:	83 ec 0c             	sub    esp,0xc
c0022887:	83 ec 0c             	sub    esp,0xc
c002288a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002288e:	e8 77 ff ff ff       	call   c002280a <SoundDevice::~SoundDevice()>
c0022893:	83 c4 10             	add    esp,0x10
c0022896:	83 ec 08             	sub    esp,0x8
c0022899:	68 e4 01 00 00       	push   0x1e4
c002289e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228a2:	e8 3c 04 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00228a7:	83 c4 10             	add    esp,0x10
c00228aa:	83 c4 0c             	add    esp,0xc
c00228ad:	c3                   	ret    

c00228ae <SoundDevice::getFreeChannelNum()>:
c00228ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228b2:	31 c0                	xor    eax,eax
c00228b4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00228bc:	74 09                	je     c00228c7 <SoundDevice::getFreeChannelNum()+0x19>
c00228be:	40                   	inc    eax
c00228bf:	83 f8 20             	cmp    eax,0x20
c00228c2:	75 f0                	jne    c00228b4 <SoundDevice::getFreeChannelNum()+0x6>
c00228c4:	83 c8 ff             	or     eax,0xffffffff
c00228c7:	c3                   	ret    

c00228c8 <SoundDevice::addChannel(SoundChannel*)>:
c00228c8:	56                   	push   esi
c00228c9:	53                   	push   ebx
c00228ca:	51                   	push   ecx
c00228cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228d3:	53                   	push   ebx
c00228d4:	e8 d5 ff ff ff       	call   c00228ae <SoundDevice::getFreeChannelNum()>
c00228d9:	5a                   	pop    edx
c00228da:	83 f8 ff             	cmp    eax,0xffffffff
c00228dd:	74 51                	je     c0022930 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228df:	85 f6                	test   esi,esi
c00228e1:	74 4d                	je     c0022930 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228e3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228ea:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228f1:	75 30                	jne    c0022923 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228f3:	83 ec 0c             	sub    esp,0xc
c00228f6:	56                   	push   esi
c00228f7:	e8 42 fd ff ff       	call   c002263e <SoundChannel::getSampleRate()>
c00228fc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022902:	89 34 24             	mov    DWORD PTR [esp],esi
c0022905:	e8 3c fd ff ff       	call   c0022646 <SoundChannel::getBits()>
c002290a:	83 c4 0c             	add    esp,0xc
c002290d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022913:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022915:	50                   	push   eax
c0022916:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002291c:	53                   	push   ebx
c002291d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022920:	83 c4 10             	add    esp,0x10
c0022923:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022929:	b8 01 00 00 00       	mov    eax,0x1
c002292e:	eb 03                	jmp    c0022933 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022930:	83 c8 ff             	or     eax,0xffffffff
c0022933:	5a                   	pop    edx
c0022934:	5b                   	pop    ebx
c0022935:	5e                   	pop    esi
c0022936:	c3                   	ret    
c0022937:	90                   	nop

c0022938 <SoundDevice::removeChannel(int)>:
c0022938:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002293c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022940:	83 fa 1f             	cmp    edx,0x1f
c0022943:	77 23                	ja     c0022968 <SoundDevice::removeChannel(int)+0x30>
c0022945:	8d 14 90             	lea    edx,[eax+edx*4]
c0022948:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002294f:	74 17                	je     c0022968 <SoundDevice::removeChannel(int)+0x30>
c0022951:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002295b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022961:	75 05                	jne    c0022968 <SoundDevice::removeChannel(int)+0x30>
c0022963:	8b 00                	mov    eax,DWORD PTR [eax]
c0022965:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022968:	c3                   	ret    
c0022969:	90                   	nop

c002296a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002296a:	57                   	push   edi
c002296b:	56                   	push   esi
c002296c:	53                   	push   ebx
c002296d:	31 db                	xor    ebx,ebx
c002296f:	83 ec 10             	sub    esp,0x10
c0022972:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022976:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002297a:	0f 8d cb 00 00 00    	jge    c0022a4b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022980:	83 ec 0c             	sub    esp,0xc
c0022983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022987:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002298a:	e8 a0 5f 00 00       	call   c002892f <__extendsfdf2>
c002298f:	83 c4 10             	add    esp,0x10
c0022992:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022996:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002299a:	68 00 00 f0 3f       	push   0x3ff00000
c002299f:	6a 00                	push   0x0
c00229a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a9:	e8 0d 4f 00 00       	call   c00278bb <__adddf3>
c00229ae:	83 c4 10             	add    esp,0x10
c00229b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229b9:	68 00 00 e0 3f       	push   0x3fe00000
c00229be:	6a 00                	push   0x0
c00229c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c8:	e8 6b 55 00 00       	call   c0027f38 <__muldf3>
c00229cd:	83 c4 10             	add    esp,0x10
c00229d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229d8:	68 00 00 60 40       	push   0x40600000
c00229dd:	6a 00                	push   0x0
c00229df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e7:	e8 4c 55 00 00       	call   c0027f38 <__muldf3>
c00229ec:	59                   	pop    ecx
c00229ed:	5f                   	pop    edi
c00229ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229fe:	e8 08 5e 00 00       	call   c002880b <__truncdfsf2>
c0022a03:	5a                   	pop    edx
c0022a04:	89 c7                	mov    edi,eax
c0022a06:	59                   	pop    ecx
c0022a07:	68 00 00 fe 42       	push   0x42fe0000
c0022a0c:	50                   	push   eax
c0022a0d:	e8 a3 4e 00 00       	call   c00278b5 <__gesf2>
c0022a12:	83 c4 10             	add    esp,0x10
c0022a15:	85 c0                	test   eax,eax
c0022a17:	78 06                	js     c0022a1f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022a19:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022a1d:	eb 26                	jmp    c0022a45 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022a1f:	50                   	push   eax
c0022a20:	50                   	push   eax
c0022a21:	6a 00                	push   0x0
c0022a23:	57                   	push   edi
c0022a24:	e8 90 4e 00 00       	call   c00278b9 <__lesf2>
c0022a29:	83 c4 10             	add    esp,0x10
c0022a2c:	85 c0                	test   eax,eax
c0022a2e:	7f 06                	jg     c0022a36 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022a30:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022a34:	eb 0f                	jmp    c0022a45 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022a36:	83 ec 0c             	sub    esp,0xc
c0022a39:	57                   	push   edi
c0022a3a:	e8 8d 5f 00 00       	call   c00289cc <lrintf>
c0022a3f:	83 c4 10             	add    esp,0x10
c0022a42:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022a45:	43                   	inc    ebx
c0022a46:	e9 2b ff ff ff       	jmp    c0022976 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022a4b:	83 c4 10             	add    esp,0x10
c0022a4e:	5b                   	pop    ebx
c0022a4f:	5e                   	pop    esi
c0022a50:	5f                   	pop    edi
c0022a51:	c3                   	ret    

c0022a52 <SoundDevice::getAudio(int, float*, float*)>:
c0022a52:	55                   	push   ebp
c0022a53:	57                   	push   edi
c0022a54:	56                   	push   esi
c0022a55:	53                   	push   ebx
c0022a56:	31 db                	xor    ebx,ebx
c0022a58:	83 ec 20             	sub    esp,0x20
c0022a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022a5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022a63:	c1 e0 02             	shl    eax,0x2
c0022a66:	50                   	push   eax
c0022a67:	6a 00                	push   0x0
c0022a69:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022a6d:	e8 0e dd fd ff       	call   c0000780 <memset>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022a79:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022a80:	85 c0                	test   eax,eax
c0022a82:	0f 84 d7 00 00 00    	je     c0022b5f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022a88:	83 ec 0c             	sub    esp,0xc
c0022a8b:	50                   	push   eax
c0022a8c:	e8 a5 fb ff ff       	call   c0022636 <SoundChannel::paused()>
c0022a91:	83 c4 10             	add    esp,0x10
c0022a94:	84 c0                	test   al,al
c0022a96:	0f 85 c3 00 00 00    	jne    c0022b5f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022a9c:	83 ec 0c             	sub    esp,0xc
c0022a9f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022aa6:	e8 19 fa ff ff       	call   c00224c4 <SoundChannel::getVolume()>
c0022aab:	83 c4 10             	add    esp,0x10
c0022aae:	85 c0                	test   eax,eax
c0022ab0:	0f 84 a9 00 00 00    	je     c0022b5f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022ab6:	83 ec 0c             	sub    esp,0xc
c0022ab9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022ac0:	e8 ff f9 ff ff       	call   c00224c4 <SoundChannel::getVolume()>
c0022ac5:	83 ec 0c             	sub    esp,0xc
c0022ac8:	50                   	push   eax
c0022ac9:	e8 91 4b 00 00       	call   c002765f <__floatsisf>
c0022ace:	59                   	pop    ecx
c0022acf:	5d                   	pop    ebp
c0022ad0:	31 ed                	xor    ebp,ebp
c0022ad2:	68 00 00 c8 42       	push   0x42c80000
c0022ad7:	50                   	push   eax
c0022ad8:	e8 57 49 00 00       	call   c0027434 <__divsf3>
c0022add:	83 c4 10             	add    esp,0x10
c0022ae0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022ae4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022ae8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022aee:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022af2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022af9:	e8 60 fb ff ff       	call   c002265e <SoundChannel::unbuffer(float*, int, int)>
c0022afe:	83 c4 20             	add    esp,0x20
c0022b01:	89 c1                	mov    ecx,eax
c0022b03:	39 cd                	cmp    ebp,ecx
c0022b05:	7d 52                	jge    c0022b59 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022b07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022b0b:	50                   	push   eax
c0022b0c:	50                   	push   eax
c0022b0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022b11:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022b14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022b18:	e8 54 47 00 00       	call   c0027271 <__mulsf3>
c0022b1d:	5a                   	pop    edx
c0022b1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022b22:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022b28:	e8 32 4b 00 00       	call   c002765f <__floatsisf>
c0022b2d:	59                   	pop    ecx
c0022b2e:	5a                   	pop    edx
c0022b2f:	50                   	push   eax
c0022b30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b34:	e8 fb 48 00 00       	call   c0027434 <__divsf3>
c0022b39:	59                   	pop    ecx
c0022b3a:	5a                   	pop    edx
c0022b3b:	50                   	push   eax
c0022b3c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022b40:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022b43:	e8 06 44 00 00       	call   c0026f4e <__addsf3>
c0022b48:	83 c4 10             	add    esp,0x10
c0022b4b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022b53:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022b56:	45                   	inc    ebp
c0022b57:	eb aa                	jmp    c0022b03 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022b59:	39 cf                	cmp    edi,ecx
c0022b5b:	7e 02                	jle    c0022b5f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022b5d:	89 cf                	mov    edi,ecx
c0022b5f:	43                   	inc    ebx
c0022b60:	83 fb 20             	cmp    ebx,0x20
c0022b63:	0f 85 10 ff ff ff    	jne    c0022a79 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022b69:	83 c4 1c             	add    esp,0x1c
c0022b6c:	89 f8                	mov    eax,edi
c0022b6e:	5b                   	pop    ebx
c0022b6f:	5e                   	pop    esi
c0022b70:	5f                   	pop    edi
c0022b71:	5d                   	pop    ebp
c0022b72:	c3                   	ret    
c0022b73:	90                   	nop

c0022b74 <PCI::open(int, int, void*)>:
c0022b74:	83 ec 18             	sub    esp,0x18
c0022b77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022b7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0022b7d:	50                   	push   eax
c0022b7e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022b81:	31 c0                	xor    eax,eax
c0022b83:	83 c4 1c             	add    esp,0x1c
c0022b86:	c3                   	ret    
c0022b87:	90                   	nop

c0022b88 <PCI::close(int, int, void*)>:
c0022b88:	31 c0                	xor    eax,eax
c0022b8a:	c3                   	ret    
c0022b8b:	90                   	nop

c0022b8c <PCI::PCI()>:
c0022b8c:	83 ec 0c             	sub    esp,0xc
c0022b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b93:	83 ec 08             	sub    esp,0x8
c0022b96:	68 70 cf 02 c0       	push   0xc002cf70
c0022b9b:	50                   	push   eax
c0022b9c:	e8 c3 0e ff ff       	call   c0013a64 <Bus::Bus(char const*)>
c0022ba1:	83 c4 10             	add    esp,0x10
c0022ba4:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c0022ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bad:	89 10                	mov    DWORD PTR [eax],edx
c0022baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bb9:	0f b6 d0             	movzx  edx,al
c0022bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bd1:	0f b6 d0             	movzx  edx,al
c0022bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022be7:	8d 50 01             	lea    edx,[eax+0x1]
c0022bea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022bee:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022bf4:	0f b6 d0             	movzx  edx,al
c0022bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022bff:	83 c9 c0             	or     ecx,0xffffffc0
c0022c02:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022c06:	90                   	nop
c0022c07:	83 c4 0c             	add    esp,0xc
c0022c0a:	c3                   	ret    
c0022c0b:	90                   	nop

c0022c0c <PCI::readBAR8(unsigned int, int)>:
c0022c0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c14:	f6 c2 01             	test   dl,0x1
c0022c17:	74 07                	je     c0022c20 <PCI::readBAR8(unsigned int, int)+0x14>
c0022c19:	83 e2 fc             	and    edx,0xfffffffc
c0022c1c:	01 c2                	add    edx,eax
c0022c1e:	ec                   	in     al,dx
c0022c1f:	c3                   	ret    
c0022c20:	83 e2 f0             	and    edx,0xfffffff0
c0022c23:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022c26:	c3                   	ret    
c0022c27:	90                   	nop

c0022c28 <PCI::readBAR16(unsigned int, int)>:
c0022c28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c30:	f6 c2 01             	test   dl,0x1
c0022c33:	74 08                	je     c0022c3d <PCI::readBAR16(unsigned int, int)+0x15>
c0022c35:	83 e2 fc             	and    edx,0xfffffffc
c0022c38:	01 c2                	add    edx,eax
c0022c3a:	66 ed                	in     ax,dx
c0022c3c:	c3                   	ret    
c0022c3d:	83 e2 f0             	and    edx,0xfffffff0
c0022c40:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022c44:	c3                   	ret    
c0022c45:	90                   	nop

c0022c46 <PCI::readBAR32(unsigned int, int)>:
c0022c46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c4e:	f6 c2 01             	test   dl,0x1
c0022c51:	74 07                	je     c0022c5a <PCI::readBAR32(unsigned int, int)+0x14>
c0022c53:	83 e2 fc             	and    edx,0xfffffffc
c0022c56:	01 c2                	add    edx,eax
c0022c58:	ed                   	in     eax,dx
c0022c59:	c3                   	ret    
c0022c5a:	83 e2 f0             	and    edx,0xfffffff0
c0022c5d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022c60:	c3                   	ret    
c0022c61:	90                   	nop

c0022c62 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022c62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022c6e:	f6 c2 01             	test   dl,0x1
c0022c71:	74 07                	je     c0022c7a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022c73:	83 e2 fc             	and    edx,0xfffffffc
c0022c76:	01 ca                	add    edx,ecx
c0022c78:	ee                   	out    dx,al
c0022c79:	c3                   	ret    
c0022c7a:	83 e2 f0             	and    edx,0xfffffff0
c0022c7d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022c80:	c3                   	ret    
c0022c81:	90                   	nop

c0022c82 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022c82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022c8e:	f6 c2 01             	test   dl,0x1
c0022c91:	74 08                	je     c0022c9b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022c93:	83 e2 fc             	and    edx,0xfffffffc
c0022c96:	01 ca                	add    edx,ecx
c0022c98:	66 ef                	out    dx,ax
c0022c9a:	c3                   	ret    
c0022c9b:	83 e2 f0             	and    edx,0xfffffff0
c0022c9e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022ca2:	c3                   	ret    
c0022ca3:	90                   	nop

c0022ca4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022ca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022cb0:	f6 c2 01             	test   dl,0x1
c0022cb3:	74 07                	je     c0022cbc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022cb5:	83 e2 fc             	and    edx,0xfffffffc
c0022cb8:	01 ca                	add    edx,ecx
c0022cba:	ef                   	out    dx,eax
c0022cbb:	c3                   	ret    
c0022cbc:	83 e2 f0             	and    edx,0xfffffff0
c0022cbf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022cc2:	c3                   	ret    
c0022cc3:	90                   	nop

c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022cc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022cc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ccd:	89 ca                	mov    edx,ecx
c0022ccf:	c1 e0 10             	shl    eax,0x10
c0022cd2:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022cd8:	09 d0                	or     eax,edx
c0022cda:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022cdf:	c1 e2 08             	shl    edx,0x8
c0022ce2:	09 d0                	or     eax,edx
c0022ce4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022ce9:	c1 e2 0b             	shl    edx,0xb
c0022cec:	09 d0                	or     eax,edx
c0022cee:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022cf3:	0d 00 00 00 80       	or     eax,0x80000000
c0022cf8:	ef                   	out    dx,eax
c0022cf9:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022cfe:	ed                   	in     eax,dx
c0022cff:	83 e1 02             	and    ecx,0x2
c0022d02:	0f b6 c9             	movzx  ecx,cl
c0022d05:	c1 e1 03             	shl    ecx,0x3
c0022d08:	d3 e8                	shr    eax,cl
c0022d0a:	c3                   	ret    
c0022d0b:	90                   	nop

c0022d0c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022d0c:	6a 00                	push   0x0
c0022d0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d13:	50                   	push   eax
c0022d14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d19:	50                   	push   eax
c0022d1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d1f:	50                   	push   eax
c0022d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d24:	e8 9b ff ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d29:	83 c4 14             	add    esp,0x14
c0022d2c:	c3                   	ret    
c0022d2d:	90                   	nop

c0022d2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022d2e:	6a 0e                	push   0xe
c0022d30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d35:	50                   	push   eax
c0022d36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d3b:	50                   	push   eax
c0022d3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d41:	50                   	push   eax
c0022d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d46:	e8 79 ff ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d4b:	83 c4 14             	add    esp,0x14
c0022d4e:	0f b6 c0             	movzx  eax,al
c0022d51:	c3                   	ret    

c0022d52 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022d52:	55                   	push   ebp
c0022d53:	57                   	push   edi
c0022d54:	56                   	push   esi
c0022d55:	53                   	push   ebx
c0022d56:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022d5b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022d60:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022d65:	6a 0a                	push   0xa
c0022d67:	56                   	push   esi
c0022d68:	55                   	push   ebp
c0022d69:	57                   	push   edi
c0022d6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022d6e:	e8 51 ff ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d73:	6a 0a                	push   0xa
c0022d75:	89 c3                	mov    ebx,eax
c0022d77:	56                   	push   esi
c0022d78:	0f b6 db             	movzx  ebx,bl
c0022d7b:	55                   	push   ebp
c0022d7c:	57                   	push   edi
c0022d7d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022d81:	e8 3e ff ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d86:	83 c4 28             	add    esp,0x28
c0022d89:	25 00 ff 00 00       	and    eax,0xff00
c0022d8e:	09 d8                	or     eax,ebx
c0022d90:	5b                   	pop    ebx
c0022d91:	5e                   	pop    esi
c0022d92:	5f                   	pop    edi
c0022d93:	5d                   	pop    ebp
c0022d94:	c3                   	ret    
c0022d95:	90                   	nop

c0022d96 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022d96:	6a 08                	push   0x8
c0022d98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d9d:	50                   	push   eax
c0022d9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022da3:	50                   	push   eax
c0022da4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022da9:	50                   	push   eax
c0022daa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dae:	e8 11 ff ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022db3:	83 c4 14             	add    esp,0x14
c0022db6:	0f b6 c4             	movzx  eax,ah
c0022db9:	c3                   	ret    

c0022dba <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022dba:	6a 08                	push   0x8
c0022dbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022dc1:	50                   	push   eax
c0022dc2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022dc7:	50                   	push   eax
c0022dc8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022dcd:	50                   	push   eax
c0022dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dd2:	e8 ed fe ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dd7:	83 c4 14             	add    esp,0x14
c0022dda:	c3                   	ret    
c0022ddb:	90                   	nop

c0022ddc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ddc:	6a 3c                	push   0x3c
c0022dde:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022de3:	50                   	push   eax
c0022de4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022de9:	50                   	push   eax
c0022dea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022def:	50                   	push   eax
c0022df0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022df4:	e8 cb fe ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df9:	83 c4 14             	add    esp,0x14
c0022dfc:	c3                   	ret    
c0022dfd:	90                   	nop

c0022dfe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022dfe:	6a 18                	push   0x18
c0022e00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022e05:	50                   	push   eax
c0022e06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022e0b:	50                   	push   eax
c0022e0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022e11:	50                   	push   eax
c0022e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e16:	e8 a9 fe ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e1b:	83 c4 14             	add    esp,0x14
c0022e1e:	0f b6 c4             	movzx  eax,ah
c0022e21:	c3                   	ret    

c0022e22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e22:	55                   	push   ebp
c0022e23:	57                   	push   edi
c0022e24:	56                   	push   esi
c0022e25:	53                   	push   ebx
c0022e26:	50                   	push   eax
c0022e27:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022e2b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022e30:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e35:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022e3a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022e41:	8d 43 12             	lea    eax,[ebx+0x12]
c0022e44:	83 c3 10             	add    ebx,0x10
c0022e47:	0f b6 c0             	movzx  eax,al
c0022e4a:	0f b6 db             	movzx  ebx,bl
c0022e4d:	50                   	push   eax
c0022e4e:	51                   	push   ecx
c0022e4f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022e53:	57                   	push   edi
c0022e54:	55                   	push   ebp
c0022e55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022e59:	e8 66 fe ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e5e:	53                   	push   ebx
c0022e5f:	89 c6                	mov    esi,eax
c0022e61:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022e65:	c1 e6 10             	shl    esi,0x10
c0022e68:	51                   	push   ecx
c0022e69:	57                   	push   edi
c0022e6a:	55                   	push   ebp
c0022e6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022e6f:	e8 50 fe ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e74:	83 c4 2c             	add    esp,0x2c
c0022e77:	0f b7 c0             	movzx  eax,ax
c0022e7a:	5b                   	pop    ebx
c0022e7b:	09 f0                	or     eax,esi
c0022e7d:	5e                   	pop    esi
c0022e7e:	5f                   	pop    edi
c0022e7f:	5d                   	pop    ebp
c0022e80:	c3                   	ret    
c0022e81:	90                   	nop

c0022e82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022e82:	53                   	push   ebx
c0022e83:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e88:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022e8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e91:	c1 e1 10             	shl    ecx,0x10
c0022e94:	25 fc 00 00 00       	and    eax,0xfc
c0022e99:	09 c1                	or     ecx,eax
c0022e9b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ea0:	c1 e0 08             	shl    eax,0x8
c0022ea3:	09 c1                	or     ecx,eax
c0022ea5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022eaa:	c1 e0 0b             	shl    eax,0xb
c0022ead:	09 c1                	or     ecx,eax
c0022eaf:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022eb5:	89 c8                	mov    eax,ecx
c0022eb7:	ef                   	out    dx,eax
c0022eb8:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ebd:	ed                   	in     eax,dx
c0022ebe:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ec3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022ec8:	74 0a                	je     c0022ed4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022eca:	0f b7 d8             	movzx  ebx,ax
c0022ecd:	89 d0                	mov    eax,edx
c0022ecf:	c1 e0 10             	shl    eax,0x10
c0022ed2:	eb 05                	jmp    c0022ed9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022ed4:	66 31 c0             	xor    ax,ax
c0022ed7:	89 d3                	mov    ebx,edx
c0022ed9:	09 c3                	or     ebx,eax
c0022edb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ee0:	89 c8                	mov    eax,ecx
c0022ee2:	ef                   	out    dx,eax
c0022ee3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ee8:	89 d8                	mov    eax,ebx
c0022eea:	ef                   	out    dx,eax
c0022eeb:	5b                   	pop    ebx
c0022eec:	c3                   	ret    
c0022eed:	90                   	nop

c0022eee <PCI::checkBus(unsigned char)>:
c0022eee:	56                   	push   esi
c0022eef:	53                   	push   ebx
c0022ef0:	31 db                	xor    ebx,ebx
c0022ef2:	51                   	push   ecx
c0022ef3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ef8:	52                   	push   edx
c0022ef9:	53                   	push   ebx
c0022efa:	43                   	inc    ebx
c0022efb:	56                   	push   esi
c0022efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f00:	e8 41 03 00 00       	call   c0023246 <PCI::checkDevice(unsigned char, unsigned char)>
c0022f05:	83 c4 10             	add    esp,0x10
c0022f08:	83 fb 20             	cmp    ebx,0x20
c0022f0b:	75 eb                	jne    c0022ef8 <PCI::checkBus(unsigned char)+0xa>
c0022f0d:	58                   	pop    eax
c0022f0e:	5b                   	pop    ebx
c0022f0f:	5e                   	pop    esi
c0022f10:	c3                   	ret    
c0022f11:	90                   	nop

c0022f12 <PCI::foundDevice(PCIDeviceInfo)>:
c0022f12:	55                   	push   ebp
c0022f13:	57                   	push   edi
c0022f14:	56                   	push   esi
c0022f15:	53                   	push   ebx
c0022f16:	83 ec 1c             	sub    esp,0x1c
c0022f19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f1d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022f23:	0f 84 68 01 00 00    	je     c0023091 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0022f29:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022f2d:	66 81 f9 06 04       	cmp    cx,0x406
c0022f32:	75 2c                	jne    c0022f60 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022f34:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022f39:	50                   	push   eax
c0022f3a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022f3f:	50                   	push   eax
c0022f40:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022f45:	50                   	push   eax
c0022f46:	56                   	push   esi
c0022f47:	e8 b2 fe ff ff       	call   c0022dfe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022f4c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022f50:	0f b6 c0             	movzx  eax,al
c0022f53:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022f57:	83 c4 2c             	add    esp,0x2c
c0022f5a:	5b                   	pop    ebx
c0022f5b:	5e                   	pop    esi
c0022f5c:	5f                   	pop    edi
c0022f5d:	5d                   	pop    ebp
c0022f5e:	eb 8e                	jmp    c0022eee <PCI::checkBus(unsigned char)>
c0022f60:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022f64:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022f6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022f72:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022f76:	88 d3                	mov    bl,dl
c0022f78:	85 c0                	test   eax,eax
c0022f7a:	74 33                	je     c0022faf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022f7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022f7f:	85 d2                	test   edx,edx
c0022f81:	74 28                	je     c0022fab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f83:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022f89:	31 ef                	xor    edi,ebp
c0022f8b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022f91:	75 18                	jne    c0022fab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f97:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022f9d:	75 0c                	jne    c0022fab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f9f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022fa5:	0f 84 e6 00 00 00    	je     c0023091 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0022fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fad:	eb c9                	jmp    c0022f78 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022faf:	66 81 f9 01 06       	cmp    cx,0x601
c0022fb4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022fb8:	75 19                	jne    c0022fd3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022fba:	83 ec 0c             	sub    esp,0xc
c0022fbd:	68 64 01 00 00       	push   0x164
c0022fc2:	e8 84 c8 fe ff       	call   c000f84b <malloc>
c0022fc7:	89 c5                	mov    ebp,eax
c0022fc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022fcc:	e8 ab 0f 00 00       	call   c0023f7c <SATABus::SATABus()>
c0022fd1:	eb 1e                	jmp    c0022ff1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022fd3:	66 81 f9 01 01       	cmp    cx,0x101
c0022fd8:	75 60                	jne    c002303a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022fda:	83 ec 0c             	sub    esp,0xc
c0022fdd:	68 70 02 00 00       	push   0x270
c0022fe2:	e8 64 c8 fe ff       	call   c000f84b <malloc>
c0022fe7:	89 c5                	mov    ebp,eax
c0022fe9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022fec:	e8 19 03 00 00       	call   c002330a <IDE::IDE()>
c0022ff1:	58                   	pop    eax
c0022ff2:	5a                   	pop    edx
c0022ff3:	55                   	push   ebp
c0022ff4:	56                   	push   esi
c0022ff5:	e8 f6 11 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0022ffa:	83 ec 1c             	sub    esp,0x1c
c0022ffd:	b9 09 00 00 00       	mov    ecx,0x9
c0023002:	fc                   	cld    
c0023003:	89 e7                	mov    edi,esp
c0023005:	89 de                	mov    esi,ebx
c0023007:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023009:	55                   	push   ebp
c002300a:	e8 eb 10 ff ff       	call   c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c002300f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023012:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023016:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002301e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023026:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002302e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023031:	83 c4 4c             	add    esp,0x4c
c0023034:	5b                   	pop    ebx
c0023035:	5e                   	pop    esi
c0023036:	5f                   	pop    edi
c0023037:	5d                   	pop    ebp
c0023038:	ff e0                	jmp    eax
c002303a:	50                   	push   eax
c002303b:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023040:	50                   	push   eax
c0023041:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023046:	50                   	push   eax
c0023047:	68 78 cf 02 c0       	push   0xc002cf78
c002304c:	e8 72 fd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023051:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023058:	e8 ee c7 fe ff       	call   c000f84b <malloc>
c002305d:	5a                   	pop    edx
c002305e:	89 c5                	mov    ebp,eax
c0023060:	59                   	pop    ecx
c0023061:	68 94 cf 02 c0       	push   0xc002cf94
c0023066:	50                   	push   eax
c0023067:	e8 7a 14 ff ff       	call   c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>
c002306c:	5f                   	pop    edi
c002306d:	58                   	pop    eax
c002306e:	55                   	push   ebp
c002306f:	56                   	push   esi
c0023070:	e8 7b 11 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0023075:	b9 09 00 00 00       	mov    ecx,0x9
c002307a:	fc                   	cld    
c002307b:	89 df                	mov    edi,ebx
c002307d:	89 de                	mov    esi,ebx
c002307f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023081:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023085:	83 c4 2c             	add    esp,0x2c
c0023088:	5b                   	pop    ebx
c0023089:	5e                   	pop    esi
c002308a:	5f                   	pop    edi
c002308b:	5d                   	pop    ebp
c002308c:	e9 69 10 ff ff       	jmp    c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c0023091:	83 c4 1c             	add    esp,0x1c
c0023094:	5b                   	pop    ebx
c0023095:	5e                   	pop    esi
c0023096:	5f                   	pop    edi
c0023097:	5d                   	pop    ebp
c0023098:	c3                   	ret    
c0023099:	90                   	nop

c002309a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002309a:	55                   	push   ebp
c002309b:	57                   	push   edi
c002309c:	56                   	push   esi
c002309d:	53                   	push   ebx
c002309e:	83 ec 5c             	sub    esp,0x5c
c00230a1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00230a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230a9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00230ad:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00230b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00230b6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00230ba:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00230bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00230c3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00230c8:	6a 0c                	push   0xc
c00230ca:	55                   	push   ebp
c00230cb:	53                   	push   ebx
c00230cc:	57                   	push   edi
c00230cd:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00230d4:	e8 eb fb ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230d9:	55                   	push   ebp
c00230da:	53                   	push   ebx
c00230db:	57                   	push   edi
c00230dc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00230e3:	e8 6a fc ff ff       	call   c0022d52 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00230e8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00230ed:	83 c4 24             	add    esp,0x24
c00230f0:	55                   	push   ebp
c00230f1:	53                   	push   ebx
c00230f2:	57                   	push   edi
c00230f3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00230f7:	e8 e0 fc ff ff       	call   c0022ddc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00230fc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023100:	6a 3c                	push   0x3c
c0023102:	55                   	push   ebp
c0023103:	53                   	push   ebx
c0023104:	57                   	push   edi
c0023105:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002310c:	e8 b3 fb ff ff       	call   c0022cc4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023111:	0f b6 c4             	movzx  eax,ah
c0023114:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023118:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002311c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023120:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0023125:	83 c4 24             	add    esp,0x24
c0023128:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002312e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023135:	74 6c                	je     c00231a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023137:	31 f6                	xor    esi,esi
c0023139:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c002313f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023145:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002314b:	7e 56                	jle    c00231a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002314d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023150:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023157:	39 cb                	cmp    ebx,ecx
c0023159:	75 45                	jne    c00231a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002315b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023162:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023166:	75 38                	jne    c00231a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023168:	83 ec 0c             	sub    esp,0xc
c002316b:	68 ae cf 02 c0       	push   0xc002cfae
c0023170:	e8 4e fc fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023175:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c002317b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023181:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023189:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002318d:	52                   	push   edx
c002318e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023192:	53                   	push   ebx
c0023193:	68 d3 cf 02 c0       	push   0xc002cfd3
c0023198:	e8 26 fc fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002319d:	83 c4 20             	add    esp,0x20
c00231a0:	46                   	inc    esi
c00231a1:	eb 96                	jmp    c0023139 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00231a3:	31 d2                	xor    edx,edx
c00231a5:	83 ec 0c             	sub    esp,0xc
c00231a8:	55                   	push   ebp
c00231a9:	53                   	push   ebx
c00231aa:	57                   	push   edi
c00231ab:	52                   	push   edx
c00231ac:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00231b0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00231b7:	e8 66 fc ff ff       	call   c0022e22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231bc:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00231c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00231c4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00231c8:	42                   	inc    edx
c00231c9:	83 c4 20             	add    esp,0x20
c00231cc:	83 fa 06             	cmp    edx,0x6
c00231cf:	75 d4                	jne    c00231a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00231d1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00231d5:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00231d9:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00231dd:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00231e1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00231e5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00231e9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00231ee:	86 e0                	xchg   al,ah
c00231f0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00231f5:	55                   	push   ebp
c00231f6:	53                   	push   ebx
c00231f7:	57                   	push   edi
c00231f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00231fc:	e8 95 fb ff ff       	call   c0022d96 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023201:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023205:	55                   	push   ebp
c0023206:	53                   	push   ebx
c0023207:	57                   	push   edi
c0023208:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002320f:	e8 f8 fa ff ff       	call   c0022d0c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023214:	83 ec 0c             	sub    esp,0xc
c0023217:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002321c:	b9 09 00 00 00       	mov    ecx,0x9
c0023221:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023225:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023229:	fc                   	cld    
c002322a:	89 e7                	mov    edi,esp
c002322c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002322e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023235:	e8 d8 fc ff ff       	call   c0022f12 <PCI::foundDevice(PCIDeviceInfo)>
c002323a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023240:	5b                   	pop    ebx
c0023241:	5e                   	pop    esi
c0023242:	5f                   	pop    edi
c0023243:	5d                   	pop    ebp
c0023244:	c3                   	ret    
c0023245:	90                   	nop

c0023246 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023246:	55                   	push   ebp
c0023247:	57                   	push   edi
c0023248:	56                   	push   esi
c0023249:	53                   	push   ebx
c002324a:	83 ec 0c             	sub    esp,0xc
c002324d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023251:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023256:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002325b:	6a 00                	push   0x0
c002325d:	56                   	push   esi
c002325e:	57                   	push   edi
c002325f:	55                   	push   ebp
c0023260:	e8 a7 fa ff ff       	call   c0022d0c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023265:	6a 00                	push   0x0
c0023267:	56                   	push   esi
c0023268:	57                   	push   edi
c0023269:	55                   	push   ebp
c002326a:	e8 2b fe ff ff       	call   c002309a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002326f:	83 c4 20             	add    esp,0x20
c0023272:	6a 00                	push   0x0
c0023274:	56                   	push   esi
c0023275:	57                   	push   edi
c0023276:	55                   	push   ebp
c0023277:	e8 b2 fa ff ff       	call   c0022d2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002327c:	83 c4 10             	add    esp,0x10
c002327f:	84 c0                	test   al,al
c0023281:	79 27                	jns    c00232aa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023283:	bb 01 00 00 00       	mov    ebx,0x1
c0023288:	53                   	push   ebx
c0023289:	56                   	push   esi
c002328a:	57                   	push   edi
c002328b:	55                   	push   ebp
c002328c:	e8 7b fa ff ff       	call   c0022d0c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023291:	83 c4 10             	add    esp,0x10
c0023294:	66 40                	inc    ax
c0023296:	74 0c                	je     c00232a4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023298:	53                   	push   ebx
c0023299:	56                   	push   esi
c002329a:	57                   	push   edi
c002329b:	55                   	push   ebp
c002329c:	e8 f9 fd ff ff       	call   c002309a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00232a1:	83 c4 10             	add    esp,0x10
c00232a4:	43                   	inc    ebx
c00232a5:	83 fb 08             	cmp    ebx,0x8
c00232a8:	75 de                	jne    c0023288 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00232aa:	83 c4 0c             	add    esp,0xc
c00232ad:	5b                   	pop    ebx
c00232ae:	5e                   	pop    esi
c00232af:	5f                   	pop    edi
c00232b0:	5d                   	pop    ebp
c00232b1:	c3                   	ret    

c00232b2 <PCI::detect()>:
c00232b2:	56                   	push   esi
c00232b3:	53                   	push   ebx
c00232b4:	53                   	push   ebx
c00232b5:	31 db                	xor    ebx,ebx
c00232b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00232bb:	6a 00                	push   0x0
c00232bd:	6a 00                	push   0x0
c00232bf:	6a 00                	push   0x0
c00232c1:	56                   	push   esi
c00232c2:	e8 67 fa ff ff       	call   c0022d2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00232c7:	83 c4 10             	add    esp,0x10
c00232ca:	a8 80                	test   al,0x80
c00232cc:	75 21                	jne    c00232ef <PCI::detect()+0x3d>
c00232ce:	51                   	push   ecx
c00232cf:	51                   	push   ecx
c00232d0:	6a 00                	push   0x0
c00232d2:	56                   	push   esi
c00232d3:	e8 16 fc ff ff       	call   c0022eee <PCI::checkBus(unsigned char)>
c00232d8:	83 c4 10             	add    esp,0x10
c00232db:	eb 24                	jmp    c0023301 <PCI::detect()+0x4f>
c00232dd:	52                   	push   edx
c00232de:	52                   	push   edx
c00232df:	53                   	push   ebx
c00232e0:	43                   	inc    ebx
c00232e1:	56                   	push   esi
c00232e2:	e8 07 fc ff ff       	call   c0022eee <PCI::checkBus(unsigned char)>
c00232e7:	83 c4 10             	add    esp,0x10
c00232ea:	83 fb 08             	cmp    ebx,0x8
c00232ed:	74 12                	je     c0023301 <PCI::detect()+0x4f>
c00232ef:	53                   	push   ebx
c00232f0:	6a 00                	push   0x0
c00232f2:	6a 00                	push   0x0
c00232f4:	56                   	push   esi
c00232f5:	e8 12 fa ff ff       	call   c0022d0c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00232fa:	83 c4 10             	add    esp,0x10
c00232fd:	66 40                	inc    ax
c00232ff:	74 dc                	je     c00232dd <PCI::detect()+0x2b>
c0023301:	58                   	pop    eax
c0023302:	5b                   	pop    ebx
c0023303:	5e                   	pop    esi
c0023304:	c3                   	ret    
c0023305:	90                   	nop

c0023306 <IDE::close(int, int, void*)>:
c0023306:	83 c8 ff             	or     eax,0xffffffff
c0023309:	c3                   	ret    

c002330a <IDE::IDE()>:
c002330a:	83 ec 0c             	sub    esp,0xc
c002330d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023311:	83 ec 08             	sub    esp,0x8
c0023314:	68 1c d0 02 c0       	push   0xc002d01c
c0023319:	50                   	push   eax
c002331a:	e8 6b 12 ff ff       	call   c001458a <HardDiskController::HardDiskController(char const*)>
c002331f:	83 c4 10             	add    esp,0x10
c0023322:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c0023327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332b:	89 10                	mov    DWORD PTR [eax],edx
c002332d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023331:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023338:	90                   	nop
c0023339:	83 c4 0c             	add    esp,0xc
c002333c:	c3                   	ret    
c002333d:	90                   	nop

c002333e <IDE::prepareInterrupt(unsigned char)>:
c002333e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023343:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023347:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002334f:	c3                   	ret    

c0023350 <selectDrive(unsigned char, unsigned char)>:
c0023350:	c3                   	ret    
c0023351:	90                   	nop

c0023352 <IDE::getBase(unsigned char)>:
c0023352:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002335b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023363:	c3                   	ret    

c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023364:	55                   	push   ebp
c0023365:	57                   	push   edi
c0023366:	56                   	push   esi
c0023367:	53                   	push   ebx
c0023368:	83 ec 1c             	sub    esp,0x1c
c002336b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002336f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023373:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023376:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002337a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002337e:	80 f9 03             	cmp    cl,0x3
c0023381:	77 51                	ja     c00233d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023387:	0f b6 f2             	movzx  esi,dl
c002338a:	0f b6 db             	movzx  ebx,bl
c002338d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023390:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023394:	83 ca 80             	or     edx,0xffffff80
c0023397:	0f b6 d2             	movzx  edx,dl
c002339a:	52                   	push   edx
c002339b:	6a 0c                	push   0xc
c002339d:	56                   	push   esi
c002339e:	57                   	push   edi
c002339f:	e8 c0 ff ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233a4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00233a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233ad:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00233b1:	ee                   	out    dx,al
c00233b2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00233b7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00233bb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00233bf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00233c3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00233cb:	83 c4 2c             	add    esp,0x2c
c00233ce:	5b                   	pop    ebx
c00233cf:	5e                   	pop    esi
c00233d0:	5f                   	pop    edi
c00233d1:	5d                   	pop    ebp
c00233d2:	eb 90                	jmp    c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233d4:	80 fb 07             	cmp    bl,0x7
c00233d7:	77 12                	ja     c00233eb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00233d9:	0f b6 d2             	movzx  edx,dl
c00233dc:	0f b6 db             	movzx  ebx,bl
c00233df:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00233e7:	89 da                	mov    edx,ebx
c00233e9:	eb 2f                	jmp    c002341a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00233eb:	80 fb 0d             	cmp    bl,0xd
c00233ee:	77 13                	ja     c0023403 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00233f0:	0f b6 d2             	movzx  edx,dl
c00233f3:	0f b6 db             	movzx  ebx,bl
c00233f6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00233fd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023401:	eb 17                	jmp    c002341a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023403:	80 fb 15             	cmp    bl,0x15
c0023406:	77 13                	ja     c002341b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023408:	0f b6 d2             	movzx  edx,dl
c002340b:	0f b6 db             	movzx  ebx,bl
c002340e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023416:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002341a:	ee                   	out    dx,al
c002341b:	83 c4 1c             	add    esp,0x1c
c002341e:	5b                   	pop    ebx
c002341f:	5e                   	pop    esi
c0023420:	5f                   	pop    edi
c0023421:	5d                   	pop    ebp
c0023422:	c3                   	ret    
c0023423:	90                   	nop

c0023424 <IDE::read(unsigned char, unsigned char)>:
c0023424:	55                   	push   ebp
c0023425:	57                   	push   edi
c0023426:	56                   	push   esi
c0023427:	53                   	push   ebx
c0023428:	83 ec 1c             	sub    esp,0x1c
c002342b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002342f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023433:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023436:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002343a:	3c 03                	cmp    al,0x3
c002343c:	77 43                	ja     c0023481 <IDE::read(unsigned char, unsigned char)+0x5d>
c002343e:	0f b6 f2             	movzx  esi,dl
c0023441:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023444:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023448:	83 c8 80             	or     eax,0xffffff80
c002344b:	0f b6 c0             	movzx  eax,al
c002344e:	50                   	push   eax
c002344f:	6a 0c                	push   0xc
c0023451:	56                   	push   esi
c0023452:	57                   	push   edi
c0023453:	e8 0c ff ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023458:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002345d:	0f b6 c3             	movzx  eax,bl
c0023460:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023464:	ec                   	in     al,dx
c0023465:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023469:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002346e:	52                   	push   edx
c002346f:	6a 0c                	push   0xc
c0023471:	56                   	push   esi
c0023472:	57                   	push   edi
c0023473:	e8 ec fe ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023478:	83 c4 20             	add    esp,0x20
c002347b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002347f:	eb 49                	jmp    c00234ca <IDE::read(unsigned char, unsigned char)+0xa6>
c0023481:	80 fb 07             	cmp    bl,0x7
c0023484:	77 12                	ja     c0023498 <IDE::read(unsigned char, unsigned char)+0x74>
c0023486:	0f b6 d2             	movzx  edx,dl
c0023489:	0f b6 c3             	movzx  eax,bl
c002348c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023494:	89 c2                	mov    edx,eax
c0023496:	eb 31                	jmp    c00234c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023498:	80 fb 0d             	cmp    bl,0xd
c002349b:	77 13                	ja     c00234b0 <IDE::read(unsigned char, unsigned char)+0x8c>
c002349d:	0f b6 d2             	movzx  edx,dl
c00234a0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00234a7:	0f b6 d3             	movzx  edx,bl
c00234aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00234ae:	eb 19                	jmp    c00234c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00234b0:	31 c0                	xor    eax,eax
c00234b2:	80 fb 15             	cmp    bl,0x15
c00234b5:	77 13                	ja     c00234ca <IDE::read(unsigned char, unsigned char)+0xa6>
c00234b7:	0f b6 d2             	movzx  edx,dl
c00234ba:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00234c2:	0f b6 d3             	movzx  edx,bl
c00234c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00234c9:	ec                   	in     al,dx
c00234ca:	83 c4 1c             	add    esp,0x1c
c00234cd:	5b                   	pop    ebx
c00234ce:	5e                   	pop    esi
c00234cf:	5f                   	pop    edi
c00234d0:	5d                   	pop    ebp
c00234d1:	c3                   	ret    

c00234d2 <IDE::waitInterrupt(unsigned char)>:
c00234d2:	55                   	push   ebp
c00234d3:	57                   	push   edi
c00234d4:	56                   	push   esi
c00234d5:	53                   	push   ebx
c00234d6:	31 db                	xor    ebx,ebx
c00234d8:	83 ec 0c             	sub    esp,0xc
c00234db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00234df:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00234e4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00234ec:	89 e8                	mov    eax,ebp
c00234ee:	84 c0                	test   al,al
c00234f0:	75 34                	jne    c0023526 <IDE::waitInterrupt(unsigned char)+0x54>
c00234f2:	52                   	push   edx
c00234f3:	6a 0c                	push   0xc
c00234f5:	56                   	push   esi
c00234f6:	57                   	push   edi
c00234f7:	e8 28 ff ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c00234fc:	83 c4 10             	add    esp,0x10
c00234ff:	a8 01                	test   al,0x1
c0023501:	75 2b                	jne    c002352e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023503:	f6 c3 04             	test   bl,0x4
c0023506:	75 16                	jne    c002351e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023508:	83 fb 32             	cmp    ebx,0x32
c002350b:	7e 11                	jle    c002351e <IDE::waitInterrupt(unsigned char)+0x4c>
c002350d:	50                   	push   eax
c002350e:	50                   	push   eax
c002350f:	6a 00                	push   0x0
c0023511:	68 80 96 98 00       	push   0x989680
c0023516:	e8 63 af ff ff       	call   c001e47e <nanoSleep(unsigned long long)>
c002351b:	83 c4 10             	add    esp,0x10
c002351e:	83 fb 3c             	cmp    ebx,0x3c
c0023521:	74 0b                	je     c002352e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023523:	43                   	inc    ebx
c0023524:	eb be                	jmp    c00234e4 <IDE::waitInterrupt(unsigned char)+0x12>
c0023526:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002352e:	83 c4 0c             	add    esp,0xc
c0023531:	89 e8                	mov    eax,ebp
c0023533:	5b                   	pop    ebx
c0023534:	5e                   	pop    esi
c0023535:	5f                   	pop    edi
c0023536:	5d                   	pop    ebp
c0023537:	c3                   	ret    

c0023538 <ideChannel0IRQHandler(regs*, void*)>:
c0023538:	83 ec 10             	sub    esp,0x10
c002353b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002353f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023546:	6a 07                	push   0x7
c0023548:	6a 00                	push   0x0
c002354a:	50                   	push   eax
c002354b:	e8 d4 fe ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023550:	83 c4 1c             	add    esp,0x1c
c0023553:	c3                   	ret    

c0023554 <ideChannel1IRQHandler(regs*, void*)>:
c0023554:	83 ec 10             	sub    esp,0x10
c0023557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002355b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023562:	6a 07                	push   0x7
c0023564:	6a 01                	push   0x1
c0023566:	50                   	push   eax
c0023567:	e8 b8 fe ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c002356c:	83 c4 1c             	add    esp,0x1c
c002356f:	c3                   	ret    

c0023570 <IDE::enableIRQs(unsigned char, bool)>:
c0023570:	57                   	push   edi
c0023571:	56                   	push   esi
c0023572:	be 04 00 00 00       	mov    esi,0x4
c0023577:	53                   	push   ebx
c0023578:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002357d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023581:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023586:	0f 94 c0             	sete   al
c0023589:	d1 e0                	shl    eax,1
c002358b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023592:	0f b6 c0             	movzx  eax,al
c0023595:	50                   	push   eax
c0023596:	6a 0c                	push   0xc
c0023598:	57                   	push   edi
c0023599:	53                   	push   ebx
c002359a:	e8 c5 fd ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002359f:	83 c4 10             	add    esp,0x10
c00235a2:	50                   	push   eax
c00235a3:	6a 0c                	push   0xc
c00235a5:	57                   	push   edi
c00235a6:	53                   	push   ebx
c00235a7:	e8 78 fe ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c00235ac:	83 c4 10             	add    esp,0x10
c00235af:	4e                   	dec    esi
c00235b0:	75 f0                	jne    c00235a2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00235b2:	5b                   	pop    ebx
c00235b3:	5e                   	pop    esi
c00235b4:	5f                   	pop    edi
c00235b5:	c3                   	ret    

c00235b6 <IDE::open(int, int, void*)>:
c00235b6:	55                   	push   ebp
c00235b7:	57                   	push   edi
c00235b8:	56                   	push   esi
c00235b9:	53                   	push   ebx
c00235ba:	83 ec 1c             	sub    esp,0x1c
c00235bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00235c1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00235ca:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00235d3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00235da:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00235e1:	0f 85 b0 02 00 00    	jne    c0023897 <IDE::open(int, int, void*)+0x2e1>
c00235e7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00235ed:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00235f1:	83 e0 7f             	and    eax,0x7f
c00235f4:	3c 05                	cmp    al,0x5
c00235f6:	74 04                	je     c00235fc <IDE::open(int, int, void*)+0x46>
c00235f8:	3c 0f                	cmp    al,0xf
c00235fa:	75 32                	jne    c002362e <IDE::open(int, int, void*)+0x78>
c00235fc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023602:	83 e0 fc             	and    eax,0xfffffffc
c0023605:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002360c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023612:	83 e0 fc             	and    eax,0xfffffffc
c0023615:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002361c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023622:	83 e0 fc             	and    eax,0xfffffffc
c0023625:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002362c:	eb 14                	jmp    c0023642 <IDE::open(int, int, void*)+0x8c>
c002362e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023638:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023642:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023649:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023650:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023654:	89 c6                	mov    esi,eax
c0023656:	bf f8 0c 00 00       	mov    edi,0xcf8
c002365b:	c1 e6 10             	shl    esi,0x10
c002365e:	89 e8                	mov    eax,ebp
c0023660:	89 fa                	mov    edx,edi
c0023662:	c1 e0 0b             	shl    eax,0xb
c0023665:	09 f0                	or     eax,esi
c0023667:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002366e:	c1 e6 08             	shl    esi,0x8
c0023671:	09 c6                	or     esi,eax
c0023673:	89 f0                	mov    eax,esi
c0023675:	0d 08 00 00 80       	or     eax,0x80000008
c002367a:	ef                   	out    dx,eax
c002367b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023680:	89 ca                	mov    edx,ecx
c0023682:	ed                   	in     eax,dx
c0023683:	c1 e8 10             	shr    eax,0x10
c0023686:	3d ff ff 00 00       	cmp    eax,0xffff
c002368b:	0f 84 f5 00 00 00    	je     c0023786 <IDE::open(int, int, void*)+0x1d0>
c0023691:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023697:	89 fa                	mov    edx,edi
c0023699:	89 f0                	mov    eax,esi
c002369b:	ef                   	out    dx,eax
c002369c:	b0 fe                	mov    al,0xfe
c002369e:	89 ca                	mov    edx,ecx
c00236a0:	ee                   	out    dx,al
c00236a1:	89 f0                	mov    eax,esi
c00236a3:	89 fa                	mov    edx,edi
c00236a5:	ef                   	out    dx,eax
c00236a6:	89 ca                	mov    edx,ecx
c00236a8:	ed                   	in     eax,dx
c00236a9:	3c fe                	cmp    al,0xfe
c00236ab:	0f 85 a9 00 00 00    	jne    c002375a <IDE::open(int, int, void*)+0x1a4>
c00236b1:	8b 15 a8 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a8
c00236b7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00236be:	74 33                	je     c00236f3 <IDE::open(int, int, void*)+0x13d>
c00236c0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00236c6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00236ca:	40                   	inc    eax
c00236cb:	83 ec 0c             	sub    esp,0xc
c00236ce:	0f b6 c0             	movzx  eax,al
c00236d1:	50                   	push   eax
c00236d2:	55                   	push   ebp
c00236d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00236d7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00236dd:	51                   	push   ecx
c00236de:	e8 c7 4a ff ff       	call   c00181aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00236e3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00236e8:	83 c4 1c             	add    esp,0x1c
c00236eb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00236f1:	eb 0a                	jmp    c00236fd <IDE::open(int, int, void*)+0x147>
c00236f3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00236fd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023704:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002370b:	c1 e1 10             	shl    ecx,0x10
c002370e:	c1 e0 08             	shl    eax,0x8
c0023711:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023716:	09 c1                	or     ecx,eax
c0023718:	89 fa                	mov    edx,edi
c002371a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023721:	c1 e0 0b             	shl    eax,0xb
c0023724:	09 c1                	or     ecx,eax
c0023726:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002372c:	89 c8                	mov    eax,ecx
c002372e:	ef                   	out    dx,eax
c002372f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023734:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002373a:	89 f2                	mov    edx,esi
c002373c:	ee                   	out    dx,al
c002373d:	89 c8                	mov    eax,ecx
c002373f:	89 fa                	mov    edx,edi
c0023741:	ef                   	out    dx,eax
c0023742:	89 f2                	mov    edx,esi
c0023744:	ed                   	in     eax,dx
c0023745:	0f b6 c0             	movzx  eax,al
c0023748:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002374e:	74 46                	je     c0023796 <IDE::open(int, int, void*)+0x1e0>
c0023750:	83 ec 0c             	sub    esp,0xc
c0023753:	68 34 d0 02 c0       	push   0xc002d034
c0023758:	eb 34                	jmp    c002378e <IDE::open(int, int, void*)+0x1d8>
c002375a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023763:	75 17                	jne    c002377c <IDE::open(int, int, void*)+0x1c6>
c0023765:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002376a:	74 07                	je     c0023773 <IDE::open(int, int, void*)+0x1bd>
c002376c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023771:	75 09                	jne    c002377c <IDE::open(int, int, void*)+0x1c6>
c0023773:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002377a:	eb 1a                	jmp    c0023796 <IDE::open(int, int, void*)+0x1e0>
c002377c:	83 ec 0c             	sub    esp,0xc
c002377f:	68 3c d0 02 c0       	push   0xc002d03c
c0023784:	eb 08                	jmp    c002378e <IDE::open(int, int, void*)+0x1d8>
c0023786:	83 ec 0c             	sub    esp,0xc
c0023789:	68 6d d0 02 c0       	push   0xc002d06d
c002378e:	e8 c4 6e ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0023793:	83 c4 10             	add    esp,0x10
c0023796:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002379d:	79 1a                	jns    c00237b9 <IDE::open(int, int, void*)+0x203>
c002379f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00237a5:	83 e0 fc             	and    eax,0xfffffffc
c00237a8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00237af:	83 c0 08             	add    eax,0x8
c00237b2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00237b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00237bf:	89 c2                	mov    edx,eax
c00237c1:	83 e2 0f             	and    edx,0xf
c00237c4:	66 83 fa 08          	cmp    dx,0x8
c00237c8:	75 0a                	jne    c00237d4 <IDE::open(int, int, void*)+0x21e>
c00237ca:	83 e8 02             	sub    eax,0x2
c00237cd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00237d4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00237da:	89 c2                	mov    edx,eax
c00237dc:	83 e2 0f             	and    edx,0xf
c00237df:	66 83 fa 08          	cmp    dx,0x8
c00237e3:	75 0a                	jne    c00237ef <IDE::open(int, int, void*)+0x239>
c00237e5:	83 e8 02             	sub    eax,0x2
c00237e8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00237ef:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00237f6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00237fd:	89 d0                	mov    eax,edx
c00237ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023802:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023806:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002380a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002380d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023812:	0f b6 c9             	movzx  ecx,cl
c0023815:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002381c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002381f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023823:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023827:	8d 50 02             	lea    edx,[eax+0x2]
c002382a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002382f:	0f b6 d2             	movzx  edx,dl
c0023832:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023838:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002383b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002383f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023843:	8d 48 03             	lea    ecx,[eax+0x3]
c0023846:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002384b:	0f b6 c9             	movzx  ecx,cl
c002384e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023854:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023857:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002385b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002385f:	8d 50 04             	lea    edx,[eax+0x4]
c0023862:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023868:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002386d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023874:	66 85 f6             	test   si,si
c0023877:	74 3e                	je     c00238b7 <IDE::open(int, int, void*)+0x301>
c0023879:	0f b6 d2             	movzx  edx,dl
c002387c:	83 c0 05             	add    eax,0x5
c002387f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023882:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023886:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002388a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023890:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023895:	eb 20                	jmp    c00238b7 <IDE::open(int, int, void*)+0x301>
c0023897:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00238a1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00238ab:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00238b2:	e9 02 ff ff ff       	jmp    c00237b9 <IDE::open(int, int, void*)+0x203>
c00238b7:	52                   	push   edx
c00238b8:	52                   	push   edx
c00238b9:	6a 00                	push   0x0
c00238bb:	53                   	push   ebx
c00238bc:	e8 7d fa ff ff       	call   c002333e <IDE::prepareInterrupt(unsigned char)>
c00238c1:	59                   	pop    ecx
c00238c2:	5e                   	pop    esi
c00238c3:	6a 01                	push   0x1
c00238c5:	53                   	push   ebx
c00238c6:	e8 73 fa ff ff       	call   c002333e <IDE::prepareInterrupt(unsigned char)>
c00238cb:	83 c4 0c             	add    esp,0xc
c00238ce:	6a 00                	push   0x0
c00238d0:	6a 00                	push   0x0
c00238d2:	53                   	push   ebx
c00238d3:	e8 98 fc ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c00238d8:	83 c4 0c             	add    esp,0xc
c00238db:	6a 00                	push   0x0
c00238dd:	6a 01                	push   0x1
c00238df:	53                   	push   ebx
c00238e0:	e8 8b fc ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c00238e5:	83 c4 10             	add    esp,0x10
c00238e8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00238ef:	74 40                	je     c0023931 <IDE::open(int, int, void*)+0x37b>
c00238f1:	83 ec 0c             	sub    esp,0xc
c00238f4:	68 97 d0 02 c0       	push   0xc002d097
c00238f9:	e8 c5 f4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00238fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023901:	6a 01                	push   0x1
c0023903:	68 38 35 02 c0       	push   0xc0023538
c0023908:	6a 0e                	push   0xe
c002390a:	53                   	push   ebx
c002390b:	e8 64 08 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023910:	83 c4 14             	add    esp,0x14
c0023913:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023919:	53                   	push   ebx
c002391a:	6a 01                	push   0x1
c002391c:	68 54 35 02 c0       	push   0xc0023554
c0023921:	6a 0f                	push   0xf
c0023923:	53                   	push   ebx
c0023924:	e8 4b 08 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023929:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002392f:	eb 4a                	jmp    c002397b <IDE::open(int, int, void*)+0x3c5>
c0023931:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002393b:	50                   	push   eax
c002393c:	6a 0f                	push   0xf
c002393e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023944:	68 b3 d0 02 c0       	push   0xc002d0b3
c0023949:	e8 75 f4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002394e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023951:	6a 00                	push   0x0
c0023953:	68 38 35 02 c0       	push   0xc0023538
c0023958:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002395e:	53                   	push   ebx
c002395f:	e8 10 08 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023964:	83 c4 14             	add    esp,0x14
c0023967:	53                   	push   ebx
c0023968:	6a 00                	push   0x0
c002396a:	68 54 35 02 c0       	push   0xc0023554
c002396f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023975:	53                   	push   ebx
c0023976:	e8 f9 07 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002397b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002397d:	83 c4 20             	add    esp,0x20
c0023980:	83 ec 0c             	sub    esp,0xc
c0023983:	53                   	push   ebx
c0023984:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023987:	83 c4 0c             	add    esp,0xc
c002398a:	6a 07                	push   0x7
c002398c:	6a 00                	push   0x0
c002398e:	53                   	push   ebx
c002398f:	e8 90 fa ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023994:	83 c4 0c             	add    esp,0xc
c0023997:	6a 07                	push   0x7
c0023999:	6a 01                	push   0x1
c002399b:	53                   	push   ebx
c002399c:	e8 83 fa ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c00239a1:	83 c4 0c             	add    esp,0xc
c00239a4:	6a 01                	push   0x1
c00239a6:	6a 00                	push   0x0
c00239a8:	53                   	push   ebx
c00239a9:	e8 c2 fb ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c00239ae:	83 c4 0c             	add    esp,0xc
c00239b1:	6a 01                	push   0x1
c00239b3:	6a 01                	push   0x1
c00239b5:	53                   	push   ebx
c00239b6:	e8 b5 fb ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c00239bb:	83 c4 2c             	add    esp,0x2c
c00239be:	31 c0                	xor    eax,eax
c00239c0:	5b                   	pop    ebx
c00239c1:	5e                   	pop    esi
c00239c2:	5f                   	pop    edi
c00239c3:	5d                   	pop    ebp
c00239c4:	c3                   	ret    
c00239c5:	90                   	nop

c00239c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00239c6:	55                   	push   ebp
c00239c7:	57                   	push   edi
c00239c8:	56                   	push   esi
c00239c9:	53                   	push   ebx
c00239ca:	83 ec 1c             	sub    esp,0x1c
c00239cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00239d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00239d5:	8d 50 f8             	lea    edx,[eax-0x8]
c00239d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239dc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00239e0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00239e4:	80 fa 03             	cmp    dl,0x3
c00239e7:	77 5d                	ja     c0023a46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00239e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00239ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00239f1:	0f b6 db             	movzx  ebx,bl
c00239f4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00239f7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00239fb:	83 ca 80             	or     edx,0xffffff80
c00239fe:	0f b6 d2             	movzx  edx,dl
c0023a01:	52                   	push   edx
c0023a02:	6a 0c                	push   0xc
c0023a04:	53                   	push   ebx
c0023a05:	56                   	push   esi
c0023a06:	e8 59 f9 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a0b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023a10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023a18:	0f b6 c0             	movzx  eax,al
c0023a1b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023a1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023a21:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023a26:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023a2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023a2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023a32:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023a3a:	83 c4 2c             	add    esp,0x2c
c0023a3d:	5b                   	pop    ebx
c0023a3e:	5e                   	pop    esi
c0023a3f:	5f                   	pop    edi
c0023a40:	5d                   	pop    ebp
c0023a41:	e9 1e f9 ff ff       	jmp    c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a46:	3c 07                	cmp    al,0x7
c0023a48:	77 10                	ja     c0023a5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023a4a:	0f b6 db             	movzx  ebx,bl
c0023a4d:	0f b6 d0             	movzx  edx,al
c0023a50:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023a58:	eb 2d                	jmp    c0023a87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023a5a:	3c 0d                	cmp    al,0xd
c0023a5c:	77 13                	ja     c0023a71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023a5e:	0f b6 db             	movzx  ebx,bl
c0023a61:	0f b6 c0             	movzx  eax,al
c0023a64:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023a6b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023a6f:	eb 16                	jmp    c0023a87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023a71:	3c 15                	cmp    al,0x15
c0023a73:	77 14                	ja     c0023a89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023a75:	0f b6 db             	movzx  ebx,bl
c0023a78:	0f b6 c0             	movzx  eax,al
c0023a7b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023a83:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023a87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023a89:	83 c4 1c             	add    esp,0x1c
c0023a8c:	5b                   	pop    ebx
c0023a8d:	5e                   	pop    esi
c0023a8e:	5f                   	pop    edi
c0023a8f:	5d                   	pop    ebp
c0023a90:	c3                   	ret    
c0023a91:	90                   	nop

c0023a92 <IDE::detect()>:
c0023a92:	55                   	push   ebp
c0023a93:	57                   	push   edi
c0023a94:	56                   	push   esi
c0023a95:	53                   	push   ebx
c0023a96:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023a9c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023aa3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023aaa:	0f 85 be 02 00 00    	jne    c0023d6e <IDE::detect()+0x2dc>
c0023ab0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023ab7:	31 f6                	xor    esi,esi
c0023ab9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023ac1:	31 ed                	xor    ebp,ebp
c0023ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023ac7:	c1 e0 06             	shl    eax,0x6
c0023aca:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023ad2:	89 e8                	mov    eax,ebp
c0023ad4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023ad8:	c1 e0 04             	shl    eax,0x4
c0023adb:	83 c8 a0             	or     eax,0xffffffa0
c0023ade:	0f b6 c0             	movzx  eax,al
c0023ae1:	50                   	push   eax
c0023ae2:	6a 06                	push   0x6
c0023ae4:	56                   	push   esi
c0023ae5:	53                   	push   ebx
c0023ae6:	e8 79 f8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aeb:	83 c4 0c             	add    esp,0xc
c0023aee:	6a 0c                	push   0xc
c0023af0:	56                   	push   esi
c0023af1:	53                   	push   ebx
c0023af2:	e8 2d f9 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023af7:	83 c4 0c             	add    esp,0xc
c0023afa:	6a 0c                	push   0xc
c0023afc:	56                   	push   esi
c0023afd:	53                   	push   ebx
c0023afe:	e8 21 f9 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b03:	83 c4 0c             	add    esp,0xc
c0023b06:	6a 0c                	push   0xc
c0023b08:	56                   	push   esi
c0023b09:	53                   	push   ebx
c0023b0a:	e8 15 f9 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b0f:	83 c4 0c             	add    esp,0xc
c0023b12:	6a 0c                	push   0xc
c0023b14:	56                   	push   esi
c0023b15:	53                   	push   ebx
c0023b16:	e8 09 f9 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b1b:	68 ec 00 00 00       	push   0xec
c0023b20:	6a 07                	push   0x7
c0023b22:	56                   	push   esi
c0023b23:	53                   	push   ebx
c0023b24:	e8 3b f8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b29:	83 c4 1c             	add    esp,0x1c
c0023b2c:	6a 0c                	push   0xc
c0023b2e:	56                   	push   esi
c0023b2f:	53                   	push   ebx
c0023b30:	e8 ef f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b35:	83 c4 0c             	add    esp,0xc
c0023b38:	6a 0c                	push   0xc
c0023b3a:	56                   	push   esi
c0023b3b:	53                   	push   ebx
c0023b3c:	e8 e3 f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b41:	83 c4 0c             	add    esp,0xc
c0023b44:	6a 0c                	push   0xc
c0023b46:	56                   	push   esi
c0023b47:	53                   	push   ebx
c0023b48:	e8 d7 f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b4d:	83 c4 0c             	add    esp,0xc
c0023b50:	6a 0c                	push   0xc
c0023b52:	56                   	push   esi
c0023b53:	53                   	push   ebx
c0023b54:	e8 cb f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b59:	83 c4 0c             	add    esp,0xc
c0023b5c:	6a 0c                	push   0xc
c0023b5e:	56                   	push   esi
c0023b5f:	53                   	push   ebx
c0023b60:	e8 bf f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b65:	83 c4 10             	add    esp,0x10
c0023b68:	84 c0                	test   al,al
c0023b6a:	0f 84 8b 01 00 00    	je     c0023cfb <IDE::detect()+0x269>
c0023b70:	31 ff                	xor    edi,edi
c0023b72:	50                   	push   eax
c0023b73:	6a 0c                	push   0xc
c0023b75:	56                   	push   esi
c0023b76:	53                   	push   ebx
c0023b77:	e8 a8 f8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	a8 01                	test   al,0x1
c0023b81:	0f 85 8e 01 00 00    	jne    c0023d15 <IDE::detect()+0x283>
c0023b87:	84 c0                	test   al,al
c0023b89:	78 04                	js     c0023b8f <IDE::detect()+0xfd>
c0023b8b:	a8 08                	test   al,0x8
c0023b8d:	75 27                	jne    c0023bb6 <IDE::detect()+0x124>
c0023b8f:	47                   	inc    edi
c0023b90:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023b96:	7e da                	jle    c0023b72 <IDE::detect()+0xe0>
c0023b98:	50                   	push   eax
c0023b99:	50                   	push   eax
c0023b9a:	6a 00                	push   0x0
c0023b9c:	68 40 4b 4c 00       	push   0x4c4b40
c0023ba1:	e8 d8 a8 ff ff       	call   c001e47e <nanoSleep(unsigned long long)>
c0023ba6:	83 c4 10             	add    esp,0x10
c0023ba9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023baf:	75 c1                	jne    c0023b72 <IDE::detect()+0xe0>
c0023bb1:	e9 5f 01 00 00       	jmp    c0023d15 <IDE::detect()+0x283>
c0023bb6:	31 c9                	xor    ecx,ecx
c0023bb8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023bbc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023bc0:	83 ec 0c             	sub    esp,0xc
c0023bc3:	68 80 00 00 00       	push   0x80
c0023bc8:	57                   	push   edi
c0023bc9:	6a 00                	push   0x0
c0023bcb:	56                   	push   esi
c0023bcc:	53                   	push   ebx
c0023bcd:	e8 f4 fd ff ff       	call   c00239c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023bd2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023bdb:	89 d1                	mov    ecx,edx
c0023bdd:	c1 e0 06             	shl    eax,0x6
c0023be0:	01 d8                	add    eax,ebx
c0023be2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023be9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023bf0:	89 f2                	mov    edx,esi
c0023bf2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023bf8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023bfc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023c02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023c06:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023c0d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023c15:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023c1c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023c24:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023c2a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023c31:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023c37:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023c3b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c3f:	83 c4 20             	add    esp,0x20
c0023c42:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023c45:	83 c0 02             	add    eax,0x2
c0023c48:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023c4e:	83 c7 02             	add    edi,0x2
c0023c51:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023c54:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023c5a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023c5e:	75 e2                	jne    c0023c42 <IDE::detect()+0x1b0>
c0023c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023c64:	c1 e0 06             	shl    eax,0x6
c0023c67:	01 d8                	add    eax,ebx
c0023c69:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023c6f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023c76:	66 c1 ea 09          	shr    dx,0x9
c0023c7a:	83 e2 01             	and    edx,0x1
c0023c7d:	84 c9                	test   cl,cl
c0023c7f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023c85:	75 2f                	jne    c0023cb6 <IDE::detect()+0x224>
c0023c87:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023c8d:	85 c0                	test   eax,eax
c0023c8f:	74 66                	je     c0023cf7 <IDE::detect()+0x265>
c0023c91:	50                   	push   eax
c0023c92:	55                   	push   ebp
c0023c93:	56                   	push   esi
c0023c94:	68 cf d0 02 c0       	push   0xc002d0cf
c0023c99:	e8 25 f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023c9e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ca5:	e8 a1 bb fe ff       	call   c000f84b <malloc>
c0023caa:	89 c7                	mov    edi,eax
c0023cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0023caf:	e8 78 06 00 00       	call   c002432c <ATA::ATA()>
c0023cb4:	eb 28                	jmp    c0023cde <IDE::detect()+0x24c>
c0023cb6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023cbc:	55                   	push   ebp
c0023cbd:	56                   	push   esi
c0023cbe:	68 fe d0 02 c0       	push   0xc002d0fe
c0023cc3:	e8 fb f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023cc8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ccf:	e8 77 bb fe ff       	call   c000f84b <malloc>
c0023cd4:	89 c7                	mov    edi,eax
c0023cd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cd9:	e8 8e 0c 00 00       	call   c002496c <ATAPI::ATAPI()>
c0023cde:	5a                   	pop    edx
c0023cdf:	59                   	pop    ecx
c0023ce0:	57                   	push   edi
c0023ce1:	53                   	push   ebx
c0023ce2:	e8 09 05 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0023ce7:	8b 07                	mov    eax,DWORD PTR [edi]
c0023ce9:	53                   	push   ebx
c0023cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023cee:	6a 00                	push   0x0
c0023cf0:	57                   	push   edi
c0023cf1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023cf4:	83 c4 20             	add    esp,0x20
c0023cf7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023cfb:	4d                   	dec    ebp
c0023cfc:	74 0a                	je     c0023d08 <IDE::detect()+0x276>
c0023cfe:	bd 01 00 00 00       	mov    ebp,0x1
c0023d03:	e9 bb fd ff ff       	jmp    c0023ac3 <IDE::detect()+0x31>
c0023d08:	4e                   	dec    esi
c0023d09:	74 63                	je     c0023d6e <IDE::detect()+0x2dc>
c0023d0b:	be 01 00 00 00       	mov    esi,0x1
c0023d10:	e9 ac fd ff ff       	jmp    c0023ac1 <IDE::detect()+0x2f>
c0023d15:	50                   	push   eax
c0023d16:	6a 04                	push   0x4
c0023d18:	56                   	push   esi
c0023d19:	53                   	push   ebx
c0023d1a:	e8 05 f7 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023d1f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d23:	83 c4 0c             	add    esp,0xc
c0023d26:	6a 05                	push   0x5
c0023d28:	56                   	push   esi
c0023d29:	53                   	push   ebx
c0023d2a:	e8 f5 f6 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023d2f:	83 c4 10             	add    esp,0x10
c0023d32:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023d36:	80 fa 14             	cmp    dl,0x14
c0023d39:	75 04                	jne    c0023d3f <IDE::detect()+0x2ad>
c0023d3b:	3c eb                	cmp    al,0xeb
c0023d3d:	eb 07                	jmp    c0023d46 <IDE::detect()+0x2b4>
c0023d3f:	3c 96                	cmp    al,0x96
c0023d41:	75 b8                	jne    c0023cfb <IDE::detect()+0x269>
c0023d43:	80 fa 69             	cmp    dl,0x69
c0023d46:	75 b3                	jne    c0023cfb <IDE::detect()+0x269>
c0023d48:	68 a1 00 00 00       	push   0xa1
c0023d4d:	6a 07                	push   0x7
c0023d4f:	56                   	push   esi
c0023d50:	53                   	push   ebx
c0023d51:	e8 0e f6 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d56:	5f                   	pop    edi
c0023d57:	58                   	pop    eax
c0023d58:	6a 00                	push   0x0
c0023d5a:	68 40 42 0f 00       	push   0xf4240
c0023d5f:	e8 1a a7 ff ff       	call   c001e47e <nanoSleep(unsigned long long)>
c0023d64:	83 c4 10             	add    esp,0x10
c0023d67:	b1 01                	mov    cl,0x1
c0023d69:	e9 4a fe ff ff       	jmp    c0023bb8 <IDE::detect()+0x126>
c0023d6e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023d74:	5b                   	pop    ebx
c0023d75:	5e                   	pop    esi
c0023d76:	5f                   	pop    edi
c0023d77:	5d                   	pop    ebp
c0023d78:	c3                   	ret    
c0023d79:	90                   	nop

c0023d7a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023d7a:	55                   	push   ebp
c0023d7b:	57                   	push   edi
c0023d7c:	56                   	push   esi
c0023d7d:	53                   	push   ebx
c0023d7e:	83 ec 1c             	sub    esp,0x1c
c0023d81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023d85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023d8d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023d91:	88 c3                	mov    bl,al
c0023d93:	84 c0                	test   al,al
c0023d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d99:	0f 84 67 01 00 00    	je     c0023f06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023d9f:	83 ec 0c             	sub    esp,0xc
c0023da2:	68 2f d1 02 c0       	push   0xc002d12f
c0023da7:	e8 17 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023dac:	83 c4 10             	add    esp,0x10
c0023daf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023db3:	3c 01                	cmp    al,0x1
c0023db5:	75 17                	jne    c0023dce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023db7:	83 ec 0c             	sub    esp,0xc
c0023dba:	b3 13                	mov    bl,0x13
c0023dbc:	68 3b d1 02 c0       	push   0xc002d13b
c0023dc1:	e8 fd ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023dc6:	83 c4 10             	add    esp,0x10
c0023dc9:	e9 25 01 00 00       	jmp    c0023ef3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023dce:	3c 02                	cmp    al,0x2
c0023dd0:	0f 85 ef 00 00 00    	jne    c0023ec5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023dd6:	d1 e6                	shl    esi,1
c0023dd8:	09 ee                	or     esi,ebp
c0023dda:	52                   	push   edx
c0023ddb:	89 f0                	mov    eax,esi
c0023ddd:	6a 01                	push   0x1
c0023ddf:	0f b6 f0             	movzx  esi,al
c0023de2:	c1 e6 06             	shl    esi,0x6
c0023de5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023ded:	50                   	push   eax
c0023dee:	57                   	push   edi
c0023def:	e8 30 f6 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023df4:	83 c4 10             	add    esp,0x10
c0023df7:	89 c6                	mov    esi,eax
c0023df9:	a8 01                	test   al,0x1
c0023dfb:	74 12                	je     c0023e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023dfd:	83 ec 0c             	sub    esp,0xc
c0023e00:	b3 07                	mov    bl,0x7
c0023e02:	68 50 d1 02 c0       	push   0xc002d150
c0023e07:	e8 b7 ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e0c:	83 c4 10             	add    esp,0x10
c0023e0f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023e15:	74 12                	je     c0023e29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023e17:	83 ec 0c             	sub    esp,0xc
c0023e1a:	b3 03                	mov    bl,0x3
c0023e1c:	68 6e d1 02 c0       	push   0xc002d16e
c0023e21:	e8 9d ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e26:	83 c4 10             	add    esp,0x10
c0023e29:	f7 c6 04 00 00 00    	test   esi,0x4
c0023e2f:	74 12                	je     c0023e43 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023e31:	83 ec 0c             	sub    esp,0xc
c0023e34:	b3 14                	mov    bl,0x14
c0023e36:	68 8e d1 02 c0       	push   0xc002d18e
c0023e3b:	e8 83 ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e40:	83 c4 10             	add    esp,0x10
c0023e43:	f7 c6 08 00 00 00    	test   esi,0x8
c0023e49:	74 12                	je     c0023e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023e4b:	83 ec 0c             	sub    esp,0xc
c0023e4e:	b3 03                	mov    bl,0x3
c0023e50:	68 6e d1 02 c0       	push   0xc002d16e
c0023e55:	e8 69 ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e5a:	83 c4 10             	add    esp,0x10
c0023e5d:	f7 c6 10 00 00 00    	test   esi,0x10
c0023e63:	74 12                	je     c0023e77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023e65:	83 ec 0c             	sub    esp,0xc
c0023e68:	b3 15                	mov    bl,0x15
c0023e6a:	68 a6 d1 02 c0       	push   0xc002d1a6
c0023e6f:	e8 4f ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e74:	83 c4 10             	add    esp,0x10
c0023e77:	f7 c6 20 00 00 00    	test   esi,0x20
c0023e7d:	74 12                	je     c0023e91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023e7f:	83 ec 0c             	sub    esp,0xc
c0023e82:	b3 03                	mov    bl,0x3
c0023e84:	68 6e d1 02 c0       	push   0xc002d16e
c0023e89:	e8 35 ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e8e:	83 c4 10             	add    esp,0x10
c0023e91:	f7 c6 40 00 00 00    	test   esi,0x40
c0023e97:	74 12                	je     c0023eab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023e99:	83 ec 0c             	sub    esp,0xc
c0023e9c:	b3 16                	mov    bl,0x16
c0023e9e:	68 c0 d1 02 c0       	push   0xc002d1c0
c0023ea3:	e8 1b ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ea8:	83 c4 10             	add    esp,0x10
c0023eab:	89 f0                	mov    eax,esi
c0023ead:	84 c0                	test   al,al
c0023eaf:	79 42                	jns    c0023ef3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023eb1:	83 ec 0c             	sub    esp,0xc
c0023eb4:	b3 0d                	mov    bl,0xd
c0023eb6:	68 e1 d1 02 c0       	push   0xc002d1e1
c0023ebb:	e8 03 ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ec0:	83 c4 10             	add    esp,0x10
c0023ec3:	eb 2e                	jmp    c0023ef3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ec5:	3c 03                	cmp    al,0x3
c0023ec7:	75 14                	jne    c0023edd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023ec9:	83 ec 0c             	sub    esp,0xc
c0023ecc:	b3 17                	mov    bl,0x17
c0023ece:	68 f5 d1 02 c0       	push   0xc002d1f5
c0023ed3:	e8 eb ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ed8:	83 c4 10             	add    esp,0x10
c0023edb:	eb 16                	jmp    c0023ef3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023edd:	3c 04                	cmp    al,0x4
c0023edf:	75 12                	jne    c0023ef3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ee1:	83 ec 0c             	sub    esp,0xc
c0023ee4:	b3 08                	mov    bl,0x8
c0023ee6:	68 0b d2 02 c0       	push   0xc002d20b
c0023eeb:	e8 d3 ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023ef0:	83 c4 10             	add    esp,0x10
c0023ef3:	50                   	push   eax
c0023ef4:	50                   	push   eax
c0023ef5:	0f b6 c3             	movzx  eax,bl
c0023ef8:	50                   	push   eax
c0023ef9:	68 23 d2 02 c0       	push   0xc002d223
c0023efe:	e8 c0 ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023f03:	83 c4 10             	add    esp,0x10
c0023f06:	83 c4 1c             	add    esp,0x1c
c0023f09:	88 d8                	mov    al,bl
c0023f0b:	5b                   	pop    ebx
c0023f0c:	5e                   	pop    esi
c0023f0d:	5f                   	pop    edi
c0023f0e:	5d                   	pop    ebp
c0023f0f:	c3                   	ret    

c0023f10 <IDE::polling(unsigned char, unsigned int)>:
c0023f10:	57                   	push   edi
c0023f11:	56                   	push   esi
c0023f12:	53                   	push   ebx
c0023f13:	bb 04 00 00 00       	mov    ebx,0x4
c0023f18:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023f1c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023f21:	52                   	push   edx
c0023f22:	6a 0c                	push   0xc
c0023f24:	56                   	push   esi
c0023f25:	57                   	push   edi
c0023f26:	e8 f9 f4 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023f2b:	83 c4 10             	add    esp,0x10
c0023f2e:	4b                   	dec    ebx
c0023f2f:	75 f0                	jne    c0023f21 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023f31:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023f36:	50                   	push   eax
c0023f37:	6a 0c                	push   0xc
c0023f39:	56                   	push   esi
c0023f3a:	57                   	push   edi
c0023f3b:	e8 e4 f4 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0023f40:	83 c4 10             	add    esp,0x10
c0023f43:	a8 01                	test   al,0x1
c0023f45:	74 12                	je     c0023f59 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023f47:	83 ec 0c             	sub    esp,0xc
c0023f4a:	68 3d d2 02 c0       	push   0xc002d23d
c0023f4f:	e8 6f ee fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023f54:	83 c4 10             	add    esp,0x10
c0023f57:	eb 17                	jmp    c0023f70 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023f59:	a8 20                	test   al,0x20
c0023f5b:	75 0f                	jne    c0023f6c <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023f5d:	4b                   	dec    ebx
c0023f5e:	74 10                	je     c0023f70 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023f60:	84 c0                	test   al,al
c0023f62:	78 d2                	js     c0023f36 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023f64:	a8 08                	test   al,0x8
c0023f66:	74 ce                	je     c0023f36 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023f68:	31 c0                	xor    eax,eax
c0023f6a:	eb 06                	jmp    c0023f72 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023f6c:	b0 01                	mov    al,0x1
c0023f6e:	eb 02                	jmp    c0023f72 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023f70:	b0 02                	mov    al,0x2
c0023f72:	5b                   	pop    ebx
c0023f73:	5e                   	pop    esi
c0023f74:	5f                   	pop    edi
c0023f75:	c3                   	ret    

c0023f76 <SATABus::close(int, int, void*)>:
c0023f76:	31 c0                	xor    eax,eax
c0023f78:	c3                   	ret    
c0023f79:	90                   	nop

c0023f7a <SATABus::detect()>:
c0023f7a:	c3                   	ret    
c0023f7b:	90                   	nop

c0023f7c <SATABus::SATABus()>:
c0023f7c:	83 ec 0c             	sub    esp,0xc
c0023f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f83:	83 ec 08             	sub    esp,0x8
c0023f86:	68 80 d2 02 c0       	push   0xc002d280
c0023f8b:	50                   	push   eax
c0023f8c:	e8 f9 05 ff ff       	call   c001458a <HardDiskController::HardDiskController(char const*)>
c0023f91:	83 c4 10             	add    esp,0x10
c0023f94:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c0023f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f9d:	89 10                	mov    DWORD PTR [eax],edx
c0023f9f:	83 ec 0c             	sub    esp,0xc
c0023fa2:	6a 50                	push   0x50
c0023fa4:	e8 f3 bf fe ff       	call   c000ff9c <Phys::allocateContiguousPages(int)>
c0023fa9:	83 c4 10             	add    esp,0x10
c0023fac:	89 c2                	mov    edx,eax
c0023fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	6a 50                	push   0x50
c0023fbd:	e8 2d da fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0023fc2:	83 c4 10             	add    esp,0x10
c0023fc5:	89 c2                	mov    edx,eax
c0023fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fcb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023fd1:	e8 58 dc fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0023fd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023fda:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023fe4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023fea:	83 ec 0c             	sub    esp,0xc
c0023fed:	6a 03                	push   0x3
c0023fef:	6a 50                	push   0x50
c0023ff1:	51                   	push   ecx
c0023ff2:	52                   	push   edx
c0023ff3:	50                   	push   eax
c0023ff4:	e8 17 e5 fe ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023ff9:	83 c4 20             	add    esp,0x20
c0023ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024000:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002400a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024010:	83 ec 04             	sub    esp,0x4
c0024013:	52                   	push   edx
c0024014:	50                   	push   eax
c0024015:	68 a4 d2 02 c0       	push   0xc002d2a4
c002401a:	e8 a4 ed fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002401f:	83 c4 10             	add    esp,0x10
c0024022:	90                   	nop
c0024023:	83 c4 0c             	add    esp,0xc
c0024026:	c3                   	ret    
c0024027:	90                   	nop

c0024028 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024028:	83 ec 0c             	sub    esp,0xc
c002402b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002402f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024032:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024035:	09 c2                	or     edx,eax
c0024037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002403b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024041:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024043:	31 c0                	xor    eax,eax
c0024045:	c1 e9 08             	shr    ecx,0x8
c0024048:	83 e1 0f             	and    ecx,0xf
c002404b:	39 c8                	cmp    eax,ecx
c002404d:	74 0a                	je     c0024059 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002404f:	f6 c2 01             	test   dl,0x1
c0024052:	74 18                	je     c002406c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024054:	d1 ea                	shr    edx,1
c0024056:	40                   	inc    eax
c0024057:	eb f2                	jmp    c002404b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024059:	83 ec 0c             	sub    esp,0xc
c002405c:	68 c8 d2 02 c0       	push   0xc002d2c8
c0024061:	e8 f1 65 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0024066:	83 c4 10             	add    esp,0x10
c0024069:	83 c8 ff             	or     eax,0xffffffff
c002406c:	83 c4 0c             	add    esp,0xc
c002406f:	c3                   	ret    

c0024070 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024070:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024074:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024077:	89 c2                	mov    edx,eax
c0024079:	c1 ea 08             	shr    edx,0x8
c002407c:	83 e2 0f             	and    edx,0xf
c002407f:	fe ca                	dec    dl
c0024081:	75 31                	jne    c00240b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024083:	83 e0 0f             	and    eax,0xf
c0024086:	3c 03                	cmp    al,0x3
c0024088:	75 2a                	jne    c00240b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002408a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002408d:	b8 02 00 00 00       	mov    eax,0x2
c0024092:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024098:	74 1c                	je     c00240b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002409a:	b8 04 00 00 00       	mov    eax,0x4
c002409f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00240a5:	74 0f                	je     c00240b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00240a7:	31 c0                	xor    eax,eax
c00240a9:	83 fa 03             	cmp    edx,0x3
c00240ac:	0f 94 c0             	sete   al
c00240af:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00240b3:	c3                   	ret    
c00240b4:	31 c0                	xor    eax,eax
c00240b6:	c3                   	ret    
c00240b7:	90                   	nop

c00240b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00240b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00240bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240bf:	0f ba e2 0f          	bt     edx,0xf
c00240c3:	72 f7                	jb     c00240bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00240c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240c8:	83 ca 10             	or     edx,0x10
c00240cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00240ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240d1:	83 ca 01             	or     edx,0x1
c00240d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00240d7:	c3                   	ret    

c00240d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00240d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00240dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240df:	83 e2 fe             	and    edx,0xfffffffe
c00240e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00240e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240e8:	83 e2 ef             	and    edx,0xffffffef
c00240eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00240ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240f1:	0f ba e2 0e          	bt     edx,0xe
c00240f5:	72 f7                	jb     c00240ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00240f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00240fa:	0f ba e2 0f          	bt     edx,0xf
c00240fe:	72 ee                	jb     c00240ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024100:	c3                   	ret    
c0024101:	90                   	nop

c0024102 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024102:	55                   	push   ebp
c0024103:	57                   	push   edi
c0024104:	56                   	push   esi
c0024105:	53                   	push   ebx
c0024106:	83 ec 1c             	sub    esp,0x1c
c0024109:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002410d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024111:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024115:	53                   	push   ebx
c0024116:	89 fd                	mov    ebp,edi
c0024118:	56                   	push   esi
c0024119:	c1 e5 0a             	shl    ebp,0xa
c002411c:	e8 b7 ff ff ff       	call   c00240d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024121:	83 ec 0c             	sub    esp,0xc
c0024124:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002412a:	01 e8                	add    eax,ebp
c002412c:	89 03                	mov    DWORD PTR [ebx],eax
c002412e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024130:	68 00 04 00 00       	push   0x400
c0024135:	6a 00                	push   0x0
c0024137:	50                   	push   eax
c0024138:	e8 43 c6 fd ff       	call   c0000780 <memset>
c002413d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024143:	89 fa                	mov    edx,edi
c0024145:	01 e8                	add    eax,ebp
c0024147:	c1 e7 0d             	shl    edi,0xd
c002414a:	89 03                	mov    DWORD PTR [ebx],eax
c002414c:	c1 e2 08             	shl    edx,0x8
c002414f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024156:	81 c2 00 80 00 00    	add    edx,0x8000
c002415c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024160:	89 d0                	mov    eax,edx
c0024162:	83 c4 1c             	add    esp,0x1c
c0024165:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002416e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024171:	68 00 01 00 00       	push   0x100
c0024176:	6a 00                	push   0x0
c0024178:	50                   	push   eax
c0024179:	e8 02 c6 fd ff       	call   c0000780 <memset>
c002417e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024182:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024188:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002418e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024192:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024195:	83 c4 10             	add    esp,0x10
c0024198:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002419f:	31 ff                	xor    edi,edi
c00241a1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00241a7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00241ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00241b1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00241b7:	83 c5 20             	add    ebp,0x20
c00241ba:	01 f8                	add    eax,edi
c00241bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00241bf:	52                   	push   edx
c00241c0:	68 00 01 00 00       	push   0x100
c00241c5:	6a 00                	push   0x0
c00241c7:	50                   	push   eax
c00241c8:	e8 b3 c5 fd ff       	call   c0000780 <memset>
c00241cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00241d1:	83 c4 10             	add    esp,0x10
c00241d4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00241da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00241e1:	01 f8                	add    eax,edi
c00241e3:	81 c7 00 01 00 00    	add    edi,0x100
c00241e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00241ec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00241f2:	75 b3                	jne    c00241a7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00241f4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00241f8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00241fc:	83 c4 1c             	add    esp,0x1c
c00241ff:	5b                   	pop    ebx
c0024200:	5e                   	pop    esi
c0024201:	5f                   	pop    edi
c0024202:	5d                   	pop    ebp
c0024203:	e9 b0 fe ff ff       	jmp    c00240b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024208 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024208:	55                   	push   ebp
c0024209:	57                   	push   edi
c002420a:	56                   	push   esi
c002420b:	53                   	push   ebx
c002420c:	31 db                	xor    ebx,ebx
c002420e:	83 ec 0c             	sub    esp,0xc
c0024211:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024215:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024219:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002421c:	f7 c7 01 00 00 00    	test   edi,0x1
c0024222:	0f 84 aa 00 00 00    	je     c00242d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024228:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002422c:	89 d8                	mov    eax,ebx
c002422e:	c1 e0 07             	shl    eax,0x7
c0024231:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024238:	55                   	push   ebp
c0024239:	56                   	push   esi
c002423a:	e8 31 fe ff ff       	call   c0024070 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002423f:	5a                   	pop    edx
c0024240:	83 f8 01             	cmp    eax,0x1
c0024243:	59                   	pop    ecx
c0024244:	75 30                	jne    c0024276 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024246:	50                   	push   eax
c0024247:	50                   	push   eax
c0024248:	53                   	push   ebx
c0024249:	68 ed d2 02 c0       	push   0xc002d2ed
c002424e:	e8 70 eb fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024253:	83 c4 0c             	add    esp,0xc
c0024256:	53                   	push   ebx
c0024257:	55                   	push   ebp
c0024258:	56                   	push   esi
c0024259:	e8 a4 fe ff ff       	call   c0024102 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002425e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024265:	e8 e1 b5 fe ff       	call   c000f84b <malloc>
c002426a:	89 c5                	mov    ebp,eax
c002426c:	89 04 24             	mov    DWORD PTR [esp],eax
c002426f:	e8 60 0d 00 00       	call   c0024fd4 <SATA::SATA()>
c0024274:	eb 33                	jmp    c00242a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024276:	83 f8 04             	cmp    eax,0x4
c0024279:	75 47                	jne    c00242c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002427b:	50                   	push   eax
c002427c:	50                   	push   eax
c002427d:	53                   	push   ebx
c002427e:	68 04 d3 02 c0       	push   0xc002d304
c0024283:	e8 3b eb fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024288:	83 c4 0c             	add    esp,0xc
c002428b:	53                   	push   ebx
c002428c:	55                   	push   ebp
c002428d:	56                   	push   esi
c002428e:	e8 6f fe ff ff       	call   c0024102 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024293:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002429a:	e8 ac b5 fe ff       	call   c000f84b <malloc>
c002429f:	89 c5                	mov    ebp,eax
c00242a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00242a4:	e8 d7 10 00 00       	call   c0025380 <SATAPI::SATAPI()>
c00242a9:	5a                   	pop    edx
c00242aa:	59                   	pop    ecx
c00242ab:	55                   	push   ebp
c00242ac:	56                   	push   esi
c00242ad:	e8 3e ff fe ff       	call   c00141f0 <Device::addChild(Device*)>
c00242b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00242b5:	56                   	push   esi
c00242b6:	6a 00                	push   0x0
c00242b8:	53                   	push   ebx
c00242b9:	55                   	push   ebp
c00242ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00242bd:	83 c4 20             	add    esp,0x20
c00242c0:	eb 10                	jmp    c00242d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00242c2:	50                   	push   eax
c00242c3:	50                   	push   eax
c00242c4:	53                   	push   ebx
c00242c5:	68 1d d3 02 c0       	push   0xc002d31d
c00242ca:	e8 f4 ea fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00242cf:	83 c4 10             	add    esp,0x10
c00242d2:	d1 ef                	shr    edi,1
c00242d4:	43                   	inc    ebx
c00242d5:	83 fb 20             	cmp    ebx,0x20
c00242d8:	0f 85 3e ff ff ff    	jne    c002421c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00242de:	83 c4 0c             	add    esp,0xc
c00242e1:	5b                   	pop    ebx
c00242e2:	5e                   	pop    esi
c00242e3:	5f                   	pop    edi
c00242e4:	5d                   	pop    ebp
c00242e5:	c3                   	ret    

c00242e6 <SATABus::open(int, int, void*)>:
c00242e6:	83 ec 14             	sub    esp,0x14
c00242e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242ed:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00242f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00242f9:	52                   	push   edx
c00242fa:	50                   	push   eax
c00242fb:	e8 08 ff ff ff       	call   c0024208 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024300:	31 c0                	xor    eax,eax
c0024302:	83 c4 1c             	add    esp,0x1c
c0024305:	c3                   	ret    

c0024306 <ATA::close(int, int, void*)>:
c0024306:	83 ec 0c             	sub    esp,0xc
c0024309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002430d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024313:	85 c0                	test   eax,eax
c0024315:	74 0c                	je     c0024323 <ATA::close(int, int, void*)+0x1d>
c0024317:	83 ec 0c             	sub    esp,0xc
c002431a:	8b 10                	mov    edx,DWORD PTR [eax]
c002431c:	50                   	push   eax
c002431d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	31 c0                	xor    eax,eax
c0024325:	83 c4 0c             	add    esp,0xc
c0024328:	c3                   	ret    
c0024329:	90                   	nop

c002432a <ATA::powerSaving(PowerSavingLevel)>:
c002432a:	c3                   	ret    
c002432b:	90                   	nop

c002432c <ATA::ATA()>:
c002432c:	83 ec 0c             	sub    esp,0xc
c002432f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024333:	83 ec 04             	sub    esp,0x4
c0024336:	68 00 02 00 00       	push   0x200
c002433b:	68 05 d4 02 c0       	push   0xc002d405
c0024340:	50                   	push   eax
c0024341:	e8 dc 02 ff ff       	call   c0014622 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024346:	83 c4 10             	add    esp,0x10
c0024349:	ba 88 d3 02 c0       	mov    edx,0xc002d388
c002434e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024352:	89 10                	mov    DWORD PTR [eax],edx
c0024354:	90                   	nop
c0024355:	83 c4 0c             	add    esp,0xc
c0024358:	c3                   	ret    
c0024359:	90                   	nop

c002435a <ATA::flush(bool)>:
c002435a:	53                   	push   ebx
c002435b:	83 ec 08             	sub    esp,0x8
c002435e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024367:	19 c0                	sbb    eax,eax
c0024369:	83 e0 fd             	and    eax,0xfffffffd
c002436c:	05 ea 00 00 00       	add    eax,0xea
c0024371:	50                   	push   eax
c0024372:	6a 07                	push   0x7
c0024374:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002437b:	50                   	push   eax
c002437c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024382:	e8 dd ef ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024387:	83 c4 0c             	add    esp,0xc
c002438a:	6a 00                	push   0x0
c002438c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024393:	50                   	push   eax
c0024394:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439a:	e8 71 fb ff ff       	call   c0023f10 <IDE::polling(unsigned char, unsigned int)>
c002439f:	83 c4 18             	add    esp,0x18
c00243a2:	5b                   	pop    ebx
c00243a3:	c3                   	ret    

c00243a4 <ATA::readyForCommand()>:
c00243a4:	56                   	push   esi
c00243a5:	53                   	push   ebx
c00243a6:	31 db                	xor    ebx,ebx
c00243a8:	50                   	push   eax
c00243a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243ad:	50                   	push   eax
c00243ae:	6a 0c                	push   0xc
c00243b0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243b7:	50                   	push   eax
c00243b8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243be:	e8 61 f0 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c00243c3:	83 c4 10             	add    esp,0x10
c00243c6:	a8 88                	test   al,0x88
c00243c8:	74 23                	je     c00243ed <ATA::readyForCommand()+0x49>
c00243ca:	43                   	inc    ebx
c00243cb:	83 fb 63             	cmp    ebx,0x63
c00243ce:	7e dd                	jle    c00243ad <ATA::readyForCommand()+0x9>
c00243d0:	51                   	push   ecx
c00243d1:	51                   	push   ecx
c00243d2:	6a 00                	push   0x0
c00243d4:	68 40 42 0f 00       	push   0xf4240
c00243d9:	e8 a0 a0 ff ff       	call   c001e47e <nanoSleep(unsigned long long)>
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243e7:	75 c4                	jne    c00243ad <ATA::readyForCommand()+0x9>
c00243e9:	31 c0                	xor    eax,eax
c00243eb:	eb 02                	jmp    c00243ef <ATA::readyForCommand()+0x4b>
c00243ed:	b0 01                	mov    al,0x1
c00243ef:	5a                   	pop    edx
c00243f0:	5b                   	pop    ebx
c00243f1:	5e                   	pop    esi
c00243f2:	c3                   	ret    
c00243f3:	90                   	nop

c00243f4 <ATA::access(unsigned long long, int, void*, bool)>:
c00243f4:	55                   	push   ebp
c00243f5:	57                   	push   edi
c00243f6:	56                   	push   esi
c00243f7:	53                   	push   ebx
c00243f8:	83 ec 2c             	sub    esp,0x2c
c00243fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00243ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024403:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024407:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002440b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002440f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024413:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024417:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002441d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024421:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024427:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002442b:	c1 e0 06             	shl    eax,0x6
c002442e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024436:	74 5d                	je     c0024495 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024438:	89 fa                	mov    edx,edi
c002443a:	89 f0                	mov    eax,esi
c002443c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024440:	c1 ea 1c             	shr    edx,0x1c
c0024443:	89 d1                	mov    ecx,edx
c0024445:	09 c1                	or     ecx,eax
c0024447:	74 25                	je     c002446e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024449:	31 ed                	xor    ebp,ebp
c002444b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024452:	89 fa                	mov    edx,edi
c0024454:	89 f0                	mov    eax,esi
c0024456:	0f ad d0             	shrd   eax,edx,cl
c0024459:	d3 ea                	shr    edx,cl
c002445b:	f6 c1 20             	test   cl,0x20
c002445e:	74 02                	je     c0024462 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024460:	89 d0                	mov    eax,edx
c0024462:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024466:	45                   	inc    ebp
c0024467:	83 fd 06             	cmp    ebp,0x6
c002446a:	75 df                	jne    c002444b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002446c:	eb 76                	jmp    c00244e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002446e:	89 f0                	mov    eax,esi
c0024470:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024475:	89 fa                	mov    edx,edi
c0024477:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002447e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024482:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024487:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002448b:	c1 ee 18             	shr    esi,0x18
c002448e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024493:	eb 56                	jmp    c00244eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024495:	6a 00                	push   0x0
c0024497:	6a 3f                	push   0x3f
c0024499:	57                   	push   edi
c002449a:	56                   	push   esi
c002449b:	e8 94 29 00 00       	call   c0026e34 <__umoddi3>
c00244a0:	83 c4 10             	add    esp,0x10
c00244a3:	40                   	inc    eax
c00244a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00244a8:	6a 00                	push   0x0
c00244aa:	68 f0 03 00 00       	push   0x3f0
c00244af:	57                   	push   edi
c00244b0:	56                   	push   esi
c00244b1:	e8 7e 28 00 00       	call   c0026d34 <__udivdi3>
c00244b6:	83 c4 10             	add    esp,0x10
c00244b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00244be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00244c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00244ca:	6a 00                	push   0x0
c00244cc:	6a 3f                	push   0x3f
c00244ce:	57                   	push   edi
c00244cf:	56                   	push   esi
c00244d0:	e8 5f 28 00 00       	call   c0026d34 <__udivdi3>
c00244d5:	83 c4 10             	add    esp,0x10
c00244d8:	89 c6                	mov    esi,eax
c00244da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00244df:	83 e6 0f             	and    esi,0xf
c00244e2:	eb 07                	jmp    c00244eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00244e4:	31 f6                	xor    esi,esi
c00244e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00244eb:	bf 01 00 00 00       	mov    edi,0x1
c00244f0:	50                   	push   eax
c00244f1:	6a 00                	push   0x0
c00244f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244fa:	50                   	push   eax
c00244fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00244ff:	e8 6c f0 ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c0024504:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024507:	e8 98 fe ff ff       	call   c00243a4 <ATA::readyForCommand()>
c002450c:	83 c4 10             	add    esp,0x10
c002450f:	84 c0                	test   al,al
c0024511:	0f 84 5a 02 00 00    	je     c0024771 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024517:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002451d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024523:	c1 e0 04             	shl    eax,0x4
c0024526:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002452d:	09 c6                	or     esi,eax
c002452f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024534:	75 05                	jne    c002453b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024536:	83 ce a0             	or     esi,0xffffffa0
c0024539:	eb 03                	jmp    c002453e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002453b:	83 ce e0             	or     esi,0xffffffe0
c002453e:	89 f0                	mov    eax,esi
c0024540:	0f b6 f0             	movzx  esi,al
c0024543:	56                   	push   esi
c0024544:	6a 06                	push   0x6
c0024546:	51                   	push   ecx
c0024547:	52                   	push   edx
c0024548:	e8 17 ee ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002454d:	83 c4 10             	add    esp,0x10
c0024550:	6a 00                	push   0x0
c0024552:	6a 01                	push   0x1
c0024554:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002455b:	50                   	push   eax
c002455c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024562:	e8 fd ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024567:	83 c4 10             	add    esp,0x10
c002456a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002456f:	75 6e                	jne    c00245df <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024571:	6a 00                	push   0x0
c0024573:	6a 08                	push   0x8
c0024575:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002457c:	50                   	push   eax
c002457d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024583:	e8 dc ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024588:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002458d:	50                   	push   eax
c002458e:	6a 09                	push   0x9
c0024590:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024597:	50                   	push   eax
c0024598:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002459e:	e8 c1 ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a3:	83 c4 20             	add    esp,0x20
c00245a6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00245ab:	50                   	push   eax
c00245ac:	6a 0a                	push   0xa
c00245ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245b5:	50                   	push   eax
c00245b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245bc:	e8 a3 ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00245c6:	50                   	push   eax
c00245c7:	6a 0b                	push   0xb
c00245c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d0:	50                   	push   eax
c00245d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245d7:	e8 88 ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245dc:	83 c4 20             	add    esp,0x20
c00245df:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00245e4:	50                   	push   eax
c00245e5:	6a 02                	push   0x2
c00245e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ee:	50                   	push   eax
c00245ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245f5:	e8 6a ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245fa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00245ff:	50                   	push   eax
c0024600:	6a 03                	push   0x3
c0024602:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024609:	50                   	push   eax
c002460a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024610:	e8 4f ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024615:	83 c4 20             	add    esp,0x20
c0024618:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002461d:	50                   	push   eax
c002461e:	6a 04                	push   0x4
c0024620:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024627:	50                   	push   eax
c0024628:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002462e:	e8 31 ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024633:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024638:	50                   	push   eax
c0024639:	6a 05                	push   0x5
c002463b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024642:	50                   	push   eax
c0024643:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024649:	e8 16 ed ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464e:	83 c4 20             	add    esp,0x20
c0024651:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024656:	0f 94 c0             	sete   al
c0024659:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002465e:	74 09                	je     c0024669 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024660:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024667:	eb 07                	jmp    c0024670 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024669:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024670:	0f b6 c0             	movzx  eax,al
c0024673:	50                   	push   eax
c0024674:	6a 07                	push   0x7
c0024676:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002467d:	50                   	push   eax
c002467e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024684:	e8 db ec ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024689:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002468d:	83 c4 10             	add    esp,0x10
c0024690:	85 f6                	test   esi,esi
c0024692:	0f 84 ba 00 00 00    	je     c0024752 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024698:	50                   	push   eax
c0024699:	6a 01                	push   0x1
c002469b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246a2:	50                   	push   eax
c00246a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a9:	e8 62 f8 ff ff       	call   c0023f10 <IDE::polling(unsigned char, unsigned int)>
c00246ae:	83 c4 10             	add    esp,0x10
c00246b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00246b7:	84 c0                	test   al,al
c00246b9:	74 2c                	je     c00246e7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00246bb:	0f b6 f8             	movzx  edi,al
c00246be:	0f b6 d2             	movzx  edx,dl
c00246c1:	57                   	push   edi
c00246c2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00246c9:	50                   	push   eax
c00246ca:	52                   	push   edx
c00246cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246d1:	e8 a4 f6 ff ff       	call   c0023d7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00246d6:	c7 04 24 60 d3 02 c0 	mov    DWORD PTR [esp],0xc002d360
c00246dd:	e8 e1 e6 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00246e2:	e9 87 00 00 00       	jmp    c002476e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00246e7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00246ec:	74 33                	je     c0024721 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00246ee:	31 ed                	xor    ebp,ebp
c00246f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00246f4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00246f8:	50                   	push   eax
c00246f9:	50                   	push   eax
c00246fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024701:	50                   	push   eax
c0024702:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024708:	e8 45 ec ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c002470d:	89 c2                	mov    edx,eax
c002470f:	89 f8                	mov    eax,edi
c0024711:	66 ef                	out    dx,ax
c0024713:	45                   	inc    ebp
c0024714:	83 c4 10             	add    esp,0x10
c0024717:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002471d:	75 d1                	jne    c00246f0 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002471f:	eb 23                	jmp    c0024744 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024721:	0f b6 d2             	movzx  edx,dl
c0024724:	51                   	push   ecx
c0024725:	51                   	push   ecx
c0024726:	52                   	push   edx
c0024727:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002472d:	e8 20 ec ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c0024732:	b9 00 01 00 00       	mov    ecx,0x100
c0024737:	89 c2                	mov    edx,eax
c0024739:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002473d:	fc                   	cld    
c002473e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024741:	83 c4 10             	add    esp,0x10
c0024744:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002474c:	4e                   	dec    esi
c002474d:	e9 3e ff ff ff       	jmp    c0024690 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024752:	31 ff                	xor    edi,edi
c0024754:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024759:	74 16                	je     c0024771 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002475b:	50                   	push   eax
c002475c:	50                   	push   eax
c002475d:	31 c0                	xor    eax,eax
c002475f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024764:	0f 94 c0             	sete   al
c0024767:	50                   	push   eax
c0024768:	53                   	push   ebx
c0024769:	e8 ec fb ff ff       	call   c002435a <ATA::flush(bool)>
c002476e:	83 c4 10             	add    esp,0x10
c0024771:	83 c4 2c             	add    esp,0x2c
c0024774:	89 f8                	mov    eax,edi
c0024776:	5b                   	pop    ebx
c0024777:	5e                   	pop    esi
c0024778:	5f                   	pop    edi
c0024779:	5d                   	pop    ebp
c002477a:	c3                   	ret    
c002477b:	90                   	nop

c002477c <ATA::read(unsigned long long, int, void*)>:
c002477c:	57                   	push   edi
c002477d:	b8 04 00 00 00       	mov    eax,0x4
c0024782:	56                   	push   esi
c0024783:	53                   	push   ebx
c0024784:	83 ec 10             	sub    esp,0x10
c0024787:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002478b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002478f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024792:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024796:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002479a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00247a0:	77 3b                	ja     c00247dd <ATA::read(unsigned long long, int, void*)+0x61>
c00247a2:	b8 06 00 00 00       	mov    eax,0x6
c00247a7:	85 d2                	test   edx,edx
c00247a9:	74 32                	je     c00247dd <ATA::read(unsigned long long, int, void*)+0x61>
c00247ab:	50                   	push   eax
c00247ac:	50                   	push   eax
c00247ad:	6a 00                	push   0x0
c00247af:	52                   	push   edx
c00247b0:	53                   	push   ebx
c00247b1:	57                   	push   edi
c00247b2:	56                   	push   esi
c00247b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00247b7:	e8 38 fc ff ff       	call   c00243f4 <ATA::access(unsigned long long, int, void*, bool)>
c00247bc:	83 c4 20             	add    esp,0x20
c00247bf:	85 c0                	test   eax,eax
c00247c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00247c5:	75 11                	jne    c00247d8 <ATA::read(unsigned long long, int, void*)+0x5c>
c00247c7:	01 1d 08 2d 03 c0    	add    DWORD PTR ds:0xc0032d08,ebx
c00247cd:	e8 26 c1 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c00247d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247d6:	eb 05                	jmp    c00247dd <ATA::read(unsigned long long, int, void*)+0x61>
c00247d8:	b8 01 00 00 00       	mov    eax,0x1
c00247dd:	83 c4 10             	add    esp,0x10
c00247e0:	5b                   	pop    ebx
c00247e1:	5e                   	pop    esi
c00247e2:	5f                   	pop    edi
c00247e3:	c3                   	ret    

c00247e4 <ATA::write(unsigned long long, int, void*)>:
c00247e4:	57                   	push   edi
c00247e5:	b8 04 00 00 00       	mov    eax,0x4
c00247ea:	56                   	push   esi
c00247eb:	53                   	push   ebx
c00247ec:	83 ec 10             	sub    esp,0x10
c00247ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00247f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00247f7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00247fa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00247fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024802:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024808:	77 3b                	ja     c0024845 <ATA::write(unsigned long long, int, void*)+0x61>
c002480a:	b8 06 00 00 00       	mov    eax,0x6
c002480f:	85 d2                	test   edx,edx
c0024811:	74 32                	je     c0024845 <ATA::write(unsigned long long, int, void*)+0x61>
c0024813:	50                   	push   eax
c0024814:	50                   	push   eax
c0024815:	6a 01                	push   0x1
c0024817:	52                   	push   edx
c0024818:	53                   	push   ebx
c0024819:	57                   	push   edi
c002481a:	56                   	push   esi
c002481b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002481f:	e8 d0 fb ff ff       	call   c00243f4 <ATA::access(unsigned long long, int, void*, bool)>
c0024824:	83 c4 20             	add    esp,0x20
c0024827:	85 c0                	test   eax,eax
c0024829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002482d:	75 11                	jne    c0024840 <ATA::write(unsigned long long, int, void*)+0x5c>
c002482f:	01 1d 04 2d 03 c0    	add    DWORD PTR ds:0xc0032d04,ebx
c0024835:	e8 be c0 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c002483a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002483e:	eb 05                	jmp    c0024845 <ATA::write(unsigned long long, int, void*)+0x61>
c0024840:	b8 01 00 00 00       	mov    eax,0x1
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	5b                   	pop    ebx
c0024849:	5e                   	pop    esi
c002484a:	5f                   	pop    edi
c002484b:	c3                   	ret    

c002484c <ATA::detectCHS()>:
c002484c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024850:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024856:	c1 e0 06             	shl    eax,0x6
c0024859:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002485f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024869:	c7 44 24 04 6b d3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d36b
c0024871:	e9 e1 5d ff ff       	jmp    c001a657 <Krnl::panic(char const*)>

c0024876 <ATA::open(int, int, void*)>:
c0024876:	53                   	push   ebx
c0024877:	83 ec 08             	sub    esp,0x8
c002487a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002487e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024886:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002488c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024892:	c1 e0 06             	shl    eax,0x6
c0024895:	01 d0                	add    eax,edx
c0024897:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002489e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00248a4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00248ab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00248b5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00248bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00248c2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00248c9:	75 0c                	jne    c00248d7 <ATA::open(int, int, void*)+0x61>
c00248cb:	83 ec 0c             	sub    esp,0xc
c00248ce:	53                   	push   ebx
c00248cf:	e8 78 ff ff ff       	call   c002484c <ATA::detectCHS()>
c00248d4:	83 c4 10             	add    esp,0x10
c00248d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00248dd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00248e3:	c1 e0 06             	shl    eax,0x6
c00248e6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00248ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00248f7:	d1 e8                	shr    eax,1
c00248f9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00248ff:	6a 04                	push   0x4
c0024901:	6a 0c                	push   0xc
c0024903:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002490a:	50                   	push   eax
c002490b:	52                   	push   edx
c002490c:	e8 53 ea ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024911:	90                   	nop
c0024912:	90                   	nop
c0024913:	6a 00                	push   0x0
c0024915:	6a 0c                	push   0xc
c0024917:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002491e:	50                   	push   eax
c002491f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024925:	e8 3a ea ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002492a:	83 c4 14             	add    esp,0x14
c002492d:	53                   	push   ebx
c002492e:	e8 57 fd fe ff       	call   c001468a <PhysicalDisk::startCache()>
c0024933:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024936:	e8 8d 1f ff ff       	call   c00168c8 <createPartitionsForDisk(PhysicalDisk*)>
c002493b:	31 c0                	xor    eax,eax
c002493d:	83 c4 18             	add    esp,0x18
c0024940:	5b                   	pop    ebx
c0024941:	c3                   	ret    

c0024942 <ATAPI::write(unsigned long long, int, void*)>:
c0024942:	b8 03 00 00 00       	mov    eax,0x3
c0024947:	c3                   	ret    

c0024948 <ATAPI::close(int, int, void*)>:
c0024948:	83 ec 0c             	sub    esp,0xc
c002494b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002494f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024955:	85 c0                	test   eax,eax
c0024957:	74 0c                	je     c0024965 <ATAPI::close(int, int, void*)+0x1d>
c0024959:	83 ec 0c             	sub    esp,0xc
c002495c:	8b 10                	mov    edx,DWORD PTR [eax]
c002495e:	50                   	push   eax
c002495f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024962:	83 c4 10             	add    esp,0x10
c0024965:	31 c0                	xor    eax,eax
c0024967:	83 c4 0c             	add    esp,0xc
c002496a:	c3                   	ret    
c002496b:	90                   	nop

c002496c <ATAPI::ATAPI()>:
c002496c:	83 ec 0c             	sub    esp,0xc
c002496f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024973:	83 ec 04             	sub    esp,0x4
c0024976:	68 00 08 00 00       	push   0x800
c002497b:	68 a5 d4 02 c0       	push   0xc002d4a5
c0024980:	50                   	push   eax
c0024981:	e8 9c fc fe ff       	call   c0014622 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024986:	83 c4 10             	add    esp,0x10
c0024989:	ba c0 d3 02 c0       	mov    edx,0xc002d3c0
c002498e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024992:	89 10                	mov    DWORD PTR [eax],edx
c0024994:	90                   	nop
c0024995:	83 c4 0c             	add    esp,0xc
c0024998:	c3                   	ret    
c0024999:	90                   	nop

c002499a <ATAPI::readyForCommand()>:
c002499a:	56                   	push   esi
c002499b:	53                   	push   ebx
c002499c:	31 db                	xor    ebx,ebx
c002499e:	50                   	push   eax
c002499f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00249a3:	50                   	push   eax
c00249a4:	6a 0c                	push   0xc
c00249a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00249ad:	50                   	push   eax
c00249ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00249b4:	e8 6b ea ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c00249b9:	83 c4 10             	add    esp,0x10
c00249bc:	a8 88                	test   al,0x88
c00249be:	74 23                	je     c00249e3 <ATAPI::readyForCommand()+0x49>
c00249c0:	43                   	inc    ebx
c00249c1:	83 fb 63             	cmp    ebx,0x63
c00249c4:	7e dd                	jle    c00249a3 <ATAPI::readyForCommand()+0x9>
c00249c6:	51                   	push   ecx
c00249c7:	51                   	push   ecx
c00249c8:	6a 00                	push   0x0
c00249ca:	68 40 42 0f 00       	push   0xf4240
c00249cf:	e8 aa 9a ff ff       	call   c001e47e <nanoSleep(unsigned long long)>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00249dd:	75 c4                	jne    c00249a3 <ATAPI::readyForCommand()+0x9>
c00249df:	31 c0                	xor    eax,eax
c00249e1:	eb 02                	jmp    c00249e5 <ATAPI::readyForCommand()+0x4b>
c00249e3:	b0 01                	mov    al,0x1
c00249e5:	5a                   	pop    edx
c00249e6:	5b                   	pop    ebx
c00249e7:	5e                   	pop    esi
c00249e8:	c3                   	ret    
c00249e9:	90                   	nop

c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00249ea:	55                   	push   ebp
c00249eb:	57                   	push   edi
c00249ec:	56                   	push   esi
c00249ed:	53                   	push   ebx
c00249ee:	83 ec 20             	sub    esp,0x20
c00249f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00249f5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00249f9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00249fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a05:	6a 01                	push   0x1
c0024a07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a0e:	50                   	push   eax
c0024a0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a15:	e8 56 eb ff ff       	call   c0023570 <IDE::enableIRQs(unsigned char, bool)>
c0024a1a:	5e                   	pop    esi
c0024a1b:	58                   	pop    eax
c0024a1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a23:	50                   	push   eax
c0024a24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a2a:	e8 0f e9 ff ff       	call   c002333e <IDE::prepareInterrupt(unsigned char)>
c0024a2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024a32:	e8 63 ff ff ff       	call   c002499a <ATAPI::readyForCommand()>
c0024a37:	83 c4 10             	add    esp,0x10
c0024a3a:	84 c0                	test   al,al
c0024a3c:	75 0a                	jne    c0024a48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024a3e:	bb 01 00 00 00       	mov    ebx,0x1
c0024a43:	e9 57 02 00 00       	jmp    c0024c9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a48:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024a4e:	c1 e0 04             	shl    eax,0x4
c0024a51:	0f b6 c0             	movzx  eax,al
c0024a54:	50                   	push   eax
c0024a55:	6a 06                	push   0x6
c0024a57:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a5e:	50                   	push   eax
c0024a5f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a65:	e8 fa e8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a6a:	6a 00                	push   0x0
c0024a6c:	6a 01                	push   0x1
c0024a6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a75:	50                   	push   eax
c0024a76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a7c:	e8 e3 e8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a81:	83 c4 20             	add    esp,0x20
c0024a84:	0f b6 c3             	movzx  eax,bl
c0024a87:	0f b6 df             	movzx  ebx,bh
c0024a8a:	50                   	push   eax
c0024a8b:	6a 04                	push   0x4
c0024a8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a94:	50                   	push   eax
c0024a95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a9b:	e8 c4 e8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa0:	53                   	push   ebx
c0024aa1:	6a 05                	push   0x5
c0024aa3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024aaa:	50                   	push   eax
c0024aab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ab1:	e8 ae e8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab6:	83 c4 20             	add    esp,0x20
c0024ab9:	68 a0 00 00 00       	push   0xa0
c0024abe:	6a 07                	push   0x7
c0024ac0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ac7:	50                   	push   eax
c0024ac8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ace:	e8 91 e8 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad3:	83 c4 0c             	add    esp,0xc
c0024ad6:	6a 01                	push   0x1
c0024ad8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024adf:	50                   	push   eax
c0024ae0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ae6:	e8 25 f4 ff ff       	call   c0023f10 <IDE::polling(unsigned char, unsigned int)>
c0024aeb:	83 c4 10             	add    esp,0x10
c0024aee:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024af4:	84 c0                	test   al,al
c0024af6:	74 23                	je     c0024b1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024af8:	0f b6 d8             	movzx  ebx,al
c0024afb:	0f b6 d2             	movzx  edx,dl
c0024afe:	53                   	push   ebx
c0024aff:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024b06:	50                   	push   eax
c0024b07:	52                   	push   edx
c0024b08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b0e:	e8 67 f2 ff ff       	call   c0023d7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b13:	83 c4 10             	add    esp,0x10
c0024b16:	e9 84 01 00 00       	jmp    c0024c9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b1b:	0f b6 d2             	movzx  edx,dl
c0024b1e:	53                   	push   ebx
c0024b1f:	53                   	push   ebx
c0024b20:	52                   	push   edx
c0024b21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b27:	e8 26 e8 ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c0024b2c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024b30:	b9 06 00 00 00       	mov    ecx,0x6
c0024b35:	89 c2                	mov    edx,eax
c0024b37:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024b3a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024b3e:	83 c4 10             	add    esp,0x10
c0024b41:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024b47:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b4e:	85 db                	test   ebx,ebx
c0024b50:	0f 84 ec 00 00 00    	je     c0024c42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024b56:	51                   	push   ecx
c0024b57:	51                   	push   ecx
c0024b58:	52                   	push   edx
c0024b59:	50                   	push   eax
c0024b5a:	e8 73 e9 ff ff       	call   c00234d2 <IDE::waitInterrupt(unsigned char)>
c0024b5f:	83 c4 10             	add    esp,0x10
c0024b62:	84 c0                	test   al,al
c0024b64:	0f 84 d4 fe ff ff    	je     c0024a3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024b6a:	56                   	push   esi
c0024b6b:	56                   	push   esi
c0024b6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b73:	50                   	push   eax
c0024b74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b7a:	e8 bf e7 ff ff       	call   c002333e <IDE::prepareInterrupt(unsigned char)>
c0024b7f:	83 c4 0c             	add    esp,0xc
c0024b82:	6a 04                	push   0x4
c0024b84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b8b:	50                   	push   eax
c0024b8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b92:	e8 8d e8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0024b97:	83 c4 0c             	add    esp,0xc
c0024b9a:	89 c6                	mov    esi,eax
c0024b9c:	6a 05                	push   0x5
c0024b9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ba5:	50                   	push   eax
c0024ba6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bac:	e8 73 e8 ff ff       	call   c0023424 <IDE::read(unsigned char, unsigned char)>
c0024bb1:	89 f1                	mov    ecx,esi
c0024bb3:	0f b6 c0             	movzx  eax,al
c0024bb6:	0f b6 f1             	movzx  esi,cl
c0024bb9:	c1 e0 08             	shl    eax,0x8
c0024bbc:	09 c6                	or     esi,eax
c0024bbe:	d1 fe                	sar    esi,1
c0024bc0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024bc4:	83 c4 10             	add    esp,0x10
c0024bc7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024bcc:	74 41                	je     c0024c0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024bce:	31 c9                	xor    ecx,ecx
c0024bd0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024bd6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024bdd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024be1:	75 0a                	jne    c0024bed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024be3:	01 c9                	add    ecx,ecx
c0024be5:	01 cd                	add    ebp,ecx
c0024be7:	4b                   	dec    ebx
c0024be8:	e9 54 ff ff ff       	jmp    c0024b41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024bed:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024bf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024bf6:	51                   	push   ecx
c0024bf7:	51                   	push   ecx
c0024bf8:	52                   	push   edx
c0024bf9:	50                   	push   eax
c0024bfa:	e8 53 e7 ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c0024bff:	89 c2                	mov    edx,eax
c0024c01:	89 f0                	mov    eax,esi
c0024c03:	66 ef                	out    dx,ax
c0024c05:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024c09:	83 c4 10             	add    esp,0x10
c0024c0c:	41                   	inc    ecx
c0024c0d:	eb c1                	jmp    c0024bd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024c0f:	31 f6                	xor    esi,esi
c0024c11:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c17:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c1e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024c22:	75 06                	jne    c0024c2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024c24:	01 f6                	add    esi,esi
c0024c26:	01 f5                	add    ebp,esi
c0024c28:	eb bd                	jmp    c0024be7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024c2a:	51                   	push   ecx
c0024c2b:	51                   	push   ecx
c0024c2c:	52                   	push   edx
c0024c2d:	50                   	push   eax
c0024c2e:	e8 1f e7 ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c0024c33:	89 c2                	mov    edx,eax
c0024c35:	66 ed                	in     ax,dx
c0024c37:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024c3c:	83 c4 10             	add    esp,0x10
c0024c3f:	46                   	inc    esi
c0024c40:	eb cf                	jmp    c0024c11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024c42:	51                   	push   ecx
c0024c43:	51                   	push   ecx
c0024c44:	52                   	push   edx
c0024c45:	50                   	push   eax
c0024c46:	e8 87 e8 ff ff       	call   c00234d2 <IDE::waitInterrupt(unsigned char)>
c0024c4b:	83 c4 10             	add    esp,0x10
c0024c4e:	84 c0                	test   al,al
c0024c50:	0f 84 e8 fd ff ff    	je     c0024a3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c56:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024c5b:	52                   	push   edx
c0024c5c:	52                   	push   edx
c0024c5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c64:	50                   	push   eax
c0024c65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c6b:	e8 ce e6 ff ff       	call   c002333e <IDE::prepareInterrupt(unsigned char)>
c0024c70:	83 c4 10             	add    esp,0x10
c0024c73:	50                   	push   eax
c0024c74:	50                   	push   eax
c0024c75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c7c:	50                   	push   eax
c0024c7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c83:	e8 ca e6 ff ff       	call   c0023352 <IDE::getBase(unsigned char)>
c0024c88:	8d 50 07             	lea    edx,[eax+0x7]
c0024c8b:	ec                   	in     al,dx
c0024c8c:	83 c4 10             	add    esp,0x10
c0024c8f:	a8 88                	test   al,0x88
c0024c91:	74 0a                	je     c0024c9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024c93:	4b                   	dec    ebx
c0024c94:	75 dd                	jne    c0024c73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024c96:	bb 02 00 00 00       	mov    ebx,0x2
c0024c9b:	eb 02                	jmp    c0024c9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024c9d:	31 db                	xor    ebx,ebx
c0024c9f:	83 c4 1c             	add    esp,0x1c
c0024ca2:	89 d8                	mov    eax,ebx
c0024ca4:	5b                   	pop    ebx
c0024ca5:	5e                   	pop    esi
c0024ca6:	5f                   	pop    edi
c0024ca7:	5d                   	pop    ebp
c0024ca8:	c3                   	ret    
c0024ca9:	90                   	nop

c0024caa <ATAPI::diskRemoved()>:
c0024caa:	83 ec 18             	sub    esp,0x18
c0024cad:	68 b1 d4 02 c0       	push   0xc002d4b1
c0024cb2:	e8 0c e1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cbb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024cc2:	83 c4 1c             	add    esp,0x1c
c0024cc5:	c3                   	ret    

c0024cc6 <ATAPI::eject()>:
c0024cc6:	57                   	push   edi
c0024cc7:	b9 03 00 00 00       	mov    ecx,0x3
c0024ccc:	53                   	push   ebx
c0024ccd:	83 ec 14             	sub    esp,0x14
c0024cd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024cd4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024cd8:	fc                   	cld    
c0024cd9:	31 c0                	xor    eax,eax
c0024cdb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024cdd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ce2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ce7:	50                   	push   eax
c0024ce8:	50                   	push   eax
c0024ce9:	6a 00                	push   0x0
c0024ceb:	6a 00                	push   0x0
c0024ced:	6a 00                	push   0x0
c0024cef:	6a 02                	push   0x2
c0024cf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024cf5:	50                   	push   eax
c0024cf6:	53                   	push   ebx
c0024cf7:	e8 ee fc ff ff       	call   c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024cfc:	83 c4 14             	add    esp,0x14
c0024cff:	53                   	push   ebx
c0024d00:	e8 a5 ff ff ff       	call   c0024caa <ATAPI::diskRemoved()>
c0024d05:	83 c4 24             	add    esp,0x24
c0024d08:	31 c0                	xor    eax,eax
c0024d0a:	5b                   	pop    ebx
c0024d0b:	5f                   	pop    edi
c0024d0c:	c3                   	ret    
c0024d0d:	90                   	nop

c0024d0e <ATAPI::diskInserted()>:
c0024d0e:	53                   	push   ebx
c0024d0f:	83 ec 14             	sub    esp,0x14
c0024d12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024d16:	68 c8 d4 02 c0       	push   0xc002d4c8
c0024d1b:	e8 a3 e0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024d20:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024d27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d2a:	e8 5b f9 fe ff       	call   c001468a <PhysicalDisk::startCache()>
c0024d2f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024d33:	83 c4 18             	add    esp,0x18
c0024d36:	5b                   	pop    ebx
c0024d37:	e9 8c 1b ff ff       	jmp    c00168c8 <createPartitionsForDisk(PhysicalDisk*)>

c0024d3c <ATAPI::detectMedia()>:
c0024d3c:	56                   	push   esi
c0024d3d:	53                   	push   ebx
c0024d3e:	83 ec 28             	sub    esp,0x28
c0024d41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d45:	6a 0c                	push   0xc
c0024d47:	6a 00                	push   0x0
c0024d49:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024d4d:	56                   	push   esi
c0024d4e:	e8 2d ba fd ff       	call   c0000780 <memset>
c0024d53:	58                   	pop    eax
c0024d54:	5a                   	pop    edx
c0024d55:	6a 00                	push   0x0
c0024d57:	6a 00                	push   0x0
c0024d59:	6a 00                	push   0x0
c0024d5b:	6a 00                	push   0x0
c0024d5d:	56                   	push   esi
c0024d5e:	53                   	push   ebx
c0024d5f:	e8 86 fc ff ff       	call   c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d64:	83 c4 1c             	add    esp,0x1c
c0024d67:	6a 0c                	push   0xc
c0024d69:	6a 00                	push   0x0
c0024d6b:	56                   	push   esi
c0024d6c:	e8 0f ba fd ff       	call   c0000780 <memset>
c0024d71:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024d76:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024d7b:	59                   	pop    ecx
c0024d7c:	58                   	pop    eax
c0024d7d:	6a 01                	push   0x1
c0024d7f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024d83:	50                   	push   eax
c0024d84:	6a 00                	push   0x0
c0024d86:	6a 12                	push   0x12
c0024d88:	56                   	push   esi
c0024d89:	53                   	push   ebx
c0024d8a:	e8 5b fc ff ff       	call   c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d8f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024d93:	83 c4 20             	add    esp,0x20
c0024d96:	83 e0 7f             	and    eax,0x7f
c0024d99:	3c 70                	cmp    al,0x70
c0024d9b:	74 15                	je     c0024db2 <ATAPI::detectMedia()+0x76>
c0024d9d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024da4:	75 0c                	jne    c0024db2 <ATAPI::detectMedia()+0x76>
c0024da6:	83 ec 0c             	sub    esp,0xc
c0024da9:	53                   	push   ebx
c0024daa:	e8 5f ff ff ff       	call   c0024d0e <ATAPI::diskInserted()>
c0024daf:	83 c4 10             	add    esp,0x10
c0024db2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024db6:	83 e0 0f             	and    eax,0xf
c0024db9:	3c 02                	cmp    al,0x2
c0024dbb:	75 1b                	jne    c0024dd8 <ATAPI::detectMedia()+0x9c>
c0024dbd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024dc2:	75 2d                	jne    c0024df1 <ATAPI::detectMedia()+0xb5>
c0024dc4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024dcb:	74 24                	je     c0024df1 <ATAPI::detectMedia()+0xb5>
c0024dcd:	83 ec 0c             	sub    esp,0xc
c0024dd0:	53                   	push   ebx
c0024dd1:	e8 d4 fe ff ff       	call   c0024caa <ATAPI::diskRemoved()>
c0024dd6:	eb 16                	jmp    c0024dee <ATAPI::detectMedia()+0xb2>
c0024dd8:	84 c0                	test   al,al
c0024dda:	75 15                	jne    c0024df1 <ATAPI::detectMedia()+0xb5>
c0024ddc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024de3:	75 0c                	jne    c0024df1 <ATAPI::detectMedia()+0xb5>
c0024de5:	83 ec 0c             	sub    esp,0xc
c0024de8:	53                   	push   ebx
c0024de9:	e8 20 ff ff ff       	call   c0024d0e <ATAPI::diskInserted()>
c0024dee:	83 c4 10             	add    esp,0x10
c0024df1:	83 c4 24             	add    esp,0x24
c0024df4:	5b                   	pop    ebx
c0024df5:	5e                   	pop    esi
c0024df6:	c3                   	ret    
c0024df7:	90                   	nop

c0024df8 <ATAPI::open(int, int, void*)>:
c0024df8:	53                   	push   ebx
c0024df9:	83 ec 08             	sub    esp,0x8
c0024dfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e08:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e0e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e14:	c1 e0 06             	shl    eax,0x6
c0024e17:	01 d0                	add    eax,edx
c0024e19:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024e20:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024e26:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024e2d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024e37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024e3d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024e44:	6a 04                	push   0x4
c0024e46:	6a 0c                	push   0xc
c0024e48:	51                   	push   ecx
c0024e49:	52                   	push   edx
c0024e4a:	e8 15 e5 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e4f:	90                   	nop
c0024e50:	90                   	nop
c0024e51:	6a 00                	push   0x0
c0024e53:	6a 0c                	push   0xc
c0024e55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e5c:	50                   	push   eax
c0024e5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e63:	e8 fc e4 ff ff       	call   c0023364 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e68:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024e6f:	83 c4 14             	add    esp,0x14
c0024e72:	53                   	push   ebx
c0024e73:	e8 c4 fe ff ff       	call   c0024d3c <ATAPI::detectMedia()>
c0024e78:	31 c0                	xor    eax,eax
c0024e7a:	83 c4 18             	add    esp,0x18
c0024e7d:	5b                   	pop    ebx
c0024e7e:	c3                   	ret    
c0024e7f:	90                   	nop

c0024e80 <ATAPI::read(unsigned long long, int, void*)>:
c0024e80:	55                   	push   ebp
c0024e81:	57                   	push   edi
c0024e82:	56                   	push   esi
c0024e83:	53                   	push   ebx
c0024e84:	83 ec 1c             	sub    esp,0x1c
c0024e87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024e8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e8f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e93:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024e9a:	74 41                	je     c0024edd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024e9c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ea0:	b9 03 00 00 00       	mov    ecx,0x3
c0024ea5:	fc                   	cld    
c0024ea6:	31 c0                	xor    eax,eax
c0024ea8:	86 fb                	xchg   bl,bh
c0024eaa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024eac:	c1 c3 10             	rol    ebx,0x10
c0024eaf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024eb4:	89 e8                	mov    eax,ebp
c0024eb6:	86 fb                	xchg   bl,bh
c0024eb8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024ebc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024ec0:	50                   	push   eax
c0024ec1:	50                   	push   eax
c0024ec2:	55                   	push   ebp
c0024ec3:	c1 e5 0b             	shl    ebp,0xb
c0024ec6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024eca:	6a 00                	push   0x0
c0024ecc:	55                   	push   ebp
c0024ecd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ed1:	50                   	push   eax
c0024ed2:	56                   	push   esi
c0024ed3:	e8 12 fb ff ff       	call   c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ed8:	83 c4 20             	add    esp,0x20
c0024edb:	eb 1a                	jmp    c0024ef7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024edd:	83 ec 0c             	sub    esp,0xc
c0024ee0:	56                   	push   esi
c0024ee1:	e8 56 fe ff ff       	call   c0024d3c <ATAPI::detectMedia()>
c0024ee6:	83 c4 10             	add    esp,0x10
c0024ee9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ef0:	75 aa                	jne    c0024e9c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024ef2:	b8 02 00 00 00       	mov    eax,0x2
c0024ef7:	83 c4 1c             	add    esp,0x1c
c0024efa:	5b                   	pop    ebx
c0024efb:	5e                   	pop    esi
c0024efc:	5f                   	pop    edi
c0024efd:	5d                   	pop    ebp
c0024efe:	c3                   	ret    
c0024eff:	90                   	nop

c0024f00 <SATA::close(int, int, void*)>:
c0024f00:	83 ec 0c             	sub    esp,0xc
c0024f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f0d:	85 c0                	test   eax,eax
c0024f0f:	74 0c                	je     c0024f1d <SATA::close(int, int, void*)+0x1d>
c0024f11:	83 ec 0c             	sub    esp,0xc
c0024f14:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f16:	50                   	push   eax
c0024f17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f1a:	83 c4 10             	add    esp,0x10
c0024f1d:	31 c0                	xor    eax,eax
c0024f1f:	83 c4 0c             	add    esp,0xc
c0024f22:	c3                   	ret    
c0024f23:	90                   	nop

c0024f24 <SATA::powerSaving(PowerSavingLevel)>:
c0024f24:	c3                   	ret    
c0024f25:	90                   	nop

c0024f26 <SATA::open(int, int, void*)>:
c0024f26:	56                   	push   esi
c0024f27:	53                   	push   ebx
c0024f28:	50                   	push   eax
c0024f29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f31:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024f3b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f41:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024f4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f4f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f59:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f5f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024f66:	e8 4c af fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024f6b:	89 c6                	mov    esi,eax
c0024f6d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024f73:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f79:	e8 39 af fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024f7e:	39 c6                	cmp    esi,eax
c0024f80:	74 10                	je     c0024f92 <SATA::open(int, int, void*)+0x6c>
c0024f82:	83 ec 0c             	sub    esp,0xc
c0024f85:	68 f0 d3 02 c0       	push   0xc002d3f0
c0024f8a:	e8 c8 56 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0024f8f:	83 c4 10             	add    esp,0x10
c0024f92:	83 ec 0c             	sub    esp,0xc
c0024f95:	6a 02                	push   0x2
c0024f97:	e8 53 ca fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0024f9c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024fa2:	e8 87 cc fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0024fa7:	6a 03                	push   0x3
c0024fa9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024faf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024fb5:	50                   	push   eax
c0024fb6:	e8 61 d2 fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024fbb:	83 c4 14             	add    esp,0x14
c0024fbe:	53                   	push   ebx
c0024fbf:	e8 c6 f6 fe ff       	call   c001468a <PhysicalDisk::startCache()>
c0024fc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024fc7:	e8 fc 18 ff ff       	call   c00168c8 <createPartitionsForDisk(PhysicalDisk*)>
c0024fcc:	83 c4 14             	add    esp,0x14
c0024fcf:	31 c0                	xor    eax,eax
c0024fd1:	5b                   	pop    ebx
c0024fd2:	5e                   	pop    esi
c0024fd3:	c3                   	ret    

c0024fd4 <SATA::SATA()>:
c0024fd4:	83 ec 0c             	sub    esp,0xc
c0024fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fdb:	83 ec 04             	sub    esp,0x4
c0024fde:	68 00 02 00 00       	push   0x200
c0024fe3:	68 04 d4 02 c0       	push   0xc002d404
c0024fe8:	50                   	push   eax
c0024fe9:	e8 34 f6 fe ff       	call   c0014622 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fee:	83 c4 10             	add    esp,0x10
c0024ff1:	ba 74 d4 02 c0       	mov    edx,0xc002d474
c0024ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ffa:	89 10                	mov    DWORD PTR [eax],edx
c0024ffc:	90                   	nop
c0024ffd:	83 c4 0c             	add    esp,0xc
c0025000:	c3                   	ret    
c0025001:	90                   	nop

c0025002 <SATA::access(unsigned long long, int, void*, bool)>:
c0025002:	55                   	push   ebp
c0025003:	57                   	push   edi
c0025004:	56                   	push   esi
c0025005:	53                   	push   ebx
c0025006:	83 ec 2c             	sub    esp,0x2c
c0025009:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002500d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025011:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025015:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025019:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002501d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025026:	7e 10                	jle    c0025038 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025028:	83 ec 0c             	sub    esp,0xc
c002502b:	68 14 d4 02 c0       	push   0xc002d414
c0025030:	e8 22 56 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0025035:	83 c4 10             	add    esp,0x10
c0025038:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c002503e:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025044:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002504a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002504e:	89 f0                	mov    eax,esi
c0025050:	c1 e0 07             	shl    eax,0x7
c0025053:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025057:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025061:	53                   	push   ebx
c0025062:	8d 46 02             	lea    eax,[esi+0x2]
c0025065:	53                   	push   ebx
c0025066:	c1 e0 07             	shl    eax,0x7
c0025069:	bb 01 00 00 00       	mov    ebx,0x1
c002506e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0025072:	50                   	push   eax
c0025073:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025079:	e8 aa ef ff ff       	call   c0024028 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002507e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025082:	83 c4 10             	add    esp,0x10
c0025085:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c002508a:	0f 84 ce 01 00 00    	je     c002525e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025090:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025094:	c1 e0 09             	shl    eax,0x9
c0025097:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002509c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00250a0:	74 17                	je     c00250b9 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c00250a2:	51                   	push   ecx
c00250a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00250a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00250ab:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00250b1:	e8 96 b6 fd ff       	call   c000074c <memcpy>
c00250b6:	83 c4 10             	add    esp,0x10
c00250b9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00250bf:	8d 46 02             	lea    eax,[esi+0x2]
c00250c2:	c1 e0 07             	shl    eax,0x7
c00250c5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00250c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00250cb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250d1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00250db:	c1 e1 05             	shl    ecx,0x5
c00250de:	01 c8                	add    eax,ecx
c00250e0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00250e4:	8a 18                	mov    bl,BYTE PTR [eax]
c00250e6:	83 e1 01             	and    ecx,0x1
c00250e9:	83 e3 bf             	and    ebx,0xffffffbf
c00250ec:	c1 e1 06             	shl    ecx,0x6
c00250ef:	09 d9                	or     ecx,ebx
c00250f1:	88 08                	mov    BYTE PTR [eax],cl
c00250f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250f5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00250fb:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025101:	89 08                	mov    DWORD PTR [eax],ecx
c0025103:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025109:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002510f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025115:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025118:	52                   	push   edx
c0025119:	68 90 00 00 00       	push   0x90
c002511e:	6a 00                	push   0x0
c0025120:	53                   	push   ebx
c0025121:	e8 5a b6 fd ff       	call   c0000780 <memset>
c0025126:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002512c:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0025130:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025136:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002513a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002513e:	83 c4 10             	add    esp,0x10
c0025141:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025144:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002514a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025150:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025155:	09 c8                	or     eax,ecx
c0025157:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002515d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025160:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025167:	66 25 00 7f          	and    ax,0x7f00
c002516b:	66 0d 27 80          	or     ax,0x8027
c002516f:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0025174:	66 89 03             	mov    WORD PTR [ebx],ax
c0025177:	19 c0                	sbb    eax,eax
c0025179:	83 e0 f0             	and    eax,0xfffffff0
c002517c:	83 c0 35             	add    eax,0x35
c002517f:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0025182:	89 f8                	mov    eax,edi
c0025184:	c1 e8 10             	shr    eax,0x10
c0025187:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002518a:	89 f8                	mov    eax,edi
c002518c:	c1 e8 18             	shr    eax,0x18
c002518f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025192:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025196:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002519d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00251a4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251a8:	89 f3                	mov    ebx,esi
c00251aa:	31 c0                	xor    eax,eax
c00251ac:	c1 e3 07             	shl    ebx,0x7
c00251af:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00251b3:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c00251b9:	80 e1 88             	and    cl,0x88
c00251bc:	74 0a                	je     c00251c8 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c00251be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251c3:	74 0a                	je     c00251cf <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c00251c5:	40                   	inc    eax
c00251c6:	eb eb                	jmp    c00251b3 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c00251c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251cd:	75 0a                	jne    c00251d9 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c00251cf:	83 ec 0c             	sub    esp,0xc
c00251d2:	68 4d d4 02 c0       	push   0xc002d44d
c00251d7:	eb 56                	jmp    c002522f <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c00251d9:	b8 01 00 00 00       	mov    eax,0x1
c00251de:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c00251e2:	c1 e6 07             	shl    esi,0x7
c00251e5:	d3 e0                	shl    eax,cl
c00251e7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00251eb:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00251f1:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c00251f7:	85 c8                	test   eax,ecx
c00251f9:	74 20                	je     c002521b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c00251fb:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0025201:	0f ba e1 1e          	bt     ecx,0x1e
c0025205:	73 ea                	jae    c00251f1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0025207:	83 ec 0c             	sub    esp,0xc
c002520a:	31 db                	xor    ebx,ebx
c002520c:	68 5b d4 02 c0       	push   0xc002d45b
c0025211:	e8 41 54 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0025216:	83 c4 10             	add    esp,0x10
c0025219:	eb 43                	jmp    c002525e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002521b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025221:	0f ba e0 1e          	bt     eax,0x1e
c0025225:	73 17                	jae    c002523e <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0025227:	83 ec 0c             	sub    esp,0xc
c002522a:	68 5b d4 02 c0       	push   0xc002d45b
c002522f:	e8 23 54 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0025234:	bb 01 00 00 00       	mov    ebx,0x1
c0025239:	83 c4 10             	add    esp,0x10
c002523c:	eb 20                	jmp    c002525e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002523e:	31 db                	xor    ebx,ebx
c0025240:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025245:	75 17                	jne    c002525e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025247:	50                   	push   eax
c0025248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002524c:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025252:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0025256:	e8 f1 b4 fd ff       	call   c000074c <memcpy>
c002525b:	83 c4 10             	add    esp,0x10
c002525e:	83 c4 2c             	add    esp,0x2c
c0025261:	89 d8                	mov    eax,ebx
c0025263:	5b                   	pop    ebx
c0025264:	5e                   	pop    esi
c0025265:	5f                   	pop    edi
c0025266:	5d                   	pop    ebp
c0025267:	c3                   	ret    

c0025268 <SATA::read(unsigned long long, int, void*)>:
c0025268:	57                   	push   edi
c0025269:	b8 04 00 00 00       	mov    eax,0x4
c002526e:	56                   	push   esi
c002526f:	53                   	push   ebx
c0025270:	83 ec 10             	sub    esp,0x10
c0025273:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025277:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002527b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002527e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025282:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025286:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002528c:	77 3b                	ja     c00252c9 <SATA::read(unsigned long long, int, void*)+0x61>
c002528e:	b8 06 00 00 00       	mov    eax,0x6
c0025293:	85 d2                	test   edx,edx
c0025295:	74 32                	je     c00252c9 <SATA::read(unsigned long long, int, void*)+0x61>
c0025297:	50                   	push   eax
c0025298:	50                   	push   eax
c0025299:	6a 00                	push   0x0
c002529b:	52                   	push   edx
c002529c:	53                   	push   ebx
c002529d:	57                   	push   edi
c002529e:	56                   	push   esi
c002529f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252a3:	e8 5a fd ff ff       	call   c0025002 <SATA::access(unsigned long long, int, void*, bool)>
c00252a8:	83 c4 20             	add    esp,0x20
c00252ab:	85 c0                	test   eax,eax
c00252ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252b1:	75 11                	jne    c00252c4 <SATA::read(unsigned long long, int, void*)+0x5c>
c00252b3:	01 1d 08 2d 03 c0    	add    DWORD PTR ds:0xc0032d08,ebx
c00252b9:	e8 3a b6 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c00252be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252c2:	eb 05                	jmp    c00252c9 <SATA::read(unsigned long long, int, void*)+0x61>
c00252c4:	b8 01 00 00 00       	mov    eax,0x1
c00252c9:	83 c4 10             	add    esp,0x10
c00252cc:	5b                   	pop    ebx
c00252cd:	5e                   	pop    esi
c00252ce:	5f                   	pop    edi
c00252cf:	c3                   	ret    

c00252d0 <SATA::write(unsigned long long, int, void*)>:
c00252d0:	55                   	push   ebp
c00252d1:	b8 04 00 00 00       	mov    eax,0x4
c00252d6:	57                   	push   edi
c00252d7:	56                   	push   esi
c00252d8:	53                   	push   ebx
c00252d9:	83 ec 1c             	sub    esp,0x1c
c00252dc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00252e0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00252e4:	8d 75 ff             	lea    esi,[ebp-0x1]
c00252e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00252eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00252ef:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00252f5:	77 56                	ja     c002534d <SATA::write(unsigned long long, int, void*)+0x7d>
c00252f7:	b8 06 00 00 00       	mov    eax,0x6
c00252fc:	85 ff                	test   edi,edi
c00252fe:	74 4d                	je     c002534d <SATA::write(unsigned long long, int, void*)+0x7d>
c0025300:	89 ee                	mov    esi,ebp
c0025302:	c1 e6 09             	shl    esi,0x9
c0025305:	01 fe                	add    esi,edi
c0025307:	89 c8                	mov    eax,ecx
c0025309:	89 da                	mov    edx,ebx
c002530b:	83 c0 01             	add    eax,0x1
c002530e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025312:	83 d2 00             	adc    edx,0x0
c0025315:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025319:	50                   	push   eax
c002531a:	50                   	push   eax
c002531b:	6a 01                	push   0x1
c002531d:	57                   	push   edi
c002531e:	81 c7 00 02 00 00    	add    edi,0x200
c0025324:	6a 01                	push   0x1
c0025326:	53                   	push   ebx
c0025327:	51                   	push   ecx
c0025328:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002532c:	e8 d1 fc ff ff       	call   c0025002 <SATA::access(unsigned long long, int, void*, bool)>
c0025331:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025335:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025339:	83 c4 20             	add    esp,0x20
c002533c:	39 f7                	cmp    edi,esi
c002533e:	75 c7                	jne    c0025307 <SATA::write(unsigned long long, int, void*)+0x37>
c0025340:	01 2d 04 2d 03 c0    	add    DWORD PTR ds:0xc0032d04,ebp
c0025346:	e8 ad b5 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c002534b:	31 c0                	xor    eax,eax
c002534d:	83 c4 1c             	add    esp,0x1c
c0025350:	5b                   	pop    ebx
c0025351:	5e                   	pop    esi
c0025352:	5f                   	pop    edi
c0025353:	5d                   	pop    ebp
c0025354:	c3                   	ret    
c0025355:	90                   	nop

c0025356 <SATAPI::write(unsigned long long, int, void*)>:
c0025356:	b8 03 00 00 00       	mov    eax,0x3
c002535b:	c3                   	ret    

c002535c <SATAPI::close(int, int, void*)>:
c002535c:	83 ec 0c             	sub    esp,0xc
c002535f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025363:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025369:	85 c0                	test   eax,eax
c002536b:	74 0c                	je     c0025379 <SATAPI::close(int, int, void*)+0x1d>
c002536d:	83 ec 0c             	sub    esp,0xc
c0025370:	8b 10                	mov    edx,DWORD PTR [eax]
c0025372:	50                   	push   eax
c0025373:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025376:	83 c4 10             	add    esp,0x10
c0025379:	31 c0                	xor    eax,eax
c002537b:	83 c4 0c             	add    esp,0xc
c002537e:	c3                   	ret    
c002537f:	90                   	nop

c0025380 <SATAPI::SATAPI()>:
c0025380:	83 ec 0c             	sub    esp,0xc
c0025383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025387:	83 ec 04             	sub    esp,0x4
c002538a:	68 00 08 00 00       	push   0x800
c002538f:	68 a4 d4 02 c0       	push   0xc002d4a4
c0025394:	50                   	push   eax
c0025395:	e8 88 f2 fe ff       	call   c0014622 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002539a:	83 c4 10             	add    esp,0x10
c002539d:	ba 50 d5 02 c0       	mov    edx,0xc002d550
c00253a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a6:	89 10                	mov    DWORD PTR [eax],edx
c00253a8:	90                   	nop
c00253a9:	83 c4 0c             	add    esp,0xc
c00253ac:	c3                   	ret    
c00253ad:	90                   	nop

c00253ae <SATAPI::diskRemoved()>:
c00253ae:	83 ec 18             	sub    esp,0x18
c00253b1:	68 b0 d4 02 c0       	push   0xc002d4b0
c00253b6:	e8 08 da fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00253bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253bf:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00253c6:	83 c4 1c             	add    esp,0x1c
c00253c9:	c3                   	ret    

c00253ca <SATAPI::diskInserted()>:
c00253ca:	53                   	push   ebx
c00253cb:	83 ec 14             	sub    esp,0x14
c00253ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00253d2:	68 c7 d4 02 c0       	push   0xc002d4c7
c00253d7:	e8 e7 d9 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00253dc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00253e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00253e6:	e8 9f f2 fe ff       	call   c001468a <PhysicalDisk::startCache()>
c00253eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00253ef:	83 c4 18             	add    esp,0x18
c00253f2:	5b                   	pop    ebx
c00253f3:	e9 d0 14 ff ff       	jmp    c00168c8 <createPartitionsForDisk(PhysicalDisk*)>

c00253f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00253f8:	55                   	push   ebp
c00253f9:	57                   	push   edi
c00253fa:	56                   	push   esi
c00253fb:	53                   	push   ebx
c00253fc:	83 ec 24             	sub    esp,0x24
c00253ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025403:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025407:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002540d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025411:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025415:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002541b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002541e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025424:	c1 e3 07             	shl    ebx,0x7
c0025427:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002542b:	89 f8                	mov    eax,edi
c002542d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025431:	c1 e0 07             	shl    eax,0x7
c0025434:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025438:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002543c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025446:	53                   	push   ebx
c0025447:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002544d:	e8 d6 eb ff ff       	call   c0024028 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025452:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025456:	83 c4 10             	add    esp,0x10
c0025459:	b8 01 00 00 00       	mov    eax,0x1
c002545e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025463:	0f 84 8a 01 00 00    	je     c00255f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025469:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002546f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025471:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025477:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002547d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025481:	c1 e1 05             	shl    ecx,0x5
c0025484:	01 c8                	add    eax,ecx
c0025486:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025488:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002548e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025494:	89 08                	mov    DWORD PTR [eax],ecx
c0025496:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002549c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00254a2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00254a8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00254ab:	52                   	push   edx
c00254ac:	68 90 00 00 00       	push   0x90
c00254b1:	6a 00                	push   0x0
c00254b3:	53                   	push   ebx
c00254b4:	e8 c7 b2 fd ff       	call   c0000780 <memset>
c00254b9:	83 c4 0c             	add    esp,0xc
c00254bc:	8d 43 40             	lea    eax,[ebx+0x40]
c00254bf:	6a 0c                	push   0xc
c00254c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00254c5:	50                   	push   eax
c00254c6:	e8 81 b2 fd ff       	call   c000074c <memcpy>
c00254cb:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00254d1:	89 ea                	mov    edx,ebp
c00254d3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00254d9:	c1 ea 18             	shr    edx,0x18
c00254dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00254e0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00254e3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00254e6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00254ea:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00254f0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00254f6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00254fb:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00254ff:	09 c8                	or     eax,ecx
c0025501:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025505:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002550b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002550e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025515:	66 25 00 7f          	and    ax,0x7f00
c0025519:	66 0d 27 80          	or     ax,0x8027
c002551d:	66 89 03             	mov    WORD PTR [ebx],ax
c0025520:	89 e8                	mov    eax,ebp
c0025522:	c1 e8 10             	shr    eax,0x10
c0025525:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025528:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002552c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002552f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025533:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025536:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002553a:	83 c4 10             	add    esp,0x10
c002553d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025545:	31 c0                	xor    eax,eax
c0025547:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002554d:	80 e1 88             	and    cl,0x88
c0025550:	74 0a                	je     c002555c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025552:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025557:	74 0a                	je     c0025563 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025559:	40                   	inc    eax
c002555a:	eb eb                	jmp    c0025547 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002555c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025561:	75 0f                	jne    c0025572 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025563:	83 ec 0c             	sub    esp,0xc
c0025566:	68 4d d4 02 c0       	push   0xc002d44d
c002556b:	e8 e7 50 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0025570:	eb 3a                	jmp    c00255ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025572:	b8 01 00 00 00       	mov    eax,0x1
c0025577:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002557b:	c1 e7 07             	shl    edi,0x7
c002557e:	d3 e0                	shl    eax,cl
c0025580:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025583:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025589:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002558f:	85 d0                	test   eax,edx
c0025591:	74 23                	je     c00255b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025593:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025599:	0f ba e2 1e          	bt     edx,0x1e
c002559d:	73 ea                	jae    c0025589 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002559f:	83 ec 0c             	sub    esp,0xc
c00255a2:	68 df d4 02 c0       	push   0xc002d4df
c00255a7:	e8 17 d8 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00255ac:	83 c4 10             	add    esp,0x10
c00255af:	b8 01 00 00 00       	mov    eax,0x1
c00255b4:	eb 3d                	jmp    c00255f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00255b6:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00255bc:	0f ba e0 1e          	bt     eax,0x1e
c00255c0:	73 0a                	jae    c00255cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	68 f2 d4 02 c0       	push   0xc002d4f2
c00255ca:	eb db                	jmp    c00255a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00255cc:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00255d1:	74 1e                	je     c00255f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00255d3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00255d8:	74 17                	je     c00255f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00255da:	50                   	push   eax
c00255db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00255df:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00255e5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00255e9:	e8 5e b1 fd ff       	call   c000074c <memcpy>
c00255ee:	83 c4 10             	add    esp,0x10
c00255f1:	31 c0                	xor    eax,eax
c00255f3:	83 c4 1c             	add    esp,0x1c
c00255f6:	5b                   	pop    ebx
c00255f7:	5e                   	pop    esi
c00255f8:	5f                   	pop    edi
c00255f9:	5d                   	pop    ebp
c00255fa:	c3                   	ret    
c00255fb:	90                   	nop

c00255fc <SATAPI::eject()>:
c00255fc:	57                   	push   edi
c00255fd:	b9 03 00 00 00       	mov    ecx,0x3
c0025602:	53                   	push   ebx
c0025603:	83 ec 14             	sub    esp,0x14
c0025606:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002560a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002560e:	fc                   	cld    
c002560f:	31 c0                	xor    eax,eax
c0025611:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025613:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025618:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002561d:	50                   	push   eax
c002561e:	6a 00                	push   0x0
c0025620:	6a 00                	push   0x0
c0025622:	6a 00                	push   0x0
c0025624:	6a 00                	push   0x0
c0025626:	6a 02                	push   0x2
c0025628:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002562c:	50                   	push   eax
c002562d:	53                   	push   ebx
c002562e:	e8 c5 fd ff ff       	call   c00253f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025633:	83 c4 14             	add    esp,0x14
c0025636:	53                   	push   ebx
c0025637:	e8 72 fd ff ff       	call   c00253ae <SATAPI::diskRemoved()>
c002563c:	83 c4 24             	add    esp,0x24
c002563f:	31 c0                	xor    eax,eax
c0025641:	5b                   	pop    ebx
c0025642:	5f                   	pop    edi
c0025643:	c3                   	ret    

c0025644 <SATAPI::detectMedia()>:
c0025644:	56                   	push   esi
c0025645:	53                   	push   ebx
c0025646:	83 ec 28             	sub    esp,0x28
c0025649:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002564d:	6a 0c                	push   0xc
c002564f:	6a 00                	push   0x0
c0025651:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025655:	56                   	push   esi
c0025656:	e8 25 b1 fd ff       	call   c0000780 <memset>
c002565b:	83 c4 0c             	add    esp,0xc
c002565e:	6a 00                	push   0x0
c0025660:	6a 00                	push   0x0
c0025662:	6a 00                	push   0x0
c0025664:	6a 00                	push   0x0
c0025666:	6a 00                	push   0x0
c0025668:	56                   	push   esi
c0025669:	53                   	push   ebx
c002566a:	e8 89 fd ff ff       	call   c00253f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002566f:	83 c4 1c             	add    esp,0x1c
c0025672:	6a 0c                	push   0xc
c0025674:	6a 00                	push   0x0
c0025676:	56                   	push   esi
c0025677:	e8 04 b1 fd ff       	call   c0000780 <memset>
c002567c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025681:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	6a 01                	push   0x1
c002568b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002568f:	50                   	push   eax
c0025690:	6a 00                	push   0x0
c0025692:	6a 00                	push   0x0
c0025694:	6a 12                	push   0x12
c0025696:	56                   	push   esi
c0025697:	53                   	push   ebx
c0025698:	e8 5b fd ff ff       	call   c00253f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002569d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00256a1:	83 c4 20             	add    esp,0x20
c00256a4:	83 e0 7f             	and    eax,0x7f
c00256a7:	3c 70                	cmp    al,0x70
c00256a9:	74 15                	je     c00256c0 <SATAPI::detectMedia()+0x7c>
c00256ab:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00256b2:	75 0c                	jne    c00256c0 <SATAPI::detectMedia()+0x7c>
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	53                   	push   ebx
c00256b8:	e8 0d fd ff ff       	call   c00253ca <SATAPI::diskInserted()>
c00256bd:	83 c4 10             	add    esp,0x10
c00256c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00256c4:	83 e0 0f             	and    eax,0xf
c00256c7:	3c 02                	cmp    al,0x2
c00256c9:	75 1b                	jne    c00256e6 <SATAPI::detectMedia()+0xa2>
c00256cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00256d0:	75 2d                	jne    c00256ff <SATAPI::detectMedia()+0xbb>
c00256d2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00256d9:	74 24                	je     c00256ff <SATAPI::detectMedia()+0xbb>
c00256db:	83 ec 0c             	sub    esp,0xc
c00256de:	53                   	push   ebx
c00256df:	e8 ca fc ff ff       	call   c00253ae <SATAPI::diskRemoved()>
c00256e4:	eb 16                	jmp    c00256fc <SATAPI::detectMedia()+0xb8>
c00256e6:	84 c0                	test   al,al
c00256e8:	75 15                	jne    c00256ff <SATAPI::detectMedia()+0xbb>
c00256ea:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00256f1:	75 0c                	jne    c00256ff <SATAPI::detectMedia()+0xbb>
c00256f3:	83 ec 0c             	sub    esp,0xc
c00256f6:	53                   	push   ebx
c00256f7:	e8 ce fc ff ff       	call   c00253ca <SATAPI::diskInserted()>
c00256fc:	83 c4 10             	add    esp,0x10
c00256ff:	83 c4 24             	add    esp,0x24
c0025702:	5b                   	pop    ebx
c0025703:	5e                   	pop    esi
c0025704:	c3                   	ret    
c0025705:	90                   	nop

c0025706 <SATAPI::open(int, int, void*)>:
c0025706:	56                   	push   esi
c0025707:	53                   	push   ebx
c0025708:	50                   	push   eax
c0025709:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002570d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025711:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002571b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025721:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002572b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002572f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025739:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002573f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025746:	e8 6c a7 fe ff       	call   c000feb7 <Phys::allocatePage()>
c002574b:	89 c6                	mov    esi,eax
c002574d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025753:	81 c6 00 10 00 00    	add    esi,0x1000
c0025759:	e8 59 a7 fe ff       	call   c000feb7 <Phys::allocatePage()>
c002575e:	39 c6                	cmp    esi,eax
c0025760:	74 10                	je     c0025772 <SATAPI::open(int, int, void*)+0x6c>
c0025762:	83 ec 0c             	sub    esp,0xc
c0025765:	68 07 d5 02 c0       	push   0xc002d507
c002576a:	e8 e8 4e ff ff       	call   c001a657 <Krnl::panic(char const*)>
c002576f:	83 c4 10             	add    esp,0x10
c0025772:	83 ec 0c             	sub    esp,0xc
c0025775:	6a 02                	push   0x2
c0025777:	e8 73 c2 fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c002577c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025782:	e8 a7 c4 fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0025787:	6a 03                	push   0x3
c0025789:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002578f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025795:	50                   	push   eax
c0025796:	e8 81 ca fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c002579b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00257a2:	83 c4 14             	add    esp,0x14
c00257a5:	53                   	push   ebx
c00257a6:	e8 99 fe ff ff       	call   c0025644 <SATAPI::detectMedia()>
c00257ab:	83 c4 14             	add    esp,0x14
c00257ae:	31 c0                	xor    eax,eax
c00257b0:	5b                   	pop    ebx
c00257b1:	5e                   	pop    esi
c00257b2:	c3                   	ret    
c00257b3:	90                   	nop

c00257b4 <SATAPI::read(unsigned long long, int, void*)>:
c00257b4:	55                   	push   ebp
c00257b5:	57                   	push   edi
c00257b6:	56                   	push   esi
c00257b7:	53                   	push   ebx
c00257b8:	83 ec 1c             	sub    esp,0x1c
c00257bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00257c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00257c7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00257ce:	74 19                	je     c00257e9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00257d0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00257d5:	7e 2e                	jle    c0025805 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00257d7:	83 ec 0c             	sub    esp,0xc
c00257da:	68 1d d5 02 c0       	push   0xc002d51d
c00257df:	e8 73 4e ff ff       	call   c001a657 <Krnl::panic(char const*)>
c00257e4:	83 c4 10             	add    esp,0x10
c00257e7:	eb 1c                	jmp    c0025805 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00257e9:	83 ec 0c             	sub    esp,0xc
c00257ec:	55                   	push   ebp
c00257ed:	e8 52 fe ff ff       	call   c0025644 <SATAPI::detectMedia()>
c00257f2:	83 c4 10             	add    esp,0x10
c00257f5:	b8 02 00 00 00       	mov    eax,0x2
c00257fa:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025801:	75 cd                	jne    c00257d0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025803:	eb 49                	jmp    c002584e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025805:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025809:	b9 03 00 00 00       	mov    ecx,0x3
c002580e:	fc                   	cld    
c002580f:	31 c0                	xor    eax,eax
c0025811:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025813:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025818:	89 d8                	mov    eax,ebx
c002581a:	86 e0                	xchg   al,ah
c002581c:	c1 c0 10             	rol    eax,0x10
c002581f:	86 e0                	xchg   al,ah
c0025821:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025825:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025829:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002582d:	50                   	push   eax
c002582e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025832:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025836:	56                   	push   esi
c0025837:	53                   	push   ebx
c0025838:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002583c:	c1 e0 0b             	shl    eax,0xb
c002583f:	50                   	push   eax
c0025840:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025844:	50                   	push   eax
c0025845:	55                   	push   ebp
c0025846:	e8 ad fb ff ff       	call   c00253f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002584b:	83 c4 20             	add    esp,0x20
c002584e:	83 c4 1c             	add    esp,0x1c
c0025851:	5b                   	pop    ebx
c0025852:	5e                   	pop    esi
c0025853:	5f                   	pop    edi
c0025854:	5d                   	pop    ebp
c0025855:	c3                   	ret    

c0025856 <AVX::open(int, int, void*)>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	e8 3a 11 00 00       	call   c0026998 <avxInit>
c002585e:	b8 00 00 00 00       	mov    eax,0x0
c0025863:	83 c4 0c             	add    esp,0xc
c0025866:	c3                   	ret    
c0025867:	90                   	nop

c0025868 <AVX::close(int, int, void*)>:
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	e8 29 11 00 00       	call   c0026999 <avxClose>
c0025870:	b8 00 00 00 00       	mov    eax,0x0
c0025875:	83 c4 0c             	add    esp,0xc
c0025878:	c3                   	ret    
c0025879:	90                   	nop

c002587a <AVX::available()>:
c002587a:	83 ec 0c             	sub    esp,0xc
c002587d:	e8 0e 11 00 00       	call   c0026990 <avxDetect>
c0025882:	85 c0                	test   eax,eax
c0025884:	0f 95 c0             	setne  al
c0025887:	83 c4 0c             	add    esp,0xc
c002588a:	c3                   	ret    
c002588b:	90                   	nop

c002588c <AVX::save(void*)>:
c002588c:	83 ec 0c             	sub    esp,0xc
c002588f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025893:	83 ec 0c             	sub    esp,0xc
c0025896:	50                   	push   eax
c0025897:	e8 fa 10 00 00       	call   c0026996 <avxSave>
c002589c:	83 c4 10             	add    esp,0x10
c002589f:	90                   	nop
c00258a0:	83 c4 0c             	add    esp,0xc
c00258a3:	c3                   	ret    

c00258a4 <AVX::load(void*)>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258ab:	83 ec 0c             	sub    esp,0xc
c00258ae:	50                   	push   eax
c00258af:	e8 e3 10 00 00       	call   c0026997 <avxLoad>
c00258b4:	83 c4 10             	add    esp,0x10
c00258b7:	90                   	nop
c00258b8:	83 c4 0c             	add    esp,0xc
c00258bb:	c3                   	ret    

c00258bc <AVX::AVX()>:
c00258bc:	83 ec 0c             	sub    esp,0xc
c00258bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c3:	83 ec 08             	sub    esp,0x8
c00258c6:	68 80 d5 02 c0       	push   0xc002d580
c00258cb:	50                   	push   eax
c00258cc:	e8 2f ee fe ff       	call   c0014700 <FPU::FPU(char const*)>
c00258d1:	83 c4 10             	add    esp,0x10
c00258d4:	ba 90 d5 02 c0       	mov    edx,0xc002d590
c00258d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258dd:	89 10                	mov    DWORD PTR [eax],edx
c00258df:	90                   	nop
c00258e0:	83 c4 0c             	add    esp,0xc
c00258e3:	c3                   	ret    

c00258e4 <MMX::available()>:
c00258e4:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00258e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00258ef:	83 e0 20             	and    eax,0x20
c00258f2:	84 c0                	test   al,al
c00258f4:	0f 95 c0             	setne  al
c00258f7:	c3                   	ret    

c00258f8 <MMX::open(int, int, void*)>:
c00258f8:	83 ec 0c             	sub    esp,0xc
c00258fb:	e8 22 11 00 00       	call   c0026a22 <x87Init>
c0025900:	b8 00 00 00 00       	mov    eax,0x0
c0025905:	83 c4 0c             	add    esp,0xc
c0025908:	c3                   	ret    
c0025909:	90                   	nop

c002590a <MMX::close(int, int, void*)>:
c002590a:	83 ec 0c             	sub    esp,0xc
c002590d:	e8 2a 11 00 00       	call   c0026a3c <x87Close>
c0025912:	b8 00 00 00 00       	mov    eax,0x0
c0025917:	83 c4 0c             	add    esp,0xc
c002591a:	c3                   	ret    
c002591b:	90                   	nop

c002591c <MMX::save(void*)>:
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025923:	83 ec 0c             	sub    esp,0xc
c0025926:	50                   	push   eax
c0025927:	e8 e5 10 00 00       	call   c0026a11 <x87Save>
c002592c:	83 c4 10             	add    esp,0x10
c002592f:	90                   	nop
c0025930:	83 c4 0c             	add    esp,0xc
c0025933:	c3                   	ret    

c0025934 <MMX::load(void*)>:
c0025934:	83 ec 0c             	sub    esp,0xc
c0025937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002593b:	83 ec 0c             	sub    esp,0xc
c002593e:	50                   	push   eax
c002593f:	e8 d6 10 00 00       	call   c0026a1a <x87Load>
c0025944:	83 c4 10             	add    esp,0x10
c0025947:	90                   	nop
c0025948:	83 c4 0c             	add    esp,0xc
c002594b:	c3                   	ret    

c002594c <MMX::MMX()>:
c002594c:	83 ec 0c             	sub    esp,0xc
c002594f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025953:	83 ec 08             	sub    esp,0x8
c0025956:	68 c0 d5 02 c0       	push   0xc002d5c0
c002595b:	50                   	push   eax
c002595c:	e8 9f ed fe ff       	call   c0014700 <FPU::FPU(char const*)>
c0025961:	83 c4 10             	add    esp,0x10
c0025964:	ba d0 d5 02 c0       	mov    edx,0xc002d5d0
c0025969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002596d:	89 10                	mov    DWORD PTR [eax],edx
c002596f:	90                   	nop
c0025970:	83 c4 0c             	add    esp,0xc
c0025973:	c3                   	ret    

c0025974 <SSE::open(int, int, void*)>:
c0025974:	83 ec 0c             	sub    esp,0xc
c0025977:	e8 58 10 00 00       	call   c00269d4 <sseInit>
c002597c:	b8 00 00 00 00       	mov    eax,0x0
c0025981:	83 c4 0c             	add    esp,0xc
c0025984:	c3                   	ret    
c0025985:	90                   	nop

c0025986 <SSE::close(int, int, void*)>:
c0025986:	83 ec 0c             	sub    esp,0xc
c0025989:	e8 56 10 00 00       	call   c00269e4 <sseClose>
c002598e:	b8 00 00 00 00       	mov    eax,0x0
c0025993:	83 c4 0c             	add    esp,0xc
c0025996:	c3                   	ret    
c0025997:	90                   	nop

c0025998 <SSE::available()>:
c0025998:	83 ec 1c             	sub    esp,0x1c
c002599b:	e8 10 10 00 00       	call   c00269b0 <absolutelyNoChanceInHell>
c00259a0:	85 c0                	test   eax,eax
c00259a2:	0f 95 c0             	setne  al
c00259a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00259a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00259ad:	83 c4 1c             	add    esp,0x1c
c00259b0:	c3                   	ret    
c00259b1:	90                   	nop

c00259b2 <SSE::save(void*)>:
c00259b2:	83 ec 0c             	sub    esp,0xc
c00259b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259b9:	83 ec 0c             	sub    esp,0xc
c00259bc:	50                   	push   eax
c00259bd:	e8 06 10 00 00       	call   c00269c8 <sseSave>
c00259c2:	83 c4 10             	add    esp,0x10
c00259c5:	90                   	nop
c00259c6:	83 c4 0c             	add    esp,0xc
c00259c9:	c3                   	ret    

c00259ca <SSE::load(void*)>:
c00259ca:	83 ec 0c             	sub    esp,0xc
c00259cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259d1:	83 ec 0c             	sub    esp,0xc
c00259d4:	50                   	push   eax
c00259d5:	e8 f4 0f 00 00       	call   c00269ce <sseLoad>
c00259da:	83 c4 10             	add    esp,0x10
c00259dd:	90                   	nop
c00259de:	83 c4 0c             	add    esp,0xc
c00259e1:	c3                   	ret    

c00259e2 <SSE::SSE()>:
c00259e2:	83 ec 0c             	sub    esp,0xc
c00259e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e9:	83 ec 08             	sub    esp,0x8
c00259ec:	68 00 d6 02 c0       	push   0xc002d600
c00259f1:	50                   	push   eax
c00259f2:	e8 09 ed fe ff       	call   c0014700 <FPU::FPU(char const*)>
c00259f7:	83 c4 10             	add    esp,0x10
c00259fa:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c00259ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a03:	89 10                	mov    DWORD PTR [eax],edx
c0025a05:	90                   	nop
c0025a06:	83 c4 0c             	add    esp,0xc
c0025a09:	c3                   	ret    

c0025a0a <x87::open(int, int, void*)>:
c0025a0a:	83 ec 0c             	sub    esp,0xc
c0025a0d:	e8 10 10 00 00       	call   c0026a22 <x87Init>
c0025a12:	b8 00 00 00 00       	mov    eax,0x0
c0025a17:	83 c4 0c             	add    esp,0xc
c0025a1a:	c3                   	ret    
c0025a1b:	90                   	nop

c0025a1c <x87::close(int, int, void*)>:
c0025a1c:	83 ec 0c             	sub    esp,0xc
c0025a1f:	e8 18 10 00 00       	call   c0026a3c <x87Close>
c0025a24:	b8 00 00 00 00       	mov    eax,0x0
c0025a29:	83 c4 0c             	add    esp,0xc
c0025a2c:	c3                   	ret    
c0025a2d:	90                   	nop

c0025a2e <x87::available()>:
c0025a2e:	83 ec 0c             	sub    esp,0xc
c0025a31:	e8 c0 0f 00 00       	call   c00269f6 <x87Detect>
c0025a36:	85 c0                	test   eax,eax
c0025a38:	0f 95 c0             	setne  al
c0025a3b:	83 c4 0c             	add    esp,0xc
c0025a3e:	c3                   	ret    
c0025a3f:	90                   	nop

c0025a40 <x87::save(void*)>:
c0025a40:	83 ec 0c             	sub    esp,0xc
c0025a43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a47:	83 ec 0c             	sub    esp,0xc
c0025a4a:	50                   	push   eax
c0025a4b:	e8 c1 0f 00 00       	call   c0026a11 <x87Save>
c0025a50:	83 c4 10             	add    esp,0x10
c0025a53:	90                   	nop
c0025a54:	83 c4 0c             	add    esp,0xc
c0025a57:	c3                   	ret    

c0025a58 <x87::load(void*)>:
c0025a58:	83 ec 0c             	sub    esp,0xc
c0025a5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a5f:	83 ec 0c             	sub    esp,0xc
c0025a62:	50                   	push   eax
c0025a63:	e8 b2 0f 00 00       	call   c0026a1a <x87Load>
c0025a68:	83 c4 10             	add    esp,0x10
c0025a6b:	90                   	nop
c0025a6c:	83 c4 0c             	add    esp,0xc
c0025a6f:	c3                   	ret    

c0025a70 <x87::x87()>:
c0025a70:	83 ec 0c             	sub    esp,0xc
c0025a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a77:	83 ec 08             	sub    esp,0x8
c0025a7a:	68 40 d6 02 c0       	push   0xc002d640
c0025a7f:	50                   	push   eax
c0025a80:	e8 7b ec fe ff       	call   c0014700 <FPU::FPU(char const*)>
c0025a85:	83 c4 10             	add    esp,0x10
c0025a88:	ba 50 d6 02 c0       	mov    edx,0xc002d650
c0025a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a91:	89 10                	mov    DWORD PTR [eax],edx
c0025a93:	90                   	nop
c0025a94:	83 c4 0c             	add    esp,0xc
c0025a97:	c3                   	ret    

c0025a98 <APIC::disable()>:
c0025a98:	90                   	nop
c0025a99:	c3                   	ret    

c0025a9a <APIC::close(int, int, void*)>:
c0025a9a:	55                   	push   ebp
c0025a9b:	89 e5                	mov    ebp,esp
c0025a9d:	83 ec 08             	sub    esp,0x8
c0025aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa5:	83 c0 3c             	add    eax,0x3c
c0025aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aaa:	83 ec 0c             	sub    esp,0xc
c0025aad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ab0:	ff d0                	call   eax
c0025ab2:	83 c4 10             	add    esp,0x10
c0025ab5:	b8 00 00 00 00       	mov    eax,0x0
c0025aba:	c9                   	leave  
c0025abb:	c3                   	ret    

c0025abc <IOAPIC::close(int, int, void*)>:
c0025abc:	b8 00 00 00 00       	mov    eax,0x0
c0025ac1:	c3                   	ret    

c0025ac2 <APIC::io_wait()>:
c0025ac2:	eb 00                	jmp    c0025ac4 <APIC::io_wait()+0x2>
c0025ac4:	eb 00                	jmp    c0025ac6 <APIC::io_wait()+0x4>
c0025ac6:	90                   	nop
c0025ac7:	c3                   	ret    

c0025ac8 <APIC::getBase()>:
c0025ac8:	55                   	push   ebp
c0025ac9:	89 e5                	mov    ebp,esp
c0025acb:	83 ec 18             	sub    esp,0x18
c0025ace:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0025ad3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025ad9:	83 e0 08             	and    eax,0x8
c0025adc:	84 c0                	test   al,al
c0025ade:	75 07                	jne    c0025ae7 <APIC::getBase()+0x1f>
c0025ae0:	b8 00 00 00 00       	mov    eax,0x0
c0025ae5:	eb 21                	jmp    c0025b08 <APIC::getBase()+0x40>
c0025ae7:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0025aec:	83 ec 08             	sub    esp,0x8
c0025aef:	6a 1b                	push   0x1b
c0025af1:	50                   	push   eax
c0025af2:	e8 f9 92 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0025af7:	83 c4 10             	add    esp,0x10
c0025afa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025afd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025b00:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b03:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025b08:	c9                   	leave  
c0025b09:	c3                   	ret    

c0025b0a <APIC::eoi(unsigned char)>:
c0025b0a:	55                   	push   ebp
c0025b0b:	89 e5                	mov    ebp,esp
c0025b0d:	83 ec 28             	sub    esp,0x28
c0025b10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b13:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b16:	83 ec 0c             	sub    esp,0xc
c0025b19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b1c:	e8 a7 ff ff ff       	call   c0025ac8 <APIC::getBase()>
c0025b21:	83 c4 10             	add    esp,0x10
c0025b24:	05 b0 00 00 00       	add    eax,0xb0
c0025b29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025b2f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025b35:	90                   	nop
c0025b36:	c9                   	leave  
c0025b37:	c3                   	ret    

c0025b38 <APIC::open(int, int, void*)>:
c0025b38:	55                   	push   ebp
c0025b39:	89 e5                	mov    ebp,esp
c0025b3b:	57                   	push   edi
c0025b3c:	56                   	push   esi
c0025b3d:	53                   	push   ebx
c0025b3e:	83 ec 2c             	sub    esp,0x2c
c0025b41:	83 ec 0c             	sub    esp,0xc
c0025b44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b47:	e8 7c ff ff ff       	call   c0025ac8 <APIC::getBase()>
c0025b4c:	83 c4 10             	add    esp,0x10
c0025b4f:	89 c2                	mov    edx,eax
c0025b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b54:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b5a:	0f b6 f8             	movzx  edi,al
c0025b5d:	89 d0                	mov    eax,edx
c0025b5f:	ba 00 00 00 00       	mov    edx,0x0
c0025b64:	89 c1                	mov    ecx,eax
c0025b66:	80 e5 ff             	and    ch,0xff
c0025b69:	89 cb                	mov    ebx,ecx
c0025b6b:	0f b6 f2             	movzx  esi,dl
c0025b6e:	89 d8                	mov    eax,ebx
c0025b70:	89 f2                	mov    edx,esi
c0025b72:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b75:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b78:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b7c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b80:	83 e0 00             	and    eax,0x0
c0025b83:	09 d0                	or     eax,edx
c0025b85:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b8c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b92:	8d 50 01             	lea    edx,[eax+0x1]
c0025b95:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b98:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b9e:	0f b6 d0             	movzx  edx,al
c0025ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba4:	83 c2 08             	add    edx,0x8
c0025ba7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bab:	0f b6 c9             	movzx  ecx,cl
c0025bae:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025bb4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025bb8:	83 ec 0c             	sub    esp,0xc
c0025bbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bbe:	e8 05 ff ff ff       	call   c0025ac8 <APIC::getBase()>
c0025bc3:	83 c4 10             	add    esp,0x10
c0025bc6:	05 f0 00 00 00       	add    eax,0xf0
c0025bcb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025bce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bd3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bd6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025bdd:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025be4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025be7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bea:	89 10                	mov    DWORD PTR [eax],edx
c0025bec:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025bf3:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c0025bf8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025bfb:	7d 7c                	jge    c0025c79 <APIC::open(int, int, void*)+0x141>
c0025bfd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c00:	8b 04 85 a0 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffced60]
c0025c07:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025c0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c0d:	8b 04 85 a0 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffced60]
c0025c14:	c1 e8 08             	shr    eax,0x8
c0025c17:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025c1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c1e:	8b 04 85 a0 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffced60]
c0025c25:	c1 e8 18             	shr    eax,0x18
c0025c28:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025c2b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025c2f:	75 40                	jne    c0025c71 <APIC::open(int, int, void*)+0x139>
c0025c31:	83 ec 0c             	sub    esp,0xc
c0025c34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c37:	e8 8c fe ff ff       	call   c0025ac8 <APIC::getBase()>
c0025c3c:	83 c4 10             	add    esp,0x10
c0025c3f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025c43:	75 07                	jne    c0025c4c <APIC::open(int, int, void*)+0x114>
c0025c45:	ba 60 03 00 00       	mov    edx,0x360
c0025c4a:	eb 05                	jmp    c0025c51 <APIC::open(int, int, void*)+0x119>
c0025c4c:	ba 50 03 00 00       	mov    edx,0x350
c0025c51:	01 d0                	add    eax,edx
c0025c53:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c56:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c5b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025c5e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025c65:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025c69:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025c6c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c6f:	89 10                	mov    DWORD PTR [eax],edx
c0025c71:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025c74:	e9 7a ff ff ff       	jmp    c0025bf3 <APIC::open(int, int, void*)+0xbb>
c0025c79:	b8 00 00 00 00       	mov    eax,0x0
c0025c7e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c81:	5b                   	pop    ebx
c0025c82:	5e                   	pop    esi
c0025c83:	5f                   	pop    edi
c0025c84:	5d                   	pop    ebp
c0025c85:	c3                   	ret    

c0025c86 <IOAPIC::IOAPIC()>:
c0025c86:	83 ec 0c             	sub    esp,0xc
c0025c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8d:	83 ec 08             	sub    esp,0x8
c0025c90:	68 80 d6 02 c0       	push   0xc002d680
c0025c95:	50                   	push   eax
c0025c96:	e8 45 e7 fe ff       	call   c00143e0 <Device::Device(char const*)>
c0025c9b:	83 c4 10             	add    esp,0x10
c0025c9e:	ba a8 d7 02 c0       	mov    edx,0xc002d7a8
c0025ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca7:	89 10                	mov    DWORD PTR [eax],edx
c0025ca9:	90                   	nop
c0025caa:	83 c4 0c             	add    esp,0xc
c0025cad:	c3                   	ret    

c0025cae <APIC::APIC()>:
c0025cae:	53                   	push   ebx
c0025caf:	83 ec 18             	sub    esp,0x18
c0025cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025cb6:	83 ec 08             	sub    esp,0x8
c0025cb9:	68 88 d6 02 c0       	push   0xc002d688
c0025cbe:	50                   	push   eax
c0025cbf:	e8 96 ee fe ff       	call   c0014b5a <InterruptController::InterruptController(char const*)>
c0025cc4:	83 c4 10             	add    esp,0x10
c0025cc7:	ba 60 d7 02 c0       	mov    edx,0xc002d760
c0025ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025cd0:	89 10                	mov    DWORD PTR [eax],edx
c0025cd2:	a0 60 2d 03 c0       	mov    al,ds:0xc0032d60
c0025cd7:	83 f0 01             	xor    eax,0x1
c0025cda:	84 c0                	test   al,al
c0025cdc:	0f 84 a1 00 00 00    	je     c0025d83 <APIC::APIC()+0xd5>
c0025ce2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025ce7:	a0 40 13 03 c0       	mov    al,ds:0xc0031340
c0025cec:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025cf0:	0f 83 86 00 00 00    	jae    c0025d7c <APIC::APIC()+0xce>
c0025cf6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025cfe:	83 ec 0c             	sub    esp,0xc
c0025d01:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d05:	e8 41 9b fe ff       	call   c000f84b <malloc>
c0025d0a:	83 c4 10             	add    esp,0x10
c0025d0d:	89 c3                	mov    ebx,eax
c0025d0f:	83 ec 0c             	sub    esp,0xc
c0025d12:	53                   	push   ebx
c0025d13:	e8 6e ff ff ff       	call   c0025c86 <IOAPIC::IOAPIC()>
c0025d18:	83 c4 10             	add    esp,0x10
c0025d1b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025d1f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025d28:	89 14 85 40 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd2c0],edx
c0025d2f:	a1 20 2d 03 c0       	mov    eax,ds:0xc0032d20
c0025d34:	40                   	inc    eax
c0025d35:	a3 20 2d 03 c0       	mov    ds:0xc0032d20,eax
c0025d3a:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c0025d3f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025d45:	83 ec 08             	sub    esp,0x8
c0025d48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d4c:	50                   	push   eax
c0025d4d:	e8 9e e4 fe ff       	call   c00141f0 <Device::addChild(Device*)>
c0025d52:	83 c4 10             	add    esp,0x10
c0025d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d5b:	83 c0 08             	add    eax,0x8
c0025d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d60:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025d65:	6a 00                	push   0x0
c0025d67:	6a 00                	push   0x0
c0025d69:	52                   	push   edx
c0025d6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025d6e:	ff d0                	call   eax
c0025d70:	83 c4 10             	add    esp,0x10
c0025d73:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025d77:	e9 6b ff ff ff       	jmp    c0025ce7 <APIC::APIC()+0x39>
c0025d7c:	c6 05 60 2d 03 c0 01 	mov    BYTE PTR ds:0xc0032d60,0x1
c0025d83:	90                   	nop
c0025d84:	83 c4 18             	add    esp,0x18
c0025d87:	5b                   	pop    ebx
c0025d88:	c3                   	ret    
c0025d89:	90                   	nop

c0025d8a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025d8a:	55                   	push   ebp
c0025d8b:	89 e5                	mov    ebp,esp
c0025d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025d96:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025d99:	72 1d                	jb     c0025db8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d9e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025da7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025dad:	01 d0                	add    eax,edx
c0025daf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025db2:	73 04                	jae    c0025db8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025db4:	b0 01                	mov    al,0x1
c0025db6:	eb 02                	jmp    c0025dba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025db8:	b0 00                	mov    al,0x0
c0025dba:	5d                   	pop    ebp
c0025dbb:	c3                   	ret    

c0025dbc <IOAPIC::read(int)>:
c0025dbc:	55                   	push   ebp
c0025dbd:	89 e5                	mov    ebp,esp
c0025dbf:	83 ec 10             	sub    esp,0x10
c0025dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dc5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025dcb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025dce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd1:	0f b6 d0             	movzx  edx,al
c0025dd4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025dd7:	89 10                	mov    DWORD PTR [eax],edx
c0025dd9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ddc:	83 c0 10             	add    eax,0x10
c0025ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025de1:	c9                   	leave  
c0025de2:	c3                   	ret    
c0025de3:	90                   	nop

c0025de4 <IOAPIC::open(int, int, void*)>:
c0025de4:	55                   	push   ebp
c0025de5:	89 e5                	mov    ebp,esp
c0025de7:	57                   	push   edi
c0025de8:	56                   	push   esi
c0025de9:	53                   	push   ebx
c0025dea:	83 ec 0c             	sub    esp,0xc
c0025ded:	83 ec 0c             	sub    esp,0xc
c0025df0:	68 b3 d6 02 c0       	push   0xc002d6b3
c0025df5:	e8 c9 cf fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025dfa:	83 c4 10             	add    esp,0x10
c0025dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e12:	8b 14 85 80 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec80]
c0025e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e2b:	8b 14 85 00 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec00]
c0025e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e35:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e47:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025e4d:	0f b6 f8             	movzx  edi,al
c0025e50:	89 d0                	mov    eax,edx
c0025e52:	ba 00 00 00 00       	mov    edx,0x0
c0025e57:	89 c1                	mov    ecx,eax
c0025e59:	80 e5 ff             	and    ch,0xff
c0025e5c:	89 cb                	mov    ebx,ecx
c0025e5e:	0f b6 f2             	movzx  esi,dl
c0025e61:	89 d8                	mov    eax,ebx
c0025e63:	89 f2                	mov    edx,esi
c0025e65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025e68:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025e6b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025e6f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025e73:	83 e0 00             	and    eax,0x0
c0025e76:	09 d0                	or     eax,edx
c0025e78:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e7f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025e85:	8d 50 01             	lea    edx,[eax+0x1]
c0025e88:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025e8b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025e91:	0f b6 d0             	movzx  edx,al
c0025e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e97:	83 c2 08             	add    edx,0x8
c0025e9a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025e9e:	0f b6 c9             	movzx  ecx,cl
c0025ea1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ea7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025eab:	83 ec 08             	sub    esp,0x8
c0025eae:	6a 01                	push   0x1
c0025eb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eb3:	e8 04 ff ff ff       	call   c0025dbc <IOAPIC::read(int)>
c0025eb8:	83 c4 10             	add    esp,0x10
c0025ebb:	c1 f8 10             	sar    eax,0x10
c0025ebe:	0f b6 c0             	movzx  eax,al
c0025ec1:	8d 50 01             	lea    edx,[eax+0x1]
c0025ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ec7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025ecd:	b8 00 00 00 00       	mov    eax,0x0
c0025ed2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ed5:	5b                   	pop    ebx
c0025ed6:	5e                   	pop    esi
c0025ed7:	5f                   	pop    edi
c0025ed8:	5d                   	pop    ebp
c0025ed9:	c3                   	ret    

c0025eda <IOAPIC::write(int, int)>:
c0025eda:	55                   	push   ebp
c0025edb:	89 e5                	mov    ebp,esp
c0025edd:	83 ec 10             	sub    esp,0x10
c0025ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ee3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ee9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025eec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eef:	0f b6 d0             	movzx  edx,al
c0025ef2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ef5:	89 10                	mov    DWORD PTR [eax],edx
c0025ef7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025efa:	8d 50 10             	lea    edx,[eax+0x10]
c0025efd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f00:	89 02                	mov    DWORD PTR [edx],eax
c0025f02:	90                   	nop
c0025f03:	c9                   	leave  
c0025f04:	c3                   	ret    
c0025f05:	90                   	nop

c0025f06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025f06:	55                   	push   ebp
c0025f07:	89 e5                	mov    ebp,esp
c0025f09:	53                   	push   ebx
c0025f0a:	83 ec 2c             	sub    esp,0x2c
c0025f0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f10:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025f13:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025f16:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025f19:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f1c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f22:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f25:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f28:	88 d8                	mov    al,bl
c0025f2a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025f2d:	88 c8                	mov    al,cl
c0025f2f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025f32:	88 d0                	mov    al,dl
c0025f34:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025f37:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025f3b:	83 c0 08             	add    eax,0x8
c0025f3e:	01 c0                	add    eax,eax
c0025f40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f43:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025f47:	83 c0 08             	add    eax,0x8
c0025f4a:	01 c0                	add    eax,eax
c0025f4c:	40                   	inc    eax
c0025f4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025f50:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025f53:	50                   	push   eax
c0025f54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f57:	e8 60 fe ff ff       	call   c0025dbc <IOAPIC::read(int)>
c0025f5c:	83 c4 08             	add    esp,0x8
c0025f5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025f62:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025f69:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025f6c:	c1 e0 18             	shl    eax,0x18
c0025f6f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025f72:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025f78:	52                   	push   edx
c0025f79:	50                   	push   eax
c0025f7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f7d:	e8 58 ff ff ff       	call   c0025eda <IOAPIC::write(int, int)>
c0025f82:	83 c4 0c             	add    esp,0xc
c0025f85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f88:	50                   	push   eax
c0025f89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f8c:	e8 2b fe ff ff       	call   c0025dbc <IOAPIC::read(int)>
c0025f91:	83 c4 08             	add    esp,0x8
c0025f94:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f97:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025f9e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025fa5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025fac:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025fb0:	74 09                	je     c0025fbb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025fb2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025fb9:	eb 07                	jmp    c0025fc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025fbb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025fc2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025fc6:	74 09                	je     c0025fd1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025fc8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025fcf:	eb 07                	jmp    c0025fd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025fd1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025fd8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025fdf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025fe3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025fe6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025fe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fec:	52                   	push   edx
c0025fed:	50                   	push   eax
c0025fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff1:	e8 e4 fe ff ff       	call   c0025eda <IOAPIC::write(int, int)>
c0025ff6:	83 c4 0c             	add    esp,0xc
c0025ff9:	90                   	nop
c0025ffa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025ffd:	c9                   	leave  
c0025ffe:	c3                   	ret    
c0025fff:	90                   	nop

c0026000 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026000:	55                   	push   ebp
c0026001:	89 e5                	mov    ebp,esp
c0026003:	57                   	push   edi
c0026004:	56                   	push   esi
c0026005:	53                   	push   ebx
c0026006:	83 ec 2c             	sub    esp,0x2c
c0026009:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002600c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002600f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026013:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026017:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002601b:	74 5a                	je     c0026077 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002601d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026021:	7f 44                	jg     c0026067 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026026:	05 00 dc 02 c0       	add    eax,0xc002dc00
c002602b:	8a 00                	mov    al,BYTE PTR [eax]
c002602d:	0f b6 c0             	movzx  eax,al
c0026030:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026033:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026036:	66 8b 84 00 20 13 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcece0]
c002603e:	0f b7 c0             	movzx  eax,ax
c0026041:	83 e0 02             	and    eax,0x2
c0026044:	85 c0                	test   eax,eax
c0026046:	74 04                	je     c002604c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026048:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002604c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002604f:	66 8b 84 00 20 13 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcece0]
c0026057:	0f b7 c0             	movzx  eax,ax
c002605a:	83 e0 08             	and    eax,0x8
c002605d:	85 c0                	test   eax,eax
c002605f:	74 16                	je     c0026077 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026061:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026065:	eb 10                	jmp    c0026077 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026067:	83 ec 0c             	sub    esp,0xc
c002606a:	68 c4 d6 02 c0       	push   0xc002d6c4
c002606f:	e8 e3 45 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0026074:	83 c4 10             	add    esp,0x10
c0026077:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002607b:	a1 20 2d 03 c0       	mov    eax,ds:0xc0032d20
c0026080:	83 ec 08             	sub    esp,0x8
c0026083:	50                   	push   eax
c0026084:	68 fc d6 02 c0       	push   0xc002d6fc
c0026089:	e8 35 cd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002608e:	83 c4 10             	add    esp,0x10
c0026091:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026098:	a1 20 2d 03 c0       	mov    eax,ds:0xc0032d20
c002609d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00260a0:	7d 67                	jge    c0026109 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00260a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260a5:	8b 04 85 40 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd2c0]
c00260ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260af:	83 ec 08             	sub    esp,0x8
c00260b2:	52                   	push   edx
c00260b3:	50                   	push   eax
c00260b4:	e8 d1 fc ff ff       	call   c0025d8a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00260b9:	83 c4 10             	add    esp,0x10
c00260bc:	84 c0                	test   al,al
c00260be:	74 44                	je     c0026104 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00260c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260c3:	8b 1c 85 40 2d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd2c0]
c00260ca:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00260ce:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260d1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00260d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260d8:	83 c0 20             	add    eax,0x20
c00260db:	0f b6 f0             	movzx  esi,al
c00260de:	b8 00 00 00 00       	mov    eax,0x0
c00260e3:	99                   	cdq    
c00260e4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00260e7:	0f b6 c9             	movzx  ecx,cl
c00260ea:	83 ec 04             	sub    esp,0x4
c00260ed:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00260f0:	57                   	push   edi
c00260f1:	56                   	push   esi
c00260f2:	52                   	push   edx
c00260f3:	50                   	push   eax
c00260f4:	51                   	push   ecx
c00260f5:	53                   	push   ebx
c00260f6:	e8 0b fe ff ff       	call   c0025f06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00260fb:	83 c4 20             	add    esp,0x20
c00260fe:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026102:	eb 05                	jmp    c0026109 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026104:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026107:	eb 8f                	jmp    c0026098 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026109:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002610c:	83 f0 01             	xor    eax,0x1
c002610f:	84 c0                	test   al,al
c0026111:	74 10                	je     c0026123 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026113:	83 ec 0c             	sub    esp,0xc
c0026116:	68 13 d7 02 c0       	push   0xc002d713
c002611b:	e8 37 45 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0026120:	83 c4 10             	add    esp,0x10
c0026123:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026127:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002612e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026132:	7f 65                	jg     c0026199 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026137:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002613a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026141:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026144:	01 ca                	add    edx,ecx
c0026146:	83 c2 54             	add    edx,0x54
c0026149:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002614d:	85 c0                	test   eax,eax
c002614f:	75 43                	jne    c0026194 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026154:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026157:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002615e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026161:	01 ca                	add    edx,ecx
c0026163:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026166:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026169:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026170:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026173:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002617a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002617d:	01 ca                	add    edx,ecx
c002617f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026185:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026188:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002618c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002618f:	83 e8 20             	sub    eax,0x20
c0026192:	eb 1a                	jmp    c00261ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026194:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026197:	eb 95                	jmp    c002612e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026199:	83 ec 0c             	sub    esp,0xc
c002619c:	68 20 d7 02 c0       	push   0xc002d720
c00261a1:	e8 b1 44 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c00261a6:	83 c4 10             	add    esp,0x10
c00261a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00261ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261b1:	5b                   	pop    ebx
c00261b2:	5e                   	pop    esi
c00261b3:	5f                   	pop    edi
c00261b4:	5d                   	pop    ebp
c00261b5:	c3                   	ret    

c00261b6 <PIC::disable()>:
c00261b6:	55                   	push   ebp
c00261b7:	89 e5                	mov    ebp,esp
c00261b9:	83 ec 10             	sub    esp,0x10
c00261bc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00261c2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00261c6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00261c9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00261cd:	ee                   	out    dx,al
c00261ce:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00261d4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00261d8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00261db:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00261df:	ee                   	out    dx,al
c00261e0:	90                   	nop
c00261e1:	c9                   	leave  
c00261e2:	c3                   	ret    
c00261e3:	90                   	nop

c00261e4 <PIC::close(int, int, void*)>:
c00261e4:	55                   	push   ebp
c00261e5:	89 e5                	mov    ebp,esp
c00261e7:	83 ec 08             	sub    esp,0x8
c00261ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ef:	83 c0 3c             	add    eax,0x3c
c00261f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00261f4:	83 ec 0c             	sub    esp,0xc
c00261f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fa:	ff d0                	call   eax
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	b8 00 00 00 00       	mov    eax,0x0
c0026204:	c9                   	leave  
c0026205:	c3                   	ret    

c0026206 <PIC::PIC()>:
c0026206:	83 ec 0c             	sub    esp,0xc
c0026209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620d:	83 ec 08             	sub    esp,0x8
c0026210:	68 cc d7 02 c0       	push   0xc002d7cc
c0026215:	50                   	push   eax
c0026216:	e8 3f e9 fe ff       	call   c0014b5a <InterruptController::InterruptController(char const*)>
c002621b:	83 c4 10             	add    esp,0x10
c002621e:	ba f8 d7 02 c0       	mov    edx,0xc002d7f8
c0026223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026227:	89 10                	mov    DWORD PTR [eax],edx
c0026229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026233:	0f b6 d0             	movzx  edx,al
c0026236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002624b:	0f b6 d0             	movzx  edx,al
c002624e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026252:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026261:	8d 50 01             	lea    edx,[eax+0x1]
c0026264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026268:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002626e:	0f b6 d0             	movzx  edx,al
c0026271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026275:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026279:	83 e1 3f             	and    ecx,0x3f
c002627c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026284:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002628a:	0f b6 d0             	movzx  edx,al
c002628d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026291:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262a2:	0f b6 d0             	movzx  edx,al
c00262a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262b8:	8d 50 01             	lea    edx,[eax+0x1]
c00262bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262bf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00262c5:	0f b6 d0             	movzx  edx,al
c00262c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00262d0:	83 e1 3f             	and    ecx,0x3f
c00262d3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00262d7:	90                   	nop
c00262d8:	83 c4 0c             	add    esp,0xc
c00262db:	c3                   	ret    

c00262dc <PIC::ioWait()>:
c00262dc:	eb 00                	jmp    c00262de <PIC::ioWait()+0x2>
c00262de:	eb 00                	jmp    c00262e0 <PIC::ioWait()+0x4>
c00262e0:	90                   	nop
c00262e1:	c3                   	ret    

c00262e2 <PIC::getIRQReg(int)>:
c00262e2:	55                   	push   ebp
c00262e3:	89 e5                	mov    ebp,esp
c00262e5:	83 ec 10             	sub    esp,0x10
c00262e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262eb:	0f b6 c0             	movzx  eax,al
c00262ee:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00262f4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00262f7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262fa:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262fe:	ee                   	out    dx,al
c00262ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026302:	0f b6 c0             	movzx  eax,al
c0026305:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002630b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002630e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026311:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026315:	ee                   	out    dx,al
c0026316:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002631c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026320:	89 c2                	mov    edx,eax
c0026322:	ec                   	in     al,dx
c0026323:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026326:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026329:	0f b6 c0             	movzx  eax,al
c002632c:	c1 e0 08             	shl    eax,0x8
c002632f:	89 c1                	mov    ecx,eax
c0026331:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026337:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002633b:	89 c2                	mov    edx,eax
c002633d:	ec                   	in     al,dx
c002633e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026341:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026344:	0f b6 c0             	movzx  eax,al
c0026347:	09 c8                	or     eax,ecx
c0026349:	c9                   	leave  
c002634a:	c3                   	ret    
c002634b:	90                   	nop

c002634c <PIC::eoi(unsigned char)>:
c002634c:	55                   	push   ebp
c002634d:	89 e5                	mov    ebp,esp
c002634f:	83 ec 14             	sub    esp,0x14
c0026352:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026355:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026358:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002635c:	75 1e                	jne    c002637c <PIC::eoi(unsigned char)+0x30>
c002635e:	6a 0b                	push   0xb
c0026360:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026363:	e8 7a ff ff ff       	call   c00262e2 <PIC::getIRQReg(int)>
c0026368:	83 c4 08             	add    esp,0x8
c002636b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002636f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026373:	25 80 00 00 00       	and    eax,0x80
c0026378:	85 c0                	test   eax,eax
c002637a:	74 5f                	je     c00263db <PIC::eoi(unsigned char)+0x8f>
c002637c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026380:	75 2d                	jne    c00263af <PIC::eoi(unsigned char)+0x63>
c0026382:	6a 0b                	push   0xb
c0026384:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026387:	e8 56 ff ff ff       	call   c00262e2 <PIC::getIRQReg(int)>
c002638c:	83 c4 08             	add    esp,0x8
c002638f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026393:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026396:	66 85 c0             	test   ax,ax
c0026399:	78 14                	js     c00263af <PIC::eoi(unsigned char)+0x63>
c002639b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00263a1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00263a5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00263a8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00263ac:	ee                   	out    dx,al
c00263ad:	eb 2d                	jmp    c00263dc <PIC::eoi(unsigned char)+0x90>
c00263af:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00263b3:	76 12                	jbe    c00263c7 <PIC::eoi(unsigned char)+0x7b>
c00263b5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00263bb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00263bf:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263c2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263c6:	ee                   	out    dx,al
c00263c7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00263cd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00263d1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00263d4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00263d8:	ee                   	out    dx,al
c00263d9:	eb 01                	jmp    c00263dc <PIC::eoi(unsigned char)+0x90>
c00263db:	90                   	nop
c00263dc:	c9                   	leave  
c00263dd:	c3                   	ret    

c00263de <PIC::remap()>:
c00263de:	55                   	push   ebp
c00263df:	89 e5                	mov    ebp,esp
c00263e1:	83 ec 48             	sub    esp,0x48
c00263e4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00263eb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00263f2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00263f8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00263fb:	89 c2                	mov    edx,eax
c00263fd:	ec                   	in     al,dx
c00263fe:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026401:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026404:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026407:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002640d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026410:	89 c2                	mov    edx,eax
c0026412:	ec                   	in     al,dx
c0026413:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026416:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026419:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002641c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026422:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026426:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026429:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002642c:	ee                   	out    dx,al
c002642d:	83 ec 0c             	sub    esp,0xc
c0026430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026433:	e8 a4 fe ff ff       	call   c00262dc <PIC::ioWait()>
c0026438:	83 c4 10             	add    esp,0x10
c002643b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026441:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026445:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026448:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002644b:	ee                   	out    dx,al
c002644c:	83 ec 0c             	sub    esp,0xc
c002644f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026452:	e8 85 fe ff ff       	call   c00262dc <PIC::ioWait()>
c0026457:	83 c4 10             	add    esp,0x10
c002645a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002645d:	0f b6 c0             	movzx  eax,al
c0026460:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026466:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026469:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002646c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002646f:	ee                   	out    dx,al
c0026470:	83 ec 0c             	sub    esp,0xc
c0026473:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026476:	e8 61 fe ff ff       	call   c00262dc <PIC::ioWait()>
c002647b:	83 c4 10             	add    esp,0x10
c002647e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026481:	0f b6 c0             	movzx  eax,al
c0026484:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002648a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002648d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026490:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026493:	ee                   	out    dx,al
c0026494:	83 ec 0c             	sub    esp,0xc
c0026497:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002649a:	e8 3d fe ff ff       	call   c00262dc <PIC::ioWait()>
c002649f:	83 c4 10             	add    esp,0x10
c00264a2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00264a8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00264ac:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00264af:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00264b2:	ee                   	out    dx,al
c00264b3:	83 ec 0c             	sub    esp,0xc
c00264b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264b9:	e8 1e fe ff ff       	call   c00262dc <PIC::ioWait()>
c00264be:	83 c4 10             	add    esp,0x10
c00264c1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00264c7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00264cb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00264ce:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00264d1:	ee                   	out    dx,al
c00264d2:	83 ec 0c             	sub    esp,0xc
c00264d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264d8:	e8 ff fd ff ff       	call   c00262dc <PIC::ioWait()>
c00264dd:	83 c4 10             	add    esp,0x10
c00264e0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00264e6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00264ea:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00264ed:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00264f0:	ee                   	out    dx,al
c00264f1:	83 ec 0c             	sub    esp,0xc
c00264f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264f7:	e8 e0 fd ff ff       	call   c00262dc <PIC::ioWait()>
c00264fc:	83 c4 10             	add    esp,0x10
c00264ff:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026505:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026509:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002650c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002650f:	ee                   	out    dx,al
c0026510:	83 ec 0c             	sub    esp,0xc
c0026513:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026516:	e8 c1 fd ff ff       	call   c00262dc <PIC::ioWait()>
c002651b:	83 c4 10             	add    esp,0x10
c002651e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026522:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026528:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002652b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002652e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026531:	ee                   	out    dx,al
c0026532:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026536:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002653c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002653f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026542:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026545:	ee                   	out    dx,al
c0026546:	90                   	nop
c0026547:	c9                   	leave  
c0026548:	c3                   	ret    
c0026549:	90                   	nop

c002654a <PIC::open(int, int, void*)>:
c002654a:	55                   	push   ebp
c002654b:	89 e5                	mov    ebp,esp
c002654d:	83 ec 18             	sub    esp,0x18
c0026550:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026556:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002655a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002655d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026561:	ee                   	out    dx,al
c0026562:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026568:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002656c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002656f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026573:	ee                   	out    dx,al
c0026574:	83 ec 0c             	sub    esp,0xc
c0026577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002657a:	e8 5f fe ff ff       	call   c00263de <PIC::remap()>
c002657f:	83 c4 10             	add    esp,0x10
c0026582:	b8 00 00 00 00       	mov    eax,0x0
c0026587:	c9                   	leave  
c0026588:	c3                   	ret    
c0026589:	90                   	nop

c002658a <APICTimer::close(int, int, void*)>:
c002658a:	b8 00 00 00 00       	mov    eax,0x0
c002658f:	c3                   	ret    

c0026590 <apicTimerHandler(regs*, void*)>:
c0026590:	83 ec 0c             	sub    esp,0xc
c0026593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026597:	8b 00                	mov    eax,DWORD PTR [eax]
c0026599:	99                   	cdq    
c002659a:	52                   	push   edx
c002659b:	50                   	push   eax
c002659c:	6a 00                	push   0x0
c002659e:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265a3:	e8 8c 07 00 00       	call   c0026d34 <__udivdi3>
c00265a8:	83 c4 10             	add    esp,0x10
c00265ab:	83 ec 08             	sub    esp,0x8
c00265ae:	52                   	push   edx
c00265af:	50                   	push   eax
c00265b0:	e8 b8 06 ff ff       	call   c0016c6d <timerHandler(unsigned long long)>
c00265b5:	83 c4 10             	add    esp,0x10
c00265b8:	90                   	nop
c00265b9:	83 c4 0c             	add    esp,0xc
c00265bc:	c3                   	ret    
c00265bd:	90                   	nop

c00265be <APICTimer::write(int)>:
c00265be:	53                   	push   ebx
c00265bf:	83 ec 28             	sub    esp,0x28
c00265c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00265c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00265ca:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00265d0:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00265d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00265db:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00265e1:	83 ec 0c             	sub    esp,0xc
c00265e4:	50                   	push   eax
c00265e5:	e8 de f4 ff ff       	call   c0025ac8 <APIC::getBase()>
c00265ea:	83 c4 10             	add    esp,0x10
c00265ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00265f1:	a1 30 f0 02 c0       	mov    eax,ds:0xc002f030
c00265f6:	8b 15 34 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f034
c00265fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026600:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026608:	05 e0 03 00 00       	add    eax,0x3e0
c002660d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026617:	05 80 03 00 00       	add    eax,0x380
c002661c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026622:	fb                   	sti    
c0026623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002662b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026630:	83 d2 00             	adc    edx,0x0
c0026633:	89 c1                	mov    ecx,eax
c0026635:	89 d3                	mov    ebx,edx
c0026637:	a1 30 f0 02 c0       	mov    eax,ds:0xc002f030
c002663c:	8b 15 34 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f034
c0026642:	39 c8                	cmp    eax,ecx
c0026644:	89 d0                	mov    eax,edx
c0026646:	19 d8                	sbb    eax,ebx
c0026648:	73 02                	jae    c002664c <APICTimer::write(int)+0x8e>
c002664a:	eb d7                	jmp    c0026623 <APICTimer::write(int)+0x65>
c002664c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026650:	05 20 03 00 00       	add    eax,0x320
c0026655:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002665b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002665f:	05 90 03 00 00       	add    eax,0x390
c0026664:	8b 00                	mov    eax,DWORD PTR [eax]
c0026666:	f7 d0                	not    eax
c0026668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002666c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026674:	ba 00 00 00 00       	mov    edx,0x0
c0026679:	f7 f3                	div    ebx
c002667b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002667f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026683:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026689:	0d 00 00 02 00       	or     eax,0x20000
c002668e:	89 c2                	mov    edx,eax
c0026690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026694:	05 20 03 00 00       	add    eax,0x320
c0026699:	89 10                	mov    DWORD PTR [eax],edx
c002669b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002669f:	05 e0 03 00 00       	add    eax,0x3e0
c00266a4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00266aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266ae:	05 80 03 00 00       	add    eax,0x380
c00266b3:	89 c2                	mov    edx,eax
c00266b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00266b9:	89 02                	mov    DWORD PTR [edx],eax
c00266bb:	90                   	nop
c00266bc:	83 c4 28             	add    esp,0x28
c00266bf:	5b                   	pop    ebx
c00266c0:	c3                   	ret    
c00266c1:	90                   	nop

c00266c2 <APICTimer::open(int, int, void*)>:
c00266c2:	57                   	push   edi
c00266c3:	56                   	push   esi
c00266c4:	53                   	push   ebx
c00266c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00266cb:	83 c0 24             	add    eax,0x24
c00266ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d0:	83 ec 08             	sub    esp,0x8
c00266d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266db:	ff d0                	call   eax
c00266dd:	83 c4 10             	add    esp,0x10
c00266e0:	a1 a8 e9 02 c0       	mov    eax,ds:0xc002e9a8
c00266e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00266eb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00266f1:	83 ec 0c             	sub    esp,0xc
c00266f4:	50                   	push   eax
c00266f5:	e8 ce f3 ff ff       	call   c0025ac8 <APIC::getBase()>
c00266fa:	83 c4 10             	add    esp,0x10
c00266fd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026707:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002670d:	0f b6 f8             	movzx  edi,al
c0026710:	89 d0                	mov    eax,edx
c0026712:	ba 00 00 00 00       	mov    edx,0x0
c0026717:	89 c1                	mov    ecx,eax
c0026719:	80 e5 ff             	and    ch,0xff
c002671c:	89 cb                	mov    ebx,ecx
c002671e:	0f b6 f2             	movzx  esi,dl
c0026721:	89 d8                	mov    eax,ebx
c0026723:	89 f2                	mov    edx,esi
c0026725:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026729:	8d 5f 08             	lea    ebx,[edi+0x8]
c002672c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026730:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026734:	83 e0 00             	and    eax,0x0
c0026737:	09 d0                	or     eax,edx
c0026739:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002673d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026741:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026747:	8d 50 01             	lea    edx,[eax+0x1]
c002674a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002674e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026754:	0f b6 d0             	movzx  edx,al
c0026757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002675b:	83 c2 08             	add    edx,0x8
c002675e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026762:	0f b6 c9             	movzx  ecx,cl
c0026765:	81 c9 00 00 01 00    	or     ecx,0x10000
c002676b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002676f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026777:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002677d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026781:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026785:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002678b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002678f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026795:	83 ec 0c             	sub    esp,0xc
c0026798:	51                   	push   ecx
c0026799:	6a 01                	push   0x1
c002679b:	68 90 65 02 c0       	push   0xc0026590
c00267a0:	52                   	push   edx
c00267a1:	50                   	push   eax
c00267a2:	e8 cd d9 fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00267a7:	83 c4 20             	add    esp,0x20
c00267aa:	89 c2                	mov    edx,eax
c00267ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00267b6:	b8 00 00 00 00       	mov    eax,0x0
c00267bb:	5b                   	pop    ebx
c00267bc:	5e                   	pop    esi
c00267bd:	5f                   	pop    edi
c00267be:	c3                   	ret    
c00267bf:	90                   	nop

c00267c0 <APICTimer::APICTimer()>:
c00267c0:	83 ec 0c             	sub    esp,0xc
c00267c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c7:	83 ec 08             	sub    esp,0x8
c00267ca:	68 38 d8 02 c0       	push   0xc002d838
c00267cf:	50                   	push   eax
c00267d0:	e8 09 04 ff ff       	call   c0016bde <Timer::Timer(char const*)>
c00267d5:	83 c4 10             	add    esp,0x10
c00267d8:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c00267dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e1:	89 10                	mov    DWORD PTR [eax],edx
c00267e3:	90                   	nop
c00267e4:	83 c4 0c             	add    esp,0xc
c00267e7:	c3                   	ret    

c00267e8 <PIT::write(int)>:
c00267e8:	83 ec 10             	sub    esp,0x10
c00267eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00267f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00267f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00267fd:	a3 64 2d 03 c0       	mov    ds:0xc0032d64,eax
c0026802:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026807:	99                   	cdq    
c0026808:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002680c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026810:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026817:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002681c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026820:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026825:	ee                   	out    dx,al
c0026826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002682a:	0f b6 c0             	movzx  eax,al
c002682d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026834:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026838:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002683c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026841:	ee                   	out    dx,al
c0026842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026846:	c1 f8 08             	sar    eax,0x8
c0026849:	0f b6 c0             	movzx  eax,al
c002684c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026853:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026857:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002685b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026860:	ee                   	out    dx,al
c0026861:	90                   	nop
c0026862:	83 c4 10             	add    esp,0x10
c0026865:	c3                   	ret    

c0026866 <pitHandler(regs*, void*)>:
c0026866:	83 ec 0c             	sub    esp,0xc
c0026869:	a1 64 2d 03 c0       	mov    eax,ds:0xc0032d64
c002686e:	99                   	cdq    
c002686f:	52                   	push   edx
c0026870:	50                   	push   eax
c0026871:	6a 00                	push   0x0
c0026873:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026878:	e8 b7 04 00 00       	call   c0026d34 <__udivdi3>
c002687d:	83 c4 10             	add    esp,0x10
c0026880:	83 ec 08             	sub    esp,0x8
c0026883:	52                   	push   edx
c0026884:	50                   	push   eax
c0026885:	e8 e3 03 ff ff       	call   c0016c6d <timerHandler(unsigned long long)>
c002688a:	83 c4 10             	add    esp,0x10
c002688d:	90                   	nop
c002688e:	83 c4 0c             	add    esp,0xc
c0026891:	c3                   	ret    

c0026892 <PIT::open(int, int, void*)>:
c0026892:	83 ec 0c             	sub    esp,0xc
c0026895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026899:	8b 00                	mov    eax,DWORD PTR [eax]
c002689b:	83 c0 24             	add    eax,0x24
c002689e:	8b 00                	mov    eax,DWORD PTR [eax]
c00268a0:	83 ec 08             	sub    esp,0x8
c00268a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268ab:	ff d0                	call   eax
c00268ad:	83 c4 10             	add    esp,0x10
c00268b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b4:	83 ec 0c             	sub    esp,0xc
c00268b7:	6a 00                	push   0x0
c00268b9:	6a 01                	push   0x1
c00268bb:	68 66 68 02 c0       	push   0xc0026866
c00268c0:	6a 00                	push   0x0
c00268c2:	50                   	push   eax
c00268c3:	e8 ac d8 fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00268c8:	83 c4 20             	add    esp,0x20
c00268cb:	89 c2                	mov    edx,eax
c00268cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00268d7:	b8 00 00 00 00       	mov    eax,0x0
c00268dc:	83 c4 0c             	add    esp,0xc
c00268df:	c3                   	ret    

c00268e0 <PIT::close(int, int, void*)>:
c00268e0:	83 ec 0c             	sub    esp,0xc
c00268e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00268f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268f5:	6a 01                	push   0x1
c00268f7:	68 66 68 02 c0       	push   0xc0026866
c00268fc:	6a 00                	push   0x0
c00268fe:	50                   	push   eax
c00268ff:	e8 ae d8 fe ff       	call   c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026904:	83 c4 10             	add    esp,0x10
c0026907:	b8 00 00 00 00       	mov    eax,0x0
c002690c:	83 c4 0c             	add    esp,0xc
c002690f:	c3                   	ret    

c0026910 <PIT::PIT()>:
c0026910:	83 ec 0c             	sub    esp,0xc
c0026913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026917:	83 ec 08             	sub    esp,0x8
c002691a:	68 74 d8 02 c0       	push   0xc002d874
c002691f:	50                   	push   eax
c0026920:	e8 b9 02 ff ff       	call   c0016bde <Timer::Timer(char const*)>
c0026925:	83 c4 10             	add    esp,0x10
c0026928:	ba 9c d8 02 c0       	mov    edx,0xc002d89c
c002692d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026931:	89 10                	mov    DWORD PTR [eax],edx
c0026933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026937:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002693d:	0f b6 d0             	movzx  edx,al
c0026940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026944:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002694b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002694f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026955:	0f b6 d0             	movzx  edx,al
c0026958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002695c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026965:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002696b:	8d 50 01             	lea    edx,[eax+0x1]
c002696e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026972:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026978:	0f b6 d0             	movzx  edx,al
c002697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026983:	83 e1 3f             	and    ecx,0x3f
c0026986:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002698a:	90                   	nop
c002698b:	83 c4 0c             	add    esp,0xc
c002698e:	c3                   	ret    
c002698f:	90                   	nop

c0026990 <avxDetect>:
c0026990:	b8 00 00 00 00       	mov    eax,0x0
c0026995:	c3                   	ret    

c0026996 <avxSave>:
c0026996:	c3                   	ret    

c0026997 <avxLoad>:
c0026997:	c3                   	ret    

c0026998 <avxInit>:
c0026998:	c3                   	ret    

c0026999 <avxClose>:
c0026999:	c3                   	ret    

c002699a <wouldSheSayYes>:
c002699a:	c3                   	ret    
c002699b:	49                   	dec    ecx
c002699c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00269a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00269a4:	75 20                	jne    c00269c6 <sseDetect.noSSE+0x1>
c00269a6:	4e                   	dec    esi
c00269a7:	79 61                	jns    c0026a0a <x87Detect+0x14>
c00269a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00269ae:	66 90                	xchg   ax,ax

c00269b0 <absolutelyNoChanceInHell>:
c00269b0:	b8 01 00 00 00       	mov    eax,0x1
c00269b5:	0f a2                	cpuid  
c00269b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00269bd:	74 06                	je     c00269c5 <sseDetect.noSSE>
c00269bf:	b8 01 00 00 00       	mov    eax,0x1
c00269c4:	c3                   	ret    

c00269c5 <sseDetect.noSSE>:
c00269c5:	31 c0                	xor    eax,eax
c00269c7:	c3                   	ret    

c00269c8 <sseSave>:
c00269c8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00269cd:	c3                   	ret    

c00269ce <sseLoad>:
c00269ce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00269d3:	c3                   	ret    

c00269d4 <sseInit>:
c00269d4:	e8 49 00 00 00       	call   c0026a22 <x87Init>
c00269d9:	0f 20 e0             	mov    eax,cr4
c00269dc:	66 0d 00 06          	or     ax,0x600
c00269e0:	0f 22 e0             	mov    cr4,eax
c00269e3:	c3                   	ret    

c00269e4 <sseClose>:
c00269e4:	c3                   	ret    
c00269e5:	66 90                	xchg   ax,ax
c00269e7:	66 90                	xchg   ax,ax
c00269e9:	66 90                	xchg   ax,ax
c00269eb:	66 90                	xchg   ax,ax
c00269ed:	66 90                	xchg   ax,ax
c00269ef:	90                   	nop

c00269f0 <value_37F>:
c00269f0:	7f 03                	jg     c00269f5 <value_37A+0x1>

c00269f2 <value_37E>:
c00269f2:	7e 03                	jle    c00269f7 <x87Detect+0x1>

c00269f4 <value_37A>:
c00269f4:	7a 03                	jp     c00269f9 <x87Detect+0x3>

c00269f6 <x87Detect>:
c00269f6:	b8 01 00 00 00       	mov    eax,0x1
c00269fb:	0f a2                	cpuid  
c00269fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026a03:	74 06                	je     c0026a0b <x87Detect.nox87>
c0026a05:	b8 01 00 00 00       	mov    eax,0x1
c0026a0a:	c3                   	ret    

c0026a0b <x87Detect.nox87>:
c0026a0b:	b8 00 00 00 00       	mov    eax,0x0
c0026a10:	c3                   	ret    

c0026a11 <x87Save>:
c0026a11:	55                   	push   ebp
c0026a12:	89 e5                	mov    ebp,esp
c0026a14:	9b dd 75 08          	fsave  [ebp+0x8]
c0026a18:	c9                   	leave  
c0026a19:	c3                   	ret    

c0026a1a <x87Load>:
c0026a1a:	55                   	push   ebp
c0026a1b:	89 e5                	mov    ebp,esp
c0026a1d:	dd 65 08             	frstor [ebp+0x8]
c0026a20:	c9                   	leave  
c0026a21:	c3                   	ret    

c0026a22 <x87Init>:
c0026a22:	9b db e3             	finit  
c0026a25:	0f 20 c0             	mov    eax,cr0
c0026a28:	66 25 fb ff          	and    ax,0xfffb
c0026a2c:	66 0d 22 00          	or     ax,0x22
c0026a30:	0f 22 c0             	mov    cr0,eax
c0026a33:	0f 06                	clts   
c0026a35:	d9 2d f4 69 02 c0    	fldcw  WORD PTR ds:0xc00269f4
c0026a3b:	c3                   	ret    

c0026a3c <x87Close>:
c0026a3c:	c3                   	ret    
c0026a3d:	66 90                	xchg   ax,ax
c0026a3f:	90                   	nop

c0026a40 <__do_global_ctors_aux>:
c0026a40:	a1 6c 96 02 c0       	mov    eax,ds:0xc002966c
c0026a45:	83 f8 ff             	cmp    eax,0xffffffff
c0026a48:	74 1a                	je     c0026a64 <__do_global_ctors_aux+0x24>
c0026a4a:	55                   	push   ebp
c0026a4b:	89 e5                	mov    ebp,esp
c0026a4d:	53                   	push   ebx
c0026a4e:	52                   	push   edx
c0026a4f:	bb 6c 96 02 c0       	mov    ebx,0xc002966c
c0026a54:	ff d0                	call   eax
c0026a56:	83 eb 04             	sub    ebx,0x4
c0026a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026a5b:	83 f8 ff             	cmp    eax,0xffffffff
c0026a5e:	75 f4                	jne    c0026a54 <__do_global_ctors_aux+0x14>
c0026a60:	58                   	pop    eax
c0026a61:	5b                   	pop    ebx
c0026a62:	5d                   	pop    ebp
c0026a63:	c3                   	ret    
c0026a64:	c3                   	ret    
c0026a65:	66 90                	xchg   ax,ax
c0026a67:	90                   	nop

c0026a68 <__divdi3>:
c0026a68:	55                   	push   ebp
c0026a69:	57                   	push   edi
c0026a6a:	56                   	push   esi
c0026a6b:	53                   	push   ebx
c0026a6c:	83 ec 1c             	sub    esp,0x1c
c0026a6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026a73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026a7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026a7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026a82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a86:	85 db                	test   ebx,ebx
c0026a88:	0f 88 8e 00 00 00    	js     c0026b1c <__divdi3+0xb4>
c0026a8e:	89 dd                	mov    ebp,ebx
c0026a90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026a98:	89 d3                	mov    ebx,edx
c0026a9a:	85 d2                	test   edx,edx
c0026a9c:	79 0d                	jns    c0026aab <__divdi3+0x43>
c0026a9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026aa2:	f7 d8                	neg    eax
c0026aa4:	83 d2 00             	adc    edx,0x0
c0026aa7:	f7 da                	neg    edx
c0026aa9:	89 d3                	mov    ebx,edx
c0026aab:	89 c7                	mov    edi,eax
c0026aad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026ab0:	85 db                	test   ebx,ebx
c0026ab2:	75 48                	jne    c0026afc <__divdi3+0x94>
c0026ab4:	39 ef                	cmp    edi,ebp
c0026ab6:	76 24                	jbe    c0026adc <__divdi3+0x74>
c0026ab8:	89 ea                	mov    edx,ebp
c0026aba:	f7 f7                	div    edi
c0026abc:	89 c1                	mov    ecx,eax
c0026abe:	31 f6                	xor    esi,esi
c0026ac0:	89 c8                	mov    eax,ecx
c0026ac2:	89 f2                	mov    edx,esi
c0026ac4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ac8:	85 c9                	test   ecx,ecx
c0026aca:	74 07                	je     c0026ad3 <__divdi3+0x6b>
c0026acc:	f7 d8                	neg    eax
c0026ace:	83 d2 00             	adc    edx,0x0
c0026ad1:	f7 da                	neg    edx
c0026ad3:	83 c4 1c             	add    esp,0x1c
c0026ad6:	5b                   	pop    ebx
c0026ad7:	5e                   	pop    esi
c0026ad8:	5f                   	pop    edi
c0026ad9:	5d                   	pop    ebp
c0026ada:	c3                   	ret    
c0026adb:	90                   	nop
c0026adc:	85 ff                	test   edi,edi
c0026ade:	75 0b                	jne    c0026aeb <__divdi3+0x83>
c0026ae0:	b8 01 00 00 00       	mov    eax,0x1
c0026ae5:	31 d2                	xor    edx,edx
c0026ae7:	f7 f3                	div    ebx
c0026ae9:	89 c7                	mov    edi,eax
c0026aeb:	31 d2                	xor    edx,edx
c0026aed:	89 e8                	mov    eax,ebp
c0026aef:	f7 f7                	div    edi
c0026af1:	89 c6                	mov    esi,eax
c0026af3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026af6:	f7 f7                	div    edi
c0026af8:	89 c1                	mov    ecx,eax
c0026afa:	eb c4                	jmp    c0026ac0 <__divdi3+0x58>
c0026afc:	39 eb                	cmp    ebx,ebp
c0026afe:	77 3c                	ja     c0026b3c <__divdi3+0xd4>
c0026b00:	0f bd f3             	bsr    esi,ebx
c0026b03:	83 f6 1f             	xor    esi,0x1f
c0026b06:	75 40                	jne    c0026b48 <__divdi3+0xe0>
c0026b08:	39 eb                	cmp    ebx,ebp
c0026b0a:	72 09                	jb     c0026b15 <__divdi3+0xad>
c0026b0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026b0f:	0f 87 97 00 00 00    	ja     c0026bac <__divdi3+0x144>
c0026b15:	b9 01 00 00 00       	mov    ecx,0x1
c0026b1a:	eb a4                	jmp    c0026ac0 <__divdi3+0x58>
c0026b1c:	f7 d9                	neg    ecx
c0026b1e:	83 d3 00             	adc    ebx,0x0
c0026b21:	f7 db                	neg    ebx
c0026b23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b2a:	89 dd                	mov    ebp,ebx
c0026b2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026b34:	e9 5f ff ff ff       	jmp    c0026a98 <__divdi3+0x30>
c0026b39:	8d 76 00             	lea    esi,[esi+0x0]
c0026b3c:	31 f6                	xor    esi,esi
c0026b3e:	31 c9                	xor    ecx,ecx
c0026b40:	e9 7b ff ff ff       	jmp    c0026ac0 <__divdi3+0x58>
c0026b45:	8d 76 00             	lea    esi,[esi+0x0]
c0026b48:	b8 20 00 00 00       	mov    eax,0x20
c0026b4d:	29 f0                	sub    eax,esi
c0026b4f:	89 f1                	mov    ecx,esi
c0026b51:	d3 e3                	shl    ebx,cl
c0026b53:	89 fa                	mov    edx,edi
c0026b55:	88 c1                	mov    cl,al
c0026b57:	d3 ea                	shr    edx,cl
c0026b59:	09 da                	or     edx,ebx
c0026b5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026b5f:	89 f1                	mov    ecx,esi
c0026b61:	d3 e7                	shl    edi,cl
c0026b63:	89 eb                	mov    ebx,ebp
c0026b65:	88 c1                	mov    cl,al
c0026b67:	d3 eb                	shr    ebx,cl
c0026b69:	89 f1                	mov    ecx,esi
c0026b6b:	d3 e5                	shl    ebp,cl
c0026b6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026b70:	88 c1                	mov    cl,al
c0026b72:	d3 ea                	shr    edx,cl
c0026b74:	09 d5                	or     ebp,edx
c0026b76:	89 e8                	mov    eax,ebp
c0026b78:	89 da                	mov    edx,ebx
c0026b7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026b7e:	89 d3                	mov    ebx,edx
c0026b80:	89 c5                	mov    ebp,eax
c0026b82:	f7 e7                	mul    edi
c0026b84:	39 d3                	cmp    ebx,edx
c0026b86:	72 18                	jb     c0026ba0 <__divdi3+0x138>
c0026b88:	74 0a                	je     c0026b94 <__divdi3+0x12c>
c0026b8a:	89 e9                	mov    ecx,ebp
c0026b8c:	31 f6                	xor    esi,esi
c0026b8e:	e9 2d ff ff ff       	jmp    c0026ac0 <__divdi3+0x58>
c0026b93:	90                   	nop
c0026b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026b97:	89 f1                	mov    ecx,esi
c0026b99:	d3 e7                	shl    edi,cl
c0026b9b:	39 c7                	cmp    edi,eax
c0026b9d:	73 eb                	jae    c0026b8a <__divdi3+0x122>
c0026b9f:	90                   	nop
c0026ba0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026ba3:	31 f6                	xor    esi,esi
c0026ba5:	e9 16 ff ff ff       	jmp    c0026ac0 <__divdi3+0x58>
c0026baa:	66 90                	xchg   ax,ax
c0026bac:	31 c9                	xor    ecx,ecx
c0026bae:	e9 0d ff ff ff       	jmp    c0026ac0 <__divdi3+0x58>
c0026bb3:	90                   	nop

c0026bb4 <__moddi3>:
c0026bb4:	55                   	push   ebp
c0026bb5:	57                   	push   edi
c0026bb6:	56                   	push   esi
c0026bb7:	53                   	push   ebx
c0026bb8:	83 ec 2c             	sub    esp,0x2c
c0026bbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026bbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026bc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026bc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026bcb:	85 db                	test   ebx,ebx
c0026bcd:	0f 88 85 00 00 00    	js     c0026c58 <__moddi3+0xa4>
c0026bd3:	89 de                	mov    esi,ebx
c0026bd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026bdd:	89 d7                	mov    edi,edx
c0026bdf:	85 d2                	test   edx,edx
c0026be1:	79 09                	jns    c0026bec <__moddi3+0x38>
c0026be3:	f7 d8                	neg    eax
c0026be5:	83 d2 00             	adc    edx,0x0
c0026be8:	f7 da                	neg    edx
c0026bea:	89 d7                	mov    edi,edx
c0026bec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026bf0:	89 cd                	mov    ebp,ecx
c0026bf2:	85 ff                	test   edi,edi
c0026bf4:	75 52                	jne    c0026c48 <__moddi3+0x94>
c0026bf6:	89 c3                	mov    ebx,eax
c0026bf8:	39 f0                	cmp    eax,esi
c0026bfa:	76 24                	jbe    c0026c20 <__moddi3+0x6c>
c0026bfc:	89 c8                	mov    eax,ecx
c0026bfe:	89 f2                	mov    edx,esi
c0026c00:	f7 f3                	div    ebx
c0026c02:	89 d6                	mov    esi,edx
c0026c04:	89 f0                	mov    eax,esi
c0026c06:	31 d2                	xor    edx,edx
c0026c08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c0c:	85 c9                	test   ecx,ecx
c0026c0e:	74 07                	je     c0026c17 <__moddi3+0x63>
c0026c10:	f7 d8                	neg    eax
c0026c12:	83 d2 00             	adc    edx,0x0
c0026c15:	f7 da                	neg    edx
c0026c17:	83 c4 2c             	add    esp,0x2c
c0026c1a:	5b                   	pop    ebx
c0026c1b:	5e                   	pop    esi
c0026c1c:	5f                   	pop    edi
c0026c1d:	5d                   	pop    ebp
c0026c1e:	c3                   	ret    
c0026c1f:	90                   	nop
c0026c20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026c24:	85 db                	test   ebx,ebx
c0026c26:	75 0d                	jne    c0026c35 <__moddi3+0x81>
c0026c28:	b8 01 00 00 00       	mov    eax,0x1
c0026c2d:	31 d2                	xor    edx,edx
c0026c2f:	f7 f7                	div    edi
c0026c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c35:	89 f0                	mov    eax,esi
c0026c37:	31 d2                	xor    edx,edx
c0026c39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026c3d:	f7 f7                	div    edi
c0026c3f:	89 e8                	mov    eax,ebp
c0026c41:	f7 f7                	div    edi
c0026c43:	89 d6                	mov    esi,edx
c0026c45:	eb bd                	jmp    c0026c04 <__moddi3+0x50>
c0026c47:	90                   	nop
c0026c48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026c4c:	39 f7                	cmp    edi,esi
c0026c4e:	76 20                	jbe    c0026c70 <__moddi3+0xbc>
c0026c50:	89 c8                	mov    eax,ecx
c0026c52:	89 f2                	mov    edx,esi
c0026c54:	eb b2                	jmp    c0026c08 <__moddi3+0x54>
c0026c56:	66 90                	xchg   ax,ax
c0026c58:	f7 d9                	neg    ecx
c0026c5a:	83 d3 00             	adc    ebx,0x0
c0026c5d:	f7 db                	neg    ebx
c0026c5f:	89 de                	mov    esi,ebx
c0026c61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026c69:	e9 6f ff ff ff       	jmp    c0026bdd <__moddi3+0x29>
c0026c6e:	66 90                	xchg   ax,ax
c0026c70:	0f bd c7             	bsr    eax,edi
c0026c73:	83 f0 1f             	xor    eax,0x1f
c0026c76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026c7a:	75 24                	jne    c0026ca0 <__moddi3+0xec>
c0026c7c:	39 f7                	cmp    edi,esi
c0026c7e:	72 06                	jb     c0026c86 <__moddi3+0xd2>
c0026c80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026c84:	77 0c                	ja     c0026c92 <__moddi3+0xde>
c0026c86:	89 e9                	mov    ecx,ebp
c0026c88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026c8c:	19 fe                	sbb    esi,edi
c0026c8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026c92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c96:	89 f2                	mov    edx,esi
c0026c98:	e9 6b ff ff ff       	jmp    c0026c08 <__moddi3+0x54>
c0026c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026ca0:	b8 20 00 00 00       	mov    eax,0x20
c0026ca5:	89 c2                	mov    edx,eax
c0026ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026cab:	29 da                	sub    edx,ebx
c0026cad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026cb1:	88 d9                	mov    cl,bl
c0026cb3:	d3 e7                	shl    edi,cl
c0026cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cb9:	88 d1                	mov    cl,dl
c0026cbb:	d3 e8                	shr    eax,cl
c0026cbd:	09 c7                	or     edi,eax
c0026cbf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026cc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026cc7:	89 d8                	mov    eax,ebx
c0026cc9:	88 d9                	mov    cl,bl
c0026ccb:	d3 e7                	shl    edi,cl
c0026ccd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026cd1:	89 f3                	mov    ebx,esi
c0026cd3:	88 d1                	mov    cl,dl
c0026cd5:	d3 eb                	shr    ebx,cl
c0026cd7:	89 c7                	mov    edi,eax
c0026cd9:	88 c1                	mov    cl,al
c0026cdb:	d3 e6                	shl    esi,cl
c0026cdd:	89 e8                	mov    eax,ebp
c0026cdf:	88 d1                	mov    cl,dl
c0026ce1:	d3 e8                	shr    eax,cl
c0026ce3:	09 f0                	or     eax,esi
c0026ce5:	89 f9                	mov    ecx,edi
c0026ce7:	d3 e5                	shl    ebp,cl
c0026ce9:	89 da                	mov    edx,ebx
c0026ceb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026cef:	89 d3                	mov    ebx,edx
c0026cf1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026cf5:	89 c6                	mov    esi,eax
c0026cf7:	89 d1                	mov    ecx,edx
c0026cf9:	39 d3                	cmp    ebx,edx
c0026cfb:	72 27                	jb     c0026d24 <__moddi3+0x170>
c0026cfd:	74 21                	je     c0026d20 <__moddi3+0x16c>
c0026cff:	29 f5                	sub    ebp,esi
c0026d01:	19 cb                	sbb    ebx,ecx
c0026d03:	89 de                	mov    esi,ebx
c0026d05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026d09:	d3 e6                	shl    esi,cl
c0026d0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026d0f:	89 f9                	mov    ecx,edi
c0026d11:	d3 ed                	shr    ebp,cl
c0026d13:	09 ee                	or     esi,ebp
c0026d15:	89 f0                	mov    eax,esi
c0026d17:	d3 eb                	shr    ebx,cl
c0026d19:	89 da                	mov    edx,ebx
c0026d1b:	e9 e8 fe ff ff       	jmp    c0026c08 <__moddi3+0x54>
c0026d20:	39 c5                	cmp    ebp,eax
c0026d22:	73 db                	jae    c0026cff <__moddi3+0x14b>
c0026d24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026d2c:	89 d1                	mov    ecx,edx
c0026d2e:	89 c6                	mov    esi,eax
c0026d30:	eb cd                	jmp    c0026cff <__moddi3+0x14b>
c0026d32:	66 90                	xchg   ax,ax

c0026d34 <__udivdi3>:
c0026d34:	55                   	push   ebp
c0026d35:	57                   	push   edi
c0026d36:	56                   	push   esi
c0026d37:	53                   	push   ebx
c0026d38:	83 ec 1c             	sub    esp,0x1c
c0026d3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026d3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026d47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026d4b:	85 d2                	test   edx,edx
c0026d4d:	75 41                	jne    c0026d90 <__udivdi3+0x5c>
c0026d4f:	39 f7                	cmp    edi,esi
c0026d51:	76 15                	jbe    c0026d68 <__udivdi3+0x34>
c0026d53:	89 e8                	mov    eax,ebp
c0026d55:	89 f2                	mov    edx,esi
c0026d57:	f7 f7                	div    edi
c0026d59:	31 db                	xor    ebx,ebx
c0026d5b:	89 da                	mov    edx,ebx
c0026d5d:	83 c4 1c             	add    esp,0x1c
c0026d60:	5b                   	pop    ebx
c0026d61:	5e                   	pop    esi
c0026d62:	5f                   	pop    edi
c0026d63:	5d                   	pop    ebp
c0026d64:	c3                   	ret    
c0026d65:	8d 76 00             	lea    esi,[esi+0x0]
c0026d68:	89 f9                	mov    ecx,edi
c0026d6a:	85 ff                	test   edi,edi
c0026d6c:	75 0b                	jne    c0026d79 <__udivdi3+0x45>
c0026d6e:	b8 01 00 00 00       	mov    eax,0x1
c0026d73:	31 d2                	xor    edx,edx
c0026d75:	f7 f7                	div    edi
c0026d77:	89 c1                	mov    ecx,eax
c0026d79:	31 d2                	xor    edx,edx
c0026d7b:	89 f0                	mov    eax,esi
c0026d7d:	f7 f1                	div    ecx
c0026d7f:	89 c3                	mov    ebx,eax
c0026d81:	89 e8                	mov    eax,ebp
c0026d83:	f7 f1                	div    ecx
c0026d85:	89 da                	mov    edx,ebx
c0026d87:	83 c4 1c             	add    esp,0x1c
c0026d8a:	5b                   	pop    ebx
c0026d8b:	5e                   	pop    esi
c0026d8c:	5f                   	pop    edi
c0026d8d:	5d                   	pop    ebp
c0026d8e:	c3                   	ret    
c0026d8f:	90                   	nop
c0026d90:	39 f2                	cmp    edx,esi
c0026d92:	77 1c                	ja     c0026db0 <__udivdi3+0x7c>
c0026d94:	0f bd da             	bsr    ebx,edx
c0026d97:	83 f3 1f             	xor    ebx,0x1f
c0026d9a:	75 24                	jne    c0026dc0 <__udivdi3+0x8c>
c0026d9c:	39 f2                	cmp    edx,esi
c0026d9e:	72 08                	jb     c0026da8 <__udivdi3+0x74>
c0026da0:	39 ef                	cmp    edi,ebp
c0026da2:	0f 87 84 00 00 00    	ja     c0026e2c <__udivdi3+0xf8>
c0026da8:	b8 01 00 00 00       	mov    eax,0x1
c0026dad:	eb ac                	jmp    c0026d5b <__udivdi3+0x27>
c0026daf:	90                   	nop
c0026db0:	31 db                	xor    ebx,ebx
c0026db2:	31 c0                	xor    eax,eax
c0026db4:	89 da                	mov    edx,ebx
c0026db6:	83 c4 1c             	add    esp,0x1c
c0026db9:	5b                   	pop    ebx
c0026dba:	5e                   	pop    esi
c0026dbb:	5f                   	pop    edi
c0026dbc:	5d                   	pop    ebp
c0026dbd:	c3                   	ret    
c0026dbe:	66 90                	xchg   ax,ax
c0026dc0:	b8 20 00 00 00       	mov    eax,0x20
c0026dc5:	29 d8                	sub    eax,ebx
c0026dc7:	88 d9                	mov    cl,bl
c0026dc9:	d3 e2                	shl    edx,cl
c0026dcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026dcf:	89 fa                	mov    edx,edi
c0026dd1:	88 c1                	mov    cl,al
c0026dd3:	d3 ea                	shr    edx,cl
c0026dd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026dd9:	09 d1                	or     ecx,edx
c0026ddb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ddf:	88 d9                	mov    cl,bl
c0026de1:	d3 e7                	shl    edi,cl
c0026de3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026de7:	89 f7                	mov    edi,esi
c0026de9:	88 c1                	mov    cl,al
c0026deb:	d3 ef                	shr    edi,cl
c0026ded:	88 d9                	mov    cl,bl
c0026def:	d3 e6                	shl    esi,cl
c0026df1:	89 ea                	mov    edx,ebp
c0026df3:	88 c1                	mov    cl,al
c0026df5:	d3 ea                	shr    edx,cl
c0026df7:	09 d6                	or     esi,edx
c0026df9:	89 f0                	mov    eax,esi
c0026dfb:	89 fa                	mov    edx,edi
c0026dfd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026e01:	89 d7                	mov    edi,edx
c0026e03:	89 c6                	mov    esi,eax
c0026e05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e09:	39 d7                	cmp    edi,edx
c0026e0b:	72 13                	jb     c0026e20 <__udivdi3+0xec>
c0026e0d:	74 09                	je     c0026e18 <__udivdi3+0xe4>
c0026e0f:	89 f0                	mov    eax,esi
c0026e11:	31 db                	xor    ebx,ebx
c0026e13:	e9 43 ff ff ff       	jmp    c0026d5b <__udivdi3+0x27>
c0026e18:	88 d9                	mov    cl,bl
c0026e1a:	d3 e5                	shl    ebp,cl
c0026e1c:	39 c5                	cmp    ebp,eax
c0026e1e:	73 ef                	jae    c0026e0f <__udivdi3+0xdb>
c0026e20:	8d 46 ff             	lea    eax,[esi-0x1]
c0026e23:	31 db                	xor    ebx,ebx
c0026e25:	e9 31 ff ff ff       	jmp    c0026d5b <__udivdi3+0x27>
c0026e2a:	66 90                	xchg   ax,ax
c0026e2c:	31 c0                	xor    eax,eax
c0026e2e:	e9 28 ff ff ff       	jmp    c0026d5b <__udivdi3+0x27>
c0026e33:	90                   	nop

c0026e34 <__umoddi3>:
c0026e34:	55                   	push   ebp
c0026e35:	57                   	push   edi
c0026e36:	56                   	push   esi
c0026e37:	53                   	push   ebx
c0026e38:	83 ec 1c             	sub    esp,0x1c
c0026e3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026e3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026e43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026e47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026e4b:	89 da                	mov    edx,ebx
c0026e4d:	85 c0                	test   eax,eax
c0026e4f:	75 37                	jne    c0026e88 <__umoddi3+0x54>
c0026e51:	39 df                	cmp    edi,ebx
c0026e53:	76 13                	jbe    c0026e68 <__umoddi3+0x34>
c0026e55:	89 f0                	mov    eax,esi
c0026e57:	f7 f7                	div    edi
c0026e59:	89 d0                	mov    eax,edx
c0026e5b:	31 d2                	xor    edx,edx
c0026e5d:	83 c4 1c             	add    esp,0x1c
c0026e60:	5b                   	pop    ebx
c0026e61:	5e                   	pop    esi
c0026e62:	5f                   	pop    edi
c0026e63:	5d                   	pop    ebp
c0026e64:	c3                   	ret    
c0026e65:	8d 76 00             	lea    esi,[esi+0x0]
c0026e68:	89 fd                	mov    ebp,edi
c0026e6a:	85 ff                	test   edi,edi
c0026e6c:	75 0b                	jne    c0026e79 <__umoddi3+0x45>
c0026e6e:	b8 01 00 00 00       	mov    eax,0x1
c0026e73:	31 d2                	xor    edx,edx
c0026e75:	f7 f7                	div    edi
c0026e77:	89 c5                	mov    ebp,eax
c0026e79:	89 d8                	mov    eax,ebx
c0026e7b:	31 d2                	xor    edx,edx
c0026e7d:	f7 f5                	div    ebp
c0026e7f:	89 f0                	mov    eax,esi
c0026e81:	f7 f5                	div    ebp
c0026e83:	89 d0                	mov    eax,edx
c0026e85:	eb d4                	jmp    c0026e5b <__umoddi3+0x27>
c0026e87:	90                   	nop
c0026e88:	89 f1                	mov    ecx,esi
c0026e8a:	39 d8                	cmp    eax,ebx
c0026e8c:	76 0a                	jbe    c0026e98 <__umoddi3+0x64>
c0026e8e:	89 f0                	mov    eax,esi
c0026e90:	83 c4 1c             	add    esp,0x1c
c0026e93:	5b                   	pop    ebx
c0026e94:	5e                   	pop    esi
c0026e95:	5f                   	pop    edi
c0026e96:	5d                   	pop    ebp
c0026e97:	c3                   	ret    
c0026e98:	0f bd e8             	bsr    ebp,eax
c0026e9b:	83 f5 1f             	xor    ebp,0x1f
c0026e9e:	75 1c                	jne    c0026ebc <__umoddi3+0x88>
c0026ea0:	39 d8                	cmp    eax,ebx
c0026ea2:	72 04                	jb     c0026ea8 <__umoddi3+0x74>
c0026ea4:	39 f7                	cmp    edi,esi
c0026ea6:	77 08                	ja     c0026eb0 <__umoddi3+0x7c>
c0026ea8:	89 da                	mov    edx,ebx
c0026eaa:	29 fe                	sub    esi,edi
c0026eac:	19 c2                	sbb    edx,eax
c0026eae:	89 f1                	mov    ecx,esi
c0026eb0:	89 c8                	mov    eax,ecx
c0026eb2:	83 c4 1c             	add    esp,0x1c
c0026eb5:	5b                   	pop    ebx
c0026eb6:	5e                   	pop    esi
c0026eb7:	5f                   	pop    edi
c0026eb8:	5d                   	pop    ebp
c0026eb9:	c3                   	ret    
c0026eba:	66 90                	xchg   ax,ax
c0026ebc:	ba 20 00 00 00       	mov    edx,0x20
c0026ec1:	29 ea                	sub    edx,ebp
c0026ec3:	89 e9                	mov    ecx,ebp
c0026ec5:	d3 e0                	shl    eax,cl
c0026ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ecb:	89 f8                	mov    eax,edi
c0026ecd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ed1:	88 d1                	mov    cl,dl
c0026ed3:	d3 e8                	shr    eax,cl
c0026ed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ed9:	09 c1                	or     ecx,eax
c0026edb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026edf:	89 e9                	mov    ecx,ebp
c0026ee1:	d3 e7                	shl    edi,cl
c0026ee3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026ee7:	89 d8                	mov    eax,ebx
c0026ee9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026eed:	88 d1                	mov    cl,dl
c0026eef:	d3 e8                	shr    eax,cl
c0026ef1:	89 c7                	mov    edi,eax
c0026ef3:	89 e9                	mov    ecx,ebp
c0026ef5:	d3 e3                	shl    ebx,cl
c0026ef7:	89 f0                	mov    eax,esi
c0026ef9:	88 d1                	mov    cl,dl
c0026efb:	d3 e8                	shr    eax,cl
c0026efd:	09 d8                	or     eax,ebx
c0026eff:	89 e9                	mov    ecx,ebp
c0026f01:	d3 e6                	shl    esi,cl
c0026f03:	89 f3                	mov    ebx,esi
c0026f05:	89 fa                	mov    edx,edi
c0026f07:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026f0b:	89 d1                	mov    ecx,edx
c0026f0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026f11:	89 c6                	mov    esi,eax
c0026f13:	89 d7                	mov    edi,edx
c0026f15:	39 d1                	cmp    ecx,edx
c0026f17:	72 27                	jb     c0026f40 <__umoddi3+0x10c>
c0026f19:	74 21                	je     c0026f3c <__umoddi3+0x108>
c0026f1b:	89 ca                	mov    edx,ecx
c0026f1d:	29 f3                	sub    ebx,esi
c0026f1f:	19 fa                	sbb    edx,edi
c0026f21:	89 d0                	mov    eax,edx
c0026f23:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026f27:	d3 e0                	shl    eax,cl
c0026f29:	89 e9                	mov    ecx,ebp
c0026f2b:	d3 eb                	shr    ebx,cl
c0026f2d:	09 d8                	or     eax,ebx
c0026f2f:	d3 ea                	shr    edx,cl
c0026f31:	83 c4 1c             	add    esp,0x1c
c0026f34:	5b                   	pop    ebx
c0026f35:	5e                   	pop    esi
c0026f36:	5f                   	pop    edi
c0026f37:	5d                   	pop    ebp
c0026f38:	c3                   	ret    
c0026f39:	8d 76 00             	lea    esi,[esi+0x0]
c0026f3c:	39 c3                	cmp    ebx,eax
c0026f3e:	73 db                	jae    c0026f1b <__umoddi3+0xe7>
c0026f40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026f44:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026f48:	89 d7                	mov    edi,edx
c0026f4a:	89 c6                	mov    esi,eax
c0026f4c:	eb cd                	jmp    c0026f1b <__umoddi3+0xe7>

c0026f4e <__addsf3>:
c0026f4e:	55                   	push   ebp
c0026f4f:	89 e5                	mov    ebp,esp
c0026f51:	57                   	push   edi
c0026f52:	56                   	push   esi
c0026f53:	53                   	push   ebx
c0026f54:	83 ec 08             	sub    esp,0x8
c0026f57:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026f5a:	89 fa                	mov    edx,edi
c0026f5c:	89 f8                	mov    eax,edi
c0026f5e:	c1 f8 17             	sar    eax,0x17
c0026f61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026f64:	c1 e2 08             	shl    edx,0x8
c0026f67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026f6d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f70:	89 de                	mov    esi,ebx
c0026f72:	c1 fe 17             	sar    esi,0x17
c0026f75:	c1 e3 08             	shl    ebx,0x8
c0026f78:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f7e:	31 f0                	xor    eax,esi
c0026f80:	0f 88 3b 01 00 00    	js     c00270c1 <__addsf3+0x173>
c0026f86:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026f89:	29 f1                	sub    ecx,esi
c0026f8b:	85 c9                	test   ecx,ecx
c0026f8d:	7e 54                	jle    c0026fe3 <__addsf3+0x95>
c0026f8f:	89 f0                	mov    eax,esi
c0026f91:	84 c0                	test   al,al
c0026f93:	75 10                	jne    c0026fa5 <__addsf3+0x57>
c0026f95:	85 db                	test   ebx,ebx
c0026f97:	0f 84 aa 02 00 00    	je     c0027247 <__addsf3+0x2f9>
c0026f9d:	49                   	dec    ecx
c0026f9e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026fa1:	74 38                	je     c0026fdb <__addsf3+0x8d>
c0026fa3:	eb 13                	jmp    c0026fb8 <__addsf3+0x6a>
c0026fa5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026fa8:	f7 d0                	not    eax
c0026faa:	84 c0                	test   al,al
c0026fac:	0f 84 95 02 00 00    	je     c0027247 <__addsf3+0x2f9>
c0026fb2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026fb8:	83 f9 1f             	cmp    ecx,0x1f
c0026fbb:	0f 8f 86 02 00 00    	jg     c0027247 <__addsf3+0x2f9>
c0026fc1:	89 de                	mov    esi,ebx
c0026fc3:	d3 ee                	shr    esi,cl
c0026fc5:	b8 20 00 00 00       	mov    eax,0x20
c0026fca:	29 c8                	sub    eax,ecx
c0026fcc:	89 c1                	mov    ecx,eax
c0026fce:	d3 e3                	shl    ebx,cl
c0026fd0:	31 c0                	xor    eax,eax
c0026fd2:	85 db                	test   ebx,ebx
c0026fd4:	0f 95 c0             	setne  al
c0026fd7:	09 f0                	or     eax,esi
c0026fd9:	01 d0                	add    eax,edx
c0026fdb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fde:	e9 b6 00 00 00       	jmp    c0027099 <__addsf3+0x14b>
c0026fe3:	74 5c                	je     c0027041 <__addsf3+0xf3>
c0026fe5:	89 f1                	mov    ecx,esi
c0026fe7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026fea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ff1:	75 14                	jne    c0027007 <__addsf3+0xb9>
c0026ff3:	85 d2                	test   edx,edx
c0026ff5:	0f 84 4c 02 00 00    	je     c0027247 <__addsf3+0x2f9>
c0026ffb:	49                   	dec    ecx
c0026ffc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026fff:	0f 84 94 00 00 00    	je     c0027099 <__addsf3+0x14b>
c0027005:	eb 12                	jmp    c0027019 <__addsf3+0xcb>
c0027007:	89 f0                	mov    eax,esi
c0027009:	f7 d0                	not    eax
c002700b:	84 c0                	test   al,al
c002700d:	0f 84 34 02 00 00    	je     c0027247 <__addsf3+0x2f9>
c0027013:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027019:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002701c:	83 f9 1f             	cmp    ecx,0x1f
c002701f:	0f 8f 22 02 00 00    	jg     c0027247 <__addsf3+0x2f9>
c0027025:	89 d7                	mov    edi,edx
c0027027:	d3 ef                	shr    edi,cl
c0027029:	b8 20 00 00 00       	mov    eax,0x20
c002702e:	29 c8                	sub    eax,ecx
c0027030:	89 c1                	mov    ecx,eax
c0027032:	d3 e2                	shl    edx,cl
c0027034:	31 c0                	xor    eax,eax
c0027036:	85 d2                	test   edx,edx
c0027038:	0f 95 c0             	setne  al
c002703b:	09 f8                	or     eax,edi
c002703d:	01 d8                	add    eax,ebx
c002703f:	eb 58                	jmp    c0027099 <__addsf3+0x14b>
c0027041:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027044:	8d 70 01             	lea    esi,[eax+0x1]
c0027047:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002704d:	75 32                	jne    c0027081 <__addsf3+0x133>
c002704f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027053:	75 1f                	jne    c0027074 <__addsf3+0x126>
c0027055:	85 d2                	test   edx,edx
c0027057:	0f 84 e0 01 00 00    	je     c002723d <__addsf3+0x2ef>
c002705d:	85 db                	test   ebx,ebx
c002705f:	0f 84 e2 01 00 00    	je     c0027247 <__addsf3+0x2f9>
c0027065:	89 d0                	mov    eax,edx
c0027067:	01 d8                	add    eax,ebx
c0027069:	0f 89 a9 01 00 00    	jns    c0027218 <__addsf3+0x2ca>
c002706f:	e9 9d 01 00 00       	jmp    c0027211 <__addsf3+0x2c3>
c0027074:	85 d2                	test   edx,edx
c0027076:	0f 85 cb 01 00 00    	jne    c0027247 <__addsf3+0x2f9>
c002707c:	e9 bc 01 00 00       	jmp    c002723d <__addsf3+0x2ef>
c0027081:	31 c0                	xor    eax,eax
c0027083:	89 f1                	mov    ecx,esi
c0027085:	f7 d1                	not    ecx
c0027087:	84 c9                	test   cl,cl
c0027089:	0f 84 90 01 00 00    	je     c002721f <__addsf3+0x2d1>
c002708f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027092:	d1 e8                	shr    eax,1
c0027094:	e9 86 01 00 00       	jmp    c002721f <__addsf3+0x2d1>
c0027099:	85 c0                	test   eax,eax
c002709b:	0f 89 7e 01 00 00    	jns    c002721f <__addsf3+0x2d1>
c00270a1:	46                   	inc    esi
c00270a2:	89 f2                	mov    edx,esi
c00270a4:	f7 d2                	not    edx
c00270a6:	84 d2                	test   dl,dl
c00270a8:	0f 84 6f 01 00 00    	je     c002721d <__addsf3+0x2cf>
c00270ae:	89 c2                	mov    edx,eax
c00270b0:	83 e2 01             	and    edx,0x1
c00270b3:	d1 e8                	shr    eax,1
c00270b5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00270ba:	09 d0                	or     eax,edx
c00270bc:	e9 5e 01 00 00       	jmp    c002721f <__addsf3+0x2d1>
c00270c1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00270c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00270c8:	89 f0                	mov    eax,esi
c00270ca:	0f b6 c0             	movzx  eax,al
c00270cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00270d0:	29 c1                	sub    ecx,eax
c00270d2:	85 c9                	test   ecx,ecx
c00270d4:	7e 55                	jle    c002712b <__addsf3+0x1dd>
c00270d6:	85 c0                	test   eax,eax
c00270d8:	75 11                	jne    c00270eb <__addsf3+0x19d>
c00270da:	85 db                	test   ebx,ebx
c00270dc:	0f 84 65 01 00 00    	je     c0027247 <__addsf3+0x2f9>
c00270e2:	49                   	dec    ecx
c00270e3:	75 19                	jne    c00270fe <__addsf3+0x1b0>
c00270e5:	89 d0                	mov    eax,edx
c00270e7:	29 d8                	sub    eax,ebx
c00270e9:	eb 38                	jmp    c0027123 <__addsf3+0x1d5>
c00270eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270ee:	f7 d0                	not    eax
c00270f0:	84 c0                	test   al,al
c00270f2:	0f 84 4f 01 00 00    	je     c0027247 <__addsf3+0x2f9>
c00270f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270fe:	83 f9 1f             	cmp    ecx,0x1f
c0027101:	0f 8f 40 01 00 00    	jg     c0027247 <__addsf3+0x2f9>
c0027107:	89 de                	mov    esi,ebx
c0027109:	d3 ee                	shr    esi,cl
c002710b:	b8 20 00 00 00       	mov    eax,0x20
c0027110:	29 c8                	sub    eax,ecx
c0027112:	89 c1                	mov    ecx,eax
c0027114:	d3 e3                	shl    ebx,cl
c0027116:	31 c0                	xor    eax,eax
c0027118:	85 db                	test   ebx,ebx
c002711a:	0f 95 c0             	setne  al
c002711d:	09 f0                	or     eax,esi
c002711f:	29 c2                	sub    edx,eax
c0027121:	89 d0                	mov    eax,edx
c0027123:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027126:	e9 af 00 00 00       	jmp    c00271da <__addsf3+0x28c>
c002712b:	74 5c                	je     c0027189 <__addsf3+0x23b>
c002712d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027130:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027133:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027137:	75 14                	jne    c002714d <__addsf3+0x1ff>
c0027139:	85 d2                	test   edx,edx
c002713b:	0f 84 06 01 00 00    	je     c0027247 <__addsf3+0x2f9>
c0027141:	48                   	dec    eax
c0027142:	75 1b                	jne    c002715f <__addsf3+0x211>
c0027144:	89 d8                	mov    eax,ebx
c0027146:	29 d0                	sub    eax,edx
c0027148:	e9 8d 00 00 00       	jmp    c00271da <__addsf3+0x28c>
c002714d:	89 f1                	mov    ecx,esi
c002714f:	f7 d1                	not    ecx
c0027151:	84 c9                	test   cl,cl
c0027153:	0f 84 ee 00 00 00    	je     c0027247 <__addsf3+0x2f9>
c0027159:	81 ca 00 00 00 80    	or     edx,0x80000000
c002715f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027162:	83 f8 1f             	cmp    eax,0x1f
c0027165:	0f 8f dc 00 00 00    	jg     c0027247 <__addsf3+0x2f9>
c002716b:	89 d7                	mov    edi,edx
c002716d:	88 c1                	mov    cl,al
c002716f:	d3 ef                	shr    edi,cl
c0027171:	b9 20 00 00 00       	mov    ecx,0x20
c0027176:	29 c1                	sub    ecx,eax
c0027178:	d3 e2                	shl    edx,cl
c002717a:	31 c0                	xor    eax,eax
c002717c:	85 d2                	test   edx,edx
c002717e:	0f 95 c0             	setne  al
c0027181:	09 f8                	or     eax,edi
c0027183:	29 c3                	sub    ebx,eax
c0027185:	89 d8                	mov    eax,ebx
c0027187:	eb 51                	jmp    c00271da <__addsf3+0x28c>
c0027189:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002718c:	40                   	inc    eax
c002718d:	a8 fe                	test   al,0xfe
c002718f:	75 3d                	jne    c00271ce <__addsf3+0x280>
c0027191:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027195:	0f 85 a7 00 00 00    	jne    c0027242 <__addsf3+0x2f4>
c002719b:	85 d2                	test   edx,edx
c002719d:	75 12                	jne    c00271b1 <__addsf3+0x263>
c002719f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271a2:	85 db                	test   ebx,ebx
c00271a4:	0f 85 9d 00 00 00    	jne    c0027247 <__addsf3+0x2f9>
c00271aa:	31 ff                	xor    edi,edi
c00271ac:	e9 96 00 00 00       	jmp    c0027247 <__addsf3+0x2f9>
c00271b1:	85 db                	test   ebx,ebx
c00271b3:	0f 84 8e 00 00 00    	je     c0027247 <__addsf3+0x2f9>
c00271b9:	89 d0                	mov    eax,edx
c00271bb:	29 d8                	sub    eax,ebx
c00271bd:	79 06                	jns    c00271c5 <__addsf3+0x277>
c00271bf:	89 d8                	mov    eax,ebx
c00271c1:	29 d0                	sub    eax,edx
c00271c3:	eb 5a                	jmp    c002721f <__addsf3+0x2d1>
c00271c5:	bf 00 00 00 00       	mov    edi,0x0
c00271ca:	74 7b                	je     c0027247 <__addsf3+0x2f9>
c00271cc:	eb 4a                	jmp    c0027218 <__addsf3+0x2ca>
c00271ce:	89 d0                	mov    eax,edx
c00271d0:	29 d8                	sub    eax,ebx
c00271d2:	79 12                	jns    c00271e6 <__addsf3+0x298>
c00271d4:	89 d8                	mov    eax,ebx
c00271d6:	29 d0                	sub    eax,edx
c00271d8:	eb 09                	jmp    c00271e3 <__addsf3+0x295>
c00271da:	85 c0                	test   eax,eax
c00271dc:	79 41                	jns    c002721f <__addsf3+0x2d1>
c00271de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271e3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00271e6:	31 f6                	xor    esi,esi
c00271e8:	85 c0                	test   eax,eax
c00271ea:	74 33                	je     c002721f <__addsf3+0x2d1>
c00271ec:	0f bd c8             	bsr    ecx,eax
c00271ef:	83 f1 1f             	xor    ecx,0x1f
c00271f2:	d3 e0                	shl    eax,cl
c00271f4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00271f8:	39 ca                	cmp    edx,ecx
c00271fa:	7f 10                	jg     c002720c <__addsf3+0x2be>
c00271fc:	29 d1                	sub    ecx,edx
c00271fe:	41                   	inc    ecx
c00271ff:	d3 e8                	shr    eax,cl
c0027201:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027204:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002720a:	eb 13                	jmp    c002721f <__addsf3+0x2d1>
c002720c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002720f:	29 ce                	sub    esi,ecx
c0027211:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027216:	eb 07                	jmp    c002721f <__addsf3+0x2d1>
c0027218:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002721b:	eb 02                	jmp    c002721f <__addsf3+0x2d1>
c002721d:	31 c0                	xor    eax,eax
c002721f:	89 c2                	mov    edx,eax
c0027221:	c1 ea 08             	shr    edx,0x8
c0027224:	a8 7f                	test   al,0x7f
c0027226:	0f 95 c1             	setne  cl
c0027229:	09 d1                	or     ecx,edx
c002722b:	83 e1 01             	and    ecx,0x1
c002722e:	c1 e8 07             	shr    eax,0x7
c0027231:	21 c8                	and    eax,ecx
c0027233:	c1 e6 17             	shl    esi,0x17
c0027236:	09 d6                	or     esi,edx
c0027238:	8d 3c 30             	lea    edi,[eax+esi*1]
c002723b:	eb 0a                	jmp    c0027247 <__addsf3+0x2f9>
c002723d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027240:	eb 05                	jmp    c0027247 <__addsf3+0x2f9>
c0027242:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027247:	89 f8                	mov    eax,edi
c0027249:	5a                   	pop    edx
c002724a:	59                   	pop    ecx
c002724b:	5b                   	pop    ebx
c002724c:	5e                   	pop    esi
c002724d:	5f                   	pop    edi
c002724e:	5d                   	pop    ebp
c002724f:	c3                   	ret    

c0027250 <__subsf3>:
c0027250:	55                   	push   ebp
c0027251:	89 e5                	mov    ebp,esp
c0027253:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027256:	05 00 00 00 80       	add    eax,0x80000000
c002725b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002725e:	5d                   	pop    ebp
c002725f:	e9 ea fc ff ff       	jmp    c0026f4e <__addsf3>

c0027264 <__negsf2>:
c0027264:	55                   	push   ebp
c0027265:	89 e5                	mov    ebp,esp
c0027267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002726a:	05 00 00 00 80       	add    eax,0x80000000
c002726f:	5d                   	pop    ebp
c0027270:	c3                   	ret    

c0027271 <__mulsf3>:
c0027271:	55                   	push   ebp
c0027272:	89 e5                	mov    ebp,esp
c0027274:	57                   	push   edi
c0027275:	56                   	push   esi
c0027276:	53                   	push   ebx
c0027277:	83 ec 1c             	sub    esp,0x1c
c002727a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002727d:	89 f0                	mov    eax,esi
c002727f:	89 f1                	mov    ecx,esi
c0027281:	c1 f9 17             	sar    ecx,0x17
c0027284:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027287:	c1 e0 08             	shl    eax,0x8
c002728a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002728f:	89 c1                	mov    ecx,eax
c0027291:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027294:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027297:	89 c7                	mov    edi,eax
c0027299:	c1 ff 17             	sar    edi,0x17
c002729c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00272a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00272a3:	89 f8                	mov    eax,edi
c00272a5:	0f b6 c0             	movzx  eax,al
c00272a8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00272ab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00272af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00272b2:	42                   	inc    edx
c00272b3:	80 e2 fe             	and    dl,0xfe
c00272b6:	75 7b                	jne    c0027333 <__mulsf3+0xc2>
c00272b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272bc:	74 54                	je     c0027312 <__mulsf3+0xa1>
c00272be:	85 c9                	test   ecx,ecx
c00272c0:	0f 85 64 01 00 00    	jne    c002742a <__mulsf3+0x1b9>
c00272c6:	8d 57 01             	lea    edx,[edi+0x1]
c00272c9:	80 e2 fe             	and    dl,0xfe
c00272cc:	75 1f                	jne    c00272ed <__mulsf3+0x7c>
c00272ce:	85 c0                	test   eax,eax
c00272d0:	b8 00 00 00 00       	mov    eax,0x0
c00272d5:	74 29                	je     c0027300 <__mulsf3+0x8f>
c00272d7:	53                   	push   ebx
c00272d8:	53                   	push   ebx
c00272d9:	50                   	push   eax
c00272da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272dd:	e8 96 05 00 00       	call   c0027878 <__nesf2>
c00272e2:	83 c4 10             	add    esp,0x10
c00272e5:	85 c0                	test   eax,eax
c00272e7:	0f 85 3a 01 00 00    	jne    c0027427 <__mulsf3+0x1b6>
c00272ed:	85 ff                	test   edi,edi
c00272ef:	0f 89 35 01 00 00    	jns    c002742a <__mulsf3+0x1b9>
c00272f5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00272fb:	e9 2a 01 00 00       	jmp    c002742a <__mulsf3+0x1b9>
c0027300:	51                   	push   ecx
c0027301:	51                   	push   ecx
c0027302:	50                   	push   eax
c0027303:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027306:	e8 6d 05 00 00       	call   c0027878 <__nesf2>
c002730b:	83 c4 10             	add    esp,0x10
c002730e:	85 c0                	test   eax,eax
c0027310:	eb 15                	jmp    c0027327 <__mulsf3+0xb6>
c0027312:	85 c9                	test   ecx,ecx
c0027314:	74 0b                	je     c0027321 <__mulsf3+0xb0>
c0027316:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027319:	01 c9                	add    ecx,ecx
c002731b:	78 16                	js     c0027333 <__mulsf3+0xc2>
c002731d:	89 d3                	mov    ebx,edx
c002731f:	eb f5                	jmp    c0027316 <__mulsf3+0xa5>
c0027321:	89 f8                	mov    eax,edi
c0027323:	f7 d0                	not    eax
c0027325:	84 c0                	test   al,al
c0027327:	75 c4                	jne    c00272ed <__mulsf3+0x7c>
c0027329:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002732e:	e9 f7 00 00 00       	jmp    c002742a <__mulsf3+0x1b9>
c0027333:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027336:	c1 e6 08             	shl    esi,0x8
c0027339:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002733f:	8d 57 01             	lea    edx,[edi+0x1]
c0027342:	80 e2 fe             	and    dl,0xfe
c0027345:	75 63                	jne    c00273aa <__mulsf3+0x139>
c0027347:	85 c0                	test   eax,eax
c0027349:	74 2f                	je     c002737a <__mulsf3+0x109>
c002734b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002734f:	0f 89 d2 00 00 00    	jns    c0027427 <__mulsf3+0x1b6>
c0027355:	52                   	push   edx
c0027356:	52                   	push   edx
c0027357:	6a 00                	push   0x0
c0027359:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002735c:	e8 dc 04 00 00       	call   c002783d <__eqsf2>
c0027361:	83 c4 10             	add    esp,0x10
c0027364:	85 c0                	test   eax,eax
c0027366:	0f 85 bb 00 00 00    	jne    c0027427 <__mulsf3+0x1b6>
c002736c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002736f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027375:	e9 b0 00 00 00       	jmp    c002742a <__mulsf3+0x1b9>
c002737a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002737d:	50                   	push   eax
c002737e:	50                   	push   eax
c002737f:	6a 00                	push   0x0
c0027381:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027384:	e8 b4 04 00 00       	call   c002783d <__eqsf2>
c0027389:	83 c4 10             	add    esp,0x10
c002738c:	85 c0                	test   eax,eax
c002738e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027391:	75 0c                	jne    c002739f <__mulsf3+0x12e>
c0027393:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027397:	0f 89 8a 00 00 00    	jns    c0027427 <__mulsf3+0x1b6>
c002739d:	eb cd                	jmp    c002736c <__mulsf3+0xfb>
c002739f:	8d 43 ff             	lea    eax,[ebx-0x1]
c00273a2:	01 f6                	add    esi,esi
c00273a4:	78 04                	js     c00273aa <__mulsf3+0x139>
c00273a6:	89 c3                	mov    ebx,eax
c00273a8:	eb f5                	jmp    c002739f <__mulsf3+0x12e>
c00273aa:	89 c8                	mov    eax,ecx
c00273ac:	0d 00 00 00 80       	or     eax,0x80000000
c00273b1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00273b7:	f7 e6                	mul    esi
c00273b9:	85 c0                	test   eax,eax
c00273bb:	0f 95 c0             	setne  al
c00273be:	0f b6 c0             	movzx  eax,al
c00273c1:	09 c2                	or     edx,eax
c00273c3:	78 03                	js     c00273c8 <__mulsf3+0x157>
c00273c5:	01 d2                	add    edx,edx
c00273c7:	4b                   	dec    ebx
c00273c8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00273ce:	7f 22                	jg     c00273f2 <__mulsf3+0x181>
c00273d0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00273d6:	85 db                	test   ebx,ebx
c00273d8:	7f 23                	jg     c00273fd <__mulsf3+0x18c>
c00273da:	83 fb e9             	cmp    ebx,0xffffffe9
c00273dd:	7c 1a                	jl     c00273f9 <__mulsf3+0x188>
c00273df:	81 ca 00 00 00 80    	or     edx,0x80000000
c00273e5:	b9 01 00 00 00       	mov    ecx,0x1
c00273ea:	29 d9                	sub    ecx,ebx
c00273ec:	d3 ea                	shr    edx,cl
c00273ee:	31 db                	xor    ebx,ebx
c00273f0:	eb 0b                	jmp    c00273fd <__mulsf3+0x18c>
c00273f2:	bb ff 00 00 00       	mov    ebx,0xff
c00273f7:	eb 02                	jmp    c00273fb <__mulsf3+0x18a>
c00273f9:	31 db                	xor    ebx,ebx
c00273fb:	31 d2                	xor    edx,edx
c00273fd:	89 d0                	mov    eax,edx
c00273ff:	c1 e8 08             	shr    eax,0x8
c0027402:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027405:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002740b:	09 fb                	or     ebx,edi
c002740d:	c1 e3 17             	shl    ebx,0x17
c0027410:	09 c3                	or     ebx,eax
c0027412:	f6 c2 7f             	test   dl,0x7f
c0027415:	0f 95 c1             	setne  cl
c0027418:	09 c8                	or     eax,ecx
c002741a:	83 e0 01             	and    eax,0x1
c002741d:	c1 ea 07             	shr    edx,0x7
c0027420:	21 c2                	and    edx,eax
c0027422:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027425:	eb 03                	jmp    c002742a <__mulsf3+0x1b9>
c0027427:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002742a:	89 f0                	mov    eax,esi
c002742c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002742f:	5b                   	pop    ebx
c0027430:	5e                   	pop    esi
c0027431:	5f                   	pop    edi
c0027432:	5d                   	pop    ebp
c0027433:	c3                   	ret    

c0027434 <__divsf3>:
c0027434:	55                   	push   ebp
c0027435:	89 e5                	mov    ebp,esp
c0027437:	57                   	push   edi
c0027438:	56                   	push   esi
c0027439:	53                   	push   ebx
c002743a:	83 ec 1c             	sub    esp,0x1c
c002743d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027440:	89 d8                	mov    eax,ebx
c0027442:	89 d9                	mov    ecx,ebx
c0027444:	c1 f9 17             	sar    ecx,0x17
c0027447:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002744a:	c1 e0 08             	shl    eax,0x8
c002744d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027452:	89 c1                	mov    ecx,eax
c0027454:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002745a:	89 c7                	mov    edi,eax
c002745c:	c1 ff 17             	sar    edi,0x17
c002745f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027463:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027466:	89 f8                	mov    eax,edi
c0027468:	0f b6 c0             	movzx  eax,al
c002746b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002746e:	29 c6                	sub    esi,eax
c0027470:	83 c6 7f             	add    esi,0x7f
c0027473:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027476:	42                   	inc    edx
c0027477:	80 e2 fe             	and    dl,0xfe
c002747a:	0f 85 9c 00 00 00    	jne    c002751c <__divsf3+0xe8>
c0027480:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027484:	74 33                	je     c00274b9 <__divsf3+0x85>
c0027486:	85 c9                	test   ecx,ecx
c0027488:	0f 85 c7 01 00 00    	jne    c0027655 <__divsf3+0x221>
c002748e:	8d 57 01             	lea    edx,[edi+0x1]
c0027491:	80 e2 fe             	and    dl,0xfe
c0027494:	75 2f                	jne    c00274c5 <__divsf3+0x91>
c0027496:	85 c0                	test   eax,eax
c0027498:	74 2b                	je     c00274c5 <__divsf3+0x91>
c002749a:	51                   	push   ecx
c002749b:	51                   	push   ecx
c002749c:	6a 00                	push   0x0
c002749e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274a1:	e8 d2 03 00 00       	call   c0027878 <__nesf2>
c00274a6:	83 c4 10             	add    esp,0x10
c00274a9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00274ac:	85 c0                	test   eax,eax
c00274ae:	0f 85 a1 01 00 00    	jne    c0027655 <__divsf3+0x221>
c00274b4:	e9 92 01 00 00       	jmp    c002764b <__divsf3+0x217>
c00274b9:	85 c9                	test   ecx,ecx
c00274bb:	75 1b                	jne    c00274d8 <__divsf3+0xa4>
c00274bd:	8d 57 01             	lea    edx,[edi+0x1]
c00274c0:	80 e2 fe             	and    dl,0xfe
c00274c3:	74 1e                	je     c00274e3 <__divsf3+0xaf>
c00274c5:	85 ff                	test   edi,edi
c00274c7:	0f 89 88 01 00 00    	jns    c0027655 <__divsf3+0x221>
c00274cd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00274d3:	e9 7d 01 00 00       	jmp    c0027655 <__divsf3+0x221>
c00274d8:	8d 56 ff             	lea    edx,[esi-0x1]
c00274db:	01 c9                	add    ecx,ecx
c00274dd:	78 3d                	js     c002751c <__divsf3+0xe8>
c00274df:	89 d6                	mov    esi,edx
c00274e1:	eb f5                	jmp    c00274d8 <__divsf3+0xa4>
c00274e3:	85 c0                	test   eax,eax
c00274e5:	b8 00 00 00 00       	mov    eax,0x0
c00274ea:	74 18                	je     c0027504 <__divsf3+0xd0>
c00274ec:	52                   	push   edx
c00274ed:	52                   	push   edx
c00274ee:	50                   	push   eax
c00274ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f2:	e8 81 03 00 00       	call   c0027878 <__nesf2>
c00274f7:	83 c4 10             	add    esp,0x10
c00274fa:	85 c0                	test   eax,eax
c00274fc:	0f 85 50 01 00 00    	jne    c0027652 <__divsf3+0x21e>
c0027502:	eb c1                	jmp    c00274c5 <__divsf3+0x91>
c0027504:	56                   	push   esi
c0027505:	56                   	push   esi
c0027506:	50                   	push   eax
c0027507:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002750a:	e8 69 03 00 00       	call   c0027878 <__nesf2>
c002750f:	83 c4 10             	add    esp,0x10
c0027512:	85 c0                	test   eax,eax
c0027514:	0f 84 31 01 00 00    	je     c002764b <__divsf3+0x217>
c002751a:	eb a9                	jmp    c00274c5 <__divsf3+0x91>
c002751c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002751f:	c1 e3 08             	shl    ebx,0x8
c0027522:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027528:	8d 57 01             	lea    edx,[edi+0x1]
c002752b:	80 e2 fe             	and    dl,0xfe
c002752e:	75 71                	jne    c00275a1 <__divsf3+0x16d>
c0027530:	85 c0                	test   eax,eax
c0027532:	ba 00 00 00 00       	mov    edx,0x0
c0027537:	74 2f                	je     c0027568 <__divsf3+0x134>
c0027539:	51                   	push   ecx
c002753a:	51                   	push   ecx
c002753b:	52                   	push   edx
c002753c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002753f:	e8 f9 02 00 00       	call   c002783d <__eqsf2>
c0027544:	83 c4 10             	add    esp,0x10
c0027547:	85 c0                	test   eax,eax
c0027549:	0f 85 03 01 00 00    	jne    c0027652 <__divsf3+0x21e>
c002754f:	31 d2                	xor    edx,edx
c0027551:	89 d3                	mov    ebx,edx
c0027553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027556:	31 f8                	xor    eax,edi
c0027558:	0f 89 f7 00 00 00    	jns    c0027655 <__divsf3+0x221>
c002755e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027563:	e9 ed 00 00 00       	jmp    c0027655 <__divsf3+0x221>
c0027568:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002756b:	50                   	push   eax
c002756c:	50                   	push   eax
c002756d:	52                   	push   edx
c002756e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027571:	e8 c7 02 00 00       	call   c002783d <__eqsf2>
c0027576:	83 c4 10             	add    esp,0x10
c0027579:	85 c0                	test   eax,eax
c002757b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002757e:	75 16                	jne    c0027596 <__divsf3+0x162>
c0027580:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027583:	31 fb                	xor    ebx,edi
c0027585:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002758b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027591:	e9 bf 00 00 00       	jmp    c0027655 <__divsf3+0x221>
c0027596:	8d 46 01             	lea    eax,[esi+0x1]
c0027599:	01 db                	add    ebx,ebx
c002759b:	78 04                	js     c00275a1 <__divsf3+0x16d>
c002759d:	89 c6                	mov    esi,eax
c002759f:	eb f5                	jmp    c0027596 <__divsf3+0x162>
c00275a1:	89 c8                	mov    eax,ecx
c00275a3:	0d 00 00 00 80       	or     eax,0x80000000
c00275a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275ae:	31 d2                	xor    edx,edx
c00275b0:	39 d8                	cmp    eax,ebx
c00275b2:	72 07                	jb     c00275bb <__divsf3+0x187>
c00275b4:	29 d8                	sub    eax,ebx
c00275b6:	ba 01 00 00 00       	mov    edx,0x1
c00275bb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00275c2:	01 d2                	add    edx,edx
c00275c4:	89 c1                	mov    ecx,eax
c00275c6:	01 c0                	add    eax,eax
c00275c8:	85 c9                	test   ecx,ecx
c00275ca:	78 04                	js     c00275d0 <__divsf3+0x19c>
c00275cc:	39 c3                	cmp    ebx,eax
c00275ce:	77 05                	ja     c00275d5 <__divsf3+0x1a1>
c00275d0:	29 d8                	sub    eax,ebx
c00275d2:	83 ca 01             	or     edx,0x1
c00275d5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00275d8:	75 e8                	jne    c00275c2 <__divsf3+0x18e>
c00275da:	85 c0                	test   eax,eax
c00275dc:	0f 95 c0             	setne  al
c00275df:	0f b6 c0             	movzx  eax,al
c00275e2:	c1 e2 06             	shl    edx,0x6
c00275e5:	09 c2                	or     edx,eax
c00275e7:	78 03                	js     c00275ec <__divsf3+0x1b8>
c00275e9:	01 d2                	add    edx,edx
c00275eb:	4e                   	dec    esi
c00275ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00275f2:	7f 22                	jg     c0027616 <__divsf3+0x1e2>
c00275f4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00275fa:	85 f6                	test   esi,esi
c00275fc:	7f 23                	jg     c0027621 <__divsf3+0x1ed>
c00275fe:	83 fe e9             	cmp    esi,0xffffffe9
c0027601:	7c 1a                	jl     c002761d <__divsf3+0x1e9>
c0027603:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027609:	b9 01 00 00 00       	mov    ecx,0x1
c002760e:	29 f1                	sub    ecx,esi
c0027610:	d3 ea                	shr    edx,cl
c0027612:	31 f6                	xor    esi,esi
c0027614:	eb 0b                	jmp    c0027621 <__divsf3+0x1ed>
c0027616:	be ff 00 00 00       	mov    esi,0xff
c002761b:	eb 02                	jmp    c002761f <__divsf3+0x1eb>
c002761d:	31 f6                	xor    esi,esi
c002761f:	31 d2                	xor    edx,edx
c0027621:	89 d0                	mov    eax,edx
c0027623:	c1 e8 08             	shr    eax,0x8
c0027626:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027629:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002762f:	09 fe                	or     esi,edi
c0027631:	c1 e6 17             	shl    esi,0x17
c0027634:	09 c6                	or     esi,eax
c0027636:	f6 c2 7f             	test   dl,0x7f
c0027639:	0f 95 c1             	setne  cl
c002763c:	09 c8                	or     eax,ecx
c002763e:	83 e0 01             	and    eax,0x1
c0027641:	c1 ea 07             	shr    edx,0x7
c0027644:	21 c2                	and    edx,eax
c0027646:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027649:	eb 0a                	jmp    c0027655 <__divsf3+0x221>
c002764b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027650:	eb 03                	jmp    c0027655 <__divsf3+0x221>
c0027652:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027655:	89 d8                	mov    eax,ebx
c0027657:	8d 65 f4             	lea    esp,[ebp-0xc]
c002765a:	5b                   	pop    ebx
c002765b:	5e                   	pop    esi
c002765c:	5f                   	pop    edi
c002765d:	5d                   	pop    ebp
c002765e:	c3                   	ret    

c002765f <__floatsisf>:
c002765f:	55                   	push   ebp
c0027660:	89 e5                	mov    ebp,esp
c0027662:	53                   	push   ebx
c0027663:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027666:	85 d2                	test   edx,edx
c0027668:	7e 2b                	jle    c0027695 <__floatsisf+0x36>
c002766a:	0f bd ca             	bsr    ecx,edx
c002766d:	83 f1 1f             	xor    ecx,0x1f
c0027670:	d3 e2                	shl    edx,cl
c0027672:	89 d0                	mov    eax,edx
c0027674:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027679:	89 c3                	mov    ebx,eax
c002767b:	c1 eb 08             	shr    ebx,0x8
c002767e:	80 e2 7f             	and    dl,0x7f
c0027681:	0f 95 c2             	setne  dl
c0027684:	09 da                	or     edx,ebx
c0027686:	83 e2 01             	and    edx,0x1
c0027689:	c1 e8 07             	shr    eax,0x7
c002768c:	21 c2                	and    edx,eax
c002768e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027693:	eb 32                	jmp    c00276c7 <__floatsisf+0x68>
c0027695:	b8 00 00 00 00       	mov    eax,0x0
c002769a:	74 34                	je     c00276d0 <__floatsisf+0x71>
c002769c:	f7 da                	neg    edx
c002769e:	0f bd ca             	bsr    ecx,edx
c00276a1:	83 f1 1f             	xor    ecx,0x1f
c00276a4:	d3 e2                	shl    edx,cl
c00276a6:	89 d0                	mov    eax,edx
c00276a8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276ad:	89 c3                	mov    ebx,eax
c00276af:	c1 eb 08             	shr    ebx,0x8
c00276b2:	80 e2 7f             	and    dl,0x7f
c00276b5:	0f 95 c2             	setne  dl
c00276b8:	09 da                	or     edx,ebx
c00276ba:	83 e2 01             	and    edx,0x1
c00276bd:	c1 e8 07             	shr    eax,0x7
c00276c0:	21 c2                	and    edx,eax
c00276c2:	b8 9e 01 00 00       	mov    eax,0x19e
c00276c7:	29 c8                	sub    eax,ecx
c00276c9:	c1 e0 17             	shl    eax,0x17
c00276cc:	09 d8                	or     eax,ebx
c00276ce:	01 d0                	add    eax,edx
c00276d0:	5b                   	pop    ebx
c00276d1:	5d                   	pop    ebp
c00276d2:	c3                   	ret    

c00276d3 <__floatunsisf>:
c00276d3:	55                   	push   ebp
c00276d4:	89 e5                	mov    ebp,esp
c00276d6:	53                   	push   ebx
c00276d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00276da:	31 c0                	xor    eax,eax
c00276dc:	85 d2                	test   edx,edx
c00276de:	74 32                	je     c0027712 <__floatunsisf+0x3f>
c00276e0:	0f bd ca             	bsr    ecx,edx
c00276e3:	83 f1 1f             	xor    ecx,0x1f
c00276e6:	d3 e2                	shl    edx,cl
c00276e8:	89 d0                	mov    eax,edx
c00276ea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276ef:	89 c3                	mov    ebx,eax
c00276f1:	c1 eb 08             	shr    ebx,0x8
c00276f4:	80 e2 7f             	and    dl,0x7f
c00276f7:	0f 95 c2             	setne  dl
c00276fa:	09 da                	or     edx,ebx
c00276fc:	83 e2 01             	and    edx,0x1
c00276ff:	c1 e8 07             	shr    eax,0x7
c0027702:	21 c2                	and    edx,eax
c0027704:	b8 9e 00 00 00       	mov    eax,0x9e
c0027709:	29 c8                	sub    eax,ecx
c002770b:	c1 e0 17             	shl    eax,0x17
c002770e:	09 d8                	or     eax,ebx
c0027710:	01 d0                	add    eax,edx
c0027712:	5b                   	pop    ebx
c0027713:	5d                   	pop    ebp
c0027714:	c3                   	ret    

c0027715 <__fixsfsi>:
c0027715:	55                   	push   ebp
c0027716:	89 e5                	mov    ebp,esp
c0027718:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002771b:	89 d1                	mov    ecx,edx
c002771d:	c1 e1 08             	shl    ecx,0x8
c0027720:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027726:	c1 fa 17             	sar    edx,0x17
c0027729:	78 1c                	js     c0027747 <__fixsfsi+0x32>
c002772b:	83 ea 7f             	sub    edx,0x7f
c002772e:	31 c0                	xor    eax,eax
c0027730:	83 fa 1e             	cmp    edx,0x1e
c0027733:	77 40                	ja     c0027775 <__fixsfsi+0x60>
c0027735:	89 c8                	mov    eax,ecx
c0027737:	0d 00 00 00 80       	or     eax,0x80000000
c002773c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027741:	29 d1                	sub    ecx,edx
c0027743:	d3 e8                	shr    eax,cl
c0027745:	eb 2e                	jmp    c0027775 <__fixsfsi+0x60>
c0027747:	31 c0                	xor    eax,eax
c0027749:	81 c2 81 00 00 00    	add    edx,0x81
c002774f:	78 24                	js     c0027775 <__fixsfsi+0x60>
c0027751:	83 fa 1e             	cmp    edx,0x1e
c0027754:	7e 09                	jle    c002775f <__fixsfsi+0x4a>
c0027756:	83 fa 1f             	cmp    edx,0x1f
c0027759:	75 18                	jne    c0027773 <__fixsfsi+0x5e>
c002775b:	85 c9                	test   ecx,ecx
c002775d:	75 14                	jne    c0027773 <__fixsfsi+0x5e>
c002775f:	89 c8                	mov    eax,ecx
c0027761:	0d 00 00 00 80       	or     eax,0x80000000
c0027766:	b9 1f 00 00 00       	mov    ecx,0x1f
c002776b:	29 d1                	sub    ecx,edx
c002776d:	d3 e8                	shr    eax,cl
c002776f:	f7 d8                	neg    eax
c0027771:	eb 02                	jmp    c0027775 <__fixsfsi+0x60>
c0027773:	31 c0                	xor    eax,eax
c0027775:	5d                   	pop    ebp
c0027776:	c3                   	ret    

c0027777 <__fixunssfsi>:
c0027777:	55                   	push   ebp
c0027778:	89 e5                	mov    ebp,esp
c002777a:	53                   	push   ebx
c002777b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002777e:	89 d3                	mov    ebx,edx
c0027780:	c1 fb 17             	sar    ebx,0x17
c0027783:	83 eb 7f             	sub    ebx,0x7f
c0027786:	31 c0                	xor    eax,eax
c0027788:	83 fb 1f             	cmp    ebx,0x1f
c002778b:	77 18                	ja     c00277a5 <__fixunssfsi+0x2e>
c002778d:	89 d0                	mov    eax,edx
c002778f:	c1 e0 08             	shl    eax,0x8
c0027792:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027797:	0d 00 00 00 80       	or     eax,0x80000000
c002779c:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277a1:	29 d9                	sub    ecx,ebx
c00277a3:	d3 e8                	shr    eax,cl
c00277a5:	5b                   	pop    ebx
c00277a6:	5d                   	pop    ebp
c00277a7:	c3                   	ret    

c00277a8 <__cmpsf2>:
c00277a8:	55                   	push   ebp
c00277a9:	89 e5                	mov    ebp,esp
c00277ab:	57                   	push   edi
c00277ac:	56                   	push   esi
c00277ad:	53                   	push   ebx
c00277ae:	83 ec 24             	sub    esp,0x24
c00277b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00277b7:	e8 4f 10 00 00       	call   c002880b <__truncdfsf2>
c00277bc:	5a                   	pop    edx
c00277bd:	59                   	pop    ecx
c00277be:	89 c3                	mov    ebx,eax
c00277c0:	c1 e8 17             	shr    eax,0x17
c00277c3:	0f b6 f0             	movzx  esi,al
c00277c6:	89 d8                	mov    eax,ebx
c00277c8:	c1 e8 1f             	shr    eax,0x1f
c00277cb:	31 c6                	xor    esi,eax
c00277cd:	c1 e3 08             	shl    ebx,0x8
c00277d0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00277d3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00277d6:	e8 30 10 00 00       	call   c002880b <__truncdfsf2>
c00277db:	83 c4 10             	add    esp,0x10
c00277de:	89 c1                	mov    ecx,eax
c00277e0:	c1 e9 17             	shr    ecx,0x17
c00277e3:	0f b6 c9             	movzx  ecx,cl
c00277e6:	89 c7                	mov    edi,eax
c00277e8:	c1 ef 1f             	shr    edi,0x1f
c00277eb:	89 ca                	mov    edx,ecx
c00277ed:	31 fa                	xor    edx,edi
c00277ef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00277f2:	c1 e0 08             	shl    eax,0x8
c00277f5:	89 c2                	mov    edx,eax
c00277f7:	89 d8                	mov    eax,ebx
c00277f9:	09 d0                	or     eax,edx
c00277fb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027800:	09 f0                	or     eax,esi
c0027802:	75 08                	jne    c002780c <__cmpsf2+0x64>
c0027804:	31 c0                	xor    eax,eax
c0027806:	39 f9                	cmp    ecx,edi
c0027808:	75 0c                	jne    c0027816 <__cmpsf2+0x6e>
c002780a:	eb 29                	jmp    c0027835 <__cmpsf2+0x8d>
c002780c:	b8 01 00 00 00       	mov    eax,0x1
c0027811:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027814:	7f 1f                	jg     c0027835 <__cmpsf2+0x8d>
c0027816:	83 c8 ff             	or     eax,0xffffffff
c0027819:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002781c:	7c 17                	jl     c0027835 <__cmpsf2+0x8d>
c002781e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027824:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002782a:	b8 01 00 00 00       	mov    eax,0x1
c002782f:	39 d3                	cmp    ebx,edx
c0027831:	77 02                	ja     c0027835 <__cmpsf2+0x8d>
c0027833:	19 c0                	sbb    eax,eax
c0027835:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027838:	5b                   	pop    ebx
c0027839:	5e                   	pop    esi
c002783a:	5f                   	pop    edi
c002783b:	5d                   	pop    ebp
c002783c:	c3                   	ret    

c002783d <__eqsf2>:
c002783d:	55                   	push   ebp
c002783e:	89 e5                	mov    ebp,esp
c0027840:	83 ec 24             	sub    esp,0x24
c0027843:	6a 01                	push   0x1
c0027845:	83 ec 0c             	sub    esp,0xc
c0027848:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002784b:	e8 df 10 00 00       	call   c002892f <__extendsfdf2>
c0027850:	83 c4 10             	add    esp,0x10
c0027853:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027856:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027859:	52                   	push   edx
c002785a:	50                   	push   eax
c002785b:	50                   	push   eax
c002785c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002785f:	e8 cb 10 00 00       	call   c002892f <__extendsfdf2>
c0027864:	59                   	pop    ecx
c0027865:	59                   	pop    ecx
c0027866:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027869:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002786c:	52                   	push   edx
c002786d:	50                   	push   eax
c002786e:	e8 35 ff ff ff       	call   c00277a8 <__cmpsf2>
c0027873:	83 c4 20             	add    esp,0x20
c0027876:	c9                   	leave  
c0027877:	c3                   	ret    

c0027878 <__nesf2>:
c0027878:	eb c3                	jmp    c002783d <__eqsf2>

c002787a <__gtsf2>:
c002787a:	55                   	push   ebp
c002787b:	89 e5                	mov    ebp,esp
c002787d:	83 ec 24             	sub    esp,0x24
c0027880:	6a ff                	push   0xffffffff
c0027882:	83 ec 0c             	sub    esp,0xc
c0027885:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027888:	e8 a2 10 00 00       	call   c002892f <__extendsfdf2>
c002788d:	83 c4 10             	add    esp,0x10
c0027890:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027893:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027896:	52                   	push   edx
c0027897:	50                   	push   eax
c0027898:	50                   	push   eax
c0027899:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002789c:	e8 8e 10 00 00       	call   c002892f <__extendsfdf2>
c00278a1:	59                   	pop    ecx
c00278a2:	59                   	pop    ecx
c00278a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278a9:	52                   	push   edx
c00278aa:	50                   	push   eax
c00278ab:	e8 f8 fe ff ff       	call   c00277a8 <__cmpsf2>
c00278b0:	83 c4 20             	add    esp,0x20
c00278b3:	c9                   	leave  
c00278b4:	c3                   	ret    

c00278b5 <__gesf2>:
c00278b5:	eb c3                	jmp    c002787a <__gtsf2>

c00278b7 <__ltsf2>:
c00278b7:	eb 84                	jmp    c002783d <__eqsf2>

c00278b9 <__lesf2>:
c00278b9:	eb 82                	jmp    c002783d <__eqsf2>

c00278bb <__adddf3>:
c00278bb:	55                   	push   ebp
c00278bc:	89 e5                	mov    ebp,esp
c00278be:	57                   	push   edi
c00278bf:	56                   	push   esi
c00278c0:	53                   	push   ebx
c00278c1:	83 ec 24             	sub    esp,0x24
c00278c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00278c7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00278ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278cd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00278d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00278d6:	89 c8                	mov    eax,ecx
c00278d8:	89 ce                	mov    esi,ecx
c00278da:	c1 fe 14             	sar    esi,0x14
c00278dd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00278e0:	89 fb                	mov    ebx,edi
c00278e2:	89 fa                	mov    edx,edi
c00278e4:	c1 e2 0b             	shl    edx,0xb
c00278e7:	c1 e0 0b             	shl    eax,0xb
c00278ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00278ef:	c1 eb 15             	shr    ebx,0x15
c00278f2:	09 d8                	or     eax,ebx
c00278f4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00278f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00278fa:	c1 fe 14             	sar    esi,0x14
c00278fd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027900:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027903:	89 f3                	mov    ebx,esi
c0027905:	c1 e3 0b             	shl    ebx,0xb
c0027908:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002790b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002790e:	c1 e3 0b             	shl    ebx,0xb
c0027911:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027917:	c1 ee 15             	shr    esi,0x15
c002791a:	09 f3                	or     ebx,esi
c002791c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002791f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027922:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027925:	0f 88 5f 02 00 00    	js     c0027b8a <__adddf3+0x2cf>
c002792b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002792e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027931:	85 db                	test   ebx,ebx
c0027933:	0f 8e c7 00 00 00    	jle    c0027a00 <__adddf3+0x145>
c0027939:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027940:	75 1a                	jne    c002795c <__adddf3+0xa1>
c0027942:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027945:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027948:	0f 84 b2 05 00 00    	je     c0027f00 <__adddf3+0x645>
c002794e:	4b                   	dec    ebx
c002794f:	75 23                	jne    c0027974 <__adddf3+0xb9>
c0027951:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027954:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027957:	e9 99 00 00 00       	jmp    c00279f5 <__adddf3+0x13a>
c002795c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002795f:	f7 d6                	not    esi
c0027961:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027967:	0f 84 93 05 00 00    	je     c0027f00 <__adddf3+0x645>
c002796d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027974:	83 fb 1f             	cmp    ebx,0x1f
c0027977:	7e 42                	jle    c00279bb <__adddf3+0x100>
c0027979:	83 fb 3f             	cmp    ebx,0x3f
c002797c:	0f 8f 7e 05 00 00    	jg     c0027f00 <__adddf3+0x645>
c0027982:	83 e3 1f             	and    ebx,0x1f
c0027985:	89 d9                	mov    ecx,ebx
c0027987:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002798a:	d3 ef                	shr    edi,cl
c002798c:	31 db                	xor    ebx,ebx
c002798e:	85 c9                	test   ecx,ecx
c0027990:	74 15                	je     c00279a7 <__adddf3+0xec>
c0027992:	be 20 00 00 00       	mov    esi,0x20
c0027997:	29 ce                	sub    esi,ecx
c0027999:	89 f1                	mov    ecx,esi
c002799b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002799e:	d3 e6                	shl    esi,cl
c00279a0:	31 db                	xor    ebx,ebx
c00279a2:	85 f6                	test   esi,esi
c00279a4:	0f 95 c3             	setne  bl
c00279a7:	31 c9                	xor    ecx,ecx
c00279a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279ad:	0f 95 c1             	setne  cl
c00279b0:	09 cf                	or     edi,ecx
c00279b2:	09 fb                	or     ebx,edi
c00279b4:	01 da                	add    edx,ebx
c00279b6:	83 d0 00             	adc    eax,0x0
c00279b9:	eb 3a                	jmp    c00279f5 <__adddf3+0x13a>
c00279bb:	bf 20 00 00 00       	mov    edi,0x20
c00279c0:	29 df                	sub    edi,ebx
c00279c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279cb:	d3 e6                	shl    esi,cl
c00279cd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279d0:	88 d9                	mov    cl,bl
c00279d2:	d3 ef                	shr    edi,cl
c00279d4:	09 fe                	or     esi,edi
c00279d6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279d9:	88 d9                	mov    cl,bl
c00279db:	d3 ef                	shr    edi,cl
c00279dd:	89 fb                	mov    ebx,edi
c00279df:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279e2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279e5:	d3 e7                	shl    edi,cl
c00279e7:	85 ff                	test   edi,edi
c00279e9:	0f 95 c1             	setne  cl
c00279ec:	0f b6 c9             	movzx  ecx,cl
c00279ef:	09 ce                	or     esi,ecx
c00279f1:	01 f2                	add    edx,esi
c00279f3:	11 d8                	adc    eax,ebx
c00279f5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279fb:	e9 52 01 00 00       	jmp    c0027b52 <__adddf3+0x297>
c0027a00:	0f 84 d5 00 00 00    	je     c0027adb <__adddf3+0x220>
c0027a06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a09:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027a0c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a0f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a12:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027a19:	75 20                	jne    c0027a3b <__adddf3+0x180>
c0027a1b:	89 d6                	mov    esi,edx
c0027a1d:	09 c6                	or     esi,eax
c0027a1f:	0f 84 db 04 00 00    	je     c0027f00 <__adddf3+0x645>
c0027a25:	4b                   	dec    ebx
c0027a26:	75 29                	jne    c0027a51 <__adddf3+0x196>
c0027a28:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a2e:	01 d1                	add    ecx,edx
c0027a30:	11 c6                	adc    esi,eax
c0027a32:	89 f0                	mov    eax,esi
c0027a34:	89 ca                	mov    edx,ecx
c0027a36:	e9 17 01 00 00       	jmp    c0027b52 <__adddf3+0x297>
c0027a3b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a3e:	f7 d6                	not    esi
c0027a40:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a46:	0f 84 b4 04 00 00    	je     c0027f00 <__adddf3+0x645>
c0027a4c:	0d 00 00 00 80       	or     eax,0x80000000
c0027a51:	83 fb 1f             	cmp    ebx,0x1f
c0027a54:	7e 48                	jle    c0027a9e <__adddf3+0x1e3>
c0027a56:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a59:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a5c:	83 fb 3f             	cmp    ebx,0x3f
c0027a5f:	0f 8f 9b 04 00 00    	jg     c0027f00 <__adddf3+0x645>
c0027a65:	83 e3 1f             	and    ebx,0x1f
c0027a68:	89 d9                	mov    ecx,ebx
c0027a6a:	89 c7                	mov    edi,eax
c0027a6c:	d3 ef                	shr    edi,cl
c0027a6e:	31 db                	xor    ebx,ebx
c0027a70:	85 c9                	test   ecx,ecx
c0027a72:	74 12                	je     c0027a86 <__adddf3+0x1cb>
c0027a74:	be 20 00 00 00       	mov    esi,0x20
c0027a79:	29 ce                	sub    esi,ecx
c0027a7b:	89 f1                	mov    ecx,esi
c0027a7d:	d3 e0                	shl    eax,cl
c0027a7f:	31 db                	xor    ebx,ebx
c0027a81:	85 c0                	test   eax,eax
c0027a83:	0f 95 c3             	setne  bl
c0027a86:	31 c0                	xor    eax,eax
c0027a88:	85 d2                	test   edx,edx
c0027a8a:	0f 95 c0             	setne  al
c0027a8d:	09 c7                	or     edi,eax
c0027a8f:	09 fb                	or     ebx,edi
c0027a91:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a94:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a97:	01 da                	add    edx,ebx
c0027a99:	83 d6 00             	adc    esi,0x0
c0027a9c:	eb 39                	jmp    c0027ad7 <__adddf3+0x21c>
c0027a9e:	be 20 00 00 00       	mov    esi,0x20
c0027aa3:	29 de                	sub    esi,ebx
c0027aa5:	89 c7                	mov    edi,eax
c0027aa7:	89 f1                	mov    ecx,esi
c0027aa9:	d3 e7                	shl    edi,cl
c0027aab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aae:	89 d7                	mov    edi,edx
c0027ab0:	88 d9                	mov    cl,bl
c0027ab2:	d3 ef                	shr    edi,cl
c0027ab4:	89 f9                	mov    ecx,edi
c0027ab6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ab9:	09 cf                	or     edi,ecx
c0027abb:	88 d9                	mov    cl,bl
c0027abd:	d3 e8                	shr    eax,cl
c0027abf:	89 f1                	mov    ecx,esi
c0027ac1:	d3 e2                	shl    edx,cl
c0027ac3:	85 d2                	test   edx,edx
c0027ac5:	0f 95 c2             	setne  dl
c0027ac8:	0f b6 d2             	movzx  edx,dl
c0027acb:	09 d7                	or     edi,edx
c0027acd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ad0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ad3:	01 fa                	add    edx,edi
c0027ad5:	11 c6                	adc    esi,eax
c0027ad7:	89 f0                	mov    eax,esi
c0027ad9:	eb 77                	jmp    c0027b52 <__adddf3+0x297>
c0027adb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ade:	46                   	inc    esi
c0027adf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027ae2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ae8:	75 41                	jne    c0027b2b <__adddf3+0x270>
c0027aea:	89 d3                	mov    ebx,edx
c0027aec:	09 c3                	or     ebx,eax
c0027aee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027af5:	75 27                	jne    c0027b1e <__adddf3+0x263>
c0027af7:	85 db                	test   ebx,ebx
c0027af9:	0f 84 fb 03 00 00    	je     c0027efa <__adddf3+0x63f>
c0027aff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b02:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027b05:	0f 84 f5 03 00 00    	je     c0027f00 <__adddf3+0x645>
c0027b0b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b0e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b11:	85 c0                	test   eax,eax
c0027b13:	0f 89 91 03 00 00    	jns    c0027eaa <__adddf3+0x5ef>
c0027b19:	e9 85 03 00 00       	jmp    c0027ea3 <__adddf3+0x5e8>
c0027b1e:	85 db                	test   ebx,ebx
c0027b20:	0f 85 da 03 00 00    	jne    c0027f00 <__adddf3+0x645>
c0027b26:	e9 cf 03 00 00       	jmp    c0027efa <__adddf3+0x63f>
c0027b2b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b2e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b31:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b34:	f7 d1                	not    ecx
c0027b36:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027b3c:	0f 84 70 03 00 00    	je     c0027eb2 <__adddf3+0x5f7>
c0027b42:	d1 ea                	shr    edx,1
c0027b44:	89 c1                	mov    ecx,eax
c0027b46:	c1 e1 1f             	shl    ecx,0x1f
c0027b49:	09 ca                	or     edx,ecx
c0027b4b:	d1 e8                	shr    eax,1
c0027b4d:	e9 6f 03 00 00       	jmp    c0027ec1 <__adddf3+0x606>
c0027b52:	85 c0                	test   eax,eax
c0027b54:	0f 89 67 03 00 00    	jns    c0027ec1 <__adddf3+0x606>
c0027b5a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027b5d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b60:	f7 d1                	not    ecx
c0027b62:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027b68:	0f 84 44 03 00 00    	je     c0027eb2 <__adddf3+0x5f7>
c0027b6e:	89 d1                	mov    ecx,edx
c0027b70:	d1 e9                	shr    ecx,1
c0027b72:	83 e2 01             	and    edx,0x1
c0027b75:	09 ca                	or     edx,ecx
c0027b77:	89 c1                	mov    ecx,eax
c0027b79:	c1 e1 1f             	shl    ecx,0x1f
c0027b7c:	09 ca                	or     edx,ecx
c0027b7e:	d1 e8                	shr    eax,1
c0027b80:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027b85:	e9 37 03 00 00       	jmp    c0027ec1 <__adddf3+0x606>
c0027b8a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b8d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b93:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027b96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b99:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b9f:	29 de                	sub    esi,ebx
c0027ba1:	85 f6                	test   esi,esi
c0027ba3:	0f 8e bd 00 00 00    	jle    c0027c66 <__adddf3+0x3ab>
c0027ba9:	85 db                	test   ebx,ebx
c0027bab:	75 17                	jne    c0027bc4 <__adddf3+0x309>
c0027bad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027bb0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027bb3:	0f 84 47 03 00 00    	je     c0027f00 <__adddf3+0x645>
c0027bb9:	4e                   	dec    esi
c0027bba:	75 20                	jne    c0027bdc <__adddf3+0x321>
c0027bbc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027bbf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027bc2:	eb 5b                	jmp    c0027c1f <__adddf3+0x364>
c0027bc4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bc7:	f7 d3                	not    ebx
c0027bc9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bcf:	0f 84 2b 03 00 00    	je     c0027f00 <__adddf3+0x645>
c0027bd5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027bdc:	83 fe 1f             	cmp    esi,0x1f
c0027bdf:	7e 49                	jle    c0027c2a <__adddf3+0x36f>
c0027be1:	83 fe 3f             	cmp    esi,0x3f
c0027be4:	0f 8f 16 03 00 00    	jg     c0027f00 <__adddf3+0x645>
c0027bea:	83 e6 1f             	and    esi,0x1f
c0027bed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027bf0:	89 f1                	mov    ecx,esi
c0027bf2:	d3 ef                	shr    edi,cl
c0027bf4:	31 db                	xor    ebx,ebx
c0027bf6:	85 f6                	test   esi,esi
c0027bf8:	74 13                	je     c0027c0d <__adddf3+0x352>
c0027bfa:	b9 20 00 00 00       	mov    ecx,0x20
c0027bff:	29 f1                	sub    ecx,esi
c0027c01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c04:	d3 e6                	shl    esi,cl
c0027c06:	31 db                	xor    ebx,ebx
c0027c08:	85 f6                	test   esi,esi
c0027c0a:	0f 95 c3             	setne  bl
c0027c0d:	31 c9                	xor    ecx,ecx
c0027c0f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c13:	0f 95 c1             	setne  cl
c0027c16:	09 cf                	or     edi,ecx
c0027c18:	09 fb                	or     ebx,edi
c0027c1a:	29 da                	sub    edx,ebx
c0027c1c:	83 d8 00             	sbb    eax,0x0
c0027c1f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c22:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c25:	e9 aa 01 00 00       	jmp    c0027dd4 <__adddf3+0x519>
c0027c2a:	bf 20 00 00 00       	mov    edi,0x20
c0027c2f:	29 f7                	sub    edi,esi
c0027c31:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c34:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c37:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c3a:	d3 e3                	shl    ebx,cl
c0027c3c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c3f:	89 f1                	mov    ecx,esi
c0027c41:	d3 ef                	shr    edi,cl
c0027c43:	09 fb                	or     ebx,edi
c0027c45:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c48:	89 f1                	mov    ecx,esi
c0027c4a:	d3 ef                	shr    edi,cl
c0027c4c:	89 fe                	mov    esi,edi
c0027c4e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c51:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c54:	d3 e7                	shl    edi,cl
c0027c56:	85 ff                	test   edi,edi
c0027c58:	0f 95 c1             	setne  cl
c0027c5b:	0f b6 c9             	movzx  ecx,cl
c0027c5e:	09 cb                	or     ebx,ecx
c0027c60:	29 da                	sub    edx,ebx
c0027c62:	19 f0                	sbb    eax,esi
c0027c64:	eb b9                	jmp    c0027c1f <__adddf3+0x364>
c0027c66:	0f 84 cd 00 00 00    	je     c0027d39 <__adddf3+0x47e>
c0027c6c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027c6f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c72:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c75:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c79:	75 1b                	jne    c0027c96 <__adddf3+0x3db>
c0027c7b:	89 d6                	mov    esi,edx
c0027c7d:	09 c6                	or     esi,eax
c0027c7f:	0f 84 7b 02 00 00    	je     c0027f00 <__adddf3+0x645>
c0027c85:	4b                   	dec    ebx
c0027c86:	75 24                	jne    c0027cac <__adddf3+0x3f1>
c0027c88:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c8e:	29 d1                	sub    ecx,edx
c0027c90:	19 c6                	sbb    esi,eax
c0027c92:	89 ca                	mov    edx,ecx
c0027c94:	eb 61                	jmp    c0027cf7 <__adddf3+0x43c>
c0027c96:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c99:	f7 d6                	not    esi
c0027c9b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ca1:	0f 84 59 02 00 00    	je     c0027f00 <__adddf3+0x645>
c0027ca7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cac:	83 fb 1f             	cmp    ebx,0x1f
c0027caf:	7e 4d                	jle    c0027cfe <__adddf3+0x443>
c0027cb1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027cb4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027cb7:	83 fb 3f             	cmp    ebx,0x3f
c0027cba:	0f 8f 40 02 00 00    	jg     c0027f00 <__adddf3+0x645>
c0027cc0:	83 e3 1f             	and    ebx,0x1f
c0027cc3:	89 d9                	mov    ecx,ebx
c0027cc5:	89 c7                	mov    edi,eax
c0027cc7:	d3 ef                	shr    edi,cl
c0027cc9:	31 db                	xor    ebx,ebx
c0027ccb:	85 c9                	test   ecx,ecx
c0027ccd:	74 12                	je     c0027ce1 <__adddf3+0x426>
c0027ccf:	be 20 00 00 00       	mov    esi,0x20
c0027cd4:	29 ce                	sub    esi,ecx
c0027cd6:	89 f1                	mov    ecx,esi
c0027cd8:	d3 e0                	shl    eax,cl
c0027cda:	31 db                	xor    ebx,ebx
c0027cdc:	85 c0                	test   eax,eax
c0027cde:	0f 95 c3             	setne  bl
c0027ce1:	31 c0                	xor    eax,eax
c0027ce3:	85 d2                	test   edx,edx
c0027ce5:	0f 95 c0             	setne  al
c0027ce8:	09 c7                	or     edi,eax
c0027cea:	09 fb                	or     ebx,edi
c0027cec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cf2:	29 da                	sub    edx,ebx
c0027cf4:	83 de 00             	sbb    esi,0x0
c0027cf7:	89 f0                	mov    eax,esi
c0027cf9:	e9 d6 00 00 00       	jmp    c0027dd4 <__adddf3+0x519>
c0027cfe:	be 20 00 00 00       	mov    esi,0x20
c0027d03:	29 de                	sub    esi,ebx
c0027d05:	89 c7                	mov    edi,eax
c0027d07:	89 f1                	mov    ecx,esi
c0027d09:	d3 e7                	shl    edi,cl
c0027d0b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027d0e:	89 d7                	mov    edi,edx
c0027d10:	88 d9                	mov    cl,bl
c0027d12:	d3 ef                	shr    edi,cl
c0027d14:	89 f9                	mov    ecx,edi
c0027d16:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d19:	09 cf                	or     edi,ecx
c0027d1b:	88 d9                	mov    cl,bl
c0027d1d:	d3 e8                	shr    eax,cl
c0027d1f:	89 f1                	mov    ecx,esi
c0027d21:	d3 e2                	shl    edx,cl
c0027d23:	85 d2                	test   edx,edx
c0027d25:	0f 95 c2             	setne  dl
c0027d28:	0f b6 d2             	movzx  edx,dl
c0027d2b:	09 d7                	or     edi,edx
c0027d2d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d30:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d33:	29 fa                	sub    edx,edi
c0027d35:	19 c6                	sbb    esi,eax
c0027d37:	eb be                	jmp    c0027cf7 <__adddf3+0x43c>
c0027d39:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d3c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027d3f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027d45:	75 6a                	jne    c0027db1 <__adddf3+0x4f6>
c0027d47:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d4b:	75 58                	jne    c0027da5 <__adddf3+0x4ea>
c0027d4d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027d50:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027d53:	89 d6                	mov    esi,edx
c0027d55:	09 c6                	or     esi,eax
c0027d57:	75 17                	jne    c0027d70 <__adddf3+0x4b5>
c0027d59:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d5c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d5f:	85 db                	test   ebx,ebx
c0027d61:	0f 85 99 01 00 00    	jne    c0027f00 <__adddf3+0x645>
c0027d67:	31 ff                	xor    edi,edi
c0027d69:	31 c9                	xor    ecx,ecx
c0027d6b:	e9 90 01 00 00       	jmp    c0027f00 <__adddf3+0x645>
c0027d70:	85 db                	test   ebx,ebx
c0027d72:	0f 84 88 01 00 00    	je     c0027f00 <__adddf3+0x645>
c0027d78:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027d7b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027d7e:	85 c0                	test   eax,eax
c0027d80:	79 10                	jns    c0027d92 <__adddf3+0x4d7>
c0027d82:	31 c9                	xor    ecx,ecx
c0027d84:	f7 da                	neg    edx
c0027d86:	0f 95 c1             	setne  cl
c0027d89:	01 c8                	add    eax,ecx
c0027d8b:	f7 d8                	neg    eax
c0027d8d:	e9 2f 01 00 00       	jmp    c0027ec1 <__adddf3+0x606>
c0027d92:	31 ff                	xor    edi,edi
c0027d94:	31 c9                	xor    ecx,ecx
c0027d96:	89 c3                	mov    ebx,eax
c0027d98:	09 d3                	or     ebx,edx
c0027d9a:	0f 84 60 01 00 00    	je     c0027f00 <__adddf3+0x645>
c0027da0:	e9 05 01 00 00       	jmp    c0027eaa <__adddf3+0x5ef>
c0027da5:	31 ff                	xor    edi,edi
c0027da7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027dac:	e9 4f 01 00 00       	jmp    c0027f00 <__adddf3+0x645>
c0027db1:	89 c1                	mov    ecx,eax
c0027db3:	89 d0                	mov    eax,edx
c0027db5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027db8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027dbb:	89 ca                	mov    edx,ecx
c0027dbd:	85 c9                	test   ecx,ecx
c0027dbf:	79 2c                	jns    c0027ded <__adddf3+0x532>
c0027dc1:	31 c9                	xor    ecx,ecx
c0027dc3:	f7 d8                	neg    eax
c0027dc5:	0f 95 c1             	setne  cl
c0027dc8:	01 ca                	add    edx,ecx
c0027dca:	f7 da                	neg    edx
c0027dcc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027dcf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027dd2:	eb 19                	jmp    c0027ded <__adddf3+0x532>
c0027dd4:	85 c0                	test   eax,eax
c0027dd6:	0f 89 e5 00 00 00    	jns    c0027ec1 <__adddf3+0x606>
c0027ddc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027de1:	89 c1                	mov    ecx,eax
c0027de3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027de6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027de9:	89 d0                	mov    eax,edx
c0027deb:	89 ca                	mov    edx,ecx
c0027ded:	85 d2                	test   edx,edx
c0027def:	74 59                	je     c0027e4a <__adddf3+0x58f>
c0027df1:	0f bd da             	bsr    ebx,edx
c0027df4:	83 f3 1f             	xor    ebx,0x1f
c0027df7:	88 d9                	mov    cl,bl
c0027df9:	d3 e2                	shl    edx,cl
c0027dfb:	bf 20 00 00 00       	mov    edi,0x20
c0027e00:	89 f9                	mov    ecx,edi
c0027e02:	29 d9                	sub    ecx,ebx
c0027e04:	89 c6                	mov    esi,eax
c0027e06:	d3 ee                	shr    esi,cl
c0027e08:	09 d6                	or     esi,edx
c0027e0a:	88 d9                	mov    cl,bl
c0027e0c:	d3 e0                	shl    eax,cl
c0027e0e:	89 c2                	mov    edx,eax
c0027e10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e13:	25 ff 07 00 00       	and    eax,0x7ff
c0027e18:	39 d8                	cmp    eax,ebx
c0027e1a:	7f 22                	jg     c0027e3e <__adddf3+0x583>
c0027e1c:	29 c3                	sub    ebx,eax
c0027e1e:	43                   	inc    ebx
c0027e1f:	88 d9                	mov    cl,bl
c0027e21:	d3 ea                	shr    edx,cl
c0027e23:	29 df                	sub    edi,ebx
c0027e25:	89 f9                	mov    ecx,edi
c0027e27:	89 f0                	mov    eax,esi
c0027e29:	d3 e0                	shl    eax,cl
c0027e2b:	09 c2                	or     edx,eax
c0027e2d:	89 f0                	mov    eax,esi
c0027e2f:	88 d9                	mov    cl,bl
c0027e31:	d3 e8                	shr    eax,cl
c0027e33:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e36:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027e3c:	eb 6f                	jmp    c0027ead <__adddf3+0x5f2>
c0027e3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e41:	29 d8                	sub    eax,ebx
c0027e43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e46:	89 f0                	mov    eax,esi
c0027e48:	eb 59                	jmp    c0027ea3 <__adddf3+0x5e8>
c0027e4a:	85 c0                	test   eax,eax
c0027e4c:	74 6a                	je     c0027eb8 <__adddf3+0x5fd>
c0027e4e:	0f bd c8             	bsr    ecx,eax
c0027e51:	83 f1 1f             	xor    ecx,0x1f
c0027e54:	d3 e0                	shl    eax,cl
c0027e56:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e59:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e5f:	83 c1 20             	add    ecx,0x20
c0027e62:	39 cb                	cmp    ebx,ecx
c0027e64:	7f 35                	jg     c0027e9b <__adddf3+0x5e0>
c0027e66:	29 d9                	sub    ecx,ebx
c0027e68:	8d 71 01             	lea    esi,[ecx+0x1]
c0027e6b:	83 fe 1f             	cmp    esi,0x1f
c0027e6e:	7e 09                	jle    c0027e79 <__adddf3+0x5be>
c0027e70:	83 e9 1f             	sub    ecx,0x1f
c0027e73:	d3 e8                	shr    eax,cl
c0027e75:	89 c3                	mov    ebx,eax
c0027e77:	eb 11                	jmp    c0027e8a <__adddf3+0x5cf>
c0027e79:	b9 20 00 00 00       	mov    ecx,0x20
c0027e7e:	29 f1                	sub    ecx,esi
c0027e80:	89 c3                	mov    ebx,eax
c0027e82:	d3 e3                	shl    ebx,cl
c0027e84:	89 f1                	mov    ecx,esi
c0027e86:	d3 e8                	shr    eax,cl
c0027e88:	89 c2                	mov    edx,eax
c0027e8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e8d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e95:	89 d0                	mov    eax,edx
c0027e97:	89 da                	mov    edx,ebx
c0027e99:	eb 26                	jmp    c0027ec1 <__adddf3+0x606>
c0027e9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e9e:	29 cf                	sub    edi,ecx
c0027ea0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ea3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ea8:	eb 17                	jmp    c0027ec1 <__adddf3+0x606>
c0027eaa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ead:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027eb0:	eb 0f                	jmp    c0027ec1 <__adddf3+0x606>
c0027eb2:	31 d2                	xor    edx,edx
c0027eb4:	31 c0                	xor    eax,eax
c0027eb6:	eb 09                	jmp    c0027ec1 <__adddf3+0x606>
c0027eb8:	89 c2                	mov    edx,eax
c0027eba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027ec1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ec4:	c1 e1 14             	shl    ecx,0x14
c0027ec7:	89 c3                	mov    ebx,eax
c0027ec9:	c1 eb 0b             	shr    ebx,0xb
c0027ecc:	09 d9                	or     ecx,ebx
c0027ece:	89 d3                	mov    ebx,edx
c0027ed0:	c1 eb 0b             	shr    ebx,0xb
c0027ed3:	c1 e0 15             	shl    eax,0x15
c0027ed6:	09 d8                	or     eax,ebx
c0027ed8:	89 c7                	mov    edi,eax
c0027eda:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027ee0:	0f 95 c0             	setne  al
c0027ee3:	89 c6                	mov    esi,eax
c0027ee5:	09 f3                	or     ebx,esi
c0027ee7:	83 e3 01             	and    ebx,0x1
c0027eea:	c1 ea 0a             	shr    edx,0xa
c0027eed:	21 da                	and    edx,ebx
c0027eef:	89 f8                	mov    eax,edi
c0027ef1:	01 d0                	add    eax,edx
c0027ef3:	83 d1 00             	adc    ecx,0x0
c0027ef6:	89 c7                	mov    edi,eax
c0027ef8:	eb 06                	jmp    c0027f00 <__adddf3+0x645>
c0027efa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027efd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f00:	89 f8                	mov    eax,edi
c0027f02:	89 ca                	mov    edx,ecx
c0027f04:	83 c4 24             	add    esp,0x24
c0027f07:	5b                   	pop    ebx
c0027f08:	5e                   	pop    esi
c0027f09:	5f                   	pop    edi
c0027f0a:	5d                   	pop    ebp
c0027f0b:	c3                   	ret    

c0027f0c <__subdf3>:
c0027f0c:	55                   	push   ebp
c0027f0d:	89 e5                	mov    ebp,esp
c0027f0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f15:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027f1e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027f21:	5d                   	pop    ebp
c0027f22:	e9 94 f9 ff ff       	jmp    c00278bb <__adddf3>

c0027f27 <__negdf2>:
c0027f27:	55                   	push   ebp
c0027f28:	89 e5                	mov    ebp,esp
c0027f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f2d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f30:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f36:	5d                   	pop    ebp
c0027f37:	c3                   	ret    

c0027f38 <__muldf3>:
c0027f38:	55                   	push   ebp
c0027f39:	89 e5                	mov    ebp,esp
c0027f3b:	57                   	push   edi
c0027f3c:	56                   	push   esi
c0027f3d:	53                   	push   ebx
c0027f3e:	83 ec 24             	sub    esp,0x24
c0027f41:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027f47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f4d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027f50:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027f53:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f56:	89 c8                	mov    eax,ecx
c0027f58:	c1 f8 14             	sar    eax,0x14
c0027f5b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f5e:	89 f8                	mov    eax,edi
c0027f60:	89 fb                	mov    ebx,edi
c0027f62:	c1 e3 0b             	shl    ebx,0xb
c0027f65:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027f68:	c1 e1 0b             	shl    ecx,0xb
c0027f6b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f71:	c1 e8 15             	shr    eax,0x15
c0027f74:	09 c1                	or     ecx,eax
c0027f76:	89 d6                	mov    esi,edx
c0027f78:	89 d0                	mov    eax,edx
c0027f7a:	c1 f8 14             	sar    eax,0x14
c0027f7d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027f80:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027f83:	89 c3                	mov    ebx,eax
c0027f85:	c1 e3 0b             	shl    ebx,0xb
c0027f88:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027f8b:	c1 e6 0b             	shl    esi,0xb
c0027f8e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f94:	c1 e8 15             	shr    eax,0x15
c0027f97:	09 c6                	or     esi,eax
c0027f99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f9c:	25 ff 07 00 00       	and    eax,0x7ff
c0027fa1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027fa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fa7:	25 ff 07 00 00       	and    eax,0x7ff
c0027fac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027faf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fb2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fb5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027fbc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fbf:	40                   	inc    eax
c0027fc0:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fc5:	0f 85 8d 00 00 00    	jne    c0028058 <__muldf3+0x120>
c0027fcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fce:	09 c8                	or     eax,ecx
c0027fd0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027fd4:	74 44                	je     c002801a <__muldf3+0xe2>
c0027fd6:	85 c0                	test   eax,eax
c0027fd8:	0f 85 31 02 00 00    	jne    c002820f <__muldf3+0x2d7>
c0027fde:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fe1:	40                   	inc    eax
c0027fe2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fe7:	75 13                	jne    c0027ffc <__muldf3+0xc4>
c0027fe9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027fec:	09 f1                	or     ecx,esi
c0027fee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ff2:	74 22                	je     c0028016 <__muldf3+0xde>
c0027ff4:	85 c9                	test   ecx,ecx
c0027ff6:	0f 85 0d 02 00 00    	jne    c0028209 <__muldf3+0x2d1>
c0027ffc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028000:	0f 89 09 02 00 00    	jns    c002820f <__muldf3+0x2d7>
c0028006:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028009:	05 00 00 00 80       	add    eax,0x80000000
c002800e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028011:	e9 f9 01 00 00       	jmp    c002820f <__muldf3+0x2d7>
c0028016:	85 c9                	test   ecx,ecx
c0028018:	eb 2e                	jmp    c0028048 <__muldf3+0x110>
c002801a:	85 c0                	test   eax,eax
c002801c:	74 20                	je     c002803e <__muldf3+0x106>
c002801e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028021:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028024:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028027:	c1 ef 1f             	shr    edi,0x1f
c002802a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002802d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028030:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028033:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028036:	09 f9                	or     ecx,edi
c0028038:	78 1e                	js     c0028058 <__muldf3+0x120>
c002803a:	89 c3                	mov    ebx,eax
c002803c:	eb e0                	jmp    c002801e <__muldf3+0xe6>
c002803e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028041:	f7 d0                	not    eax
c0028043:	a9 ff 07 00 00       	test   eax,0x7ff
c0028048:	75 b2                	jne    c0027ffc <__muldf3+0xc4>
c002804a:	31 ff                	xor    edi,edi
c002804c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028053:	e9 b7 01 00 00       	jmp    c002820f <__muldf3+0x2d7>
c0028058:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002805b:	40                   	inc    eax
c002805c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028061:	75 57                	jne    c00280ba <__muldf3+0x182>
c0028063:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028066:	09 f0                	or     eax,esi
c0028068:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002806c:	74 23                	je     c0028091 <__muldf3+0x159>
c002806e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028072:	0f 89 91 01 00 00    	jns    c0028209 <__muldf3+0x2d1>
c0028078:	85 c0                	test   eax,eax
c002807a:	0f 85 89 01 00 00    	jne    c0028209 <__muldf3+0x2d1>
c0028080:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028083:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028089:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002808c:	e9 7e 01 00 00       	jmp    c002820f <__muldf3+0x2d7>
c0028091:	85 c0                	test   eax,eax
c0028093:	75 0c                	jne    c00280a1 <__muldf3+0x169>
c0028095:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028099:	0f 89 6a 01 00 00    	jns    c0028209 <__muldf3+0x2d1>
c002809f:	eb df                	jmp    c0028080 <__muldf3+0x148>
c00280a1:	01 f6                	add    esi,esi
c00280a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00280a6:	c1 ea 1f             	shr    edx,0x1f
c00280a9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280ac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00280af:	8d 43 ff             	lea    eax,[ebx-0x1]
c00280b2:	09 d6                	or     esi,edx
c00280b4:	78 04                	js     c00280ba <__muldf3+0x182>
c00280b6:	89 c3                	mov    ebx,eax
c00280b8:	eb e7                	jmp    c00280a1 <__muldf3+0x169>
c00280ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00280c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280c6:	89 c8                	mov    eax,ecx
c00280c8:	f7 e6                	mul    esi
c00280ca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00280cd:	89 c7                	mov    edi,eax
c00280cf:	89 c8                	mov    eax,ecx
c00280d1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00280d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00280d7:	89 c1                	mov    ecx,eax
c00280d9:	89 f0                	mov    eax,esi
c00280db:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00280de:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00280e1:	89 c6                	mov    esi,eax
c00280e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280e6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00280e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00280ec:	31 c0                	xor    eax,eax
c00280ee:	01 f1                	add    ecx,esi
c00280f0:	0f 92 c0             	setb   al
c00280f3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00280f6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00280f9:	83 d6 00             	adc    esi,0x0
c00280fc:	01 c7                	add    edi,eax
c00280fe:	83 d6 00             	adc    esi,0x0
c0028101:	01 ca                	add    edx,ecx
c0028103:	0f 92 c1             	setb   cl
c0028106:	0f b6 c9             	movzx  ecx,cl
c0028109:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002810c:	83 d6 00             	adc    esi,0x0
c002810f:	01 cf                	add    edi,ecx
c0028111:	83 d6 00             	adc    esi,0x0
c0028114:	31 c9                	xor    ecx,ecx
c0028116:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028119:	0f 95 c1             	setne  cl
c002811c:	09 cf                	or     edi,ecx
c002811e:	85 f6                	test   esi,esi
c0028120:	78 0c                	js     c002812e <__muldf3+0x1f6>
c0028122:	01 f6                	add    esi,esi
c0028124:	89 f8                	mov    eax,edi
c0028126:	c1 e8 1f             	shr    eax,0x1f
c0028129:	09 c6                	or     esi,eax
c002812b:	01 ff                	add    edi,edi
c002812d:	4b                   	dec    ebx
c002812e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028134:	0f 8f 85 00 00 00    	jg     c00281bf <__muldf3+0x287>
c002813a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028140:	85 db                	test   ebx,ebx
c0028142:	0f 8f 84 00 00 00    	jg     c00281cc <__muldf3+0x294>
c0028148:	83 fb cc             	cmp    ebx,0xffffffcc
c002814b:	7c 79                	jl     c00281c6 <__muldf3+0x28e>
c002814d:	ba 01 00 00 00       	mov    edx,0x1
c0028152:	29 da                	sub    edx,ebx
c0028154:	81 ce 00 00 00 80    	or     esi,0x80000000
c002815a:	83 fa 1f             	cmp    edx,0x1f
c002815d:	7e 30                	jle    c002818f <__muldf3+0x257>
c002815f:	83 fa 20             	cmp    edx,0x20
c0028162:	75 0b                	jne    c002816f <__muldf3+0x237>
c0028164:	31 c0                	xor    eax,eax
c0028166:	85 ff                	test   edi,edi
c0028168:	0f 95 c0             	setne  al
c002816b:	89 c7                	mov    edi,eax
c002816d:	eb 1a                	jmp    c0028189 <__muldf3+0x251>
c002816f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028172:	89 f0                	mov    eax,esi
c0028174:	d3 e0                	shl    eax,cl
c0028176:	09 f8                	or     eax,edi
c0028178:	0f 95 c0             	setne  al
c002817b:	0f b6 c0             	movzx  eax,al
c002817e:	89 c7                	mov    edi,eax
c0028180:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028185:	29 d9                	sub    ecx,ebx
c0028187:	d3 ee                	shr    esi,cl
c0028189:	09 f7                	or     edi,esi
c002818b:	31 db                	xor    ebx,ebx
c002818d:	eb 3b                	jmp    c00281ca <__muldf3+0x292>
c002818f:	83 c3 1f             	add    ebx,0x1f
c0028192:	89 f0                	mov    eax,esi
c0028194:	88 d9                	mov    cl,bl
c0028196:	d3 e0                	shl    eax,cl
c0028198:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002819b:	89 f8                	mov    eax,edi
c002819d:	88 d1                	mov    cl,dl
c002819f:	d3 e8                	shr    eax,cl
c00281a1:	89 c1                	mov    ecx,eax
c00281a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00281a6:	09 c8                	or     eax,ecx
c00281a8:	88 d9                	mov    cl,bl
c00281aa:	d3 e7                	shl    edi,cl
c00281ac:	31 db                	xor    ebx,ebx
c00281ae:	85 ff                	test   edi,edi
c00281b0:	0f 95 c3             	setne  bl
c00281b3:	89 df                	mov    edi,ebx
c00281b5:	09 c7                	or     edi,eax
c00281b7:	88 d1                	mov    cl,dl
c00281b9:	d3 ee                	shr    esi,cl
c00281bb:	31 db                	xor    ebx,ebx
c00281bd:	eb 0d                	jmp    c00281cc <__muldf3+0x294>
c00281bf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00281c4:	eb 02                	jmp    c00281c8 <__muldf3+0x290>
c00281c6:	31 db                	xor    ebx,ebx
c00281c8:	31 ff                	xor    edi,edi
c00281ca:	31 f6                	xor    esi,esi
c00281cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281cf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00281d2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00281d7:	09 c3                	or     ebx,eax
c00281d9:	c1 e3 14             	shl    ebx,0x14
c00281dc:	89 f0                	mov    eax,esi
c00281de:	c1 e8 0b             	shr    eax,0xb
c00281e1:	09 c3                	or     ebx,eax
c00281e3:	89 f8                	mov    eax,edi
c00281e5:	c1 e8 0b             	shr    eax,0xb
c00281e8:	c1 e6 15             	shl    esi,0x15
c00281eb:	09 c6                	or     esi,eax
c00281ed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00281f3:	0f 95 c1             	setne  cl
c00281f6:	09 c8                	or     eax,ecx
c00281f8:	83 e0 01             	and    eax,0x1
c00281fb:	c1 ef 0a             	shr    edi,0xa
c00281fe:	21 c7                	and    edi,eax
c0028200:	01 f7                	add    edi,esi
c0028202:	83 d3 00             	adc    ebx,0x0
c0028205:	89 da                	mov    edx,ebx
c0028207:	eb 03                	jmp    c002820c <__muldf3+0x2d4>
c0028209:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002820c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002820f:	89 f8                	mov    eax,edi
c0028211:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028214:	83 c4 24             	add    esp,0x24
c0028217:	5b                   	pop    ebx
c0028218:	5e                   	pop    esi
c0028219:	5f                   	pop    edi
c002821a:	5d                   	pop    ebp
c002821b:	c3                   	ret    

c002821c <__divdf3>:
c002821c:	55                   	push   ebp
c002821d:	89 e5                	mov    ebp,esp
c002821f:	57                   	push   edi
c0028220:	56                   	push   esi
c0028221:	53                   	push   ebx
c0028222:	83 ec 2c             	sub    esp,0x2c
c0028225:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028228:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002822b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002822e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028231:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028234:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028237:	89 ce                	mov    esi,ecx
c0028239:	89 c8                	mov    eax,ecx
c002823b:	c1 f8 14             	sar    eax,0x14
c002823e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028241:	89 f8                	mov    eax,edi
c0028243:	89 fb                	mov    ebx,edi
c0028245:	c1 e3 0b             	shl    ebx,0xb
c0028248:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002824b:	c1 e6 0b             	shl    esi,0xb
c002824e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028254:	c1 e8 15             	shr    eax,0x15
c0028257:	09 c6                	or     esi,eax
c0028259:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002825c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002825f:	89 c2                	mov    edx,eax
c0028261:	c1 fa 14             	sar    edx,0x14
c0028264:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028267:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002826a:	89 de                	mov    esi,ebx
c002826c:	c1 e6 0b             	shl    esi,0xb
c002826f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028272:	c1 e0 0b             	shl    eax,0xb
c0028275:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002827a:	c1 eb 15             	shr    ebx,0x15
c002827d:	09 d8                	or     eax,ebx
c002827f:	89 c2                	mov    edx,eax
c0028281:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028284:	25 ff 07 00 00       	and    eax,0x7ff
c0028289:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002828c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002828f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028295:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028298:	29 d8                	sub    eax,ebx
c002829a:	05 ff 03 00 00       	add    eax,0x3ff
c002829f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00282a2:	46                   	inc    esi
c00282a3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00282a9:	0f 85 a5 00 00 00    	jne    c0028354 <__divdf3+0x138>
c00282af:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00282b2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00282b5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00282b9:	74 2a                	je     c00282e5 <__divdf3+0xc9>
c00282bb:	85 f6                	test   esi,esi
c00282bd:	0f 85 cc 02 00 00    	jne    c002858f <__divdf3+0x373>
c00282c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282c6:	40                   	inc    eax
c00282c7:	a9 fe 07 00 00       	test   eax,0x7fe
c00282cc:	75 26                	jne    c00282f4 <__divdf3+0xd8>
c00282ce:	85 db                	test   ebx,ebx
c00282d0:	74 22                	je     c00282f4 <__divdf3+0xd8>
c00282d2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00282d5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00282d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00282db:	09 d0                	or     eax,edx
c00282dd:	0f 85 ac 02 00 00    	jne    c002858f <__divdf3+0x373>
c00282e3:	eb 63                	jmp    c0028348 <__divdf3+0x12c>
c00282e5:	85 f6                	test   esi,esi
c00282e7:	75 22                	jne    c002830b <__divdf3+0xef>
c00282e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282ec:	40                   	inc    eax
c00282ed:	a9 fe 07 00 00       	test   eax,0x7fe
c00282f2:	74 36                	je     c002832a <__divdf3+0x10e>
c00282f4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00282f8:	0f 89 91 02 00 00    	jns    c002858f <__divdf3+0x373>
c00282fe:	89 f8                	mov    eax,edi
c0028300:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028306:	e9 80 02 00 00       	jmp    c002858b <__divdf3+0x36f>
c002830b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002830e:	01 f6                	add    esi,esi
c0028310:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028313:	c1 ef 1f             	shr    edi,0x1f
c0028316:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028319:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002831c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002831f:	09 f7                	or     edi,esi
c0028321:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028324:	78 2e                	js     c0028354 <__divdf3+0x138>
c0028326:	89 c8                	mov    eax,ecx
c0028328:	eb e1                	jmp    c002830b <__divdf3+0xef>
c002832a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002832d:	09 d0                	or     eax,edx
c002832f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028333:	74 0f                	je     c0028344 <__divdf3+0x128>
c0028335:	85 c0                	test   eax,eax
c0028337:	74 bb                	je     c00282f4 <__divdf3+0xd8>
c0028339:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002833c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002833f:	e9 4b 02 00 00       	jmp    c002858f <__divdf3+0x373>
c0028344:	85 c0                	test   eax,eax
c0028346:	75 ac                	jne    c00282f4 <__divdf3+0xd8>
c0028348:	31 ff                	xor    edi,edi
c002834a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002834f:	e9 3b 02 00 00       	jmp    c002858f <__divdf3+0x373>
c0028354:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028357:	8d 4f 01             	lea    ecx,[edi+0x1]
c002835a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028360:	75 6b                	jne    c00283cd <__divdf3+0x1b1>
c0028362:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028365:	09 d6                	or     esi,edx
c0028367:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002836b:	74 28                	je     c0028395 <__divdf3+0x179>
c002836d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028370:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028373:	85 f6                	test   esi,esi
c0028375:	0f 85 14 02 00 00    	jne    c002858f <__divdf3+0x373>
c002837b:	31 ff                	xor    edi,edi
c002837d:	31 c9                	xor    ecx,ecx
c002837f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028382:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028385:	0f 89 04 02 00 00    	jns    c002858f <__divdf3+0x373>
c002838b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028390:	e9 fa 01 00 00       	jmp    c002858f <__divdf3+0x373>
c0028395:	85 f6                	test   esi,esi
c0028397:	75 1b                	jne    c00283b4 <__divdf3+0x198>
c0028399:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002839c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002839f:	25 00 00 00 80       	and    eax,0x80000000
c00283a4:	31 c9                	xor    ecx,ecx
c00283a6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00283ab:	89 cf                	mov    edi,ecx
c00283ad:	89 c1                	mov    ecx,eax
c00283af:	e9 db 01 00 00       	jmp    c002858f <__divdf3+0x373>
c00283b4:	01 d2                	add    edx,edx
c00283b6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00283b9:	c1 eb 1f             	shr    ebx,0x1f
c00283bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283bf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00283c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00283c5:	09 da                	or     edx,ebx
c00283c7:	78 04                	js     c00283cd <__divdf3+0x1b1>
c00283c9:	89 c8                	mov    eax,ecx
c00283cb:	eb e7                	jmp    c00283b4 <__divdf3+0x198>
c00283cd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00283d6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00283dc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00283df:	39 d6                	cmp    esi,edx
c00283e1:	77 0d                	ja     c00283f0 <__divdf3+0x1d4>
c00283e3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00283e6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00283e9:	72 1b                	jb     c0028406 <__divdf3+0x1ea>
c00283eb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00283ee:	75 16                	jne    c0028406 <__divdf3+0x1ea>
c00283f0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00283f3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00283f6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00283f9:	83 de 00             	sbb    esi,0x0
c00283fc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00283ff:	ba 01 00 00 00       	mov    edx,0x1
c0028404:	eb 02                	jmp    c0028408 <__divdf3+0x1ec>
c0028406:	31 d2                	xor    edx,edx
c0028408:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002840f:	31 ff                	xor    edi,edi
c0028411:	01 ff                	add    edi,edi
c0028413:	89 d1                	mov    ecx,edx
c0028415:	c1 e9 1f             	shr    ecx,0x1f
c0028418:	09 cf                	or     edi,ecx
c002841a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002841d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028420:	89 da                	mov    edx,ebx
c0028422:	89 f3                	mov    ebx,esi
c0028424:	8d 34 36             	lea    esi,[esi+esi*1]
c0028427:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002842a:	c1 e9 1f             	shr    ecx,0x1f
c002842d:	09 ce                	or     esi,ecx
c002842f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028432:	01 c9                	add    ecx,ecx
c0028434:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028437:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002843a:	85 db                	test   ebx,ebx
c002843c:	78 29                	js     c0028467 <__divdf3+0x24b>
c002843e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028441:	72 07                	jb     c002844a <__divdf3+0x22e>
c0028443:	75 3c                	jne    c0028481 <__divdf3+0x265>
c0028445:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028448:	77 37                	ja     c0028481 <__divdf3+0x265>
c002844a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002844d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028450:	31 d2                	xor    edx,edx
c0028452:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028455:	0f 97 c2             	seta   dl
c0028458:	29 d6                	sub    esi,edx
c002845a:	89 d9                	mov    ecx,ebx
c002845c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002845f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028462:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028465:	eb 17                	jmp    c002847e <__divdf3+0x262>
c0028467:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002846a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002846d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028470:	0f 97 c1             	seta   cl
c0028473:	0f b6 c9             	movzx  ecx,cl
c0028476:	29 ce                	sub    esi,ecx
c0028478:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002847b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002847e:	83 ca 01             	or     edx,0x1
c0028481:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028484:	75 8b                	jne    c0028411 <__divdf3+0x1f5>
c0028486:	c1 e7 09             	shl    edi,0x9
c0028489:	89 d1                	mov    ecx,edx
c002848b:	c1 e9 17             	shr    ecx,0x17
c002848e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028491:	09 f3                	or     ebx,esi
c0028493:	0f 95 c3             	setne  bl
c0028496:	0f b6 db             	movzx  ebx,bl
c0028499:	c1 e2 09             	shl    edx,0x9
c002849c:	09 d3                	or     ebx,edx
c002849e:	89 ca                	mov    edx,ecx
c00284a0:	09 fa                	or     edx,edi
c00284a2:	78 0c                	js     c00284b0 <__divdf3+0x294>
c00284a4:	01 d2                	add    edx,edx
c00284a6:	89 d9                	mov    ecx,ebx
c00284a8:	c1 e9 1f             	shr    ecx,0x1f
c00284ab:	09 ca                	or     edx,ecx
c00284ad:	01 db                	add    ebx,ebx
c00284af:	48                   	dec    eax
c00284b0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00284b5:	0f 8f 83 00 00 00    	jg     c002853e <__divdf3+0x322>
c00284bb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284c1:	85 c0                	test   eax,eax
c00284c3:	0f 8f 82 00 00 00    	jg     c002854b <__divdf3+0x32f>
c00284c9:	83 f8 cc             	cmp    eax,0xffffffcc
c00284cc:	7c 77                	jl     c0028545 <__divdf3+0x329>
c00284ce:	be 01 00 00 00       	mov    esi,0x1
c00284d3:	29 c6                	sub    esi,eax
c00284d5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00284db:	83 fe 1f             	cmp    esi,0x1f
c00284de:	7e 2f                	jle    c002850f <__divdf3+0x2f3>
c00284e0:	83 fe 20             	cmp    esi,0x20
c00284e3:	75 0a                	jne    c00284ef <__divdf3+0x2d3>
c00284e5:	85 db                	test   ebx,ebx
c00284e7:	0f 95 c3             	setne  bl
c00284ea:	0f b6 db             	movzx  ebx,bl
c00284ed:	eb 1a                	jmp    c0028509 <__divdf3+0x2ed>
c00284ef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00284f2:	89 d7                	mov    edi,edx
c00284f4:	d3 e7                	shl    edi,cl
c00284f6:	89 f9                	mov    ecx,edi
c00284f8:	09 d9                	or     ecx,ebx
c00284fa:	0f 95 c3             	setne  bl
c00284fd:	0f b6 db             	movzx  ebx,bl
c0028500:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028505:	29 c1                	sub    ecx,eax
c0028507:	d3 ea                	shr    edx,cl
c0028509:	09 d3                	or     ebx,edx
c002850b:	31 c0                	xor    eax,eax
c002850d:	eb 3a                	jmp    c0028549 <__divdf3+0x32d>
c002850f:	83 c0 1f             	add    eax,0x1f
c0028512:	89 d7                	mov    edi,edx
c0028514:	88 c1                	mov    cl,al
c0028516:	d3 e7                	shl    edi,cl
c0028518:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002851b:	89 df                	mov    edi,ebx
c002851d:	89 f1                	mov    ecx,esi
c002851f:	d3 ef                	shr    edi,cl
c0028521:	89 f9                	mov    ecx,edi
c0028523:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028526:	09 cf                	or     edi,ecx
c0028528:	88 c1                	mov    cl,al
c002852a:	d3 e3                	shl    ebx,cl
c002852c:	85 db                	test   ebx,ebx
c002852e:	0f 95 c3             	setne  bl
c0028531:	0f b6 db             	movzx  ebx,bl
c0028534:	09 fb                	or     ebx,edi
c0028536:	89 f1                	mov    ecx,esi
c0028538:	d3 ea                	shr    edx,cl
c002853a:	31 c0                	xor    eax,eax
c002853c:	eb 0d                	jmp    c002854b <__divdf3+0x32f>
c002853e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028543:	eb 02                	jmp    c0028547 <__divdf3+0x32b>
c0028545:	31 c0                	xor    eax,eax
c0028547:	31 db                	xor    ebx,ebx
c0028549:	31 d2                	xor    edx,edx
c002854b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002854e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028551:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028557:	09 c8                	or     eax,ecx
c0028559:	c1 e0 14             	shl    eax,0x14
c002855c:	89 d1                	mov    ecx,edx
c002855e:	c1 e9 0b             	shr    ecx,0xb
c0028561:	09 c8                	or     eax,ecx
c0028563:	89 c6                	mov    esi,eax
c0028565:	89 d9                	mov    ecx,ebx
c0028567:	c1 e9 0b             	shr    ecx,0xb
c002856a:	c1 e2 15             	shl    edx,0x15
c002856d:	09 ca                	or     edx,ecx
c002856f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028575:	0f 95 c0             	setne  al
c0028578:	09 c1                	or     ecx,eax
c002857a:	83 e1 01             	and    ecx,0x1
c002857d:	c1 eb 0a             	shr    ebx,0xa
c0028580:	21 cb                	and    ebx,ecx
c0028582:	01 d3                	add    ebx,edx
c0028584:	89 d8                	mov    eax,ebx
c0028586:	83 d6 00             	adc    esi,0x0
c0028589:	89 f2                	mov    edx,esi
c002858b:	89 c7                	mov    edi,eax
c002858d:	89 d1                	mov    ecx,edx
c002858f:	89 f8                	mov    eax,edi
c0028591:	89 ca                	mov    edx,ecx
c0028593:	83 c4 2c             	add    esp,0x2c
c0028596:	5b                   	pop    ebx
c0028597:	5e                   	pop    esi
c0028598:	5f                   	pop    edi
c0028599:	5d                   	pop    ebp
c002859a:	c3                   	ret    

c002859b <__floatsidf>:
c002859b:	55                   	push   ebp
c002859c:	89 e5                	mov    ebp,esp
c002859e:	56                   	push   esi
c002859f:	53                   	push   ebx
c00285a0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285a3:	85 db                	test   ebx,ebx
c00285a5:	7e 15                	jle    c00285bc <__floatsidf+0x21>
c00285a7:	0f bd cb             	bsr    ecx,ebx
c00285aa:	83 f1 1f             	xor    ecx,0x1f
c00285ad:	d3 e3                	shl    ebx,cl
c00285af:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00285b5:	b8 1e 04 00 00       	mov    eax,0x41e
c00285ba:	eb 21                	jmp    c00285dd <__floatsidf+0x42>
c00285bc:	b8 00 00 00 00       	mov    eax,0x0
c00285c1:	ba 00 00 00 00       	mov    edx,0x0
c00285c6:	74 2a                	je     c00285f2 <__floatsidf+0x57>
c00285c8:	f7 db                	neg    ebx
c00285ca:	0f bd cb             	bsr    ecx,ebx
c00285cd:	83 f1 1f             	xor    ecx,0x1f
c00285d0:	d3 e3                	shl    ebx,cl
c00285d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00285d8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00285dd:	29 c8                	sub    eax,ecx
c00285df:	c1 e0 14             	shl    eax,0x14
c00285e2:	89 c1                	mov    ecx,eax
c00285e4:	89 de                	mov    esi,ebx
c00285e6:	c1 ee 0b             	shr    esi,0xb
c00285e9:	09 f1                	or     ecx,esi
c00285eb:	89 ca                	mov    edx,ecx
c00285ed:	c1 e3 15             	shl    ebx,0x15
c00285f0:	89 d8                	mov    eax,ebx
c00285f2:	5b                   	pop    ebx
c00285f3:	5e                   	pop    esi
c00285f4:	5d                   	pop    ebp
c00285f5:	c3                   	ret    

c00285f6 <__floatunsidf>:
c00285f6:	55                   	push   ebp
c00285f7:	89 e5                	mov    ebp,esp
c00285f9:	56                   	push   esi
c00285fa:	53                   	push   ebx
c00285fb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285fe:	85 db                	test   ebx,ebx
c0028600:	74 2a                	je     c002862c <__floatunsidf+0x36>
c0028602:	0f bd cb             	bsr    ecx,ebx
c0028605:	83 f1 1f             	xor    ecx,0x1f
c0028608:	d3 e3                	shl    ebx,cl
c002860a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028610:	b8 1e 04 00 00       	mov    eax,0x41e
c0028615:	29 c8                	sub    eax,ecx
c0028617:	c1 e0 14             	shl    eax,0x14
c002861a:	89 c1                	mov    ecx,eax
c002861c:	89 de                	mov    esi,ebx
c002861e:	c1 ee 0b             	shr    esi,0xb
c0028621:	09 f1                	or     ecx,esi
c0028623:	89 ca                	mov    edx,ecx
c0028625:	c1 e3 15             	shl    ebx,0x15
c0028628:	89 d8                	mov    eax,ebx
c002862a:	eb 04                	jmp    c0028630 <__floatunsidf+0x3a>
c002862c:	31 c0                	xor    eax,eax
c002862e:	31 d2                	xor    edx,edx
c0028630:	5b                   	pop    ebx
c0028631:	5e                   	pop    esi
c0028632:	5d                   	pop    ebp
c0028633:	c3                   	ret    

c0028634 <__fixdfsi>:
c0028634:	55                   	push   ebp
c0028635:	89 e5                	mov    ebp,esp
c0028637:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002863a:	89 d1                	mov    ecx,edx
c002863c:	c1 e1 0b             	shl    ecx,0xb
c002863f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028648:	c1 e8 15             	shr    eax,0x15
c002864b:	09 c1                	or     ecx,eax
c002864d:	c1 fa 14             	sar    edx,0x14
c0028650:	78 1f                	js     c0028671 <__fixdfsi+0x3d>
c0028652:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028658:	31 c0                	xor    eax,eax
c002865a:	83 fa 1e             	cmp    edx,0x1e
c002865d:	77 40                	ja     c002869f <__fixdfsi+0x6b>
c002865f:	89 c8                	mov    eax,ecx
c0028661:	0d 00 00 00 80       	or     eax,0x80000000
c0028666:	b9 1f 00 00 00       	mov    ecx,0x1f
c002866b:	29 d1                	sub    ecx,edx
c002866d:	d3 e8                	shr    eax,cl
c002866f:	eb 2e                	jmp    c002869f <__fixdfsi+0x6b>
c0028671:	31 c0                	xor    eax,eax
c0028673:	81 c2 01 04 00 00    	add    edx,0x401
c0028679:	78 24                	js     c002869f <__fixdfsi+0x6b>
c002867b:	83 fa 1e             	cmp    edx,0x1e
c002867e:	7e 09                	jle    c0028689 <__fixdfsi+0x55>
c0028680:	83 fa 1f             	cmp    edx,0x1f
c0028683:	75 18                	jne    c002869d <__fixdfsi+0x69>
c0028685:	85 c9                	test   ecx,ecx
c0028687:	75 14                	jne    c002869d <__fixdfsi+0x69>
c0028689:	89 c8                	mov    eax,ecx
c002868b:	0d 00 00 00 80       	or     eax,0x80000000
c0028690:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028695:	29 d1                	sub    ecx,edx
c0028697:	d3 e8                	shr    eax,cl
c0028699:	f7 d8                	neg    eax
c002869b:	eb 02                	jmp    c002869f <__fixdfsi+0x6b>
c002869d:	31 c0                	xor    eax,eax
c002869f:	5d                   	pop    ebp
c00286a0:	c3                   	ret    

c00286a1 <__fixunsdfsi>:
c00286a1:	55                   	push   ebp
c00286a2:	89 e5                	mov    ebp,esp
c00286a4:	53                   	push   ebx
c00286a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00286a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00286ab:	89 d3                	mov    ebx,edx
c00286ad:	c1 fb 14             	sar    ebx,0x14
c00286b0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00286b6:	31 c0                	xor    eax,eax
c00286b8:	83 fb 1f             	cmp    ebx,0x1f
c00286bb:	77 1d                	ja     c00286da <__fixunsdfsi+0x39>
c00286bd:	89 d0                	mov    eax,edx
c00286bf:	c1 e0 0b             	shl    eax,0xb
c00286c2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00286c7:	c1 e9 15             	shr    ecx,0x15
c00286ca:	09 c8                	or     eax,ecx
c00286cc:	0d 00 00 00 80       	or     eax,0x80000000
c00286d1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00286d6:	29 d9                	sub    ecx,ebx
c00286d8:	d3 e8                	shr    eax,cl
c00286da:	5b                   	pop    ebx
c00286db:	5d                   	pop    ebp
c00286dc:	c3                   	ret    

c00286dd <__cmpdf2>:
c00286dd:	55                   	push   ebp
c00286de:	89 e5                	mov    ebp,esp
c00286e0:	57                   	push   edi
c00286e1:	56                   	push   esi
c00286e2:	53                   	push   ebx
c00286e3:	83 ec 0c             	sub    esp,0xc
c00286e6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00286e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286ec:	89 ca                	mov    edx,ecx
c00286ee:	c1 ea 14             	shr    edx,0x14
c00286f1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00286f7:	89 cb                	mov    ebx,ecx
c00286f9:	c1 fb 1f             	sar    ebx,0x1f
c00286fc:	31 da                	xor    edx,ebx
c00286fe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028701:	89 df                	mov    edi,ebx
c0028703:	c1 e7 0b             	shl    edi,0xb
c0028706:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028709:	c1 e1 0b             	shl    ecx,0xb
c002870c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028712:	c1 eb 15             	shr    ebx,0x15
c0028715:	09 d9                	or     ecx,ebx
c0028717:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002871a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002871d:	89 ce                	mov    esi,ecx
c002871f:	c1 ee 14             	shr    esi,0x14
c0028722:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028728:	89 cb                	mov    ebx,ecx
c002872a:	c1 fb 1f             	sar    ebx,0x1f
c002872d:	31 de                	xor    esi,ebx
c002872f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028732:	89 df                	mov    edi,ebx
c0028734:	c1 e7 0b             	shl    edi,0xb
c0028737:	c1 e1 0b             	shl    ecx,0xb
c002873a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028740:	c1 eb 15             	shr    ebx,0x15
c0028743:	09 d9                	or     ecx,ebx
c0028745:	89 d3                	mov    ebx,edx
c0028747:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002874d:	43                   	inc    ebx
c002874e:	83 fb 01             	cmp    ebx,0x1
c0028751:	77 08                	ja     c002875b <__cmpdf2+0x7e>
c0028753:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028756:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028759:	75 68                	jne    c00287c3 <__cmpdf2+0xe6>
c002875b:	89 f3                	mov    ebx,esi
c002875d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028763:	43                   	inc    ebx
c0028764:	83 fb 01             	cmp    ebx,0x1
c0028767:	77 06                	ja     c002876f <__cmpdf2+0x92>
c0028769:	89 fb                	mov    ebx,edi
c002876b:	09 cb                	or     ebx,ecx
c002876d:	75 54                	jne    c00287c3 <__cmpdf2+0xe6>
c002876f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028772:	09 f8                	or     eax,edi
c0028774:	09 c8                	or     eax,ecx
c0028776:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028779:	75 12                	jne    c002878d <__cmpdf2+0xb0>
c002877b:	8d 42 01             	lea    eax,[edx+0x1]
c002877e:	83 f8 01             	cmp    eax,0x1
c0028781:	77 0a                	ja     c002878d <__cmpdf2+0xb0>
c0028783:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028786:	31 c0                	xor    eax,eax
c0028788:	83 fb 01             	cmp    ebx,0x1
c002878b:	76 36                	jbe    c00287c3 <__cmpdf2+0xe6>
c002878d:	b8 01 00 00 00       	mov    eax,0x1
c0028792:	39 f2                	cmp    edx,esi
c0028794:	7f 2d                	jg     c00287c3 <__cmpdf2+0xe6>
c0028796:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002879b:	7c 26                	jl     c00287c3 <__cmpdf2+0xe6>
c002879d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00287a0:	77 07                	ja     c00287a9 <__cmpdf2+0xcc>
c00287a2:	72 16                	jb     c00287ba <__cmpdf2+0xdd>
c00287a4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00287a7:	76 0a                	jbe    c00287b3 <__cmpdf2+0xd6>
c00287a9:	89 d0                	mov    eax,edx
c00287ab:	c1 f8 1f             	sar    eax,0x1f
c00287ae:	83 c8 01             	or     eax,0x1
c00287b1:	eb 10                	jmp    c00287c3 <__cmpdf2+0xe6>
c00287b3:	b8 00 00 00 00       	mov    eax,0x0
c00287b8:	73 09                	jae    c00287c3 <__cmpdf2+0xe6>
c00287ba:	89 d0                	mov    eax,edx
c00287bc:	c1 f8 1f             	sar    eax,0x1f
c00287bf:	83 e0 02             	and    eax,0x2
c00287c2:	48                   	dec    eax
c00287c3:	83 c4 0c             	add    esp,0xc
c00287c6:	5b                   	pop    ebx
c00287c7:	5e                   	pop    esi
c00287c8:	5f                   	pop    edi
c00287c9:	5d                   	pop    ebp
c00287ca:	c3                   	ret    

c00287cb <__eqdf2>:
c00287cb:	55                   	push   ebp
c00287cc:	89 e5                	mov    ebp,esp
c00287ce:	50                   	push   eax
c00287cf:	6a 01                	push   0x1
c00287d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00287d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00287d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00287da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00287dd:	e8 fb fe ff ff       	call   c00286dd <__cmpdf2>
c00287e2:	83 c4 18             	add    esp,0x18
c00287e5:	c9                   	leave  
c00287e6:	c3                   	ret    

c00287e7 <__nedf2>:
c00287e7:	eb e2                	jmp    c00287cb <__eqdf2>

c00287e9 <__gtdf2>:
c00287e9:	55                   	push   ebp
c00287ea:	89 e5                	mov    ebp,esp
c00287ec:	50                   	push   eax
c00287ed:	6a ff                	push   0xffffffff
c00287ef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00287f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00287f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00287f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00287fb:	e8 dd fe ff ff       	call   c00286dd <__cmpdf2>
c0028800:	83 c4 18             	add    esp,0x18
c0028803:	c9                   	leave  
c0028804:	c3                   	ret    

c0028805 <__gedf2>:
c0028805:	eb e2                	jmp    c00287e9 <__gtdf2>

c0028807 <__ltdf2>:
c0028807:	eb c2                	jmp    c00287cb <__eqdf2>

c0028809 <__ledf2>:
c0028809:	eb c0                	jmp    c00287cb <__eqdf2>

c002880b <__truncdfsf2>:
c002880b:	55                   	push   ebp
c002880c:	89 e5                	mov    ebp,esp
c002880e:	57                   	push   edi
c002880f:	56                   	push   esi
c0028810:	53                   	push   ebx
c0028811:	83 ec 0c             	sub    esp,0xc
c0028814:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028817:	89 d1                	mov    ecx,edx
c0028819:	c1 f9 14             	sar    ecx,0x14
c002881c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002881f:	89 df                	mov    edi,ebx
c0028821:	c1 e7 0b             	shl    edi,0xb
c0028824:	89 d0                	mov    eax,edx
c0028826:	c1 e0 0b             	shl    eax,0xb
c0028829:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002882e:	c1 eb 15             	shr    ebx,0x15
c0028831:	09 d8                	or     eax,ebx
c0028833:	89 cb                	mov    ebx,ecx
c0028835:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002883b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028841:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028847:	0f 86 9e 00 00 00    	jbe    c00288eb <__truncdfsf2+0xe0>
c002884d:	85 db                	test   ebx,ebx
c002884f:	75 0a                	jne    c002885b <__truncdfsf2+0x50>
c0028851:	c1 fa 17             	sar    edx,0x17
c0028854:	30 d2                	xor    dl,dl
c0028856:	e9 84 00 00 00       	jmp    c00288df <__truncdfsf2+0xd4>
c002885b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028861:	83 fe 83             	cmp    esi,0xffffff83
c0028864:	7d 4b                	jge    c00288b1 <__truncdfsf2+0xa6>
c0028866:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002886b:	29 f1                	sub    ecx,esi
c002886d:	83 f9 1f             	cmp    ecx,0x1f
c0028870:	7f 6b                	jg     c00288dd <__truncdfsf2+0xd2>
c0028872:	0d 00 00 00 80       	or     eax,0x80000000
c0028877:	89 c3                	mov    ebx,eax
c0028879:	d3 eb                	shr    ebx,cl
c002887b:	be 01 00 00 00       	mov    esi,0x1
c0028880:	d3 e6                	shl    esi,cl
c0028882:	4e                   	dec    esi
c0028883:	21 f0                	and    eax,esi
c0028885:	09 f8                	or     eax,edi
c0028887:	0f 95 c0             	setne  al
c002888a:	0f b6 c0             	movzx  eax,al
c002888d:	09 c3                	or     ebx,eax
c002888f:	89 d9                	mov    ecx,ebx
c0028891:	c1 e9 08             	shr    ecx,0x8
c0028894:	f6 c3 7f             	test   bl,0x7f
c0028897:	0f 95 c0             	setne  al
c002889a:	09 c8                	or     eax,ecx
c002889c:	83 e0 01             	and    eax,0x1
c002889f:	c1 eb 07             	shr    ebx,0x7
c00288a2:	21 c3                	and    ebx,eax
c00288a4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00288aa:	09 d1                	or     ecx,edx
c00288ac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00288af:	eb 76                	jmp    c0028927 <__truncdfsf2+0x11c>
c00288b1:	83 c6 80             	add    esi,0xffffff80
c00288b4:	7e 1d                	jle    c00288d3 <__truncdfsf2+0xc8>
c00288b6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00288bc:	75 0b                	jne    c00288c9 <__truncdfsf2+0xbe>
c00288be:	09 f8                	or     eax,edi
c00288c0:	74 09                	je     c00288cb <__truncdfsf2+0xc0>
c00288c2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00288c7:	eb 02                	jmp    c00288cb <__truncdfsf2+0xc0>
c00288c9:	31 c0                	xor    eax,eax
c00288cb:	c1 fa 17             	sar    edx,0x17
c00288ce:	80 ca ff             	or     dl,0xff
c00288d1:	eb 0e                	jmp    c00288e1 <__truncdfsf2+0xd6>
c00288d3:	c1 fa 1f             	sar    edx,0x1f
c00288d6:	c1 e2 08             	shl    edx,0x8
c00288d9:	09 ca                	or     edx,ecx
c00288db:	eb 04                	jmp    c00288e1 <__truncdfsf2+0xd6>
c00288dd:	31 d2                	xor    edx,edx
c00288df:	31 c0                	xor    eax,eax
c00288e1:	c1 e2 17             	shl    edx,0x17
c00288e4:	c1 e8 08             	shr    eax,0x8
c00288e7:	09 d0                	or     eax,edx
c00288e9:	eb 3c                	jmp    c0028927 <__truncdfsf2+0x11c>
c00288eb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00288f1:	89 ca                	mov    edx,ecx
c00288f3:	c1 fa 0b             	sar    edx,0xb
c00288f6:	c1 e2 08             	shl    edx,0x8
c00288f9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00288fc:	31 db                	xor    ebx,ebx
c00288fe:	85 ff                	test   edi,edi
c0028900:	0f 95 c3             	setne  bl
c0028903:	09 d8                	or     eax,ebx
c0028905:	89 c3                	mov    ebx,eax
c0028907:	c1 eb 08             	shr    ebx,0x8
c002890a:	a8 7f                	test   al,0x7f
c002890c:	0f 95 c2             	setne  dl
c002890f:	89 d6                	mov    esi,edx
c0028911:	09 de                	or     esi,ebx
c0028913:	83 e6 01             	and    esi,0x1
c0028916:	c1 e8 07             	shr    eax,0x7
c0028919:	21 f0                	and    eax,esi
c002891b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002891e:	09 ca                	or     edx,ecx
c0028920:	c1 e2 17             	shl    edx,0x17
c0028923:	09 da                	or     edx,ebx
c0028925:	01 d0                	add    eax,edx
c0028927:	83 c4 0c             	add    esp,0xc
c002892a:	5b                   	pop    ebx
c002892b:	5e                   	pop    esi
c002892c:	5f                   	pop    edi
c002892d:	5d                   	pop    ebp
c002892e:	c3                   	ret    

c002892f <__extendsfdf2>:
c002892f:	55                   	push   ebp
c0028930:	89 e5                	mov    ebp,esp
c0028932:	57                   	push   edi
c0028933:	56                   	push   esi
c0028934:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028937:	89 d1                	mov    ecx,edx
c0028939:	c1 f9 17             	sar    ecx,0x17
c002893c:	c1 e2 08             	shl    edx,0x8
c002893f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028945:	89 c8                	mov    eax,ecx
c0028947:	80 e4 f8             	and    ah,0xf8
c002894a:	8d 71 01             	lea    esi,[ecx+0x1]
c002894d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028953:	75 27                	jne    c002897c <__extendsfdf2+0x4d>
c0028955:	81 e1 ff 00 00 00    	and    ecx,0xff
c002895b:	75 18                	jne    c0028975 <__extendsfdf2+0x46>
c002895d:	85 d2                	test   edx,edx
c002895f:	74 20                	je     c0028981 <__extendsfdf2+0x52>
c0028961:	41                   	inc    ecx
c0028962:	01 d2                	add    edx,edx
c0028964:	79 fb                	jns    c0028961 <__extendsfdf2+0x32>
c0028966:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002896c:	29 c8                	sub    eax,ecx
c002896e:	05 81 03 00 00       	add    eax,0x381
c0028973:	eb 0c                	jmp    c0028981 <__extendsfdf2+0x52>
c0028975:	05 00 07 00 00       	add    eax,0x700
c002897a:	eb 05                	jmp    c0028981 <__extendsfdf2+0x52>
c002897c:	05 80 03 00 00       	add    eax,0x380
c0028981:	c1 e0 14             	shl    eax,0x14
c0028984:	89 c1                	mov    ecx,eax
c0028986:	89 d0                	mov    eax,edx
c0028988:	c1 e8 0b             	shr    eax,0xb
c002898b:	09 c1                	or     ecx,eax
c002898d:	c1 e2 15             	shl    edx,0x15
c0028990:	89 d0                	mov    eax,edx
c0028992:	89 ca                	mov    edx,ecx
c0028994:	5e                   	pop    esi
c0028995:	5f                   	pop    edi
c0028996:	5d                   	pop    ebp
c0028997:	c3                   	ret    
c0028998:	66 90                	xchg   ax,ax
c002899a:	66 90                	xchg   ax,ax
c002899c:	66 90                	xchg   ax,ax
c002899e:	66 90                	xchg   ax,ax

c00289a0 <fabs>:
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00289aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00289ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00289b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00289b7:	dd 04 24             	fld    QWORD PTR [esp]
c00289ba:	83 c4 0c             	add    esp,0xc
c00289bd:	c3                   	ret    
c00289be:	66 90                	xchg   ax,ax

c00289c0 <lrint>:
c00289c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00289c4:	83 ec 04             	sub    esp,0x4
c00289c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00289ca:	58                   	pop    eax
c00289cb:	c3                   	ret    

c00289cc <lrintf>:
c00289cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00289d0:	83 ec 04             	sub    esp,0x4
c00289d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00289d6:	58                   	pop    eax
c00289d7:	c3                   	ret    

Disassembly of section .init:

c00289d8 <_init>:
c00289d8:	55                   	push   ebp
c00289d9:	89 e5                	mov    ebp,esp
c00289db:	e8 38 77 fd ff       	call   c0000118 <frame_dummy>
c00289e0:	e8 5b e0 ff ff       	call   c0026a40 <__do_global_ctors_aux>
c00289e5:	5d                   	pop    ebp
c00289e6:	c3                   	ret    

Disassembly of section .fini:

c00289e7 <_fini>:
c00289e7:	55                   	push   ebp
c00289e8:	89 e5                	mov    ebp,esp
c00289ea:	e8 b9 76 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00289ef:	5d                   	pop    ebp
c00289f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00289f2 <Computer::~Computer()>:
c00289f2:	83 ec 0c             	sub    esp,0xc
c00289f5:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 10                	mov    DWORD PTR [eax],edx
c0028a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a04:	83 ec 0c             	sub    esp,0xc
c0028a07:	50                   	push   eax
c0028a08:	e8 b5 b6 fe ff       	call   c00140c2 <Device::~Device()>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	90                   	nop
c0028a11:	83 c4 0c             	add    esp,0xc
c0028a14:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028a16 <Computer::~Computer()>:
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	83 ec 0c             	sub    esp,0xc
c0028a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a20:	e8 cd ff ff ff       	call   c00289f2 <Computer::~Computer()>
c0028a25:	83 c4 10             	add    esp,0x10
c0028a28:	83 ec 08             	sub    esp,0x8
c0028a2b:	68 ec 01 00 00       	push   0x1ec
c0028a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a34:	e8 aa a2 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	83 c4 0c             	add    esp,0xc
c0028a3f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028a40 <idleCommon()>:
c0028a40:	83 ec 0c             	sub    esp,0xc
c0028a43:	e8 ac 54 ff ff       	call   c001def4 <lockScheduler()>
c0028a48:	e8 1d 58 ff ff       	call   c001e26a <schedule()>
c0028a4d:	83 c4 0c             	add    esp,0xc
c0028a50:	e9 a1 54 ff ff       	jmp    c001def6 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028a56 <LinkedList<UnixFile>::~LinkedList()>:
c0028a56:	90                   	nop
c0028a57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028a58 <LinkedList<UnixFile>::LinkedList()>:
c0028a58:	83 ec 0c             	sub    esp,0xc
c0028a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a9b:	83 ec 0c             	sub    esp,0xc
c0028a9e:	68 c6 a8 02 c0       	push   0xc002a8c6
c0028aa3:	e8 1b a3 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028aa8:	83 c4 10             	add    esp,0x10
c0028aab:	90                   	nop
c0028aac:	83 c4 0c             	add    esp,0xc
c0028aaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028ab0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ab8:	75 10                	jne    c0028aca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 e0 a8 02 c0       	push   0xc002a8e0
c0028ac2:	e8 90 1b ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	74 34                	je     c0028b08 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028adb:	85 c0                	test   eax,eax
c0028add:	74 29                	je     c0028b08 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b06:	eb 65                	jmp    c0028b6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0e:	85 c0                	test   eax,eax
c0028b10:	75 4b                	jne    c0028b5d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b19:	85 c0                	test   eax,eax
c0028b1b:	75 40                	jne    c0028b5d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b25:	89 10                	mov    DWORD PTR [eax],edx
c0028b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b47:	85 c0                	test   eax,eax
c0028b49:	74 22                	je     c0028b6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b4b:	83 ec 0c             	sub    esp,0xc
c0028b4e:	68 02 a9 02 c0       	push   0xc002a902
c0028b53:	e8 ff 1a ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028b58:	83 c4 10             	add    esp,0x10
c0028b5b:	eb 10                	jmp    c0028b6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b5d:	83 ec 0c             	sub    esp,0xc
c0028b60:	68 0c a9 02 c0       	push   0xc002a90c
c0028b65:	e8 ed 1a ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028b6a:	83 c4 10             	add    esp,0x10
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b74:	8d 50 01             	lea    edx,[eax+0x1]
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b7e:	90                   	nop
c0028b7f:	83 c4 0c             	add    esp,0xc
c0028b82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028b84 <LinkedList<UnixFile>::getFirstElement()>:
c0028b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028b8c <LinkedList<UnixFile>::removeFirst()>:
c0028b8c:	83 ec 0c             	sub    esp,0xc
c0028b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b95:	85 c0                	test   eax,eax
c0028b97:	75 12                	jne    c0028bab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028b99:	83 ec 0c             	sub    esp,0xc
c0028b9c:	68 18 a9 02 c0       	push   0xc002a918
c0028ba1:	e8 b1 1a ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028ba6:	83 c4 10             	add    esp,0x10
c0028ba9:	eb 7e                	jmp    c0028c29 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb5:	85 c0                	test   eax,eax
c0028bb7:	74 10                	je     c0028bc9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028bb9:	83 ec 0c             	sub    esp,0xc
c0028bbc:	68 63 a9 02 c0       	push   0xc002a963
c0028bc1:	e8 91 1a ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028bc6:	83 c4 10             	add    esp,0x10
c0028bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bcf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd2:	85 c0                	test   eax,eax
c0028bd4:	75 33                	jne    c0028c09 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf2:	83 f8 01             	cmp    eax,0x1
c0028bf5:	74 21                	je     c0028c18 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028bf7:	83 ec 0c             	sub    esp,0xc
c0028bfa:	68 3c a9 02 c0       	push   0xc002a93c
c0028bff:	e8 53 1a ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028c04:	83 c4 10             	add    esp,0x10
c0028c07:	eb 0f                	jmp    c0028c18 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c0f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	89 10                	mov    DWORD PTR [eax],edx
c0028c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c1f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c29:	83 c4 0c             	add    esp,0xc
c0028c2c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028c2e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028c2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c35:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028c36 <DriverlessDevice::~DriverlessDevice()>:
c0028c36:	ba e4 b0 02 c0       	mov    edx,0xc002b0e4
c0028c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c3f:	89 10                	mov    DWORD PTR [eax],edx
c0028c41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c45:	50                   	push   eax
c0028c46:	e8 77 b4 fe ff       	call   c00140c2 <Device::~Device()>
c0028c4b:	83 c4 04             	add    esp,0x4
c0028c4e:	90                   	nop
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028c50 <DriverlessDevice::~DriverlessDevice()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 ec 0c             	sub    esp,0xc
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 d7 ff ff ff       	call   c0028c36 <DriverlessDevice::~DriverlessDevice()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	83 ec 08             	sub    esp,0x8
c0028c65:	68 58 01 00 00       	push   0x158
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 70 a0 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 c4 0c             	add    esp,0xc
c0028c79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028c7a <LinkedList<Device>::addElement(Device*)>:
c0028c7a:	83 ec 0c             	sub    esp,0xc
c0028c7d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c82:	75 10                	jne    c0028c94 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	68 e0 a8 02 c0       	push   0xc002a8e0
c0028c8c:	e8 c6 19 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028c91:	83 c4 10             	add    esp,0x10
c0028c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c9a:	85 c0                	test   eax,eax
c0028c9c:	74 3a                	je     c0028cd8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ca5:	85 c0                	test   eax,eax
c0028ca7:	74 2f                	je     c0028cd8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cb4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ccc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028cd6:	eb 68                	jmp    c0028d40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cde:	85 c0                	test   eax,eax
c0028ce0:	75 4e                	jne    c0028d30 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ce9:	85 c0                	test   eax,eax
c0028ceb:	75 43                	jne    c0028d30 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cf5:	89 10                	mov    DWORD PTR [eax],edx
c0028cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d09:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d1a:	85 c0                	test   eax,eax
c0028d1c:	74 22                	je     c0028d40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	68 02 a9 02 c0       	push   0xc002a902
c0028d26:	e8 2c 19 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	eb 10                	jmp    c0028d40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	68 0c a9 02 c0       	push   0xc002a90c
c0028d38:	e8 1a 19 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028d3d:	83 c4 10             	add    esp,0x10
c0028d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d47:	8d 50 01             	lea    edx,[eax+0x1]
c0028d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d51:	90                   	nop
c0028d52:	83 c4 0c             	add    esp,0xc
c0028d55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028d56 <LinkedList<Device>::LinkedList()>:
c0028d56:	83 ec 0c             	sub    esp,0xc
c0028d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d72:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d99:	83 ec 0c             	sub    esp,0xc
c0028d9c:	68 c6 a8 02 c0       	push   0xc002a8c6
c0028da1:	e8 1d a0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028da6:	83 c4 10             	add    esp,0x10
c0028da9:	90                   	nop
c0028daa:	83 c4 0c             	add    esp,0xc
c0028dad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028dae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028dae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028db4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028db6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dbc:	85 c0                	test   eax,eax
c0028dbe:	75 0e                	jne    c0028dce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dc7:	85 c0                	test   eax,eax
c0028dc9:	75 03                	jne    c0028dce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028dcb:	b0 01                	mov    al,0x1
c0028dcd:	c3                   	ret    
c0028dce:	b0 00                	mov    al,0x0
c0028dd0:	90                   	nop
c0028dd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028dd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ddb:	85 c0                	test   eax,eax
c0028ddd:	75 15                	jne    c0028df4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028ddf:	83 ec 0c             	sub    esp,0xc
c0028de2:	68 18 a9 02 c0       	push   0xc002a918
c0028de7:	e8 6b 18 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028dec:	83 c4 10             	add    esp,0x10
c0028def:	e9 88 00 00 00       	jmp    c0028e7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028dfe:	85 c0                	test   eax,eax
c0028e00:	0f 95 c0             	setne  al
c0028e03:	84 c0                	test   al,al
c0028e05:	74 10                	je     c0028e17 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028e07:	83 ec 0c             	sub    esp,0xc
c0028e0a:	68 63 a9 02 c0       	push   0xc002a963
c0028e0f:	e8 43 18 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028e14:	83 c4 10             	add    esp,0x10
c0028e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e20:	85 c0                	test   eax,eax
c0028e22:	0f 94 c0             	sete   al
c0028e25:	84 c0                	test   al,al
c0028e27:	74 33                	je     c0028e5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e45:	83 f8 01             	cmp    eax,0x1
c0028e48:	74 21                	je     c0028e6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	68 3c a9 02 c0       	push   0xc002a93c
c0028e52:	e8 00 18 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028e57:	83 c4 10             	add    esp,0x10
c0028e5a:	eb 0f                	jmp    c0028e6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e69:	89 10                	mov    DWORD PTR [eax],edx
c0028e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e72:	8d 50 ff             	lea    edx,[eax-0x1]
c0028e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e7c:	83 c4 0c             	add    esp,0xc
c0028e7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028e88:	75 10                	jne    c0028e9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028e8a:	83 ec 0c             	sub    esp,0xc
c0028e8d:	68 e0 a8 02 c0       	push   0xc002a8e0
c0028e92:	e8 c0 17 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ea0:	85 c0                	test   eax,eax
c0028ea2:	74 34                	je     c0028ed8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eab:	85 c0                	test   eax,eax
c0028ead:	74 29                	je     c0028ed8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028eba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ec5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ecf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ed6:	eb 65                	jmp    c0028f3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ede:	85 c0                	test   eax,eax
c0028ee0:	75 4b                	jne    c0028f2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ee9:	85 c0                	test   eax,eax
c0028eeb:	75 40                	jne    c0028f2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ef5:	89 10                	mov    DWORD PTR [eax],edx
c0028ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028eff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f17:	85 c0                	test   eax,eax
c0028f19:	74 22                	je     c0028f3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f1b:	83 ec 0c             	sub    esp,0xc
c0028f1e:	68 02 a9 02 c0       	push   0xc002a902
c0028f23:	e8 2f 17 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028f28:	83 c4 10             	add    esp,0x10
c0028f2b:	eb 10                	jmp    c0028f3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f2d:	83 ec 0c             	sub    esp,0xc
c0028f30:	68 0c a9 02 c0       	push   0xc002a90c
c0028f35:	e8 1d 17 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028f3a:	83 c4 10             	add    esp,0x10
c0028f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f44:	8d 50 01             	lea    edx,[eax+0x1]
c0028f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f4e:	90                   	nop
c0028f4f:	83 c4 0c             	add    esp,0xc
c0028f52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028f54 <ACPI::~ACPI()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	ba 04 bb 02 c0       	mov    edx,0xc002bb04
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	89 10                	mov    DWORD PTR [eax],edx
c0028f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	50                   	push   eax
c0028f6a:	e8 53 b1 fe ff       	call   c00140c2 <Device::~Device()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	90                   	nop
c0028f73:	83 c4 0c             	add    esp,0xc
c0028f76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028f78 <ACPI::~ACPI()>:
c0028f78:	83 ec 0c             	sub    esp,0xc
c0028f7b:	83 ec 0c             	sub    esp,0xc
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 cd ff ff ff       	call   c0028f54 <ACPI::~ACPI()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 ec 08             	sub    esp,0x8
c0028f8d:	68 68 12 00 00       	push   0x1268
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 48 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 c4 0c             	add    esp,0xc
c0028fa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028fa2 <LinkedList<Device>::~LinkedList()>:
c0028fa2:	90                   	nop
c0028fa3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028fa4 <LinkedList<Device>::isEmpty()>:
c0028fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028faa:	85 c0                	test   eax,eax
c0028fac:	75 0e                	jne    c0028fbc <LinkedList<Device>::isEmpty()+0x18>
c0028fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb5:	85 c0                	test   eax,eax
c0028fb7:	75 03                	jne    c0028fbc <LinkedList<Device>::isEmpty()+0x18>
c0028fb9:	b0 01                	mov    al,0x1
c0028fbb:	c3                   	ret    
c0028fbc:	b0 00                	mov    al,0x0
c0028fbe:	90                   	nop
c0028fbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028fc0 <LinkedList<Device>::getFirstElement()>:
c0028fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fc6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028fc8 <LinkedList<Device>::removeFirst()>:
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fd1:	85 c0                	test   eax,eax
c0028fd3:	75 15                	jne    c0028fea <LinkedList<Device>::removeFirst()+0x22>
c0028fd5:	83 ec 0c             	sub    esp,0xc
c0028fd8:	68 18 a9 02 c0       	push   0xc002a918
c0028fdd:	e8 75 16 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0028fe2:	83 c4 10             	add    esp,0x10
c0028fe5:	e9 87 00 00 00       	jmp    c0029071 <LinkedList<Device>::removeFirst()+0xa9>
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ff1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028ff7:	85 c0                	test   eax,eax
c0028ff9:	74 10                	je     c002900b <LinkedList<Device>::removeFirst()+0x43>
c0028ffb:	83 ec 0c             	sub    esp,0xc
c0028ffe:	68 63 a9 02 c0       	push   0xc002a963
c0029003:	e8 4f 16 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0029008:	83 c4 10             	add    esp,0x10
c002900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029011:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029017:	85 c0                	test   eax,eax
c0029019:	75 33                	jne    c002904e <LinkedList<Device>::removeFirst()+0x86>
c002901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029029:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029037:	83 f8 01             	cmp    eax,0x1
c002903a:	74 24                	je     c0029060 <LinkedList<Device>::removeFirst()+0x98>
c002903c:	83 ec 0c             	sub    esp,0xc
c002903f:	68 3c a9 02 c0       	push   0xc002a93c
c0029044:	e8 0e 16 ff ff       	call   c001a657 <Krnl::panic(char const*)>
c0029049:	83 c4 10             	add    esp,0x10
c002904c:	eb 12                	jmp    c0029060 <LinkedList<Device>::removeFirst()+0x98>
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	8b 00                	mov    eax,DWORD PTR [eax]
c0029054:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	89 10                	mov    DWORD PTR [eax],edx
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029067:	8d 50 ff             	lea    edx,[eax-0x1]
c002906a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029071:	83 c4 0c             	add    esp,0xc
c0029074:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029076 <CPU::~CPU()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	89 10                	mov    DWORD PTR [eax],edx
c0029084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	50                   	push   eax
c002908c:	e8 31 b0 fe ff       	call   c00140c2 <Device::~Device()>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	90                   	nop
c0029095:	83 c4 0c             	add    esp,0xc
c0029098:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002909a <CPU::~CPU()>:
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	83 ec 0c             	sub    esp,0xc
c00290a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a4:	e8 cd ff ff ff       	call   c0029076 <CPU::~CPU()>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	83 ec 08             	sub    esp,0x8
c00290af:	68 98 11 00 00       	push   0x1198
c00290b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b8:	e8 26 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	83 c4 0c             	add    esp,0xc
c00290c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00290c4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00290c4:	90                   	nop
c00290c5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00290c6 <ThreadControlBlock::ThreadControlBlock()>:
c00290c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290ca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00290d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290d5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00290dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290e0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00290e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290eb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00290f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290f6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00290fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029101:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029109:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002910d:	90                   	nop
c002910e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029110 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029110:	83 ec 0c             	sub    esp,0xc
c0029113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029117:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002911d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029121:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029137:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002913d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029141:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029153:	83 ec 0c             	sub    esp,0xc
c0029156:	68 c6 a8 02 c0       	push   0xc002a8c6
c002915b:	e8 63 9c fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0029160:	83 c4 10             	add    esp,0x10
c0029163:	90                   	nop
c0029164:	83 c4 0c             	add    esp,0xc
c0029167:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029168 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002916c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002916f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029170 <Vm::_FPUState::_FPUState()>:
c0029170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029174:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002917b:	90                   	nop
c002917c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002917e <PCI::~PCI()>:
c002917e:	83 ec 0c             	sub    esp,0xc
c0029181:	ba f8 cf 02 c0       	mov    edx,0xc002cff8
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	89 10                	mov    DWORD PTR [eax],edx
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	83 ec 0c             	sub    esp,0xc
c0029193:	50                   	push   eax
c0029194:	e8 01 a9 fe ff       	call   c0013a9a <Bus::~Bus()>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	90                   	nop
c002919d:	83 c4 0c             	add    esp,0xc
c00291a0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00291a2 <PCI::~PCI()>:
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	83 ec 0c             	sub    esp,0xc
c00291a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ac:	e8 cd ff ff ff       	call   c002917e <PCI::~PCI()>
c00291b1:	83 c4 10             	add    esp,0x10
c00291b4:	83 ec 08             	sub    esp,0x8
c00291b7:	68 58 01 00 00       	push   0x158
c00291bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c0:	e8 1e 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	83 c4 0c             	add    esp,0xc
c00291cb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00291cc <IDE::~IDE()>:
c00291cc:	83 ec 0c             	sub    esp,0xc
c00291cf:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	89 10                	mov    DWORD PTR [eax],edx
c00291da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291de:	83 ec 0c             	sub    esp,0xc
c00291e1:	50                   	push   eax
c00291e2:	e8 d9 b3 fe ff       	call   c00145c0 <HardDiskController::~HardDiskController()>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	90                   	nop
c00291eb:	83 c4 0c             	add    esp,0xc
c00291ee:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00291f0 <IDE::~IDE()>:
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	83 ec 0c             	sub    esp,0xc
c00291f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291fa:	e8 cd ff ff ff       	call   c00291cc <IDE::~IDE()>
c00291ff:	83 c4 10             	add    esp,0x10
c0029202:	83 ec 08             	sub    esp,0x8
c0029205:	68 70 02 00 00       	push   0x270
c002920a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002920e:	e8 d0 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 c4 0c             	add    esp,0xc
c0029219:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002921a <SATABus::~SATABus()>:
c002921a:	83 ec 0c             	sub    esp,0xc
c002921d:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c0029222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029226:	89 10                	mov    DWORD PTR [eax],edx
c0029228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922c:	83 ec 0c             	sub    esp,0xc
c002922f:	50                   	push   eax
c0029230:	e8 8b b3 fe ff       	call   c00145c0 <HardDiskController::~HardDiskController()>
c0029235:	83 c4 10             	add    esp,0x10
c0029238:	90                   	nop
c0029239:	83 c4 0c             	add    esp,0xc
c002923c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002923e <SATABus::~SATABus()>:
c002923e:	83 ec 0c             	sub    esp,0xc
c0029241:	83 ec 0c             	sub    esp,0xc
c0029244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029248:	e8 cd ff ff ff       	call   c002921a <SATABus::~SATABus()>
c002924d:	83 c4 10             	add    esp,0x10
c0029250:	83 ec 08             	sub    esp,0x8
c0029253:	68 64 01 00 00       	push   0x164
c0029258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002925c:	e8 82 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029261:	83 c4 10             	add    esp,0x10
c0029264:	83 c4 0c             	add    esp,0xc
c0029267:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029268 <ATA::~ATA()>:
c0029268:	83 ec 0c             	sub    esp,0xc
c002926b:	ba 88 d3 02 c0       	mov    edx,0xc002d388
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	89 10                	mov    DWORD PTR [eax],edx
c0029276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927a:	83 ec 0c             	sub    esp,0xc
c002927d:	50                   	push   eax
c002927e:	e8 2f b4 fe ff       	call   c00146b2 <PhysicalDisk::~PhysicalDisk()>
c0029283:	83 c4 10             	add    esp,0x10
c0029286:	90                   	nop
c0029287:	83 c4 0c             	add    esp,0xc
c002928a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002928c <ATA::~ATA()>:
c002928c:	83 ec 0c             	sub    esp,0xc
c002928f:	83 ec 0c             	sub    esp,0xc
c0029292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029296:	e8 cd ff ff ff       	call   c0029268 <ATA::~ATA()>
c002929b:	83 c4 10             	add    esp,0x10
c002929e:	83 ec 08             	sub    esp,0x8
c00292a1:	68 7c 01 00 00       	push   0x17c
c00292a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292aa:	e8 34 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00292af:	83 c4 10             	add    esp,0x10
c00292b2:	83 c4 0c             	add    esp,0xc
c00292b5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00292b6 <ATAPI::~ATAPI()>:
c00292b6:	83 ec 0c             	sub    esp,0xc
c00292b9:	ba c0 d3 02 c0       	mov    edx,0xc002d3c0
c00292be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c2:	89 10                	mov    DWORD PTR [eax],edx
c00292c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c8:	83 ec 0c             	sub    esp,0xc
c00292cb:	50                   	push   eax
c00292cc:	e8 e1 b3 fe ff       	call   c00146b2 <PhysicalDisk::~PhysicalDisk()>
c00292d1:	83 c4 10             	add    esp,0x10
c00292d4:	90                   	nop
c00292d5:	83 c4 0c             	add    esp,0xc
c00292d8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00292da <ATAPI::~ATAPI()>:
c00292da:	83 ec 0c             	sub    esp,0xc
c00292dd:	83 ec 0c             	sub    esp,0xc
c00292e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e4:	e8 cd ff ff ff       	call   c00292b6 <ATAPI::~ATAPI()>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	83 ec 08             	sub    esp,0x8
c00292ef:	68 80 01 00 00       	push   0x180
c00292f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f8:	e8 e6 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00292fd:	83 c4 10             	add    esp,0x10
c0029300:	83 c4 0c             	add    esp,0xc
c0029303:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029304 <SATA::~SATA()>:
c0029304:	83 ec 0c             	sub    esp,0xc
c0029307:	ba 74 d4 02 c0       	mov    edx,0xc002d474
c002930c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029310:	89 10                	mov    DWORD PTR [eax],edx
c0029312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029316:	83 ec 0c             	sub    esp,0xc
c0029319:	50                   	push   eax
c002931a:	e8 93 b3 fe ff       	call   c00146b2 <PhysicalDisk::~PhysicalDisk()>
c002931f:	83 c4 10             	add    esp,0x10
c0029322:	90                   	nop
c0029323:	83 c4 0c             	add    esp,0xc
c0029326:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029328 <SATA::~SATA()>:
c0029328:	83 ec 0c             	sub    esp,0xc
c002932b:	83 ec 0c             	sub    esp,0xc
c002932e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029332:	e8 cd ff ff ff       	call   c0029304 <SATA::~SATA()>
c0029337:	83 c4 10             	add    esp,0x10
c002933a:	83 ec 08             	sub    esp,0x8
c002933d:	68 7c 01 00 00       	push   0x17c
c0029342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029346:	e8 98 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002934b:	83 c4 10             	add    esp,0x10
c002934e:	83 c4 0c             	add    esp,0xc
c0029351:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029352 <SATAPI::~SATAPI()>:
c0029352:	83 ec 0c             	sub    esp,0xc
c0029355:	ba 50 d5 02 c0       	mov    edx,0xc002d550
c002935a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935e:	89 10                	mov    DWORD PTR [eax],edx
c0029360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029364:	83 ec 0c             	sub    esp,0xc
c0029367:	50                   	push   eax
c0029368:	e8 45 b3 fe ff       	call   c00146b2 <PhysicalDisk::~PhysicalDisk()>
c002936d:	83 c4 10             	add    esp,0x10
c0029370:	90                   	nop
c0029371:	83 c4 0c             	add    esp,0xc
c0029374:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029376 <SATAPI::~SATAPI()>:
c0029376:	83 ec 0c             	sub    esp,0xc
c0029379:	83 ec 0c             	sub    esp,0xc
c002937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029380:	e8 cd ff ff ff       	call   c0029352 <SATAPI::~SATAPI()>
c0029385:	83 c4 10             	add    esp,0x10
c0029388:	83 ec 08             	sub    esp,0x8
c002938b:	68 80 01 00 00       	push   0x180
c0029390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029394:	e8 4a 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029399:	83 c4 10             	add    esp,0x10
c002939c:	83 c4 0c             	add    esp,0xc
c002939f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00293a0 <AVX::~AVX()>:
c00293a0:	83 ec 0c             	sub    esp,0xc
c00293a3:	ba 90 d5 02 c0       	mov    edx,0xc002d590
c00293a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ac:	89 10                	mov    DWORD PTR [eax],edx
c00293ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b2:	83 ec 0c             	sub    esp,0xc
c00293b5:	50                   	push   eax
c00293b6:	e8 7b b3 fe ff       	call   c0014736 <FPU::~FPU()>
c00293bb:	83 c4 10             	add    esp,0x10
c00293be:	90                   	nop
c00293bf:	83 c4 0c             	add    esp,0xc
c00293c2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00293c4 <AVX::~AVX()>:
c00293c4:	83 ec 0c             	sub    esp,0xc
c00293c7:	83 ec 0c             	sub    esp,0xc
c00293ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ce:	e8 cd ff ff ff       	call   c00293a0 <AVX::~AVX()>
c00293d3:	83 c4 10             	add    esp,0x10
c00293d6:	83 ec 08             	sub    esp,0x8
c00293d9:	68 58 01 00 00       	push   0x158
c00293de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293e2:	e8 fc 98 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00293e7:	83 c4 10             	add    esp,0x10
c00293ea:	83 c4 0c             	add    esp,0xc
c00293ed:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00293ee <MMX::~MMX()>:
c00293ee:	83 ec 0c             	sub    esp,0xc
c00293f1:	ba d0 d5 02 c0       	mov    edx,0xc002d5d0
c00293f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fa:	89 10                	mov    DWORD PTR [eax],edx
c00293fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029400:	83 ec 0c             	sub    esp,0xc
c0029403:	50                   	push   eax
c0029404:	e8 2d b3 fe ff       	call   c0014736 <FPU::~FPU()>
c0029409:	83 c4 10             	add    esp,0x10
c002940c:	90                   	nop
c002940d:	83 c4 0c             	add    esp,0xc
c0029410:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029412 <MMX::~MMX()>:
c0029412:	83 ec 0c             	sub    esp,0xc
c0029415:	83 ec 0c             	sub    esp,0xc
c0029418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002941c:	e8 cd ff ff ff       	call   c00293ee <MMX::~MMX()>
c0029421:	83 c4 10             	add    esp,0x10
c0029424:	83 ec 08             	sub    esp,0x8
c0029427:	68 58 01 00 00       	push   0x158
c002942c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029430:	e8 ae 98 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029435:	83 c4 10             	add    esp,0x10
c0029438:	83 c4 0c             	add    esp,0xc
c002943b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002943c <SSE::~SSE()>:
c002943c:	83 ec 0c             	sub    esp,0xc
c002943f:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c0029444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029448:	89 10                	mov    DWORD PTR [eax],edx
c002944a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944e:	83 ec 0c             	sub    esp,0xc
c0029451:	50                   	push   eax
c0029452:	e8 df b2 fe ff       	call   c0014736 <FPU::~FPU()>
c0029457:	83 c4 10             	add    esp,0x10
c002945a:	90                   	nop
c002945b:	83 c4 0c             	add    esp,0xc
c002945e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029460 <SSE::~SSE()>:
c0029460:	83 ec 0c             	sub    esp,0xc
c0029463:	83 ec 0c             	sub    esp,0xc
c0029466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002946a:	e8 cd ff ff ff       	call   c002943c <SSE::~SSE()>
c002946f:	83 c4 10             	add    esp,0x10
c0029472:	83 ec 08             	sub    esp,0x8
c0029475:	68 58 01 00 00       	push   0x158
c002947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002947e:	e8 60 98 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029483:	83 c4 10             	add    esp,0x10
c0029486:	83 c4 0c             	add    esp,0xc
c0029489:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002948a <x87::~x87()>:
c002948a:	83 ec 0c             	sub    esp,0xc
c002948d:	ba 50 d6 02 c0       	mov    edx,0xc002d650
c0029492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029496:	89 10                	mov    DWORD PTR [eax],edx
c0029498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949c:	83 ec 0c             	sub    esp,0xc
c002949f:	50                   	push   eax
c00294a0:	e8 91 b2 fe ff       	call   c0014736 <FPU::~FPU()>
c00294a5:	83 c4 10             	add    esp,0x10
c00294a8:	90                   	nop
c00294a9:	83 c4 0c             	add    esp,0xc
c00294ac:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00294ae <x87::~x87()>:
c00294ae:	83 ec 0c             	sub    esp,0xc
c00294b1:	83 ec 0c             	sub    esp,0xc
c00294b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294b8:	e8 cd ff ff ff       	call   c002948a <x87::~x87()>
c00294bd:	83 c4 10             	add    esp,0x10
c00294c0:	83 ec 08             	sub    esp,0x8
c00294c3:	68 58 01 00 00       	push   0x158
c00294c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294cc:	e8 12 98 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00294d1:	83 c4 10             	add    esp,0x10
c00294d4:	83 c4 0c             	add    esp,0xc
c00294d7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00294d8 <IOAPIC::~IOAPIC()>:
c00294d8:	83 ec 0c             	sub    esp,0xc
c00294db:	ba a8 d7 02 c0       	mov    edx,0xc002d7a8
c00294e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e4:	89 10                	mov    DWORD PTR [eax],edx
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	83 ec 0c             	sub    esp,0xc
c00294ed:	50                   	push   eax
c00294ee:	e8 cf ab fe ff       	call   c00140c2 <Device::~Device()>
c00294f3:	83 c4 10             	add    esp,0x10
c00294f6:	90                   	nop
c00294f7:	83 c4 0c             	add    esp,0xc
c00294fa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00294fc <IOAPIC::~IOAPIC()>:
c00294fc:	83 ec 0c             	sub    esp,0xc
c00294ff:	83 ec 0c             	sub    esp,0xc
c0029502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029506:	e8 cd ff ff ff       	call   c00294d8 <IOAPIC::~IOAPIC()>
c002950b:	83 c4 10             	add    esp,0x10
c002950e:	83 ec 08             	sub    esp,0x8
c0029511:	68 68 01 00 00       	push   0x168
c0029516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002951a:	e8 c4 97 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002951f:	83 c4 10             	add    esp,0x10
c0029522:	83 c4 0c             	add    esp,0xc
c0029525:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029526 <APIC::~APIC()>:
c0029526:	83 ec 0c             	sub    esp,0xc
c0029529:	ba 60 d7 02 c0       	mov    edx,0xc002d760
c002952e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029532:	89 10                	mov    DWORD PTR [eax],edx
c0029534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029538:	83 ec 0c             	sub    esp,0xc
c002953b:	50                   	push   eax
c002953c:	e8 bf b6 fe ff       	call   c0014c00 <InterruptController::~InterruptController()>
c0029541:	83 c4 10             	add    esp,0x10
c0029544:	90                   	nop
c0029545:	83 c4 0c             	add    esp,0xc
c0029548:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002954a <APIC::~APIC()>:
c002954a:	83 ec 0c             	sub    esp,0xc
c002954d:	83 ec 0c             	sub    esp,0xc
c0029550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029554:	e8 cd ff ff ff       	call   c0029526 <APIC::~APIC()>
c0029559:	83 c4 10             	add    esp,0x10
c002955c:	83 ec 08             	sub    esp,0x8
c002955f:	68 58 21 00 00       	push   0x2158
c0029564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029568:	e8 76 97 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002956d:	83 c4 10             	add    esp,0x10
c0029570:	83 c4 0c             	add    esp,0xc
c0029573:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029574 <PIC::~PIC()>:
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	ba f8 d7 02 c0       	mov    edx,0xc002d7f8
c002957c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029580:	89 10                	mov    DWORD PTR [eax],edx
c0029582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029586:	83 ec 0c             	sub    esp,0xc
c0029589:	50                   	push   eax
c002958a:	e8 71 b6 fe ff       	call   c0014c00 <InterruptController::~InterruptController()>
c002958f:	83 c4 10             	add    esp,0x10
c0029592:	90                   	nop
c0029593:	83 c4 0c             	add    esp,0xc
c0029596:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029598 <PIC::~PIC()>:
c0029598:	83 ec 0c             	sub    esp,0xc
c002959b:	83 ec 0c             	sub    esp,0xc
c002959e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295a2:	e8 cd ff ff ff       	call   c0029574 <PIC::~PIC()>
c00295a7:	83 c4 10             	add    esp,0x10
c00295aa:	83 ec 08             	sub    esp,0x8
c00295ad:	68 58 21 00 00       	push   0x2158
c00295b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295b6:	e8 28 97 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00295bb:	83 c4 10             	add    esp,0x10
c00295be:	83 c4 0c             	add    esp,0xc
c00295c1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00295c2 <APICTimer::~APICTimer()>:
c00295c2:	83 ec 0c             	sub    esp,0xc
c00295c5:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c00295ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ce:	89 10                	mov    DWORD PTR [eax],edx
c00295d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d4:	83 ec 0c             	sub    esp,0xc
c00295d7:	50                   	push   eax
c00295d8:	e8 37 d6 fe ff       	call   c0016c14 <Timer::~Timer()>
c00295dd:	83 c4 10             	add    esp,0x10
c00295e0:	90                   	nop
c00295e1:	83 c4 0c             	add    esp,0xc
c00295e4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00295e6 <APICTimer::~APICTimer()>:
c00295e6:	83 ec 0c             	sub    esp,0xc
c00295e9:	83 ec 0c             	sub    esp,0xc
c00295ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295f0:	e8 cd ff ff ff       	call   c00295c2 <APICTimer::~APICTimer()>
c00295f5:	83 c4 10             	add    esp,0x10
c00295f8:	83 ec 08             	sub    esp,0x8
c00295fb:	68 60 01 00 00       	push   0x160
c0029600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029604:	e8 da 96 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029609:	83 c4 10             	add    esp,0x10
c002960c:	83 c4 0c             	add    esp,0xc
c002960f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029610 <PIT::~PIT()>:
c0029610:	83 ec 0c             	sub    esp,0xc
c0029613:	ba 9c d8 02 c0       	mov    edx,0xc002d89c
c0029618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961c:	89 10                	mov    DWORD PTR [eax],edx
c002961e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029622:	83 ec 0c             	sub    esp,0xc
c0029625:	50                   	push   eax
c0029626:	e8 e9 d5 fe ff       	call   c0016c14 <Timer::~Timer()>
c002962b:	83 c4 10             	add    esp,0x10
c002962e:	90                   	nop
c002962f:	83 c4 0c             	add    esp,0xc
c0029632:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029634 <PIT::~PIT()>:
c0029634:	83 ec 0c             	sub    esp,0xc
c0029637:	83 ec 0c             	sub    esp,0xc
c002963a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002963e:	e8 cd ff ff ff       	call   c0029610 <PIT::~PIT()>
c0029643:	83 c4 10             	add    esp,0x10
c0029646:	83 ec 08             	sub    esp,0x8
c0029649:	68 5c 01 00 00       	push   0x15c
c002964e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029652:	e8 8c 96 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029657:	83 c4 10             	add    esp,0x10
c002965a:	83 c4 0c             	add    esp,0xc
c002965d:	c3                   	ret    
