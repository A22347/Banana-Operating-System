
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 81 fc 00 00       	call   c000fca1 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 8e 02 00       	call   c0028e48 <_init>
c0000025:	c3                   	ret    
c0000026:	bb de 9a 02 c0       	mov    ebx,0xc0029ade
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 9a 02 c0    	cmp    ebx,0xc0029aec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 e3 02 c0       	mov    eax,0xc002e3b8
c0000049:	3d b8 e3 02 c0       	cmp    eax,0xc002e3b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 e3 02 c0       	push   0xc002e3b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 e3 02 c0       	mov    eax,0xc002e3b8
c0000075:	2d b8 e3 02 c0       	sub    eax,0xc002e3b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 e3 02 c0       	push   0xc002e3b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e9e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 9a 02 c0       	mov    ebx,0xc0029af4
c00000bb:	81 eb f0 9a 02 c0    	sub    ebx,0xc0029af0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 9a 02 c0       	mov    esi,0xc0029af0
c00000ca:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec e9 02 c0       	mov    ds:0xc002e9ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 e3 02 c0       	push   0xc002e3b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 e9 02 c0       	push   0xc002e9f0
c000012c:	68 b8 e3 02 c0       	push   0xc002e3b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 8f d9 01 00       	call   c001dd32 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f6 28 01 00       	call   c0012cb1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 6d d9 01 00       	call   c001dd32 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 15 de 01 00       	call   c001e1f9 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 73 e4 01 00       	call   c001e860 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 ee 02 c0 	lgdtd  ds:0xc002ee30
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 f0 45 01 00       	call   c0014bd1 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    
c0000662:	66 90                	xchg   ax,ax

c0000664 <memcmp>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000672:	85 f6                	test   esi,esi
c0000674:	74 1d                	je     c0000693 <memcmp+0x2f>
c0000676:	8a 08                	mov    cl,BYTE PTR [eax]
c0000678:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067b:	38 cb                	cmp    bl,cl
c000067d:	75 19                	jne    c0000698 <memcmp+0x34>
c000067f:	01 c6                	add    esi,eax
c0000681:	eb 0a                	jmp    c000068d <memcmp+0x29>
c0000683:	90                   	nop
c0000684:	8a 08                	mov    cl,BYTE PTR [eax]
c0000686:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000689:	38 d9                	cmp    cl,bl
c000068b:	75 0b                	jne    c0000698 <memcmp+0x34>
c000068d:	40                   	inc    eax
c000068e:	42                   	inc    edx
c000068f:	39 f0                	cmp    eax,esi
c0000691:	75 f1                	jne    c0000684 <memcmp+0x20>
c0000693:	31 c0                	xor    eax,eax
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    
c0000698:	0f b6 c1             	movzx  eax,cl
c000069b:	29 d8                	sub    eax,ebx
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memmove>:
c00006a0:	55                   	push   ebp
c00006a1:	57                   	push   edi
c00006a2:	56                   	push   esi
c00006a3:	53                   	push   ebx
c00006a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b0:	39 dd                	cmp    ebp,ebx
c00006b2:	0f 83 80 00 00 00    	jae    c0000738 <memmove+0x98>
c00006b8:	85 d2                	test   edx,edx
c00006ba:	74 74                	je     c0000730 <memmove+0x90>
c00006bc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006bf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c2:	39 cd                	cmp    ebp,ecx
c00006c4:	0f 93 c1             	setae  cl
c00006c7:	39 f3                	cmp    ebx,esi
c00006c9:	0f 93 c0             	setae  al
c00006cc:	89 c6                	mov    esi,eax
c00006ce:	09 ce                	or     esi,ecx
c00006d0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d3:	89 f0                	mov    eax,esi
c00006d5:	83 f9 0c             	cmp    ecx,0xc
c00006d8:	0f 97 c1             	seta   cl
c00006db:	84 c8                	test   al,cl
c00006dd:	74 75                	je     c0000754 <memmove+0xb4>
c00006df:	89 e9                	mov    ecx,ebp
c00006e1:	09 d9                	or     ecx,ebx
c00006e3:	83 e1 03             	and    ecx,0x3
c00006e6:	75 6c                	jne    c0000754 <memmove+0xb4>
c00006e8:	89 d7                	mov    edi,edx
c00006ea:	89 d9                	mov    ecx,ebx
c00006ec:	83 e7 fc             	and    edi,0xfffffffc
c00006ef:	89 ee                	mov    esi,ebp
c00006f1:	01 df                	add    edi,ebx
c00006f3:	90                   	nop
c00006f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006f6:	83 c6 04             	add    esi,0x4
c00006f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006fc:	83 c1 04             	add    ecx,0x4
c00006ff:	39 f9                	cmp    ecx,edi
c0000701:	75 f1                	jne    c00006f4 <memmove+0x54>
c0000703:	89 d1                	mov    ecx,edx
c0000705:	89 d7                	mov    edi,edx
c0000707:	83 e1 fc             	and    ecx,0xfffffffc
c000070a:	29 cf                	sub    edi,ecx
c000070c:	01 cb                	add    ebx,ecx
c000070e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000712:	39 ca                	cmp    edx,ecx
c0000714:	74 1a                	je     c0000730 <memmove+0x90>
c0000716:	8a 03                	mov    al,BYTE PTR [ebx]
c0000718:	83 ff 01             	cmp    edi,0x1
c000071b:	88 06                	mov    BYTE PTR [esi],al
c000071d:	74 11                	je     c0000730 <memmove+0x90>
c000071f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000722:	83 ff 02             	cmp    edi,0x2
c0000725:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000728:	74 06                	je     c0000730 <memmove+0x90>
c000072a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000072d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000730:	5b                   	pop    ebx
c0000731:	89 e8                	mov    eax,ebp
c0000733:	5e                   	pop    esi
c0000734:	5f                   	pop    edi
c0000735:	5d                   	pop    ebp
c0000736:	c3                   	ret    
c0000737:	90                   	nop
c0000738:	76 f6                	jbe    c0000730 <memmove+0x90>
c000073a:	85 d2                	test   edx,edx
c000073c:	74 f2                	je     c0000730 <memmove+0x90>
c000073e:	4b                   	dec    ebx
c000073f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000742:	66 90                	xchg   ax,ax
c0000744:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000747:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074a:	4a                   	dec    edx
c000074b:	75 f7                	jne    c0000744 <memmove+0xa4>
c000074d:	5b                   	pop    ebx
c000074e:	89 e8                	mov    eax,ebp
c0000750:	5e                   	pop    esi
c0000751:	5f                   	pop    edi
c0000752:	5d                   	pop    ebp
c0000753:	c3                   	ret    
c0000754:	01 ea                	add    edx,ebp
c0000756:	89 e9                	mov    ecx,ebp
c0000758:	8a 03                	mov    al,BYTE PTR [ebx]
c000075a:	41                   	inc    ecx
c000075b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000075e:	43                   	inc    ebx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	75 f5                	jne    c0000758 <memmove+0xb8>
c0000763:	eb cb                	jmp    c0000730 <memmove+0x90>
c0000765:	8d 76 00             	lea    esi,[esi+0x0]

c0000768 <memcpy>:
c0000768:	57                   	push   edi
c0000769:	56                   	push   esi
c000076a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000076e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000772:	89 c1                	mov    ecx,eax
c0000774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000778:	c1 e9 02             	shr    ecx,0x2
c000077b:	fc                   	cld    
c000077c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000077e:	29 c7                	sub    edi,eax
c0000780:	5e                   	pop    esi
c0000781:	89 f8                	mov    eax,edi
c0000783:	5f                   	pop    edi
c0000784:	c3                   	ret    
c0000785:	8d 76 00             	lea    esi,[esi+0x0]

c0000788 <memset>:
c0000788:	57                   	push   edi
c0000789:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000078d:	85 c9                	test   ecx,ecx
c000078f:	74 0b                	je     c000079c <memset+0x14>
c0000791:	fc                   	cld    
c0000792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000796:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000079a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000079c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a0:	5f                   	pop    edi
c00007a1:	c3                   	ret    
c00007a2:	66 90                	xchg   ax,ax

c00007a4 <strlen>:
c00007a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a8:	31 c0                	xor    eax,eax
c00007aa:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007ad:	74 09                	je     c00007b8 <strlen+0x14>
c00007af:	90                   	nop
c00007b0:	40                   	inc    eax
c00007b1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007b5:	75 f9                	jne    c00007b0 <strlen+0xc>
c00007b7:	c3                   	ret    
c00007b8:	c3                   	ret    
c00007b9:	8d 76 00             	lea    esi,[esi+0x0]

c00007bc <strpbrk>:
c00007bc:	57                   	push   edi
c00007bd:	56                   	push   esi
c00007be:	53                   	push   ebx
c00007bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007c7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c9:	84 db                	test   bl,bl
c00007cb:	74 21                	je     c00007ee <strpbrk+0x32>
c00007cd:	8a 07                	mov    al,BYTE PTR [edi]
c00007cf:	84 c0                	test   al,al
c00007d1:	74 14                	je     c00007e7 <strpbrk+0x2b>
c00007d3:	38 d8                	cmp    al,bl
c00007d5:	74 19                	je     c00007f0 <strpbrk+0x34>
c00007d7:	89 fa                	mov    edx,edi
c00007d9:	eb 05                	jmp    c00007e0 <strpbrk+0x24>
c00007db:	90                   	nop
c00007dc:	38 d9                	cmp    cl,bl
c00007de:	74 10                	je     c00007f0 <strpbrk+0x34>
c00007e0:	42                   	inc    edx
c00007e1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007e3:	84 c9                	test   cl,cl
c00007e5:	75 f5                	jne    c00007dc <strpbrk+0x20>
c00007e7:	46                   	inc    esi
c00007e8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ea:	84 db                	test   bl,bl
c00007ec:	75 e1                	jne    c00007cf <strpbrk+0x13>
c00007ee:	31 f6                	xor    esi,esi
c00007f0:	89 f0                	mov    eax,esi
c00007f2:	5b                   	pop    ebx
c00007f3:	5e                   	pop    esi
c00007f4:	5f                   	pop    edi
c00007f5:	c3                   	ret    
c00007f6:	66 90                	xchg   ax,ax

c00007f8 <strtok>:
c00007f8:	56                   	push   esi
c00007f9:	53                   	push   ebx
c00007fa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 07                	jne    c000080d <strtok+0x15>
c0000806:	eb 2c                	jmp    c0000834 <strtok+0x3c>
c0000808:	43                   	inc    ebx
c0000809:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000080d:	56                   	push   esi
c000080e:	53                   	push   ebx
c000080f:	e8 a8 ff ff ff       	call   c00007bc <strpbrk>
c0000814:	5a                   	pop    edx
c0000815:	a3 08 ea 02 c0       	mov    ds:0xc002ea08,eax
c000081a:	59                   	pop    ecx
c000081b:	39 d8                	cmp    eax,ebx
c000081d:	74 e9                	je     c0000808 <strtok+0x10>
c000081f:	85 c0                	test   eax,eax
c0000821:	74 1b                	je     c000083e <strtok+0x46>
c0000823:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000826:	8d 50 01             	lea    edx,[eax+0x1]
c0000829:	89 d8                	mov    eax,ebx
c000082b:	89 15 08 ea 02 c0    	mov    DWORD PTR ds:0xc002ea08,edx
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    
c0000834:	8b 1d 08 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea08
c000083a:	85 db                	test   ebx,ebx
c000083c:	75 cf                	jne    c000080d <strtok+0x15>
c000083e:	31 c0                	xor    eax,eax
c0000840:	5b                   	pop    ebx
c0000841:	5e                   	pop    esi
c0000842:	c3                   	ret    
c0000843:	90                   	nop

c0000844 <strcpy>:
c0000844:	53                   	push   ebx
c0000845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000084d:	89 c3                	mov    ebx,eax
c000084f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000851:	84 d2                	test   dl,dl
c0000853:	74 0d                	je     c0000862 <strcpy+0x1e>
c0000855:	8d 76 00             	lea    esi,[esi+0x0]
c0000858:	88 13                	mov    BYTE PTR [ebx],dl
c000085a:	41                   	inc    ecx
c000085b:	43                   	inc    ebx
c000085c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000085e:	84 d2                	test   dl,dl
c0000860:	75 f6                	jne    c0000858 <strcpy+0x14>
c0000862:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000865:	5b                   	pop    ebx
c0000866:	c3                   	ret    
c0000867:	90                   	nop

c0000868 <strncpy>:
c0000868:	55                   	push   ebp
c0000869:	57                   	push   edi
c000086a:	56                   	push   esi
c000086b:	53                   	push   ebx
c000086c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000870:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000874:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000878:	85 c0                	test   eax,eax
c000087a:	74 39                	je     c00008b5 <strncpy+0x4d>
c000087c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000087e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000881:	8d 55 01             	lea    edx,[ebp+0x1]
c0000884:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000887:	84 db                	test   bl,bl
c0000889:	74 31                	je     c00008bc <strncpy+0x54>
c000088b:	85 c9                	test   ecx,ecx
c000088d:	74 26                	je     c00008b5 <strncpy+0x4d>
c000088f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000892:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000895:	8d 55 02             	lea    edx,[ebp+0x2]
c0000898:	8d 46 02             	lea    eax,[esi+0x2]
c000089b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000089e:	84 db                	test   bl,bl
c00008a0:	75 0f                	jne    c00008b1 <strncpy+0x49>
c00008a2:	eb 18                	jmp    c00008bc <strncpy+0x54>
c00008a4:	40                   	inc    eax
c00008a5:	42                   	inc    edx
c00008a6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a9:	49                   	dec    ecx
c00008aa:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ad:	84 db                	test   bl,bl
c00008af:	74 0b                	je     c00008bc <strncpy+0x54>
c00008b1:	85 c9                	test   ecx,ecx
c00008b3:	75 ef                	jne    c00008a4 <strncpy+0x3c>
c00008b5:	5b                   	pop    ebx
c00008b6:	89 e8                	mov    eax,ebp
c00008b8:	5e                   	pop    esi
c00008b9:	5f                   	pop    edi
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    
c00008bc:	85 c9                	test   ecx,ecx
c00008be:	74 f5                	je     c00008b5 <strncpy+0x4d>
c00008c0:	fc                   	cld    
c00008c1:	31 c0                	xor    eax,eax
c00008c3:	89 d7                	mov    edi,edx
c00008c5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008c7:	89 e8                	mov    eax,ebp
c00008c9:	5b                   	pop    ebx
c00008ca:	5e                   	pop    esi
c00008cb:	5f                   	pop    edi
c00008cc:	5d                   	pop    ebp
c00008cd:	c3                   	ret    
c00008ce:	66 90                	xchg   ax,ax

c00008d0 <strcmp>:
c00008d0:	56                   	push   esi
c00008d1:	53                   	push   ebx
c00008d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008da:	8a 16                	mov    dl,BYTE PTR [esi]
c00008dc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008df:	38 d1                	cmp    cl,dl
c00008e1:	75 1d                	jne    c0000900 <strcmp+0x30>
c00008e3:	84 c9                	test   cl,cl
c00008e5:	74 21                	je     c0000908 <strcmp+0x38>
c00008e7:	b8 01 00 00 00       	mov    eax,0x1
c00008ec:	eb 07                	jmp    c00008f5 <strcmp+0x25>
c00008ee:	66 90                	xchg   ax,ax
c00008f0:	40                   	inc    eax
c00008f1:	84 d2                	test   dl,dl
c00008f3:	74 13                	je     c0000908 <strcmp+0x38>
c00008f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008fc:	38 ca                	cmp    dl,cl
c00008fe:	74 f0                	je     c00008f0 <strcmp+0x20>
c0000900:	0f b6 c2             	movzx  eax,dl
c0000903:	5b                   	pop    ebx
c0000904:	29 c8                	sub    eax,ecx
c0000906:	5e                   	pop    esi
c0000907:	c3                   	ret    
c0000908:	31 c0                	xor    eax,eax
c000090a:	5b                   	pop    ebx
c000090b:	5e                   	pop    esi
c000090c:	c3                   	ret    
c000090d:	8d 76 00             	lea    esi,[esi+0x0]

c0000910 <strchr>:
c0000910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000914:	8a 10                	mov    dl,BYTE PTR [eax]
c0000916:	84 d2                	test   dl,dl
c0000918:	74 15                	je     c000092f <strchr+0x1f>
c000091a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000091e:	38 ca                	cmp    dl,cl
c0000920:	75 06                	jne    c0000928 <strchr+0x18>
c0000922:	eb 0e                	jmp    c0000932 <strchr+0x22>
c0000924:	38 ca                	cmp    dl,cl
c0000926:	74 09                	je     c0000931 <strchr+0x21>
c0000928:	40                   	inc    eax
c0000929:	8a 10                	mov    dl,BYTE PTR [eax]
c000092b:	84 d2                	test   dl,dl
c000092d:	75 f5                	jne    c0000924 <strchr+0x14>
c000092f:	31 c0                	xor    eax,eax
c0000931:	c3                   	ret    
c0000932:	c3                   	ret    
c0000933:	90                   	nop

c0000934 <strncmp>:
c0000934:	57                   	push   edi
c0000935:	56                   	push   esi
c0000936:	53                   	push   ebx
c0000937:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000093b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000093f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000943:	85 ff                	test   edi,edi
c0000945:	74 28                	je     c000096f <strncmp+0x3b>
c0000947:	8a 16                	mov    dl,BYTE PTR [esi]
c0000949:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000094c:	38 d1                	cmp    cl,dl
c000094e:	75 28                	jne    c0000978 <strncmp+0x44>
c0000950:	8d 46 01             	lea    eax,[esi+0x1]
c0000953:	84 c9                	test   cl,cl
c0000955:	74 18                	je     c000096f <strncmp+0x3b>
c0000957:	01 fe                	add    esi,edi
c0000959:	eb 0f                	jmp    c000096a <strncmp+0x36>
c000095b:	90                   	nop
c000095c:	8a 10                	mov    dl,BYTE PTR [eax]
c000095e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000961:	38 ca                	cmp    dl,cl
c0000963:	75 13                	jne    c0000978 <strncmp+0x44>
c0000965:	40                   	inc    eax
c0000966:	84 d2                	test   dl,dl
c0000968:	74 05                	je     c000096f <strncmp+0x3b>
c000096a:	43                   	inc    ebx
c000096b:	39 c6                	cmp    esi,eax
c000096d:	75 ed                	jne    c000095c <strncmp+0x28>
c000096f:	5b                   	pop    ebx
c0000970:	31 c0                	xor    eax,eax
c0000972:	5e                   	pop    esi
c0000973:	5f                   	pop    edi
c0000974:	c3                   	ret    
c0000975:	8d 76 00             	lea    esi,[esi+0x0]
c0000978:	5b                   	pop    ebx
c0000979:	0f b6 c2             	movzx  eax,dl
c000097c:	5e                   	pop    esi
c000097d:	29 c8                	sub    eax,ecx
c000097f:	5f                   	pop    edi
c0000980:	c3                   	ret    
c0000981:	8d 76 00             	lea    esi,[esi+0x0]

c0000984 <strcat>:
c0000984:	56                   	push   esi
c0000985:	53                   	push   ebx
c0000986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000098a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000098e:	89 c3                	mov    ebx,eax
c0000990:	eb 04                	jmp    c0000996 <strcat+0x12>
c0000992:	66 90                	xchg   ax,ax
c0000994:	89 d3                	mov    ebx,edx
c0000996:	8d 53 01             	lea    edx,[ebx+0x1]
c0000999:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000099d:	75 f5                	jne    c0000994 <strcat+0x10>
c000099f:	31 d2                	xor    edx,edx
c00009a1:	8d 76 00             	lea    esi,[esi+0x0]
c00009a4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00009a7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009aa:	42                   	inc    edx
c00009ab:	84 c9                	test   cl,cl
c00009ad:	75 f5                	jne    c00009a4 <strcat+0x20>
c00009af:	5b                   	pop    ebx
c00009b0:	5e                   	pop    esi
c00009b1:	c3                   	ret    
c00009b2:	66 90                	xchg   ax,ax

c00009b4 <strncat>:
c00009b4:	56                   	push   esi
c00009b5:	53                   	push   ebx
c00009b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009c2:	85 f6                	test   esi,esi
c00009c4:	74 1e                	je     c00009e4 <strncat+0x30>
c00009c6:	89 c2                	mov    edx,eax
c00009c8:	42                   	inc    edx
c00009c9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009cd:	75 f9                	jne    c00009c8 <strncat+0x14>
c00009cf:	01 ce                	add    esi,ecx
c00009d1:	eb 06                	jmp    c00009d9 <strncat+0x25>
c00009d3:	90                   	nop
c00009d4:	39 f1                	cmp    ecx,esi
c00009d6:	74 10                	je     c00009e8 <strncat+0x34>
c00009d8:	42                   	inc    edx
c00009d9:	41                   	inc    ecx
c00009da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009e0:	84 db                	test   bl,bl
c00009e2:	75 f0                	jne    c00009d4 <strncat+0x20>
c00009e4:	5b                   	pop    ebx
c00009e5:	5e                   	pop    esi
c00009e6:	c3                   	ret    
c00009e7:	90                   	nop
c00009e8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009eb:	5b                   	pop    ebx
c00009ec:	5e                   	pop    esi
c00009ed:	c3                   	ret    
c00009ee:	66 90                	xchg   ax,ax

c00009f0 <strstr>:
c00009f0:	57                   	push   edi
c00009f1:	56                   	push   esi
c00009f2:	53                   	push   ebx
c00009f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009fb:	57                   	push   edi
c00009fc:	e8 a3 fd ff ff       	call   c00007a4 <strlen>
c0000a01:	59                   	pop    ecx
c0000a02:	85 c0                	test   eax,eax
c0000a04:	74 2a                	je     c0000a30 <strstr+0x40>
c0000a06:	89 c6                	mov    esi,eax
c0000a08:	eb 12                	jmp    c0000a1c <strstr+0x2c>
c0000a0a:	66 90                	xchg   ax,ax
c0000a0c:	56                   	push   esi
c0000a0d:	57                   	push   edi
c0000a0e:	53                   	push   ebx
c0000a0f:	e8 50 fc ff ff       	call   c0000664 <memcmp>
c0000a14:	83 c4 0c             	add    esp,0xc
c0000a17:	85 c0                	test   eax,eax
c0000a19:	74 15                	je     c0000a30 <strstr+0x40>
c0000a1b:	43                   	inc    ebx
c0000a1c:	53                   	push   ebx
c0000a1d:	e8 82 fd ff ff       	call   c00007a4 <strlen>
c0000a22:	5a                   	pop    edx
c0000a23:	39 f0                	cmp    eax,esi
c0000a25:	73 e5                	jae    c0000a0c <strstr+0x1c>
c0000a27:	5b                   	pop    ebx
c0000a28:	31 c0                	xor    eax,eax
c0000a2a:	5e                   	pop    esi
c0000a2b:	5f                   	pop    edi
c0000a2c:	c3                   	ret    
c0000a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a30:	89 d8                	mov    eax,ebx
c0000a32:	5b                   	pop    ebx
c0000a33:	5e                   	pop    esi
c0000a34:	5f                   	pop    edi
c0000a35:	c3                   	ret    
c0000a36:	66 90                	xchg   ax,ax

c0000a38 <toupper>:
c0000a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a3c:	0f b6 d0             	movzx  edx,al
c0000a3f:	f6 82 00 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6500],0x2
c0000a46:	74 03                	je     c0000a4b <toupper+0x13>
c0000a48:	83 e8 20             	sub    eax,0x20
c0000a4b:	c3                   	ret    

c0000a4c <tolower>:
c0000a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a50:	0f b6 d0             	movzx  edx,al
c0000a53:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000a5a:	74 03                	je     c0000a5f <tolower+0x13>
c0000a5c:	83 c0 20             	add    eax,0x20
c0000a5f:	c3                   	ret    

c0000a60 <simple_strtoul>:
c0000a60:	55                   	push   ebp
c0000a61:	57                   	push   edi
c0000a62:	56                   	push   esi
c0000a63:	53                   	push   ebx
c0000a64:	83 ec 08             	sub    esp,0x8
c0000a67:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a6f:	90                   	nop
c0000a70:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a73:	f6 82 00 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6500],0x8
c0000a7a:	75 05                	jne    c0000a81 <simple_strtoul+0x21>
c0000a7c:	80 fa 09             	cmp    dl,0x9
c0000a7f:	75 03                	jne    c0000a84 <simple_strtoul+0x24>
c0000a81:	41                   	inc    ecx
c0000a82:	eb ec                	jmp    c0000a70 <simple_strtoul+0x10>
c0000a84:	80 fa 2d             	cmp    dl,0x2d
c0000a87:	0f 84 1b 01 00 00    	je     c0000ba8 <simple_strtoul+0x148>
c0000a8d:	80 fa 2b             	cmp    dl,0x2b
c0000a90:	0f 84 c2 00 00 00    	je     c0000b58 <simple_strtoul+0xf8>
c0000a96:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a9e:	85 f6                	test   esi,esi
c0000aa0:	0f 85 c3 00 00 00    	jne    c0000b69 <simple_strtoul+0x109>
c0000aa6:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa8:	80 fa 30             	cmp    dl,0x30
c0000aab:	0f 84 47 01 00 00    	je     c0000bf8 <simple_strtoul+0x198>
c0000ab1:	be 0a 00 00 00       	mov    esi,0xa
c0000ab6:	84 d2                	test   dl,dl
c0000ab8:	0f 84 6f 01 00 00    	je     c0000c2d <simple_strtoul+0x1cd>
c0000abe:	31 ed                	xor    ebp,ebp
c0000ac0:	31 ff                	xor    edi,edi
c0000ac2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac9:	eb 2b                	jmp    c0000af6 <simple_strtoul+0x96>
c0000acb:	90                   	nop
c0000acc:	83 eb 30             	sub    ebx,0x30
c0000acf:	39 f3                	cmp    ebx,esi
c0000ad1:	73 4d                	jae    c0000b20 <simple_strtoul+0xc0>
c0000ad3:	31 d2                	xor    edx,edx
c0000ad5:	89 d8                	mov    eax,ebx
c0000ad7:	f7 d0                	not    eax
c0000ad9:	f7 f6                	div    esi
c0000adb:	39 f8                	cmp    eax,edi
c0000add:	0f 82 b1 00 00 00    	jb     c0000b94 <simple_strtoul+0x134>
c0000ae3:	0f af fe             	imul   edi,esi
c0000ae6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000aed:	01 df                	add    edi,ebx
c0000aef:	41                   	inc    ecx
c0000af0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000af2:	84 d2                	test   dl,dl
c0000af4:	74 2a                	je     c0000b20 <simple_strtoul+0xc0>
c0000af6:	0f b6 da             	movzx  ebx,dl
c0000af9:	f6 83 00 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6500],0x4
c0000b00:	75 ca                	jne    c0000acc <simple_strtoul+0x6c>
c0000b02:	0f be d2             	movsx  edx,dl
c0000b05:	52                   	push   edx
c0000b06:	e8 2d ff ff ff       	call   c0000a38 <toupper>
c0000b0b:	5b                   	pop    ebx
c0000b0c:	0f b6 d0             	movzx  edx,al
c0000b0f:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000b16:	74 08                	je     c0000b20 <simple_strtoul+0xc0>
c0000b18:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b1b:	39 f3                	cmp    ebx,esi
c0000b1d:	72 b4                	jb     c0000ad3 <simple_strtoul+0x73>
c0000b1f:	90                   	nop
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	85 c0                	test   eax,eax
c0000b26:	74 14                	je     c0000b3c <simple_strtoul+0xdc>
c0000b28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b2b:	09 f8                	or     eax,edi
c0000b2d:	75 71                	jne    c0000ba0 <simple_strtoul+0x140>
c0000b2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b33:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b37:	31 ff                	xor    edi,edi
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	90                   	nop
c0000b3c:	4d                   	dec    ebp
c0000b3d:	75 05                	jne    c0000b44 <simple_strtoul+0xe4>
c0000b3f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b44:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b49:	75 02                	jne    c0000b4d <simple_strtoul+0xed>
c0000b4b:	f7 df                	neg    edi
c0000b4d:	83 c4 08             	add    esp,0x8
c0000b50:	89 f8                	mov    eax,edi
c0000b52:	5b                   	pop    ebx
c0000b53:	5e                   	pop    esi
c0000b54:	5f                   	pop    edi
c0000b55:	5d                   	pop    ebp
c0000b56:	c3                   	ret    
c0000b57:	90                   	nop
c0000b58:	41                   	inc    ecx
c0000b59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b61:	85 f6                	test   esi,esi
c0000b63:	0f 84 3d ff ff ff    	je     c0000aa6 <simple_strtoul+0x46>
c0000b69:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b6c:	83 f8 22             	cmp    eax,0x22
c0000b6f:	77 6a                	ja     c0000bdb <simple_strtoul+0x17b>
c0000b71:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b73:	83 fe 08             	cmp    esi,0x8
c0000b76:	0f 84 a2 00 00 00    	je     c0000c1e <simple_strtoul+0x1be>
c0000b7c:	83 fe 10             	cmp    esi,0x10
c0000b7f:	0f 85 31 ff ff ff    	jne    c0000ab6 <simple_strtoul+0x56>
c0000b85:	80 fa 30             	cmp    dl,0x30
c0000b88:	74 2c                	je     c0000bb6 <simple_strtoul+0x156>
c0000b8a:	be 10 00 00 00       	mov    esi,0x10
c0000b8f:	e9 22 ff ff ff       	jmp    c0000ab6 <simple_strtoul+0x56>
c0000b94:	bd 01 00 00 00       	mov    ebp,0x1
c0000b99:	31 ff                	xor    edi,edi
c0000b9b:	e9 4f ff ff ff       	jmp    c0000aef <simple_strtoul+0x8f>
c0000ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ba4:	89 08                	mov    DWORD PTR [eax],ecx
c0000ba6:	eb 94                	jmp    c0000b3c <simple_strtoul+0xdc>
c0000ba8:	41                   	inc    ecx
c0000ba9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000bb1:	e9 e8 fe ff ff       	jmp    c0000a9e <simple_strtoul+0x3e>
c0000bb6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bba:	88 04 24             	mov    BYTE PTR [esp],al
c0000bbd:	50                   	push   eax
c0000bbe:	e8 89 fe ff ff       	call   c0000a4c <tolower>
c0000bc3:	5e                   	pop    esi
c0000bc4:	83 f8 78             	cmp    eax,0x78
c0000bc7:	0f 84 84 00 00 00    	je     c0000c51 <simple_strtoul+0x1f1>
c0000bcd:	41                   	inc    ecx
c0000bce:	be 10 00 00 00       	mov    esi,0x10
c0000bd3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd6:	e9 db fe ff ff       	jmp    c0000ab6 <simple_strtoul+0x56>
c0000bdb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bdf:	85 ff                	test   edi,edi
c0000be1:	74 5c                	je     c0000c3f <simple_strtoul+0x1df>
c0000be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000be7:	85 c9                	test   ecx,ecx
c0000be9:	75 4e                	jne    c0000c39 <simple_strtoul+0x1d9>
c0000beb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bf1:	31 ff                	xor    edi,edi
c0000bf3:	e9 4c ff ff ff       	jmp    c0000b44 <simple_strtoul+0xe4>
c0000bf8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bfc:	88 04 24             	mov    BYTE PTR [esp],al
c0000bff:	50                   	push   eax
c0000c00:	e8 47 fe ff ff       	call   c0000a4c <tolower>
c0000c05:	5d                   	pop    ebp
c0000c06:	83 f8 78             	cmp    eax,0x78
c0000c09:	74 3b                	je     c0000c46 <simple_strtoul+0x1e6>
c0000c0b:	41                   	inc    ecx
c0000c0c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c0f:	80 fa 30             	cmp    dl,0x30
c0000c12:	74 13                	je     c0000c27 <simple_strtoul+0x1c7>
c0000c14:	be 08 00 00 00       	mov    esi,0x8
c0000c19:	e9 98 fe ff ff       	jmp    c0000ab6 <simple_strtoul+0x56>
c0000c1e:	80 fa 30             	cmp    dl,0x30
c0000c21:	0f 85 8f fe ff ff    	jne    c0000ab6 <simple_strtoul+0x56>
c0000c27:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c2a:	41                   	inc    ecx
c0000c2b:	eb e7                	jmp    c0000c14 <simple_strtoul+0x1b4>
c0000c2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c31:	85 d2                	test   edx,edx
c0000c33:	74 0a                	je     c0000c3f <simple_strtoul+0x1df>
c0000c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c3d:	89 30                	mov    DWORD PTR [eax],esi
c0000c3f:	31 ff                	xor    edi,edi
c0000c41:	e9 fe fe ff ff       	jmp    c0000b44 <simple_strtoul+0xe4>
c0000c46:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 34 ff ff ff       	jmp    c0000b85 <simple_strtoul+0x125>
c0000c51:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c54:	be 10 00 00 00       	mov    esi,0x10
c0000c59:	83 c1 02             	add    ecx,0x2
c0000c5c:	e9 55 fe ff ff       	jmp    c0000ab6 <simple_strtoul+0x56>

c0000c61 <largebin_index>:
c0000c61:	89 c2                	mov    edx,eax
c0000c63:	c1 ea 08             	shr    edx,0x8
c0000c66:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c6c:	77 10                	ja     c0000c7e <largebin_index+0x1d>
c0000c6e:	0f bd d2             	bsr    edx,edx
c0000c71:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c74:	d3 e8                	shr    eax,cl
c0000c76:	83 e0 03             	and    eax,0x3
c0000c79:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c7d:	c3                   	ret    
c0000c7e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c83:	c3                   	ret    

c0000c84 <malloc_init_state>:
c0000c84:	53                   	push   ebx
c0000c85:	8d 50 34             	lea    edx,[eax+0x34]
c0000c88:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c8e:	89 d1                	mov    ecx,edx
c0000c90:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c93:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c96:	83 c2 08             	add    edx,0x8
c0000c99:	39 da                	cmp    edx,ebx
c0000c9b:	75 f3                	jne    c0000c90 <malloc_init_state+0xc>
c0000c9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c9f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca9:	83 e2 03             	and    edx,0x3
c0000cac:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cb6:	83 ca 48             	or     edx,0x48
c0000cb9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cc3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ccd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cd4:	89 10                	mov    DWORD PTR [eax],edx
c0000cd6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ce3:	5b                   	pop    ebx
c0000ce4:	c3                   	ret    

c0000ce5 <malloc_consolidate>:
c0000ce5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ce7:	85 d2                	test   edx,edx
c0000ce9:	0f 84 d8 00 00 00    	je     c0000dc7 <malloc_consolidate+0xe2>
c0000cef:	55                   	push   ebp
c0000cf0:	83 e2 fd             	and    edx,0xfffffffd
c0000cf3:	57                   	push   edi
c0000cf4:	89 c5                	mov    ebp,eax
c0000cf6:	56                   	push   esi
c0000cf7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cfa:	53                   	push   ebx
c0000cfb:	83 ec 10             	sub    esp,0x10
c0000cfe:	89 10                	mov    DWORD PTR [eax],edx
c0000d00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d04:	c1 ea 03             	shr    edx,0x3
c0000d07:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d0b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d0f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d12:	85 d2                	test   edx,edx
c0000d14:	0f 84 98 00 00 00    	je     c0000db2 <malloc_consolidate+0xcd>
c0000d1a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d21:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d24:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d2b:	89 f9                	mov    ecx,edi
c0000d2d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d30:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d33:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d36:	83 e3 fc             	and    ebx,0xfffffffc
c0000d39:	83 e7 01             	and    edi,0x1
c0000d3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d3f:	75 14                	jne    c0000d55 <malloc_consolidate+0x70>
c0000d41:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d43:	29 fa                	sub    edx,edi
c0000d45:	01 f9                	add    ecx,edi
c0000d47:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4a:	89 fb                	mov    ebx,edi
c0000d4c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d4f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d52:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d55:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d58:	74 40                	je     c0000d9a <malloc_consolidate+0xb5>
c0000d5a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d5d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d60:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d64:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d67:	83 e7 01             	and    edi,0x1
c0000d6a:	75 0e                	jne    c0000d7a <malloc_consolidate+0x95>
c0000d6c:	01 d9                	add    ecx,ebx
c0000d6e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d71:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d74:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d77:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d7a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d7d:	89 ce                	mov    esi,ecx
c0000d7f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d82:	83 ce 01             	or     esi,0x1
c0000d85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d88:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d8b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d8e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d92:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d95:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d98:	eb 0c                	jmp    c0000da6 <malloc_consolidate+0xc1>
c0000d9a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d9d:	83 c9 01             	or     ecx,0x1
c0000da0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000da6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000daa:	85 d2                	test   edx,edx
c0000dac:	0f 85 6f ff ff ff    	jne    c0000d21 <malloc_consolidate+0x3c>
c0000db2:	83 c5 04             	add    ebp,0x4
c0000db5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db9:	0f 85 50 ff ff ff    	jne    c0000d0f <malloc_consolidate+0x2a>
c0000dbf:	83 c4 10             	add    esp,0x10
c0000dc2:	5b                   	pop    ebx
c0000dc3:	5e                   	pop    esi
c0000dc4:	5f                   	pop    edi
c0000dc5:	5d                   	pop    ebp
c0000dc6:	c3                   	ret    
c0000dc7:	e9 b8 fe ff ff       	jmp    c0000c84 <malloc_init_state>

c0000dcc <dlfree>:
c0000dcc:	57                   	push   edi
c0000dcd:	56                   	push   esi
c0000dce:	53                   	push   ebx
c0000dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dd3:	85 db                	test   ebx,ebx
c0000dd5:	0f 84 e2 00 00 00    	je     c0000ebd <dlfree+0xf1>
c0000ddb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dde:	8b 0d 20 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea20
c0000de4:	89 f0                	mov    eax,esi
c0000de6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de9:	83 e0 fc             	and    eax,0xfffffffc
c0000dec:	39 c1                	cmp    ecx,eax
c0000dee:	72 24                	jb     c0000e14 <dlfree+0x48>
c0000df0:	83 c9 03             	or     ecx,0x3
c0000df3:	c1 e8 03             	shr    eax,0x3
c0000df6:	89 0d 20 ea 02 c0    	mov    DWORD PTR ds:0xc002ea20,ecx
c0000dfc:	83 e8 02             	sub    eax,0x2
c0000dff:	8b 0c 85 24 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15dc]
c0000e06:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e08:	89 14 85 24 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd15dc],edx
c0000e0f:	e9 a9 00 00 00       	jmp    c0000ebd <dlfree+0xf1>
c0000e14:	83 e6 02             	and    esi,0x2
c0000e17:	0f 85 a0 00 00 00    	jne    c0000ebd <dlfree+0xf1>
c0000e1d:	83 c9 01             	or     ecx,0x1
c0000e20:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e23:	89 0d 20 ea 02 c0    	mov    DWORD PTR ds:0xc002ea20,ecx
c0000e29:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e2c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e2f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e33:	75 13                	jne    c0000e48 <dlfree+0x7c>
c0000e35:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e38:	29 da                	sub    edx,ebx
c0000e3a:	01 d8                	add    eax,ebx
c0000e3c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e3f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e42:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e45:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e48:	39 35 4c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea4c,esi
c0000e4e:	74 40                	je     c0000e90 <dlfree+0xc4>
c0000e50:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e54:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e57:	80 e3 01             	and    bl,0x1
c0000e5a:	75 0e                	jne    c0000e6a <dlfree+0x9e>
c0000e5c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e5f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e62:	01 c8                	add    eax,ecx
c0000e64:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e67:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e6a:	8b 0d 5c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea5c
c0000e70:	c7 42 0c 54 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea54
c0000e77:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e7a:	89 15 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,edx
c0000e80:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e83:	89 c1                	mov    ecx,eax
c0000e85:	83 c9 01             	or     ecx,0x1
c0000e88:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e8e:	eb 10                	jmp    c0000ea0 <dlfree+0xd4>
c0000e90:	01 c8                	add    eax,ecx
c0000e92:	89 c1                	mov    ecx,eax
c0000e94:	83 c9 01             	or     ecx,0x1
c0000e97:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e9a:	89 15 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,edx
c0000ea0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ea5:	76 16                	jbe    c0000ebd <dlfree+0xf1>
c0000ea7:	f6 05 20 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea20,0x2
c0000eae:	74 0d                	je     c0000ebd <dlfree+0xf1>
c0000eb0:	5b                   	pop    ebx
c0000eb1:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	e9 28 fe ff ff       	jmp    c0000ce5 <malloc_consolidate>
c0000ebd:	5b                   	pop    ebx
c0000ebe:	5e                   	pop    esi
c0000ebf:	5f                   	pop    edi
c0000ec0:	c3                   	ret    

c0000ec1 <sYSMALLOc>:
c0000ec1:	55                   	push   ebp
c0000ec2:	57                   	push   edi
c0000ec3:	56                   	push   esi
c0000ec4:	53                   	push   ebx
c0000ec5:	89 d3                	mov    ebx,edx
c0000ec7:	83 ec 2c             	sub    esp,0x2c
c0000eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ece:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ed4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ed7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ede:	74 1f                	je     c0000eff <sYSMALLOc+0x3e>
c0000ee0:	89 d8                	mov    eax,ebx
c0000ee2:	e8 fe fd ff ff       	call   c0000ce5 <malloc_consolidate>
c0000ee7:	83 ec 0c             	sub    esp,0xc
c0000eea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eee:	83 e8 07             	sub    eax,0x7
c0000ef1:	50                   	push   eax
c0000ef2:	e8 30 02 00 00       	call   c0001127 <dlmalloc>
c0000ef7:	83 c4 10             	add    esp,0x10
c0000efa:	e9 20 02 00 00       	jmp    c000111f <sYSMALLOc+0x25e>
c0000eff:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f02:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f0b:	83 e0 fc             	and    eax,0xfffffffc
c0000f0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f16:	83 c0 10             	add    eax,0x10
c0000f19:	01 c1                	add    ecx,eax
c0000f1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f1f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f26:	74 04                	je     c0000f2c <sYSMALLOc+0x6b>
c0000f28:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f2c:	f7 da                	neg    edx
c0000f2e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f36:	21 d1                	and    ecx,edx
c0000f38:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f3c:	7f 07                	jg     c0000f45 <sYSMALLOc+0x84>
c0000f3e:	31 c0                	xor    eax,eax
c0000f40:	e9 da 01 00 00       	jmp    c000111f <sYSMALLOc+0x25e>
c0000f45:	83 ec 0c             	sub    esp,0xc
c0000f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f4c:	e8 27 e8 00 00       	call   c000f778 <sbrk>
c0000f51:	83 c4 10             	add    esp,0x10
c0000f54:	89 c6                	mov    esi,eax
c0000f56:	83 f8 ff             	cmp    eax,0xffffffff
c0000f59:	74 e3                	je     c0000f3e <sYSMALLOc+0x7d>
c0000f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f5f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f63:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f66:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f74:	75 13                	jne    c0000f89 <sYSMALLOc+0xc8>
c0000f76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f7e:	83 c8 01             	or     eax,0x1
c0000f81:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f84:	e9 3e 01 00 00       	jmp    c00010c7 <sYSMALLOc+0x206>
c0000f89:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f8f:	88 d0                	mov    al,dl
c0000f91:	83 e0 01             	and    eax,0x1
c0000f94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f99:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f9d:	0f 95 c0             	setne  al
c0000fa0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fa4:	39 f1                	cmp    ecx,esi
c0000fa6:	76 12                	jbe    c0000fba <sYSMALLOc+0xf9>
c0000fa8:	84 c0                	test   al,al
c0000faa:	74 0e                	je     c0000fba <sYSMALLOc+0xf9>
c0000fac:	83 e2 fe             	and    edx,0xfffffffe
c0000faf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fb5:	e9 83 00 00 00       	jmp    c000103d <sYSMALLOc+0x17c>
c0000fba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fbf:	74 7c                	je     c000103d <sYSMALLOc+0x17c>
c0000fc1:	84 c0                	test   al,al
c0000fc3:	74 0c                	je     c0000fd1 <sYSMALLOc+0x110>
c0000fc5:	89 f0                	mov    eax,esi
c0000fc7:	29 c8                	sub    eax,ecx
c0000fc9:	01 e8                	add    eax,ebp
c0000fcb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fd1:	89 f2                	mov    edx,esi
c0000fd3:	83 e2 07             	and    edx,0x7
c0000fd6:	74 0c                	je     c0000fe4 <sYSMALLOc+0x123>
c0000fd8:	b8 08 00 00 00       	mov    eax,0x8
c0000fdd:	29 d0                	sub    eax,edx
c0000fdf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fe2:	eb 04                	jmp    c0000fe8 <sYSMALLOc+0x127>
c0000fe4:	89 f5                	mov    ebp,esi
c0000fe6:	31 c0                	xor    eax,eax
c0000fe8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ff0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ff4:	01 c1                	add    ecx,eax
c0000ff6:	83 ec 0c             	sub    esp,0xc
c0000ff9:	01 f1                	add    ecx,esi
c0000ffb:	01 ca                	add    edx,ecx
c0000ffd:	29 c8                	sub    eax,ecx
c0000fff:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0001003:	01 c2                	add    edx,eax
c0001005:	52                   	push   edx
c0001006:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000100a:	e8 69 e7 00 00       	call   c000f778 <sbrk>
c000100f:	83 c4 10             	add    esp,0x10
c0001012:	83 f8 ff             	cmp    eax,0xffffffff
c0001015:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001019:	75 0f                	jne    c000102a <sYSMALLOc+0x169>
c000101b:	83 ec 0c             	sub    esp,0xc
c000101e:	6a 00                	push   0x0
c0001020:	e8 53 e7 00 00       	call   c000f778 <sbrk>
c0001025:	83 c4 10             	add    esp,0x10
c0001028:	eb 30                	jmp    c000105a <sYSMALLOc+0x199>
c000102a:	39 c6                	cmp    esi,eax
c000102c:	76 33                	jbe    c0001061 <sYSMALLOc+0x1a0>
c000102e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001032:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001039:	01 f0                	add    eax,esi
c000103b:	eb 1d                	jmp    c000105a <sYSMALLOc+0x199>
c000103d:	83 ec 0c             	sub    esp,0xc
c0001040:	89 f5                	mov    ebp,esi
c0001042:	6a 00                	push   0x0
c0001044:	e8 2f e7 00 00       	call   c000f778 <sbrk>
c0001049:	89 c2                	mov    edx,eax
c000104b:	29 f2                	sub    edx,esi
c000104d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001051:	83 c4 10             	add    esp,0x10
c0001054:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000105a:	31 d2                	xor    edx,edx
c000105c:	83 f8 ff             	cmp    eax,0xffffffff
c000105f:	74 66                	je     c00010c7 <sYSMALLOc+0x206>
c0001061:	29 e8                	sub    eax,ebp
c0001063:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001066:	01 d0                	add    eax,edx
c0001068:	83 c8 01             	or     eax,0x1
c000106b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000106e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001074:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001079:	74 4c                	je     c00010c7 <sYSMALLOc+0x206>
c000107b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000107f:	83 e8 0c             	sub    eax,0xc
c0001082:	83 e0 f8             	and    eax,0xfffffff8
c0001085:	89 c2                	mov    edx,eax
c0001087:	83 ca 01             	or     edx,0x1
c000108a:	83 f8 0f             	cmp    eax,0xf
c000108d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001090:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001098:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010a0:	76 25                	jbe    c00010c7 <sYSMALLOc+0x206>
c00010a2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a8:	83 ec 0c             	sub    esp,0xc
c00010ab:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010b5:	83 c7 08             	add    edi,0x8
c00010b8:	57                   	push   edi
c00010b9:	e8 0e fd ff ff       	call   c0000dcc <dlfree>
c00010be:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010c4:	83 c4 10             	add    esp,0x10
c00010c7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010cd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010d3:	73 06                	jae    c00010db <sYSMALLOc+0x21a>
c00010d5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010db:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010e1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010e7:	73 06                	jae    c00010ef <sYSMALLOc+0x22e>
c00010e9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f5:	83 e2 fc             	and    edx,0xfffffffc
c00010f8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010fc:	0f 82 3c fe ff ff    	jb     c0000f3e <sYSMALLOc+0x7d>
c0001102:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001106:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001109:	29 fa                	sub    edx,edi
c000110b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000110e:	83 ca 01             	or     edx,0x1
c0001111:	89 fb                	mov    ebx,edi
c0001113:	83 c0 08             	add    eax,0x8
c0001116:	83 cb 01             	or     ebx,0x1
c0001119:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000111c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000111f:	83 c4 2c             	add    esp,0x2c
c0001122:	5b                   	pop    ebx
c0001123:	5e                   	pop    esi
c0001124:	5f                   	pop    edi
c0001125:	5d                   	pop    ebp
c0001126:	c3                   	ret    

c0001127 <dlmalloc>:
c0001127:	55                   	push   ebp
c0001128:	57                   	push   edi
c0001129:	56                   	push   esi
c000112a:	53                   	push   ebx
c000112b:	83 ec 1c             	sub    esp,0x1c
c000112e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001132:	83 f8 df             	cmp    eax,0xffffffdf
c0001135:	0f 87 70 03 00 00    	ja     c00014ab <dlmalloc+0x384>
c000113b:	83 c0 0b             	add    eax,0xb
c000113e:	be 10 00 00 00       	mov    esi,0x10
c0001143:	83 f8 0f             	cmp    eax,0xf
c0001146:	76 05                	jbe    c000114d <dlmalloc+0x26>
c0001148:	83 e0 f8             	and    eax,0xfffffff8
c000114b:	89 c6                	mov    esi,eax
c000114d:	8b 3d 20 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea20
c0001153:	f7 c7 01 00 00 00    	test   edi,0x1
c0001159:	75 17                	jne    c0001172 <dlmalloc+0x4b>
c000115b:	85 ff                	test   edi,edi
c000115d:	0f 85 05 03 00 00    	jne    c0001468 <dlmalloc+0x341>
c0001163:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001168:	e8 78 fb ff ff       	call   c0000ce5 <malloc_consolidate>
c000116d:	e9 f6 02 00 00       	jmp    c0001468 <dlmalloc+0x341>
c0001172:	39 f7                	cmp    edi,esi
c0001174:	72 1f                	jb     c0001195 <dlmalloc+0x6e>
c0001176:	89 f2                	mov    edx,esi
c0001178:	c1 ea 03             	shr    edx,0x3
c000117b:	83 ea 02             	sub    edx,0x2
c000117e:	8b 04 95 24 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15dc]
c0001185:	85 c0                	test   eax,eax
c0001187:	74 0c                	je     c0001195 <dlmalloc+0x6e>
c0001189:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000118c:	89 0c 95 24 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15dc],ecx
c0001193:	eb 30                	jmp    c00011c5 <dlmalloc+0x9e>
c0001195:	89 f0                	mov    eax,esi
c0001197:	81 fe ff 00 00 00    	cmp    esi,0xff
c000119d:	77 2e                	ja     c00011cd <dlmalloc+0xa6>
c000119f:	c1 e8 03             	shr    eax,0x3
c00011a2:	8d 14 c5 54 ea 02 c0 	lea    edx,[eax*8-0x3ffd15ac]
c00011a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011ad:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011b0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011b3:	39 c3                	cmp    ebx,eax
c00011b5:	74 2e                	je     c00011e5 <dlmalloc+0xbe>
c00011b7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ba:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011bf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011c2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011c5:	83 c0 08             	add    eax,0x8
c00011c8:	e9 e0 02 00 00       	jmp    c00014ad <dlmalloc+0x386>
c00011cd:	e8 8f fa ff ff       	call   c0000c61 <largebin_index>
c00011d2:	83 e7 02             	and    edi,0x2
c00011d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d9:	74 0a                	je     c00011e5 <dlmalloc+0xbe>
c00011db:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c00011e0:	e8 00 fb ff ff       	call   c0000ce5 <malloc_consolidate>
c00011e5:	8d 46 10             	lea    eax,[esi+0x10]
c00011e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ec:	8b 1d 60 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea60
c00011f2:	81 fb 54 ea 02 c0    	cmp    ebx,0xc002ea54
c00011f8:	0f 84 13 01 00 00    	je     c0001311 <dlmalloc+0x1ea>
c00011fe:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001201:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001204:	83 e7 fc             	and    edi,0xfffffffc
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	77 4c                	ja     c000125b <dlmalloc+0x134>
c000120f:	3d 54 ea 02 c0       	cmp    eax,0xc002ea54
c0001214:	75 45                	jne    c000125b <dlmalloc+0x134>
c0001216:	39 1d 50 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea50,ebx
c000121c:	75 3d                	jne    c000125b <dlmalloc+0x134>
c000121e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001222:	73 37                	jae    c000125b <dlmalloc+0x134>
c0001224:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001227:	89 fa                	mov    edx,edi
c0001229:	a3 5c ea 02 c0       	mov    ds:0xc002ea5c,eax
c000122e:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0001233:	a3 50 ea 02 c0       	mov    ds:0xc002ea50,eax
c0001238:	29 f2                	sub    edx,esi
c000123a:	c7 40 08 54 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea54
c0001241:	c7 40 0c 54 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea54
c0001248:	83 ce 01             	or     esi,0x1
c000124b:	89 d1                	mov    ecx,edx
c000124d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001250:	83 c9 01             	or     ecx,0x1
c0001253:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001256:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001259:	eb 15                	jmp    c0001270 <dlmalloc+0x149>
c000125b:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0001260:	39 fe                	cmp    esi,edi
c0001262:	c7 40 08 54 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea54
c0001269:	75 0d                	jne    c0001278 <dlmalloc+0x151>
c000126b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001270:	8d 43 08             	lea    eax,[ebx+0x8]
c0001273:	e9 35 02 00 00       	jmp    c00014ad <dlmalloc+0x386>
c0001278:	89 f8                	mov    eax,edi
c000127a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001280:	77 19                	ja     c000129b <dlmalloc+0x174>
c0001282:	c1 e8 03             	shr    eax,0x3
c0001285:	8d 14 00             	lea    edx,[eax+eax*1]
c0001288:	83 c2 0d             	add    edx,0xd
c000128b:	8d 2c 95 18 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15e8]
c0001292:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0001299:	eb 46                	jmp    c00012e1 <dlmalloc+0x1ba>
c000129b:	e8 c1 f9 ff ff       	call   c0000c61 <largebin_index>
c00012a0:	8d 14 00             	lea    edx,[eax+eax*1]
c00012a3:	83 c2 0d             	add    edx,0xd
c00012a6:	8d 0c 95 20 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15e0]
c00012ad:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00012b4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012b7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012bb:	89 d5                	mov    ebp,edx
c00012bd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012c1:	74 1e                	je     c00012e1 <dlmalloc+0x1ba>
c00012c3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012c6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c9:	77 12                	ja     c00012dd <dlmalloc+0x1b6>
c00012cb:	83 cf 01             	or     edi,0x1
c00012ce:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012d1:	76 05                	jbe    c00012d8 <dlmalloc+0x1b1>
c00012d3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012d6:	eb f6                	jmp    c00012ce <dlmalloc+0x1a7>
c00012d8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012db:	eb 04                	jmp    c00012e1 <dlmalloc+0x1ba>
c00012dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012e1:	89 c7                	mov    edi,eax
c00012e3:	88 c1                	mov    cl,al
c00012e5:	c1 ff 05             	sar    edi,0x5
c00012e8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012ec:	bf 01 00 00 00       	mov    edi,0x1
c00012f1:	d3 e7                	shl    edi,cl
c00012f3:	89 f8                	mov    eax,edi
c00012f5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f9:	09 04 bd 54 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd12ac],eax
c0001300:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001303:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001306:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001309:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000130c:	e9 db fe ff ff       	jmp    c00011ec <dlmalloc+0xc5>
c0001311:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001317:	76 78                	jbe    c0001391 <dlmalloc+0x26a>
c0001319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000131d:	8d 04 c5 54 ea 02 c0 	lea    eax,[eax*8-0x3ffd15ac]
c0001324:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001327:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000132a:	39 ca                	cmp    edx,ecx
c000132c:	74 63                	je     c0001391 <dlmalloc+0x26a>
c000132e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001331:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001334:	83 e3 fc             	and    ebx,0xfffffffc
c0001337:	39 de                	cmp    esi,ebx
c0001339:	77 52                	ja     c000138d <dlmalloc+0x266>
c000133b:	89 df                	mov    edi,ebx
c000133d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001340:	29 f7                	sub    edi,esi
c0001342:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001345:	01 d3                	add    ebx,edx
c0001347:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000134a:	83 ff 0f             	cmp    edi,0xf
c000134d:	8d 42 08             	lea    eax,[edx+0x8]
c0001350:	77 09                	ja     c000135b <dlmalloc+0x234>
c0001352:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001356:	e9 52 01 00 00       	jmp    c00014ad <dlmalloc+0x386>
c000135b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000135e:	83 ce 01             	or     esi,0x1
c0001361:	89 0d 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,ecx
c0001367:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c000136d:	c7 41 08 54 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea54
c0001374:	c7 41 0c 54 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea54
c000137b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000137e:	89 fa                	mov    edx,edi
c0001380:	83 ca 01             	or     edx,0x1
c0001383:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001386:	89 3b                	mov    DWORD PTR [ebx],edi
c0001388:	e9 20 01 00 00       	jmp    c00014ad <dlmalloc+0x386>
c000138d:	89 c2                	mov    edx,eax
c000138f:	eb 99                	jmp    c000132a <dlmalloc+0x203>
c0001391:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001395:	b8 01 00 00 00       	mov    eax,0x1
c000139a:	41                   	inc    ecx
c000139b:	89 cb                	mov    ebx,ecx
c000139d:	8d 14 cd 4c ea 02 c0 	lea    edx,[ecx*8-0x3ffd15b4]
c00013a4:	c1 eb 05             	shr    ebx,0x5
c00013a7:	d3 e0                	shl    eax,cl
c00013a9:	8b 3c 9d 54 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd12ac]
c00013b0:	39 f8                	cmp    eax,edi
c00013b2:	77 04                	ja     c00013b8 <dlmalloc+0x291>
c00013b4:	85 c0                	test   eax,eax
c00013b6:	75 26                	jne    c00013de <dlmalloc+0x2b7>
c00013b8:	43                   	inc    ebx
c00013b9:	83 fb 02             	cmp    ebx,0x2
c00013bc:	0f 87 a6 00 00 00    	ja     c0001468 <dlmalloc+0x341>
c00013c2:	8b 3c 9d 54 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd12ac]
c00013c9:	85 ff                	test   edi,edi
c00013cb:	74 eb                	je     c00013b8 <dlmalloc+0x291>
c00013cd:	89 d8                	mov    eax,ebx
c00013cf:	c1 e0 06             	shl    eax,0x6
c00013d2:	8d 14 85 4c ea 02 c0 	lea    edx,[eax*4-0x3ffd15b4]
c00013d9:	b8 01 00 00 00       	mov    eax,0x1
c00013de:	85 f8                	test   eax,edi
c00013e0:	75 07                	jne    c00013e9 <dlmalloc+0x2c2>
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	01 c0                	add    eax,eax
c00013e7:	eb f5                	jmp    c00013de <dlmalloc+0x2b7>
c00013e9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013ec:	39 ca                	cmp    edx,ecx
c00013ee:	75 14                	jne    c0001404 <dlmalloc+0x2dd>
c00013f0:	89 c1                	mov    ecx,eax
c00013f2:	83 c2 08             	add    edx,0x8
c00013f5:	f7 d1                	not    ecx
c00013f7:	01 c0                	add    eax,eax
c00013f9:	21 cf                	and    edi,ecx
c00013fb:	89 3c 9d 54 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd12ac],edi
c0001402:	eb ac                	jmp    c00013b0 <dlmalloc+0x289>
c0001404:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001407:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000140a:	83 e0 fc             	and    eax,0xfffffffc
c000140d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001410:	89 c3                	mov    ebx,eax
c0001412:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001415:	29 f3                	sub    ebx,esi
c0001417:	8d 14 01             	lea    edx,[ecx+eax*1]
c000141a:	83 fb 0f             	cmp    ebx,0xf
c000141d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001420:	77 09                	ja     c000142b <dlmalloc+0x304>
c0001422:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001426:	e9 82 00 00 00       	jmp    c00014ad <dlmalloc+0x386>
c000142b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000142e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001434:	89 3d 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,edi
c000143a:	89 3d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,edi
c0001440:	c7 47 08 54 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea54
c0001447:	c7 47 0c 54 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea54
c000144e:	77 06                	ja     c0001456 <dlmalloc+0x32f>
c0001450:	89 3d 50 ea 02 c0    	mov    DWORD PTR ds:0xc002ea50,edi
c0001456:	83 ce 01             	or     esi,0x1
c0001459:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000145c:	89 d9                	mov    ecx,ebx
c000145e:	83 c9 01             	or     ecx,0x1
c0001461:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001464:	89 1a                	mov    DWORD PTR [edx],ebx
c0001466:	eb 45                	jmp    c00014ad <dlmalloc+0x386>
c0001468:	a1 4c ea 02 c0       	mov    eax,ds:0xc002ea4c
c000146d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001470:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001473:	83 e2 fc             	and    edx,0xfffffffc
c0001476:	39 d1                	cmp    ecx,edx
c0001478:	77 1e                	ja     c0001498 <dlmalloc+0x371>
c000147a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000147d:	89 f3                	mov    ebx,esi
c000147f:	89 0d 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,ecx
c0001485:	83 cb 01             	or     ebx,0x1
c0001488:	29 f2                	sub    edx,esi
c000148a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000148d:	83 ca 01             	or     edx,0x1
c0001490:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001493:	e9 2d fd ff ff       	jmp    c00011c5 <dlmalloc+0x9e>
c0001498:	83 c4 1c             	add    esp,0x1c
c000149b:	89 f0                	mov    eax,esi
c000149d:	5b                   	pop    ebx
c000149e:	ba 20 ea 02 c0       	mov    edx,0xc002ea20
c00014a3:	5e                   	pop    esi
c00014a4:	5f                   	pop    edi
c00014a5:	5d                   	pop    ebp
c00014a6:	e9 16 fa ff ff       	jmp    c0000ec1 <sYSMALLOc>
c00014ab:	31 c0                	xor    eax,eax
c00014ad:	83 c4 1c             	add    esp,0x1c
c00014b0:	5b                   	pop    ebx
c00014b1:	5e                   	pop    esi
c00014b2:	5f                   	pop    edi
c00014b3:	5d                   	pop    ebp
c00014b4:	c3                   	ret    

c00014b5 <iALLOc>:
c00014b5:	55                   	push   ebp
c00014b6:	89 c5                	mov    ebp,eax
c00014b8:	57                   	push   edi
c00014b9:	56                   	push   esi
c00014ba:	53                   	push   ebx
c00014bb:	83 ec 2c             	sub    esp,0x2c
c00014be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014c2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ca:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c00014d1:	75 12                	jne    c00014e5 <iALLOc+0x30>
c00014d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014d7:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c00014dc:	e8 04 f8 ff ff       	call   c0000ce5 <malloc_consolidate>
c00014e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ea:	74 12                	je     c00014fe <iALLOc+0x49>
c00014ec:	85 ed                	test   ebp,ebp
c00014ee:	0f 84 64 01 00 00    	je     c0001658 <iALLOc+0x1a3>
c00014f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014fc:	eb 33                	jmp    c0001531 <iALLOc+0x7c>
c00014fe:	85 ed                	test   ebp,ebp
c0001500:	75 14                	jne    c0001516 <iALLOc+0x61>
c0001502:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000150a:	83 c4 2c             	add    esp,0x2c
c000150d:	5b                   	pop    ebx
c000150e:	5e                   	pop    esi
c000150f:	5f                   	pop    edi
c0001510:	5d                   	pop    ebp
c0001511:	e9 11 fc ff ff       	jmp    c0001127 <dlmalloc>
c0001516:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000151d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001525:	83 f8 0f             	cmp    eax,0xf
c0001528:	76 07                	jbe    c0001531 <iALLOc+0x7c>
c000152a:	83 e0 f8             	and    eax,0xfffffff8
c000152d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001531:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001536:	75 09                	jne    c0001541 <iALLOc+0x8c>
c0001538:	89 d0                	mov    eax,edx
c000153a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000153d:	31 f6                	xor    esi,esi
c000153f:	eb 3b                	jmp    c000157c <iALLOc+0xc7>
c0001541:	8b 02                	mov    eax,DWORD PTR [edx]
c0001543:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000154b:	83 c0 0b             	add    eax,0xb
c000154e:	83 f8 0f             	cmp    eax,0xf
c0001551:	76 07                	jbe    c000155a <iALLOc+0xa5>
c0001553:	83 e0 f8             	and    eax,0xfffffff8
c0001556:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000155a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000155e:	0f af f5             	imul   esi,ebp
c0001561:	eb 25                	jmp    c0001588 <iALLOc+0xd3>
c0001563:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001565:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001568:	bb 10 00 00 00       	mov    ebx,0x10
c000156d:	83 f9 0f             	cmp    ecx,0xf
c0001570:	76 05                	jbe    c0001577 <iALLOc+0xc2>
c0001572:	83 e1 f8             	and    ecx,0xfffffff8
c0001575:	89 cb                	mov    ebx,ecx
c0001577:	01 de                	add    esi,ebx
c0001579:	83 c0 04             	add    eax,0x4
c000157c:	39 c7                	cmp    edi,eax
c000157e:	75 e3                	jne    c0001563 <iALLOc+0xae>
c0001580:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001588:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000158c:	8b 1d 74 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed74
c0001592:	83 ec 0c             	sub    esp,0xc
c0001595:	c7 05 74 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed74,0x0
c000159f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015a3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015a7:	50                   	push   eax
c00015a8:	e8 7a fb ff ff       	call   c0001127 <dlmalloc>
c00015ad:	83 c4 10             	add    esp,0x10
c00015b0:	89 1d 74 ed 02 c0    	mov    DWORD PTR ds:0xc002ed74,ebx
c00015b6:	85 c0                	test   eax,eax
c00015b8:	0f 84 92 00 00 00    	je     c0001650 <iALLOc+0x19b>
c00015be:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015c1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015c4:	83 e3 fc             	and    ebx,0xfffffffc
c00015c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015cb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015d0:	74 1e                	je     c00015f0 <iALLOc+0x13b>
c00015d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015d6:	89 d9                	mov    ecx,ebx
c00015d8:	52                   	push   edx
c00015d9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015dd:	83 e9 04             	sub    ecx,0x4
c00015e0:	51                   	push   ecx
c00015e1:	6a 00                	push   0x0
c00015e3:	50                   	push   eax
c00015e4:	e8 9f f1 ff ff       	call   c0000788 <memset>
c00015e9:	83 c4 10             	add    esp,0x10
c00015ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015f5:	75 14                	jne    c000160b <iALLOc+0x156>
c00015f7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015fa:	29 f3                	sub    ebx,esi
c00015fc:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ff:	83 cb 01             	or     ebx,0x1
c0001602:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001606:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001609:	89 f3                	mov    ebx,esi
c000160b:	31 c0                	xor    eax,eax
c000160d:	4d                   	dec    ebp
c000160e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001611:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001615:	39 c5                	cmp    ebp,eax
c0001617:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000161a:	74 2c                	je     c0001648 <iALLOc+0x193>
c000161c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001620:	85 c9                	test   ecx,ecx
c0001622:	75 15                	jne    c0001639 <iALLOc+0x184>
c0001624:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001627:	8d 71 0b             	lea    esi,[ecx+0xb]
c000162a:	b9 10 00 00 00       	mov    ecx,0x10
c000162f:	83 fe 0f             	cmp    esi,0xf
c0001632:	76 05                	jbe    c0001639 <iALLOc+0x184>
c0001634:	83 e6 f8             	and    esi,0xfffffff8
c0001637:	89 f1                	mov    ecx,esi
c0001639:	89 ce                	mov    esi,ecx
c000163b:	29 cb                	sub    ebx,ecx
c000163d:	83 ce 01             	or     esi,0x1
c0001640:	40                   	inc    eax
c0001641:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001644:	01 cf                	add    edi,ecx
c0001646:	eb c6                	jmp    c000160e <iALLOc+0x159>
c0001648:	83 cb 01             	or     ebx,0x1
c000164b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000164e:	eb 08                	jmp    c0001658 <iALLOc+0x1a3>
c0001650:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000165c:	83 c4 2c             	add    esp,0x2c
c000165f:	5b                   	pop    ebx
c0001660:	5e                   	pop    esi
c0001661:	5f                   	pop    edi
c0001662:	5d                   	pop    ebp
c0001663:	c3                   	ret    

c0001664 <dlrealloc>:
c0001664:	55                   	push   ebp
c0001665:	57                   	push   edi
c0001666:	56                   	push   esi
c0001667:	53                   	push   ebx
c0001668:	83 ec 1c             	sub    esp,0x1c
c000166b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000166f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001673:	85 db                	test   ebx,ebx
c0001675:	75 10                	jne    c0001687 <dlrealloc+0x23>
c0001677:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000167b:	83 c4 1c             	add    esp,0x1c
c000167e:	5b                   	pop    ebx
c000167f:	5e                   	pop    esi
c0001680:	5f                   	pop    edi
c0001681:	5d                   	pop    ebp
c0001682:	e9 a0 fa ff ff       	jmp    c0001127 <dlmalloc>
c0001687:	83 f8 df             	cmp    eax,0xffffffdf
c000168a:	76 07                	jbe    c0001693 <dlrealloc+0x2f>
c000168c:	31 db                	xor    ebx,ebx
c000168e:	e9 7c 01 00 00       	jmp    c000180f <dlrealloc+0x1ab>
c0001693:	83 c0 0b             	add    eax,0xb
c0001696:	bf 10 00 00 00       	mov    edi,0x10
c000169b:	83 f8 0f             	cmp    eax,0xf
c000169e:	76 05                	jbe    c00016a5 <dlrealloc+0x41>
c00016a0:	83 e0 f8             	and    eax,0xfffffff8
c00016a3:	89 c7                	mov    edi,eax
c00016a5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a8:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016ab:	89 c6                	mov    esi,eax
c00016ad:	83 e6 fc             	and    esi,0xfffffffc
c00016b0:	a8 02                	test   al,0x2
c00016b2:	75 d8                	jne    c000168c <dlrealloc+0x28>
c00016b4:	39 f7                	cmp    edi,esi
c00016b6:	0f 86 15 01 00 00    	jbe    c00017d1 <dlrealloc+0x16d>
c00016bc:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016c0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016c3:	39 15 4c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea4c,edx
c00016c9:	75 33                	jne    c00016fe <dlrealloc+0x9a>
c00016cb:	83 e1 fc             	and    ecx,0xfffffffc
c00016ce:	01 f1                	add    ecx,esi
c00016d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016d4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016d7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016db:	77 49                	ja     c0001726 <dlrealloc+0xc2>
c00016dd:	01 fd                	add    ebp,edi
c00016df:	83 e0 01             	and    eax,0x1
c00016e2:	09 f8                	or     eax,edi
c00016e4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016e7:	89 2d 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,ebp
c00016ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016f1:	29 f8                	sub    eax,edi
c00016f3:	83 c8 01             	or     eax,0x1
c00016f6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f9:	e9 11 01 00 00       	jmp    c000180f <dlrealloc+0x1ab>
c00016fe:	89 c8                	mov    eax,ecx
c0001700:	83 e0 fe             	and    eax,0xfffffffe
c0001703:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001708:	75 1c                	jne    c0001726 <dlrealloc+0xc2>
c000170a:	83 e1 fc             	and    ecx,0xfffffffc
c000170d:	01 f1                	add    ecx,esi
c000170f:	39 cf                	cmp    edi,ecx
c0001711:	77 13                	ja     c0001726 <dlrealloc+0xc2>
c0001713:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001716:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001719:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000171c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000171f:	89 ce                	mov    esi,ecx
c0001721:	e9 ab 00 00 00       	jmp    c00017d1 <dlrealloc+0x16d>
c0001726:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000172a:	8d 47 f9             	lea    eax,[edi-0x7]
c000172d:	83 ec 0c             	sub    esp,0xc
c0001730:	50                   	push   eax
c0001731:	e8 f1 f9 ff ff       	call   c0001127 <dlmalloc>
c0001736:	83 c4 10             	add    esp,0x10
c0001739:	89 c1                	mov    ecx,eax
c000173b:	85 c0                	test   eax,eax
c000173d:	0f 84 49 ff ff ff    	je     c000168c <dlrealloc+0x28>
c0001743:	8d 40 f8             	lea    eax,[eax-0x8]
c0001746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000174a:	39 c2                	cmp    edx,eax
c000174c:	75 0a                	jne    c0001758 <dlrealloc+0xf4>
c000174e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001751:	83 e0 fc             	and    eax,0xfffffffc
c0001754:	01 c6                	add    esi,eax
c0001756:	eb 79                	jmp    c00017d1 <dlrealloc+0x16d>
c0001758:	83 ee 04             	sub    esi,0x4
c000175b:	83 fe 27             	cmp    esi,0x27
c000175e:	76 16                	jbe    c0001776 <dlrealloc+0x112>
c0001760:	50                   	push   eax
c0001761:	56                   	push   esi
c0001762:	53                   	push   ebx
c0001763:	51                   	push   ecx
c0001764:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001768:	e8 fb ef ff ff       	call   c0000768 <memcpy>
c000176d:	83 c4 10             	add    esp,0x10
c0001770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001774:	eb 43                	jmp    c00017b9 <dlrealloc+0x155>
c0001776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001778:	83 fe 13             	cmp    esi,0x13
c000177b:	89 01                	mov    DWORD PTR [ecx],eax
c000177d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001780:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001783:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001786:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001789:	76 2e                	jbe    c00017b9 <dlrealloc+0x155>
c000178b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000178e:	83 fe 1b             	cmp    esi,0x1b
c0001791:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001794:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001797:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000179a:	76 1d                	jbe    c00017b9 <dlrealloc+0x155>
c000179c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000179f:	83 fe 23             	cmp    esi,0x23
c00017a2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a8:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017ab:	76 0c                	jbe    c00017b9 <dlrealloc+0x155>
c00017ad:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017b0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017b6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017bd:	83 ec 0c             	sub    esp,0xc
c00017c0:	53                   	push   ebx
c00017c1:	e8 06 f6 ff ff       	call   c0000dcc <dlfree>
c00017c6:	83 c4 10             	add    esp,0x10
c00017c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017cd:	89 cb                	mov    ebx,ecx
c00017cf:	eb 3e                	jmp    c000180f <dlrealloc+0x1ab>
c00017d1:	89 f2                	mov    edx,esi
c00017d3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017d6:	29 fa                	sub    edx,edi
c00017d8:	83 e1 01             	and    ecx,0x1
c00017db:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017df:	83 fa 0f             	cmp    edx,0xf
c00017e2:	77 0b                	ja     c00017ef <dlrealloc+0x18b>
c00017e4:	09 ce                	or     esi,ecx
c00017e6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017ed:	eb 20                	jmp    c000180f <dlrealloc+0x1ab>
c00017ef:	01 fd                	add    ebp,edi
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	09 cf                	or     edi,ecx
c00017f6:	83 ca 01             	or     edx,0x1
c00017f9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017fc:	83 c5 08             	add    ebp,0x8
c00017ff:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001802:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001806:	55                   	push   ebp
c0001807:	e8 c0 f5 ff ff       	call   c0000dcc <dlfree>
c000180c:	83 c4 10             	add    esp,0x10
c000180f:	83 c4 1c             	add    esp,0x1c
c0001812:	89 d8                	mov    eax,ebx
c0001814:	5b                   	pop    ebx
c0001815:	5e                   	pop    esi
c0001816:	5f                   	pop    edi
c0001817:	5d                   	pop    ebp
c0001818:	c3                   	ret    

c0001819 <dlmemalign>:
c0001819:	55                   	push   ebp
c000181a:	57                   	push   edi
c000181b:	56                   	push   esi
c000181c:	53                   	push   ebx
c000181d:	83 ec 0c             	sub    esp,0xc
c0001820:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001824:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001828:	83 fa 08             	cmp    edx,0x8
c000182b:	77 10                	ja     c000183d <dlmemalign+0x24>
c000182d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001831:	83 c4 0c             	add    esp,0xc
c0001834:	5b                   	pop    ebx
c0001835:	5e                   	pop    esi
c0001836:	5f                   	pop    edi
c0001837:	5d                   	pop    ebp
c0001838:	e9 ea f8 ff ff       	jmp    c0001127 <dlmalloc>
c000183d:	bf 10 00 00 00       	mov    edi,0x10
c0001842:	83 fa 0f             	cmp    edx,0xf
c0001845:	76 13                	jbe    c000185a <dlmemalign+0x41>
c0001847:	8d 4a ff             	lea    ecx,[edx-0x1]
c000184a:	85 d1                	test   ecx,edx
c000184c:	75 04                	jne    c0001852 <dlmemalign+0x39>
c000184e:	89 d7                	mov    edi,edx
c0001850:	eb 08                	jmp    c000185a <dlmemalign+0x41>
c0001852:	39 d7                	cmp    edi,edx
c0001854:	73 04                	jae    c000185a <dlmemalign+0x41>
c0001856:	01 ff                	add    edi,edi
c0001858:	eb f8                	jmp    c0001852 <dlmemalign+0x39>
c000185a:	83 f8 df             	cmp    eax,0xffffffdf
c000185d:	76 07                	jbe    c0001866 <dlmemalign+0x4d>
c000185f:	31 c0                	xor    eax,eax
c0001861:	e9 ce 00 00 00       	jmp    c0001934 <dlmemalign+0x11b>
c0001866:	83 c0 0b             	add    eax,0xb
c0001869:	bd 10 00 00 00       	mov    ebp,0x10
c000186e:	83 f8 0f             	cmp    eax,0xf
c0001871:	76 05                	jbe    c0001878 <dlmemalign+0x5f>
c0001873:	83 e0 f8             	and    eax,0xfffffff8
c0001876:	89 c5                	mov    ebp,eax
c0001878:	83 ec 0c             	sub    esp,0xc
c000187b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000187f:	50                   	push   eax
c0001880:	e8 a2 f8 ff ff       	call   c0001127 <dlmalloc>
c0001885:	83 c4 10             	add    esp,0x10
c0001888:	89 c1                	mov    ecx,eax
c000188a:	85 c0                	test   eax,eax
c000188c:	74 d1                	je     c000185f <dlmemalign+0x46>
c000188e:	31 d2                	xor    edx,edx
c0001890:	8d 70 f8             	lea    esi,[eax-0x8]
c0001893:	f7 f7                	div    edi
c0001895:	85 d2                	test   edx,edx
c0001897:	74 62                	je     c00018fb <dlmemalign+0xe2>
c0001899:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000189d:	89 f8                	mov    eax,edi
c000189f:	f7 d8                	neg    eax
c00018a1:	21 c3                	and    ebx,eax
c00018a3:	83 eb 08             	sub    ebx,0x8
c00018a6:	89 d8                	mov    eax,ebx
c00018a8:	29 f0                	sub    eax,esi
c00018aa:	83 f8 0f             	cmp    eax,0xf
c00018ad:	77 02                	ja     c00018b1 <dlmemalign+0x98>
c00018af:	01 fb                	add    ebx,edi
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	29 f0                	sub    eax,esi
c00018b5:	89 c6                	mov    esi,eax
c00018b7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ba:	89 c2                	mov    edx,eax
c00018bc:	83 e2 fc             	and    edx,0xfffffffc
c00018bf:	29 f2                	sub    edx,esi
c00018c1:	a8 02                	test   al,0x2
c00018c3:	74 10                	je     c00018d5 <dlmemalign+0xbc>
c00018c5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c8:	83 ca 02             	or     edx,0x2
c00018cb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018ce:	89 33                	mov    DWORD PTR [ebx],esi
c00018d0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018d3:	eb 5f                	jmp    c0001934 <dlmemalign+0x11b>
c00018d5:	83 ec 0c             	sub    esp,0xc
c00018d8:	89 d0                	mov    eax,edx
c00018da:	83 c8 01             	or     eax,0x1
c00018dd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018e0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018e5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e8:	83 e0 01             	and    eax,0x1
c00018eb:	09 f0                	or     eax,esi
c00018ed:	89 de                	mov    esi,ebx
c00018ef:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018f2:	51                   	push   ecx
c00018f3:	e8 d4 f4 ff ff       	call   c0000dcc <dlfree>
c00018f8:	83 c4 10             	add    esp,0x10
c00018fb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018fe:	a8 02                	test   al,0x2
c0001900:	75 2f                	jne    c0001931 <dlmemalign+0x118>
c0001902:	83 e0 fc             	and    eax,0xfffffffc
c0001905:	8d 55 10             	lea    edx,[ebp+0x10]
c0001908:	39 c2                	cmp    edx,eax
c000190a:	73 25                	jae    c0001931 <dlmemalign+0x118>
c000190c:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	29 e8                	sub    eax,ebp
c0001914:	83 c2 08             	add    edx,0x8
c0001917:	83 c8 01             	or     eax,0x1
c000191a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000191d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001920:	83 e0 01             	and    eax,0x1
c0001923:	09 c5                	or     ebp,eax
c0001925:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001928:	52                   	push   edx
c0001929:	e8 9e f4 ff ff       	call   c0000dcc <dlfree>
c000192e:	83 c4 10             	add    esp,0x10
c0001931:	8d 46 08             	lea    eax,[esi+0x8]
c0001934:	83 c4 0c             	add    esp,0xc
c0001937:	5b                   	pop    ebx
c0001938:	5e                   	pop    esi
c0001939:	5f                   	pop    edi
c000193a:	5d                   	pop    ebp
c000193b:	c3                   	ret    

c000193c <dlcalloc>:
c000193c:	53                   	push   ebx
c000193d:	83 ec 14             	sub    esp,0x14
c0001940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001944:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001949:	50                   	push   eax
c000194a:	e8 d8 f7 ff ff       	call   c0001127 <dlmalloc>
c000194f:	83 c4 10             	add    esp,0x10
c0001952:	89 c3                	mov    ebx,eax
c0001954:	85 c0                	test   eax,eax
c0001956:	74 77                	je     c00019cf <dlcalloc+0x93>
c0001958:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000195b:	89 d0                	mov    eax,edx
c000195d:	83 e0 fc             	and    eax,0xfffffffc
c0001960:	80 e2 02             	and    dl,0x2
c0001963:	75 5a                	jne    c00019bf <dlcalloc+0x83>
c0001965:	83 e8 04             	sub    eax,0x4
c0001968:	83 f8 27             	cmp    eax,0x27
c000196b:	76 03                	jbe    c0001970 <dlcalloc+0x34>
c000196d:	51                   	push   ecx
c000196e:	eb 53                	jmp    c00019c3 <dlcalloc+0x87>
c0001970:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001976:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000197d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001984:	83 f8 13             	cmp    eax,0x13
c0001987:	76 46                	jbe    c00019cf <dlcalloc+0x93>
c0001989:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001990:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001997:	83 f8 1b             	cmp    eax,0x1b
c000199a:	76 33                	jbe    c00019cf <dlcalloc+0x93>
c000199c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019a3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019aa:	83 f8 23             	cmp    eax,0x23
c00019ad:	76 20                	jbe    c00019cf <dlcalloc+0x93>
c00019af:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019b6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019bd:	eb 10                	jmp    c00019cf <dlcalloc+0x93>
c00019bf:	83 e8 08             	sub    eax,0x8
c00019c2:	52                   	push   edx
c00019c3:	50                   	push   eax
c00019c4:	6a 00                	push   0x0
c00019c6:	53                   	push   ebx
c00019c7:	e8 bc ed ff ff       	call   c0000788 <memset>
c00019cc:	83 c4 10             	add    esp,0x10
c00019cf:	89 d8                	mov    eax,ebx
c00019d1:	83 c4 08             	add    esp,0x8
c00019d4:	5b                   	pop    ebx
c00019d5:	c3                   	ret    

c00019d6 <dlcfree>:
c00019d6:	e9 f1 f3 ff ff       	jmp    c0000dcc <dlfree>

c00019db <dlindependent_calloc>:
c00019db:	83 ec 28             	sub    esp,0x28
c00019de:	b9 03 00 00 00       	mov    ecx,0x3
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019f7:	e8 b9 fa ff ff       	call   c00014b5 <iALLOc>
c00019fc:	83 c4 2c             	add    esp,0x2c
c00019ff:	c3                   	ret    

c0001a00 <dlindependent_comalloc>:
c0001a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a08:	31 c9                	xor    ecx,ecx
c0001a0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a12:	e9 9e fa ff ff       	jmp    c00014b5 <iALLOc>

c0001a17 <dlvalloc>:
c0001a17:	83 ec 0c             	sub    esp,0xc
c0001a1a:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c0001a21:	75 0a                	jne    c0001a2d <dlvalloc+0x16>
c0001a23:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a28:	e8 b8 f2 ff ff       	call   c0000ce5 <malloc_consolidate>
c0001a2d:	50                   	push   eax
c0001a2e:	50                   	push   eax
c0001a2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a33:	ff 35 7c ed 02 c0    	push   DWORD PTR ds:0xc002ed7c
c0001a39:	e8 db fd ff ff       	call   c0001819 <dlmemalign>
c0001a3e:	83 c4 1c             	add    esp,0x1c
c0001a41:	c3                   	ret    

c0001a42 <dlpvalloc>:
c0001a42:	83 ec 0c             	sub    esp,0xc
c0001a45:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c0001a4c:	75 0a                	jne    c0001a58 <dlpvalloc+0x16>
c0001a4e:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a53:	e8 8d f2 ff ff       	call   c0000ce5 <malloc_consolidate>
c0001a58:	a1 7c ed 02 c0       	mov    eax,ds:0xc002ed7c
c0001a5d:	89 c1                	mov    ecx,eax
c0001a5f:	52                   	push   edx
c0001a60:	f7 d9                	neg    ecx
c0001a62:	52                   	push   edx
c0001a63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a67:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a6b:	21 ca                	and    edx,ecx
c0001a6d:	52                   	push   edx
c0001a6e:	50                   	push   eax
c0001a6f:	e8 a5 fd ff ff       	call   c0001819 <dlmemalign>
c0001a74:	83 c4 1c             	add    esp,0x1c
c0001a77:	c3                   	ret    

c0001a78 <dlmalloc_trim>:
c0001a78:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a7d:	e8 63 f2 ff ff       	call   c0000ce5 <malloc_consolidate>
c0001a82:	31 c0                	xor    eax,eax
c0001a84:	c3                   	ret    

c0001a85 <dlmalloc_usable_size>:
c0001a85:	53                   	push   ebx
c0001a86:	31 c0                	xor    eax,eax
c0001a88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a8c:	85 c9                	test   ecx,ecx
c0001a8e:	74 24                	je     c0001ab4 <dlmalloc_usable_size+0x2f>
c0001a90:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a93:	f6 c2 02             	test   dl,0x2
c0001a96:	74 08                	je     c0001aa0 <dlmalloc_usable_size+0x1b>
c0001a98:	83 e2 fc             	and    edx,0xfffffffc
c0001a9b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a9e:	eb 14                	jmp    c0001ab4 <dlmalloc_usable_size+0x2f>
c0001aa0:	89 d3                	mov    ebx,edx
c0001aa2:	31 c0                	xor    eax,eax
c0001aa4:	83 e3 fe             	and    ebx,0xfffffffe
c0001aa7:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aac:	74 06                	je     c0001ab4 <dlmalloc_usable_size+0x2f>
c0001aae:	83 e2 fc             	and    edx,0xfffffffc
c0001ab1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ab4:	5b                   	pop    ebx
c0001ab5:	c3                   	ret    

c0001ab6 <dlmallinfo>:
c0001ab6:	55                   	push   ebp
c0001ab7:	57                   	push   edi
c0001ab8:	56                   	push   esi
c0001ab9:	53                   	push   ebx
c0001aba:	83 ec 08             	sub    esp,0x8
c0001abd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ac1:	83 3d 4c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea4c,0x0
c0001ac8:	75 0a                	jne    c0001ad4 <dlmallinfo+0x1e>
c0001aca:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001acf:	e8 11 f2 ff ff       	call   c0000ce5 <malloc_consolidate>
c0001ad4:	a1 4c ea 02 c0       	mov    eax,ds:0xc002ea4c
c0001ad9:	31 ed                	xor    ebp,ebp
c0001adb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ade:	31 c9                	xor    ecx,ecx
c0001ae0:	83 e0 fc             	and    eax,0xfffffffc
c0001ae3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ae7:	31 c0                	xor    eax,eax
c0001ae9:	8b 14 85 24 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15dc]
c0001af0:	85 d2                	test   edx,edx
c0001af2:	74 0e                	je     c0001b02 <dlmallinfo+0x4c>
c0001af4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001af7:	45                   	inc    ebp
c0001af8:	83 e6 fc             	and    esi,0xfffffffc
c0001afb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001afe:	01 f1                	add    ecx,esi
c0001b00:	eb ee                	jmp    c0001af0 <dlmallinfo+0x3a>
c0001b02:	40                   	inc    eax
c0001b03:	83 f8 0a             	cmp    eax,0xa
c0001b06:	75 e1                	jne    c0001ae9 <dlmallinfo+0x33>
c0001b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b0c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b13:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b16:	b8 54 ea 02 c0       	mov    eax,0xc002ea54
c0001b1b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b1e:	39 f0                	cmp    eax,esi
c0001b20:	74 10                	je     c0001b32 <dlmallinfo+0x7c>
c0001b22:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b25:	ff 04 24             	inc    DWORD PTR [esp]
c0001b28:	83 e7 fc             	and    edi,0xfffffffc
c0001b2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b2e:	01 fa                	add    edx,edi
c0001b30:	eb ec                	jmp    c0001b1e <dlmallinfo+0x68>
c0001b32:	83 c0 08             	add    eax,0x8
c0001b35:	3d 4c ed 02 c0       	cmp    eax,0xc002ed4c
c0001b3a:	75 df                	jne    c0001b1b <dlmallinfo+0x65>
c0001b3c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b3f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b42:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b45:	a1 88 ed 02 c0       	mov    eax,ds:0xc002ed88
c0001b4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b4d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b4f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b52:	8b 35 70 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed70
c0001b58:	29 d0                	sub    eax,edx
c0001b5a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b5d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b60:	8b 35 84 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed84
c0001b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b6a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b6d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b70:	8b 35 94 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed94
c0001b76:	89 d8                	mov    eax,ebx
c0001b78:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b7b:	83 c4 08             	add    esp,0x8
c0001b7e:	5b                   	pop    ebx
c0001b7f:	5e                   	pop    esi
c0001b80:	5f                   	pop    edi
c0001b81:	5d                   	pop    ebp
c0001b82:	c2 04 00             	ret    0x4

c0001b85 <dlmalloc_stats>:
c0001b85:	83 ec 30             	sub    esp,0x30
c0001b88:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b8c:	50                   	push   eax
c0001b8d:	e8 24 ff ff ff       	call   c0001ab6 <dlmallinfo>
c0001b92:	83 c4 30             	add    esp,0x30
c0001b95:	c3                   	ret    

c0001b96 <dlmallopt>:
c0001b96:	56                   	push   esi
c0001b97:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001b9c:	53                   	push   ebx
c0001b9d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ba5:	e8 3b f1 ff ff       	call   c0000ce5 <malloc_consolidate>
c0001baa:	8d 46 04             	lea    eax,[esi+0x4]
c0001bad:	83 f8 05             	cmp    eax,0x5
c0001bb0:	77 67                	ja     c0001c19 <dlmallopt+0x83>
c0001bb2:	ff 24 85 04 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63fc]
c0001bb9:	83 fb 50             	cmp    ebx,0x50
c0001bbc:	77 5b                	ja     c0001c19 <dlmallopt+0x83>
c0001bbe:	ba 08 00 00 00       	mov    edx,0x8
c0001bc3:	85 db                	test   ebx,ebx
c0001bc5:	74 12                	je     c0001bd9 <dlmallopt+0x43>
c0001bc7:	83 c3 0b             	add    ebx,0xb
c0001bca:	ba 10 00 00 00       	mov    edx,0x10
c0001bcf:	83 fb 0f             	cmp    ebx,0xf
c0001bd2:	76 05                	jbe    c0001bd9 <dlmallopt+0x43>
c0001bd4:	89 da                	mov    edx,ebx
c0001bd6:	83 e2 f8             	and    edx,0xfffffff8
c0001bd9:	a1 20 ea 02 c0       	mov    eax,ds:0xc002ea20
c0001bde:	83 e0 03             	and    eax,0x3
c0001be1:	09 d0                	or     eax,edx
c0001be3:	a3 20 ea 02 c0       	mov    ds:0xc002ea20,eax
c0001be8:	eb 31                	jmp    c0001c1b <dlmallopt+0x85>
c0001bea:	89 1d 64 ed 02 c0    	mov    DWORD PTR ds:0xc002ed64,ebx
c0001bf0:	eb 06                	jmp    c0001bf8 <dlmallopt+0x62>
c0001bf2:	89 1d 68 ed 02 c0    	mov    DWORD PTR ds:0xc002ed68,ebx
c0001bf8:	be 01 00 00 00       	mov    esi,0x1
c0001bfd:	eb 1c                	jmp    c0001c1b <dlmallopt+0x85>
c0001bff:	89 1d 6c ed 02 c0    	mov    DWORD PTR ds:0xc002ed6c,ebx
c0001c05:	eb f1                	jmp    c0001bf8 <dlmallopt+0x62>
c0001c07:	31 f6                	xor    esi,esi
c0001c09:	85 db                	test   ebx,ebx
c0001c0b:	75 0e                	jne    c0001c1b <dlmallopt+0x85>
c0001c0d:	c7 05 74 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed74,0x0
c0001c17:	eb df                	jmp    c0001bf8 <dlmallopt+0x62>
c0001c19:	31 f6                	xor    esi,esi
c0001c1b:	89 f0                	mov    eax,esi
c0001c1d:	5b                   	pop    ebx
c0001c1e:	5e                   	pop    esi
c0001c1f:	c3                   	ret    

c0001c20 <disk_status>:
c0001c20:	31 c0                	xor    eax,eax
c0001c22:	c3                   	ret    

c0001c23 <disk_initialize>:
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	c3                   	ret    

c0001c26 <disk_read>:
c0001c26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c2b:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c37:	e9 9e f8 01 00       	jmp    c00214da <fatWrapperReadDisk>

c0001c3c <disk_write>:
c0001c3c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c41:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4d:	e9 cf f8 01 00       	jmp    c0021521 <fatWrapperWriteDisk>

c0001c52 <disk_ioctl>:
c0001c52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c5b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c60:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c6c:	e9 f7 f8 01 00       	jmp    c0021568 <fatWrapperIoctl>

c0001c71 <ld_word>:
c0001c71:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c78:	c1 e2 08             	shl    edx,0x8
c0001c7b:	09 d0                	or     eax,edx
c0001c7d:	c3                   	ret    

c0001c7e <ld_dword>:
c0001c7e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c82:	89 d1                	mov    ecx,edx
c0001c84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c88:	c1 e1 08             	shl    ecx,0x8
c0001c8b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c8e:	09 ca                	or     edx,ecx
c0001c90:	c1 e2 08             	shl    edx,0x8
c0001c93:	09 d0                	or     eax,edx
c0001c95:	c3                   	ret    

c0001c96 <ld_qword>:
c0001c96:	57                   	push   edi
c0001c97:	56                   	push   esi
c0001c98:	53                   	push   ebx
c0001c99:	31 db                	xor    ebx,ebx
c0001c9b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c9e:	89 df                	mov    edi,ebx
c0001ca0:	89 ce                	mov    esi,ecx
c0001ca2:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ca6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001caa:	c1 e6 08             	shl    esi,0x8
c0001cad:	09 f2                	or     edx,esi
c0001caf:	89 d6                	mov    esi,edx
c0001cb1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cb5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb9:	c1 e6 08             	shl    esi,0x8
c0001cbc:	09 f2                	or     edx,esi
c0001cbe:	89 d6                	mov    esi,edx
c0001cc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ccb:	c1 e6 08             	shl    esi,0x8
c0001cce:	89 fb                	mov    ebx,edi
c0001cd0:	09 f2                	or     edx,esi
c0001cd2:	89 d1                	mov    ecx,edx
c0001cd4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd8:	c1 e1 08             	shl    ecx,0x8
c0001cdb:	89 da                	mov    edx,ebx
c0001cdd:	09 c8                	or     eax,ecx
c0001cdf:	5b                   	pop    ebx
c0001ce0:	5e                   	pop    esi
c0001ce1:	5f                   	pop    edi
c0001ce2:	c3                   	ret    

c0001ce3 <st_word>:
c0001ce3:	66 89 10             	mov    WORD PTR [eax],dx
c0001ce6:	c3                   	ret    

c0001ce7 <st_dword>:
c0001ce7:	89 10                	mov    DWORD PTR [eax],edx
c0001ce9:	c3                   	ret    

c0001cea <st_qword>:
c0001cea:	89 10                	mov    DWORD PTR [eax],edx
c0001cec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cef:	c3                   	ret    

c0001cf0 <mem_cpy>:
c0001cf0:	85 c9                	test   ecx,ecx
c0001cf2:	74 10                	je     c0001d04 <mem_cpy+0x14>
c0001cf4:	57                   	push   edi
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	56                   	push   esi
c0001cf8:	89 c7                	mov    edi,eax
c0001cfa:	89 d6                	mov    esi,edx
c0001cfc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cfd:	39 f9                	cmp    ecx,edi
c0001cff:	75 fb                	jne    c0001cfc <mem_cpy+0xc>
c0001d01:	5e                   	pop    esi
c0001d02:	5f                   	pop    edi
c0001d03:	c3                   	ret    
c0001d04:	c3                   	ret    

c0001d05 <mem_set>:
c0001d05:	01 c1                	add    ecx,eax
c0001d07:	40                   	inc    eax
c0001d08:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d0b:	39 c8                	cmp    eax,ecx
c0001d0d:	75 f8                	jne    c0001d07 <mem_set+0x2>
c0001d0f:	c3                   	ret    

c0001d10 <mem_cmp>:
c0001d10:	57                   	push   edi
c0001d11:	56                   	push   esi
c0001d12:	89 c6                	mov    esi,eax
c0001d14:	53                   	push   ebx
c0001d15:	46                   	inc    esi
c0001d16:	42                   	inc    edx
c0001d17:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d1b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d1f:	29 fb                	sub    ebx,edi
c0001d21:	89 cf                	mov    edi,ecx
c0001d23:	29 f7                	sub    edi,esi
c0001d25:	01 c7                	add    edi,eax
c0001d27:	74 04                	je     c0001d2d <mem_cmp+0x1d>
c0001d29:	85 db                	test   ebx,ebx
c0001d2b:	74 e8                	je     c0001d15 <mem_cmp+0x5>
c0001d2d:	89 d8                	mov    eax,ebx
c0001d2f:	5b                   	pop    ebx
c0001d30:	5e                   	pop    esi
c0001d31:	5f                   	pop    edi
c0001d32:	c3                   	ret    

c0001d33 <chk_chr>:
c0001d33:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d36:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d39:	74 07                	je     c0001d42 <chk_chr+0xf>
c0001d3b:	39 d1                	cmp    ecx,edx
c0001d3d:	74 03                	je     c0001d42 <chk_chr+0xf>
c0001d3f:	40                   	inc    eax
c0001d40:	eb f1                	jmp    c0001d33 <chk_chr>
c0001d42:	89 c8                	mov    eax,ecx
c0001d44:	c3                   	ret    

c0001d45 <dbc_1st>:
c0001d45:	31 c0                	xor    eax,eax
c0001d47:	c3                   	ret    

c0001d48 <dbc_2nd>:
c0001d48:	31 c0                	xor    eax,eax
c0001d4a:	c3                   	ret    

c0001d4b <tchar2uni>:
c0001d4b:	57                   	push   edi
c0001d4c:	89 c7                	mov    edi,eax
c0001d4e:	56                   	push   esi
c0001d4f:	53                   	push   ebx
c0001d50:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d52:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d54:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d57:	84 c9                	test   cl,cl
c0001d59:	78 0a                	js     c0001d65 <tchar2uni+0x1a>
c0001d5b:	0f b6 d1             	movzx  edx,cl
c0001d5e:	89 f3                	mov    ebx,esi
c0001d60:	e9 9f 00 00 00       	jmp    c0001e04 <tchar2uni+0xb9>
c0001d65:	88 ca                	mov    dl,cl
c0001d67:	83 e2 e0             	and    edx,0xffffffe0
c0001d6a:	80 fa c0             	cmp    dl,0xc0
c0001d6d:	75 0c                	jne    c0001d7b <tchar2uni+0x30>
c0001d6f:	89 ca                	mov    edx,ecx
c0001d71:	b9 01 00 00 00       	mov    ecx,0x1
c0001d76:	83 e2 1f             	and    edx,0x1f
c0001d79:	eb 2e                	jmp    c0001da9 <tchar2uni+0x5e>
c0001d7b:	88 ca                	mov    dl,cl
c0001d7d:	83 e2 f0             	and    edx,0xfffffff0
c0001d80:	80 fa e0             	cmp    dl,0xe0
c0001d83:	75 0c                	jne    c0001d91 <tchar2uni+0x46>
c0001d85:	89 ca                	mov    edx,ecx
c0001d87:	b9 02 00 00 00       	mov    ecx,0x2
c0001d8c:	83 e2 0f             	and    edx,0xf
c0001d8f:	eb 18                	jmp    c0001da9 <tchar2uni+0x5e>
c0001d91:	88 ca                	mov    dl,cl
c0001d93:	83 e2 f8             	and    edx,0xfffffff8
c0001d96:	88 d0                	mov    al,dl
c0001d98:	83 ca ff             	or     edx,0xffffffff
c0001d9b:	3c f0                	cmp    al,0xf0
c0001d9d:	75 6c                	jne    c0001e0b <tchar2uni+0xc0>
c0001d9f:	89 ca                	mov    edx,ecx
c0001da1:	b9 03 00 00 00       	mov    ecx,0x3
c0001da6:	83 e2 07             	and    edx,0x7
c0001da9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001dad:	46                   	inc    esi
c0001dae:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001db1:	88 c8                	mov    al,cl
c0001db3:	83 e0 c0             	and    eax,0xffffffc0
c0001db6:	3c 80                	cmp    al,0x80
c0001db8:	75 4e                	jne    c0001e08 <tchar2uni+0xbd>
c0001dba:	c1 e2 06             	shl    edx,0x6
c0001dbd:	83 e1 3f             	and    ecx,0x3f
c0001dc0:	09 ca                	or     edx,ecx
c0001dc2:	39 de                	cmp    esi,ebx
c0001dc4:	75 e7                	jne    c0001dad <tchar2uni+0x62>
c0001dc6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dcf:	77 37                	ja     c0001e08 <tchar2uni+0xbd>
c0001dd1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dd7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ddd:	76 29                	jbe    c0001e08 <tchar2uni+0xbd>
c0001ddf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001de5:	76 1d                	jbe    c0001e04 <tchar2uni+0xb9>
c0001de7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ded:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001df3:	c1 e1 06             	shl    ecx,0x6
c0001df6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dfc:	09 ca                	or     edx,ecx
c0001dfe:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e04:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e06:	eb 03                	jmp    c0001e0b <tchar2uni+0xc0>
c0001e08:	83 ca ff             	or     edx,0xffffffff
c0001e0b:	5b                   	pop    ebx
c0001e0c:	89 d0                	mov    eax,edx
c0001e0e:	5e                   	pop    esi
c0001e0f:	5f                   	pop    edi
c0001e10:	c3                   	ret    

c0001e11 <put_utf>:
c0001e11:	53                   	push   ebx
c0001e12:	83 f8 7f             	cmp    eax,0x7f
c0001e15:	89 c3                	mov    ebx,eax
c0001e17:	b0 00                	mov    al,0x0
c0001e19:	77 11                	ja     c0001e2c <put_utf+0x1b>
c0001e1b:	85 c9                	test   ecx,ecx
c0001e1d:	0f 84 e5 00 00 00    	je     c0001f08 <put_utf+0xf7>
c0001e23:	88 1a                	mov    BYTE PTR [edx],bl
c0001e25:	b0 01                	mov    al,0x1
c0001e27:	e9 dc 00 00 00       	jmp    c0001f08 <put_utf+0xf7>
c0001e2c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e32:	77 23                	ja     c0001e57 <put_utf+0x46>
c0001e34:	83 f9 01             	cmp    ecx,0x1
c0001e37:	0f 86 cb 00 00 00    	jbe    c0001f08 <put_utf+0xf7>
c0001e3d:	89 d8                	mov    eax,ebx
c0001e3f:	83 e3 3f             	and    ebx,0x3f
c0001e42:	c1 e8 06             	shr    eax,0x6
c0001e45:	83 cb 80             	or     ebx,0xffffff80
c0001e48:	83 c8 c0             	or     eax,0xffffffc0
c0001e4b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e4e:	88 02                	mov    BYTE PTR [edx],al
c0001e50:	b0 02                	mov    al,0x2
c0001e52:	e9 b1 00 00 00       	jmp    c0001f08 <put_utf+0xf7>
c0001e57:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e5d:	77 40                	ja     c0001e9f <put_utf+0x8e>
c0001e5f:	83 f9 02             	cmp    ecx,0x2
c0001e62:	0f 86 a0 00 00 00    	jbe    c0001f08 <put_utf+0xf7>
c0001e68:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e6e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e74:	0f 86 8e 00 00 00    	jbe    c0001f08 <put_utf+0xf7>
c0001e7a:	89 d8                	mov    eax,ebx
c0001e7c:	c1 e8 0c             	shr    eax,0xc
c0001e7f:	83 c8 e0             	or     eax,0xffffffe0
c0001e82:	88 02                	mov    BYTE PTR [edx],al
c0001e84:	89 d8                	mov    eax,ebx
c0001e86:	83 e3 3f             	and    ebx,0x3f
c0001e89:	c1 e8 06             	shr    eax,0x6
c0001e8c:	83 cb 80             	or     ebx,0xffffff80
c0001e8f:	83 e0 3f             	and    eax,0x3f
c0001e92:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e95:	83 c8 80             	or     eax,0xffffff80
c0001e98:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e9b:	b0 03                	mov    al,0x3
c0001e9d:	eb 69                	jmp    c0001f08 <put_utf+0xf7>
c0001e9f:	83 f9 03             	cmp    ecx,0x3
c0001ea2:	76 64                	jbe    c0001f08 <put_utf+0xf7>
c0001ea4:	89 d9                	mov    ecx,ebx
c0001ea6:	0f b7 c3             	movzx  eax,bx
c0001ea9:	66 31 c9             	xor    cx,cx
c0001eac:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eb2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb8:	c1 e9 06             	shr    ecx,0x6
c0001ebb:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ec1:	77 43                	ja     c0001f06 <put_utf+0xf5>
c0001ec3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec9:	77 3b                	ja     c0001f06 <put_utf+0xf5>
c0001ecb:	09 cb                	or     ebx,ecx
c0001ecd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ed3:	89 d8                	mov    eax,ebx
c0001ed5:	c1 e8 12             	shr    eax,0x12
c0001ed8:	83 c8 f0             	or     eax,0xfffffff0
c0001edb:	88 02                	mov    BYTE PTR [edx],al
c0001edd:	89 d8                	mov    eax,ebx
c0001edf:	c1 e8 0c             	shr    eax,0xc
c0001ee2:	83 e0 3f             	and    eax,0x3f
c0001ee5:	83 c8 80             	or     eax,0xffffff80
c0001ee8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eeb:	89 d8                	mov    eax,ebx
c0001eed:	83 e3 3f             	and    ebx,0x3f
c0001ef0:	c1 e8 06             	shr    eax,0x6
c0001ef3:	83 cb 80             	or     ebx,0xffffff80
c0001ef6:	83 e0 3f             	and    eax,0x3f
c0001ef9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001efc:	83 c8 80             	or     eax,0xffffff80
c0001eff:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f02:	b0 04                	mov    al,0x4
c0001f04:	eb 02                	jmp    c0001f08 <put_utf+0xf7>
c0001f06:	31 c0                	xor    eax,eax
c0001f08:	5b                   	pop    ebx
c0001f09:	c3                   	ret    

c0001f0a <clst2sect>:
c0001f0a:	89 c1                	mov    ecx,eax
c0001f0c:	83 ea 02             	sub    edx,0x2
c0001f0f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f12:	83 e8 02             	sub    eax,0x2
c0001f15:	39 d0                	cmp    eax,edx
c0001f17:	76 0d                	jbe    c0001f26 <clst2sect+0x1c>
c0001f19:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f1d:	f7 e2                	mul    edx
c0001f1f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f22:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f25:	c3                   	ret    
c0001f26:	31 c0                	xor    eax,eax
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	c3                   	ret    

c0001f2b <clmt_clust>:
c0001f2b:	57                   	push   edi
c0001f2c:	89 cf                	mov    edi,ecx
c0001f2e:	56                   	push   esi
c0001f2f:	89 d6                	mov    esi,edx
c0001f31:	53                   	push   ebx
c0001f32:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f36:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f39:	89 f2                	mov    edx,esi
c0001f3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f3d:	c1 ef 09             	shr    edi,0x9
c0001f40:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f44:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f47:	89 f9                	mov    ecx,edi
c0001f49:	31 ff                	xor    edi,edi
c0001f4b:	57                   	push   edi
c0001f4c:	56                   	push   esi
c0001f4d:	51                   	push   ecx
c0001f4e:	52                   	push   edx
c0001f4f:	e8 50 52 02 00       	call   c00271a4 <__udivdi3>
c0001f54:	83 c4 10             	add    esp,0x10
c0001f57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f59:	85 d2                	test   edx,edx
c0001f5b:	74 10                	je     c0001f6d <clmt_clust+0x42>
c0001f5d:	39 d0                	cmp    eax,edx
c0001f5f:	72 07                	jb     c0001f68 <clmt_clust+0x3d>
c0001f61:	29 d0                	sub    eax,edx
c0001f63:	83 c3 08             	add    ebx,0x8
c0001f66:	eb ef                	jmp    c0001f57 <clmt_clust+0x2c>
c0001f68:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f6b:	89 c2                	mov    edx,eax
c0001f6d:	5b                   	pop    ebx
c0001f6e:	89 d0                	mov    eax,edx
c0001f70:	5e                   	pop    esi
c0001f71:	5f                   	pop    edi
c0001f72:	c3                   	ret    

c0001f73 <pick_lfn>:
c0001f73:	55                   	push   ebp
c0001f74:	57                   	push   edi
c0001f75:	56                   	push   esi
c0001f76:	89 d6                	mov    esi,edx
c0001f78:	53                   	push   ebx
c0001f79:	89 c3                	mov    ebx,eax
c0001f7b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7e:	e8 ee fc ff ff       	call   c0001c71 <ld_word>
c0001f83:	66 85 c0             	test   ax,ax
c0001f86:	74 04                	je     c0001f8c <pick_lfn+0x19>
c0001f88:	31 c0                	xor    eax,eax
c0001f8a:	eb 5c                	jmp    c0001fe8 <pick_lfn+0x75>
c0001f8c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f94:	83 e1 bf             	and    ecx,0xffffffbf
c0001f97:	31 ff                	xor    edi,edi
c0001f99:	49                   	dec    ecx
c0001f9a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9d:	0f b6 87 20 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62e0]
c0001fa4:	01 f0                	add    eax,esi
c0001fa6:	e8 c6 fc ff ff       	call   c0001c71 <ld_word>
c0001fab:	66 85 ed             	test   bp,bp
c0001fae:	74 11                	je     c0001fc1 <pick_lfn+0x4e>
c0001fb0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb6:	77 d0                	ja     c0001f88 <pick_lfn+0x15>
c0001fb8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbc:	89 c5                	mov    ebp,eax
c0001fbe:	41                   	inc    ecx
c0001fbf:	eb 04                	jmp    c0001fc5 <pick_lfn+0x52>
c0001fc1:	66 40                	inc    ax
c0001fc3:	75 c3                	jne    c0001f88 <pick_lfn+0x15>
c0001fc5:	47                   	inc    edi
c0001fc6:	83 ff 0d             	cmp    edi,0xd
c0001fc9:	75 d2                	jne    c0001f9d <pick_lfn+0x2a>
c0001fcb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fce:	74 13                	je     c0001fe3 <pick_lfn+0x70>
c0001fd0:	66 85 ed             	test   bp,bp
c0001fd3:	74 0e                	je     c0001fe3 <pick_lfn+0x70>
c0001fd5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fdb:	77 ab                	ja     c0001f88 <pick_lfn+0x15>
c0001fdd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe3:	b8 01 00 00 00       	mov    eax,0x1
c0001fe8:	5b                   	pop    ebx
c0001fe9:	5e                   	pop    esi
c0001fea:	5f                   	pop    edi
c0001feb:	5d                   	pop    ebp
c0001fec:	c3                   	ret    

c0001fed <put_lfn>:
c0001fed:	55                   	push   ebp
c0001fee:	31 ed                	xor    ebp,ebp
c0001ff0:	57                   	push   edi
c0001ff1:	89 d7                	mov    edi,edx
c0001ff3:	56                   	push   esi
c0001ff4:	31 f6                	xor    esi,esi
c0001ff6:	53                   	push   ebx
c0001ff7:	83 ec 08             	sub    esp,0x8
c0001ffa:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffd:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002005:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200b:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002011:	31 d2                	xor    edx,edx
c0002013:	e8 cb fc ff ff       	call   c0001ce3 <st_word>
c0002018:	0f b6 d9             	movzx  ebx,cl
c000201b:	4b                   	dec    ebx
c000201c:	6b db 0d             	imul   ebx,ebx,0xd
c000201f:	66 83 fe ff          	cmp    si,0xffff
c0002023:	74 08                	je     c000202d <put_lfn+0x40>
c0002025:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002028:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202c:	43                   	inc    ebx
c000202d:	0f b6 85 20 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62e0]
c0002034:	0f b7 d6             	movzx  edx,si
c0002037:	01 f8                	add    eax,edi
c0002039:	e8 a5 fc ff ff       	call   c0001ce3 <st_word>
c000203e:	66 85 f6             	test   si,si
c0002041:	75 03                	jne    c0002046 <put_lfn+0x59>
c0002043:	83 ce ff             	or     esi,0xffffffff
c0002046:	45                   	inc    ebp
c0002047:	83 fd 0d             	cmp    ebp,0xd
c000204a:	75 d3                	jne    c000201f <put_lfn+0x32>
c000204c:	66 46                	inc    si
c000204e:	74 0a                	je     c000205a <put_lfn+0x6d>
c0002050:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002053:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002058:	75 09                	jne    c0002063 <put_lfn+0x76>
c000205a:	88 c8                	mov    al,cl
c000205c:	83 c8 40             	or     eax,0x40
c000205f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002063:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002067:	88 07                	mov    BYTE PTR [edi],al
c0002069:	83 c4 08             	add    esp,0x8
c000206c:	5b                   	pop    ebx
c000206d:	5e                   	pop    esi
c000206e:	5f                   	pop    edi
c000206f:	5d                   	pop    ebp
c0002070:	c3                   	ret    

c0002071 <gen_numname>:
c0002071:	57                   	push   edi
c0002072:	89 cf                	mov    edi,ecx
c0002074:	56                   	push   esi
c0002075:	b9 0b 00 00 00       	mov    ecx,0xb
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 10             	sub    esp,0x10
c0002080:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002084:	e8 67 fc ff ff       	call   c0001cf0 <mem_cpy>
c0002089:	83 fb 05             	cmp    ebx,0x5
c000208c:	76 2d                	jbe    c00020bb <gen_numname+0x4a>
c000208e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002091:	66 85 c0             	test   ax,ax
c0002094:	74 25                	je     c00020bb <gen_numname+0x4a>
c0002096:	83 c7 02             	add    edi,0x2
c0002099:	ba 10 00 00 00       	mov    edx,0x10
c000209e:	01 db                	add    ebx,ebx
c00020a0:	89 c1                	mov    ecx,eax
c00020a2:	66 d1 e8             	shr    ax,1
c00020a5:	83 e1 01             	and    ecx,0x1
c00020a8:	01 cb                	add    ebx,ecx
c00020aa:	0f ba e3 10          	bt     ebx,0x10
c00020ae:	73 06                	jae    c00020b6 <gen_numname+0x45>
c00020b0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b6:	4a                   	dec    edx
c00020b7:	75 e5                	jne    c000209e <gen_numname+0x2d>
c00020b9:	eb d3                	jmp    c000208e <gen_numname+0x1d>
c00020bb:	b8 07 00 00 00       	mov    eax,0x7
c00020c0:	88 d9                	mov    cl,bl
c00020c2:	83 e1 0f             	and    ecx,0xf
c00020c5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c8:	80 fa 39             	cmp    dl,0x39
c00020cb:	76 03                	jbe    c00020d0 <gen_numname+0x5f>
c00020cd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020d0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d7:	89 da                	mov    edx,ebx
c00020d9:	c1 ea 04             	shr    edx,0x4
c00020dc:	83 fb 0f             	cmp    ebx,0xf
c00020df:	76 06                	jbe    c00020e7 <gen_numname+0x76>
c00020e1:	89 c8                	mov    eax,ecx
c00020e3:	89 d3                	mov    ebx,edx
c00020e5:	eb d9                	jmp    c00020c0 <gen_numname+0x4f>
c00020e7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020ec:	31 d2                	xor    edx,edx
c00020ee:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f4:	39 ca                	cmp    edx,ecx
c00020f6:	73 18                	jae    c0002110 <gen_numname+0x9f>
c00020f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fb:	3c 20                	cmp    al,0x20
c00020fd:	74 11                	je     c0002110 <gen_numname+0x9f>
c00020ff:	e8 41 fc ff ff       	call   c0001d45 <dbc_1st>
c0002104:	85 c0                	test   eax,eax
c0002106:	74 05                	je     c000210d <gen_numname+0x9c>
c0002108:	39 d3                	cmp    ebx,edx
c000210a:	74 04                	je     c0002110 <gen_numname+0x9f>
c000210c:	42                   	inc    edx
c000210d:	42                   	inc    edx
c000210e:	eb e1                	jmp    c00020f1 <gen_numname+0x80>
c0002110:	b0 20                	mov    al,0x20
c0002112:	83 f9 07             	cmp    ecx,0x7
c0002115:	77 05                	ja     c000211c <gen_numname+0xab>
c0002117:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211b:	41                   	inc    ecx
c000211c:	42                   	inc    edx
c000211d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002121:	83 fa 07             	cmp    edx,0x7
c0002124:	76 ea                	jbe    c0002110 <gen_numname+0x9f>
c0002126:	83 c4 10             	add    esp,0x10
c0002129:	5b                   	pop    ebx
c000212a:	5e                   	pop    esi
c000212b:	5f                   	pop    edi
c000212c:	c3                   	ret    

c000212d <sum_sfn>:
c000212d:	31 c9                	xor    ecx,ecx
c000212f:	31 d2                	xor    edx,edx
c0002131:	d0 ca                	ror    dl,1
c0002133:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002136:	41                   	inc    ecx
c0002137:	83 f9 0b             	cmp    ecx,0xb
c000213a:	75 f5                	jne    c0002131 <sum_sfn+0x4>
c000213c:	88 d0                	mov    al,dl
c000213e:	c3                   	ret    

c000213f <xdir_sum>:
c000213f:	56                   	push   esi
c0002140:	31 c9                	xor    ecx,ecx
c0002142:	53                   	push   ebx
c0002143:	31 d2                	xor    edx,edx
c0002145:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002149:	43                   	inc    ebx
c000214a:	c1 e3 05             	shl    ebx,0x5
c000214d:	83 fa 02             	cmp    edx,0x2
c0002150:	74 0b                	je     c000215d <xdir_sum+0x1e>
c0002152:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002156:	66 d1 c9             	ror    cx,1
c0002159:	01 f1                	add    ecx,esi
c000215b:	eb 05                	jmp    c0002162 <xdir_sum+0x23>
c000215d:	ba 03 00 00 00       	mov    edx,0x3
c0002162:	42                   	inc    edx
c0002163:	39 d3                	cmp    ebx,edx
c0002165:	77 e6                	ja     c000214d <xdir_sum+0xe>
c0002167:	89 c8                	mov    eax,ecx
c0002169:	5b                   	pop    ebx
c000216a:	5e                   	pop    esi
c000216b:	c3                   	ret    

c000216c <xsum32>:
c000216c:	d1 ca                	ror    edx,1
c000216e:	0f b6 c0             	movzx  eax,al
c0002171:	01 d0                	add    eax,edx
c0002173:	c3                   	ret    

c0002174 <get_xfileinfo>:
c0002174:	55                   	push   ebp
c0002175:	31 c9                	xor    ecx,ecx
c0002177:	57                   	push   edi
c0002178:	bd 40 00 00 00       	mov    ebp,0x40
c000217d:	56                   	push   esi
c000217e:	31 ff                	xor    edi,edi
c0002180:	53                   	push   ebx
c0002181:	89 c6                	mov    esi,eax
c0002183:	83 ec 0c             	sub    esp,0xc
c0002186:	89 d3                	mov    ebx,edx
c0002188:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000218f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002193:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002196:	76 6d                	jbe    c0002205 <get_xfileinfo+0x91>
c0002198:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000219e:	76 0b                	jbe    c00021ab <get_xfileinfo+0x37>
c00021a0:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021a4:	bf 01 00 00 00       	mov    edi,0x1
c00021a9:	eb 63                	jmp    c000220e <get_xfileinfo+0x9a>
c00021ab:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021b1:	75 03                	jne    c00021b6 <get_xfileinfo+0x42>
c00021b3:	83 c5 02             	add    ebp,0x2
c00021b6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b9:	83 c5 02             	add    ebp,0x2
c00021bc:	e8 b0 fa ff ff       	call   c0001c71 <ld_word>
c00021c1:	ff 04 24             	inc    DWORD PTR [esp]
c00021c4:	66 85 c9             	test   cx,cx
c00021c7:	75 0d                	jne    c00021d6 <get_xfileinfo+0x62>
c00021c9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021cf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021d4:	76 2b                	jbe    c0002201 <get_xfileinfo+0x8d>
c00021d6:	c1 e1 10             	shl    ecx,0x10
c00021d9:	ba ff 00 00 00       	mov    edx,0xff
c00021de:	0f b7 c0             	movzx  eax,ax
c00021e1:	29 fa                	sub    edx,edi
c00021e3:	09 c8                	or     eax,ecx
c00021e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021f1:	e8 1b fc ff ff       	call   c0001e11 <put_utf>
c00021f6:	84 c0                	test   al,al
c00021f8:	74 a6                	je     c00021a0 <get_xfileinfo+0x2c>
c00021fa:	0f b6 c0             	movzx  eax,al
c00021fd:	01 c7                	add    edi,eax
c00021ff:	31 c0                	xor    eax,eax
c0002201:	89 c1                	mov    ecx,eax
c0002203:	eb 8a                	jmp    c000218f <get_xfileinfo+0x1b>
c0002205:	85 ff                	test   edi,edi
c0002207:	74 97                	je     c00021a0 <get_xfileinfo+0x2c>
c0002209:	66 85 c9             	test   cx,cx
c000220c:	75 92                	jne    c00021a0 <get_xfileinfo+0x2c>
c000220e:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002213:	31 c0                	xor    eax,eax
c0002215:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002219:	31 d2                	xor    edx,edx
c000221b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000221e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002221:	80 e1 10             	and    cl,0x10
c0002224:	75 08                	jne    c000222e <get_xfileinfo+0xba>
c0002226:	8d 46 38             	lea    eax,[esi+0x38]
c0002229:	e8 68 fa ff ff       	call   c0001c96 <ld_qword>
c000222e:	89 03                	mov    DWORD PTR [ebx],eax
c0002230:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002233:	8d 46 0c             	lea    eax,[esi+0xc]
c0002236:	e8 36 fa ff ff       	call   c0001c71 <ld_word>
c000223b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000223f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002242:	e8 2a fa ff ff       	call   c0001c71 <ld_word>
c0002247:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000224b:	83 c4 0c             	add    esp,0xc
c000224e:	5b                   	pop    ebx
c000224f:	5e                   	pop    esi
c0002250:	5f                   	pop    edi
c0002251:	5d                   	pop    ebp
c0002252:	c3                   	ret    

c0002253 <get_ldnumber>:
c0002253:	8b 10                	mov    edx,DWORD PTR [eax]
c0002255:	85 d2                	test   edx,edx
c0002257:	74 14                	je     c000226d <get_ldnumber+0x1a>
c0002259:	56                   	push   esi
c000225a:	53                   	push   ebx
c000225b:	89 d3                	mov    ebx,edx
c000225d:	43                   	inc    ebx
c000225e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002261:	80 f9 1f             	cmp    cl,0x1f
c0002264:	76 0d                	jbe    c0002273 <get_ldnumber+0x20>
c0002266:	80 f9 3a             	cmp    cl,0x3a
c0002269:	75 f2                	jne    c000225d <get_ldnumber+0xa>
c000226b:	eb 0a                	jmp    c0002277 <get_ldnumber+0x24>
c000226d:	83 c9 ff             	or     ecx,0xffffffff
c0002270:	89 c8                	mov    eax,ecx
c0002272:	c3                   	ret    
c0002273:	31 c9                	xor    ecx,ecx
c0002275:	eb 24                	jmp    c000229b <get_ldnumber+0x48>
c0002277:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000227a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000227d:	80 f9 09             	cmp    cl,0x9
c0002280:	77 16                	ja     c0002298 <get_ldnumber+0x45>
c0002282:	83 c2 02             	add    edx,0x2
c0002285:	83 c9 ff             	or     ecx,0xffffffff
c0002288:	39 d3                	cmp    ebx,edx
c000228a:	75 0f                	jne    c000229b <get_ldnumber+0x48>
c000228c:	89 f2                	mov    edx,esi
c000228e:	89 18                	mov    DWORD PTR [eax],ebx
c0002290:	0f be ca             	movsx  ecx,dl
c0002293:	83 e9 30             	sub    ecx,0x30
c0002296:	eb 03                	jmp    c000229b <get_ldnumber+0x48>
c0002298:	83 c9 ff             	or     ecx,0xffffffff
c000229b:	89 c8                	mov    eax,ecx
c000229d:	5b                   	pop    ebx
c000229e:	5e                   	pop    esi
c000229f:	c3                   	ret    

c00022a0 <crc32>:
c00022a0:	56                   	push   esi
c00022a1:	89 d6                	mov    esi,edx
c00022a3:	53                   	push   ebx
c00022a4:	b2 01                	mov    dl,0x1
c00022a6:	bb 08 00 00 00       	mov    ebx,0x8
c00022ab:	89 f1                	mov    ecx,esi
c00022ad:	84 d1                	test   cl,dl
c00022af:	0f 95 c1             	setne  cl
c00022b2:	0f b6 c9             	movzx  ecx,cl
c00022b5:	31 c1                	xor    ecx,eax
c00022b7:	89 c8                	mov    eax,ecx
c00022b9:	d1 e8                	shr    eax,1
c00022bb:	80 e1 01             	and    cl,0x1
c00022be:	74 05                	je     c00022c5 <crc32+0x25>
c00022c0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022c5:	d1 e2                	shl    edx,1
c00022c7:	4b                   	dec    ebx
c00022c8:	75 e1                	jne    c00022ab <crc32+0xb>
c00022ca:	5b                   	pop    ebx
c00022cb:	5e                   	pop    esi
c00022cc:	c3                   	ret    

c00022cd <test_gpt_header>:
c00022cd:	55                   	push   ebp
c00022ce:	b9 10 00 00 00       	mov    ecx,0x10
c00022d3:	57                   	push   edi
c00022d4:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c00022d9:	56                   	push   esi
c00022da:	31 ff                	xor    edi,edi
c00022dc:	53                   	push   ebx
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	e8 2c fa ff ff       	call   c0001d10 <mem_cmp>
c00022e4:	85 c0                	test   eax,eax
c00022e6:	75 55                	jne    c000233d <test_gpt_header+0x70>
c00022e8:	89 c7                	mov    edi,eax
c00022ea:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022ef:	83 ce ff             	or     esi,0xffffffff
c00022f2:	31 d2                	xor    edx,edx
c00022f4:	83 fd 03             	cmp    ebp,0x3
c00022f7:	76 05                	jbe    c00022fe <test_gpt_header+0x31>
c00022f9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022fe:	89 f0                	mov    eax,esi
c0002300:	45                   	inc    ebp
c0002301:	e8 9a ff ff ff       	call   c00022a0 <crc32>
c0002306:	83 fd 4c             	cmp    ebp,0x4c
c0002309:	89 c6                	mov    esi,eax
c000230b:	75 e5                	jne    c00022f2 <test_gpt_header+0x25>
c000230d:	8d 43 10             	lea    eax,[ebx+0x10]
c0002310:	f7 d6                	not    esi
c0002312:	e8 67 f9 ff ff       	call   c0001c7e <ld_dword>
c0002317:	39 c6                	cmp    esi,eax
c0002319:	75 22                	jne    c000233d <test_gpt_header+0x70>
c000231b:	8d 43 54             	lea    eax,[ebx+0x54]
c000231e:	e8 5b f9 ff ff       	call   c0001c7e <ld_dword>
c0002323:	83 c0 80             	add    eax,0xffffff80
c0002326:	75 15                	jne    c000233d <test_gpt_header+0x70>
c0002328:	8d 43 50             	lea    eax,[ebx+0x50]
c000232b:	e8 4e f9 ff ff       	call   c0001c7e <ld_dword>
c0002330:	3d 80 00 00 00       	cmp    eax,0x80
c0002335:	0f 96 c0             	setbe  al
c0002338:	0f b6 c0             	movzx  eax,al
c000233b:	89 c7                	mov    edi,eax
c000233d:	5b                   	pop    ebx
c000233e:	89 f8                	mov    eax,edi
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    

c0002344 <make_rand>:
c0002344:	56                   	push   esi
c0002345:	85 c0                	test   eax,eax
c0002347:	53                   	push   ebx
c0002348:	75 05                	jne    c000234f <make_rand+0xb>
c000234a:	b8 01 00 00 00       	mov    eax,0x1
c000234f:	01 d1                	add    ecx,edx
c0002351:	bb 08 00 00 00       	mov    ebx,0x8
c0002356:	89 c6                	mov    esi,eax
c0002358:	d1 e8                	shr    eax,1
c000235a:	83 e6 01             	and    esi,0x1
c000235d:	85 f6                	test   esi,esi
c000235f:	74 05                	je     c0002366 <make_rand+0x22>
c0002361:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002366:	4b                   	dec    ebx
c0002367:	75 ed                	jne    c0002356 <make_rand+0x12>
c0002369:	42                   	inc    edx
c000236a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000236d:	39 ca                	cmp    edx,ecx
c000236f:	75 e0                	jne    c0002351 <make_rand+0xd>
c0002371:	5b                   	pop    ebx
c0002372:	5e                   	pop    esi
c0002373:	c3                   	ret    

c0002374 <validate>:
c0002374:	56                   	push   esi
c0002375:	53                   	push   ebx
c0002376:	89 d6                	mov    esi,edx
c0002378:	51                   	push   ecx
c0002379:	85 c0                	test   eax,eax
c000237b:	75 09                	jne    c0002386 <validate+0x12>
c000237d:	b8 09 00 00 00       	mov    eax,0x9
c0002382:	31 c9                	xor    ecx,ecx
c0002384:	eb 2f                	jmp    c00023b5 <validate+0x41>
c0002386:	89 c3                	mov    ebx,eax
c0002388:	8b 00                	mov    eax,DWORD PTR [eax]
c000238a:	85 c0                	test   eax,eax
c000238c:	74 ef                	je     c000237d <validate+0x9>
c000238e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002391:	74 ea                	je     c000237d <validate+0x9>
c0002393:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002397:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000239b:	75 e0                	jne    c000237d <validate+0x9>
c000239d:	83 ec 0c             	sub    esp,0xc
c00023a0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023a4:	50                   	push   eax
c00023a5:	e8 76 f8 ff ff       	call   c0001c20 <disk_status>
c00023aa:	83 c4 10             	add    esp,0x10
c00023ad:	a8 01                	test   al,0x1
c00023af:	75 cc                	jne    c000237d <validate+0x9>
c00023b1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023b7:	5a                   	pop    edx
c00023b8:	5b                   	pop    ebx
c00023b9:	5e                   	pop    esi
c00023ba:	c3                   	ret    

c00023bb <sync_window>:
c00023bb:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023bf:	0f 84 85 00 00 00    	je     c000244a <sync_window+0x8f>
c00023c5:	55                   	push   ebp
c00023c6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c9:	57                   	push   edi
c00023ca:	56                   	push   esi
c00023cb:	53                   	push   ebx
c00023cc:	89 c3                	mov    ebx,eax
c00023ce:	83 ec 28             	sub    esp,0x28
c00023d1:	6a 01                	push   0x1
c00023d3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023d6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d9:	55                   	push   ebp
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 58 f8 ff ff       	call   c0001c3c <disk_write>
c00023e4:	83 c4 20             	add    esp,0x20
c00023e7:	ba 01 00 00 00       	mov    edx,0x1
c00023ec:	85 c0                	test   eax,eax
c00023ee:	75 50                	jne    c0002440 <sync_window+0x85>
c00023f0:	31 ff                	xor    edi,edi
c00023f2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023fd:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002400:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002403:	89 c6                	mov    esi,eax
c0002405:	89 d7                	mov    edi,edx
c0002407:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000240a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000240e:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002411:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002415:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002419:	73 23                	jae    c000243e <sync_window+0x83>
c000241b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000241f:	75 1d                	jne    c000243e <sync_window+0x83>
c0002421:	83 ec 0c             	sub    esp,0xc
c0002424:	6a 01                	push   0x1
c0002426:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000242a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000242e:	52                   	push   edx
c000242f:	50                   	push   eax
c0002430:	55                   	push   ebp
c0002431:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002435:	50                   	push   eax
c0002436:	e8 01 f8 ff ff       	call   c0001c3c <disk_write>
c000243b:	83 c4 20             	add    esp,0x20
c000243e:	31 d2                	xor    edx,edx
c0002440:	83 c4 1c             	add    esp,0x1c
c0002443:	89 d0                	mov    eax,edx
c0002445:	5b                   	pop    ebx
c0002446:	5e                   	pop    esi
c0002447:	5f                   	pop    edi
c0002448:	5d                   	pop    ebp
c0002449:	c3                   	ret    
c000244a:	31 d2                	xor    edx,edx
c000244c:	89 d0                	mov    eax,edx
c000244e:	c3                   	ret    

c000244f <move_window>:
c000244f:	56                   	push   esi
c0002450:	53                   	push   ebx
c0002451:	89 c3                	mov    ebx,eax
c0002453:	83 ec 14             	sub    esp,0x14
c0002456:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002459:	75 07                	jne    c0002462 <move_window+0x13>
c000245b:	31 f6                	xor    esi,esi
c000245d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002460:	74 59                	je     c00024bb <move_window+0x6c>
c0002462:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002466:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000246a:	89 d8                	mov    eax,ebx
c000246c:	e8 4a ff ff ff       	call   c00023bb <sync_window>
c0002471:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002475:	89 c6                	mov    esi,eax
c0002477:	85 c0                	test   eax,eax
c0002479:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247d:	75 3c                	jne    c00024bb <move_window+0x6c>
c000247f:	83 ec 0c             	sub    esp,0xc
c0002482:	8d 43 54             	lea    eax,[ebx+0x54]
c0002485:	6a 01                	push   0x1
c0002487:	51                   	push   ecx
c0002488:	52                   	push   edx
c0002489:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000248d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002491:	50                   	push   eax
c0002492:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002496:	50                   	push   eax
c0002497:	e8 8a f7 ff ff       	call   c0001c26 <disk_read>
c000249c:	83 c4 20             	add    esp,0x20
c000249f:	85 c0                	test   eax,eax
c00024a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a9:	74 0a                	je     c00024b5 <move_window+0x66>
c00024ab:	83 ca ff             	or     edx,0xffffffff
c00024ae:	be 01 00 00 00       	mov    esi,0x1
c00024b3:	89 d1                	mov    ecx,edx
c00024b5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024bb:	89 f0                	mov    eax,esi
c00024bd:	83 c4 14             	add    esp,0x14
c00024c0:	5b                   	pop    ebx
c00024c1:	5e                   	pop    esi
c00024c2:	c3                   	ret    

c00024c3 <check_fs>:
c00024c3:	53                   	push   ebx
c00024c4:	89 c3                	mov    ebx,eax
c00024c6:	83 ec 08             	sub    esp,0x8
c00024c9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024cd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024d4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024db:	e8 6f ff ff ff       	call   c000244f <move_window>
c00024e0:	ba 04 00 00 00       	mov    edx,0x4
c00024e5:	85 c0                	test   eax,eax
c00024e7:	0f 85 89 00 00 00    	jne    c0002576 <check_fs+0xb3>
c00024ed:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024f3:	e8 79 f7 ff ff       	call   c0001c71 <ld_word>
c00024f8:	ba 03 00 00 00       	mov    edx,0x3
c00024fd:	66 3d 55 aa          	cmp    ax,0xaa55
c0002501:	75 73                	jne    c0002576 <check_fs+0xb3>
c0002503:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0002508:	8d 43 54             	lea    eax,[ebx+0x54]
c000250b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002510:	e8 fb f7 ff ff       	call   c0001d10 <mem_cmp>
c0002515:	ba 01 00 00 00       	mov    edx,0x1
c000251a:	85 c0                	test   eax,eax
c000251c:	74 58                	je     c0002576 <check_fs+0xb3>
c000251e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002521:	8d 50 18             	lea    edx,[eax+0x18]
c0002524:	80 fa 01             	cmp    dl,0x1
c0002527:	76 09                	jbe    c0002532 <check_fs+0x6f>
c0002529:	ba 02 00 00 00       	mov    edx,0x2
c000252e:	3c eb                	cmp    al,0xeb
c0002530:	75 44                	jne    c0002576 <check_fs+0xb3>
c0002532:	ba 10 d2 02 c0       	mov    edx,0xc002d210
c0002537:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000253d:	b9 03 00 00 00       	mov    ecx,0x3
c0002542:	e8 c9 f7 ff ff       	call   c0001d10 <mem_cmp>
c0002547:	31 d2                	xor    edx,edx
c0002549:	85 c0                	test   eax,eax
c000254b:	74 29                	je     c0002576 <check_fs+0xb3>
c000254d:	ba 4c 9d 02 c0       	mov    edx,0xc0029d4c
c0002552:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002558:	b9 05 00 00 00       	mov    ecx,0x5
c000255d:	e8 ae f7 ff ff       	call   c0001d10 <mem_cmp>
c0002562:	31 d2                	xor    edx,edx
c0002564:	85 c0                	test   eax,eax
c0002566:	74 0e                	je     c0002576 <check_fs+0xb3>
c0002568:	31 d2                	xor    edx,edx
c000256a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002571:	0f 95 c2             	setne  dl
c0002574:	01 d2                	add    edx,edx
c0002576:	89 d0                	mov    eax,edx
c0002578:	83 c4 08             	add    esp,0x8
c000257b:	5b                   	pop    ebx
c000257c:	c3                   	ret    

c000257d <find_volume>:
c000257d:	55                   	push   ebp
c000257e:	31 c9                	xor    ecx,ecx
c0002580:	57                   	push   edi
c0002581:	56                   	push   esi
c0002582:	89 d6                	mov    esi,edx
c0002584:	53                   	push   ebx
c0002585:	31 d2                	xor    edx,edx
c0002587:	83 ec 3c             	sub    esp,0x3c
c000258a:	89 c3                	mov    ebx,eax
c000258c:	e8 32 ff ff ff       	call   c00024c3 <check_fs>
c0002591:	83 f8 02             	cmp    eax,0x2
c0002594:	74 0e                	je     c00025a4 <find_volume+0x27>
c0002596:	0f 87 5d 01 00 00    	ja     c00026f9 <find_volume+0x17c>
c000259c:	85 f6                	test   esi,esi
c000259e:	0f 84 55 01 00 00    	je     c00026f9 <find_volume+0x17c>
c00025a4:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025ab:	0f 85 dd 00 00 00    	jne    c000268e <find_volume+0x111>
c00025b1:	31 c9                	xor    ecx,ecx
c00025b3:	ba 01 00 00 00       	mov    edx,0x1
c00025b8:	89 d8                	mov    eax,ebx
c00025ba:	e8 90 fe ff ff       	call   c000244f <move_window>
c00025bf:	85 c0                	test   eax,eax
c00025c1:	74 0a                	je     c00025cd <find_volume+0x50>
c00025c3:	b8 04 00 00 00       	mov    eax,0x4
c00025c8:	e9 2c 01 00 00       	jmp    c00026f9 <find_volume+0x17c>
c00025cd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025d0:	89 e8                	mov    eax,ebp
c00025d2:	e8 f6 fc ff ff       	call   c00022cd <test_gpt_header>
c00025d7:	85 c0                	test   eax,eax
c00025d9:	75 0a                	jne    c00025e5 <find_volume+0x68>
c00025db:	b8 03 00 00 00       	mov    eax,0x3
c00025e0:	e9 14 01 00 00       	jmp    c00026f9 <find_volume+0x17c>
c00025e5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025eb:	e8 8e f6 ff ff       	call   c0001c7e <ld_dword>
c00025f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025f4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025fa:	e8 97 f6 ff ff       	call   c0001c96 <ld_qword>
c00025ff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002607:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000260b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000260f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002617:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000261b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000261f:	74 ba                	je     c00025db <find_volume+0x5e>
c0002621:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002625:	31 c9                	xor    ecx,ecx
c0002627:	c1 e7 07             	shl    edi,0x7
c000262a:	89 d8                	mov    eax,ebx
c000262c:	89 fa                	mov    edx,edi
c000262e:	c1 ea 09             	shr    edx,0x9
c0002631:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002635:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002639:	e8 11 fe ff ff       	call   c000244f <move_window>
c000263e:	85 c0                	test   eax,eax
c0002640:	75 81                	jne    c00025c3 <find_volume+0x46>
c0002642:	81 e7 80 01 00 00    	and    edi,0x180
c0002648:	b9 10 00 00 00       	mov    ecx,0x10
c000264d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002651:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c0002656:	e8 b5 f6 ff ff       	call   c0001d10 <mem_cmp>
c000265b:	85 c0                	test   eax,eax
c000265d:	75 29                	jne    c0002688 <find_volume+0x10b>
c000265f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002663:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002667:	e8 2a f6 ff ff       	call   c0001c96 <ld_qword>
c000266c:	89 d1                	mov    ecx,edx
c000266e:	89 c2                	mov    edx,eax
c0002670:	89 d8                	mov    eax,ebx
c0002672:	e8 4c fe ff ff       	call   c00024c3 <check_fs>
c0002677:	85 f6                	test   esi,esi
c0002679:	75 07                	jne    c0002682 <find_volume+0x105>
c000267b:	83 f8 01             	cmp    eax,0x1
c000267e:	77 08                	ja     c0002688 <find_volume+0x10b>
c0002680:	eb 77                	jmp    c00026f9 <find_volume+0x17c>
c0002682:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002686:	74 71                	je     c00026f9 <find_volume+0x17c>
c0002688:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000268c:	eb 89                	jmp    c0002617 <find_volume+0x9a>
c000268e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002692:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002698:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000269e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026a2:	89 cd                	mov    ebp,ecx
c00026a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a8:	89 f8                	mov    eax,edi
c00026aa:	83 c7 10             	add    edi,0x10
c00026ad:	e8 cc f5 ff ff       	call   c0001c7e <ld_dword>
c00026b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026b6:	89 01                	mov    DWORD PTR [ecx],eax
c00026b8:	83 c1 04             	add    ecx,0x4
c00026bb:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026bf:	75 e3                	jne    c00026a4 <find_volume+0x127>
c00026c1:	31 ff                	xor    edi,edi
c00026c3:	85 f6                	test   esi,esi
c00026c5:	74 03                	je     c00026ca <find_volume+0x14d>
c00026c7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ca:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026ce:	85 d2                	test   edx,edx
c00026d0:	74 14                	je     c00026e6 <find_volume+0x169>
c00026d2:	31 c9                	xor    ecx,ecx
c00026d4:	89 d8                	mov    eax,ebx
c00026d6:	e8 e8 fd ff ff       	call   c00024c3 <check_fs>
c00026db:	83 f8 01             	cmp    eax,0x1
c00026de:	76 19                	jbe    c00026f9 <find_volume+0x17c>
c00026e0:	85 f6                	test   esi,esi
c00026e2:	74 0f                	je     c00026f3 <find_volume+0x176>
c00026e4:	eb 13                	jmp    c00026f9 <find_volume+0x17c>
c00026e6:	85 f6                	test   esi,esi
c00026e8:	0f 85 ed fe ff ff    	jne    c00025db <find_volume+0x5e>
c00026ee:	b8 03 00 00 00       	mov    eax,0x3
c00026f3:	47                   	inc    edi
c00026f4:	83 ff 03             	cmp    edi,0x3
c00026f7:	76 d1                	jbe    c00026ca <find_volume+0x14d>
c00026f9:	83 c4 3c             	add    esp,0x3c
c00026fc:	5b                   	pop    ebx
c00026fd:	5e                   	pop    esi
c00026fe:	5f                   	pop    edi
c00026ff:	5d                   	pop    ebp
c0002700:	c3                   	ret    

c0002701 <mount_volume>:
c0002701:	55                   	push   ebp
c0002702:	57                   	push   edi
c0002703:	89 cf                	mov    edi,ecx
c0002705:	56                   	push   esi
c0002706:	53                   	push   ebx
c0002707:	bb 0b 00 00 00       	mov    ebx,0xb
c000270c:	83 ec 3c             	sub    esp,0x3c
c000270f:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002715:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002719:	e8 35 fb ff ff       	call   c0002253 <get_ldnumber>
c000271e:	85 c0                	test   eax,eax
c0002720:	0f 88 3a 05 00 00    	js     c0002c60 <mount_volume+0x55f>
c0002726:	8b 2c 85 c0 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1240]
c000272d:	89 c6                	mov    esi,eax
c000272f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002734:	85 ed                	test   ebp,ebp
c0002736:	0f 84 24 05 00 00    	je     c0002c60 <mount_volume+0x55f>
c000273c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002740:	83 e7 fe             	and    edi,0xfffffffe
c0002743:	89 2a                	mov    DWORD PTR [edx],ebp
c0002745:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002749:	74 32                	je     c000277d <mount_volume+0x7c>
c000274b:	83 ec 0c             	sub    esp,0xc
c000274e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002752:	50                   	push   eax
c0002753:	e8 c8 f4 ff ff       	call   c0001c20 <disk_status>
c0002758:	83 c4 10             	add    esp,0x10
c000275b:	a8 01                	test   al,0x1
c000275d:	75 1e                	jne    c000277d <mount_volume+0x7c>
c000275f:	31 db                	xor    ebx,ebx
c0002761:	89 f9                	mov    ecx,edi
c0002763:	84 c9                	test   cl,cl
c0002765:	0f 84 f5 04 00 00    	je     c0002c60 <mount_volume+0x55f>
c000276b:	a8 04                	test   al,0x4
c000276d:	0f 84 ed 04 00 00    	je     c0002c60 <mount_volume+0x55f>
c0002773:	bb 0a 00 00 00       	mov    ebx,0xa
c0002778:	e9 e3 04 00 00       	jmp    c0002c60 <mount_volume+0x55f>
c000277d:	83 ec 0c             	sub    esp,0xc
c0002780:	89 f0                	mov    eax,esi
c0002782:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002786:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002789:	0f b6 f0             	movzx  esi,al
c000278c:	bb 03 00 00 00       	mov    ebx,0x3
c0002791:	56                   	push   esi
c0002792:	e8 8c f4 ff ff       	call   c0001c23 <disk_initialize>
c0002797:	83 c4 10             	add    esp,0x10
c000279a:	a8 01                	test   al,0x1
c000279c:	0f 85 be 04 00 00    	jne    c0002c60 <mount_volume+0x55f>
c00027a2:	89 f9                	mov    ecx,edi
c00027a4:	84 c9                	test   cl,cl
c00027a6:	74 04                	je     c00027ac <mount_volume+0xab>
c00027a8:	a8 04                	test   al,0x4
c00027aa:	75 c7                	jne    c0002773 <mount_volume+0x72>
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 e8                	mov    eax,ebp
c00027b0:	e8 c8 fd ff ff       	call   c000257d <find_volume>
c00027b5:	83 f8 04             	cmp    eax,0x4
c00027b8:	75 0a                	jne    c00027c4 <mount_volume+0xc3>
c00027ba:	bb 01 00 00 00       	mov    ebx,0x1
c00027bf:	e9 9c 04 00 00       	jmp    c0002c60 <mount_volume+0x55f>
c00027c4:	83 f8 01             	cmp    eax,0x1
c00027c7:	76 0a                	jbe    c00027d3 <mount_volume+0xd2>
c00027c9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027ce:	e9 8d 04 00 00       	jmp    c0002c60 <mount_volume+0x55f>
c00027d3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027d6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e1:	75 17                	jne    c00027fa <mount_volume+0xf9>
c00027e3:	b8 0b 00 00 00       	mov    eax,0xb
c00027e8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027ed:	75 da                	jne    c00027c9 <mount_volume+0xc8>
c00027ef:	40                   	inc    eax
c00027f0:	83 f8 40             	cmp    eax,0x40
c00027f3:	75 f3                	jne    c00027e8 <mount_volume+0xe7>
c00027f5:	e9 5a 02 00 00       	jmp    c0002a54 <mount_volume+0x353>
c00027fa:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027fd:	e8 6f f4 ff ff       	call   c0001c71 <ld_word>
c0002802:	66 3d 00 02          	cmp    ax,0x200
c0002806:	75 c1                	jne    c00027c9 <mount_volume+0xc8>
c0002808:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000280b:	e8 61 f4 ff ff       	call   c0001c71 <ld_word>
c0002810:	0f b7 c0             	movzx  eax,ax
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	85 c0                	test   eax,eax
c0002819:	75 0c                	jne    c0002827 <mount_volume+0x126>
c000281b:	8d 45 78             	lea    eax,[ebp+0x78]
c000281e:	e8 5b f4 ff ff       	call   c0001c7e <ld_dword>
c0002823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000282b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000282e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002831:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002835:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002838:	48                   	dec    eax
c0002839:	3c 01                	cmp    al,0x1
c000283b:	77 8c                	ja     c00027c9 <mount_volume+0xc8>
c000283d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002841:	89 c3                	mov    ebx,eax
c0002843:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002847:	66 85 c0             	test   ax,ax
c000284a:	0f 84 79 ff ff ff    	je     c00027c9 <mount_volume+0xc8>
c0002850:	8d 40 ff             	lea    eax,[eax-0x1]
c0002853:	85 d8                	test   eax,ebx
c0002855:	0f 85 6e ff ff ff    	jne    c00027c9 <mount_volume+0xc8>
c000285b:	8d 45 65             	lea    eax,[ebp+0x65]
c000285e:	e8 0e f4 ff ff       	call   c0001c71 <ld_word>
c0002863:	89 c7                	mov    edi,eax
c0002865:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002869:	a8 0f                	test   al,0xf
c000286b:	0f 85 58 ff ff ff    	jne    c00027c9 <mount_volume+0xc8>
c0002871:	8d 45 67             	lea    eax,[ebp+0x67]
c0002874:	e8 f8 f3 ff ff       	call   c0001c71 <ld_word>
c0002879:	0f b7 f0             	movzx  esi,ax
c000287c:	85 f6                	test   esi,esi
c000287e:	75 0a                	jne    c000288a <mount_volume+0x189>
c0002880:	8d 45 74             	lea    eax,[ebp+0x74]
c0002883:	e8 f6 f3 ff ff       	call   c0001c7e <ld_dword>
c0002888:	89 c6                	mov    esi,eax
c000288a:	8d 45 62             	lea    eax,[ebp+0x62]
c000288d:	e8 df f3 ff ff       	call   c0001c71 <ld_word>
c0002892:	66 85 c0             	test   ax,ax
c0002895:	0f 84 2e ff ff ff    	je     c00027c9 <mount_volume+0xc8>
c000289b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028a0:	0f b7 c8             	movzx  ecx,ax
c00028a3:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028ac:	89 fa                	mov    edx,edi
c00028ae:	66 c1 ea 04          	shr    dx,0x4
c00028b2:	0f b7 d2             	movzx  edx,dx
c00028b5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028c0:	39 c6                	cmp    esi,eax
c00028c2:	0f 82 01 ff ff ff    	jb     c00027c9 <mount_volume+0xc8>
c00028c8:	29 c6                	sub    esi,eax
c00028ca:	31 d2                	xor    edx,edx
c00028cc:	89 f0                	mov    eax,esi
c00028ce:	f7 f3                	div    ebx
c00028d0:	39 de                	cmp    esi,ebx
c00028d2:	0f 82 f1 fe ff ff    	jb     c00027c9 <mount_volume+0xc8>
c00028d8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028dd:	0f 87 e6 fe ff ff    	ja     c00027c9 <mount_volume+0xc8>
c00028e3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e8:	0f 86 63 03 00 00    	jbe    c0002c51 <mount_volume+0x550>
c00028ee:	bb 03 00 00 00       	mov    ebx,0x3
c00028f3:	8d 70 02             	lea    esi,[eax+0x2]
c00028f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028fe:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002901:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 c8                	mov    eax,ecx
c0002908:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000290b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000290f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002913:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002917:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000291b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000291e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002921:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002925:	31 d2                	xor    edx,edx
c0002927:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000292b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000292f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002932:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002935:	83 fb 03             	cmp    ebx,0x3
c0002938:	75 2b                	jne    c0002965 <mount_volume+0x264>
c000293a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000293d:	e8 2f f3 ff ff       	call   c0001c71 <ld_word>
c0002942:	66 09 c7             	or     di,ax
c0002945:	0f 85 7e fe ff ff    	jne    c00027c9 <mount_volume+0xc8>
c000294b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002951:	c1 e6 02             	shl    esi,0x2
c0002954:	e8 25 f3 ff ff       	call   c0001c7e <ld_dword>
c0002959:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002960:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002963:	eb 30                	jmp    c0002995 <mount_volume+0x294>
c0002965:	66 85 ff             	test   di,di
c0002968:	0f 84 5b fe ff ff    	je     c00027c9 <mount_volume+0xc8>
c000296e:	31 d2                	xor    edx,edx
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002978:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000297c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000297f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002982:	83 fb 02             	cmp    ebx,0x2
c0002985:	75 04                	jne    c000298b <mount_volume+0x28a>
c0002987:	01 f6                	add    esi,esi
c0002989:	eb 0a                	jmp    c0002995 <mount_volume+0x294>
c000298b:	8d 04 76             	lea    eax,[esi+esi*2]
c000298e:	83 e6 01             	and    esi,0x1
c0002991:	d1 e8                	shr    eax,1
c0002993:	01 c6                	add    esi,eax
c0002995:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000299b:	c1 ee 09             	shr    esi,0x9
c000299e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029a2:	0f 87 21 fe ff ff    	ja     c00027c9 <mount_volume+0xc8>
c00029a8:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029af:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029b6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029ba:	83 fb 03             	cmp    ebx,0x3
c00029bd:	75 7a                	jne    c0002a39 <mount_volume+0x338>
c00029bf:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029c5:	e8 a7 f2 ff ff       	call   c0001c71 <ld_word>
c00029ca:	66 48                	dec    ax
c00029cc:	75 6b                	jne    c0002a39 <mount_volume+0x338>
c00029ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d6:	83 c2 01             	add    edx,0x1
c00029d9:	89 e8                	mov    eax,ebp
c00029db:	83 d1 00             	adc    ecx,0x0
c00029de:	e8 6c fa ff ff       	call   c000244f <move_window>
c00029e3:	85 c0                	test   eax,eax
c00029e5:	75 52                	jne    c0002a39 <mount_volume+0x338>
c00029e7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029eb:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029f1:	e8 7b f2 ff ff       	call   c0001c71 <ld_word>
c00029f6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029fa:	75 3d                	jne    c0002a39 <mount_volume+0x338>
c00029fc:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ff:	e8 7a f2 ff ff       	call   c0001c7e <ld_dword>
c0002a04:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a09:	75 2e                	jne    c0002a39 <mount_volume+0x338>
c0002a0b:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a11:	e8 68 f2 ff ff       	call   c0001c7e <ld_dword>
c0002a16:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a1b:	75 1c                	jne    c0002a39 <mount_volume+0x338>
c0002a1d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a23:	e8 56 f2 ff ff       	call   c0001c7e <ld_dword>
c0002a28:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a2b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a31:	e8 48 f2 ff ff       	call   c0001c7e <ld_dword>
c0002a36:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a39:	66 a1 a0 ed 02 c0    	mov    ax,ds:0xc002eda0
c0002a3f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a42:	40                   	inc    eax
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	66 a3 a0 ed 02 c0    	mov    ds:0xc002eda0,ax
c0002a4b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a4f:	e9 0c 02 00 00       	jmp    c0002c60 <mount_volume+0x55f>
c0002a54:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a5a:	e8 12 f2 ff ff       	call   c0001c71 <ld_word>
c0002a5f:	66 3d 00 01          	cmp    ax,0x100
c0002a63:	0f 85 60 fd ff ff    	jne    c00027c9 <mount_volume+0xc8>
c0002a69:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a70:	0f 85 53 fd ff ff    	jne    c00027c9 <mount_volume+0xc8>
c0002a76:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a7c:	e8 15 f2 ff ff       	call   c0001c96 <ld_qword>
c0002a81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a89:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a8f:	e8 ea f1 ff ff       	call   c0001c7e <ld_dword>
c0002a94:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a97:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a9d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002aa0:	fe c8                	dec    al
c0002aa2:	0f 85 21 fd ff ff    	jne    c00027c9 <mount_volume+0xc8>
c0002aa8:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aaf:	bb 01 00 00 00       	mov    ebx,0x1
c0002ab4:	d3 e3                	shl    ebx,cl
c0002ab6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aba:	66 85 db             	test   bx,bx
c0002abd:	0f 84 06 fd ff ff    	je     c00027c9 <mount_volume+0xc8>
c0002ac3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac9:	e8 b0 f1 ff ff       	call   c0001c7e <ld_dword>
c0002ace:	89 c6                	mov    esi,eax
c0002ad0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ad5:	0f 87 ee fc ff ff    	ja     c00027c9 <mount_volume+0xc8>
c0002adb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002adf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ae2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ae5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aec:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aef:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002af5:	e8 84 f1 ff ff       	call   c0001c7e <ld_dword>
c0002afa:	31 d2                	xor    edx,edx
c0002afc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b00:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b0c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b0f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b12:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b18:	e8 61 f1 ff ff       	call   c0001c7e <ld_dword>
c0002b1d:	31 d2                	xor    edx,edx
c0002b1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b23:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b27:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b2b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b2e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b31:	0f b7 c3             	movzx  eax,bx
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	0f af f0             	imul   esi,eax
c0002b39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b3d:	89 f0                	mov    eax,esi
c0002b3f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b43:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b47:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b4f:	39 c1                	cmp    ecx,eax
c0002b51:	89 df                	mov    edi,ebx
c0002b53:	19 d7                	sbb    edi,edx
c0002b55:	0f 82 6e fc ff ff    	jb     c00027c9 <mount_volume+0xc8>
c0002b5b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b61:	31 db                	xor    ebx,ebx
c0002b63:	e8 16 f1 ff ff       	call   c0001c7e <ld_dword>
c0002b68:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b6f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b72:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b7a:	85 db                	test   ebx,ebx
c0002b7c:	75 39                	jne    c0002bb7 <mount_volume+0x4b6>
c0002b7e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b82:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b86:	0f 86 3d fc ff ff    	jbe    c00027c9 <mount_volume+0xc8>
c0002b8c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b8f:	31 ff                	xor    edi,edi
c0002b91:	89 e8                	mov    eax,ebp
c0002b93:	e8 72 f3 ff ff       	call   c0001f0a <clst2sect>
c0002b98:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b9c:	01 c6                	add    esi,eax
c0002b9e:	89 e8                	mov    eax,ebp
c0002ba0:	11 d7                	adc    edi,edx
c0002ba2:	89 f2                	mov    edx,esi
c0002ba4:	89 f9                	mov    ecx,edi
c0002ba6:	e8 a4 f8 ff ff       	call   c000244f <move_window>
c0002bab:	85 c0                	test   eax,eax
c0002bad:	0f 85 07 fc ff ff    	jne    c00027ba <mount_volume+0xb9>
c0002bb3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bb7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bbc:	74 0b                	je     c0002bc9 <mount_volume+0x4c8>
c0002bbe:	83 c3 20             	add    ebx,0x20
c0002bc1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bc7:	eb b1                	jmp    c0002b7a <mount_volume+0x479>
c0002bc9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bcc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bd0:	e8 a9 f0 ff ff       	call   c0001c7e <ld_dword>
c0002bd5:	89 c3                	mov    ebx,eax
c0002bd7:	83 f8 01             	cmp    eax,0x1
c0002bda:	0f 86 e9 fb ff ff    	jbe    c00027c9 <mount_volume+0xc8>
c0002be0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002be3:	0f 86 e0 fb ff ff    	jbe    c00027c9 <mount_volume+0xc8>
c0002be9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bec:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bf0:	0f af c2             	imul   eax,edx
c0002bf3:	31 d2                	xor    edx,edx
c0002bf5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bfb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bfe:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c01:	31 c9                	xor    ecx,ecx
c0002c03:	89 da                	mov    edx,ebx
c0002c05:	89 e8                	mov    eax,ebp
c0002c07:	c1 ea 07             	shr    edx,0x7
c0002c0a:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c0d:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c10:	e8 3a f8 ff ff       	call   c000244f <move_window>
c0002c15:	85 c0                	test   eax,eax
c0002c17:	0f 85 9d fb ff ff    	jne    c00027ba <mount_volume+0xb9>
c0002c1d:	89 d8                	mov    eax,ebx
c0002c1f:	83 e0 7f             	and    eax,0x7f
c0002c22:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c25:	e8 54 f0 ff ff       	call   c0001c7e <ld_dword>
c0002c2a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2d:	74 0a                	je     c0002c39 <mount_volume+0x538>
c0002c2f:	43                   	inc    ebx
c0002c30:	39 d8                	cmp    eax,ebx
c0002c32:	74 cd                	je     c0002c01 <mount_volume+0x500>
c0002c34:	e9 90 fb ff ff       	jmp    c00027c9 <mount_volume+0xc8>
c0002c39:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c40:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c47:	bb 04 00 00 00       	mov    ebx,0x4
c0002c4c:	e9 e8 fd ff ff       	jmp    c0002a39 <mount_volume+0x338>
c0002c51:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c56:	19 db                	sbb    ebx,ebx
c0002c58:	83 c3 02             	add    ebx,0x2
c0002c5b:	e9 93 fc ff ff       	jmp    c00028f3 <mount_volume+0x1f2>
c0002c60:	83 c4 3c             	add    esp,0x3c
c0002c63:	89 d8                	mov    eax,ebx
c0002c65:	5b                   	pop    ebx
c0002c66:	5e                   	pop    esi
c0002c67:	5f                   	pop    edi
c0002c68:	5d                   	pop    ebp
c0002c69:	c3                   	ret    

c0002c6a <find_bitmap>:
c0002c6a:	55                   	push   ebp
c0002c6b:	57                   	push   edi
c0002c6c:	89 c7                	mov    edi,eax
c0002c6e:	56                   	push   esi
c0002c6f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c72:	53                   	push   ebx
c0002c73:	83 ec 1c             	sub    esp,0x1c
c0002c76:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c7d:	83 e8 02             	sub    eax,0x2
c0002c80:	39 f0                	cmp    eax,esi
c0002c82:	77 02                	ja     c0002c86 <find_bitmap+0x1c>
c0002c84:	31 f6                	xor    esi,esi
c0002c86:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c8a:	89 f3                	mov    ebx,esi
c0002c8c:	31 ed                	xor    ebp,ebp
c0002c8e:	31 c9                	xor    ecx,ecx
c0002c90:	89 da                	mov    edx,ebx
c0002c92:	89 f8                	mov    eax,edi
c0002c94:	c1 ea 0c             	shr    edx,0xc
c0002c97:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c9a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c9d:	e8 ad f7 ff ff       	call   c000244f <move_window>
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 68                	jne    c0002d0e <find_bitmap+0xa4>
c0002ca6:	89 da                	mov    edx,ebx
c0002ca8:	89 d9                	mov    ecx,ebx
c0002caa:	c1 ea 03             	shr    edx,0x3
c0002cad:	83 e1 07             	and    ecx,0x7
c0002cb0:	b8 01 00 00 00       	mov    eax,0x1
c0002cb5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cbb:	d3 e0                	shl    eax,cl
c0002cbd:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cc0:	83 e9 02             	sub    ecx,0x2
c0002cc3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cc7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ccb:	43                   	inc    ebx
c0002ccc:	21 c1                	and    ecx,eax
c0002cce:	d1 e0                	shl    eax,1
c0002cd0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cd4:	77 09                	ja     c0002cdf <find_bitmap+0x75>
c0002cd6:	31 db                	xor    ebx,ebx
c0002cd8:	ba 00 02 00 00       	mov    edx,0x200
c0002cdd:	31 c0                	xor    eax,eax
c0002cdf:	84 c9                	test   cl,cl
c0002ce1:	75 10                	jne    c0002cf3 <find_bitmap+0x89>
c0002ce3:	45                   	inc    ebp
c0002ce4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce8:	75 0f                	jne    c0002cf9 <find_bitmap+0x8f>
c0002cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cee:	83 c0 02             	add    eax,0x2
c0002cf1:	eb 22                	jmp    c0002d15 <find_bitmap+0xab>
c0002cf3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cf7:	31 ed                	xor    ebp,ebp
c0002cf9:	39 de                	cmp    esi,ebx
c0002cfb:	74 16                	je     c0002d13 <find_bitmap+0xa9>
c0002cfd:	84 c0                	test   al,al
c0002cff:	75 c6                	jne    c0002cc7 <find_bitmap+0x5d>
c0002d01:	42                   	inc    edx
c0002d02:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d08:	77 84                	ja     c0002c8e <find_bitmap+0x24>
c0002d0a:	b0 01                	mov    al,0x1
c0002d0c:	eb b9                	jmp    c0002cc7 <find_bitmap+0x5d>
c0002d0e:	83 c8 ff             	or     eax,0xffffffff
c0002d11:	eb 02                	jmp    c0002d15 <find_bitmap+0xab>
c0002d13:	31 c0                	xor    eax,eax
c0002d15:	83 c4 1c             	add    esp,0x1c
c0002d18:	5b                   	pop    ebx
c0002d19:	5e                   	pop    esi
c0002d1a:	5f                   	pop    edi
c0002d1b:	5d                   	pop    ebp
c0002d1c:	c3                   	ret    

c0002d1d <change_bitmap>:
c0002d1d:	55                   	push   ebp
c0002d1e:	89 cd                	mov    ebp,ecx
c0002d20:	57                   	push   edi
c0002d21:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d24:	56                   	push   esi
c0002d25:	89 c7                	mov    edi,eax
c0002d27:	53                   	push   ebx
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	83 ec 1c             	sub    esp,0x1c
c0002d2d:	31 d2                	xor    edx,edx
c0002d2f:	89 ce                	mov    esi,ecx
c0002d31:	c1 e8 0c             	shr    eax,0xc
c0002d34:	bb 01 00 00 00       	mov    ebx,0x1
c0002d39:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d3c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d3f:	c1 ee 03             	shr    esi,0x3
c0002d42:	83 e1 07             	and    ecx,0x7
c0002d45:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d4b:	d3 e3                	shl    ebx,cl
c0002d4d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d51:	89 c1                	mov    ecx,eax
c0002d53:	89 d3                	mov    ebx,edx
c0002d55:	83 c1 01             	add    ecx,0x1
c0002d58:	83 d3 00             	adc    ebx,0x0
c0002d5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d5f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d63:	89 d1                	mov    ecx,edx
c0002d65:	89 c2                	mov    edx,eax
c0002d67:	89 f8                	mov    eax,edi
c0002d69:	e8 e1 f6 ff ff       	call   c000244f <move_window>
c0002d6e:	89 c1                	mov    ecx,eax
c0002d70:	85 c0                	test   eax,eax
c0002d72:	75 48                	jne    c0002dbc <change_bitmap+0x9f>
c0002d74:	31 d2                	xor    edx,edx
c0002d76:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d7a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d7e:	0f 95 c2             	setne  dl
c0002d81:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d85:	74 3c                	je     c0002dc3 <change_bitmap+0xa6>
c0002d87:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d8b:	4d                   	dec    ebp
c0002d8c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d90:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d94:	74 32                	je     c0002dc8 <change_bitmap+0xab>
c0002d96:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d9a:	75 d8                	jne    c0002d74 <change_bitmap+0x57>
c0002d9c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d9f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002da4:	89 c3                	mov    ebx,eax
c0002da6:	31 f6                	xor    esi,esi
c0002da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002dac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002db0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002db6:	74 99                	je     c0002d51 <change_bitmap+0x34>
c0002db8:	89 de                	mov    esi,ebx
c0002dba:	eb b8                	jmp    c0002d74 <change_bitmap+0x57>
c0002dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc1:	eb 05                	jmp    c0002dc8 <change_bitmap+0xab>
c0002dc3:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc8:	83 c4 1c             	add    esp,0x1c
c0002dcb:	89 c8                	mov    eax,ecx
c0002dcd:	5b                   	pop    ebx
c0002dce:	5e                   	pop    esi
c0002dcf:	5f                   	pop    edi
c0002dd0:	5d                   	pop    ebp
c0002dd1:	c3                   	ret    

c0002dd2 <put_fat>:
c0002dd2:	83 fa 01             	cmp    edx,0x1
c0002dd5:	0f 86 7b 01 00 00    	jbe    c0002f56 <put_fat+0x184>
c0002ddb:	55                   	push   ebp
c0002ddc:	57                   	push   edi
c0002ddd:	89 cf                	mov    edi,ecx
c0002ddf:	56                   	push   esi
c0002de0:	b9 02 00 00 00       	mov    ecx,0x2
c0002de5:	53                   	push   ebx
c0002de6:	89 c6                	mov    esi,eax
c0002de8:	83 ec 1c             	sub    esp,0x1c
c0002deb:	89 d3                	mov    ebx,edx
c0002ded:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002df0:	0f 86 68 01 00 00    	jbe    c0002f5e <put_fat+0x18c>
c0002df6:	8a 00                	mov    al,BYTE PTR [eax]
c0002df8:	3c 02                	cmp    al,0x2
c0002dfa:	0f 84 c7 00 00 00    	je     c0002ec7 <put_fat+0xf5>
c0002e00:	77 09                	ja     c0002e0b <put_fat+0x39>
c0002e02:	fe c8                	dec    al
c0002e04:	74 17                	je     c0002e1d <put_fat+0x4b>
c0002e06:	e9 53 01 00 00       	jmp    c0002f5e <put_fat+0x18c>
c0002e0b:	b9 02 00 00 00       	mov    ecx,0x2
c0002e10:	3c 04                	cmp    al,0x4
c0002e12:	0f 86 e1 00 00 00    	jbe    c0002ef9 <put_fat+0x127>
c0002e18:	e9 41 01 00 00       	jmp    c0002f5e <put_fat+0x18c>
c0002e1d:	89 d5                	mov    ebp,edx
c0002e1f:	31 c9                	xor    ecx,ecx
c0002e21:	d1 ed                	shr    ebp,1
c0002e23:	89 f0                	mov    eax,esi
c0002e25:	01 d5                	add    ebp,edx
c0002e27:	89 ea                	mov    edx,ebp
c0002e29:	c1 ea 09             	shr    edx,0x9
c0002e2c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e2f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e32:	e8 18 f6 ff ff       	call   c000244f <move_window>
c0002e37:	89 c1                	mov    ecx,eax
c0002e39:	85 c0                	test   eax,eax
c0002e3b:	0f 85 1d 01 00 00    	jne    c0002f5e <put_fat+0x18c>
c0002e41:	8d 46 54             	lea    eax,[esi+0x54]
c0002e44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e48:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e4b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e55:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e59:	89 f8                	mov    eax,edi
c0002e5b:	83 e3 01             	and    ebx,0x1
c0002e5e:	74 0d                	je     c0002e6d <put_fat+0x9b>
c0002e60:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e63:	89 fa                	mov    edx,edi
c0002e65:	83 e0 0f             	and    eax,0xf
c0002e68:	c1 e2 04             	shl    edx,0x4
c0002e6b:	09 d0                	or     eax,edx
c0002e6d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e74:	31 c9                	xor    ecx,ecx
c0002e76:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e7a:	c1 ea 09             	shr    edx,0x9
c0002e7d:	89 f0                	mov    eax,esi
c0002e7f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e82:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e85:	e8 c5 f5 ff ff       	call   c000244f <move_window>
c0002e8a:	89 c1                	mov    ecx,eax
c0002e8c:	85 c0                	test   eax,eax
c0002e8e:	0f 85 ca 00 00 00    	jne    c0002f5e <put_fat+0x18c>
c0002e94:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e98:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e9e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002ea2:	85 db                	test   ebx,ebx
c0002ea4:	74 07                	je     c0002ead <put_fat+0xdb>
c0002ea6:	c1 ef 04             	shr    edi,0x4
c0002ea9:	89 fa                	mov    edx,edi
c0002eab:	eb 0e                	jmp    c0002ebb <put_fat+0xe9>
c0002ead:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eb0:	c1 ef 08             	shr    edi,0x8
c0002eb3:	83 e2 f0             	and    edx,0xfffffff0
c0002eb6:	83 e7 0f             	and    edi,0xf
c0002eb9:	09 fa                	or     edx,edi
c0002ebb:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ebe:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ec2:	e9 97 00 00 00       	jmp    c0002f5e <put_fat+0x18c>
c0002ec7:	31 c9                	xor    ecx,ecx
c0002ec9:	c1 ea 08             	shr    edx,0x8
c0002ecc:	89 f0                	mov    eax,esi
c0002ece:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed4:	e8 76 f5 ff ff       	call   c000244f <move_window>
c0002ed9:	89 c1                	mov    ecx,eax
c0002edb:	85 c0                	test   eax,eax
c0002edd:	75 7f                	jne    c0002f5e <put_fat+0x18c>
c0002edf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ee3:	01 db                	add    ebx,ebx
c0002ee5:	0f b7 d7             	movzx  edx,di
c0002ee8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002eee:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ef2:	e8 ec ed ff ff       	call   c0001ce3 <st_word>
c0002ef7:	eb 53                	jmp    c0002f4c <put_fat+0x17a>
c0002ef9:	31 c9                	xor    ecx,ecx
c0002efb:	c1 ea 07             	shr    edx,0x7
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f03:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f06:	e8 44 f5 ff ff       	call   c000244f <move_window>
c0002f0b:	89 c1                	mov    ecx,eax
c0002f0d:	85 c0                	test   eax,eax
c0002f0f:	75 4d                	jne    c0002f5e <put_fat+0x18c>
c0002f11:	c1 e3 02             	shl    ebx,0x2
c0002f14:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f1a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f1d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f21:	74 1c                	je     c0002f3f <put_fat+0x16d>
c0002f23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f27:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f2d:	89 d8                	mov    eax,ebx
c0002f2f:	e8 4a ed ff ff       	call   c0001c7e <ld_dword>
c0002f34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f38:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f3d:	09 c7                	or     edi,eax
c0002f3f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f43:	89 fa                	mov    edx,edi
c0002f45:	89 d8                	mov    eax,ebx
c0002f47:	e8 9b ed ff ff       	call   c0001ce7 <st_dword>
c0002f4c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f54:	eb 08                	jmp    c0002f5e <put_fat+0x18c>
c0002f56:	b9 02 00 00 00       	mov    ecx,0x2
c0002f5b:	89 c8                	mov    eax,ecx
c0002f5d:	c3                   	ret    
c0002f5e:	83 c4 1c             	add    esp,0x1c
c0002f61:	89 c8                	mov    eax,ecx
c0002f63:	5b                   	pop    ebx
c0002f64:	5e                   	pop    esi
c0002f65:	5f                   	pop    edi
c0002f66:	5d                   	pop    ebp
c0002f67:	c3                   	ret    

c0002f68 <fill_last_frag>:
c0002f68:	57                   	push   edi
c0002f69:	89 cf                	mov    edi,ecx
c0002f6b:	56                   	push   esi
c0002f6c:	89 d6                	mov    esi,edx
c0002f6e:	53                   	push   ebx
c0002f6f:	89 c3                	mov    ebx,eax
c0002f71:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f74:	85 c0                	test   eax,eax
c0002f76:	74 21                	je     c0002f99 <fill_last_frag+0x31>
c0002f78:	89 f9                	mov    ecx,edi
c0002f7a:	83 f8 01             	cmp    eax,0x1
c0002f7d:	76 05                	jbe    c0002f84 <fill_last_frag+0x1c>
c0002f7f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f82:	29 c1                	sub    ecx,eax
c0002f84:	8d 56 01             	lea    edx,[esi+0x1]
c0002f87:	29 c2                	sub    edx,eax
c0002f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8b:	e8 42 fe ff ff       	call   c0002dd2 <put_fat>
c0002f90:	85 c0                	test   eax,eax
c0002f92:	75 05                	jne    c0002f99 <fill_last_frag+0x31>
c0002f94:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f97:	eb d8                	jmp    c0002f71 <fill_last_frag+0x9>
c0002f99:	5b                   	pop    ebx
c0002f9a:	5e                   	pop    esi
c0002f9b:	5f                   	pop    edi
c0002f9c:	c3                   	ret    

c0002f9d <fill_first_frag>:
c0002f9d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fa1:	75 2d                	jne    c0002fd0 <fill_first_frag+0x33>
c0002fa3:	57                   	push   edi
c0002fa4:	56                   	push   esi
c0002fa5:	53                   	push   ebx
c0002fa6:	89 c3                	mov    ebx,eax
c0002fa8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fab:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fae:	01 d7                	add    edi,edx
c0002fb0:	39 fa                	cmp    edx,edi
c0002fb2:	74 14                	je     c0002fc8 <fill_first_frag+0x2b>
c0002fb4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb9:	89 f1                	mov    ecx,esi
c0002fbb:	e8 12 fe ff ff       	call   c0002dd2 <put_fat>
c0002fc0:	89 f2                	mov    edx,esi
c0002fc2:	85 c0                	test   eax,eax
c0002fc4:	74 ea                	je     c0002fb0 <fill_first_frag+0x13>
c0002fc6:	eb 0b                	jmp    c0002fd3 <fill_first_frag+0x36>
c0002fc8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fcc:	31 c0                	xor    eax,eax
c0002fce:	eb 03                	jmp    c0002fd3 <fill_first_frag+0x36>
c0002fd0:	31 c0                	xor    eax,eax
c0002fd2:	c3                   	ret    
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <get_fat>:
c0002fd7:	83 fa 01             	cmp    edx,0x1
c0002fda:	0f 86 db 01 00 00    	jbe    c00031bb <get_fat+0x1e4>
c0002fe0:	55                   	push   ebp
c0002fe1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fe6:	57                   	push   edi
c0002fe7:	56                   	push   esi
c0002fe8:	53                   	push   ebx
c0002fe9:	83 ec 1c             	sub    esp,0x1c
c0002fec:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fee:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ff1:	0f 86 cc 01 00 00    	jbe    c00031c3 <get_fat+0x1ec>
c0002ff7:	89 c3                	mov    ebx,eax
c0002ff9:	89 d6                	mov    esi,edx
c0002ffb:	8a 07                	mov    al,BYTE PTR [edi]
c0002ffd:	3c 02                	cmp    al,0x2
c0002fff:	0f 84 99 00 00 00    	je     c000309e <get_fat+0xc7>
c0003005:	77 09                	ja     c0003010 <get_fat+0x39>
c0003007:	fe c8                	dec    al
c0003009:	74 1a                	je     c0003025 <get_fat+0x4e>
c000300b:	e9 b3 01 00 00       	jmp    c00031c3 <get_fat+0x1ec>
c0003010:	3c 03                	cmp    al,0x3
c0003012:	0f 84 b5 00 00 00    	je     c00030cd <get_fat+0xf6>
c0003018:	3c 04                	cmp    al,0x4
c000301a:	0f 84 e3 00 00 00    	je     c0003103 <get_fat+0x12c>
c0003020:	e9 9e 01 00 00       	jmp    c00031c3 <get_fat+0x1ec>
c0003025:	89 d3                	mov    ebx,edx
c0003027:	31 c9                	xor    ecx,ecx
c0003029:	d1 eb                	shr    ebx,1
c000302b:	89 f8                	mov    eax,edi
c000302d:	01 d3                	add    ebx,edx
c000302f:	89 da                	mov    edx,ebx
c0003031:	c1 ea 09             	shr    edx,0x9
c0003034:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003037:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000303a:	e8 10 f4 ff ff       	call   c000244f <move_window>
c000303f:	85 c0                	test   eax,eax
c0003041:	74 08                	je     c000304b <get_fat+0x74>
c0003043:	83 c9 ff             	or     ecx,0xffffffff
c0003046:	e9 78 01 00 00       	jmp    c00031c3 <get_fat+0x1ec>
c000304b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000304e:	31 c9                	xor    ecx,ecx
c0003050:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003056:	89 ea                	mov    edx,ebp
c0003058:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000305c:	c1 ea 09             	shr    edx,0x9
c000305f:	89 f8                	mov    eax,edi
c0003061:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003064:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003067:	e8 e3 f3 ff ff       	call   c000244f <move_window>
c000306c:	85 c0                	test   eax,eax
c000306e:	75 d3                	jne    c0003043 <get_fat+0x6c>
c0003070:	0f b6 c3             	movzx  eax,bl
c0003073:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003079:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000307e:	c1 e3 08             	shl    ebx,0x8
c0003081:	09 c3                	or     ebx,eax
c0003083:	89 d9                	mov    ecx,ebx
c0003085:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000308b:	83 e6 01             	and    esi,0x1
c000308e:	0f 84 2f 01 00 00    	je     c00031c3 <get_fat+0x1ec>
c0003094:	89 d9                	mov    ecx,ebx
c0003096:	c1 e9 04             	shr    ecx,0x4
c0003099:	e9 25 01 00 00       	jmp    c00031c3 <get_fat+0x1ec>
c000309e:	31 c9                	xor    ecx,ecx
c00030a0:	c1 ea 08             	shr    edx,0x8
c00030a3:	89 f8                	mov    eax,edi
c00030a5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ab:	e8 9f f3 ff ff       	call   c000244f <move_window>
c00030b0:	85 c0                	test   eax,eax
c00030b2:	75 8f                	jne    c0003043 <get_fat+0x6c>
c00030b4:	01 f6                	add    esi,esi
c00030b6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030bc:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c0:	e8 ac eb ff ff       	call   c0001c71 <ld_word>
c00030c5:	0f b7 c8             	movzx  ecx,ax
c00030c8:	e9 f6 00 00 00       	jmp    c00031c3 <get_fat+0x1ec>
c00030cd:	31 c9                	xor    ecx,ecx
c00030cf:	c1 ea 07             	shr    edx,0x7
c00030d2:	89 f8                	mov    eax,edi
c00030d4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030d7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030da:	e8 70 f3 ff ff       	call   c000244f <move_window>
c00030df:	85 c0                	test   eax,eax
c00030e1:	0f 85 5c ff ff ff    	jne    c0003043 <get_fat+0x6c>
c00030e7:	c1 e6 02             	shl    esi,0x2
c00030ea:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030f0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030f4:	e8 85 eb ff ff       	call   c0001c7e <ld_dword>
c00030f9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030fe:	e9 b4 00 00 00       	jmp    c00031b7 <get_fat+0x1e0>
c0003103:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003106:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003109:	89 d1                	mov    ecx,edx
c000310b:	09 c1                	or     ecx,eax
c000310d:	74 06                	je     c0003115 <get_fat+0x13e>
c000310f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003113:	75 0f                	jne    c0003124 <get_fat+0x14d>
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000311e:	0f 85 9f 00 00 00    	jne    c00031c3 <get_fat+0x1ec>
c0003124:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003128:	89 f5                	mov    ebp,esi
c000312a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000312f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003132:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003135:	80 f9 02             	cmp    cl,0x2
c0003138:	75 35                	jne    c000316f <get_fat+0x198>
c000313a:	83 c0 ff             	add    eax,0xffffffff
c000313d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003142:	83 d2 ff             	adc    edx,0xffffffff
c0003145:	31 db                	xor    ebx,ebx
c0003147:	0f ac d0 09          	shrd   eax,edx,0x9
c000314b:	53                   	push   ebx
c000314c:	c1 ea 09             	shr    edx,0x9
c000314f:	51                   	push   ecx
c0003150:	52                   	push   edx
c0003151:	50                   	push   eax
c0003152:	e8 4d 40 02 00       	call   c00271a4 <__udivdi3>
c0003157:	83 c4 10             	add    esp,0x10
c000315a:	b9 01 00 00 00       	mov    ecx,0x1
c000315f:	39 c5                	cmp    ebp,eax
c0003161:	77 60                	ja     c00031c3 <get_fat+0x1ec>
c0003163:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003168:	74 59                	je     c00031c3 <get_fat+0x1ec>
c000316a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000316d:	eb 54                	jmp    c00031c3 <get_fat+0x1ec>
c000316f:	80 f9 03             	cmp    cl,0x3
c0003172:	75 05                	jne    c0003179 <get_fat+0x1a2>
c0003174:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003177:	77 f1                	ja     c000316a <get_fat+0x193>
c0003179:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000317e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003182:	75 3f                	jne    c00031c3 <get_fat+0x1ec>
c0003184:	31 c9                	xor    ecx,ecx
c0003186:	89 f2                	mov    edx,esi
c0003188:	89 f8                	mov    eax,edi
c000318a:	c1 ea 07             	shr    edx,0x7
c000318d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003190:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003193:	e8 b7 f2 ff ff       	call   c000244f <move_window>
c0003198:	85 c0                	test   eax,eax
c000319a:	0f 85 a3 fe ff ff    	jne    c0003043 <get_fat+0x6c>
c00031a0:	c1 e6 02             	shl    esi,0x2
c00031a3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ad:	e8 cc ea ff ff       	call   c0001c7e <ld_dword>
c00031b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031b7:	89 c1                	mov    ecx,eax
c00031b9:	eb 08                	jmp    c00031c3 <get_fat+0x1ec>
c00031bb:	b9 01 00 00 00       	mov    ecx,0x1
c00031c0:	89 c8                	mov    eax,ecx
c00031c2:	c3                   	ret    
c00031c3:	83 c4 1c             	add    esp,0x1c
c00031c6:	89 c8                	mov    eax,ecx
c00031c8:	5b                   	pop    ebx
c00031c9:	5e                   	pop    esi
c00031ca:	5f                   	pop    edi
c00031cb:	5d                   	pop    ebp
c00031cc:	c3                   	ret    

c00031cd <dir_sdi>:
c00031cd:	55                   	push   ebp
c00031ce:	57                   	push   edi
c00031cf:	56                   	push   esi
c00031d0:	53                   	push   ebx
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 ec 1c             	sub    esp,0x1c
c00031d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d8:	31 c0                	xor    eax,eax
c00031da:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031dd:	0f 94 c0             	sete   al
c00031e0:	48                   	dec    eax
c00031e1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031e6:	05 00 00 00 10       	add    eax,0x10000000
c00031eb:	39 d0                	cmp    eax,edx
c00031ed:	77 0a                	ja     c00031f9 <dir_sdi+0x2c>
c00031ef:	b8 02 00 00 00       	mov    eax,0x2
c00031f4:	e9 c4 00 00 00       	jmp    c00032bd <dir_sdi+0xf0>
c00031f9:	89 d6                	mov    esi,edx
c00031fb:	f6 c2 1f             	test   dl,0x1f
c00031fe:	75 ef                	jne    c00031ef <dir_sdi+0x22>
c0003200:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003203:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003206:	85 c9                	test   ecx,ecx
c0003208:	75 2d                	jne    c0003237 <dir_sdi+0x6a>
c000320a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000320d:	77 1b                	ja     c000322a <dir_sdi+0x5d>
c000320f:	89 f2                	mov    edx,esi
c0003211:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003215:	c1 ea 05             	shr    edx,0x5
c0003218:	39 c2                	cmp    edx,eax
c000321a:	73 d3                	jae    c00031ef <dir_sdi+0x22>
c000321c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003222:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003225:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003228:	eb 4b                	jmp    c0003275 <dir_sdi+0xa8>
c000322a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000322d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003231:	85 c0                	test   eax,eax
c0003233:	74 da                	je     c000320f <dir_sdi+0x42>
c0003235:	89 c1                	mov    ecx,eax
c0003237:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000323b:	c1 e5 09             	shl    ebp,0x9
c000323e:	89 ca                	mov    edx,ecx
c0003240:	39 ee                	cmp    esi,ebp
c0003242:	72 1c                	jb     c0003260 <dir_sdi+0x93>
c0003244:	89 d8                	mov    eax,ebx
c0003246:	e8 8c fd ff ff       	call   c0002fd7 <get_fat>
c000324b:	89 c1                	mov    ecx,eax
c000324d:	83 f8 ff             	cmp    eax,0xffffffff
c0003250:	74 66                	je     c00032b8 <dir_sdi+0xeb>
c0003252:	83 f8 01             	cmp    eax,0x1
c0003255:	76 98                	jbe    c00031ef <dir_sdi+0x22>
c0003257:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000325a:	76 93                	jbe    c00031ef <dir_sdi+0x22>
c000325c:	29 ee                	sub    esi,ebp
c000325e:	eb de                	jmp    c000323e <dir_sdi+0x71>
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	89 f8                	mov    eax,edi
c0003266:	e8 9f ec ff ff       	call   c0001f0a <clst2sect>
c000326b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000326f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003272:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003275:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003278:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000327b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000327e:	89 d1                	mov    ecx,edx
c0003280:	09 c1                	or     ecx,eax
c0003282:	0f 84 67 ff ff ff    	je     c00031ef <dir_sdi+0x22>
c0003288:	89 f1                	mov    ecx,esi
c000328a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003292:	c1 e9 09             	shr    ecx,0x9
c0003295:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003299:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000329d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032a1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032a4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032ad:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032b1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xf0>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    

c00032c5 <create_chain>:
c00032c5:	55                   	push   ebp
c00032c6:	89 c5                	mov    ebp,eax
c00032c8:	57                   	push   edi
c00032c9:	56                   	push   esi
c00032ca:	53                   	push   ebx
c00032cb:	83 ec 1c             	sub    esp,0x1c
c00032ce:	85 d2                	test   edx,edx
c00032d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032d4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032d6:	75 0e                	jne    c00032e6 <create_chain+0x21>
c00032d8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032db:	85 ff                	test   edi,edi
c00032dd:	74 39                	je     c0003318 <create_chain+0x53>
c00032df:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032e2:	77 39                	ja     c000331d <create_chain+0x58>
c00032e4:	eb 32                	jmp    c0003318 <create_chain+0x53>
c00032e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032ea:	e8 e8 fc ff ff       	call   c0002fd7 <get_fat>
c00032ef:	89 c3                	mov    ebx,eax
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	77 0a                	ja     c0003300 <create_chain+0x3b>
c00032f6:	bb 01 00 00 00       	mov    ebx,0x1
c00032fb:	e9 ba 01 00 00       	jmp    c00034ba <create_chain+0x1f5>
c0003300:	83 f8 ff             	cmp    eax,0xffffffff
c0003303:	0f 84 62 01 00 00    	je     c000346b <create_chain+0x1a6>
c0003309:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000330c:	0f 87 a8 01 00 00    	ja     c00034ba <create_chain+0x1f5>
c0003312:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003316:	eb 05                	jmp    c000331d <create_chain+0x58>
c0003318:	bf 01 00 00 00       	mov    edi,0x1
c000331d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003321:	75 07                	jne    c000332a <create_chain+0x65>
c0003323:	31 db                	xor    ebx,ebx
c0003325:	e9 90 01 00 00       	jmp    c00034ba <create_chain+0x1f5>
c000332a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000332d:	75 74                	jne    c00033a3 <create_chain+0xde>
c000332f:	b9 01 00 00 00       	mov    ecx,0x1
c0003334:	89 fa                	mov    edx,edi
c0003336:	89 f0                	mov    eax,esi
c0003338:	e8 2d f9 ff ff       	call   c0002c6a <find_bitmap>
c000333d:	89 c3                	mov    ebx,eax
c000333f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003342:	83 f8 fd             	cmp    eax,0xfffffffd
c0003345:	0f 87 6f 01 00 00    	ja     c00034ba <create_chain+0x1f5>
c000334b:	83 ec 0c             	sub    esp,0xc
c000334e:	b9 01 00 00 00       	mov    ecx,0x1
c0003353:	6a 01                	push   0x1
c0003355:	89 da                	mov    edx,ebx
c0003357:	89 f0                	mov    eax,esi
c0003359:	e8 bf f9 ff ff       	call   c0002d1d <change_bitmap>
c000335e:	83 c4 10             	add    esp,0x10
c0003361:	83 f8 02             	cmp    eax,0x2
c0003364:	74 90                	je     c00032f6 <create_chain+0x31>
c0003366:	83 f8 01             	cmp    eax,0x1
c0003369:	0f 84 fc 00 00 00    	je     c000346b <create_chain+0x1a6>
c000336f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003374:	75 09                	jne    c000337f <create_chain+0xba>
c0003376:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000337a:	e9 0c 01 00 00       	jmp    c000348b <create_chain+0x1c6>
c000337f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003383:	0f 85 e7 00 00 00    	jne    c0003470 <create_chain+0x1ab>
c0003389:	8d 57 01             	lea    edx,[edi+0x1]
c000338c:	39 da                	cmp    edx,ebx
c000338e:	0f 84 f7 00 00 00    	je     c000348b <create_chain+0x1c6>
c0003394:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003397:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000339b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000339e:	e9 cd 00 00 00       	jmp    c0003470 <create_chain+0x1ab>
c00033a3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033a7:	75 41                	jne    c00033ea <create_chain+0x125>
c00033a9:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033ac:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033af:	77 05                	ja     c00033b6 <create_chain+0xf1>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 18 fc ff ff       	call   c0002fd7 <get_fat>
c00033bf:	83 f8 01             	cmp    eax,0x1
c00033c2:	0f 84 2e ff ff ff    	je     c00032f6 <create_chain+0x31>
c00033c8:	83 f8 ff             	cmp    eax,0xffffffff
c00033cb:	0f 84 9a 00 00 00    	je     c000346b <create_chain+0x1a6>
c00033d1:	85 c0                	test   eax,eax
c00033d3:	74 11                	je     c00033e6 <create_chain+0x121>
c00033d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d8:	83 f8 01             	cmp    eax,0x1
c00033db:	76 0d                	jbe    c00033ea <create_chain+0x125>
c00033dd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033e0:	76 08                	jbe    c00033ea <create_chain+0x125>
c00033e2:	89 c7                	mov    edi,eax
c00033e4:	eb 04                	jmp    c00033ea <create_chain+0x125>
c00033e6:	85 db                	test   ebx,ebx
c00033e8:	75 38                	jne    c0003422 <create_chain+0x15d>
c00033ea:	89 fb                	mov    ebx,edi
c00033ec:	43                   	inc    ebx
c00033ed:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033f0:	77 0e                	ja     c0003400 <create_chain+0x13b>
c00033f2:	83 ff 01             	cmp    edi,0x1
c00033f5:	0f 86 28 ff ff ff    	jbe    c0003323 <create_chain+0x5e>
c00033fb:	bb 02 00 00 00       	mov    ebx,0x2
c0003400:	89 da                	mov    edx,ebx
c0003402:	89 e8                	mov    eax,ebp
c0003404:	e8 ce fb ff ff       	call   c0002fd7 <get_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 15                	je     c0003422 <create_chain+0x15d>
c000340d:	83 f8 01             	cmp    eax,0x1
c0003410:	0f 84 e0 fe ff ff    	je     c00032f6 <create_chain+0x31>
c0003416:	40                   	inc    eax
c0003417:	74 52                	je     c000346b <create_chain+0x1a6>
c0003419:	39 fb                	cmp    ebx,edi
c000341b:	75 cf                	jne    c00033ec <create_chain+0x127>
c000341d:	e9 01 ff ff ff       	jmp    c0003323 <create_chain+0x5e>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 da                	mov    edx,ebx
c0003427:	89 f0                	mov    eax,esi
c0003429:	e8 a4 f9 ff ff       	call   c0002dd2 <put_fat>
c000342e:	85 c0                	test   eax,eax
c0003430:	75 32                	jne    c0003464 <create_chain+0x19f>
c0003432:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003437:	74 11                	je     c000344a <create_chain+0x185>
c0003439:	89 d9                	mov    ecx,ebx
c000343b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000343f:	89 f0                	mov    eax,esi
c0003441:	e8 8c f9 ff ff       	call   c0002dd2 <put_fat>
c0003446:	85 c0                	test   eax,eax
c0003448:	75 1a                	jne    c0003464 <create_chain+0x19f>
c000344a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000344d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003450:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003453:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003456:	39 d0                	cmp    eax,edx
c0003458:	77 04                	ja     c000345e <create_chain+0x199>
c000345a:	48                   	dec    eax
c000345b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000345e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003462:	eb 56                	jmp    c00034ba <create_chain+0x1f5>
c0003464:	48                   	dec    eax
c0003465:	0f 85 8b fe ff ff    	jne    c00032f6 <create_chain+0x31>
c000346b:	83 cb ff             	or     ebx,0xffffffff
c000346e:	eb 4a                	jmp    c00034ba <create_chain+0x1f5>
c0003470:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003474:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003477:	41                   	inc    ecx
c0003478:	39 d9                	cmp    ecx,ebx
c000347a:	75 19                	jne    c0003495 <create_chain+0x1d0>
c000347c:	b9 02 00 00 00       	mov    ecx,0x2
c0003481:	85 d2                	test   edx,edx
c0003483:	74 03                	je     c0003488 <create_chain+0x1c3>
c0003485:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003488:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000348b:	85 c0                	test   eax,eax
c000348d:	0f 85 63 fe ff ff    	jne    c00032f6 <create_chain+0x31>
c0003493:	eb b5                	jmp    c000344a <create_chain+0x185>
c0003495:	85 d2                	test   edx,edx
c0003497:	75 07                	jne    c00034a0 <create_chain+0x1db>
c0003499:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a0:	89 d9                	mov    ecx,ebx
c00034a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034a6:	89 e8                	mov    eax,ebp
c00034a8:	e8 bb fa ff ff       	call   c0002f68 <fill_last_frag>
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 b3                	jne    c0003464 <create_chain+0x19f>
c00034b1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b8:	eb 90                	jmp    c000344a <create_chain+0x185>
c00034ba:	83 c4 1c             	add    esp,0x1c
c00034bd:	89 d8                	mov    eax,ebx
c00034bf:	5b                   	pop    ebx
c00034c0:	5e                   	pop    esi
c00034c1:	5f                   	pop    edi
c00034c2:	5d                   	pop    ebp
c00034c3:	c3                   	ret    

c00034c4 <remove_chain>:
c00034c4:	55                   	push   ebp
c00034c5:	57                   	push   edi
c00034c6:	56                   	push   esi
c00034c7:	53                   	push   ebx
c00034c8:	83 ec 1c             	sub    esp,0x1c
c00034cb:	83 fa 01             	cmp    edx,0x1
c00034ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034d2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034d4:	77 0a                	ja     c00034e0 <remove_chain+0x1c>
c00034d6:	b8 02 00 00 00       	mov    eax,0x2
c00034db:	e9 24 01 00 00       	jmp    c0003604 <remove_chain+0x140>
c00034e0:	89 d6                	mov    esi,edx
c00034e2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034e5:	76 ef                	jbe    c00034d6 <remove_chain+0x12>
c00034e7:	89 c7                	mov    edi,eax
c00034e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034ee:	75 06                	jne    c00034f6 <remove_chain+0x32>
c00034f0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034f4:	eb 54                	jmp    c000354a <remove_chain+0x86>
c00034f6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f9:	75 06                	jne    c0003501 <remove_chain+0x3d>
c00034fb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ff:	74 ef                	je     c00034f0 <remove_chain+0x2c>
c0003501:	83 c9 ff             	or     ecx,0xffffffff
c0003504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003508:	89 d8                	mov    eax,ebx
c000350a:	e8 c3 f8 ff ff       	call   c0002dd2 <put_fat>
c000350f:	85 c0                	test   eax,eax
c0003511:	74 dd                	je     c00034f0 <remove_chain+0x2c>
c0003513:	e9 ec 00 00 00       	jmp    c0003604 <remove_chain+0x140>
c0003518:	83 f8 01             	cmp    eax,0x1
c000351b:	74 b9                	je     c00034d6 <remove_chain+0x12>
c000351d:	83 f8 ff             	cmp    eax,0xffffffff
c0003520:	74 6d                	je     c000358f <remove_chain+0xcb>
c0003522:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003525:	75 6f                	jne    c0003596 <remove_chain+0xd2>
c0003527:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000352a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000352d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003530:	39 d0                	cmp    eax,edx
c0003532:	73 08                	jae    c000353c <remove_chain+0x78>
c0003534:	40                   	inc    eax
c0003535:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003539:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000353c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000353f:	39 e9                	cmp    ecx,ebp
c0003541:	75 64                	jne    c00035a7 <remove_chain+0xe3>
c0003543:	89 ee                	mov    esi,ebp
c0003545:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003548:	76 0f                	jbe    c0003559 <remove_chain+0x95>
c000354a:	89 f2                	mov    edx,esi
c000354c:	89 f8                	mov    eax,edi
c000354e:	e8 84 fa ff ff       	call   c0002fd7 <get_fat>
c0003553:	89 c5                	mov    ebp,eax
c0003555:	85 c0                	test   eax,eax
c0003557:	75 bf                	jne    c0003518 <remove_chain+0x54>
c0003559:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355c:	0f 85 a0 00 00 00    	jne    c0003602 <remove_chain+0x13e>
c0003562:	eb 6c                	jmp    c00035d0 <remove_chain+0x10c>
c0003564:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003567:	84 c0                	test   al,al
c0003569:	75 7d                	jne    c00035e8 <remove_chain+0x124>
c000356b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000356e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003572:	0f 84 86 00 00 00    	je     c00035fe <remove_chain+0x13a>
c0003578:	89 da                	mov    edx,ebx
c000357a:	89 f8                	mov    eax,edi
c000357c:	e8 56 fa ff ff       	call   c0002fd7 <get_fat>
c0003581:	83 f8 01             	cmp    eax,0x1
c0003584:	0f 86 4c ff ff ff    	jbe    c00034d6 <remove_chain+0x12>
c000358a:	83 f8 ff             	cmp    eax,0xffffffff
c000358d:	75 4e                	jne    c00035dd <remove_chain+0x119>
c000358f:	b8 01 00 00 00       	mov    eax,0x1
c0003594:	eb 6e                	jmp    c0003604 <remove_chain+0x140>
c0003596:	31 c9                	xor    ecx,ecx
c0003598:	89 f2                	mov    edx,esi
c000359a:	89 d8                	mov    eax,ebx
c000359c:	e8 31 f8 ff ff       	call   c0002dd2 <put_fat>
c00035a1:	85 c0                	test   eax,eax
c00035a3:	74 82                	je     c0003527 <remove_chain+0x63>
c00035a5:	eb 5d                	jmp    c0003604 <remove_chain+0x140>
c00035a7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035aa:	75 1b                	jne    c00035c7 <remove_chain+0x103>
c00035ac:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035b0:	89 d8                	mov    eax,ebx
c00035b2:	83 ec 0c             	sub    esp,0xc
c00035b5:	6a 00                	push   0x0
c00035b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035bb:	e8 5d f7 ff ff       	call   c0002d1d <change_bitmap>
c00035c0:	83 c4 10             	add    esp,0x10
c00035c3:	85 c0                	test   eax,eax
c00035c5:	75 3d                	jne    c0003604 <remove_chain+0x140>
c00035c7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035cb:	e9 73 ff ff ff       	jmp    c0003543 <remove_chain+0x7f>
c00035d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035d5:	75 8d                	jne    c0003564 <remove_chain+0xa0>
c00035d7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035db:	eb 25                	jmp    c0003602 <remove_chain+0x13e>
c00035dd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035e0:	89 c3                	mov    ebx,eax
c00035e2:	39 c2                	cmp    edx,eax
c00035e4:	74 88                	je     c000356e <remove_chain+0xaa>
c00035e6:	eb 1a                	jmp    c0003602 <remove_chain+0x13e>
c00035e8:	3c 03                	cmp    al,0x3
c00035ea:	75 16                	jne    c0003602 <remove_chain+0x13e>
c00035ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035ef:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f3:	77 0d                	ja     c0003602 <remove_chain+0x13e>
c00035f5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035fc:	72 04                	jb     c0003602 <remove_chain+0x13e>
c00035fe:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003602:	31 c0                	xor    eax,eax
c0003604:	83 c4 1c             	add    esp,0x1c
c0003607:	5b                   	pop    ebx
c0003608:	5e                   	pop    esi
c0003609:	5f                   	pop    edi
c000360a:	5d                   	pop    ebp
c000360b:	c3                   	ret    

c000360c <dir_clear>:
c000360c:	55                   	push   ebp
c000360d:	57                   	push   edi
c000360e:	56                   	push   esi
c000360f:	89 c6                	mov    esi,eax
c0003611:	53                   	push   ebx
c0003612:	83 ec 1c             	sub    esp,0x1c
c0003615:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003619:	e8 9d ed ff ff       	call   c00023bb <sync_window>
c000361e:	85 c0                	test   eax,eax
c0003620:	0f 85 de 00 00 00    	jne    c0003704 <dir_clear+0xf8>
c0003626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000362a:	89 f0                	mov    eax,esi
c000362c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000362f:	e8 d6 e8 ff ff       	call   c0001f0a <clst2sect>
c0003634:	b9 00 02 00 00       	mov    ecx,0x200
c0003639:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000363d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003641:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003644:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003647:	89 e8                	mov    eax,ebp
c0003649:	31 d2                	xor    edx,edx
c000364b:	e8 b5 e6 ff ff       	call   c0001d05 <mem_set>
c0003650:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003654:	c1 e3 09             	shl    ebx,0x9
c0003657:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000365d:	76 1f                	jbe    c000367e <dir_clear+0x72>
c000365f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003664:	eb 18                	jmp    c000367e <dir_clear+0x72>
c0003666:	83 ec 0c             	sub    esp,0xc
c0003669:	53                   	push   ebx
c000366a:	e8 35 4e 00 00       	call   c00084a4 <ff_memalloc>
c000366f:	83 c4 10             	add    esp,0x10
c0003672:	89 c7                	mov    edi,eax
c0003674:	85 c0                	test   eax,eax
c0003676:	0f 85 8f 00 00 00    	jne    c000370b <dir_clear+0xff>
c000367c:	d1 eb                	shr    ebx,1
c000367e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003684:	77 e0                	ja     c0003666 <dir_clear+0x5a>
c0003686:	31 db                	xor    ebx,ebx
c0003688:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000368c:	39 d8                	cmp    eax,ebx
c000368e:	76 66                	jbe    c00036f6 <dir_clear+0xea>
c0003690:	83 ec 0c             	sub    esp,0xc
c0003693:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003697:	6a 01                	push   0x1
c0003699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000369d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036a1:	55                   	push   ebp
c00036a2:	50                   	push   eax
c00036a3:	e8 94 e5 ff ff       	call   c0001c3c <disk_write>
c00036a8:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036ad:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036b2:	83 c4 20             	add    esp,0x20
c00036b5:	85 c0                	test   eax,eax
c00036b7:	75 3d                	jne    c00036f6 <dir_clear+0xea>
c00036b9:	43                   	inc    ebx
c00036ba:	eb cc                	jmp    c0003688 <dir_clear+0x7c>
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	31 d2                	xor    edx,edx
c00036c1:	55                   	push   ebp
c00036c2:	89 d8                	mov    eax,ebx
c00036c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036cc:	52                   	push   edx
c00036cd:	50                   	push   eax
c00036ce:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d2:	57                   	push   edi
c00036d3:	50                   	push   eax
c00036d4:	e8 63 e5 ff ff       	call   c0001c3c <disk_write>
c00036d9:	83 c4 20             	add    esp,0x20
c00036dc:	85 c0                	test   eax,eax
c00036de:	75 0a                	jne    c00036ea <dir_clear+0xde>
c00036e0:	01 eb                	add    ebx,ebp
c00036e2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036e6:	39 d8                	cmp    eax,ebx
c00036e8:	77 d2                	ja     c00036bc <dir_clear+0xb0>
c00036ea:	83 ec 0c             	sub    esp,0xc
c00036ed:	57                   	push   edi
c00036ee:	e8 c7 4d 00 00       	call   c00084ba <ff_memfree>
c00036f3:	83 c4 10             	add    esp,0x10
c00036f6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036fa:	39 d8                	cmp    eax,ebx
c00036fc:	0f 95 c0             	setne  al
c00036ff:	0f b6 c0             	movzx  eax,al
c0003702:	eb 19                	jmp    c000371d <dir_clear+0x111>
c0003704:	b8 01 00 00 00       	mov    eax,0x1
c0003709:	eb 12                	jmp    c000371d <dir_clear+0x111>
c000370b:	89 d9                	mov    ecx,ebx
c000370d:	31 d2                	xor    edx,edx
c000370f:	c1 eb 09             	shr    ebx,0x9
c0003712:	e8 ee e5 ff ff       	call   c0001d05 <mem_set>
c0003717:	89 dd                	mov    ebp,ebx
c0003719:	31 db                	xor    ebx,ebx
c000371b:	eb c5                	jmp    c00036e2 <dir_clear+0xd6>
c000371d:	83 c4 1c             	add    esp,0x1c
c0003720:	5b                   	pop    ebx
c0003721:	5e                   	pop    esi
c0003722:	5f                   	pop    edi
c0003723:	5d                   	pop    ebp
c0003724:	c3                   	ret    

c0003725 <dir_next>:
c0003725:	55                   	push   ebp
c0003726:	57                   	push   edi
c0003727:	56                   	push   esi
c0003728:	53                   	push   ebx
c0003729:	89 c3                	mov    ebx,eax
c000372b:	83 ec 1c             	sub    esp,0x1c
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003734:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003737:	8d 78 20             	lea    edi,[eax+0x20]
c000373a:	31 c0                	xor    eax,eax
c000373c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003740:	0f 94 c0             	sete   al
c0003743:	48                   	dec    eax
c0003744:	25 00 00 20 f0       	and    eax,0xf0200000
c0003749:	05 00 00 00 10       	add    eax,0x10000000
c000374e:	39 f8                	cmp    eax,edi
c0003750:	77 0e                	ja     c0003760 <dir_next+0x3b>
c0003752:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003759:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003760:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003763:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003766:	b8 04 00 00 00       	mov    eax,0x4
c000376b:	89 ce                	mov    esi,ecx
c000376d:	09 d6                	or     esi,edx
c000376f:	0f 84 da 00 00 00    	je     c000384f <dir_next+0x12a>
c0003775:	89 f8                	mov    eax,edi
c0003777:	25 ff 01 00 00       	and    eax,0x1ff
c000377c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003780:	0f 85 b9 00 00 00    	jne    c000383f <dir_next+0x11a>
c0003786:	83 c2 01             	add    edx,0x1
c0003789:	83 d1 00             	adc    ecx,0x0
c000378c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000378f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003792:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003795:	85 d2                	test   edx,edx
c0003797:	75 29                	jne    c00037c2 <dir_next+0x9d>
c0003799:	89 fa                	mov    edx,edi
c000379b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000379f:	c1 ea 05             	shr    edx,0x5
c00037a2:	39 c2                	cmp    edx,eax
c00037a4:	0f 82 95 00 00 00    	jb     c000383f <dir_next+0x11a>
c00037aa:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037b1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b8:	b8 04 00 00 00       	mov    eax,0x4
c00037bd:	e9 8d 00 00 00       	jmp    c000384f <dir_next+0x12a>
c00037c2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037c6:	89 f9                	mov    ecx,edi
c00037c8:	48                   	dec    eax
c00037c9:	c1 e9 09             	shr    ecx,0x9
c00037cc:	85 c8                	test   eax,ecx
c00037ce:	75 6f                	jne    c000383f <dir_next+0x11a>
c00037d0:	89 d8                	mov    eax,ebx
c00037d2:	e8 00 f8 ff ff       	call   c0002fd7 <get_fat>
c00037d7:	89 c6                	mov    esi,eax
c00037d9:	83 f8 01             	cmp    eax,0x1
c00037dc:	77 07                	ja     c00037e5 <dir_next+0xc0>
c00037de:	b8 02 00 00 00       	mov    eax,0x2
c00037e3:	eb 6a                	jmp    c000384f <dir_next+0x12a>
c00037e5:	83 f8 ff             	cmp    eax,0xffffffff
c00037e8:	75 07                	jne    c00037f1 <dir_next+0xcc>
c00037ea:	b8 01 00 00 00       	mov    eax,0x1
c00037ef:	eb 5e                	jmp    c000384f <dir_next+0x12a>
c00037f1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037f4:	77 37                	ja     c000382d <dir_next+0x108>
c00037f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fb:	74 ad                	je     c00037aa <dir_next+0x85>
c00037fd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003800:	89 d8                	mov    eax,ebx
c0003802:	e8 be fa ff ff       	call   c00032c5 <create_chain>
c0003807:	89 c6                	mov    esi,eax
c0003809:	b8 07 00 00 00       	mov    eax,0x7
c000380e:	85 f6                	test   esi,esi
c0003810:	74 3d                	je     c000384f <dir_next+0x12a>
c0003812:	83 fe 01             	cmp    esi,0x1
c0003815:	74 c7                	je     c00037de <dir_next+0xb9>
c0003817:	83 fe ff             	cmp    esi,0xffffffff
c000381a:	74 ce                	je     c00037ea <dir_next+0xc5>
c000381c:	89 f2                	mov    edx,esi
c000381e:	89 e8                	mov    eax,ebp
c0003820:	e8 e7 fd ff ff       	call   c000360c <dir_clear>
c0003825:	85 c0                	test   eax,eax
c0003827:	75 c1                	jne    c00037ea <dir_next+0xc5>
c0003829:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000382d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003830:	89 f2                	mov    edx,esi
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 d1 e6 ff ff       	call   c0001f0a <clst2sect>
c0003839:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000383c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000383f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003843:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003846:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000384a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000384d:	31 c0                	xor    eax,eax
c000384f:	83 c4 1c             	add    esp,0x1c
c0003852:	5b                   	pop    ebx
c0003853:	5e                   	pop    esi
c0003854:	5f                   	pop    edi
c0003855:	5d                   	pop    ebp
c0003856:	c3                   	ret    

c0003857 <load_xdir>:
c0003857:	55                   	push   ebp
c0003858:	57                   	push   edi
c0003859:	56                   	push   esi
c000385a:	89 c6                	mov    esi,eax
c000385c:	53                   	push   ebx
c000385d:	83 ec 1c             	sub    esp,0x1c
c0003860:	8b 00                	mov    eax,DWORD PTR [eax]
c0003862:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003865:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003868:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000386b:	e8 df eb ff ff       	call   c000244f <move_window>
c0003870:	89 c3                	mov    ebx,eax
c0003872:	85 c0                	test   eax,eax
c0003874:	0f 85 0c 01 00 00    	jne    c0003986 <load_xdir+0x12f>
c000387a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000387d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003880:	0f 85 fb 00 00 00    	jne    c0003981 <load_xdir+0x12a>
c0003886:	89 f8                	mov    eax,edi
c0003888:	b9 20 00 00 00       	mov    ecx,0x20
c000388d:	e8 5e e4 ff ff       	call   c0001cf0 <mem_cpy>
c0003892:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003896:	40                   	inc    eax
c0003897:	c1 e0 05             	shl    eax,0x5
c000389a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000389e:	83 e8 60             	sub    eax,0x60
c00038a1:	3d 00 02 00 00       	cmp    eax,0x200
c00038a6:	0f 87 d5 00 00 00    	ja     c0003981 <load_xdir+0x12a>
c00038ac:	31 d2                	xor    edx,edx
c00038ae:	89 f0                	mov    eax,esi
c00038b0:	e8 70 fe ff ff       	call   c0003725 <dir_next>
c00038b5:	89 c3                	mov    ebx,eax
c00038b7:	83 f8 04             	cmp    eax,0x4
c00038ba:	0f 84 c1 00 00 00    	je     c0003981 <load_xdir+0x12a>
c00038c0:	85 c0                	test   eax,eax
c00038c2:	0f 85 be 00 00 00    	jne    c0003986 <load_xdir+0x12f>
c00038c8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038cb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00038d0:	e8 7a eb ff ff       	call   c000244f <move_window>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	85 c0                	test   eax,eax
c00038d9:	0f 85 a7 00 00 00    	jne    c0003986 <load_xdir+0x12f>
c00038df:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038e2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038e5:	0f 85 96 00 00 00    	jne    c0003981 <load_xdir+0x12a>
c00038eb:	8d 47 20             	lea    eax,[edi+0x20]
c00038ee:	b9 20 00 00 00       	mov    ecx,0x20
c00038f3:	e8 f8 e3 ff ff       	call   c0001cf0 <mem_cpy>
c00038f8:	31 d2                	xor    edx,edx
c00038fa:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038fe:	b9 0f 00 00 00       	mov    ecx,0xf
c0003903:	83 c0 2c             	add    eax,0x2c
c0003906:	f7 f1                	div    ecx
c0003908:	c1 e0 05             	shl    eax,0x5
c000390b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000390f:	77 70                	ja     c0003981 <load_xdir+0x12a>
c0003911:	bd 40 00 00 00       	mov    ebp,0x40
c0003916:	31 d2                	xor    edx,edx
c0003918:	89 f0                	mov    eax,esi
c000391a:	e8 06 fe ff ff       	call   c0003725 <dir_next>
c000391f:	89 c3                	mov    ebx,eax
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	74 5b                	je     c0003981 <load_xdir+0x12a>
c0003926:	85 c0                	test   eax,eax
c0003928:	75 5c                	jne    c0003986 <load_xdir+0x12f>
c000392a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000392d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003930:	8b 06                	mov    eax,DWORD PTR [esi]
c0003932:	e8 18 eb ff ff       	call   c000244f <move_window>
c0003937:	89 c3                	mov    ebx,eax
c0003939:	85 c0                	test   eax,eax
c000393b:	75 49                	jne    c0003986 <load_xdir+0x12f>
c000393d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003940:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003943:	75 3c                	jne    c0003981 <load_xdir+0x12a>
c0003945:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000394b:	77 0d                	ja     c000395a <load_xdir+0x103>
c000394d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003950:	b9 20 00 00 00       	mov    ecx,0x20
c0003955:	e8 96 e3 ff ff       	call   c0001cf0 <mem_cpy>
c000395a:	83 c5 20             	add    ebp,0x20
c000395d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003961:	77 b3                	ja     c0003916 <load_xdir+0xbf>
c0003963:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003969:	77 1b                	ja     c0003986 <load_xdir+0x12f>
c000396b:	89 f8                	mov    eax,edi
c000396d:	e8 cd e7 ff ff       	call   c000213f <xdir_sum>
c0003972:	89 c1                	mov    ecx,eax
c0003974:	8d 47 02             	lea    eax,[edi+0x2]
c0003977:	e8 f5 e2 ff ff       	call   c0001c71 <ld_word>
c000397c:	66 39 c1             	cmp    cx,ax
c000397f:	74 05                	je     c0003986 <load_xdir+0x12f>
c0003981:	bb 02 00 00 00       	mov    ebx,0x2
c0003986:	83 c4 1c             	add    esp,0x1c
c0003989:	89 d8                	mov    eax,ebx
c000398b:	5b                   	pop    ebx
c000398c:	5e                   	pop    esi
c000398d:	5f                   	pop    edi
c000398e:	5d                   	pop    ebp
c000398f:	c3                   	ret    

c0003990 <load_obj_xdir>:
c0003990:	53                   	push   ebx
c0003991:	89 c3                	mov    ebx,eax
c0003993:	83 ec 08             	sub    esp,0x8
c0003996:	8b 02                	mov    eax,DWORD PTR [edx]
c0003998:	89 03                	mov    DWORD PTR [ebx],eax
c000399a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000399d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a3:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039a6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039b0:	30 c0                	xor    al,al
c00039b2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039bc:	89 d8                	mov    eax,ebx
c00039be:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039c1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039c4:	e8 04 f8 ff ff       	call   c00031cd <dir_sdi>
c00039c9:	85 c0                	test   eax,eax
c00039cb:	75 0b                	jne    c00039d8 <load_obj_xdir+0x48>
c00039cd:	89 d8                	mov    eax,ebx
c00039cf:	83 c4 08             	add    esp,0x8
c00039d2:	5b                   	pop    ebx
c00039d3:	e9 7f fe ff ff       	jmp    c0003857 <load_xdir>
c00039d8:	83 c4 08             	add    esp,0x8
c00039db:	5b                   	pop    ebx
c00039dc:	c3                   	ret    

c00039dd <dir_read>:
c00039dd:	55                   	push   ebp
c00039de:	bd 04 00 00 00       	mov    ebp,0x4
c00039e3:	57                   	push   edi
c00039e4:	56                   	push   esi
c00039e5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ea:	53                   	push   ebx
c00039eb:	89 c3                	mov    ebx,eax
c00039ed:	83 ec 1c             	sub    esp,0x1c
c00039f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039f4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039f6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039fe:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a01:	89 c8                	mov    eax,ecx
c0003a03:	09 d0                	or     eax,edx
c0003a05:	0f 84 25 01 00 00    	je     c0003b30 <dir_read+0x153>
c0003a0b:	89 f8                	mov    eax,edi
c0003a0d:	e8 3d ea ff ff       	call   c000244f <move_window>
c0003a12:	89 c5                	mov    ebp,eax
c0003a14:	85 c0                	test   eax,eax
c0003a16:	0f 85 23 01 00 00    	jne    c0003b3f <dir_read+0x162>
c0003a1c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a1f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a21:	84 c9                	test   cl,cl
c0003a23:	0f 84 11 01 00 00    	je     c0003b3a <dir_read+0x15d>
c0003a29:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a2c:	75 48                	jne    c0003a76 <dir_read+0x99>
c0003a2e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a33:	74 10                	je     c0003a45 <dir_read+0x68>
c0003a35:	80 f9 83             	cmp    cl,0x83
c0003a38:	0f 85 dd 00 00 00    	jne    c0003b1b <dir_read+0x13e>
c0003a3e:	31 ed                	xor    ebp,ebp
c0003a40:	e9 08 01 00 00       	jmp    c0003b4d <dir_read+0x170>
c0003a45:	80 f9 85             	cmp    cl,0x85
c0003a48:	0f 85 cd 00 00 00    	jne    c0003b1b <dir_read+0x13e>
c0003a4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a51:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a54:	89 d8                	mov    eax,ebx
c0003a56:	e8 fc fd ff ff       	call   c0003857 <load_xdir>
c0003a5b:	89 c5                	mov    ebp,eax
c0003a5d:	85 c0                	test   eax,eax
c0003a5f:	0f 85 da 00 00 00    	jne    c0003b3f <dir_read+0x162>
c0003a65:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a68:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a6b:	83 e0 3f             	and    eax,0x3f
c0003a6e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a71:	e9 d7 00 00 00       	jmp    c0003b4d <dir_read+0x170>
c0003a76:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a79:	83 e0 3f             	and    eax,0x3f
c0003a7c:	80 f9 2e             	cmp    cl,0x2e
c0003a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a83:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a86:	0f 84 8a 00 00 00    	je     c0003b16 <dir_read+0x139>
c0003a8c:	80 f9 e5             	cmp    cl,0xe5
c0003a8f:	0f 84 81 00 00 00    	je     c0003b16 <dir_read+0x139>
c0003a95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a99:	83 e0 1f             	and    eax,0x1f
c0003a9c:	83 f8 08             	cmp    eax,0x8
c0003a9f:	0f 94 c0             	sete   al
c0003aa2:	0f b6 c0             	movzx  eax,al
c0003aa5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa9:	75 6b                	jne    c0003b16 <dir_read+0x139>
c0003aab:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003ab0:	75 44                	jne    c0003af6 <dir_read+0x119>
c0003ab2:	f6 c1 40             	test   cl,0x40
c0003ab5:	74 12                	je     c0003ac9 <dir_read+0xec>
c0003ab7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aba:	83 e1 bf             	and    ecx,0xffffffbf
c0003abd:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ac1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ac4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ac7:	eb 06                	jmp    c0003acf <dir_read+0xf2>
c0003ac9:	89 f0                	mov    eax,esi
c0003acb:	38 c8                	cmp    al,cl
c0003acd:	75 47                	jne    c0003b16 <dir_read+0x139>
c0003acf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ad3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003adb:	75 3e                	jne    c0003b1b <dir_read+0x13e>
c0003add:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ae1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ae4:	e8 8a e4 ff ff       	call   c0001f73 <pick_lfn>
c0003ae9:	85 c0                	test   eax,eax
c0003aeb:	74 2e                	je     c0003b1b <dir_read+0x13e>
c0003aed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003af1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003af4:	eb 25                	jmp    c0003b1b <dir_read+0x13e>
c0003af6:	89 f0                	mov    eax,esi
c0003af8:	84 c0                	test   al,al
c0003afa:	75 11                	jne    c0003b0d <dir_read+0x130>
c0003afc:	89 d0                	mov    eax,edx
c0003afe:	e8 2a e6 ff ff       	call   c000212d <sum_sfn>
c0003b03:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b07:	0f 84 31 ff ff ff    	je     c0003a3e <dir_read+0x61>
c0003b0d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b14:	eb 37                	jmp    c0003b4d <dir_read+0x170>
c0003b16:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b1b:	31 d2                	xor    edx,edx
c0003b1d:	89 d8                	mov    eax,ebx
c0003b1f:	e8 01 fc ff ff       	call   c0003725 <dir_next>
c0003b24:	89 c5                	mov    ebp,eax
c0003b26:	85 c0                	test   eax,eax
c0003b28:	0f 84 cd fe ff ff    	je     c00039fb <dir_read+0x1e>
c0003b2e:	eb 0f                	jmp    c0003b3f <dir_read+0x162>
c0003b30:	85 ed                	test   ebp,ebp
c0003b32:	0f 84 06 ff ff ff    	je     c0003a3e <dir_read+0x61>
c0003b38:	eb 05                	jmp    c0003b3f <dir_read+0x162>
c0003b3a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b3f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b46:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b4d:	83 c4 1c             	add    esp,0x1c
c0003b50:	89 e8                	mov    eax,ebp
c0003b52:	5b                   	pop    ebx
c0003b53:	5e                   	pop    esi
c0003b54:	5f                   	pop    edi
c0003b55:	5d                   	pop    ebp
c0003b56:	c3                   	ret    

c0003b57 <dir_alloc>:
c0003b57:	55                   	push   ebp
c0003b58:	89 d5                	mov    ebp,edx
c0003b5a:	57                   	push   edi
c0003b5b:	31 d2                	xor    edx,edx
c0003b5d:	56                   	push   esi
c0003b5e:	53                   	push   ebx
c0003b5f:	89 c3                	mov    ebx,eax
c0003b61:	83 ec 0c             	sub    esp,0xc
c0003b64:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b66:	e8 62 f6 ff ff       	call   c00031cd <dir_sdi>
c0003b6b:	85 c0                	test   eax,eax
c0003b6d:	75 4e                	jne    c0003bbd <dir_alloc+0x66>
c0003b6f:	31 f6                	xor    esi,esi
c0003b71:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b74:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b77:	89 f8                	mov    eax,edi
c0003b79:	e8 d1 e8 ff ff       	call   c000244f <move_window>
c0003b7e:	85 c0                	test   eax,eax
c0003b80:	75 3b                	jne    c0003bbd <dir_alloc+0x66>
c0003b82:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b85:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b88:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b8a:	75 07                	jne    c0003b93 <dir_alloc+0x3c>
c0003b8c:	f7 d2                	not    edx
c0003b8e:	c0 ea 07             	shr    dl,0x7
c0003b91:	eb 0d                	jmp    c0003ba0 <dir_alloc+0x49>
c0003b93:	84 d2                	test   dl,dl
c0003b95:	0f 94 c1             	sete   cl
c0003b98:	80 fa e5             	cmp    dl,0xe5
c0003b9b:	0f 94 c2             	sete   dl
c0003b9e:	09 ca                	or     edx,ecx
c0003ba0:	84 d2                	test   dl,dl
c0003ba2:	74 07                	je     c0003bab <dir_alloc+0x54>
c0003ba4:	46                   	inc    esi
c0003ba5:	39 ee                	cmp    esi,ebp
c0003ba7:	75 04                	jne    c0003bad <dir_alloc+0x56>
c0003ba9:	eb 1c                	jmp    c0003bc7 <dir_alloc+0x70>
c0003bab:	31 f6                	xor    esi,esi
c0003bad:	ba 01 00 00 00       	mov    edx,0x1
c0003bb2:	89 d8                	mov    eax,ebx
c0003bb4:	e8 6c fb ff ff       	call   c0003725 <dir_next>
c0003bb9:	85 c0                	test   eax,eax
c0003bbb:	74 b4                	je     c0003b71 <dir_alloc+0x1a>
c0003bbd:	83 f8 04             	cmp    eax,0x4
c0003bc0:	75 05                	jne    c0003bc7 <dir_alloc+0x70>
c0003bc2:	b8 07 00 00 00       	mov    eax,0x7
c0003bc7:	83 c4 0c             	add    esp,0xc
c0003bca:	5b                   	pop    ebx
c0003bcb:	5e                   	pop    esi
c0003bcc:	5f                   	pop    edi
c0003bcd:	5d                   	pop    ebp
c0003bce:	c3                   	ret    

c0003bcf <store_xdir>:
c0003bcf:	55                   	push   ebp
c0003bd0:	57                   	push   edi
c0003bd1:	89 c7                	mov    edi,eax
c0003bd3:	56                   	push   esi
c0003bd4:	53                   	push   ebx
c0003bd5:	83 ec 0c             	sub    esp,0xc
c0003bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bda:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bdd:	89 e8                	mov    eax,ebp
c0003bdf:	e8 5b e5 ff ff       	call   c000213f <xdir_sum>
c0003be4:	0f b7 d0             	movzx  edx,ax
c0003be7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bea:	e8 f4 e0 ff ff       	call   c0001ce3 <st_word>
c0003bef:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bf3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bf6:	89 f8                	mov    eax,edi
c0003bf8:	e8 d0 f5 ff ff       	call   c00031cd <dir_sdi>
c0003bfd:	89 c6                	mov    esi,eax
c0003bff:	85 f6                	test   esi,esi
c0003c01:	75 3d                	jne    c0003c40 <store_xdir+0x71>
c0003c03:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c06:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c09:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c0b:	e8 3f e8 ff ff       	call   c000244f <move_window>
c0003c10:	89 c6                	mov    esi,eax
c0003c12:	85 c0                	test   eax,eax
c0003c14:	75 2a                	jne    c0003c40 <store_xdir+0x71>
c0003c16:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c19:	b9 20 00 00 00       	mov    ecx,0x20
c0003c1e:	89 ea                	mov    edx,ebp
c0003c20:	e8 cb e0 ff ff       	call   c0001cf0 <mem_cpy>
c0003c25:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c27:	85 db                	test   ebx,ebx
c0003c29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c2d:	74 11                	je     c0003c40 <store_xdir+0x71>
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 f8                	mov    eax,edi
c0003c33:	83 c5 20             	add    ebp,0x20
c0003c36:	e8 ea fa ff ff       	call   c0003725 <dir_next>
c0003c3b:	4b                   	dec    ebx
c0003c3c:	89 c6                	mov    esi,eax
c0003c3e:	eb bf                	jmp    c0003bff <store_xdir+0x30>
c0003c40:	89 f0                	mov    eax,esi
c0003c42:	83 fe 02             	cmp    esi,0x2
c0003c45:	76 05                	jbe    c0003c4c <store_xdir+0x7d>
c0003c47:	b8 02 00 00 00       	mov    eax,0x2
c0003c4c:	83 c4 0c             	add    esp,0xc
c0003c4f:	5b                   	pop    ebx
c0003c50:	5e                   	pop    esi
c0003c51:	5f                   	pop    edi
c0003c52:	5d                   	pop    ebp
c0003c53:	c3                   	ret    

c0003c54 <dir_remove>:
c0003c54:	57                   	push   edi
c0003c55:	56                   	push   esi
c0003c56:	53                   	push   ebx
c0003c57:	89 c3                	mov    ebx,eax
c0003c59:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c5c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c5e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c61:	83 fa ff             	cmp    edx,0xffffffff
c0003c64:	74 09                	je     c0003c6f <dir_remove+0x1b>
c0003c66:	e8 62 f5 ff ff       	call   c00031cd <dir_sdi>
c0003c6b:	85 c0                	test   eax,eax
c0003c6d:	75 41                	jne    c0003cb0 <dir_remove+0x5c>
c0003c6f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c72:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c75:	89 f0                	mov    eax,esi
c0003c77:	e8 d3 e7 ff ff       	call   c000244f <move_window>
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	75 26                	jne    c0003ca6 <dir_remove+0x52>
c0003c80:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c83:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c86:	75 05                	jne    c0003c8d <dir_remove+0x39>
c0003c88:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c8b:	eb 03                	jmp    c0003c90 <dir_remove+0x3c>
c0003c8d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c90:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c94:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c97:	73 17                	jae    c0003cb0 <dir_remove+0x5c>
c0003c99:	31 d2                	xor    edx,edx
c0003c9b:	89 d8                	mov    eax,ebx
c0003c9d:	e8 83 fa ff ff       	call   c0003725 <dir_next>
c0003ca2:	85 c0                	test   eax,eax
c0003ca4:	74 c9                	je     c0003c6f <dir_remove+0x1b>
c0003ca6:	83 f8 04             	cmp    eax,0x4
c0003ca9:	75 05                	jne    c0003cb0 <dir_remove+0x5c>
c0003cab:	b8 02 00 00 00       	mov    eax,0x2
c0003cb0:	5b                   	pop    ebx
c0003cb1:	5e                   	pop    esi
c0003cb2:	5f                   	pop    edi
c0003cb3:	c3                   	ret    

c0003cb4 <create_name>:
c0003cb4:	55                   	push   ebp
c0003cb5:	89 d5                	mov    ebp,edx
c0003cb7:	57                   	push   edi
c0003cb8:	89 c7                	mov    edi,eax
c0003cba:	56                   	push   esi
c0003cbb:	31 f6                	xor    esi,esi
c0003cbd:	53                   	push   ebx
c0003cbe:	83 ec 3c             	sub    esp,0x3c
c0003cc1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cc7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cd0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cd4:	e8 72 e0 ff ff       	call   c0001d4b <tchar2uni>
c0003cd9:	89 c3                	mov    ebx,eax
c0003cdb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cde:	75 0a                	jne    c0003cea <create_name+0x36>
c0003ce0:	b8 06 00 00 00       	mov    eax,0x6
c0003ce5:	e9 9e 02 00 00       	jmp    c0003f88 <create_name+0x2d4>
c0003cea:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cef:	76 0c                	jbe    c0003cfd <create_name+0x49>
c0003cf1:	c1 e8 10             	shr    eax,0x10
c0003cf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cfc:	46                   	inc    esi
c0003cfd:	66 83 fb 1f          	cmp    bx,0x1f
c0003d01:	76 4f                	jbe    c0003d52 <create_name+0x9e>
c0003d03:	66 83 fb 5c          	cmp    bx,0x5c
c0003d07:	74 35                	je     c0003d3e <create_name+0x8a>
c0003d09:	66 83 fb 2f          	cmp    bx,0x2f
c0003d0d:	74 2f                	je     c0003d3e <create_name+0x8a>
c0003d0f:	66 83 fb 7f          	cmp    bx,0x7f
c0003d13:	77 11                	ja     c0003d26 <create_name+0x72>
c0003d15:	0f b7 d3             	movzx  edx,bx
c0003d18:	b8 52 9d 02 c0       	mov    eax,0xc0029d52
c0003d1d:	e8 11 e0 ff ff       	call   c0001d33 <chk_chr>
c0003d22:	85 c0                	test   eax,eax
c0003d24:	75 ba                	jne    c0003ce0 <create_name+0x2c>
c0003d26:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d2c:	77 b2                	ja     c0003ce0 <create_name+0x2c>
c0003d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d32:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d36:	46                   	inc    esi
c0003d37:	eb 97                	jmp    c0003cd0 <create_name+0x1c>
c0003d39:	40                   	inc    eax
c0003d3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d42:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d44:	80 fa 2f             	cmp    dl,0x2f
c0003d47:	74 f0                	je     c0003d39 <create_name+0x85>
c0003d49:	80 fa 5c             	cmp    dl,0x5c
c0003d4c:	74 eb                	je     c0003d39 <create_name+0x85>
c0003d4e:	31 db                	xor    ebx,ebx
c0003d50:	eb 02                	jmp    c0003d54 <create_name+0xa0>
c0003d52:	b3 04                	mov    bl,0x4
c0003d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d5b:	85 f6                	test   esi,esi
c0003d5d:	74 18                	je     c0003d77 <create_name+0xc3>
c0003d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d63:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d68:	66 83 f8 20          	cmp    ax,0x20
c0003d6c:	74 06                	je     c0003d74 <create_name+0xc0>
c0003d6e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d72:	75 03                	jne    c0003d77 <create_name+0xc3>
c0003d74:	4e                   	dec    esi
c0003d75:	eb e4                	jmp    c0003d5b <create_name+0xa7>
c0003d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7b:	31 ed                	xor    ebp,ebp
c0003d7d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d83:	85 f6                	test   esi,esi
c0003d85:	0f 84 55 ff ff ff    	je     c0003ce0 <create_name+0x2c>
c0003d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d8f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d92:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d96:	66 83 f8 20          	cmp    ax,0x20
c0003d9a:	75 04                	jne    c0003da0 <create_name+0xec>
c0003d9c:	89 d5                	mov    ebp,edx
c0003d9e:	eb eb                	jmp    c0003d8b <create_name+0xd7>
c0003da0:	85 ed                	test   ebp,ebp
c0003da2:	75 06                	jne    c0003daa <create_name+0xf6>
c0003da4:	66 83 f8 2e          	cmp    ax,0x2e
c0003da8:	75 08                	jne    c0003db2 <create_name+0xfe>
c0003daa:	83 cb 03             	or     ebx,0x3
c0003dad:	eb 03                	jmp    c0003db2 <create_name+0xfe>
c0003daf:	4e                   	dec    esi
c0003db0:	74 0c                	je     c0003dbe <create_name+0x10a>
c0003db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dbc:	75 f1                	jne    c0003daf <create_name+0xfb>
c0003dbe:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dc6:	ba 20 00 00 00       	mov    edx,0x20
c0003dcb:	e8 35 df ff ff       	call   c0001d05 <mem_set>
c0003dd0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd8:	31 c9                	xor    ecx,ecx
c0003dda:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003ddf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003de2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dea:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dee:	66 85 ed             	test   bp,bp
c0003df1:	0f 84 30 01 00 00    	je     c0003f27 <create_name+0x273>
c0003df7:	66 83 fd 20          	cmp    bp,0x20
c0003dfb:	74 10                	je     c0003e0d <create_name+0x159>
c0003dfd:	66 83 fd 2e          	cmp    bp,0x2e
c0003e01:	75 13                	jne    c0003e16 <create_name+0x162>
c0003e03:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e07:	0f 84 6b 01 00 00    	je     c0003f78 <create_name+0x2c4>
c0003e0d:	83 cb 03             	or     ebx,0x3
c0003e10:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e14:	eb c9                	jmp    c0003ddf <create_name+0x12b>
c0003e16:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e1a:	73 0b                	jae    c0003e27 <create_name+0x173>
c0003e1c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e20:	75 47                	jne    c0003e69 <create_name+0x1b5>
c0003e22:	e9 51 01 00 00       	jmp    c0003f78 <create_name+0x2c4>
c0003e27:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e2c:	75 10                	jne    c0003e3e <create_name+0x18a>
c0003e2e:	83 cb 03             	or     ebx,0x3
c0003e31:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e39:	e9 e9 00 00 00       	jmp    c0003f27 <create_name+0x273>
c0003e3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e42:	74 0d                	je     c0003e51 <create_name+0x19d>
c0003e44:	83 cb 03             	or     ebx,0x3
c0003e47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e4b:	0f 87 d6 00 00 00    	ja     c0003f27 <create_name+0x273>
c0003e51:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e5a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e62:	b9 08 00 00 00       	mov    ecx,0x8
c0003e67:	eb a7                	jmp    c0003e10 <create_name+0x15c>
c0003e69:	66 83 fd 7f          	cmp    bp,0x7f
c0003e6d:	76 68                	jbe    c0003ed7 <create_name+0x223>
c0003e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e73:	88 da                	mov    dl,bl
c0003e75:	83 ca 02             	or     edx,0x2
c0003e78:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e7c:	50                   	push   eax
c0003e7d:	50                   	push   eax
c0003e7e:	68 b5 01 00 00       	push   0x1b5
c0003e83:	55                   	push   ebp
c0003e84:	e8 48 46 00 00       	call   c00084d1 <ff_uni2oem>
c0003e89:	83 c4 10             	add    esp,0x10
c0003e8c:	89 c5                	mov    ebp,eax
c0003e8e:	a8 80                	test   al,0x80
c0003e90:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e98:	74 0c                	je     c0003ea6 <create_name+0x1f2>
c0003e9a:	83 e5 7f             	and    ebp,0x7f
c0003e9d:	0f b6 ad a0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6360]
c0003ea4:	eb 2a                	jmp    c0003ed0 <create_name+0x21c>
c0003ea6:	66 3d ff 00          	cmp    ax,0xff
c0003eaa:	76 24                	jbe    c0003ed0 <create_name+0x21c>
c0003eac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb0:	48                   	dec    eax
c0003eb1:	39 c8                	cmp    eax,ecx
c0003eb3:	77 0c                	ja     c0003ec1 <create_name+0x20d>
c0003eb5:	83 cb 03             	or     ebx,0x3
c0003eb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ebc:	e9 4f ff ff ff       	jmp    c0003e10 <create_name+0x15c>
c0003ec1:	89 e8                	mov    eax,ebp
c0003ec3:	88 d3                	mov    bl,dl
c0003ec5:	66 c1 e8 08          	shr    ax,0x8
c0003ec9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ecd:	41                   	inc    ecx
c0003ece:	eb 4b                	jmp    c0003f1b <create_name+0x267>
c0003ed0:	88 d3                	mov    bl,dl
c0003ed2:	66 85 ed             	test   bp,bp
c0003ed5:	74 19                	je     c0003ef0 <create_name+0x23c>
c0003ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003edb:	0f b7 d5             	movzx  edx,bp
c0003ede:	b8 5b 9d 02 c0       	mov    eax,0xc0029d5b
c0003ee3:	e8 4b de ff ff       	call   c0001d33 <chk_chr>
c0003ee8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003eec:	85 c0                	test   eax,eax
c0003eee:	74 0a                	je     c0003efa <create_name+0x246>
c0003ef0:	83 cb 03             	or     ebx,0x3
c0003ef3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef8:	eb 21                	jmp    c0003f1b <create_name+0x267>
c0003efa:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 07                	ja     c0003f0a <create_name+0x256>
c0003f03:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f08:	eb 11                	jmp    c0003f1b <create_name+0x267>
c0003f0a:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f0d:	66 83 f8 19          	cmp    ax,0x19
c0003f11:	77 08                	ja     c0003f1b <create_name+0x267>
c0003f13:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f18:	83 ed 20             	sub    ebp,0x20
c0003f1b:	89 e8                	mov    eax,ebp
c0003f1d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f21:	41                   	inc    ecx
c0003f22:	e9 e9 fe ff ff       	jmp    c0003e10 <create_name+0x15c>
c0003f27:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f2b:	75 04                	jne    c0003f31 <create_name+0x27d>
c0003f2d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f31:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f36:	75 05                	jne    c0003f3d <create_name+0x289>
c0003f38:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f41:	83 e0 0c             	and    eax,0xc
c0003f44:	3c 0c                	cmp    al,0xc
c0003f46:	74 0b                	je     c0003f53 <create_name+0x29f>
c0003f48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f4c:	83 e0 03             	and    eax,0x3
c0003f4f:	3c 03                	cmp    al,0x3
c0003f51:	75 05                	jne    c0003f58 <create_name+0x2a4>
c0003f53:	83 cb 02             	or     ebx,0x2
c0003f56:	eb 19                	jmp    c0003f71 <create_name+0x2bd>
c0003f58:	f6 c3 02             	test   bl,0x2
c0003f5b:	75 14                	jne    c0003f71 <create_name+0x2bd>
c0003f5d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f62:	74 03                	je     c0003f67 <create_name+0x2b3>
c0003f64:	83 cb 10             	or     ebx,0x10
c0003f67:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f6c:	74 03                	je     c0003f71 <create_name+0x2bd>
c0003f6e:	83 cb 08             	or     ebx,0x8
c0003f71:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f74:	31 c0                	xor    eax,eax
c0003f76:	eb 10                	jmp    c0003f88 <create_name+0x2d4>
c0003f78:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f7d:	0f 85 ce fe ff ff    	jne    c0003e51 <create_name+0x19d>
c0003f83:	e9 a6 fe ff ff       	jmp    c0003e2e <create_name+0x17a>
c0003f88:	83 c4 3c             	add    esp,0x3c
c0003f8b:	5b                   	pop    ebx
c0003f8c:	5e                   	pop    esi
c0003f8d:	5f                   	pop    edi
c0003f8e:	5d                   	pop    ebp
c0003f8f:	c3                   	ret    

c0003f90 <xname_sum>:
c0003f90:	56                   	push   esi
c0003f91:	53                   	push   ebx
c0003f92:	89 c6                	mov    esi,eax
c0003f94:	51                   	push   ecx
c0003f95:	31 db                	xor    ebx,ebx
c0003f97:	83 c6 02             	add    esi,0x2
c0003f9a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f9e:	66 85 c0             	test   ax,ax
c0003fa1:	74 1f                	je     c0003fc2 <xname_sum+0x32>
c0003fa3:	83 ec 0c             	sub    esp,0xc
c0003fa6:	66 d1 cb             	ror    bx,1
c0003fa9:	50                   	push   eax
c0003faa:	e8 1e 46 00 00       	call   c00085cd <ff_wtoupper>
c0003faf:	83 c4 10             	add    esp,0x10
c0003fb2:	0f b6 d0             	movzx  edx,al
c0003fb5:	66 c1 e8 08          	shr    ax,0x8
c0003fb9:	01 d3                	add    ebx,edx
c0003fbb:	66 d1 cb             	ror    bx,1
c0003fbe:	01 c3                	add    ebx,eax
c0003fc0:	eb d5                	jmp    c0003f97 <xname_sum+0x7>
c0003fc2:	89 d8                	mov    eax,ebx
c0003fc4:	5a                   	pop    edx
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	c3                   	ret    

c0003fc8 <create_xdir>:
c0003fc8:	55                   	push   ebp
c0003fc9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fce:	57                   	push   edi
c0003fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fd4:	56                   	push   esi
c0003fd5:	31 ff                	xor    edi,edi
c0003fd7:	53                   	push   ebx
c0003fd8:	be 40 00 00 00       	mov    esi,0x40
c0003fdd:	89 c3                	mov    ebx,eax
c0003fdf:	83 ec 1c             	sub    esp,0x1c
c0003fe2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fe6:	31 d2                	xor    edx,edx
c0003fe8:	e8 18 dd ff ff       	call   c0001d05 <mem_set>
c0003fed:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ff0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ff4:	31 c9                	xor    ecx,ecx
c0003ff6:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ffd:	83 c6 02             	add    esi,0x2
c0004000:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0004004:	66 85 ed             	test   bp,bp
c0004007:	74 12                	je     c000401b <create_xdir+0x53>
c0004009:	0f b6 c1             	movzx  eax,cl
c000400c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004010:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004014:	66 83 fd 01          	cmp    bp,0x1
c0004018:	80 d9 ff             	sbb    cl,0xff
c000401b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000401e:	0f b7 d5             	movzx  edx,bp
c0004021:	83 c6 02             	add    esi,0x2
c0004024:	e8 ba dc ff ff       	call   c0001ce3 <st_word>
c0004029:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000402f:	75 d3                	jne    c0004004 <create_xdir+0x3c>
c0004031:	8d 47 01             	lea    eax,[edi+0x1]
c0004034:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004038:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000403c:	0f b6 c1             	movzx  eax,cl
c000403f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004044:	74 07                	je     c000404d <create_xdir+0x85>
c0004046:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000404b:	eb a9                	jmp    c0003ff6 <create_xdir+0x2e>
c000404d:	8d 47 02             	lea    eax,[edi+0x2]
c0004050:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004053:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004056:	89 d0                	mov    eax,edx
c0004058:	e8 33 ff ff ff       	call   c0003f90 <xname_sum>
c000405d:	83 c4 1c             	add    esp,0x1c
c0004060:	0f b7 d0             	movzx  edx,ax
c0004063:	8d 43 24             	lea    eax,[ebx+0x24]
c0004066:	5b                   	pop    ebx
c0004067:	5e                   	pop    esi
c0004068:	5f                   	pop    edi
c0004069:	5d                   	pop    ebp
c000406a:	e9 74 dc ff ff       	jmp    c0001ce3 <st_word>

c000406f <cmp_lfn>:
c000406f:	55                   	push   ebp
c0004070:	57                   	push   edi
c0004071:	89 d7                	mov    edi,edx
c0004073:	56                   	push   esi
c0004074:	53                   	push   ebx
c0004075:	83 ec 1c             	sub    esp,0x1c
c0004078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000407c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000407f:	e8 ed db ff ff       	call   c0001c71 <ld_word>
c0004084:	66 85 c0             	test   ax,ax
c0004087:	74 07                	je     c0004090 <cmp_lfn+0x21>
c0004089:	31 c0                	xor    eax,eax
c000408b:	e9 9a 00 00 00       	jmp    c000412a <cmp_lfn+0xbb>
c0004090:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004092:	bd 01 00 00 00       	mov    ebp,0x1
c0004097:	83 e3 3f             	and    ebx,0x3f
c000409a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040a2:	4b                   	dec    ebx
c00040a3:	6b db 0d             	imul   ebx,ebx,0xd
c00040a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040aa:	0f b6 80 20 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62e0]
c00040b1:	01 f8                	add    eax,edi
c00040b3:	e8 b9 db ff ff       	call   c0001c71 <ld_word>
c00040b8:	66 85 ed             	test   bp,bp
c00040bb:	89 c6                	mov    esi,eax
c00040bd:	74 3c                	je     c00040fb <cmp_lfn+0x8c>
c00040bf:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040c5:	77 c2                	ja     c0004089 <cmp_lfn+0x1a>
c00040c7:	83 ec 0c             	sub    esp,0xc
c00040ca:	0f b7 c0             	movzx  eax,ax
c00040cd:	50                   	push   eax
c00040ce:	e8 fa 44 00 00       	call   c00085cd <ff_wtoupper>
c00040d3:	89 c5                	mov    ebp,eax
c00040d5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040e0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040e7:	e8 e1 44 00 00       	call   c00085cd <ff_wtoupper>
c00040ec:	83 c4 10             	add    esp,0x10
c00040ef:	39 c5                	cmp    ebp,eax
c00040f1:	75 96                	jne    c0004089 <cmp_lfn+0x1a>
c00040f3:	89 f5                	mov    ebp,esi
c00040f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f9:	eb 04                	jmp    c00040ff <cmp_lfn+0x90>
c00040fb:	66 46                	inc    si
c00040fd:	75 8a                	jne    c0004089 <cmp_lfn+0x1a>
c00040ff:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004103:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004108:	75 9c                	jne    c00040a6 <cmp_lfn+0x37>
c000410a:	f6 07 40             	test   BYTE PTR [edi],0x40
c000410d:	74 16                	je     c0004125 <cmp_lfn+0xb6>
c000410f:	66 85 ed             	test   bp,bp
c0004112:	74 11                	je     c0004125 <cmp_lfn+0xb6>
c0004114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004118:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000411d:	0f 94 c0             	sete   al
c0004120:	0f b6 c0             	movzx  eax,al
c0004123:	eb 05                	jmp    c000412a <cmp_lfn+0xbb>
c0004125:	b8 01 00 00 00       	mov    eax,0x1
c000412a:	83 c4 1c             	add    esp,0x1c
c000412d:	5b                   	pop    ebx
c000412e:	5e                   	pop    esi
c000412f:	5f                   	pop    edi
c0004130:	5d                   	pop    ebp
c0004131:	c3                   	ret    

c0004132 <dir_find>:
c0004132:	55                   	push   ebp
c0004133:	31 d2                	xor    edx,edx
c0004135:	57                   	push   edi
c0004136:	56                   	push   esi
c0004137:	53                   	push   ebx
c0004138:	89 c3                	mov    ebx,eax
c000413a:	83 ec 1c             	sub    esp,0x1c
c000413d:	8b 30                	mov    esi,DWORD PTR [eax]
c000413f:	e8 89 f0 ff ff       	call   c00031cd <dir_sdi>
c0004144:	89 04 24             	mov    DWORD PTR [esp],eax
c0004147:	85 c0                	test   eax,eax
c0004149:	0f 85 9e 01 00 00    	jne    c00042ed <dir_find+0x1bb>
c000414f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004152:	0f 85 8d 00 00 00    	jne    c00041e5 <dir_find+0xb3>
c0004158:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415b:	e8 30 fe ff ff       	call   c0003f90 <xname_sum>
c0004160:	89 c7                	mov    edi,eax
c0004162:	31 d2                	xor    edx,edx
c0004164:	89 d8                	mov    eax,ebx
c0004166:	e8 72 f8 ff ff       	call   c00039dd <dir_read>
c000416b:	85 c0                	test   eax,eax
c000416d:	0f 85 5e 01 00 00    	jne    c00042d1 <dir_find+0x19f>
c0004173:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004176:	8d 41 24             	lea    eax,[ecx+0x24]
c0004179:	e8 f3 da ff ff       	call   c0001c71 <ld_word>
c000417e:	66 39 f8             	cmp    ax,di
c0004181:	75 df                	jne    c0004162 <dir_find+0x30>
c0004183:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004186:	31 ed                	xor    ebp,ebp
c0004188:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000418c:	ba 40 00 00 00       	mov    edx,0x40
c0004191:	89 e9                	mov    ecx,ebp
c0004193:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004197:	0f 84 42 01 00 00    	je     c00042df <dir_find+0x1ad>
c000419d:	f6 c2 1f             	test   dl,0x1f
c00041a0:	75 03                	jne    c00041a5 <dir_find+0x73>
c00041a2:	83 c2 02             	add    edx,0x2
c00041a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a9:	89 d0                	mov    eax,edx
c00041ab:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041ae:	e8 be da ff ff       	call   c0001c71 <ld_word>
c00041b3:	83 ec 0c             	sub    esp,0xc
c00041b6:	0f b7 c0             	movzx  eax,ax
c00041b9:	50                   	push   eax
c00041ba:	e8 0e 44 00 00       	call   c00085cd <ff_wtoupper>
c00041bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041c3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00041cd:	e8 fb 43 00 00       	call   c00085cd <ff_wtoupper>
c00041d2:	83 c4 10             	add    esp,0x10
c00041d5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d9:	75 87                	jne    c0004162 <dir_find+0x30>
c00041db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041df:	45                   	inc    ebp
c00041e0:	83 c2 02             	add    edx,0x2
c00041e3:	eb ac                	jmp    c0004191 <dir_find+0x5f>
c00041e5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041ec:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041f1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fc:	89 f0                	mov    eax,esi
c00041fe:	e8 4c e2 ff ff       	call   c000244f <move_window>
c0004203:	85 c0                	test   eax,eax
c0004205:	0f 85 c6 00 00 00    	jne    c00042d1 <dir_find+0x19f>
c000420b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000420e:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004211:	84 c9                	test   cl,cl
c0004213:	0f 84 bd 00 00 00    	je     c00042d6 <dir_find+0x1a4>
c0004219:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000421c:	88 d0                	mov    al,dl
c000421e:	83 e0 3f             	and    eax,0x3f
c0004221:	80 f9 e5             	cmp    cl,0xe5
c0004224:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004227:	0f 84 87 00 00 00    	je     c00042b4 <dir_find+0x182>
c000422d:	80 e2 08             	and    dl,0x8
c0004230:	74 06                	je     c0004238 <dir_find+0x106>
c0004232:	3c 0f                	cmp    al,0xf
c0004234:	75 7e                	jne    c00042b4 <dir_find+0x182>
c0004236:	eb 04                	jmp    c000423c <dir_find+0x10a>
c0004238:	3c 0f                	cmp    al,0xf
c000423a:	75 4c                	jne    c0004288 <dir_find+0x156>
c000423c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004240:	75 7e                	jne    c00042c0 <dir_find+0x18e>
c0004242:	f6 c1 40             	test   cl,0x40
c0004245:	74 12                	je     c0004259 <dir_find+0x127>
c0004247:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000424a:	83 e1 bf             	and    ecx,0xffffffbf
c000424d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004251:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004254:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004257:	eb 06                	jmp    c000425f <dir_find+0x12d>
c0004259:	89 f8                	mov    eax,edi
c000425b:	38 c8                	cmp    al,cl
c000425d:	75 5c                	jne    c00042bb <dir_find+0x189>
c000425f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004263:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004268:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000426b:	75 53                	jne    c00042c0 <dir_find+0x18e>
c000426d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004271:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004274:	89 ea                	mov    edx,ebp
c0004276:	e8 f4 fd ff ff       	call   c000406f <cmp_lfn>
c000427b:	85 c0                	test   eax,eax
c000427d:	74 41                	je     c00042c0 <dir_find+0x18e>
c000427f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004283:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004286:	eb 38                	jmp    c00042c0 <dir_find+0x18e>
c0004288:	89 f8                	mov    eax,edi
c000428a:	84 c0                	test   al,al
c000428c:	75 0d                	jne    c000429b <dir_find+0x169>
c000428e:	89 e8                	mov    eax,ebp
c0004290:	e8 98 de ff ff       	call   c000212d <sum_sfn>
c0004295:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004299:	74 52                	je     c00042ed <dir_find+0x1bb>
c000429b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000429f:	75 13                	jne    c00042b4 <dir_find+0x182>
c00042a1:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a9:	89 e8                	mov    eax,ebp
c00042ab:	e8 60 da ff ff       	call   c0001d10 <mem_cmp>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	74 39                	je     c00042ed <dir_find+0x1bb>
c00042b4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	89 d8                	mov    eax,ebx
c00042c4:	e8 5c f4 ff ff       	call   c0003725 <dir_next>
c00042c9:	85 c0                	test   eax,eax
c00042cb:	0f 84 25 ff ff ff    	je     c00041f6 <dir_find+0xc4>
c00042d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042d4:	eb 17                	jmp    c00042ed <dir_find+0x1bb>
c00042d6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042dd:	eb 0e                	jmp    c00042ed <dir_find+0x1bb>
c00042df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042e2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042e7:	0f 85 75 fe ff ff    	jne    c0004162 <dir_find+0x30>
c00042ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042f0:	83 c4 1c             	add    esp,0x1c
c00042f3:	5b                   	pop    ebx
c00042f4:	5e                   	pop    esi
c00042f5:	5f                   	pop    edi
c00042f6:	5d                   	pop    ebp
c00042f7:	c3                   	ret    

c00042f8 <dir_register>:
c00042f8:	55                   	push   ebp
c00042f9:	57                   	push   edi
c00042fa:	56                   	push   esi
c00042fb:	be 06 00 00 00       	mov    esi,0x6
c0004300:	53                   	push   ebx
c0004301:	83 ec 6c             	sub    esp,0x6c
c0004304:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004308:	0f 85 62 02 00 00    	jne    c0004570 <dir_register+0x278>
c000430e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004310:	31 ff                	xor    edi,edi
c0004312:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004315:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000431a:	74 03                	je     c000431f <dir_register+0x27>
c000431c:	47                   	inc    edi
c000431d:	eb f6                	jmp    c0004315 <dir_register+0x1d>
c000431f:	89 c3                	mov    ebx,eax
c0004321:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004325:	0f 85 e1 00 00 00    	jne    c000440c <dir_register+0x114>
c000432b:	83 c7 0e             	add    edi,0xe
c000432e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004333:	89 f8                	mov    eax,edi
c0004335:	31 d2                	xor    edx,edx
c0004337:	f7 f1                	div    ecx
c0004339:	8d 50 02             	lea    edx,[eax+0x2]
c000433c:	89 c7                	mov    edi,eax
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 12 f8 ff ff       	call   c0003b57 <dir_alloc>
c0004345:	89 c6                	mov    esi,eax
c0004347:	85 c0                	test   eax,eax
c0004349:	0f 85 21 02 00 00    	jne    c0004570 <dir_register+0x278>
c000434f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004355:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004358:	c1 e7 05             	shl    edi,0x5
c000435b:	29 f8                	sub    eax,edi
c000435d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004360:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004363:	a8 04                	test   al,0x4
c0004365:	0f 84 91 00 00 00    	je     c00043fc <dir_register+0x104>
c000436b:	83 e0 fb             	and    eax,0xfffffffb
c000436e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 25 ec ff ff       	call   c0002f9d <fill_first_frag>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 ee 01 00 00    	jne    c000456e <dir_register+0x276>
c0004380:	83 c9 ff             	or     ecx,0xffffffff
c0004383:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004386:	89 d8                	mov    eax,ebx
c0004388:	e8 db eb ff ff       	call   c0002f68 <fill_last_frag>
c000438d:	85 c0                	test   eax,eax
c000438f:	0f 85 d9 01 00 00    	jne    c000456e <dir_register+0x276>
c0004395:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004399:	74 61                	je     c00043fc <dir_register+0x104>
c000439b:	89 da                	mov    edx,ebx
c000439d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a1:	e8 ea f5 ff ff       	call   c0003990 <load_obj_xdir>
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 c0 01 00 00    	jne    c000456e <dir_register+0x276>
c00043ae:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043b2:	31 c9                	xor    ecx,ecx
c00043b4:	c1 e2 09             	shl    edx,0x9
c00043b7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043ba:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043bd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043c0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c6:	83 c0 38             	add    eax,0x38
c00043c9:	e8 1c d9 ff ff       	call   c0001cea <st_qword>
c00043ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043d4:	83 c0 28             	add    eax,0x28
c00043d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043da:	e8 0b d9 ff ff       	call   c0001cea <st_qword>
c00043df:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043e2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043e5:	83 c8 01             	or     eax,0x1
c00043e8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ef:	e8 db f7 ff ff       	call   c0003bcf <store_xdir>
c00043f4:	85 c0                	test   eax,eax
c00043f6:	0f 85 72 01 00 00    	jne    c000456e <dir_register+0x276>
c00043fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004402:	e8 c1 fb ff ff       	call   c0003fc8 <create_xdir>
c0004407:	e9 64 01 00 00       	jmp    c0004570 <dir_register+0x278>
c000440c:	8d 40 3c             	lea    eax,[eax+0x3c]
c000440f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004414:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004418:	89 c2                	mov    edx,eax
c000441a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000441e:	e8 cd d8 ff ff       	call   c0001cf0 <mem_cpy>
c0004423:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004428:	74 58                	je     c0004482 <dir_register+0x18a>
c000442a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000442e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004436:	83 ec 0c             	sub    esp,0xc
c0004439:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000443c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004440:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004444:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004448:	e8 24 dc ff ff       	call   c0002071 <gen_numname>
c000444d:	89 d8                	mov    eax,ebx
c000444f:	e8 de fc ff ff       	call   c0004132 <dir_find>
c0004454:	83 c4 10             	add    esp,0x10
c0004457:	89 c6                	mov    esi,eax
c0004459:	85 c0                	test   eax,eax
c000445b:	75 15                	jne    c0004472 <dir_register+0x17a>
c000445d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004461:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004466:	75 ce                	jne    c0004436 <dir_register+0x13e>
c0004468:	be 07 00 00 00       	mov    esi,0x7
c000446d:	e9 fe 00 00 00       	jmp    c0004570 <dir_register+0x278>
c0004472:	83 f8 04             	cmp    eax,0x4
c0004475:	0f 85 f5 00 00 00    	jne    c0004570 <dir_register+0x278>
c000447b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000447f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004482:	b9 01 00 00 00       	mov    ecx,0x1
c0004487:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000448c:	74 0f                	je     c000449d <dir_register+0x1a5>
c000448e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004493:	8d 47 0c             	lea    eax,[edi+0xc]
c0004496:	31 d2                	xor    edx,edx
c0004498:	f7 f1                	div    ecx
c000449a:	8d 48 01             	lea    ecx,[eax+0x1]
c000449d:	89 ca                	mov    edx,ecx
c000449f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044a3:	89 d8                	mov    eax,ebx
c00044a5:	e8 ad f6 ff ff       	call   c0003b57 <dir_alloc>
c00044aa:	89 c6                	mov    esi,eax
c00044ac:	85 c0                	test   eax,eax
c00044ae:	0f 85 bc 00 00 00    	jne    c0004570 <dir_register+0x278>
c00044b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b8:	49                   	dec    ecx
c00044b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044bd:	74 6a                	je     c0004529 <dir_register+0x231>
c00044bf:	89 c8                	mov    eax,ecx
c00044c1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044c4:	c1 e0 05             	shl    eax,0x5
c00044c7:	29 c2                	sub    edx,eax
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 fd ec ff ff       	call   c00031cd <dir_sdi>
c00044d0:	89 c6                	mov    esi,eax
c00044d2:	85 c0                	test   eax,eax
c00044d4:	0f 85 96 00 00 00    	jne    c0004570 <dir_register+0x278>
c00044da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044de:	e8 4a dc ff ff       	call   c000212d <sum_sfn>
c00044e3:	0f b6 f8             	movzx  edi,al
c00044e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044ec:	89 e8                	mov    eax,ebp
c00044ee:	e8 5c df ff ff       	call   c000244f <move_window>
c00044f3:	89 c6                	mov    esi,eax
c00044f5:	85 c0                	test   eax,eax
c00044f7:	75 77                	jne    c0004570 <dir_register+0x278>
c00044f9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004507:	57                   	push   edi
c0004508:	e8 e0 da ff ff       	call   c0001fed <put_lfn>
c000450d:	31 d2                	xor    edx,edx
c000450f:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004513:	89 d8                	mov    eax,ebx
c0004515:	e8 0b f2 ff ff       	call   c0003725 <dir_next>
c000451a:	83 c4 10             	add    esp,0x10
c000451d:	89 c6                	mov    esi,eax
c000451f:	85 c0                	test   eax,eax
c0004521:	75 4d                	jne    c0004570 <dir_register+0x278>
c0004523:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004527:	75 bd                	jne    c00044e6 <dir_register+0x1ee>
c0004529:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000452c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000452f:	89 e8                	mov    eax,ebp
c0004531:	e8 19 df ff ff       	call   c000244f <move_window>
c0004536:	89 c6                	mov    esi,eax
c0004538:	85 c0                	test   eax,eax
c000453a:	75 34                	jne    c0004570 <dir_register+0x278>
c000453c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453f:	b9 20 00 00 00       	mov    ecx,0x20
c0004544:	31 d2                	xor    edx,edx
c0004546:	e8 ba d7 ff ff       	call   c0001d05 <mem_set>
c000454b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000454e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004552:	b9 0b 00 00 00       	mov    ecx,0xb
c0004557:	e8 94 d7 ff ff       	call   c0001cf0 <mem_cpy>
c000455c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000455f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004562:	83 e0 18             	and    eax,0x18
c0004565:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004568:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000456c:	eb 02                	jmp    c0004570 <dir_register+0x278>
c000456e:	89 c6                	mov    esi,eax
c0004570:	83 c4 6c             	add    esp,0x6c
c0004573:	89 f0                	mov    eax,esi
c0004575:	5b                   	pop    ebx
c0004576:	5e                   	pop    esi
c0004577:	5f                   	pop    edi
c0004578:	5d                   	pop    ebp
c0004579:	c3                   	ret    

c000457a <sync_fs>:
c000457a:	56                   	push   esi
c000457b:	53                   	push   ebx
c000457c:	53                   	push   ebx
c000457d:	89 c3                	mov    ebx,eax
c000457f:	e8 37 de ff ff       	call   c00023bb <sync_window>
c0004584:	85 c0                	test   eax,eax
c0004586:	0f 85 b1 00 00 00    	jne    c000463d <sync_fs+0xc3>
c000458c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000458f:	0f 85 8e 00 00 00    	jne    c0004623 <sync_fs+0xa9>
c0004595:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004599:	0f 85 84 00 00 00    	jne    c0004623 <sync_fs+0xa9>
c000459f:	b9 00 02 00 00       	mov    ecx,0x200
c00045a4:	8d 73 54             	lea    esi,[ebx+0x54]
c00045a7:	31 d2                	xor    edx,edx
c00045a9:	89 f0                	mov    eax,esi
c00045ab:	e8 55 d7 ff ff       	call   c0001d05 <mem_set>
c00045b0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045b6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045bb:	e8 23 d7 ff ff       	call   c0001ce3 <st_word>
c00045c0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045c5:	89 f0                	mov    eax,esi
c00045c7:	e8 1b d7 ff ff       	call   c0001ce7 <st_dword>
c00045cc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045d2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045d7:	e8 0b d7 ff ff       	call   c0001ce7 <st_dword>
c00045dc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045df:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045e5:	e8 fd d6 ff ff       	call   c0001ce7 <st_dword>
c00045ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045ed:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045f3:	e8 ef d6 ff ff       	call   c0001ce7 <st_dword>
c00045f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045fe:	83 c0 01             	add    eax,0x1
c0004601:	83 d2 00             	adc    edx,0x0
c0004604:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004607:	83 ec 0c             	sub    esp,0xc
c000460a:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000460d:	6a 01                	push   0x1
c000460f:	52                   	push   edx
c0004610:	50                   	push   eax
c0004611:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004615:	56                   	push   esi
c0004616:	50                   	push   eax
c0004617:	e8 20 d6 ff ff       	call   c0001c3c <disk_write>
c000461c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004620:	83 c4 20             	add    esp,0x20
c0004623:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004627:	51                   	push   ecx
c0004628:	6a 00                	push   0x0
c000462a:	6a 00                	push   0x0
c000462c:	50                   	push   eax
c000462d:	e8 20 d6 ff ff       	call   c0001c52 <disk_ioctl>
c0004632:	83 c4 10             	add    esp,0x10
c0004635:	85 c0                	test   eax,eax
c0004637:	0f 95 c0             	setne  al
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	5a                   	pop    edx
c000463e:	5b                   	pop    ebx
c000463f:	5e                   	pop    esi
c0004640:	c3                   	ret    

c0004641 <create_partition>:
c0004641:	55                   	push   ebp
c0004642:	0f b6 c0             	movzx  eax,al
c0004645:	57                   	push   edi
c0004646:	56                   	push   esi
c0004647:	53                   	push   ebx
c0004648:	83 ec 60             	sub    esp,0x60
c000464b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000464f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004653:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004657:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000465b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000465f:	50                   	push   eax
c0004660:	6a 01                	push   0x1
c0004662:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004666:	e8 e7 d5 ff ff       	call   c0001c52 <disk_ioctl>
c000466b:	83 c4 10             	add    esp,0x10
c000466e:	85 c0                	test   eax,eax
c0004670:	74 0a                	je     c000467c <create_partition+0x3b>
c0004672:	b8 01 00 00 00       	mov    eax,0x1
c0004677:	e9 67 05 00 00       	jmp    c0004be3 <create_partition+0x5a2>
c000467c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004680:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004688:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000468c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004691:	0f 86 ed 03 00 00    	jbe    c0004a84 <create_partition+0x443>
c0004697:	83 c0 df             	add    eax,0xffffffdf
c000469a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046a2:	83 d2 ff             	adc    edx,0xffffffff
c00046a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046b5:	83 c0 bd             	add    eax,0xffffffbd
c00046b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046bf:	83 d2 ff             	adc    edx,0xffffffff
c00046c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ca:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d2:	be 22 00 00 00       	mov    esi,0x22
c00046d7:	31 ff                	xor    edi,edi
c00046d9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046e1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046f1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046f5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046fb:	75 0e                	jne    c000470b <create_partition+0xca>
c00046fd:	b9 00 02 00 00       	mov    ecx,0x200
c0004702:	31 d2                	xor    edx,edx
c0004704:	89 d8                	mov    eax,ebx
c0004706:	e8 fa d5 ff ff       	call   c0001d05 <mem_set>
c000470b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000470f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004717:	0b 04 24             	or     eax,DWORD PTR [esp]
c000471a:	0f 84 23 01 00 00    	je     c0004843 <create_partition+0x202>
c0004720:	89 f0                	mov    eax,esi
c0004722:	89 fa                	mov    edx,edi
c0004724:	05 ff 07 00 00       	add    eax,0x7ff
c0004729:	83 d2 00             	adc    edx,0x0
c000472c:	89 c1                	mov    ecx,eax
c000472e:	89 d7                	mov    edi,edx
c0004730:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004736:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000473a:	89 ce                	mov    esi,ecx
c000473c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004740:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004744:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004748:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000474b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000474f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004752:	b8 64 00 00 00       	mov    eax,0x64
c0004757:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000475a:	b8 00 00 00 00       	mov    eax,0x0
c000475f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004763:	72 41                	jb     c00047a6 <create_partition+0x165>
c0004765:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000476d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004771:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004776:	01 c1                	add    ecx,eax
c0004778:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000477c:	f7 24 24             	mul    DWORD PTR [esp]
c000477f:	6a 00                	push   0x0
c0004781:	01 ca                	add    edx,ecx
c0004783:	6a 64                	push   0x64
c0004785:	52                   	push   edx
c0004786:	50                   	push   eax
c0004787:	e8 18 2a 02 00       	call   c00271a4 <__udivdi3>
c000478c:	83 c4 10             	add    esp,0x10
c000478f:	05 ff 07 00 00       	add    eax,0x7ff
c0004794:	83 d2 00             	adc    edx,0x0
c0004797:	89 c1                	mov    ecx,eax
c0004799:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000479d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047ad:	01 f0                	add    eax,esi
c00047af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b3:	11 fa                	adc    edx,edi
c00047b5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b9:	19 d1                	sbb    ecx,edx
c00047bb:	73 2e                	jae    c00047eb <create_partition+0x1aa>
c00047bd:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047c1:	89 f8                	mov    eax,edi
c00047c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ca:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047ce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047d6:	73 6b                	jae    c0004843 <create_partition+0x202>
c00047d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047e0:	29 f0                	sub    eax,esi
c00047e2:	19 fa                	sbb    edx,edi
c00047e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047ef:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047f2:	74 4f                	je     c0004843 <create_partition+0x202>
c00047f4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047f7:	b9 10 00 00 00       	mov    ecx,0x10
c00047fc:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c0004801:	e8 ea d4 ff ff       	call   c0001cf0 <mem_cpy>
c0004806:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000480a:	b9 10 00 00 00       	mov    ecx,0x10
c000480f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004813:	e8 2c db ff ff       	call   c0002344 <make_rand>
c0004818:	89 f2                	mov    edx,esi
c000481a:	89 f9                	mov    ecx,edi
c000481c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004820:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004824:	e8 c1 d4 ff ff       	call   c0001cea <st_qword>
c0004829:	03 34 24             	add    esi,DWORD PTR [esp]
c000482c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004830:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004834:	89 f2                	mov    edx,esi
c0004836:	89 f9                	mov    ecx,edi
c0004838:	83 c2 ff             	add    edx,0xffffffff
c000483b:	83 d1 ff             	adc    ecx,0xffffffff
c000483e:	e8 a7 d4 ff ff       	call   c0001cea <st_qword>
c0004843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004847:	83 e8 80             	sub    eax,0xffffff80
c000484a:	89 c5                	mov    ebp,eax
c000484c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004850:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004856:	75 6b                	jne    c00048c3 <create_partition+0x282>
c0004858:	45                   	inc    ebp
c0004859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000485d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004862:	e8 39 da ff ff       	call   c00022a0 <crc32>
c0004867:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000486d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004871:	75 e5                	jne    c0004858 <create_partition+0x217>
c0004873:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004877:	31 d2                	xor    edx,edx
c0004879:	83 ec 0c             	sub    esp,0xc
c000487c:	c1 ed 09             	shr    ebp,0x9
c000487f:	6a 01                	push   0x1
c0004881:	8d 45 02             	lea    eax,[ebp+0x2]
c0004884:	52                   	push   edx
c0004885:	50                   	push   eax
c0004886:	53                   	push   ebx
c0004887:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000488b:	e8 ac d3 ff ff       	call   c0001c3c <disk_write>
c0004890:	83 c4 20             	add    esp,0x20
c0004893:	85 c0                	test   eax,eax
c0004895:	0f 85 d7 fd ff ff    	jne    c0004672 <create_partition+0x31>
c000489b:	83 ec 0c             	sub    esp,0xc
c000489e:	31 d2                	xor    edx,edx
c00048a0:	6a 01                	push   0x1
c00048a2:	89 e8                	mov    eax,ebp
c00048a4:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a8:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048ac:	52                   	push   edx
c00048ad:	50                   	push   eax
c00048ae:	53                   	push   ebx
c00048af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b3:	e8 84 d3 ff ff       	call   c0001c3c <disk_write>
c00048b8:	83 c4 20             	add    esp,0x20
c00048bb:	85 c0                	test   eax,eax
c00048bd:	0f 85 af fd ff ff    	jne    c0004672 <create_partition+0x31>
c00048c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048cb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048d0:	74 0d                	je     c00048df <create_partition+0x29e>
c00048d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048da:	e9 12 fe ff ff       	jmp    c00046f1 <create_partition+0xb0>
c00048df:	31 d2                	xor    edx,edx
c00048e1:	b9 00 02 00 00       	mov    ecx,0x200
c00048e6:	89 d8                	mov    eax,ebx
c00048e8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048eb:	e8 15 d4 ff ff       	call   c0001d05 <mem_set>
c00048f0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048f3:	b9 10 00 00 00       	mov    ecx,0x10
c00048f8:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c00048fd:	89 d8                	mov    eax,ebx
c00048ff:	e8 ec d3 ff ff       	call   c0001cf0 <mem_cpy>
c0004904:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004908:	8d 43 58             	lea    eax,[ebx+0x58]
c000490b:	f7 d2                	not    edx
c000490d:	e8 d5 d3 ff ff       	call   c0001ce7 <st_dword>
c0004912:	8d 43 18             	lea    eax,[ebx+0x18]
c0004915:	31 c9                	xor    ecx,ecx
c0004917:	89 04 24             	mov    DWORD PTR [esp],eax
c000491a:	ba 01 00 00 00       	mov    edx,0x1
c000491f:	e8 c6 d3 ff ff       	call   c0001cea <st_qword>
c0004924:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004928:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000492c:	83 c2 ff             	add    edx,0xffffffff
c000492f:	89 e8                	mov    eax,ebp
c0004931:	83 d1 ff             	adc    ecx,0xffffffff
c0004934:	e8 b1 d3 ff ff       	call   c0001cea <st_qword>
c0004939:	31 c9                	xor    ecx,ecx
c000493b:	8d 43 28             	lea    eax,[ebx+0x28]
c000493e:	ba 22 00 00 00       	mov    edx,0x22
c0004943:	e8 a2 d3 ff ff       	call   c0001cea <st_qword>
c0004948:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000494c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004950:	83 c2 de             	add    edx,0xffffffde
c0004953:	8d 43 30             	lea    eax,[ebx+0x30]
c0004956:	83 d1 ff             	adc    ecx,0xffffffff
c0004959:	31 f6                	xor    esi,esi
c000495b:	e8 8a d3 ff ff       	call   c0001cea <st_qword>
c0004960:	8d 43 54             	lea    eax,[ebx+0x54]
c0004963:	ba 80 00 00 00       	mov    edx,0x80
c0004968:	e8 7a d3 ff ff       	call   c0001ce7 <st_dword>
c000496d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004970:	ba 80 00 00 00       	mov    edx,0x80
c0004975:	e8 6d d3 ff ff       	call   c0001ce7 <st_dword>
c000497a:	ba 02 00 00 00       	mov    edx,0x2
c000497f:	89 f8                	mov    eax,edi
c0004981:	e8 61 d3 ff ff       	call   c0001ce7 <st_dword>
c0004986:	8d 53 38             	lea    edx,[ebx+0x38]
c0004989:	b9 10 00 00 00       	mov    ecx,0x10
c000498e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004992:	e8 ad d9 ff ff       	call   c0002344 <make_rand>
c0004997:	83 c8 ff             	or     eax,0xffffffff
c000499a:	46                   	inc    esi
c000499b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049a0:	e8 fb d8 ff ff       	call   c00022a0 <crc32>
c00049a5:	83 fe 5c             	cmp    esi,0x5c
c00049a8:	75 f0                	jne    c000499a <create_partition+0x359>
c00049aa:	f7 d0                	not    eax
c00049ac:	8d 73 10             	lea    esi,[ebx+0x10]
c00049af:	89 c2                	mov    edx,eax
c00049b1:	89 f0                	mov    eax,esi
c00049b3:	e8 2f d3 ff ff       	call   c0001ce7 <st_dword>
c00049b8:	83 ec 0c             	sub    esp,0xc
c00049bb:	6a 01                	push   0x1
c00049bd:	6a 00                	push   0x0
c00049bf:	6a 01                	push   0x1
c00049c1:	53                   	push   ebx
c00049c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049c6:	e8 71 d2 ff ff       	call   c0001c3c <disk_write>
c00049cb:	83 c4 20             	add    esp,0x20
c00049ce:	85 c0                	test   eax,eax
c00049d0:	0f 85 9c fc ff ff    	jne    c0004672 <create_partition+0x31>
c00049d6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049da:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049de:	83 c2 ff             	add    edx,0xffffffff
c00049e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049e4:	83 d1 ff             	adc    ecx,0xffffffff
c00049e7:	e8 fe d2 ff ff       	call   c0001cea <st_qword>
c00049ec:	ba 01 00 00 00       	mov    edx,0x1
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	89 e8                	mov    eax,ebp
c00049f5:	e8 f0 d2 ff ff       	call   c0001cea <st_qword>
c00049fa:	89 f8                	mov    eax,edi
c00049fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a04:	31 ff                	xor    edi,edi
c0004a06:	e8 df d2 ff ff       	call   c0001cea <st_qword>
c0004a0b:	89 f0                	mov    eax,esi
c0004a0d:	31 d2                	xor    edx,edx
c0004a0f:	e8 d3 d2 ff ff       	call   c0001ce7 <st_dword>
c0004a14:	83 c8 ff             	or     eax,0xffffffff
c0004a17:	47                   	inc    edi
c0004a18:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a1d:	e8 7e d8 ff ff       	call   c00022a0 <crc32>
c0004a22:	83 ff 5c             	cmp    edi,0x5c
c0004a25:	75 f0                	jne    c0004a17 <create_partition+0x3d6>
c0004a27:	f7 d0                	not    eax
c0004a29:	89 c2                	mov    edx,eax
c0004a2b:	89 f0                	mov    eax,esi
c0004a2d:	e8 b5 d2 ff ff       	call   c0001ce7 <st_dword>
c0004a32:	83 ec 0c             	sub    esp,0xc
c0004a35:	6a 01                	push   0x1
c0004a37:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a3b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a3f:	83 c0 ff             	add    eax,0xffffffff
c0004a42:	83 d2 ff             	adc    edx,0xffffffff
c0004a45:	52                   	push   edx
c0004a46:	50                   	push   eax
c0004a47:	53                   	push   ebx
c0004a48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a4c:	e8 eb d1 ff ff       	call   c0001c3c <disk_write>
c0004a51:	83 c4 20             	add    esp,0x20
c0004a54:	85 c0                	test   eax,eax
c0004a56:	0f 85 16 fc ff ff    	jne    c0004672 <create_partition+0x31>
c0004a5c:	31 d2                	xor    edx,edx
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	b9 00 02 00 00       	mov    ecx,0x200
c0004a65:	e8 9b d2 ff ff       	call   c0001d05 <mem_set>
c0004a6a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a70:	b9 10 00 00 00       	mov    ecx,0x10
c0004a75:	ba 30 9c 02 c0       	mov    edx,0xc0029c30
c0004a7a:	e8 71 d2 ff ff       	call   c0001cf0 <mem_cpy>
c0004a7f:	e9 21 01 00 00       	jmp    c0004ba5 <create_partition+0x564>
c0004a84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a88:	b9 05 00 00 00       	mov    ecx,0x5
c0004a8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a90:	bf 08 00 00 00       	mov    edi,0x8
c0004a95:	89 f8                	mov    eax,edi
c0004a97:	31 d2                	xor    edx,edx
c0004a99:	0f b6 f0             	movzx  esi,al
c0004a9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a9f:	f7 f6                	div    esi
c0004aa1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004aa6:	76 0a                	jbe    c0004ab2 <create_partition+0x471>
c0004aa8:	d1 e7                	shl    edi,1
c0004aaa:	49                   	dec    ecx
c0004aab:	75 e8                	jne    c0004a95 <create_partition+0x454>
c0004aad:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004ab2:	b9 00 02 00 00       	mov    ecx,0x200
c0004ab7:	31 d2                	xor    edx,edx
c0004ab9:	89 d8                	mov    eax,ebx
c0004abb:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ac1:	e8 3f d2 ff ff       	call   c0001d05 <mem_set>
c0004ac6:	b9 64 00 00 00       	mov    ecx,0x64
c0004acb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ace:	31 d2                	xor    edx,edx
c0004ad0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad8:	f7 f1                	div    ecx
c0004ada:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004adf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ae3:	89 f8                	mov    eax,edi
c0004ae5:	0f b6 c0             	movzx  eax,al
c0004ae8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aec:	e9 80 00 00 00       	jmp    c0004b71 <create_partition+0x530>
c0004af1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004af4:	29 cf                	sub    edi,ecx
c0004af6:	89 ca                	mov    edx,ecx
c0004af8:	89 f0                	mov    eax,esi
c0004afa:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aff:	e8 e3 d1 ff ff       	call   c0001ce7 <st_dword>
c0004b04:	8d 46 04             	lea    eax,[esi+0x4]
c0004b07:	89 fa                	mov    edx,edi
c0004b09:	83 c6 10             	add    esi,0x10
c0004b0c:	e8 d6 d1 ff ff       	call   c0001ce7 <st_dword>
c0004b11:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b15:	31 d2                	xor    edx,edx
c0004b17:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b1a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	01 f9                	add    ecx,edi
c0004b22:	f7 f5                	div    ebp
c0004b24:	89 d5                	mov    ebp,edx
c0004b26:	31 d2                	xor    edx,edx
c0004b28:	45                   	inc    ebp
c0004b29:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b2d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b30:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b33:	89 c2                	mov    edx,eax
c0004b35:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b38:	c1 ea 02             	shr    edx,0x2
c0004b3b:	83 e2 c0             	and    edx,0xffffffc0
c0004b3e:	09 ea                	or     edx,ebp
c0004b40:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b45:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b48:	31 d2                	xor    edx,edx
c0004b4a:	f7 f5                	div    ebp
c0004b4c:	89 d7                	mov    edi,edx
c0004b4e:	31 d2                	xor    edx,edx
c0004b50:	47                   	inc    edi
c0004b51:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b55:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b58:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b5b:	89 c5                	mov    ebp,eax
c0004b5d:	c1 ed 02             	shr    ebp,0x2
c0004b60:	83 e5 c0             	and    ebp,0xffffffc0
c0004b63:	09 ef                	or     edi,ebp
c0004b65:	89 fa                	mov    edx,edi
c0004b67:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b6a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b6f:	74 34                	je     c0004ba5 <create_partition+0x564>
c0004b71:	85 c9                	test   ecx,ecx
c0004b73:	74 30                	je     c0004ba5 <create_partition+0x564>
c0004b75:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b78:	76 2b                	jbe    c0004ba5 <create_partition+0x564>
c0004b7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b7e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b82:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b85:	83 ff 64             	cmp    edi,0x64
c0004b88:	76 4b                	jbe    c0004bd5 <create_partition+0x594>
c0004b8a:	89 f8                	mov    eax,edi
c0004b8c:	01 c8                	add    eax,ecx
c0004b8e:	0f 82 5d ff ff ff    	jb     c0004af1 <create_partition+0x4b0>
c0004b94:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b97:	0f 87 54 ff ff ff    	ja     c0004af1 <create_partition+0x4b0>
c0004b9d:	85 ff                	test   edi,edi
c0004b9f:	0f 85 51 ff ff ff    	jne    c0004af6 <create_partition+0x4b5>
c0004ba5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004bab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bb0:	e8 2e d1 ff ff       	call   c0001ce3 <st_word>
c0004bb5:	83 ec 0c             	sub    esp,0xc
c0004bb8:	6a 01                	push   0x1
c0004bba:	6a 00                	push   0x0
c0004bbc:	6a 00                	push   0x0
c0004bbe:	53                   	push   ebx
c0004bbf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bc3:	e8 74 d0 ff ff       	call   c0001c3c <disk_write>
c0004bc8:	83 c4 20             	add    esp,0x20
c0004bcb:	85 c0                	test   eax,eax
c0004bcd:	0f 95 c0             	setne  al
c0004bd0:	0f b6 c0             	movzx  eax,al
c0004bd3:	eb 0e                	jmp    c0004be3 <create_partition+0x5a2>
c0004bd5:	74 07                	je     c0004bde <create_partition+0x59d>
c0004bd7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bdc:	eb ac                	jmp    c0004b8a <create_partition+0x549>
c0004bde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004be1:	eb a7                	jmp    c0004b8a <create_partition+0x549>
c0004be3:	83 c4 5c             	add    esp,0x5c
c0004be6:	5b                   	pop    ebx
c0004be7:	5e                   	pop    esi
c0004be8:	5f                   	pop    edi
c0004be9:	5d                   	pop    ebp
c0004bea:	c3                   	ret    

c0004beb <get_fileinfo>:
c0004beb:	55                   	push   ebp
c0004bec:	57                   	push   edi
c0004bed:	56                   	push   esi
c0004bee:	53                   	push   ebx
c0004bef:	83 ec 1c             	sub    esp,0x1c
c0004bf2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bf4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bfc:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bff:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c02:	0f 84 dc 01 00 00    	je     c0004de4 <get_fileinfo+0x1f9>
c0004c08:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c0b:	75 0f                	jne    c0004c1c <get_fileinfo+0x31>
c0004c0d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c10:	83 c4 1c             	add    esp,0x1c
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	5f                   	pop    edi
c0004c16:	5d                   	pop    ebp
c0004c17:	e9 58 d5 ff ff       	jmp    c0002174 <get_xfileinfo>
c0004c1c:	89 d3                	mov    ebx,edx
c0004c1e:	89 c6                	mov    esi,eax
c0004c20:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c24:	74 6a                	je     c0004c90 <get_fileinfo+0xa5>
c0004c26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c2e:	31 ed                	xor    ebp,ebp
c0004c30:	31 ff                	xor    edi,edi
c0004c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c3d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c41:	66 85 d2             	test   dx,dx
c0004c44:	74 3e                	je     c0004c84 <get_fileinfo+0x99>
c0004c46:	66 85 ed             	test   bp,bp
c0004c49:	75 0c                	jne    c0004c57 <get_fileinfo+0x6c>
c0004c4b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c51:	66 3d ff 07          	cmp    ax,0x7ff
c0004c55:	76 22                	jbe    c0004c79 <get_fileinfo+0x8e>
c0004c57:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c5c:	89 e8                	mov    eax,ebp
c0004c5e:	29 f9                	sub    ecx,edi
c0004c60:	c1 e0 10             	shl    eax,0x10
c0004c63:	09 d0                	or     eax,edx
c0004c65:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c69:	e8 a3 d1 ff ff       	call   c0001e11 <put_utf>
c0004c6e:	84 c0                	test   al,al
c0004c70:	74 10                	je     c0004c82 <get_fileinfo+0x97>
c0004c72:	0f b6 c0             	movzx  eax,al
c0004c75:	31 d2                	xor    edx,edx
c0004c77:	01 c7                	add    edi,eax
c0004c79:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c7e:	89 d5                	mov    ebp,edx
c0004c80:	eb b0                	jmp    c0004c32 <get_fileinfo+0x47>
c0004c82:	31 ff                	xor    edi,edi
c0004c84:	66 85 ed             	test   bp,bp
c0004c87:	74 02                	je     c0004c8b <get_fileinfo+0xa0>
c0004c89:	31 ff                	xor    edi,edi
c0004c8b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c90:	31 ff                	xor    edi,edi
c0004c92:	31 c9                	xor    ecx,ecx
c0004c94:	83 f9 0a             	cmp    ecx,0xa
c0004c97:	0f 87 ad 00 00 00    	ja     c0004d4a <get_fileinfo+0x15f>
c0004c9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca0:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004ca3:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ca7:	66 83 fa 20          	cmp    dx,0x20
c0004cab:	0f 84 92 00 00 00    	je     c0004d43 <get_fileinfo+0x158>
c0004cb1:	66 83 fa 05          	cmp    dx,0x5
c0004cb5:	75 05                	jne    c0004cbc <get_fileinfo+0xd1>
c0004cb7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cbc:	83 ff 0b             	cmp    edi,0xb
c0004cbf:	77 0b                	ja     c0004ccc <get_fileinfo+0xe1>
c0004cc1:	83 fd 09             	cmp    ebp,0x9
c0004cc4:	75 06                	jne    c0004ccc <get_fileinfo+0xe1>
c0004cc6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ccb:	47                   	inc    edi
c0004ccc:	0f b7 c2             	movzx  eax,dx
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	e8 6d d0 ff ff       	call   c0001d45 <dbc_1st>
c0004cd8:	85 c0                	test   eax,eax
c0004cda:	74 2f                	je     c0004d0b <get_fileinfo+0x120>
c0004cdc:	83 fd 08             	cmp    ebp,0x8
c0004cdf:	74 2a                	je     c0004d0b <get_fileinfo+0x120>
c0004ce1:	83 fd 0b             	cmp    ebp,0xb
c0004ce4:	74 25                	je     c0004d0b <get_fileinfo+0x120>
c0004ce6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ced:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cf1:	e8 52 d0 ff ff       	call   c0001d48 <dbc_2nd>
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	74 11                	je     c0004d0b <get_fileinfo+0x120>
c0004cfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cfe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d03:	c1 e2 08             	shl    edx,0x8
c0004d06:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d09:	09 c2                	or     edx,eax
c0004d0b:	0f b7 d2             	movzx  edx,dx
c0004d0e:	50                   	push   eax
c0004d0f:	50                   	push   eax
c0004d10:	68 b5 01 00 00       	push   0x1b5
c0004d15:	52                   	push   edx
c0004d16:	e8 46 38 00 00       	call   c0008561 <ff_oem2uni>
c0004d1b:	83 c4 10             	add    esp,0x10
c0004d1e:	66 85 c0             	test   ax,ax
c0004d21:	75 04                	jne    c0004d27 <get_fileinfo+0x13c>
c0004d23:	31 ff                	xor    edi,edi
c0004d25:	eb 23                	jmp    c0004d4a <get_fileinfo+0x15f>
c0004d27:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d2c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d30:	29 f9                	sub    ecx,edi
c0004d32:	0f b7 c0             	movzx  eax,ax
c0004d35:	e8 d7 d0 ff ff       	call   c0001e11 <put_utf>
c0004d3a:	84 c0                	test   al,al
c0004d3c:	74 e5                	je     c0004d23 <get_fileinfo+0x138>
c0004d3e:	0f b6 c0             	movzx  eax,al
c0004d41:	01 c7                	add    edi,eax
c0004d43:	89 e9                	mov    ecx,ebp
c0004d45:	e9 4a ff ff ff       	jmp    c0004c94 <get_fileinfo+0xa9>
c0004d4a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d4f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d53:	75 54                	jne    c0004da9 <get_fileinfo+0x1be>
c0004d55:	85 ff                	test   edi,edi
c0004d57:	75 0b                	jne    c0004d64 <get_fileinfo+0x179>
c0004d59:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d5d:	ba 01 00 00 00       	mov    edx,0x1
c0004d62:	eb 33                	jmp    c0004d97 <get_fileinfo+0x1ac>
c0004d64:	b1 08                	mov    cl,0x8
c0004d66:	31 d2                	xor    edx,edx
c0004d68:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d6e:	84 c0                	test   al,al
c0004d70:	74 25                	je     c0004d97 <get_fileinfo+0x1ac>
c0004d72:	66 83 f8 2e          	cmp    ax,0x2e
c0004d76:	74 16                	je     c0004d8e <get_fileinfo+0x1a3>
c0004d78:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d7b:	66 83 ff 19          	cmp    di,0x19
c0004d7f:	77 0f                	ja     c0004d90 <get_fileinfo+0x1a5>
c0004d81:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d84:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d87:	74 07                	je     c0004d90 <get_fileinfo+0x1a5>
c0004d89:	83 c0 20             	add    eax,0x20
c0004d8c:	eb 02                	jmp    c0004d90 <get_fileinfo+0x1a5>
c0004d8e:	b1 10                	mov    cl,0x10
c0004d90:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d94:	42                   	inc    edx
c0004d95:	eb d1                	jmp    c0004d68 <get_fileinfo+0x17d>
c0004d97:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004da3:	75 04                	jne    c0004da9 <get_fileinfo+0x1be>
c0004da5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dac:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004daf:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004db2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db5:	83 c0 1c             	add    eax,0x1c
c0004db8:	e8 c1 ce ff ff       	call   c0001c7e <ld_dword>
c0004dbd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dc4:	89 03                	mov    DWORD PTR [ebx],eax
c0004dc6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc9:	83 c0 16             	add    eax,0x16
c0004dcc:	e8 a0 ce ff ff       	call   c0001c71 <ld_word>
c0004dd1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dd5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd8:	83 c0 18             	add    eax,0x18
c0004ddb:	e8 91 ce ff ff       	call   c0001c71 <ld_word>
c0004de0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004de4:	83 c4 1c             	add    esp,0x1c
c0004de7:	5b                   	pop    ebx
c0004de8:	5e                   	pop    esi
c0004de9:	5f                   	pop    edi
c0004dea:	5d                   	pop    ebp
c0004deb:	c3                   	ret    

c0004dec <ld_clust.isra.0>:
c0004dec:	56                   	push   esi
c0004ded:	89 c6                	mov    esi,eax
c0004def:	53                   	push   ebx
c0004df0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004df3:	89 d3                	mov    ebx,edx
c0004df5:	e8 77 ce ff ff       	call   c0001c71 <ld_word>
c0004dfa:	0f b7 c8             	movzx  ecx,ax
c0004dfd:	89 f0                	mov    eax,esi
c0004dff:	3c 03                	cmp    al,0x3
c0004e01:	75 0d                	jne    c0004e10 <ld_clust.isra.0+0x24>
c0004e03:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e06:	e8 66 ce ff ff       	call   c0001c71 <ld_word>
c0004e0b:	c1 e0 10             	shl    eax,0x10
c0004e0e:	09 c1                	or     ecx,eax
c0004e10:	89 c8                	mov    eax,ecx
c0004e12:	5b                   	pop    ebx
c0004e13:	5e                   	pop    esi
c0004e14:	c3                   	ret    

c0004e15 <st_clust.isra.1>:
c0004e15:	56                   	push   esi
c0004e16:	89 c6                	mov    esi,eax
c0004e18:	53                   	push   ebx
c0004e19:	89 d3                	mov    ebx,edx
c0004e1b:	0f b7 d1             	movzx  edx,cx
c0004e1e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e21:	e8 bd ce ff ff       	call   c0001ce3 <st_word>
c0004e26:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e29:	75 0f                	jne    c0004e3a <st_clust.isra.1+0x25>
c0004e2b:	c1 e9 10             	shr    ecx,0x10
c0004e2e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e31:	89 ca                	mov    edx,ecx
c0004e33:	5b                   	pop    ebx
c0004e34:	5e                   	pop    esi
c0004e35:	e9 a9 ce ff ff       	jmp    c0001ce3 <st_word>
c0004e3a:	5b                   	pop    ebx
c0004e3b:	5e                   	pop    esi
c0004e3c:	c3                   	ret    

c0004e3d <init_alloc_info.isra.2>:
c0004e3d:	56                   	push   esi
c0004e3e:	53                   	push   ebx
c0004e3f:	89 c6                	mov    esi,eax
c0004e41:	89 d3                	mov    ebx,edx
c0004e43:	51                   	push   ecx
c0004e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e46:	83 c0 34             	add    eax,0x34
c0004e49:	e8 30 ce ff ff       	call   c0001c7e <ld_dword>
c0004e4e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	83 c0 38             	add    eax,0x38
c0004e56:	e8 3b ce ff ff       	call   c0001c96 <ld_qword>
c0004e5b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e5e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e61:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e63:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e66:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e6d:	83 e0 02             	and    eax,0x2
c0004e70:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e73:	5b                   	pop    ebx
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <follow_path>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c3                	mov    ebx,eax
c0004e7b:	83 ec 14             	sub    esp,0x14
c0004e7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e82:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e88:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e8a:	80 fa 5c             	cmp    dl,0x5c
c0004e8d:	75 07                	jne    c0004e96 <follow_path+0x1f>
c0004e8f:	40                   	inc    eax
c0004e90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e94:	eb ee                	jmp    c0004e84 <follow_path+0xd>
c0004e96:	80 fa 2f             	cmp    dl,0x2f
c0004e99:	74 f4                	je     c0004e8f <follow_path+0x18>
c0004e9b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004ea2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea9:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004eac:	77 52                	ja     c0004f00 <follow_path+0x89>
c0004eae:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eb2:	31 d2                	xor    edx,edx
c0004eb4:	89 d8                	mov    eax,ebx
c0004eb6:	e8 12 e3 ff ff       	call   c00031cd <dir_sdi>
c0004ebb:	eb 7c                	jmp    c0004f39 <follow_path+0xc2>
c0004ebd:	89 d8                	mov    eax,ebx
c0004ebf:	e8 6e f2 ff ff       	call   c0004132 <dir_find>
c0004ec4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	75 46                	jne    c0004f11 <follow_path+0x9a>
c0004ecb:	80 e2 04             	and    dl,0x4
c0004ece:	75 69                	jne    c0004f39 <follow_path+0xc2>
c0004ed0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ed4:	74 5e                	je     c0004f34 <follow_path+0xbd>
c0004ed6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed8:	3c 04                	cmp    al,0x4
c0004eda:	75 41                	jne    c0004f1d <follow_path+0xa6>
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ee3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ee6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee9:	30 c0                	xor    al,al
c0004eeb:	09 d0                	or     eax,edx
c0004eed:	89 da                	mov    edx,ebx
c0004eef:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ef2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ef5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef8:	8d 46 10             	lea    eax,[esi+0x10]
c0004efb:	e8 3d ff ff ff       	call   c0004e3d <init_alloc_info.isra.2>
c0004f00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f04:	89 d8                	mov    eax,ebx
c0004f06:	e8 a9 ed ff ff       	call   c0003cb4 <create_name>
c0004f0b:	85 c0                	test   eax,eax
c0004f0d:	74 ae                	je     c0004ebd <follow_path+0x46>
c0004f0f:	eb 28                	jmp    c0004f39 <follow_path+0xc2>
c0004f11:	83 f8 04             	cmp    eax,0x4
c0004f14:	75 23                	jne    c0004f39 <follow_path+0xc2>
c0004f16:	80 e2 04             	and    dl,0x4
c0004f19:	74 19                	je     c0004f34 <follow_path+0xbd>
c0004f1b:	eb 1c                	jmp    c0004f39 <follow_path+0xc2>
c0004f1d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f20:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f26:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f2a:	e8 bd fe ff ff       	call   c0004dec <ld_clust.isra.0>
c0004f2f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f32:	eb cc                	jmp    c0004f00 <follow_path+0x89>
c0004f34:	b8 05 00 00 00       	mov    eax,0x5
c0004f39:	83 c4 14             	add    esp,0x14
c0004f3c:	5b                   	pop    ebx
c0004f3d:	5e                   	pop    esi
c0004f3e:	c3                   	ret    

c0004f3f <f_mount>:
c0004f3f:	53                   	push   ebx
c0004f40:	83 ec 18             	sub    esp,0x18
c0004f43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f47:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f53:	e8 fb d2 ff ff       	call   c0002253 <get_ldnumber>
c0004f58:	89 c2                	mov    edx,eax
c0004f5a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f5f:	85 d2                	test   edx,edx
c0004f61:	78 39                	js     c0004f9c <f_mount+0x5d>
c0004f63:	8b 04 95 c0 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1240]
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 03                	je     c0004f71 <f_mount+0x32>
c0004f6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f75:	85 c0                	test   eax,eax
c0004f77:	74 03                	je     c0004f7c <f_mount+0x3d>
c0004f79:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f80:	89 04 95 c0 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1240],eax
c0004f87:	31 c0                	xor    eax,eax
c0004f89:	84 db                	test   bl,bl
c0004f8b:	74 0f                	je     c0004f9c <f_mount+0x5d>
c0004f8d:	31 c9                	xor    ecx,ecx
c0004f8f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f97:	e8 65 d7 ff ff       	call   c0002701 <mount_volume>
c0004f9c:	83 c4 18             	add    esp,0x18
c0004f9f:	5b                   	pop    ebx
c0004fa0:	c3                   	ret    

c0004fa1 <f_open>:
c0004fa1:	55                   	push   ebp
c0004fa2:	bd 09 00 00 00       	mov    ebp,0x9
c0004fa7:	57                   	push   edi
c0004fa8:	56                   	push   esi
c0004fa9:	53                   	push   ebx
c0004faa:	83 ec 7c             	sub    esp,0x7c
c0004fad:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fb4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fbb:	85 db                	test   ebx,ebx
c0004fbd:	0f 84 10 04 00 00    	je     c00053d3 <f_open+0x432>
c0004fc3:	89 fe                	mov    esi,edi
c0004fc5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc9:	83 e6 3f             	and    esi,0x3f
c0004fcc:	89 f0                	mov    eax,esi
c0004fce:	0f b6 c8             	movzx  ecx,al
c0004fd1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd8:	e8 24 d7 ff ff       	call   c0002701 <mount_volume>
c0004fdd:	89 c5                	mov    ebp,eax
c0004fdf:	85 c0                	test   eax,eax
c0004fe1:	0f 85 e6 03 00 00    	jne    c00053cd <f_open+0x42c>
c0004fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004feb:	bd 11 00 00 00       	mov    ebp,0x11
c0004ff0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff4:	83 ec 0c             	sub    esp,0xc
c0004ff7:	68 60 04 00 00       	push   0x460
c0004ffc:	e8 a3 34 00 00       	call   c00084a4 <ff_memalloc>
c0005001:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005005:	83 c4 10             	add    esp,0x10
c0005008:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000500d:	0f 84 c0 03 00 00    	je     c00053d3 <f_open+0x432>
c0005013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005017:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000501b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005021:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005024:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005027:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000502e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005032:	e8 40 fe ff ff       	call   c0004e77 <follow_path>
c0005037:	89 c5                	mov    ebp,eax
c0005039:	85 c0                	test   eax,eax
c000503b:	75 0c                	jne    c0005049 <f_open+0xa8>
c000503d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005042:	79 05                	jns    c0005049 <f_open+0xa8>
c0005044:	bd 06 00 00 00       	mov    ebp,0x6
c0005049:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000504f:	0f 84 84 01 00 00    	je     c00051d9 <f_open+0x238>
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 20                	je     c0005079 <f_open+0xd8>
c0005059:	83 fd 04             	cmp    ebp,0x4
c000505c:	0f 85 58 03 00 00    	jne    c00053ba <f_open+0x419>
c0005062:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005066:	83 ce 08             	or     esi,0x8
c0005069:	e8 8a f2 ff ff       	call   c00042f8 <dir_register>
c000506e:	89 c5                	mov    ebp,eax
c0005070:	85 c0                	test   eax,eax
c0005072:	74 2f                	je     c00050a3 <f_open+0x102>
c0005074:	e9 41 03 00 00       	jmp    c00053ba <f_open+0x419>
c0005079:	bd 07 00 00 00       	mov    ebp,0x7
c000507e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005083:	0f 85 31 03 00 00    	jne    c00053ba <f_open+0x419>
c0005089:	bd 08 00 00 00       	mov    ebp,0x8
c000508e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005094:	0f 85 20 03 00 00    	jne    c00053ba <f_open+0x419>
c000509a:	83 e7 08             	and    edi,0x8
c000509d:	0f 84 65 01 00 00    	je     c0005208 <f_open+0x267>
c00050a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050a7:	8a 02                	mov    al,BYTE PTR [edx]
c00050a9:	3c 04                	cmp    al,0x4
c00050ab:	0f 85 97 00 00 00    	jne    c0005148 <f_open+0x1a7>
c00050b1:	8d 42 10             	lea    eax,[edx+0x10]
c00050b4:	89 13                	mov    DWORD PTR [ebx],edx
c00050b6:	89 da                	mov    edx,ebx
c00050b8:	e8 80 fd ff ff       	call   c0004e3d <init_alloc_info.isra.2>
c00050bd:	31 d2                	xor    edx,edx
c00050bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050cb:	83 c0 02             	add    eax,0x2
c00050ce:	e8 32 cc ff ff       	call   c0001d05 <mem_set>
c00050d3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d8:	31 d2                	xor    edx,edx
c00050da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050e1:	83 c0 26             	add    eax,0x26
c00050e4:	e8 1c cc ff ff       	call   c0001d05 <mem_set>
c00050e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050f0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fc:	83 c0 08             	add    eax,0x8
c00050ff:	e8 e3 cb ff ff       	call   c0001ce7 <st_dword>
c0005104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005108:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000510b:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c000510f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005113:	e8 b7 ea ff ff       	call   c0003bcf <store_xdir>
c0005118:	89 c5                	mov    ebp,eax
c000511a:	85 c0                	test   eax,eax
c000511c:	0f 85 98 02 00 00    	jne    c00053ba <f_open+0x419>
c0005122:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005125:	85 d2                	test   edx,edx
c0005127:	0f 84 db 00 00 00    	je     c0005208 <f_open+0x267>
c000512d:	31 c9                	xor    ecx,ecx
c000512f:	89 d8                	mov    eax,ebx
c0005131:	e8 8e e3 ff ff       	call   c00034c4 <remove_chain>
c0005136:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000513a:	89 c5                	mov    ebp,eax
c000513c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000513f:	48                   	dec    eax
c0005140:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005143:	e9 b8 00 00 00       	jmp    c0005200 <f_open+0x25f>
c0005148:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000514c:	89 ea                	mov    edx,ebp
c000514e:	e8 99 fc ff ff       	call   c0004dec <ld_clust.isra.0>
c0005153:	ba 00 00 21 50       	mov    edx,0x50210000
c0005158:	89 c7                	mov    edi,eax
c000515a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000515d:	e8 85 cb ff ff       	call   c0001ce7 <st_dword>
c0005162:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005166:	31 c9                	xor    ecx,ecx
c0005168:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000516c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005170:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005174:	e8 9c fc ff ff       	call   c0004e15 <st_clust.isra.1>
c0005179:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000517d:	31 d2                	xor    edx,edx
c000517f:	83 c0 1c             	add    eax,0x1c
c0005182:	e8 60 cb ff ff       	call   c0001ce7 <st_dword>
c0005187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518b:	85 ff                	test   edi,edi
c000518d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005191:	74 75                	je     c0005208 <f_open+0x267>
c0005193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005197:	31 c9                	xor    ecx,ecx
c0005199:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000519c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000519f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051a7:	89 fa                	mov    edx,edi
c00051a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051ad:	e8 12 e3 ff ff       	call   c00034c4 <remove_chain>
c00051b2:	89 c5                	mov    ebp,eax
c00051b4:	85 c0                	test   eax,eax
c00051b6:	0f 85 fe 01 00 00    	jne    c00053ba <f_open+0x419>
c00051bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c8:	4f                   	dec    edi
c00051c9:	e8 81 d2 ff ff       	call   c000244f <move_window>
c00051ce:	89 c5                	mov    ebp,eax
c00051d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051d7:	eb 27                	jmp    c0005200 <f_open+0x25f>
c00051d9:	85 ed                	test   ebp,ebp
c00051db:	0f 85 d9 01 00 00    	jne    c00053ba <f_open+0x419>
c00051e1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051e5:	bd 04 00 00 00       	mov    ebp,0x4
c00051ea:	a8 10                	test   al,0x10
c00051ec:	0f 85 c8 01 00 00    	jne    c00053ba <f_open+0x419>
c00051f2:	83 e7 02             	and    edi,0x2
c00051f5:	74 11                	je     c0005208 <f_open+0x267>
c00051f7:	bd 07 00 00 00       	mov    ebp,0x7
c00051fc:	a8 01                	test   al,0x1
c00051fe:	eb 02                	jmp    c0005202 <f_open+0x261>
c0005200:	85 ed                	test   ebp,ebp
c0005202:	0f 85 b2 01 00 00    	jne    c00053ba <f_open+0x419>
c0005208:	f7 c6 08 00 00 00    	test   esi,0x8
c000520e:	74 03                	je     c0005213 <f_open+0x272>
c0005210:	83 ce 40             	or     esi,0x40
c0005213:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005217:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000521a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000521d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005220:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005223:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005227:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000522a:	8a 02                	mov    al,BYTE PTR [edx]
c000522c:	3c 04                	cmp    al,0x4
c000522e:	75 2a                	jne    c000525a <f_open+0x2b9>
c0005230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005234:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005239:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000523c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005240:	30 c0                	xor    al,al
c0005242:	09 c8                	or     eax,ecx
c0005244:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005247:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000524b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000524e:	8d 42 10             	lea    eax,[edx+0x10]
c0005251:	89 da                	mov    edx,ebx
c0005253:	e8 e5 fb ff ff       	call   c0004e3d <init_alloc_info.isra.2>
c0005258:	eb 1c                	jmp    c0005276 <f_open+0x2d5>
c000525a:	89 fa                	mov    edx,edi
c000525c:	e8 8b fb ff ff       	call   c0004dec <ld_clust.isra.0>
c0005261:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005264:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005267:	e8 12 ca ff ff       	call   c0001c7e <ld_dword>
c000526c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005273:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000527a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005281:	89 03                	mov    DWORD PTR [ebx],eax
c0005283:	31 d2                	xor    edx,edx
c0005285:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005289:	b9 00 02 00 00       	mov    ecx,0x200
c000528e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005292:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005296:	89 f0                	mov    eax,esi
c0005298:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000529f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052a2:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00052ac:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052b3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052be:	e8 42 ca ff ff       	call   c0001d05 <mem_set>
c00052c3:	83 e6 20             	and    esi,0x20
c00052c6:	75 07                	jne    c00052cf <f_open+0x32e>
c00052c8:	31 ed                	xor    ebp,ebp
c00052ca:	e9 eb 00 00 00       	jmp    c00053ba <f_open+0x419>
c00052cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052e1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052e5:	74 e1                	je     c00052c8 <f_open+0x327>
c00052e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052f2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052fc:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005300:	31 ff                	xor    edi,edi
c0005302:	c1 e5 09             	shl    ebp,0x9
c0005305:	89 ee                	mov    esi,ebp
c0005307:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000530b:	89 f8                	mov    eax,edi
c000530d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005311:	73 22                	jae    c0005335 <f_open+0x394>
c0005313:	89 d8                	mov    eax,ebx
c0005315:	e8 bd dc ff ff       	call   c0002fd7 <get_fat>
c000531a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000531e:	89 c2                	mov    edx,eax
c0005320:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005324:	83 f8 01             	cmp    eax,0x1
c0005327:	76 10                	jbe    c0005339 <f_open+0x398>
c0005329:	83 f8 ff             	cmp    eax,0xffffffff
c000532c:	75 d9                	jne    c0005307 <f_open+0x366>
c000532e:	bd 01 00 00 00       	mov    ebp,0x1
c0005333:	eb 09                	jmp    c000533e <f_open+0x39d>
c0005335:	31 ed                	xor    ebp,ebp
c0005337:	eb 05                	jmp    c000533e <f_open+0x39d>
c0005339:	bd 02 00 00 00       	mov    ebp,0x2
c000533e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005341:	85 ed                	test   ebp,ebp
c0005343:	75 75                	jne    c00053ba <f_open+0x419>
c0005345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005349:	25 ff 01 00 00       	and    eax,0x1ff
c000534e:	0f 84 74 ff ff ff    	je     c00052c8 <f_open+0x327>
c0005354:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005358:	bd 02 00 00 00       	mov    ebp,0x2
c000535d:	89 c8                	mov    eax,ecx
c000535f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005363:	e8 a2 cb ff ff       	call   c0001f0a <clst2sect>
c0005368:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000536c:	89 d7                	mov    edi,edx
c000536e:	09 c7                	or     edi,eax
c0005370:	74 48                	je     c00053ba <f_open+0x419>
c0005372:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005376:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000537a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005382:	0f ac fe 09          	shrd   esi,edi,0x9
c0005386:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000538a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000538e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005391:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000539b:	6a 01                	push   0x1
c000539d:	52                   	push   edx
c000539e:	50                   	push   eax
c000539f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a7:	50                   	push   eax
c00053a8:	e8 79 c8 ff ff       	call   c0001c26 <disk_read>
c00053ad:	83 c4 20             	add    esp,0x20
c00053b0:	85 c0                	test   eax,eax
c00053b2:	0f 95 c0             	setne  al
c00053b5:	0f b6 c0             	movzx  eax,al
c00053b8:	89 c5                	mov    ebp,eax
c00053ba:	83 ec 0c             	sub    esp,0xc
c00053bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053c1:	e8 f4 30 00 00       	call   c00084ba <ff_memfree>
c00053c6:	83 c4 10             	add    esp,0x10
c00053c9:	85 ed                	test   ebp,ebp
c00053cb:	74 06                	je     c00053d3 <f_open+0x432>
c00053cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053d3:	83 c4 7c             	add    esp,0x7c
c00053d6:	89 e8                	mov    eax,ebp
c00053d8:	5b                   	pop    ebx
c00053d9:	5e                   	pop    esi
c00053da:	5f                   	pop    edi
c00053db:	5d                   	pop    ebp
c00053dc:	c3                   	ret    

c00053dd <f_read>:
c00053dd:	55                   	push   ebp
c00053de:	57                   	push   edi
c00053df:	56                   	push   esi
c00053e0:	53                   	push   ebx
c00053e1:	83 ec 2c             	sub    esp,0x2c
c00053e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053f6:	89 d8                	mov    eax,ebx
c00053f8:	e8 77 cf ff ff       	call   c0002374 <validate>
c00053fd:	89 c5                	mov    ebp,eax
c00053ff:	85 c0                	test   eax,eax
c0005401:	0f 85 4c 02 00 00    	jne    c0005653 <f_read+0x276>
c0005407:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000540b:	85 ed                	test   ebp,ebp
c000540d:	0f 85 40 02 00 00    	jne    c0005653 <f_read+0x276>
c0005413:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005417:	0f 84 31 02 00 00    	je     c000564e <f_read+0x271>
c000541d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005420:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005423:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005426:	bf 00 00 00 00       	mov    edi,0x0
c000542b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000542e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005432:	89 d1                	mov    ecx,edx
c0005434:	19 f9                	sbb    ecx,edi
c0005436:	0f 83 cf 00 00 00    	jae    c000550b <f_read+0x12e>
c000543c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005440:	e9 c6 00 00 00       	jmp    c000550b <f_read+0x12e>
c0005445:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005448:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000544b:	89 d0                	mov    eax,edx
c000544d:	25 ff 01 00 00       	and    eax,0x1ff
c0005452:	0f 85 c9 01 00 00    	jne    c0005621 <f_read+0x244>
c0005458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545c:	89 d6                	mov    esi,edx
c000545e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005462:	89 cf                	mov    edi,ecx
c0005464:	48                   	dec    eax
c0005465:	0f ac fe 09          	shrd   esi,edi,0x9
c0005469:	21 f0                	and    eax,esi
c000546b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000546f:	0f 84 a6 00 00 00    	je     c000551b <f_read+0x13e>
c0005475:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005479:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000547c:	89 c8                	mov    eax,ecx
c000547e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005481:	e8 84 ca ff ff       	call   c0001f0a <clst2sect>
c0005486:	89 d7                	mov    edi,edx
c0005488:	09 c7                	or     edi,eax
c000548a:	0f 84 b4 00 00 00    	je     c0005544 <f_read+0x167>
c0005490:	31 ff                	xor    edi,edi
c0005492:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005496:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005499:	01 c6                	add    esi,eax
c000549b:	11 d7                	adc    edi,edx
c000549d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054a5:	0f 86 fd 00 00 00    	jbe    c00055a8 <f_read+0x1cb>
c00054ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054b3:	c1 e8 09             	shr    eax,0x9
c00054b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054bd:	03 14 24             	add    edx,DWORD PTR [esp]
c00054c0:	39 c2                	cmp    edx,eax
c00054c2:	76 07                	jbe    c00054cb <f_read+0xee>
c00054c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054cb:	83 ec 0c             	sub    esp,0xc
c00054ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054d2:	57                   	push   edi
c00054d3:	56                   	push   esi
c00054d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 44 c7 ff ff       	call   c0001c26 <disk_read>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	75 6e                	jne    c0005557 <f_read+0x17a>
c00054e9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054ed:	78 7e                	js     c000556d <f_read+0x190>
c00054ef:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054f2:	c1 e6 09             	shl    esi,0x9
c00054f5:	31 ff                	xor    edi,edi
c00054f7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005503:	01 30                	add    DWORD PTR [eax],esi
c0005505:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005508:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000550b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005510:	0f 85 2f ff ff ff    	jne    c0005445 <f_read+0x68>
c0005516:	e9 38 01 00 00       	jmp    c0005653 <f_read+0x276>
c000551b:	89 c8                	mov    eax,ecx
c000551d:	09 d0                	or     eax,edx
c000551f:	75 05                	jne    c0005526 <f_read+0x149>
c0005521:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005524:	eb 19                	jmp    c000553f <f_read+0x162>
c0005526:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552a:	74 09                	je     c0005535 <f_read+0x158>
c000552c:	89 d8                	mov    eax,ebx
c000552e:	e8 f8 c9 ff ff       	call   c0001f2b <clmt_clust>
c0005533:	eb 0a                	jmp    c000553f <f_read+0x162>
c0005535:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005538:	89 d8                	mov    eax,ebx
c000553a:	e8 98 da ff ff       	call   c0002fd7 <get_fat>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	77 0e                	ja     c0005552 <f_read+0x175>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 01 01 00 00       	jmp    c0005653 <f_read+0x276>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_read+0x188>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 ee 00 00 00       	jmp    c0005653 <f_read+0x276>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	e9 08 ff ff ff       	jmp    c0005475 <f_read+0x98>
c000556d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005570:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005573:	29 f0                	sub    eax,esi
c0005575:	19 fa                	sbb    edx,edi
c0005577:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000557a:	89 d7                	mov    edi,edx
c000557c:	ba 00 00 00 00       	mov    edx,0x0
c0005581:	89 f9                	mov    ecx,edi
c0005583:	19 d1                	sbb    ecx,edx
c0005585:	0f 83 64 ff ff ff    	jae    c00054ef <f_read+0x112>
c000558b:	89 c7                	mov    edi,eax
c000558d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005590:	c1 e7 09             	shl    edi,0x9
c0005593:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005597:	b9 00 02 00 00       	mov    ecx,0x200
c000559c:	01 f8                	add    eax,edi
c000559e:	e8 4d c7 ff ff       	call   c0001cf0 <mem_cpy>
c00055a3:	e9 47 ff ff ff       	jmp    c00054ef <f_read+0x112>
c00055a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055ab:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00055b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055b5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b9:	75 05                	jne    c00055c0 <f_read+0x1e3>
c00055bb:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055be:	74 5b                	je     c000561b <f_read+0x23e>
c00055c0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055cb:	79 2a                	jns    c00055f7 <f_read+0x21a>
c00055cd:	83 ec 0c             	sub    esp,0xc
c00055d0:	6a 01                	push   0x1
c00055d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055e2:	50                   	push   eax
c00055e3:	e8 54 c6 ff ff       	call   c0001c3c <disk_write>
c00055e8:	83 c4 20             	add    esp,0x20
c00055eb:	85 c0                	test   eax,eax
c00055ed:	0f 85 64 ff ff ff    	jne    c0005557 <f_read+0x17a>
c00055f3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055f7:	83 ec 0c             	sub    esp,0xc
c00055fa:	6a 01                	push   0x1
c00055fc:	57                   	push   edi
c00055fd:	56                   	push   esi
c00055fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005602:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005606:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000560a:	50                   	push   eax
c000560b:	e8 16 c6 ff ff       	call   c0001c26 <disk_read>
c0005610:	83 c4 20             	add    esp,0x20
c0005613:	85 c0                	test   eax,eax
c0005615:	0f 85 3c ff ff ff    	jne    c0005557 <f_read+0x17a>
c000561b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000561e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005621:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005624:	ba 00 02 00 00       	mov    edx,0x200
c0005629:	25 ff 01 00 00       	and    eax,0x1ff
c000562e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005632:	29 c2                	sub    edx,eax
c0005634:	39 d6                	cmp    esi,edx
c0005636:	76 02                	jbe    c000563a <f_read+0x25d>
c0005638:	89 d6                	mov    esi,edx
c000563a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000563e:	89 f1                	mov    ecx,esi
c0005640:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005644:	e8 a7 c6 ff ff       	call   c0001cf0 <mem_cpy>
c0005649:	e9 a7 fe ff ff       	jmp    c00054f5 <f_read+0x118>
c000564e:	bd 07 00 00 00       	mov    ebp,0x7
c0005653:	83 c4 2c             	add    esp,0x2c
c0005656:	89 e8                	mov    eax,ebp
c0005658:	5b                   	pop    ebx
c0005659:	5e                   	pop    esi
c000565a:	5f                   	pop    edi
c000565b:	5d                   	pop    ebp
c000565c:	c3                   	ret    

c000565d <f_write>:
c000565d:	55                   	push   ebp
c000565e:	57                   	push   edi
c000565f:	56                   	push   esi
c0005660:	53                   	push   ebx
c0005661:	83 ec 2c             	sub    esp,0x2c
c0005664:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005668:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000566c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005672:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005676:	89 d8                	mov    eax,ebx
c0005678:	e8 f7 cc ff ff       	call   c0002374 <validate>
c000567d:	89 c5                	mov    ebp,eax
c000567f:	85 c0                	test   eax,eax
c0005681:	0f 85 86 02 00 00    	jne    c000590d <f_write+0x2b0>
c0005687:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000568b:	85 ed                	test   ebp,ebp
c000568d:	0f 85 7a 02 00 00    	jne    c000590d <f_write+0x2b0>
c0005693:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005697:	0f 84 6b 02 00 00    	je     c0005908 <f_write+0x2ab>
c000569d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056a1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056a4:	0f 84 43 01 00 00    	je     c00057ed <f_write+0x190>
c00056aa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056ad:	89 c1                	mov    ecx,eax
c00056af:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056b3:	0f 83 34 01 00 00    	jae    c00057ed <f_write+0x190>
c00056b9:	f7 d0                	not    eax
c00056bb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056bf:	e9 29 01 00 00       	jmp    c00057ed <f_write+0x190>
c00056c4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056c7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ca:	89 d0                	mov    eax,edx
c00056cc:	25 ff 01 00 00       	and    eax,0x1ff
c00056d1:	0f 85 00 02 00 00    	jne    c00058d7 <f_write+0x27a>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	89 d6                	mov    esi,edx
c00056dd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056e1:	89 cf                	mov    edi,ecx
c00056e3:	48                   	dec    eax
c00056e4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e8:	21 f0                	and    eax,esi
c00056ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056ee:	0f 84 06 01 00 00    	je     c00057fa <f_write+0x19d>
c00056f4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f8:	0f 88 6e 01 00 00    	js     c000586c <f_write+0x20f>
c00056fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005702:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005705:	89 c8                	mov    eax,ecx
c0005707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000570b:	e8 fa c7 ff ff       	call   c0001f0a <clst2sect>
c0005710:	89 d1                	mov    ecx,edx
c0005712:	09 c1                	or     ecx,eax
c0005714:	0f 84 1c 01 00 00    	je     c0005836 <f_write+0x1d9>
c000571a:	31 ff                	xor    edi,edi
c000571c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005720:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005724:	01 c6                	add    esi,eax
c0005726:	11 d7                	adc    edi,edx
c0005728:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005730:	0f 86 63 01 00 00    	jbe    c0005899 <f_write+0x23c>
c0005736:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000573a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000573e:	c1 e8 09             	shr    eax,0x9
c0005741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005745:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005749:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000574d:	39 c2                	cmp    edx,eax
c000574f:	76 08                	jbe    c0005759 <f_write+0xfc>
c0005751:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005759:	83 ec 0c             	sub    esp,0xc
c000575c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005760:	57                   	push   edi
c0005761:	56                   	push   esi
c0005762:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005766:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000576a:	50                   	push   eax
c000576b:	e8 cc c4 ff ff       	call   c0001c3c <disk_write>
c0005770:	83 c4 20             	add    esp,0x20
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 ce 00 00 00    	jne    c0005849 <f_write+0x1ec>
c000577b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000577e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005781:	29 f0                	sub    eax,esi
c0005783:	19 fa                	sbb    edx,edi
c0005785:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005789:	89 d7                	mov    edi,edx
c000578b:	ba 00 00 00 00       	mov    edx,0x0
c0005790:	89 f9                	mov    ecx,edi
c0005792:	19 d1                	sbb    ecx,edx
c0005794:	73 1c                	jae    c00057b2 <f_write+0x155>
c0005796:	89 c7                	mov    edi,eax
c0005798:	b9 00 02 00 00       	mov    ecx,0x200
c000579d:	c1 e7 09             	shl    edi,0x9
c00057a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a3:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057a7:	89 fa                	mov    edx,edi
c00057a9:	e8 42 c5 ff ff       	call   c0001cf0 <mem_cpy>
c00057ae:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057b2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057b6:	c1 e6 09             	shl    esi,0x9
c00057b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057bd:	31 ff                	xor    edi,edi
c00057bf:	01 30                	add    DWORD PTR [eax],esi
c00057c1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057c5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057cf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057d2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057d5:	89 c1                	mov    ecx,eax
c00057d7:	39 f2                	cmp    edx,esi
c00057d9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057dc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057df:	19 f9                	sbb    ecx,edi
c00057e1:	73 04                	jae    c00057e7 <f_write+0x18a>
c00057e3:	89 f2                	mov    edx,esi
c00057e5:	89 f8                	mov    eax,edi
c00057e7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057f2:	0f 85 cc fe ff ff    	jne    c00056c4 <f_write+0x67>
c00057f8:	eb 2e                	jmp    c0005828 <f_write+0x1cb>
c00057fa:	89 c8                	mov    eax,ecx
c00057fc:	09 d0                	or     eax,edx
c00057fe:	75 0b                	jne    c000580b <f_write+0x1ae>
c0005800:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005803:	31 d2                	xor    edx,edx
c0005805:	85 c0                	test   eax,eax
c0005807:	75 28                	jne    c0005831 <f_write+0x1d4>
c0005809:	eb 12                	jmp    c000581d <f_write+0x1c0>
c000580b:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000580f:	74 09                	je     c000581a <f_write+0x1bd>
c0005811:	89 d8                	mov    eax,ebx
c0005813:	e8 13 c7 ff ff       	call   c0001f2b <clmt_clust>
c0005818:	eb 0a                	jmp    c0005824 <f_write+0x1c7>
c000581a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000581d:	89 d8                	mov    eax,ebx
c000581f:	e8 a1 da ff ff       	call   c00032c5 <create_chain>
c0005824:	85 c0                	test   eax,eax
c0005826:	75 09                	jne    c0005831 <f_write+0x1d4>
c0005828:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000582c:	e9 dc 00 00 00       	jmp    c000590d <f_write+0x2b0>
c0005831:	83 f8 01             	cmp    eax,0x1
c0005834:	75 0e                	jne    c0005844 <f_write+0x1e7>
c0005836:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000583a:	bd 02 00 00 00       	mov    ebp,0x2
c000583f:	e9 c9 00 00 00       	jmp    c000590d <f_write+0x2b0>
c0005844:	83 f8 ff             	cmp    eax,0xffffffff
c0005847:	75 0e                	jne    c0005857 <f_write+0x1fa>
c0005849:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000584d:	bd 01 00 00 00       	mov    ebp,0x1
c0005852:	e9 b6 00 00 00       	jmp    c000590d <f_write+0x2b0>
c0005857:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000585a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000585e:	0f 85 90 fe ff ff    	jne    c00056f4 <f_write+0x97>
c0005864:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005867:	e9 88 fe ff ff       	jmp    c00056f4 <f_write+0x97>
c000586c:	83 ec 0c             	sub    esp,0xc
c000586f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005872:	6a 01                	push   0x1
c0005874:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005877:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000587a:	50                   	push   eax
c000587b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000587f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005883:	50                   	push   eax
c0005884:	e8 b3 c3 ff ff       	call   c0001c3c <disk_write>
c0005889:	83 c4 20             	add    esp,0x20
c000588c:	85 c0                	test   eax,eax
c000588e:	75 b9                	jne    c0005849 <f_write+0x1ec>
c0005890:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005894:	e9 65 fe ff ff       	jmp    c00056fe <f_write+0xa1>
c0005899:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000589c:	75 05                	jne    c00058a3 <f_write+0x246>
c000589e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058a1:	74 2e                	je     c00058d1 <f_write+0x274>
c00058a3:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058a6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a9:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058ac:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058af:	73 20                	jae    c00058d1 <f_write+0x274>
c00058b1:	83 ec 0c             	sub    esp,0xc
c00058b4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058b7:	6a 01                	push   0x1
c00058b9:	57                   	push   edi
c00058ba:	56                   	push   esi
c00058bb:	50                   	push   eax
c00058bc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058c0:	50                   	push   eax
c00058c1:	e8 60 c3 ff ff       	call   c0001c26 <disk_read>
c00058c6:	83 c4 20             	add    esp,0x20
c00058c9:	85 c0                	test   eax,eax
c00058cb:	0f 85 78 ff ff ff    	jne    c0005849 <f_write+0x1ec>
c00058d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058da:	ba 00 02 00 00       	mov    edx,0x200
c00058df:	25 ff 01 00 00       	and    eax,0x1ff
c00058e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e8:	29 c2                	sub    edx,eax
c00058ea:	39 d6                	cmp    esi,edx
c00058ec:	76 02                	jbe    c00058f0 <f_write+0x293>
c00058ee:	89 d6                	mov    esi,edx
c00058f0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058f4:	89 f1                	mov    ecx,esi
c00058f6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058fa:	e8 f1 c3 ff ff       	call   c0001cf0 <mem_cpy>
c00058ff:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005903:	e9 b1 fe ff ff       	jmp    c00057b9 <f_write+0x15c>
c0005908:	bd 07 00 00 00       	mov    ebp,0x7
c000590d:	83 c4 2c             	add    esp,0x2c
c0005910:	89 e8                	mov    eax,ebp
c0005912:	5b                   	pop    ebx
c0005913:	5e                   	pop    esi
c0005914:	5f                   	pop    edi
c0005915:	5d                   	pop    ebp
c0005916:	c3                   	ret    

c0005917 <f_sync>:
c0005917:	56                   	push   esi
c0005918:	53                   	push   ebx
c0005919:	83 ec 64             	sub    esp,0x64
c000591c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005920:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005924:	89 d8                	mov    eax,ebx
c0005926:	e8 49 ca ff ff       	call   c0002374 <validate>
c000592b:	85 c0                	test   eax,eax
c000592d:	0f 85 ba 01 00 00    	jne    c0005aed <f_sync+0x1d6>
c0005933:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005936:	f6 c2 40             	test   dl,0x40
c0005939:	0f 84 ae 01 00 00    	je     c0005aed <f_sync+0x1d6>
c000593f:	84 d2                	test   dl,dl
c0005941:	79 33                	jns    c0005976 <f_sync+0x5f>
c0005943:	83 ec 0c             	sub    esp,0xc
c0005946:	8d 43 50             	lea    eax,[ebx+0x50]
c0005949:	6a 01                	push   0x1
c000594b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000594e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005951:	50                   	push   eax
c0005952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005956:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000595a:	50                   	push   eax
c000595b:	e8 dc c2 ff ff       	call   c0001c3c <disk_write>
c0005960:	83 c4 20             	add    esp,0x20
c0005963:	89 c2                	mov    edx,eax
c0005965:	b8 01 00 00 00       	mov    eax,0x1
c000596a:	85 d2                	test   edx,edx
c000596c:	0f 85 7b 01 00 00    	jne    c0005aed <f_sync+0x1d6>
c0005972:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000597a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000597d:	0f 85 11 01 00 00    	jne    c0005a94 <f_sync+0x17d>
c0005983:	89 d8                	mov    eax,ebx
c0005985:	e8 13 d6 ff ff       	call   c0002f9d <fill_first_frag>
c000598a:	85 c0                	test   eax,eax
c000598c:	0f 85 5b 01 00 00    	jne    c0005aed <f_sync+0x1d6>
c0005992:	83 c9 ff             	or     ecx,0xffffffff
c0005995:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005998:	89 d8                	mov    eax,ebx
c000599a:	e8 c9 d5 ff ff       	call   c0002f68 <fill_last_frag>
c000599f:	85 c0                	test   eax,eax
c00059a1:	0f 85 46 01 00 00    	jne    c0005aed <f_sync+0x1d6>
c00059a7:	83 ec 0c             	sub    esp,0xc
c00059aa:	68 60 04 00 00       	push   0x460
c00059af:	e8 f0 2a 00 00       	call   c00084a4 <ff_memalloc>
c00059b4:	83 c4 10             	add    esp,0x10
c00059b7:	89 c6                	mov    esi,eax
c00059b9:	b8 11 00 00 00       	mov    eax,0x11
c00059be:	85 f6                	test   esi,esi
c00059c0:	0f 84 27 01 00 00    	je     c0005aed <f_sync+0x1d6>
c00059c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ca:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059d6:	89 da                	mov    edx,ebx
c00059d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059dc:	e8 af df ff ff       	call   c0003990 <load_obj_xdir>
c00059e1:	85 c0                	test   eax,eax
c00059e3:	0f 85 95 00 00 00    	jne    c0005a7e <f_sync+0x167>
c00059e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059f0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059f4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059f7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059fa:	83 ca 01             	or     edx,0x1
c00059fd:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a00:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a06:	83 c0 34             	add    eax,0x34
c0005a09:	e8 d9 c2 ff ff       	call   c0001ce7 <st_dword>
c0005a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a12:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a15:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a18:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1b:	83 c0 38             	add    eax,0x38
c0005a1e:	e8 c7 c2 ff ff       	call   c0001cea <st_qword>
c0005a23:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a30:	83 c0 28             	add    eax,0x28
c0005a33:	e8 b2 c2 ff ff       	call   c0001cea <st_qword>
c0005a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a3c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a44:	83 c0 0c             	add    eax,0xc
c0005a47:	e8 9b c2 ff ff       	call   c0001ce7 <st_dword>
c0005a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a50:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a53:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a57:	31 d2                	xor    edx,edx
c0005a59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a5c:	83 c0 10             	add    eax,0x10
c0005a5f:	e8 83 c2 ff ff       	call   c0001ce7 <st_dword>
c0005a64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a68:	e8 62 e1 ff ff       	call   c0003bcf <store_xdir>
c0005a6d:	85 c0                	test   eax,eax
c0005a6f:	75 0d                	jne    c0005a7e <f_sync+0x167>
c0005a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a75:	e8 00 eb ff ff       	call   c000457a <sync_fs>
c0005a7a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a82:	83 ec 0c             	sub    esp,0xc
c0005a85:	56                   	push   esi
c0005a86:	e8 2f 2a 00 00       	call   c00084ba <ff_memfree>
c0005a8b:	83 c4 10             	add    esp,0x10
c0005a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a92:	eb 59                	jmp    c0005aed <f_sync+0x1d6>
c0005a94:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a97:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a9a:	e8 b0 c9 ff ff       	call   c000244f <move_window>
c0005a9f:	85 c0                	test   eax,eax
c0005aa1:	75 4a                	jne    c0005aed <f_sync+0x1d6>
c0005aa3:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005aa6:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aaa:	89 f2                	mov    edx,esi
c0005aac:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005ab1:	e8 5f f3 ff ff       	call   c0004e15 <st_clust.isra.1>
c0005ab6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005abc:	e8 26 c2 ff ff       	call   c0001ce7 <st_dword>
c0005ac1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ac4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac9:	e8 19 c2 ff ff       	call   c0001ce7 <st_dword>
c0005ace:	8d 46 12             	lea    eax,[esi+0x12]
c0005ad1:	31 d2                	xor    edx,edx
c0005ad3:	e8 0b c2 ff ff       	call   c0001ce3 <st_word>
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ae4:	e8 91 ea ff ff       	call   c000457a <sync_fs>
c0005ae9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aed:	83 c4 64             	add    esp,0x64
c0005af0:	5b                   	pop    ebx
c0005af1:	5e                   	pop    esi
c0005af2:	c3                   	ret    

c0005af3 <f_close>:
c0005af3:	53                   	push   ebx
c0005af4:	83 ec 24             	sub    esp,0x24
c0005af7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005afb:	53                   	push   ebx
c0005afc:	e8 16 fe ff ff       	call   c0005917 <f_sync>
c0005b01:	83 c4 10             	add    esp,0x10
c0005b04:	85 c0                	test   eax,eax
c0005b06:	75 15                	jne    c0005b1d <f_close+0x2a>
c0005b08:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b0c:	89 d8                	mov    eax,ebx
c0005b0e:	e8 61 c8 ff ff       	call   c0002374 <validate>
c0005b13:	85 c0                	test   eax,eax
c0005b15:	75 06                	jne    c0005b1d <f_close+0x2a>
c0005b17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b1d:	83 c4 18             	add    esp,0x18
c0005b20:	5b                   	pop    ebx
c0005b21:	c3                   	ret    

c0005b22 <f_lseek>:
c0005b22:	55                   	push   ebp
c0005b23:	57                   	push   edi
c0005b24:	56                   	push   esi
c0005b25:	53                   	push   ebx
c0005b26:	83 ec 3c             	sub    esp,0x3c
c0005b29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b2d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b31:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b35:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b3c:	89 d8                	mov    eax,ebx
c0005b3e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b42:	e8 2d c8 ff ff       	call   c0002374 <validate>
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 7a 04 00 00    	jne    c0005fcd <f_lseek+0x4ab>
c0005b53:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5b:	85 c0                	test   eax,eax
c0005b5d:	0f 85 6a 04 00 00    	jne    c0005fcd <f_lseek+0x4ab>
c0005b63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b67:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b6a:	74 0c                	je     c0005b78 <f_lseek+0x56>
c0005b6c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	75 1f                	jne    c0005b92 <f_lseek+0x70>
c0005b73:	e9 b5 01 00 00       	jmp    c0005d2d <f_lseek+0x20b>
c0005b78:	83 c9 ff             	or     ecx,0xffffffff
c0005b7b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b7e:	89 d8                	mov    eax,ebx
c0005b80:	e8 e3 d3 ff ff       	call   c0002f68 <fill_last_frag>
c0005b85:	85 c0                	test   eax,eax
c0005b87:	74 e3                	je     c0005b6c <f_lseek+0x4a>
c0005b89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b8d:	e9 3b 04 00 00       	jmp    c0005fcd <f_lseek+0x4ab>
c0005b92:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b97:	0f 85 ac 00 00 00    	jne    c0005c49 <f_lseek+0x127>
c0005b9d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005ba1:	0f 85 a2 00 00 00    	jne    c0005c49 <f_lseek+0x127>
c0005ba7:	8d 78 04             	lea    edi,[eax+0x4]
c0005baa:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0005baf:	be 02 00 00 00       	mov    esi,0x2
c0005bb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb8:	85 ed                	test   ebp,ebp
c0005bba:	74 73                	je     c0005c2f <f_lseek+0x10d>
c0005bbc:	89 e9                	mov    ecx,ebp
c0005bbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bc5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc8:	89 ca                	mov    edx,ecx
c0005bca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bce:	89 d8                	mov    eax,ebx
c0005bd0:	e8 02 d4 ff ff       	call   c0002fd7 <get_fat>
c0005bd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd9:	83 f8 01             	cmp    eax,0x1
c0005bdc:	77 11                	ja     c0005bef <f_lseek+0xcd>
c0005bde:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005be2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bea:	e9 de 03 00 00       	jmp    c0005fcd <f_lseek+0x4ab>
c0005bef:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf2:	75 11                	jne    c0005c05 <f_lseek+0xe3>
c0005bf4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c00:	e9 c8 03 00 00       	jmp    c0005fcd <f_lseek+0x4ab>
c0005c05:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c08:	89 c1                	mov    ecx,eax
c0005c0a:	39 c2                	cmp    edx,eax
c0005c0c:	74 b7                	je     c0005bc5 <f_lseek+0xa3>
c0005c0e:	83 c6 02             	add    esi,0x2
c0005c11:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c15:	72 0b                	jb     c0005c22 <f_lseek+0x100>
c0005c17:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c1a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c1d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c1f:	83 c7 08             	add    edi,0x8
c0005c22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c26:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c29:	76 04                	jbe    c0005c2f <f_lseek+0x10d>
c0005c2b:	89 c5                	mov    ebp,eax
c0005c2d:	eb 8d                	jmp    c0005bbc <f_lseek+0x9a>
c0005c2f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c32:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c36:	89 30                	mov    DWORD PTR [eax],esi
c0005c38:	0f 87 87 03 00 00    	ja     c0005fc5 <f_lseek+0x4a3>
c0005c3e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c44:	e9 84 03 00 00       	jmp    c0005fcd <f_lseek+0x4ab>
c0005c49:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c4c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c5b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c62:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c66:	73 0f                	jae    c0005c77 <f_lseek+0x155>
c0005c68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c7f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c82:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c89:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c8d:	0f 84 3a 03 00 00    	je     c0005fcd <f_lseek+0x4ab>
c0005c93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c9b:	83 c6 ff             	add    esi,0xffffffff
c0005c9e:	89 d8                	mov    eax,ebx
c0005ca0:	83 d7 ff             	adc    edi,0xffffffff
c0005ca3:	89 f2                	mov    edx,esi
c0005ca5:	89 f9                	mov    ecx,edi
c0005ca7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005cab:	89 34 24             	mov    DWORD PTR [esp],esi
c0005cae:	e8 78 c2 ff ff       	call   c0001f2b <clmt_clust>
c0005cb3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cb7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cba:	89 c2                	mov    edx,eax
c0005cbc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cc0:	89 c8                	mov    eax,ecx
c0005cc2:	e8 43 c2 ff ff       	call   c0001f0a <clst2sect>
c0005cc7:	89 d7                	mov    edi,edx
c0005cc9:	09 c7                	or     edi,eax
c0005ccb:	0f 84 0d ff ff ff    	je     c0005bde <f_lseek+0xbc>
c0005cd1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cd5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cdb:	0f 84 ec 02 00 00    	je     c0005fcd <f_lseek+0x4ab>
c0005ce1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ce5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cec:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cf0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cf4:	4d                   	dec    ebp
c0005cf5:	31 ff                	xor    edi,edi
c0005cf7:	21 ee                	and    esi,ebp
c0005cf9:	01 c6                	add    esi,eax
c0005cfb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cfe:	11 d7                	adc    edi,edx
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	39 fa                	cmp    edx,edi
c0005d05:	75 08                	jne    c0005d0f <f_lseek+0x1ed>
c0005d07:	39 f0                	cmp    eax,esi
c0005d09:	0f 84 be 02 00 00    	je     c0005fcd <f_lseek+0x4ab>
c0005d0f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d12:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d16:	0f 89 80 02 00 00    	jns    c0005f9c <f_lseek+0x47a>
c0005d1c:	83 ec 0c             	sub    esp,0xc
c0005d1f:	6a 01                	push   0x1
c0005d21:	52                   	push   edx
c0005d22:	50                   	push   eax
c0005d23:	55                   	push   ebp
c0005d24:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d28:	e9 5a 02 00 00       	jmp    c0005f87 <f_lseek+0x465>
c0005d2d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d31:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d34:	74 16                	je     c0005d4c <f_lseek+0x22a>
c0005d36:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d3b:	76 0f                	jbe    c0005d4c <f_lseek+0x22a>
c0005d3d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d44:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d4f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d52:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d55:	89 c7                	mov    edi,eax
c0005d57:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d5b:	73 0d                	jae    c0005d6a <f_lseek+0x248>
c0005d5d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d61:	75 07                	jne    c0005d6a <f_lseek+0x248>
c0005d63:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d6a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d6d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d74:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d7b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d82:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d85:	75 09                	jne    c0005d90 <f_lseek+0x26e>
c0005d87:	31 f6                	xor    esi,esi
c0005d89:	31 ff                	xor    edi,edi
c0005d8b:	e9 af 01 00 00       	jmp    c0005f3f <f_lseek+0x41d>
c0005d90:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d94:	89 d7                	mov    edi,edx
c0005d96:	c1 e1 09             	shl    ecx,0x9
c0005d99:	09 c7                	or     edi,eax
c0005d9b:	89 cd                	mov    ebp,ecx
c0005d9d:	74 6d                	je     c0005e0c <f_lseek+0x2ea>
c0005d9f:	83 c0 ff             	add    eax,0xffffffff
c0005da2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005da6:	83 d2 ff             	adc    edx,0xffffffff
c0005da9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005dac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db0:	83 c0 ff             	add    eax,0xffffffff
c0005db3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005db7:	83 d2 ff             	adc    edx,0xffffffff
c0005dba:	31 ff                	xor    edi,edi
c0005dbc:	57                   	push   edi
c0005dbd:	51                   	push   ecx
c0005dbe:	52                   	push   edx
c0005dbf:	50                   	push   eax
c0005dc0:	e8 df 13 02 00       	call   c00271a4 <__udivdi3>
c0005dc5:	83 c4 10             	add    esp,0x10
c0005dc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dd0:	57                   	push   edi
c0005dd1:	55                   	push   ebp
c0005dd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dda:	e8 c5 13 02 00       	call   c00271a4 <__udivdi3>
c0005ddf:	83 c4 10             	add    esp,0x10
c0005de2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005de6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dea:	19 d1                	sbb    ecx,edx
c0005dec:	72 1e                	jb     c0005e0c <f_lseek+0x2ea>
c0005dee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005df2:	89 e9                	mov    ecx,ebp
c0005df4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005df7:	f7 d9                	neg    ecx
c0005df9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dfc:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e00:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e03:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e06:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e0a:	eb 28                	jmp    c0005e34 <f_lseek+0x312>
c0005e0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e0f:	85 c0                	test   eax,eax
c0005e11:	75 1e                	jne    c0005e31 <f_lseek+0x30f>
c0005e13:	31 d2                	xor    edx,edx
c0005e15:	89 d8                	mov    eax,ebx
c0005e17:	e8 a9 d4 ff ff       	call   c00032c5 <create_chain>
c0005e1c:	83 f8 01             	cmp    eax,0x1
c0005e1f:	0f 84 b9 fd ff ff    	je     c0005bde <f_lseek+0xbc>
c0005e25:	83 f8 ff             	cmp    eax,0xffffffff
c0005e28:	0f 84 c6 fd ff ff    	je     c0005bf4 <f_lseek+0xd2>
c0005e2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e31:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e34:	85 c0                	test   eax,eax
c0005e36:	0f 84 4b ff ff ff    	je     c0005d87 <f_lseek+0x265>
c0005e3c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e48:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e4b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e4f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e52:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e55:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e59:	0f 83 9d 00 00 00    	jae    c0005efc <f_lseek+0x3da>
c0005e5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e63:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e67:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e6a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e6e:	01 f2                	add    edx,esi
c0005e70:	11 f9                	adc    ecx,edi
c0005e72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e76:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e7a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e7d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e80:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e83:	f6 c1 02             	test   cl,0x2
c0005e86:	74 35                	je     c0005ebd <f_lseek+0x39b>
c0005e88:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e8c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e8f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e92:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e96:	73 16                	jae    c0005eae <f_lseek+0x38c>
c0005e98:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e9c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ea0:	88 ca                	mov    dl,cl
c0005ea2:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ea5:	83 ca 40             	or     edx,0x40
c0005ea8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005eab:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005eae:	89 c2                	mov    edx,eax
c0005eb0:	89 d8                	mov    eax,ebx
c0005eb2:	e8 0e d4 ff ff       	call   c00032c5 <create_chain>
c0005eb7:	85 c0                	test   eax,eax
c0005eb9:	75 0b                	jne    c0005ec6 <f_lseek+0x3a4>
c0005ebb:	eb 30                	jmp    c0005eed <f_lseek+0x3cb>
c0005ebd:	89 c2                	mov    edx,eax
c0005ebf:	89 d8                	mov    eax,ebx
c0005ec1:	e8 11 d1 ff ff       	call   c0002fd7 <get_fat>
c0005ec6:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec9:	0f 84 25 fd ff ff    	je     c0005bf4 <f_lseek+0xd2>
c0005ecf:	83 f8 01             	cmp    eax,0x1
c0005ed2:	0f 86 06 fd ff ff    	jbe    c0005bde <f_lseek+0xbc>
c0005ed8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005edc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005edf:	0f 86 f9 fc ff ff    	jbe    c0005bde <f_lseek+0xbc>
c0005ee5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee8:	e9 5b ff ff ff       	jmp    c0005e48 <f_lseek+0x326>
c0005eed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ef4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005efc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eff:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f03:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f09:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f0c:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f12:	0f 84 6f fe ff ff    	je     c0005d87 <f_lseek+0x265>
c0005f18:	89 c2                	mov    edx,eax
c0005f1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f1e:	e8 e7 bf ff ff       	call   c0001f0a <clst2sect>
c0005f23:	89 d7                	mov    edi,edx
c0005f25:	09 c7                	or     edi,eax
c0005f27:	0f 84 b1 fc ff ff    	je     c0005bde <f_lseek+0xbc>
c0005f2d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f31:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f34:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f38:	c1 ef 09             	shr    edi,0x9
c0005f3b:	01 c6                	add    esi,eax
c0005f3d:	11 d7                	adc    edi,edx
c0005f3f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f42:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f45:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f48:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f4b:	19 d1                	sbb    ecx,edx
c0005f4d:	73 0a                	jae    c0005f59 <f_lseek+0x437>
c0005f4f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f52:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f55:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f59:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f5e:	74 6d                	je     c0005fcd <f_lseek+0x4ab>
c0005f60:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f63:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f66:	39 fa                	cmp    edx,edi
c0005f68:	75 04                	jne    c0005f6e <f_lseek+0x44c>
c0005f6a:	39 f0                	cmp    eax,esi
c0005f6c:	74 5f                	je     c0005fcd <f_lseek+0x4ab>
c0005f6e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f71:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f75:	79 25                	jns    c0005f9c <f_lseek+0x47a>
c0005f77:	83 ec 0c             	sub    esp,0xc
c0005f7a:	6a 01                	push   0x1
c0005f7c:	52                   	push   edx
c0005f7d:	50                   	push   eax
c0005f7e:	55                   	push   ebp
c0005f7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f83:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f87:	50                   	push   eax
c0005f88:	e8 af bc ff ff       	call   c0001c3c <disk_write>
c0005f8d:	83 c4 20             	add    esp,0x20
c0005f90:	85 c0                	test   eax,eax
c0005f92:	0f 85 5c fc ff ff    	jne    c0005bf4 <f_lseek+0xd2>
c0005f98:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f9c:	83 ec 0c             	sub    esp,0xc
c0005f9f:	6a 01                	push   0x1
c0005fa1:	57                   	push   edi
c0005fa2:	56                   	push   esi
c0005fa3:	55                   	push   ebp
c0005fa4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fac:	50                   	push   eax
c0005fad:	e8 74 bc ff ff       	call   c0001c26 <disk_read>
c0005fb2:	83 c4 20             	add    esp,0x20
c0005fb5:	85 c0                	test   eax,eax
c0005fb7:	0f 85 37 fc ff ff    	jne    c0005bf4 <f_lseek+0xd2>
c0005fbd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fc0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fc3:	eb 08                	jmp    c0005fcd <f_lseek+0x4ab>
c0005fc5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fd1:	83 c4 3c             	add    esp,0x3c
c0005fd4:	5b                   	pop    ebx
c0005fd5:	5e                   	pop    esi
c0005fd6:	5f                   	pop    edi
c0005fd7:	5d                   	pop    ebp
c0005fd8:	c3                   	ret    

c0005fd9 <f_opendir>:
c0005fd9:	56                   	push   esi
c0005fda:	b8 09 00 00 00       	mov    eax,0x9
c0005fdf:	53                   	push   ebx
c0005fe0:	83 ec 24             	sub    esp,0x24
c0005fe3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe7:	85 db                	test   ebx,ebx
c0005fe9:	0f 84 e6 00 00 00    	je     c00060d5 <f_opendir+0xfc>
c0005fef:	31 c9                	xor    ecx,ecx
c0005ff1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff9:	e8 03 c7 ff ff       	call   c0002701 <mount_volume>
c0005ffe:	85 c0                	test   eax,eax
c0006000:	0f 85 c9 00 00 00    	jne    c00060cf <f_opendir+0xf6>
c0006006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000600a:	83 ec 0c             	sub    esp,0xc
c000600d:	89 03                	mov    DWORD PTR [ebx],eax
c000600f:	68 60 04 00 00       	push   0x460
c0006014:	e8 8b 24 00 00       	call   c00084a4 <ff_memalloc>
c0006019:	83 c4 10             	add    esp,0x10
c000601c:	89 c6                	mov    esi,eax
c000601e:	b8 11 00 00 00       	mov    eax,0x11
c0006023:	85 f6                	test   esi,esi
c0006025:	0f 84 aa 00 00 00    	je     c00060d5 <f_opendir+0xfc>
c000602b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006035:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006038:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000603f:	89 d8                	mov    eax,ebx
c0006041:	e8 31 ee ff ff       	call   c0004e77 <follow_path>
c0006046:	85 c0                	test   eax,eax
c0006048:	75 61                	jne    c00060ab <f_opendir+0xd2>
c000604a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000604e:	78 46                	js     c0006096 <f_opendir+0xbd>
c0006050:	b8 05 00 00 00       	mov    eax,0x5
c0006055:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006059:	74 50                	je     c00060ab <f_opendir+0xd2>
c000605b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000605f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006061:	3c 04                	cmp    al,0x4
c0006063:	75 26                	jne    c000608b <f_opendir+0xb2>
c0006065:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006068:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000606b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000606e:	30 d2                	xor    dl,dl
c0006070:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006074:	09 c2                	or     edx,eax
c0006076:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006079:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000607c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000607f:	89 da                	mov    edx,ebx
c0006081:	8d 41 10             	lea    eax,[ecx+0x10]
c0006084:	e8 b4 ed ff ff       	call   c0004e3d <init_alloc_info.isra.2>
c0006089:	eb 0b                	jmp    c0006096 <f_opendir+0xbd>
c000608b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000608e:	e8 59 ed ff ff       	call   c0004dec <ld_clust.isra.0>
c0006093:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000609a:	31 d2                	xor    edx,edx
c000609c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060a4:	89 d8                	mov    eax,ebx
c00060a6:	e8 22 d1 ff ff       	call   c00031cd <dir_sdi>
c00060ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060af:	83 ec 0c             	sub    esp,0xc
c00060b2:	56                   	push   esi
c00060b3:	e8 02 24 00 00       	call   c00084ba <ff_memfree>
c00060b8:	83 c4 10             	add    esp,0x10
c00060bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060bf:	83 f8 04             	cmp    eax,0x4
c00060c2:	74 06                	je     c00060ca <f_opendir+0xf1>
c00060c4:	85 c0                	test   eax,eax
c00060c6:	74 0d                	je     c00060d5 <f_opendir+0xfc>
c00060c8:	eb 05                	jmp    c00060cf <f_opendir+0xf6>
c00060ca:	b8 05 00 00 00       	mov    eax,0x5
c00060cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060d5:	83 c4 24             	add    esp,0x24
c00060d8:	5b                   	pop    ebx
c00060d9:	5e                   	pop    esi
c00060da:	c3                   	ret    

c00060db <f_closedir>:
c00060db:	53                   	push   ebx
c00060dc:	83 ec 18             	sub    esp,0x18
c00060df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060e7:	89 d8                	mov    eax,ebx
c00060e9:	e8 86 c2 ff ff       	call   c0002374 <validate>
c00060ee:	85 c0                	test   eax,eax
c00060f0:	75 06                	jne    c00060f8 <f_closedir+0x1d>
c00060f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f8:	83 c4 18             	add    esp,0x18
c00060fb:	5b                   	pop    ebx
c00060fc:	c3                   	ret    

c00060fd <f_readdir>:
c00060fd:	57                   	push   edi
c00060fe:	56                   	push   esi
c00060ff:	53                   	push   ebx
c0006100:	83 ec 20             	sub    esp,0x20
c0006103:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006107:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000610b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000610f:	89 d8                	mov    eax,ebx
c0006111:	e8 5e c2 ff ff       	call   c0002374 <validate>
c0006116:	85 c0                	test   eax,eax
c0006118:	75 77                	jne    c0006191 <f_readdir+0x94>
c000611a:	85 ff                	test   edi,edi
c000611c:	75 0b                	jne    c0006129 <f_readdir+0x2c>
c000611e:	31 d2                	xor    edx,edx
c0006120:	89 d8                	mov    eax,ebx
c0006122:	e8 a6 d0 ff ff       	call   c00031cd <dir_sdi>
c0006127:	eb 68                	jmp    c0006191 <f_readdir+0x94>
c0006129:	83 ec 0c             	sub    esp,0xc
c000612c:	68 60 04 00 00       	push   0x460
c0006131:	e8 6e 23 00 00       	call   c00084a4 <ff_memalloc>
c0006136:	83 c4 10             	add    esp,0x10
c0006139:	89 c6                	mov    esi,eax
c000613b:	b8 11 00 00 00       	mov    eax,0x11
c0006140:	85 f6                	test   esi,esi
c0006142:	74 4d                	je     c0006191 <f_readdir+0x94>
c0006144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006148:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000614e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006151:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006154:	31 d2                	xor    edx,edx
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 80 d8 ff ff       	call   c00039dd <dir_read>
c000615d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006162:	75 19                	jne    c000617d <f_readdir+0x80>
c0006164:	89 fa                	mov    edx,edi
c0006166:	89 d8                	mov    eax,ebx
c0006168:	e8 7e ea ff ff       	call   c0004beb <get_fileinfo>
c000616d:	31 d2                	xor    edx,edx
c000616f:	89 d8                	mov    eax,ebx
c0006171:	e8 af d5 ff ff       	call   c0003725 <dir_next>
c0006176:	83 f8 04             	cmp    eax,0x4
c0006179:	75 02                	jne    c000617d <f_readdir+0x80>
c000617b:	31 c0                	xor    eax,eax
c000617d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006181:	83 ec 0c             	sub    esp,0xc
c0006184:	56                   	push   esi
c0006185:	e8 30 23 00 00       	call   c00084ba <ff_memfree>
c000618a:	83 c4 10             	add    esp,0x10
c000618d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006191:	83 c4 20             	add    esp,0x20
c0006194:	5b                   	pop    ebx
c0006195:	5e                   	pop    esi
c0006196:	5f                   	pop    edi
c0006197:	c3                   	ret    

c0006198 <f_stat>:
c0006198:	57                   	push   edi
c0006199:	31 c9                	xor    ecx,ecx
c000619b:	56                   	push   esi
c000619c:	53                   	push   ebx
c000619d:	83 ec 50             	sub    esp,0x50
c00061a0:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061a4:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061ac:	e8 50 c5 ff ff       	call   c0002701 <mount_volume>
c00061b1:	89 c3                	mov    ebx,eax
c00061b3:	85 c0                	test   eax,eax
c00061b5:	75 67                	jne    c000621e <f_stat+0x86>
c00061b7:	83 ec 0c             	sub    esp,0xc
c00061ba:	bb 11 00 00 00       	mov    ebx,0x11
c00061bf:	68 60 04 00 00       	push   0x460
c00061c4:	e8 db 22 00 00       	call   c00084a4 <ff_memalloc>
c00061c9:	83 c4 10             	add    esp,0x10
c00061cc:	89 c6                	mov    esi,eax
c00061ce:	85 c0                	test   eax,eax
c00061d0:	74 4c                	je     c000621e <f_stat+0x86>
c00061d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061d6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061dc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061df:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061e2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061e6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061ea:	e8 88 ec ff ff       	call   c0004e77 <follow_path>
c00061ef:	89 c3                	mov    ebx,eax
c00061f1:	85 c0                	test   eax,eax
c00061f3:	75 1d                	jne    c0006212 <f_stat+0x7a>
c00061f5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061fa:	78 11                	js     c000620d <f_stat+0x75>
c00061fc:	85 ff                	test   edi,edi
c00061fe:	74 12                	je     c0006212 <f_stat+0x7a>
c0006200:	89 fa                	mov    edx,edi
c0006202:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006206:	e8 e0 e9 ff ff       	call   c0004beb <get_fileinfo>
c000620b:	eb 05                	jmp    c0006212 <f_stat+0x7a>
c000620d:	bb 06 00 00 00       	mov    ebx,0x6
c0006212:	83 ec 0c             	sub    esp,0xc
c0006215:	56                   	push   esi
c0006216:	e8 9f 22 00 00       	call   c00084ba <ff_memfree>
c000621b:	83 c4 10             	add    esp,0x10
c000621e:	83 c4 50             	add    esp,0x50
c0006221:	89 d8                	mov    eax,ebx
c0006223:	5b                   	pop    ebx
c0006224:	5e                   	pop    esi
c0006225:	5f                   	pop    edi
c0006226:	c3                   	ret    

c0006227 <f_getfree>:
c0006227:	55                   	push   ebp
c0006228:	31 c9                	xor    ecx,ecx
c000622a:	57                   	push   edi
c000622b:	56                   	push   esi
c000622c:	53                   	push   ebx
c000622d:	83 ec 5c             	sub    esp,0x5c
c0006230:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006234:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006238:	e8 c4 c4 ff ff       	call   c0002701 <mount_volume>
c000623d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006241:	85 c0                	test   eax,eax
c0006243:	0f 85 9d 01 00 00    	jne    c00063e6 <f_getfree+0x1bf>
c0006249:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000624d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006251:	89 02                	mov    DWORD PTR [edx],eax
c0006253:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006256:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006259:	8d 71 fe             	lea    esi,[ecx-0x2]
c000625c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006260:	39 f2                	cmp    edx,esi
c0006262:	77 0b                	ja     c000626f <f_getfree+0x48>
c0006264:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006268:	89 10                	mov    DWORD PTR [eax],edx
c000626a:	e9 77 01 00 00       	jmp    c00063e6 <f_getfree+0x1bf>
c000626f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006271:	80 fa 01             	cmp    dl,0x1
c0006274:	75 3a                	jne    c00062b0 <f_getfree+0x89>
c0006276:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000627a:	be 02 00 00 00       	mov    esi,0x2
c000627f:	31 db                	xor    ebx,ebx
c0006281:	89 f2                	mov    edx,esi
c0006283:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006287:	e8 4b cd ff ff       	call   c0002fd7 <get_fat>
c000628c:	83 f8 ff             	cmp    eax,0xffffffff
c000628f:	0f 84 28 01 00 00    	je     c00063bd <f_getfree+0x196>
c0006295:	83 f8 01             	cmp    eax,0x1
c0006298:	0f 84 29 01 00 00    	je     c00063c7 <f_getfree+0x1a0>
c000629e:	83 d3 00             	adc    ebx,0x0
c00062a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a5:	46                   	inc    esi
c00062a6:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a9:	77 d6                	ja     c0006281 <f_getfree+0x5a>
c00062ab:	e9 25 01 00 00       	jmp    c00063d5 <f_getfree+0x1ae>
c00062b0:	80 fa 04             	cmp    dl,0x4
c00062b3:	0f 85 88 00 00 00    	jne    c0006341 <f_getfree+0x11a>
c00062b9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062bc:	31 ed                	xor    ebp,ebp
c00062be:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c9:	31 db                	xor    ebx,ebx
c00062cb:	85 ed                	test   ebp,ebp
c00062cd:	75 3f                	jne    c000630e <f_getfree+0xe7>
c00062cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062d7:	83 c0 01             	add    eax,0x1
c00062da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062de:	83 d2 00             	adc    edx,0x0
c00062e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062f1:	e8 59 c1 ff ff       	call   c000244f <move_window>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 d3 00 00 00    	jne    c00063d1 <f_getfree+0x1aa>
c00062fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006302:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000630a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000630e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006312:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006315:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006319:	89 cf                	mov    edi,ecx
c000631b:	85 f6                	test   esi,esi
c000631d:	74 12                	je     c0006331 <f_getfree+0x10a>
c000631f:	88 c1                	mov    cl,al
c0006321:	83 e1 01             	and    ecx,0x1
c0006324:	80 f9 01             	cmp    cl,0x1
c0006327:	83 d3 00             	adc    ebx,0x0
c000632a:	d0 e8                	shr    al,1
c000632c:	4e                   	dec    esi
c000632d:	39 fe                	cmp    esi,edi
c000632f:	75 ea                	jne    c000631b <f_getfree+0xf4>
c0006331:	45                   	inc    ebp
c0006332:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006338:	85 f6                	test   esi,esi
c000633a:	75 8f                	jne    c00062cb <f_getfree+0xa4>
c000633c:	e9 94 00 00 00       	jmp    c00063d5 <f_getfree+0x1ae>
c0006341:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006344:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006347:	31 f6                	xor    esi,esi
c0006349:	31 db                	xor    ebx,ebx
c000634b:	85 f6                	test   esi,esi
c000634d:	75 1b                	jne    c000636a <f_getfree+0x143>
c000634f:	89 d7                	mov    edi,edx
c0006351:	89 cd                	mov    ebp,ecx
c0006353:	83 c7 01             	add    edi,0x1
c0006356:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635a:	83 d5 00             	adc    ebp,0x0
c000635d:	e8 ed c0 ff ff       	call   c000244f <move_window>
c0006362:	85 c0                	test   eax,eax
c0006364:	75 6b                	jne    c00063d1 <f_getfree+0x1aa>
c0006366:	89 fa                	mov    edx,edi
c0006368:	89 e9                	mov    ecx,ebp
c000636a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000636e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006372:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006376:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006379:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000637d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006381:	75 11                	jne    c0006394 <f_getfree+0x16d>
c0006383:	e8 e9 b8 ff ff       	call   c0001c71 <ld_word>
c0006388:	66 83 f8 01          	cmp    ax,0x1
c000638c:	83 d3 00             	adc    ebx,0x0
c000638f:	83 c6 02             	add    esi,0x2
c0006392:	eb 13                	jmp    c00063a7 <f_getfree+0x180>
c0006394:	e8 e5 b8 ff ff       	call   c0001c7e <ld_dword>
c0006399:	25 ff ff ff 0f       	and    eax,0xfffffff
c000639e:	83 f8 01             	cmp    eax,0x1
c00063a1:	83 d3 00             	adc    ebx,0x0
c00063a4:	83 c6 04             	add    esi,0x4
c00063a7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063b5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b9:	75 90                	jne    c000634b <f_getfree+0x124>
c00063bb:	eb 18                	jmp    c00063d5 <f_getfree+0x1ae>
c00063bd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063c5:	eb 0e                	jmp    c00063d5 <f_getfree+0x1ae>
c00063c7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063cf:	eb 04                	jmp    c00063d5 <f_getfree+0x1ae>
c00063d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d9:	89 18                	mov    DWORD PTR [eax],ebx
c00063db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063df:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063e2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063ea:	83 c4 5c             	add    esp,0x5c
c00063ed:	5b                   	pop    ebx
c00063ee:	5e                   	pop    esi
c00063ef:	5f                   	pop    edi
c00063f0:	5d                   	pop    ebp
c00063f1:	c3                   	ret    

c00063f2 <f_truncate>:
c00063f2:	56                   	push   esi
c00063f3:	53                   	push   ebx
c00063f4:	83 ec 14             	sub    esp,0x14
c00063f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063fb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ff:	89 d8                	mov    eax,ebx
c0006401:	e8 6e bf ff ff       	call   c0002374 <validate>
c0006406:	89 c6                	mov    esi,eax
c0006408:	85 c0                	test   eax,eax
c000640a:	0f 85 d2 00 00 00    	jne    c00064e2 <f_truncate+0xf0>
c0006410:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006414:	85 f6                	test   esi,esi
c0006416:	0f 85 c6 00 00 00    	jne    c00064e2 <f_truncate+0xf0>
c000641c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006420:	0f 84 b7 00 00 00    	je     c00064dd <f_truncate+0xeb>
c0006426:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006429:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000642c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000642f:	89 d1                	mov    ecx,edx
c0006431:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006434:	0f 83 a8 00 00 00    	jae    c00064e2 <f_truncate+0xf0>
c000643a:	09 c2                	or     edx,eax
c000643c:	75 15                	jne    c0006453 <f_truncate+0x61>
c000643e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006441:	31 c9                	xor    ecx,ecx
c0006443:	89 d8                	mov    eax,ebx
c0006445:	e8 7a d0 ff ff       	call   c00034c4 <remove_chain>
c000644a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006451:	eb 35                	jmp    c0006488 <f_truncate+0x96>
c0006453:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006456:	89 d8                	mov    eax,ebx
c0006458:	e8 7a cb ff ff       	call   c0002fd7 <get_fat>
c000645d:	89 c2                	mov    edx,eax
c000645f:	b8 01 00 00 00       	mov    eax,0x1
c0006464:	83 fa ff             	cmp    edx,0xffffffff
c0006467:	74 1f                	je     c0006488 <f_truncate+0x96>
c0006469:	b8 02 00 00 00       	mov    eax,0x2
c000646e:	83 fa 01             	cmp    edx,0x1
c0006471:	74 15                	je     c0006488 <f_truncate+0x96>
c0006473:	31 c0                	xor    eax,eax
c0006475:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006479:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000647c:	76 0a                	jbe    c0006488 <f_truncate+0x96>
c000647e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006481:	89 d8                	mov    eax,ebx
c0006483:	e8 3c d0 ff ff       	call   c00034c4 <remove_chain>
c0006488:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000648b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000648e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006491:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006494:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006497:	83 ca 40             	or     edx,0x40
c000649a:	85 c0                	test   eax,eax
c000649c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000649f:	75 35                	jne    c00064d6 <f_truncate+0xe4>
c00064a1:	84 d2                	test   dl,dl
c00064a3:	79 3d                	jns    c00064e2 <f_truncate+0xf0>
c00064a5:	83 ec 0c             	sub    esp,0xc
c00064a8:	8d 43 50             	lea    eax,[ebx+0x50]
c00064ab:	6a 01                	push   0x1
c00064ad:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064b0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064b3:	50                   	push   eax
c00064b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064bc:	50                   	push   eax
c00064bd:	e8 7a b7 ff ff       	call   c0001c3c <disk_write>
c00064c2:	83 c4 20             	add    esp,0x20
c00064c5:	85 c0                	test   eax,eax
c00064c7:	75 08                	jne    c00064d1 <f_truncate+0xdf>
c00064c9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064cd:	31 f6                	xor    esi,esi
c00064cf:	eb 11                	jmp    c00064e2 <f_truncate+0xf0>
c00064d1:	b8 01 00 00 00       	mov    eax,0x1
c00064d6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d9:	89 c6                	mov    esi,eax
c00064db:	eb 05                	jmp    c00064e2 <f_truncate+0xf0>
c00064dd:	be 07 00 00 00       	mov    esi,0x7
c00064e2:	89 f0                	mov    eax,esi
c00064e4:	83 c4 14             	add    esp,0x14
c00064e7:	5b                   	pop    ebx
c00064e8:	5e                   	pop    esi
c00064e9:	c3                   	ret    

c00064ea <f_unlink>:
c00064ea:	56                   	push   esi
c00064eb:	b9 02 00 00 00       	mov    ecx,0x2
c00064f0:	53                   	push   ebx
c00064f1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064f7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064fb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006502:	e8 fa c1 ff ff       	call   c0002701 <mount_volume>
c0006507:	85 c0                	test   eax,eax
c0006509:	0f 85 55 01 00 00    	jne    c0006664 <f_unlink+0x17a>
c000650f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006513:	83 ec 0c             	sub    esp,0xc
c0006516:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000651a:	68 60 04 00 00       	push   0x460
c000651f:	e8 80 1f 00 00       	call   c00084a4 <ff_memalloc>
c0006524:	83 c4 10             	add    esp,0x10
c0006527:	89 c3                	mov    ebx,eax
c0006529:	b8 11 00 00 00       	mov    eax,0x11
c000652e:	85 db                	test   ebx,ebx
c0006530:	0f 84 2e 01 00 00    	je     c0006664 <f_unlink+0x17a>
c0006536:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000653a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006540:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006543:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006546:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000654d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006551:	e8 21 e9 ff ff       	call   c0004e77 <follow_path>
c0006556:	85 c0                	test   eax,eax
c0006558:	0f 85 f2 00 00 00    	jne    c0006650 <f_unlink+0x166>
c000655e:	b8 06 00 00 00       	mov    eax,0x6
c0006563:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000656b:	0f 88 df 00 00 00    	js     c0006650 <f_unlink+0x166>
c0006571:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006576:	74 0a                	je     c0006582 <f_unlink+0x98>
c0006578:	b8 07 00 00 00       	mov    eax,0x7
c000657d:	e9 ce 00 00 00       	jmp    c0006650 <f_unlink+0x166>
c0006582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658a:	8a 02                	mov    al,BYTE PTR [edx]
c000658c:	3c 04                	cmp    al,0x4
c000658e:	75 12                	jne    c00065a2 <f_unlink+0xb8>
c0006590:	8d 42 10             	lea    eax,[edx+0x10]
c0006593:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006597:	e8 a1 e8 ff ff       	call   c0004e3d <init_alloc_info.isra.2>
c000659c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065a0:	eb 0e                	jmp    c00065b0 <f_unlink+0xc6>
c00065a2:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a9:	e8 3e e8 ff ff       	call   c0004dec <ld_clust.isra.0>
c00065ae:	89 c6                	mov    esi,eax
c00065b0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065b5:	75 12                	jne    c00065c9 <f_unlink+0xdf>
c00065b7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065bb:	e8 94 d6 ff ff       	call   c0003c54 <dir_remove>
c00065c0:	85 c0                	test   eax,eax
c00065c2:	74 6c                	je     c0006630 <f_unlink+0x146>
c00065c4:	e9 87 00 00 00       	jmp    c0006650 <f_unlink+0x166>
c00065c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065cd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065d4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065de:	75 21                	jne    c0006601 <f_unlink+0x117>
c00065e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065ef:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065f6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065fa:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006601:	31 d2                	xor    edx,edx
c0006603:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660a:	e8 be cb ff ff       	call   c00031cd <dir_sdi>
c000660f:	85 c0                	test   eax,eax
c0006611:	75 3d                	jne    c0006650 <f_unlink+0x166>
c0006613:	31 d2                	xor    edx,edx
c0006615:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000661c:	e8 bc d3 ff ff       	call   c00039dd <dir_read>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 84 4f ff ff ff    	je     c0006578 <f_unlink+0x8e>
c0006629:	83 f8 04             	cmp    eax,0x4
c000662c:	75 22                	jne    c0006650 <f_unlink+0x166>
c000662e:	eb 87                	jmp    c00065b7 <f_unlink+0xcd>
c0006630:	85 f6                	test   esi,esi
c0006632:	75 0b                	jne    c000663f <f_unlink+0x155>
c0006634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006638:	e8 3d df ff ff       	call   c000457a <sync_fs>
c000663d:	eb 11                	jmp    c0006650 <f_unlink+0x166>
c000663f:	31 c9                	xor    ecx,ecx
c0006641:	89 f2                	mov    edx,esi
c0006643:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006647:	e8 78 ce ff ff       	call   c00034c4 <remove_chain>
c000664c:	85 c0                	test   eax,eax
c000664e:	74 e4                	je     c0006634 <f_unlink+0x14a>
c0006650:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006654:	83 ec 0c             	sub    esp,0xc
c0006657:	53                   	push   ebx
c0006658:	e8 5d 1e 00 00       	call   c00084ba <ff_memfree>
c000665d:	83 c4 10             	add    esp,0x10
c0006660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006664:	81 c4 e4 00 00 00    	add    esp,0xe4
c000666a:	5b                   	pop    ebx
c000666b:	5e                   	pop    esi
c000666c:	c3                   	ret    

c000666d <f_mkdir>:
c000666d:	57                   	push   edi
c000666e:	b9 02 00 00 00       	mov    ecx,0x2
c0006673:	56                   	push   esi
c0006674:	53                   	push   ebx
c0006675:	83 c4 80             	add    esp,0xffffff80
c0006678:	8d 54 24 08          	lea    edx,[esp+0x8]
c000667c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006683:	e8 79 c0 ff ff       	call   c0002701 <mount_volume>
c0006688:	89 c3                	mov    ebx,eax
c000668a:	85 c0                	test   eax,eax
c000668c:	0f 85 fe 01 00 00    	jne    c0006890 <f_mkdir+0x223>
c0006692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006696:	bb 11 00 00 00       	mov    ebx,0x11
c000669b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000669f:	83 ec 0c             	sub    esp,0xc
c00066a2:	68 60 04 00 00       	push   0x460
c00066a7:	e8 f8 1d 00 00       	call   c00084a4 <ff_memalloc>
c00066ac:	83 c4 10             	add    esp,0x10
c00066af:	89 c7                	mov    edi,eax
c00066b1:	85 c0                	test   eax,eax
c00066b3:	0f 84 d7 01 00 00    	je     c0006890 <f_mkdir+0x223>
c00066b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066bd:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066c3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066c6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066d0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066d4:	e8 9e e7 ff ff       	call   c0004e77 <follow_path>
c00066d9:	89 c3                	mov    ebx,eax
c00066db:	85 c0                	test   eax,eax
c00066dd:	74 3e                	je     c000671d <f_mkdir+0xb0>
c00066df:	83 f8 04             	cmp    eax,0x4
c00066e2:	75 3e                	jne    c0006722 <f_mkdir+0xb5>
c00066e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e8:	31 d2                	xor    edx,edx
c00066ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066f2:	e8 ce cb ff ff       	call   c00032c5 <create_chain>
c00066f7:	89 c6                	mov    esi,eax
c00066f9:	85 c0                	test   eax,eax
c00066fb:	74 0c                	je     c0006709 <f_mkdir+0x9c>
c00066fd:	bb 02 00 00 00       	mov    ebx,0x2
c0006702:	83 f8 01             	cmp    eax,0x1
c0006705:	74 07                	je     c000670e <f_mkdir+0xa1>
c0006707:	eb 2a                	jmp    c0006733 <f_mkdir+0xc6>
c0006709:	bb 07 00 00 00       	mov    ebx,0x7
c000670e:	31 c9                	xor    ecx,ecx
c0006710:	89 f2                	mov    edx,esi
c0006712:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006716:	e8 a9 cd ff ff       	call   c00034c4 <remove_chain>
c000671b:	eb 05                	jmp    c0006722 <f_mkdir+0xb5>
c000671d:	bb 08 00 00 00       	mov    ebx,0x8
c0006722:	83 ec 0c             	sub    esp,0xc
c0006725:	57                   	push   edi
c0006726:	e8 8f 1d 00 00       	call   c00084ba <ff_memfree>
c000672b:	83 c4 10             	add    esp,0x10
c000672e:	e9 5d 01 00 00       	jmp    c0006890 <f_mkdir+0x223>
c0006733:	bb 01 00 00 00       	mov    ebx,0x1
c0006738:	83 f8 ff             	cmp    eax,0xffffffff
c000673b:	74 d1                	je     c000670e <f_mkdir+0xa1>
c000673d:	89 f2                	mov    edx,esi
c000673f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006743:	e8 c4 ce ff ff       	call   c000360c <dir_clear>
c0006748:	89 c3                	mov    ebx,eax
c000674a:	85 c0                	test   eax,eax
c000674c:	75 c0                	jne    c000670e <f_mkdir+0xa1>
c000674e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006752:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006755:	74 69                	je     c00067c0 <f_mkdir+0x153>
c0006757:	b9 0b 00 00 00       	mov    ecx,0xb
c000675c:	83 c0 54             	add    eax,0x54
c000675f:	ba 20 00 00 00       	mov    edx,0x20
c0006764:	e8 9c b5 ff ff       	call   c0001d05 <mem_set>
c0006769:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006772:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006776:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000677a:	83 c0 6a             	add    eax,0x6a
c000677d:	e8 65 b5 ff ff       	call   c0001ce7 <st_dword>
c0006782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006786:	89 f1                	mov    ecx,esi
c0006788:	8d 50 54             	lea    edx,[eax+0x54]
c000678b:	e8 85 e6 ff ff       	call   c0004e15 <st_clust.isra.1>
c0006790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006794:	b9 20 00 00 00       	mov    ecx,0x20
c0006799:	8d 50 54             	lea    edx,[eax+0x54]
c000679c:	83 c0 74             	add    eax,0x74
c000679f:	e8 4c b5 ff ff       	call   c0001cf0 <mem_cpy>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067ac:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067b0:	8d 50 74             	lea    edx,[eax+0x74]
c00067b3:	e8 5d e6 ff ff       	call   c0004e15 <st_clust.isra.1>
c00067b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067c4:	e8 2f db ff ff       	call   c00042f8 <dir_register>
c00067c9:	89 c3                	mov    ebx,eax
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 3b ff ff ff    	jne    c000670e <f_mkdir+0xa1>
c00067d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067da:	75 74                	jne    c0006850 <f_mkdir+0x1e3>
c00067dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067df:	ba 00 00 21 50       	mov    edx,0x50210000
c00067e4:	83 c0 0c             	add    eax,0xc
c00067e7:	e8 fb b4 ff ff       	call   c0001ce7 <st_dword>
c00067ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f0:	89 f2                	mov    edx,esi
c00067f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f5:	83 c0 34             	add    eax,0x34
c00067f8:	e8 ea b4 ff ff       	call   c0001ce7 <st_dword>
c00067fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006801:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006808:	c1 e2 09             	shl    edx,0x9
c000680b:	83 c0 38             	add    eax,0x38
c000680e:	e8 d4 b4 ff ff       	call   c0001ce7 <st_dword>
c0006813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006817:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000681b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000681e:	c1 e2 09             	shl    edx,0x9
c0006821:	83 c0 28             	add    eax,0x28
c0006824:	e8 be b4 ff ff       	call   c0001ce7 <st_dword>
c0006829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006830:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006834:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006837:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000683b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000683f:	e8 8b d3 ff ff       	call   c0003bcf <store_xdir>
c0006844:	89 c3                	mov    ebx,eax
c0006846:	85 c0                	test   eax,eax
c0006848:	0f 85 d4 fe ff ff    	jne    c0006722 <f_mkdir+0xb5>
c000684e:	eb 30                	jmp    c0006880 <f_mkdir+0x213>
c0006850:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006854:	ba 00 00 21 50       	mov    edx,0x50210000
c0006859:	83 c0 16             	add    eax,0x16
c000685c:	e8 86 b4 ff ff       	call   c0001ce7 <st_dword>
c0006861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006865:	89 f1                	mov    ecx,esi
c0006867:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000686b:	e8 a5 e5 ff ff       	call   c0004e15 <st_clust.isra.1>
c0006870:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006874:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006884:	e8 f1 dc ff ff       	call   c000457a <sync_fs>
c0006889:	89 c3                	mov    ebx,eax
c000688b:	e9 92 fe ff ff       	jmp    c0006722 <f_mkdir+0xb5>
c0006890:	83 ec 80             	sub    esp,0xffffff80
c0006893:	89 d8                	mov    eax,ebx
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	c3                   	ret    

c0006899 <f_rename>:
c0006899:	55                   	push   ebp
c000689a:	57                   	push   edi
c000689b:	56                   	push   esi
c000689c:	53                   	push   ebx
c000689d:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068a3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068aa:	e8 a4 b9 ff ff       	call   c0002253 <get_ldnumber>
c00068af:	b9 02 00 00 00       	mov    ecx,0x2
c00068b4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068bf:	e8 3d be ff ff       	call   c0002701 <mount_volume>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	0f 85 b5 02 00 00    	jne    c0006b81 <f_rename+0x2e8>
c00068cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d0:	83 ec 0c             	sub    esp,0xc
c00068d3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068d7:	68 60 04 00 00       	push   0x460
c00068dc:	e8 c3 1b 00 00       	call   c00084a4 <ff_memalloc>
c00068e1:	83 c4 10             	add    esp,0x10
c00068e4:	89 c3                	mov    ebx,eax
c00068e6:	b8 11 00 00 00       	mov    eax,0x11
c00068eb:	85 db                	test   ebx,ebx
c00068ed:	0f 84 8e 02 00 00    	je     c0006b81 <f_rename+0x2e8>
c00068f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068fd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006900:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006903:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000690a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000690e:	e8 64 e5 ff ff       	call   c0004e77 <follow_path>
c0006913:	85 c0                	test   eax,eax
c0006915:	0f 85 52 02 00 00    	jne    c0006b6d <f_rename+0x2d4>
c000691b:	b8 06 00 00 00       	mov    eax,0x6
c0006920:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006928:	0f 85 3f 02 00 00    	jne    c0006b6d <f_rename+0x2d4>
c000692e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006932:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006935:	0f 85 05 01 00 00    	jne    c0006a40 <f_rename+0x1a7>
c000693b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000693e:	b9 40 00 00 00       	mov    ecx,0x40
c0006943:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006947:	e8 a4 b3 ff ff       	call   c0001cf0 <mem_cpy>
c000694c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006951:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006955:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695c:	e8 8f b3 ff ff       	call   c0001cf0 <mem_cpy>
c0006961:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006968:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000696f:	e8 03 e5 ff ff       	call   c0004e77 <follow_path>
c0006974:	85 c0                	test   eax,eax
c0006976:	75 29                	jne    c00069a1 <f_rename+0x108>
c0006978:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006983:	74 0a                	je     c000698f <f_rename+0xf6>
c0006985:	b8 08 00 00 00       	mov    eax,0x8
c000698a:	e9 de 01 00 00       	jmp    c0006b6d <f_rename+0x2d4>
c000698f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006996:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699d:	75 e6                	jne    c0006985 <f_rename+0xec>
c000699f:	eb 09                	jmp    c00069aa <f_rename+0x111>
c00069a1:	83 f8 04             	cmp    eax,0x4
c00069a4:	0f 85 c3 01 00 00    	jne    c0006b6d <f_rename+0x2d4>
c00069aa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b1:	e8 42 d9 ff ff       	call   c00042f8 <dir_register>
c00069b6:	85 c0                	test   eax,eax
c00069b8:	0f 85 af 01 00 00    	jne    c0006b6d <f_rename+0x2d4>
c00069be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069c5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c8:	89 c5                	mov    ebp,eax
c00069ca:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069d1:	8d 46 24             	lea    eax,[esi+0x24]
c00069d4:	e8 98 b2 ff ff       	call   c0001c71 <ld_word>
c00069d9:	b9 40 00 00 00       	mov    ecx,0x40
c00069de:	89 c7                	mov    edi,eax
c00069e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069e4:	89 f0                	mov    eax,esi
c00069e6:	e8 05 b3 ff ff       	call   c0001cf0 <mem_cpy>
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	89 e9                	mov    ecx,ebp
c00069f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069f7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a02:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a05:	0f b7 d7             	movzx  edx,di
c0006a08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a0b:	83 c0 24             	add    eax,0x24
c0006a0e:	e8 d0 b2 ff ff       	call   c0001ce3 <st_word>
c0006a13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a17:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a1a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a1d:	a8 10                	test   al,0x10
c0006a1f:	75 06                	jne    c0006a27 <f_rename+0x18e>
c0006a21:	83 c8 20             	or     eax,0x20
c0006a24:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 9c d1 ff ff       	call   c0003bcf <store_xdir>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	0f 84 1c 01 00 00    	je     c0006b57 <f_rename+0x2be>
c0006a3b:	e9 2d 01 00 00       	jmp    c0006b6d <f_rename+0x2d4>
c0006a40:	b9 20 00 00 00       	mov    ecx,0x20
c0006a45:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a50:	e8 9b b2 ff ff       	call   c0001cf0 <mem_cpy>
c0006a55:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a5a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a5e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a65:	e8 86 b2 ff ff       	call   c0001cf0 <mem_cpy>
c0006a6a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a71:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a78:	e8 fa e3 ff ff       	call   c0004e77 <follow_path>
c0006a7d:	85 c0                	test   eax,eax
c0006a7f:	75 27                	jne    c0006aa8 <f_rename+0x20f>
c0006a81:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a85:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a8c:	0f 85 f3 fe ff ff    	jne    c0006985 <f_rename+0xec>
c0006a92:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a99:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006aa0:	0f 85 df fe ff ff    	jne    c0006985 <f_rename+0xec>
c0006aa6:	eb 09                	jmp    c0006ab1 <f_rename+0x218>
c0006aa8:	83 f8 04             	cmp    eax,0x4
c0006aab:	0f 85 bc 00 00 00    	jne    c0006b6d <f_rename+0x2d4>
c0006ab1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab8:	e8 3b d8 ff ff       	call   c00042f8 <dir_register>
c0006abd:	85 c0                	test   eax,eax
c0006abf:	0f 85 a8 00 00 00    	jne    c0006b6d <f_rename+0x2d4>
c0006ac5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006acc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ad1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ad4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad8:	e8 13 b2 ff ff       	call   c0001cf0 <mem_cpy>
c0006add:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ae1:	a8 10                	test   al,0x10
c0006ae3:	75 03                	jne    c0006ae8 <f_rename+0x24f>
c0006ae5:	83 c8 20             	or     eax,0x20
c0006ae8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aef:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006af3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006af7:	74 5e                	je     c0006b57 <f_rename+0x2be>
c0006af9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b00:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b04:	74 51                	je     c0006b57 <f_rename+0x2be>
c0006b06:	89 f2                	mov    edx,esi
c0006b08:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b0c:	8a 07                	mov    al,BYTE PTR [edi]
c0006b0e:	e8 d9 e2 ff ff       	call   c0004dec <ld_clust.isra.0>
c0006b13:	89 c2                	mov    edx,eax
c0006b15:	89 f8                	mov    eax,edi
c0006b17:	e8 ee b3 ff ff       	call   c0001f0a <clst2sect>
c0006b1c:	89 c6                	mov    esi,eax
c0006b1e:	89 d1                	mov    ecx,edx
c0006b20:	b8 02 00 00 00       	mov    eax,0x2
c0006b25:	09 f2                	or     edx,esi
c0006b27:	74 44                	je     c0006b6d <f_rename+0x2d4>
c0006b29:	89 f2                	mov    edx,esi
c0006b2b:	89 f8                	mov    eax,edi
c0006b2d:	e8 1d b9 ff ff       	call   c000244f <move_window>
c0006b32:	85 c0                	test   eax,eax
c0006b34:	75 37                	jne    c0006b6d <f_rename+0x2d4>
c0006b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b3a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b3e:	75 17                	jne    c0006b57 <f_rename+0x2be>
c0006b40:	8d 50 74             	lea    edx,[eax+0x74]
c0006b43:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b4a:	e8 c6 e2 ff ff       	call   c0004e15 <st_clust.isra.1>
c0006b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b53:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b57:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b5b:	e8 f4 d0 ff ff       	call   c0003c54 <dir_remove>
c0006b60:	85 c0                	test   eax,eax
c0006b62:	75 09                	jne    c0006b6d <f_rename+0x2d4>
c0006b64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b68:	e8 0d da ff ff       	call   c000457a <sync_fs>
c0006b6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b71:	83 ec 0c             	sub    esp,0xc
c0006b74:	53                   	push   ebx
c0006b75:	e8 40 19 00 00       	call   c00084ba <ff_memfree>
c0006b7a:	83 c4 10             	add    esp,0x10
c0006b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b81:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b87:	5b                   	pop    ebx
c0006b88:	5e                   	pop    esi
c0006b89:	5f                   	pop    edi
c0006b8a:	5d                   	pop    ebp
c0006b8b:	c3                   	ret    

c0006b8c <f_chmod>:
c0006b8c:	57                   	push   edi
c0006b8d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b92:	56                   	push   esi
c0006b93:	53                   	push   ebx
c0006b94:	83 ec 60             	sub    esp,0x60
c0006b97:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b9b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b9f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ba3:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006ba7:	e8 55 bb ff ff       	call   c0002701 <mount_volume>
c0006bac:	85 c0                	test   eax,eax
c0006bae:	0f 85 af 00 00 00    	jne    c0006c63 <f_chmod+0xd7>
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	83 ec 0c             	sub    esp,0xc
c0006bbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bbf:	68 60 04 00 00       	push   0x460
c0006bc4:	e8 db 18 00 00       	call   c00084a4 <ff_memalloc>
c0006bc9:	83 c4 10             	add    esp,0x10
c0006bcc:	89 c6                	mov    esi,eax
c0006bce:	b8 11 00 00 00       	mov    eax,0x11
c0006bd3:	85 f6                	test   esi,esi
c0006bd5:	0f 84 88 00 00 00    	je     c0006c63 <f_chmod+0xd7>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006be5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006beb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bef:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf3:	e8 7f e2 ff ff       	call   c0004e77 <follow_path>
c0006bf8:	85 c0                	test   eax,eax
c0006bfa:	75 53                	jne    c0006c4f <f_chmod+0xc3>
c0006bfc:	b8 06 00 00 00       	mov    eax,0x6
c0006c01:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c06:	75 47                	jne    c0006c4f <f_chmod+0xc3>
c0006c08:	89 f9                	mov    ecx,edi
c0006c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0e:	83 e1 27             	and    ecx,0x27
c0006c11:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c14:	75 1d                	jne    c0006c33 <f_chmod+0xa7>
c0006c16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c19:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c1c:	21 cb                	and    ebx,ecx
c0006c1e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c21:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c28:	e8 a2 cf ff ff       	call   c0003bcf <store_xdir>
c0006c2d:	85 c0                	test   eax,eax
c0006c2f:	75 1e                	jne    c0006c4f <f_chmod+0xc3>
c0006c31:	eb 13                	jmp    c0006c46 <f_chmod+0xba>
c0006c33:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c37:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c3a:	21 cb                	and    ebx,ecx
c0006c3c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c3f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c42:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c4a:	e8 2b d9 ff ff       	call   c000457a <sync_fs>
c0006c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c53:	83 ec 0c             	sub    esp,0xc
c0006c56:	56                   	push   esi
c0006c57:	e8 5e 18 00 00       	call   c00084ba <ff_memfree>
c0006c5c:	83 c4 10             	add    esp,0x10
c0006c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c63:	83 c4 60             	add    esp,0x60
c0006c66:	5b                   	pop    ebx
c0006c67:	5e                   	pop    esi
c0006c68:	5f                   	pop    edi
c0006c69:	c3                   	ret    

c0006c6a <f_utime>:
c0006c6a:	56                   	push   esi
c0006c6b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c70:	53                   	push   ebx
c0006c71:	83 ec 64             	sub    esp,0x64
c0006c74:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c78:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c7c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c80:	e8 7c ba ff ff       	call   c0002701 <mount_volume>
c0006c85:	85 c0                	test   eax,eax
c0006c87:	0f 85 b5 00 00 00    	jne    c0006d42 <f_utime+0xd8>
c0006c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c91:	83 ec 0c             	sub    esp,0xc
c0006c94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c98:	68 60 04 00 00       	push   0x460
c0006c9d:	e8 02 18 00 00       	call   c00084a4 <ff_memalloc>
c0006ca2:	83 c4 10             	add    esp,0x10
c0006ca5:	89 c3                	mov    ebx,eax
c0006ca7:	b8 11 00 00 00       	mov    eax,0x11
c0006cac:	85 db                	test   ebx,ebx
c0006cae:	0f 84 8e 00 00 00    	je     c0006d42 <f_utime+0xd8>
c0006cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cbe:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cc1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cc4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ccc:	e8 a6 e1 ff ff       	call   c0004e77 <follow_path>
c0006cd1:	85 c0                	test   eax,eax
c0006cd3:	75 59                	jne    c0006d2e <f_utime+0xc4>
c0006cd5:	b8 06 00 00 00       	mov    eax,0x6
c0006cda:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cdf:	75 4d                	jne    c0006d2e <f_utime+0xc4>
c0006ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ced:	c1 e2 10             	shl    edx,0x10
c0006cf0:	09 ca                	or     edx,ecx
c0006cf2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf5:	75 1a                	jne    c0006d11 <f_utime+0xa7>
c0006cf7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cfa:	83 c0 0c             	add    eax,0xc
c0006cfd:	e8 e5 af ff ff       	call   c0001ce7 <st_dword>
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 c4 ce ff ff       	call   c0003bcf <store_xdir>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 1f                	jne    c0006d2e <f_utime+0xc4>
c0006d0f:	eb 14                	jmp    c0006d25 <f_utime+0xbb>
c0006d11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d15:	83 c0 16             	add    eax,0x16
c0006d18:	e8 ca af ff ff       	call   c0001ce7 <st_dword>
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d29:	e8 4c d8 ff ff       	call   c000457a <sync_fs>
c0006d2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d32:	83 ec 0c             	sub    esp,0xc
c0006d35:	53                   	push   ebx
c0006d36:	e8 7f 17 00 00       	call   c00084ba <ff_memfree>
c0006d3b:	83 c4 10             	add    esp,0x10
c0006d3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d42:	83 c4 64             	add    esp,0x64
c0006d45:	5b                   	pop    ebx
c0006d46:	5e                   	pop    esi
c0006d47:	c3                   	ret    

c0006d48 <f_getlabel>:
c0006d48:	55                   	push   ebp
c0006d49:	31 c9                	xor    ecx,ecx
c0006d4b:	57                   	push   edi
c0006d4c:	56                   	push   esi
c0006d4d:	53                   	push   ebx
c0006d4e:	83 ec 6c             	sub    esp,0x6c
c0006d51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d55:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d5c:	e8 a0 b9 ff ff       	call   c0002701 <mount_volume>
c0006d61:	89 c6                	mov    esi,eax
c0006d63:	85 c0                	test   eax,eax
c0006d65:	0f 85 c1 01 00 00    	jne    c0006f2c <f_getlabel+0x1e4>
c0006d6b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d73:	0f 84 5f 01 00 00    	je     c0006ed8 <f_getlabel+0x190>
c0006d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d7d:	31 d2                	xor    edx,edx
c0006d7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d8f:	e8 39 c4 ff ff       	call   c00031cd <dir_sdi>
c0006d94:	85 c0                	test   eax,eax
c0006d96:	0f 85 2d 01 00 00    	jne    c0006ec9 <f_getlabel+0x181>
c0006d9c:	ba 01 00 00 00       	mov    edx,0x1
c0006da1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006da5:	e8 33 cc ff ff       	call   c00039dd <dir_read>
c0006daa:	85 c0                	test   eax,eax
c0006dac:	0f 85 17 01 00 00    	jne    c0006ec9 <f_getlabel+0x181>
c0006db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db9:	74 09                	je     c0006dc4 <f_getlabel+0x7c>
c0006dbb:	31 db                	xor    ebx,ebx
c0006dbd:	31 c9                	xor    ecx,ecx
c0006dbf:	e9 c8 00 00 00       	jmp    c0006e8c <f_getlabel+0x144>
c0006dc4:	31 ed                	xor    ebp,ebp
c0006dc6:	31 db                	xor    ebx,ebx
c0006dc8:	31 ff                	xor    edi,edi
c0006dca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dd2:	39 fa                	cmp    edx,edi
c0006dd4:	76 4b                	jbe    c0006e21 <f_getlabel+0xd9>
c0006dd6:	47                   	inc    edi
c0006dd7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dda:	01 d0                	add    eax,edx
c0006ddc:	e8 90 ae ff ff       	call   c0001c71 <ld_word>
c0006de1:	66 85 ed             	test   bp,bp
c0006de4:	75 0d                	jne    c0006df3 <f_getlabel+0xab>
c0006de6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006df1:	76 28                	jbe    c0006e1b <f_getlabel+0xd3>
c0006df3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dfa:	89 e9                	mov    ecx,ebp
c0006dfc:	01 da                	add    edx,ebx
c0006dfe:	c1 e1 10             	shl    ecx,0x10
c0006e01:	0f b7 c0             	movzx  eax,ax
c0006e04:	09 c8                	or     eax,ecx
c0006e06:	b9 04 00 00 00       	mov    ecx,0x4
c0006e0b:	e8 01 b0 ff ff       	call   c0001e11 <put_utf>
c0006e10:	84 c0                	test   al,al
c0006e12:	74 0b                	je     c0006e1f <f_getlabel+0xd7>
c0006e14:	0f b6 c0             	movzx  eax,al
c0006e17:	01 c3                	add    ebx,eax
c0006e19:	31 c0                	xor    eax,eax
c0006e1b:	89 c5                	mov    ebp,eax
c0006e1d:	eb ab                	jmp    c0006dca <f_getlabel+0x82>
c0006e1f:	31 db                	xor    ebx,ebx
c0006e21:	66 85 ed             	test   bp,bp
c0006e24:	74 02                	je     c0006e28 <f_getlabel+0xe0>
c0006e26:	31 db                	xor    ebx,ebx
c0006e28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e2f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e33:	e9 a0 00 00 00       	jmp    c0006ed8 <f_getlabel+0x190>
c0006e38:	83 ff 0b             	cmp    edi,0xb
c0006e3b:	74 11                	je     c0006e4e <f_getlabel+0x106>
c0006e3d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e46:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e49:	c1 e0 08             	shl    eax,0x8
c0006e4c:	09 c2                	or     edx,eax
c0006e4e:	0f b7 d2             	movzx  edx,dx
c0006e51:	50                   	push   eax
c0006e52:	50                   	push   eax
c0006e53:	68 b5 01 00 00       	push   0x1b5
c0006e58:	52                   	push   edx
c0006e59:	e8 03 17 00 00       	call   c0008561 <ff_oem2uni>
c0006e5e:	83 c4 10             	add    esp,0x10
c0006e61:	66 85 c0             	test   ax,ax
c0006e64:	74 46                	je     c0006eac <f_getlabel+0x164>
c0006e66:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e6d:	0f b7 c0             	movzx  eax,ax
c0006e70:	01 da                	add    edx,ebx
c0006e72:	b9 04 00 00 00       	mov    ecx,0x4
c0006e77:	e8 95 af ff ff       	call   c0001e11 <put_utf>
c0006e7c:	84 c0                	test   al,al
c0006e7e:	74 2c                	je     c0006eac <f_getlabel+0x164>
c0006e80:	0f b6 c0             	movzx  eax,al
c0006e83:	01 c3                	add    ebx,eax
c0006e85:	83 ff 0b             	cmp    edi,0xb
c0006e88:	74 24                	je     c0006eae <f_getlabel+0x166>
c0006e8a:	89 f9                	mov    ecx,edi
c0006e8c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e90:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e93:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e98:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ea1:	e8 9f ae ff ff       	call   c0001d45 <dbc_1st>
c0006ea6:	85 c0                	test   eax,eax
c0006ea8:	74 a4                	je     c0006e4e <f_getlabel+0x106>
c0006eaa:	eb 8c                	jmp    c0006e38 <f_getlabel+0xf0>
c0006eac:	31 db                	xor    ebx,ebx
c0006eae:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eb5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ebf:	74 17                	je     c0006ed8 <f_getlabel+0x190>
c0006ec1:	4b                   	dec    ebx
c0006ec2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ec5:	74 ee                	je     c0006eb5 <f_getlabel+0x16d>
c0006ec7:	eb 0f                	jmp    c0006ed8 <f_getlabel+0x190>
c0006ec9:	83 f8 04             	cmp    eax,0x4
c0006ecc:	75 5c                	jne    c0006f2a <f_getlabel+0x1e2>
c0006ece:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ed5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ee0:	74 4a                	je     c0006f2c <f_getlabel+0x1e4>
c0006ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ee6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006eec:	e8 5e b5 ff ff       	call   c000244f <move_window>
c0006ef1:	89 c6                	mov    esi,eax
c0006ef3:	85 c0                	test   eax,eax
c0006ef5:	75 35                	jne    c0006f2c <f_getlabel+0x1e4>
c0006ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006efb:	b8 43 00 00 00       	mov    eax,0x43
c0006f00:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f02:	80 f9 03             	cmp    cl,0x3
c0006f05:	74 0f                	je     c0006f16 <f_getlabel+0x1ce>
c0006f07:	31 c0                	xor    eax,eax
c0006f09:	80 f9 04             	cmp    cl,0x4
c0006f0c:	0f 94 c0             	sete   al
c0006f0f:	48                   	dec    eax
c0006f10:	83 e0 c3             	and    eax,0xffffffc3
c0006f13:	83 c0 64             	add    eax,0x64
c0006f16:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f1a:	e8 5f ad ff ff       	call   c0001c7e <ld_dword>
c0006f1f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f26:	89 07                	mov    DWORD PTR [edi],eax
c0006f28:	eb 02                	jmp    c0006f2c <f_getlabel+0x1e4>
c0006f2a:	89 c6                	mov    esi,eax
c0006f2c:	83 c4 6c             	add    esp,0x6c
c0006f2f:	89 f0                	mov    eax,esi
c0006f31:	5b                   	pop    ebx
c0006f32:	5e                   	pop    esi
c0006f33:	5f                   	pop    edi
c0006f34:	5d                   	pop    ebp
c0006f35:	c3                   	ret    

c0006f36 <f_setlabel>:
c0006f36:	56                   	push   esi
c0006f37:	b9 02 00 00 00       	mov    ecx,0x2
c0006f3c:	53                   	push   ebx
c0006f3d:	83 ec 74             	sub    esp,0x74
c0006f40:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f44:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f4b:	e8 b1 b7 ff ff       	call   c0002701 <mount_volume>
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	85 c0                	test   eax,eax
c0006f54:	0f 85 41 02 00 00    	jne    c000719b <f_setlabel+0x265>
c0006f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f5e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f61:	0f 85 8e 00 00 00    	jne    c0006ff5 <f_setlabel+0xbf>
c0006f67:	b9 16 00 00 00       	mov    ecx,0x16
c0006f6c:	31 d2                	xor    edx,edx
c0006f6e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f72:	31 db                	xor    ebx,ebx
c0006f74:	e8 8c ad ff ff       	call   c0001d05 <mem_set>
c0006f79:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f80:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f83:	0f 86 0a 01 00 00    	jbe    c0007093 <f_setlabel+0x15d>
c0006f89:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f90:	e8 b6 ad ff ff       	call   c0001d4b <tchar2uni>
c0006f95:	89 c6                	mov    esi,eax
c0006f97:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f9c:	76 2a                	jbe    c0006fc8 <f_setlabel+0x92>
c0006f9e:	83 f8 ff             	cmp    eax,0xffffffff
c0006fa1:	74 05                	je     c0006fa8 <f_setlabel+0x72>
c0006fa3:	83 fb 09             	cmp    ebx,0x9
c0006fa6:	76 0a                	jbe    c0006fb2 <f_setlabel+0x7c>
c0006fa8:	be 06 00 00 00       	mov    esi,0x6
c0006fad:	e9 e9 01 00 00       	jmp    c000719b <f_setlabel+0x265>
c0006fb2:	89 c2                	mov    edx,eax
c0006fb4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fbb:	c1 ea 10             	shr    edx,0x10
c0006fbe:	01 c8                	add    eax,ecx
c0006fc0:	43                   	inc    ebx
c0006fc1:	e8 1d ad ff ff       	call   c0001ce3 <st_word>
c0006fc6:	eb 04                	jmp    c0006fcc <f_setlabel+0x96>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	74 dc                	je     c0006fa8 <f_setlabel+0x72>
c0006fcc:	89 f2                	mov    edx,esi
c0006fce:	b8 77 9c 02 c0       	mov    eax,0xc0029c77
c0006fd3:	e8 5b ad ff ff       	call   c0001d33 <chk_chr>
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	75 cc                	jne    c0006fa8 <f_setlabel+0x72>
c0006fdc:	83 fb 0a             	cmp    ebx,0xa
c0006fdf:	77 c7                	ja     c0006fa8 <f_setlabel+0x72>
c0006fe1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fe4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe8:	0f b7 d6             	movzx  edx,si
c0006feb:	01 c8                	add    eax,ecx
c0006fed:	43                   	inc    ebx
c0006fee:	e8 f0 ac ff ff       	call   c0001ce3 <st_word>
c0006ff3:	eb 84                	jmp    c0006f79 <f_setlabel+0x43>
c0006ff5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ffa:	ba 20 00 00 00       	mov    edx,0x20
c0006fff:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0007003:	31 db                	xor    ebx,ebx
c0007005:	e8 fb ac ff ff       	call   c0001d05 <mem_set>
c000700a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007011:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007014:	76 60                	jbe    c0007076 <f_setlabel+0x140>
c0007016:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000701d:	e8 29 ad ff ff       	call   c0001d4b <tchar2uni>
c0007022:	3d ff ff 00 00       	cmp    eax,0xffff
c0007027:	0f 87 7b ff ff ff    	ja     c0006fa8 <f_setlabel+0x72>
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	50                   	push   eax
c0007031:	e8 97 15 00 00       	call   c00085cd <ff_wtoupper>
c0007036:	5a                   	pop    edx
c0007037:	59                   	pop    ecx
c0007038:	68 b5 01 00 00       	push   0x1b5
c000703d:	50                   	push   eax
c000703e:	e8 8e 14 00 00       	call   c00084d1 <ff_uni2oem>
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	89 c6                	mov    esi,eax
c0007048:	66 85 c0             	test   ax,ax
c000704b:	0f 84 57 ff ff ff    	je     c0006fa8 <f_setlabel+0x72>
c0007051:	0f b7 d0             	movzx  edx,ax
c0007054:	b8 70 9c 02 c0       	mov    eax,0xc0029c70
c0007059:	e8 d5 ac ff ff       	call   c0001d33 <chk_chr>
c000705e:	85 c0                	test   eax,eax
c0007060:	0f 85 42 ff ff ff    	jne    c0006fa8 <f_setlabel+0x72>
c0007066:	66 81 fe ff 00       	cmp    si,0xff
c000706b:	0f 87 14 01 00 00    	ja     c0007185 <f_setlabel+0x24f>
c0007071:	e9 fa 00 00 00       	jmp    c0007170 <f_setlabel+0x23a>
c0007076:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000707b:	0f 84 27 ff ff ff    	je     c0006fa8 <f_setlabel+0x72>
c0007081:	85 db                	test   ebx,ebx
c0007083:	74 0e                	je     c0007093 <f_setlabel+0x15d>
c0007085:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007088:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000708d:	75 04                	jne    c0007093 <f_setlabel+0x15d>
c000708f:	89 c3                	mov    ebx,eax
c0007091:	eb ee                	jmp    c0007081 <f_setlabel+0x14b>
c0007093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007097:	31 d2                	xor    edx,edx
c0007099:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000709d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a9:	e8 1f c1 ff ff       	call   c00031cd <dir_sdi>
c00070ae:	89 c6                	mov    esi,eax
c00070b0:	85 c0                	test   eax,eax
c00070b2:	0f 85 e3 00 00 00    	jne    c000719b <f_setlabel+0x265>
c00070b8:	ba 01 00 00 00       	mov    edx,0x1
c00070bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070c1:	e8 17 c9 ff ff       	call   c00039dd <dir_read>
c00070c6:	85 c0                	test   eax,eax
c00070c8:	75 21                	jne    c00070eb <f_setlabel+0x1b5>
c00070ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070ce:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070d2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070d5:	74 5d                	je     c0007134 <f_setlabel+0x1fe>
c00070d7:	85 db                	test   ebx,ebx
c00070d9:	74 0b                	je     c00070e6 <f_setlabel+0x1b0>
c00070db:	b9 0b 00 00 00       	mov    ecx,0xb
c00070e0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070e4:	eb 70                	jmp    c0007156 <f_setlabel+0x220>
c00070e6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e9:	eb 70                	jmp    c000715b <f_setlabel+0x225>
c00070eb:	83 f8 04             	cmp    eax,0x4
c00070ee:	75 7c                	jne    c000716c <f_setlabel+0x236>
c00070f0:	85 db                	test   ebx,ebx
c00070f2:	0f 84 a3 00 00 00    	je     c000719b <f_setlabel+0x265>
c00070f8:	ba 01 00 00 00       	mov    edx,0x1
c00070fd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007101:	e8 51 ca ff ff       	call   c0003b57 <dir_alloc>
c0007106:	89 c6                	mov    esi,eax
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 85 8b 00 00 00    	jne    c000719b <f_setlabel+0x265>
c0007110:	31 d2                	xor    edx,edx
c0007112:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007116:	b9 20 00 00 00       	mov    ecx,0x20
c000711b:	e8 e5 ab ff ff       	call   c0001d05 <mem_set>
c0007120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007124:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007127:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712b:	75 18                	jne    c0007145 <f_setlabel+0x20f>
c000712d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007130:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007134:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007137:	b9 16 00 00 00       	mov    ecx,0x16
c000713c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007140:	83 c0 02             	add    eax,0x2
c0007143:	eb 9b                	jmp    c00070e0 <f_setlabel+0x1aa>
c0007145:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007149:	b9 0b 00 00 00       	mov    ecx,0xb
c000714e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007156:	e8 95 ab ff ff       	call   c0001cf0 <mem_cpy>
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007163:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007167:	e8 0e d4 ff ff       	call   c000457a <sync_fs>
c000716c:	89 c6                	mov    esi,eax
c000716e:	eb 2b                	jmp    c000719b <f_setlabel+0x265>
c0007170:	83 fb 0a             	cmp    ebx,0xa
c0007173:	0f 87 2f fe ff ff    	ja     c0006fa8 <f_setlabel+0x72>
c0007179:	89 f0                	mov    eax,esi
c000717b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000717f:	43                   	inc    ebx
c0007180:	e9 85 fe ff ff       	jmp    c000700a <f_setlabel+0xd4>
c0007185:	83 fb 09             	cmp    ebx,0x9
c0007188:	0f 87 1a fe ff ff    	ja     c0006fa8 <f_setlabel+0x72>
c000718e:	89 f0                	mov    eax,esi
c0007190:	66 c1 e8 08          	shr    ax,0x8
c0007194:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007198:	43                   	inc    ebx
c0007199:	eb de                	jmp    c0007179 <f_setlabel+0x243>
c000719b:	89 f0                	mov    eax,esi
c000719d:	83 c4 74             	add    esp,0x74
c00071a0:	5b                   	pop    ebx
c00071a1:	5e                   	pop    esi
c00071a2:	c3                   	ret    

c00071a3 <f_forward>:
c00071a3:	55                   	push   ebp
c00071a4:	57                   	push   edi
c00071a5:	56                   	push   esi
c00071a6:	53                   	push   ebx
c00071a7:	83 ec 2c             	sub    esp,0x2c
c00071aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071ae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071bc:	89 d8                	mov    eax,ebx
c00071be:	e8 b1 b1 ff ff       	call   c0002374 <validate>
c00071c3:	89 c5                	mov    ebp,eax
c00071c5:	85 c0                	test   eax,eax
c00071c7:	0f 85 aa 01 00 00    	jne    c0007377 <f_forward+0x1d4>
c00071cd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071d1:	85 ed                	test   ebp,ebp
c00071d3:	0f 85 9e 01 00 00    	jne    c0007377 <f_forward+0x1d4>
c00071d9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071dd:	0f 84 8f 01 00 00    	je     c0007372 <f_forward+0x1cf>
c00071e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071e6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071ec:	bf 00 00 00 00       	mov    edi,0x0
c00071f1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071f4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f8:	89 d1                	mov    ecx,edx
c00071fa:	19 f9                	sbb    ecx,edi
c00071fc:	0f 83 cf 00 00 00    	jae    c00072d1 <f_forward+0x12e>
c0007202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007206:	e9 c6 00 00 00       	jmp    c00072d1 <f_forward+0x12e>
c000720b:	50                   	push   eax
c000720c:	50                   	push   eax
c000720d:	6a 00                	push   0x0
c000720f:	6a 00                	push   0x0
c0007211:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007215:	83 c4 10             	add    esp,0x10
c0007218:	85 c0                	test   eax,eax
c000721a:	0f 84 57 01 00 00    	je     c0007377 <f_forward+0x1d4>
c0007220:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007223:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007227:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000722a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000722e:	89 d7                	mov    edi,edx
c0007230:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007233:	89 c6                	mov    esi,eax
c0007235:	0f ac fe 09          	shrd   esi,edi,0x9
c0007239:	21 ce                	and    esi,ecx
c000723b:	89 c1                	mov    ecx,eax
c000723d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007243:	0f 84 98 00 00 00    	je     c00072e1 <f_forward+0x13e>
c0007249:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000724d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007250:	89 c8                	mov    eax,ecx
c0007252:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007256:	e8 af ac ff ff       	call   c0001f0a <clst2sect>
c000725b:	89 d7                	mov    edi,edx
c000725d:	09 c7                	or     edi,eax
c000725f:	0f 84 9e 00 00 00    	je     c0007303 <f_forward+0x160>
c0007265:	31 ff                	xor    edi,edi
c0007267:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000726a:	01 c6                	add    esi,eax
c000726c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007270:	11 d7                	adc    edi,edx
c0007272:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007275:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007278:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000727c:	39 fa                	cmp    edx,edi
c000727e:	0f 85 a2 00 00 00    	jne    c0007326 <f_forward+0x183>
c0007284:	39 f0                	cmp    eax,esi
c0007286:	0f 85 9a 00 00 00    	jne    c0007326 <f_forward+0x183>
c000728c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000728f:	ba 00 02 00 00       	mov    edx,0x200
c0007294:	25 ff 01 00 00       	and    eax,0x1ff
c0007299:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000729d:	29 c2                	sub    edx,eax
c000729f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072a2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072a5:	39 d1                	cmp    ecx,edx
c00072a7:	76 02                	jbe    c00072ab <f_forward+0x108>
c00072a9:	89 d1                	mov    ecx,edx
c00072ab:	8d 73 50             	lea    esi,[ebx+0x50]
c00072ae:	52                   	push   edx
c00072af:	01 c6                	add    esi,eax
c00072b1:	52                   	push   edx
c00072b2:	51                   	push   ecx
c00072b3:	56                   	push   esi
c00072b4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	85 c0                	test   eax,eax
c00072bd:	74 44                	je     c0007303 <f_forward+0x160>
c00072bf:	31 ff                	xor    edi,edi
c00072c1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072c7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072cb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072cf:	01 07                	add    DWORD PTR [edi],eax
c00072d1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072d6:	0f 85 2f ff ff ff    	jne    c000720b <f_forward+0x68>
c00072dc:	e9 96 00 00 00       	jmp    c0007377 <f_forward+0x1d4>
c00072e1:	85 f6                	test   esi,esi
c00072e3:	0f 85 60 ff ff ff    	jne    c0007249 <f_forward+0xa6>
c00072e9:	89 d7                	mov    edi,edx
c00072eb:	09 c7                	or     edi,eax
c00072ed:	75 05                	jne    c00072f4 <f_forward+0x151>
c00072ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072f2:	eb 0a                	jmp    c00072fe <f_forward+0x15b>
c00072f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072f7:	89 d8                	mov    eax,ebx
c00072f9:	e8 d9 bc ff ff       	call   c0002fd7 <get_fat>
c00072fe:	83 f8 01             	cmp    eax,0x1
c0007301:	77 0b                	ja     c000730e <f_forward+0x16b>
c0007303:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007307:	bd 02 00 00 00       	mov    ebp,0x2
c000730c:	eb 69                	jmp    c0007377 <f_forward+0x1d4>
c000730e:	83 f8 ff             	cmp    eax,0xffffffff
c0007311:	75 0b                	jne    c000731e <f_forward+0x17b>
c0007313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007317:	bd 01 00 00 00       	mov    ebp,0x1
c000731c:	eb 59                	jmp    c0007377 <f_forward+0x1d4>
c000731e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007321:	e9 23 ff ff ff       	jmp    c0007249 <f_forward+0xa6>
c0007326:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000732a:	79 20                	jns    c000734c <f_forward+0x1a9>
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	6a 01                	push   0x1
c0007331:	52                   	push   edx
c0007332:	50                   	push   eax
c0007333:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007337:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000733b:	50                   	push   eax
c000733c:	e8 fb a8 ff ff       	call   c0001c3c <disk_write>
c0007341:	83 c4 20             	add    esp,0x20
c0007344:	85 c0                	test   eax,eax
c0007346:	75 cb                	jne    c0007313 <f_forward+0x170>
c0007348:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000734c:	83 ec 0c             	sub    esp,0xc
c000734f:	6a 01                	push   0x1
c0007351:	57                   	push   edi
c0007352:	56                   	push   esi
c0007353:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007357:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000735b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000735f:	50                   	push   eax
c0007360:	e8 c1 a8 ff ff       	call   c0001c26 <disk_read>
c0007365:	83 c4 20             	add    esp,0x20
c0007368:	85 c0                	test   eax,eax
c000736a:	0f 84 1c ff ff ff    	je     c000728c <f_forward+0xe9>
c0007370:	eb a1                	jmp    c0007313 <f_forward+0x170>
c0007372:	bd 07 00 00 00       	mov    ebp,0x7
c0007377:	83 c4 2c             	add    esp,0x2c
c000737a:	89 e8                	mov    eax,ebp
c000737c:	5b                   	pop    ebx
c000737d:	5e                   	pop    esi
c000737e:	5f                   	pop    edi
c000737f:	5d                   	pop    ebp
c0007380:	c3                   	ret    

c0007381 <f_mkfs>:
c0007381:	55                   	push   ebp
c0007382:	57                   	push   edi
c0007383:	56                   	push   esi
c0007384:	53                   	push   ebx
c0007385:	bb 0b 00 00 00       	mov    ebx,0xb
c000738a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007390:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007397:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000739e:	e8 b0 ae ff ff       	call   c0002253 <get_ldnumber>
c00073a3:	85 c0                	test   eax,eax
c00073a5:	0f 88 ec 10 00 00    	js     c0008497 <f_mkfs+0x1116>
c00073ab:	8b 14 85 c0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1240]
c00073b2:	85 d2                	test   edx,edx
c00073b4:	74 03                	je     c00073b9 <f_mkfs+0x38>
c00073b6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b9:	85 f6                	test   esi,esi
c00073bb:	75 05                	jne    c00073c2 <f_mkfs+0x41>
c00073bd:	be 60 9c 02 c0       	mov    esi,0xc0029c60
c00073c2:	83 ec 0c             	sub    esp,0xc
c00073c5:	0f b6 c0             	movzx  eax,al
c00073c8:	bb 03 00 00 00       	mov    ebx,0x3
c00073cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073d5:	e8 49 a8 ff ff       	call   c0001c23 <disk_initialize>
c00073da:	83 c4 10             	add    esp,0x10
c00073dd:	a8 01                	test   al,0x1
c00073df:	0f 85 b2 10 00 00    	jne    c0008497 <f_mkfs+0x1116>
c00073e5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073ea:	a8 04                	test   al,0x4
c00073ec:	0f 85 a5 10 00 00    	jne    c0008497 <f_mkfs+0x1116>
c00073f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073f5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f9:	85 c0                	test   eax,eax
c00073fb:	75 20                	jne    c000741d <f_mkfs+0x9c>
c00073fd:	51                   	push   ecx
c00073fe:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007402:	50                   	push   eax
c0007403:	6a 03                	push   0x3
c0007405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007409:	e8 44 a8 ff ff       	call   c0001c52 <disk_ioctl>
c000740e:	83 c4 10             	add    esp,0x10
c0007411:	85 c0                	test   eax,eax
c0007413:	74 08                	je     c000741d <f_mkfs+0x9c>
c0007415:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000741d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007421:	8d 42 ff             	lea    eax,[edx-0x1]
c0007424:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007429:	77 04                	ja     c000742f <f_mkfs+0xae>
c000742b:	85 c2                	test   edx,eax
c000742d:	74 08                	je     c0007437 <f_mkfs+0xb6>
c000742f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007437:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000743a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000743e:	48                   	dec    eax
c000743f:	3c 01                	cmp    al,0x1
c0007441:	76 05                	jbe    c0007448 <f_mkfs+0xc7>
c0007443:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007448:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000744b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000744f:	48                   	dec    eax
c0007450:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007455:	77 07                	ja     c000745e <f_mkfs+0xdd>
c0007457:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000745c:	74 08                	je     c0007466 <f_mkfs+0xe5>
c000745e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007466:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007469:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000746f:	77 07                	ja     c0007478 <f_mkfs+0xf7>
c0007471:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007474:	85 d8                	test   eax,ebx
c0007476:	74 02                	je     c000747a <f_mkfs+0xf9>
c0007478:	31 db                	xor    ebx,ebx
c000747a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007485:	77 0a                	ja     c0007491 <f_mkfs+0x110>
c0007487:	bb 11 00 00 00       	mov    ebx,0x11
c000748c:	e9 06 10 00 00       	jmp    c0008497 <f_mkfs+0x1116>
c0007491:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007498:	8b 36                	mov    esi,DWORD PTR [esi]
c000749a:	85 ed                	test   ebp,ebp
c000749c:	75 1e                	jne    c00074bc <f_mkfs+0x13b>
c000749e:	83 ec 0c             	sub    esp,0xc
c00074a1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074ad:	50                   	push   eax
c00074ae:	e8 f1 0f 00 00       	call   c00084a4 <ff_memalloc>
c00074b3:	83 c4 10             	add    esp,0x10
c00074b6:	89 c5                	mov    ebp,eax
c00074b8:	85 c0                	test   eax,eax
c00074ba:	74 cb                	je     c0007487 <f_mkfs+0x106>
c00074bc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074c4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074cc:	52                   	push   edx
c00074cd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074d1:	50                   	push   eax
c00074d2:	6a 01                	push   0x1
c00074d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d8:	e8 75 a7 ff ff       	call   c0001c52 <disk_ioctl>
c00074dd:	83 c4 10             	add    esp,0x10
c00074e0:	85 c0                	test   eax,eax
c00074e2:	0f 85 4a 0f 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c00074e8:	89 f1                	mov    ecx,esi
c00074ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074f2:	83 e1 0f             	and    ecx,0xf
c00074f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074fd:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007501:	83 e6 08             	and    esi,0x8
c0007504:	75 56                	jne    c000755c <f_mkfs+0x1db>
c0007506:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000750a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000750e:	83 ff 00             	cmp    edi,0x0
c0007511:	76 20                	jbe    c0007533 <f_mkfs+0x1b2>
c0007513:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007518:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007520:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007526:	83 d7 ff             	adc    edi,0xffffffff
c0007529:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000752d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007531:	eb 21                	jmp    c0007554 <f_mkfs+0x1d3>
c0007533:	ba 3f 00 00 00       	mov    edx,0x3f
c0007538:	39 f2                	cmp    edx,esi
c000753a:	19 f8                	sbb    eax,edi
c000753c:	73 1e                	jae    c000755c <f_mkfs+0x1db>
c000753e:	83 c6 c1             	add    esi,0xffffffc1
c0007541:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007549:	83 d7 ff             	adc    edi,0xffffffff
c000754c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007550:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007554:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000755c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007560:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007564:	89 04 24             	mov    DWORD PTR [esp],eax
c0007567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000756b:	31 c0                	xor    eax,eax
c000756d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007572:	89 c7                	mov    edi,eax
c0007574:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007577:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000757b:	0f 83 c5 0a 00 00    	jae    c0008046 <f_mkfs+0xcc5>
c0007581:	89 df                	mov    edi,ebx
c0007583:	c1 ef 09             	shr    edi,0x9
c0007586:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000758a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007591:	c1 ef 09             	shr    edi,0x9
c0007594:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007599:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000759d:	74 29                	je     c00075c8 <f_mkfs+0x247>
c000759f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075a5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075aa:	0f 97 c2             	seta   dl
c00075ad:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075b0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075b4:	0f 92 c0             	setb   al
c00075b7:	08 c2                	or     dl,al
c00075b9:	75 5b                	jne    c0007616 <f_mkfs+0x295>
c00075bb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075bf:	83 e0 07             	and    eax,0x7
c00075c2:	3c 04                	cmp    al,0x4
c00075c4:	74 50                	je     c0007616 <f_mkfs+0x295>
c00075c6:	eb 1b                	jmp    c00075e3 <f_mkfs+0x262>
c00075c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075cd:	0f 87 73 0a 00 00    	ja     c0008046 <f_mkfs+0xcc5>
c00075d3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d9:	76 08                	jbe    c00075e3 <f_mkfs+0x262>
c00075db:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075e3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075e7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075eb:	83 e0 01             	and    eax,0x1
c00075ee:	80 e1 02             	and    cl,0x2
c00075f1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075f5:	74 0d                	je     c0007604 <f_mkfs+0x283>
c00075f7:	84 c0                	test   al,al
c00075f9:	0f 84 53 09 00 00    	je     c0007f52 <f_mkfs+0xbd1>
c00075ff:	e9 12 08 00 00       	jmp    c0007e16 <f_mkfs+0xa95>
c0007604:	bb 13 00 00 00       	mov    ebx,0x13
c0007609:	84 c0                	test   al,al
c000760b:	0f 85 05 08 00 00    	jne    c0007e16 <f_mkfs+0xa95>
c0007611:	e9 39 0e 00 00       	jmp    c000844f <f_mkfs+0x10ce>
c0007616:	31 c0                	xor    eax,eax
c0007618:	ba ff 0f 00 00       	mov    edx,0xfff
c000761d:	89 c7                	mov    edi,eax
c000761f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007622:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007626:	0f 83 1a 0a 00 00    	jae    c0008046 <f_mkfs+0xcc5>
c000762c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007632:	77 39                	ja     c000766d <f_mkfs+0x2ec>
c0007634:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007639:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007641:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007644:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007648:	73 08                	jae    c0007652 <f_mkfs+0x2d1>
c000764a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007652:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007657:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000765a:	b8 00 00 00 00       	mov    eax,0x0
c000765f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007663:	73 08                	jae    c000766d <f_mkfs+0x2ec>
c0007665:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000766d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007671:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007675:	83 c0 20             	add    eax,0x20
c0007678:	83 d2 00             	adc    edx,0x0
c000767b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000767f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007683:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007687:	31 d2                	xor    edx,edx
c0007689:	31 ff                	xor    edi,edi
c000768b:	52                   	push   edx
c000768c:	89 fb                	mov    ebx,edi
c000768e:	50                   	push   eax
c000768f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007693:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007697:	e8 08 fb 01 00       	call   c00271a4 <__udivdi3>
c000769c:	83 c4 10             	add    esp,0x10
c000769f:	c1 e0 02             	shl    eax,0x2
c00076a2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076a6:	05 07 02 00 00       	add    eax,0x207
c00076ab:	89 f1                	mov    ecx,esi
c00076ad:	c1 e8 09             	shr    eax,0x9
c00076b0:	83 c1 ff             	add    ecx,0xffffffff
c00076b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076b7:	83 d3 ff             	adc    ebx,0xffffffff
c00076ba:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076be:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	01 c8                	add    eax,ecx
c00076c6:	11 da                	adc    edx,ebx
c00076c8:	89 c1                	mov    ecx,eax
c00076ca:	f7 de                	neg    esi
c00076cc:	89 d0                	mov    eax,edx
c00076ce:	83 d7 00             	adc    edi,0x0
c00076d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076d5:	f7 df                	neg    edi
c00076d7:	21 f1                	and    ecx,esi
c00076d9:	21 f8                	and    eax,edi
c00076db:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076eb:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076f2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076f6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076fa:	89 df                	mov    edi,ebx
c00076fc:	d1 ea                	shr    edx,1
c00076fe:	39 c1                	cmp    ecx,eax
c0007700:	19 d7                	sbb    edi,edx
c0007702:	0f 83 3e 09 00 00    	jae    c0008046 <f_mkfs+0xcc5>
c0007708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000770c:	31 d2                	xor    edx,edx
c000770e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007712:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007716:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000771a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000771d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007721:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007725:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007729:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000772d:	83 f8 0f             	cmp    eax,0xf
c0007730:	0f 86 10 09 00 00    	jbe    c0008046 <f_mkfs+0xcc5>
c0007736:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000773e:	0f 87 02 09 00 00    	ja     c0008046 <f_mkfs+0xcc5>
c0007744:	31 d2                	xor    edx,edx
c0007746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000774a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007752:	83 c0 07             	add    eax,0x7
c0007755:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000775d:	c1 e8 03             	shr    eax,0x3
c0007760:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007767:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000776b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000776f:	c1 e0 09             	shl    eax,0x9
c0007772:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007776:	48                   	dec    eax
c0007777:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000777b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000777f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007783:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007787:	31 d2                	xor    edx,edx
c0007789:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000778d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007798:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000779d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077a5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077ad:	31 ff                	xor    edi,edi
c00077af:	31 f6                	xor    esi,esi
c00077b1:	31 db                	xor    ebx,ebx
c00077b3:	85 ff                	test   edi,edi
c00077b5:	74 05                	je     c00077bc <f_mkfs+0x43b>
c00077b7:	4f                   	dec    edi
c00077b8:	74 44                	je     c00077fe <f_mkfs+0x47d>
c00077ba:	eb 4f                	jmp    c000780b <f_mkfs+0x48a>
c00077bc:	83 ec 0c             	sub    esp,0xc
c00077bf:	0f b7 c3             	movzx  eax,bx
c00077c2:	50                   	push   eax
c00077c3:	e8 05 0e 00 00       	call   c00085cd <ff_wtoupper>
c00077c8:	83 c4 10             	add    esp,0x10
c00077cb:	89 c1                	mov    ecx,eax
c00077cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077d0:	66 39 c3             	cmp    bx,ax
c00077d3:	75 3e                	jne    c0007813 <f_mkfs+0x492>
c00077d5:	be 01 00 00 00       	mov    esi,0x1
c00077da:	89 df                	mov    edi,ebx
c00077dc:	66 01 f7             	add    di,si
c00077df:	75 07                	jne    c00077e8 <f_mkfs+0x467>
c00077e1:	83 fe 7f             	cmp    esi,0x7f
c00077e4:	77 31                	ja     c0007817 <f_mkfs+0x496>
c00077e6:	eb 16                	jmp    c00077fe <f_mkfs+0x47d>
c00077e8:	83 ec 0c             	sub    esp,0xc
c00077eb:	0f b7 ff             	movzx  edi,di
c00077ee:	57                   	push   edi
c00077ef:	e8 d9 0d 00 00       	call   c00085cd <ff_wtoupper>
c00077f4:	83 c4 10             	add    esp,0x10
c00077f7:	39 c7                	cmp    edi,eax
c00077f9:	75 e6                	jne    c00077e1 <f_mkfs+0x460>
c00077fb:	46                   	inc    esi
c00077fc:	eb dc                	jmp    c00077da <f_mkfs+0x459>
c00077fe:	31 c0                	xor    eax,eax
c0007800:	89 d9                	mov    ecx,ebx
c0007802:	4e                   	dec    esi
c0007803:	0f 95 c0             	setne  al
c0007806:	43                   	inc    ebx
c0007807:	89 c7                	mov    edi,eax
c0007809:	eb 14                	jmp    c000781f <f_mkfs+0x49e>
c000780b:	89 f1                	mov    ecx,esi
c000780d:	01 f3                	add    ebx,esi
c000780f:	31 ff                	xor    edi,edi
c0007811:	eb 0c                	jmp    c000781f <f_mkfs+0x49e>
c0007813:	89 d3                	mov    ebx,edx
c0007815:	eb 08                	jmp    c000781f <f_mkfs+0x49e>
c0007817:	bf 02 00 00 00       	mov    edi,0x2
c000781c:	83 c9 ff             	or     ecx,0xffffffff
c000781f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007823:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007826:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000782a:	0f b6 c1             	movzx  eax,cl
c000782d:	e8 3a a9 ff ff       	call   c000216c <xsum32>
c0007832:	66 c1 e9 08          	shr    cx,0x8
c0007836:	89 c2                	mov    edx,eax
c0007838:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000783f:	0f b7 c1             	movzx  eax,cx
c0007842:	e8 25 a9 ff ff       	call   c000216c <xsum32>
c0007847:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000784c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007850:	66 85 db             	test   bx,bx
c0007853:	74 1f                	je     c0007874 <f_mkfs+0x4f3>
c0007855:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007858:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000785f:	83 c0 02             	add    eax,0x2
c0007862:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007868:	39 c2                	cmp    edx,eax
c000786a:	74 08                	je     c0007874 <f_mkfs+0x4f3>
c000786c:	89 04 24             	mov    DWORD PTR [esp],eax
c000786f:	e9 3f ff ff ff       	jmp    c00077b3 <f_mkfs+0x432>
c0007874:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007877:	83 ec 0c             	sub    esp,0xc
c000787a:	05 01 02 00 00       	add    eax,0x201
c000787f:	c1 e8 09             	shr    eax,0x9
c0007882:	50                   	push   eax
c0007883:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007887:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000788b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000788f:	55                   	push   ebp
c0007890:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007894:	e8 a3 a3 ff ff       	call   c0001c3c <disk_write>
c0007899:	83 c4 20             	add    esp,0x20
c000789c:	85 c0                	test   eax,eax
c000789e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078a1:	0f 85 8b 0b 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c00078a7:	89 d0                	mov    eax,edx
c00078a9:	31 d2                	xor    edx,edx
c00078ab:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078af:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078b3:	66 85 db             	test   bx,bx
c00078b6:	74 04                	je     c00078bc <f_mkfs+0x53b>
c00078b8:	31 c0                	xor    eax,eax
c00078ba:	eb b0                	jmp    c000786c <f_mkfs+0x4eb>
c00078bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078c0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078c4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078ce:	31 d2                	xor    edx,edx
c00078d0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078db:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078df:	c1 eb 09             	shr    ebx,0x9
c00078e2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078ed:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f9:	8d 70 01             	lea    esi,[eax+0x1]
c00078fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007900:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007904:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000790b:	31 d2                	xor    edx,edx
c000790d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007912:	89 04 24             	mov    DWORD PTR [esp],eax
c0007915:	89 c1                	mov    ecx,eax
c0007917:	89 e8                	mov    eax,ebp
c0007919:	e8 e7 a3 ff ff       	call   c0001d05 <mem_set>
c000791e:	31 c0                	xor    eax,eax
c0007920:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007923:	76 10                	jbe    c0007935 <f_mkfs+0x5b4>
c0007925:	83 fe 07             	cmp    esi,0x7
c0007928:	76 0b                	jbe    c0007935 <f_mkfs+0x5b4>
c000792a:	40                   	inc    eax
c000792b:	83 ee 08             	sub    esi,0x8
c000792e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007933:	eb eb                	jmp    c0007920 <f_mkfs+0x59f>
c0007935:	b2 01                	mov    dl,0x1
c0007937:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000793b:	85 f6                	test   esi,esi
c000793d:	74 0c                	je     c000794b <f_mkfs+0x5ca>
c000793f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007942:	76 07                	jbe    c000794b <f_mkfs+0x5ca>
c0007944:	08 11                	or     BYTE PTR [ecx],dl
c0007946:	4e                   	dec    esi
c0007947:	d1 e2                	shl    edx,1
c0007949:	eb f0                	jmp    c000793b <f_mkfs+0x5ba>
c000794b:	89 df                	mov    edi,ebx
c000794d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007951:	76 04                	jbe    c0007957 <f_mkfs+0x5d6>
c0007953:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007957:	83 ec 0c             	sub    esp,0xc
c000795a:	57                   	push   edi
c000795b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007963:	55                   	push   ebp
c0007964:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007968:	e8 cf a2 ff ff       	call   c0001c3c <disk_write>
c000796d:	83 c4 20             	add    esp,0x20
c0007970:	85 c0                	test   eax,eax
c0007972:	0f 85 ba 0a 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007978:	31 d2                	xor    edx,edx
c000797a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000797e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007982:	29 fb                	sub    ebx,edi
c0007984:	0f 85 7a ff ff ff    	jne    c0007904 <f_mkfs+0x583>
c000798a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000798e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007996:	31 f6                	xor    esi,esi
c0007998:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000799c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799f:	31 d2                	xor    edx,edx
c00079a1:	89 e8                	mov    eax,ebp
c00079a3:	e8 5d a3 ff ff       	call   c0001d05 <mem_set>
c00079a8:	31 c9                	xor    ecx,ecx
c00079aa:	85 db                	test   ebx,ebx
c00079ac:	75 40                	jne    c00079ee <f_mkfs+0x66d>
c00079ae:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079b3:	89 e8                	mov    eax,ebp
c00079b5:	bb 02 00 00 00       	mov    ebx,0x2
c00079ba:	e8 28 a3 ff ff       	call   c0001ce7 <st_dword>
c00079bf:	8d 45 04             	lea    eax,[ebp+0x4]
c00079c2:	83 ca ff             	or     edx,0xffffffff
c00079c5:	e8 1d a3 ff ff       	call   c0001ce7 <st_dword>
c00079ca:	b9 08 00 00 00       	mov    ecx,0x8
c00079cf:	eb 1d                	jmp    c00079ee <f_mkfs+0x66d>
c00079d1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079d4:	76 3b                	jbe    c0007a11 <f_mkfs+0x690>
c00079d6:	43                   	inc    ebx
c00079d7:	83 fe 01             	cmp    esi,0x1
c00079da:	89 da                	mov    edx,ebx
c00079dc:	77 03                	ja     c00079e1 <f_mkfs+0x660>
c00079de:	83 ca ff             	or     edx,0xffffffff
c00079e1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079e5:	4e                   	dec    esi
c00079e6:	e8 fc a2 ff ff       	call   c0001ce7 <st_dword>
c00079eb:	83 c1 04             	add    ecx,0x4
c00079ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079f2:	85 f6                	test   esi,esi
c00079f4:	75 db                	jne    c00079d1 <f_mkfs+0x650>
c00079f6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079fb:	77 14                	ja     c0007a11 <f_mkfs+0x690>
c00079fd:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a01:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a08:	85 f6                	test   esi,esi
c0007a0a:	74 05                	je     c0007a11 <f_mkfs+0x690>
c0007a0c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0f:	77 dd                	ja     c00079ee <f_mkfs+0x66d>
c0007a11:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a15:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a19:	39 cf                	cmp    edi,ecx
c0007a1b:	76 02                	jbe    c0007a1f <f_mkfs+0x69e>
c0007a1d:	89 cf                	mov    edi,ecx
c0007a1f:	83 ec 0c             	sub    esp,0xc
c0007a22:	57                   	push   edi
c0007a23:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a2b:	55                   	push   ebp
c0007a2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a30:	e8 07 a2 ff ff       	call   c0001c3c <disk_write>
c0007a35:	83 c4 20             	add    esp,0x20
c0007a38:	85 c0                	test   eax,eax
c0007a3a:	0f 85 f2 09 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007a40:	31 d2                	xor    edx,edx
c0007a42:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a46:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a4a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a4e:	0f 85 48 ff ff ff    	jne    c000799c <f_mkfs+0x61b>
c0007a54:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a57:	31 d2                	xor    edx,edx
c0007a59:	89 e8                	mov    eax,ebp
c0007a5b:	31 ff                	xor    edi,edi
c0007a5d:	e8 a3 a2 ff ff       	call   c0001d05 <mem_set>
c0007a62:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a65:	ba 02 00 00 00       	mov    edx,0x2
c0007a6a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a6e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a72:	e8 70 a2 ff ff       	call   c0001ce7 <st_dword>
c0007a77:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a7a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a7e:	e8 64 a2 ff ff       	call   c0001ce7 <st_dword>
c0007a83:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a86:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a8a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a8e:	e8 54 a2 ff ff       	call   c0001ce7 <st_dword>
c0007a93:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a9a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a9e:	83 c2 02             	add    edx,0x2
c0007aa1:	e8 41 a2 ff ff       	call   c0001ce7 <st_dword>
c0007aa6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007ab1:	e8 31 a2 ff ff       	call   c0001ce7 <st_dword>
c0007ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aba:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007abf:	89 c6                	mov    esi,eax
c0007ac1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007acc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ad0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ad3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ad7:	39 cb                	cmp    ebx,ecx
c0007ad9:	76 02                	jbe    c0007add <f_mkfs+0x75c>
c0007adb:	89 cb                	mov    ebx,ecx
c0007add:	83 ec 0c             	sub    esp,0xc
c0007ae0:	53                   	push   ebx
c0007ae1:	57                   	push   edi
c0007ae2:	56                   	push   esi
c0007ae3:	55                   	push   ebp
c0007ae4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae8:	e8 4f a1 ff ff       	call   c0001c3c <disk_write>
c0007aed:	83 c4 20             	add    esp,0x20
c0007af0:	85 c0                	test   eax,eax
c0007af2:	0f 85 3a 09 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007af8:	31 d2                	xor    edx,edx
c0007afa:	b9 00 02 00 00       	mov    ecx,0x200
c0007aff:	89 e8                	mov    eax,ebp
c0007b01:	e8 ff a1 ff ff       	call   c0001d05 <mem_set>
c0007b06:	31 d2                	xor    edx,edx
c0007b08:	01 de                	add    esi,ebx
c0007b0a:	11 d7                	adc    edi,edx
c0007b0c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b0f:	75 bf                	jne    c0007ad0 <f_mkfs+0x74f>
c0007b11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b19:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b21:	b9 00 02 00 00       	mov    ecx,0x200
c0007b26:	31 d2                	xor    edx,edx
c0007b28:	89 e8                	mov    eax,ebp
c0007b2a:	e8 d6 a1 ff ff       	call   c0001d05 <mem_set>
c0007b2f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b34:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 b0 a1 ff ff       	call   c0001cf0 <mem_cpy>
c0007b40:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b47:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b4b:	e8 9a a1 ff ff       	call   c0001cea <st_qword>
c0007b50:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b54:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b57:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b5b:	e8 8a a1 ff ff       	call   c0001cea <st_qword>
c0007b60:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b63:	ba 20 00 00 00       	mov    edx,0x20
c0007b68:	e8 7a a1 ff ff       	call   c0001ce7 <st_dword>
c0007b6d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b75:	e8 6d a1 ff ff       	call   c0001ce7 <st_dword>
c0007b7a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b82:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b86:	e8 5c a1 ff ff       	call   c0001ce7 <st_dword>
c0007b8b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b8e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b92:	e8 50 a1 ff ff       	call   c0001ce7 <st_dword>
c0007b97:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b9b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b9e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ba1:	e8 41 a1 ff ff       	call   c0001ce7 <st_dword>
c0007ba6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007bae:	e8 34 a1 ff ff       	call   c0001ce7 <st_dword>
c0007bb3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bb6:	ba 00 01 00 00       	mov    edx,0x100
c0007bbb:	e8 23 a1 ff ff       	call   c0001ce3 <st_word>
c0007bc0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bc4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc9:	48                   	dec    eax
c0007bca:	74 05                	je     c0007bd1 <f_mkfs+0x850>
c0007bcc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bcf:	eb f8                	jmp    c0007bc9 <f_mkfs+0x848>
c0007bd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bdd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007be1:	74 05                	je     c0007be8 <f_mkfs+0x867>
c0007be3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007be6:	eb f5                	jmp    c0007bdd <f_mkfs+0x85c>
c0007be8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007beb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bf0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bf6:	31 db                	xor    ebx,ebx
c0007bf8:	e8 e6 a0 ff ff       	call   c0001ce3 <st_word>
c0007bfd:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c03:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c0b:	e8 d3 a0 ff ff       	call   c0001ce3 <st_word>
c0007c10:	31 c9                	xor    ecx,ecx
c0007c12:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c15:	83 f8 01             	cmp    eax,0x1
c0007c18:	76 13                	jbe    c0007c2d <f_mkfs+0x8ac>
c0007c1a:	83 f9 70             	cmp    ecx,0x70
c0007c1d:	74 0e                	je     c0007c2d <f_mkfs+0x8ac>
c0007c1f:	89 da                	mov    edx,ebx
c0007c21:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c26:	e8 41 a5 ff ff       	call   c000216c <xsum32>
c0007c2b:	89 c3                	mov    ebx,eax
c0007c2d:	41                   	inc    ecx
c0007c2e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c34:	75 dc                	jne    c0007c12 <f_mkfs+0x891>
c0007c36:	89 f0                	mov    eax,esi
c0007c38:	89 fa                	mov    edx,edi
c0007c3a:	83 c0 01             	add    eax,0x1
c0007c3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c41:	83 d2 00             	adc    edx,0x0
c0007c44:	83 ec 0c             	sub    esp,0xc
c0007c47:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c4b:	6a 01                	push   0x1
c0007c4d:	57                   	push   edi
c0007c4e:	56                   	push   esi
c0007c4f:	55                   	push   ebp
c0007c50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c54:	e8 e3 9f ff ff       	call   c0001c3c <disk_write>
c0007c59:	83 c4 20             	add    esp,0x20
c0007c5c:	85 c0                	test   eax,eax
c0007c5e:	0f 85 ce 07 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007c64:	31 d2                	xor    edx,edx
c0007c66:	b9 00 02 00 00       	mov    ecx,0x200
c0007c6b:	89 e8                	mov    eax,ebp
c0007c6d:	e8 93 a0 ff ff       	call   c0001d05 <mem_set>
c0007c72:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c7a:	e8 64 a0 ff ff       	call   c0001ce3 <st_word>
c0007c7f:	89 f0                	mov    eax,esi
c0007c81:	89 fa                	mov    edx,edi
c0007c83:	83 c0 09             	add    eax,0x9
c0007c86:	83 d2 00             	adc    edx,0x0
c0007c89:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c90:	31 c9                	xor    ecx,ecx
c0007c92:	41                   	inc    ecx
c0007c93:	89 da                	mov    edx,ebx
c0007c95:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c9a:	e8 cd a4 ff ff       	call   c000216c <xsum32>
c0007c9f:	89 c3                	mov    ebx,eax
c0007ca1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ca7:	75 e9                	jne    c0007c92 <f_mkfs+0x911>
c0007ca9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007cad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cb1:	83 c0 01             	add    eax,0x1
c0007cb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb8:	83 d2 00             	adc    edx,0x0
c0007cbb:	83 ec 0c             	sub    esp,0xc
c0007cbe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cc2:	6a 01                	push   0x1
c0007cc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ccc:	55                   	push   ebp
c0007ccd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd1:	e8 66 9f ff ff       	call   c0001c3c <disk_write>
c0007cd6:	83 c4 20             	add    esp,0x20
c0007cd9:	85 c0                	test   eax,eax
c0007cdb:	0f 85 51 07 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007ce1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce9:	75 09                	jne    c0007cf4 <f_mkfs+0x973>
c0007ceb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cee:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cf2:	74 12                	je     c0007d06 <f_mkfs+0x985>
c0007cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d04:	eb 8a                	jmp    c0007c90 <f_mkfs+0x90f>
c0007d06:	31 d2                	xor    edx,edx
c0007d08:	b9 00 02 00 00       	mov    ecx,0x200
c0007d0d:	89 e8                	mov    eax,ebp
c0007d0f:	e8 f1 9f ff ff       	call   c0001d05 <mem_set>
c0007d14:	83 c6 0b             	add    esi,0xb
c0007d17:	83 d7 00             	adc    edi,0x0
c0007d1a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d1e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d22:	31 c9                	xor    ecx,ecx
c0007d24:	41                   	inc    ecx
c0007d25:	89 da                	mov    edx,ebx
c0007d27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d2c:	e8 3b a4 ff ff       	call   c000216c <xsum32>
c0007d31:	89 c3                	mov    ebx,eax
c0007d33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d39:	75 e9                	jne    c0007d24 <f_mkfs+0x9a3>
c0007d3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d42:	83 c6 01             	add    esi,0x1
c0007d45:	83 d7 00             	adc    edi,0x0
c0007d48:	83 ec 0c             	sub    esp,0xc
c0007d4b:	6a 01                	push   0x1
c0007d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d55:	55                   	push   ebp
c0007d56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d5a:	e8 dd 9e ff ff       	call   c0001c3c <disk_write>
c0007d5f:	83 c4 20             	add    esp,0x20
c0007d62:	85 c0                	test   eax,eax
c0007d64:	0f 85 c8 06 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007d6a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d6e:	75 06                	jne    c0007d76 <f_mkfs+0x9f5>
c0007d70:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d74:	74 09                	je     c0007d7f <f_mkfs+0x9fe>
c0007d76:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d79:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d7d:	eb a3                	jmp    c0007d22 <f_mkfs+0x9a1>
c0007d7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d83:	89 da                	mov    edx,ebx
c0007d85:	01 e8                	add    eax,ebp
c0007d87:	e8 5b 9f ff ff       	call   c0001ce7 <st_dword>
c0007d8c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d91:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d99:	75 e4                	jne    c0007d7f <f_mkfs+0x9fe>
c0007d9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d9e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007da2:	83 c6 02             	add    esi,0x2
c0007da5:	83 d7 00             	adc    edi,0x0
c0007da8:	83 ec 0c             	sub    esp,0xc
c0007dab:	6a 01                	push   0x1
c0007dad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007db1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007db5:	55                   	push   ebp
c0007db6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007dba:	e8 7d 9e ff ff       	call   c0001c3c <disk_write>
c0007dbf:	83 c4 20             	add    esp,0x20
c0007dc2:	85 c0                	test   eax,eax
c0007dc4:	0f 85 68 06 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0007dca:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dcf:	74 0d                	je     c0007dde <f_mkfs+0xa5d>
c0007dd1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd9:	e9 43 fd ff ff       	jmp    c0007b21 <f_mkfs+0x7a0>
c0007dde:	b1 07                	mov    cl,0x7
c0007de0:	e9 e3 05 00 00       	jmp    c00083c8 <f_mkfs+0x1047>
c0007de5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dea:	0f 85 4f 02 00 00    	jne    c000803f <f_mkfs+0xcbe>
c0007df0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007df5:	0f 86 22 02 00 00    	jbe    c000801d <f_mkfs+0xc9c>
c0007dfb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e00:	0f 85 81 06 00 00    	jne    c0008487 <f_mkfs+0x1106>
c0007e06:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0d:	83 f8 40             	cmp    eax,0x40
c0007e10:	0f 87 51 06 00 00    	ja     c0008467 <f_mkfs+0x10e6>
c0007e16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e1a:	85 ff                	test   edi,edi
c0007e1c:	75 1c                	jne    c0007e3a <f_mkfs+0xab9>
c0007e1e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e21:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c0007e26:	c1 e9 0c             	shr    ecx,0xc
c0007e29:	bf 01 00 00 00       	mov    edi,0x1
c0007e2e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e31:	66 85 c0             	test   ax,ax
c0007e34:	0f 85 95 01 00 00    	jne    c0007fcf <f_mkfs+0xc4e>
c0007e3a:	31 d2                	xor    edx,edx
c0007e3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e3f:	f7 f7                	div    edi
c0007e41:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e46:	0f 86 95 01 00 00    	jbe    c0007fe1 <f_mkfs+0xc60>
c0007e4c:	83 c0 02             	add    eax,0x2
c0007e4f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e54:	01 c0                	add    eax,eax
c0007e56:	05 ff 01 00 00       	add    eax,0x1ff
c0007e5b:	be 01 00 00 00       	mov    esi,0x1
c0007e60:	c1 e8 09             	shr    eax,0x9
c0007e63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e6b:	c1 e0 05             	shl    eax,0x5
c0007e6e:	c1 e8 09             	shr    eax,0x9
c0007e71:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e75:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e7a:	31 d2                	xor    edx,edx
c0007e7c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e80:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e84:	89 f0                	mov    eax,esi
c0007e86:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e8a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e9a:	31 d2                	xor    edx,edx
c0007e9c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007ea1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ea5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea9:	31 db                	xor    ebx,ebx
c0007eab:	01 c8                	add    eax,ecx
c0007ead:	11 da                	adc    edx,ebx
c0007eaf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eb3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eb7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ebb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ebf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ec3:	f7 da                	neg    edx
c0007ec5:	21 d1                	and    ecx,edx
c0007ec7:	29 d9                	sub    ecx,ebx
c0007ec9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ece:	0f 85 20 01 00 00    	jne    c0007ff4 <f_mkfs+0xc73>
c0007ed4:	31 db                	xor    ebx,ebx
c0007ed6:	01 ce                	add    esi,ecx
c0007ed8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007edc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ee0:	31 d2                	xor    edx,edx
c0007ee2:	89 f8                	mov    eax,edi
c0007ee4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee8:	c1 e0 04             	shl    eax,0x4
c0007eeb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007eef:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ef3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ef7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007efb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007efe:	19 d3                	sbb    ebx,edx
c0007f00:	0f 82 40 01 00 00    	jb     c0008046 <f_mkfs+0xcc5>
c0007f06:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f09:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f0d:	89 c8                	mov    eax,ecx
c0007f0f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f14:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f18:	29 f0                	sub    eax,esi
c0007f1a:	29 d0                	sub    eax,edx
c0007f1c:	31 d2                	xor    edx,edx
c0007f1e:	f7 f7                	div    edi
c0007f20:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f25:	89 c3                	mov    ebx,eax
c0007f27:	0f 85 b8 fe ff ff    	jne    c0007de5 <f_mkfs+0xa64>
c0007f2d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f32:	0f 87 1d 01 00 00    	ja     c0008055 <f_mkfs+0xcd4>
c0007f38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f3d:	0f 85 03 01 00 00    	jne    c0008046 <f_mkfs+0xcc5>
c0007f43:	83 ff 01             	cmp    edi,0x1
c0007f46:	0f 86 fa 00 00 00    	jbe    c0008046 <f_mkfs+0xcc5>
c0007f4c:	d1 ef                	shr    edi,1
c0007f4e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f52:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f56:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f59:	85 db                	test   ebx,ebx
c0007f5b:	75 2d                	jne    c0007f8a <f_mkfs+0xc09>
c0007f5d:	89 cb                	mov    ebx,ecx
c0007f5f:	ba 50 9c 02 c0       	mov    edx,0xc0029c50
c0007f64:	c1 eb 11             	shr    ebx,0x11
c0007f67:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f6f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f72:	66 85 c0             	test   ax,ax
c0007f75:	74 11                	je     c0007f88 <f_mkfs+0xc07>
c0007f77:	83 c2 02             	add    edx,0x2
c0007f7a:	39 d8                	cmp    eax,ebx
c0007f7c:	77 0a                	ja     c0007f88 <f_mkfs+0xc07>
c0007f7e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f82:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f86:	eb e7                	jmp    c0007f6f <f_mkfs+0xbee>
c0007f88:	31 db                	xor    ebx,ebx
c0007f8a:	31 d2                	xor    edx,edx
c0007f8c:	89 c8                	mov    eax,ecx
c0007f8e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f92:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f99:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f9e:	c1 ea 09             	shr    edx,0x9
c0007fa1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fa6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007faa:	0f 87 96 00 00 00    	ja     c0008046 <f_mkfs+0xcc5>
c0007fb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fb4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fbc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fc0:	be 20 00 00 00       	mov    esi,0x20
c0007fc5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fca:	e9 a6 fe ff ff       	jmp    c0007e75 <f_mkfs+0xaf4>
c0007fcf:	83 c2 02             	add    edx,0x2
c0007fd2:	39 c8                	cmp    eax,ecx
c0007fd4:	0f 87 60 fe ff ff    	ja     c0007e3a <f_mkfs+0xab9>
c0007fda:	01 ff                	add    edi,edi
c0007fdc:	e9 4d fe ff ff       	jmp    c0007e2e <f_mkfs+0xaad>
c0007fe1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fe4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe9:	40                   	inc    eax
c0007fea:	d1 e8                	shr    eax,1
c0007fec:	83 c0 03             	add    eax,0x3
c0007fef:	e9 62 fe ff ff       	jmp    c0007e56 <f_mkfs+0xad5>
c0007ff4:	31 d2                	xor    edx,edx
c0007ff6:	89 c8                	mov    eax,ecx
c0007ff8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ffc:	85 d2                	test   edx,edx
c0007ffe:	74 0c                	je     c000800c <f_mkfs+0xc8b>
c0008000:	49                   	dec    ecx
c0008001:	46                   	inc    esi
c0008002:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008007:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000800c:	89 c8                	mov    eax,ecx
c000800e:	31 d2                	xor    edx,edx
c0008010:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008014:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008018:	e9 c3 fe ff ff       	jmp    c0007ee0 <f_mkfs+0xb5f>
c000801d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008022:	77 31                	ja     c0008055 <f_mkfs+0xcd4>
c0008024:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008029:	75 1b                	jne    c0008046 <f_mkfs+0xcc5>
c000802b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000802e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008032:	3d 80 00 00 00       	cmp    eax,0x80
c0008037:	0f 86 d9 fd ff ff    	jbe    c0007e16 <f_mkfs+0xa95>
c000803d:	eb 07                	jmp    c0008046 <f_mkfs+0xcc5>
c000803f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008044:	76 0a                	jbe    c0008050 <f_mkfs+0xccf>
c0008046:	bb 0e 00 00 00       	mov    ebx,0xe
c000804b:	e9 ff 03 00 00       	jmp    c000844f <f_mkfs+0x10ce>
c0008050:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008055:	31 d2                	xor    edx,edx
c0008057:	b9 00 02 00 00       	mov    ecx,0x200
c000805c:	89 e8                	mov    eax,ebp
c000805e:	e8 a2 9c ff ff       	call   c0001d05 <mem_set>
c0008063:	b9 0b 00 00 00       	mov    ecx,0xb
c0008068:	ba 62 9d 02 c0       	mov    edx,0xc0029d62
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 7c 9c ff ff       	call   c0001cf0 <mem_cpy>
c0008074:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008077:	ba 00 02 00 00       	mov    edx,0x200
c000807c:	e8 62 9c ff ff       	call   c0001ce3 <st_word>
c0008081:	89 f8                	mov    eax,edi
c0008083:	0f b7 d6             	movzx  edx,si
c0008086:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008089:	8d 45 0e             	lea    eax,[ebp+0xe]
c000808c:	e8 52 9c ff ff       	call   c0001ce3 <st_word>
c0008091:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008095:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000809d:	75 08                	jne    c00080a7 <f_mkfs+0xd26>
c000809f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080a7:	8d 45 11             	lea    eax,[ebp+0x11]
c00080aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080ae:	e8 30 9c ff ff       	call   c0001ce3 <st_word>
c00080b3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080bc:	39 d0                	cmp    eax,edx
c00080be:	b8 00 00 00 00       	mov    eax,0x0
c00080c3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080c7:	72 0a                	jb     c00080d3 <f_mkfs+0xd52>
c00080c9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080cc:	e8 12 9c ff ff       	call   c0001ce3 <st_word>
c00080d1:	eb 08                	jmp    c00080db <f_mkfs+0xd5a>
c00080d3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080d6:	e8 0c 9c ff ff       	call   c0001ce7 <st_dword>
c00080db:	8d 45 18             	lea    eax,[ebp+0x18]
c00080de:	ba 3f 00 00 00       	mov    edx,0x3f
c00080e3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080e7:	e8 f7 9b ff ff       	call   c0001ce3 <st_word>
c00080ec:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080ef:	ba ff 00 00 00       	mov    edx,0xff
c00080f4:	e8 ea 9b ff ff       	call   c0001ce3 <st_word>
c00080f9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008100:	e8 e2 9b ff ff       	call   c0001ce7 <st_dword>
c0008105:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000810a:	75 57                	jne    c0008163 <f_mkfs+0xde2>
c000810c:	8d 45 43             	lea    eax,[ebp+0x43]
c000810f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008114:	e8 ce 9b ff ff       	call   c0001ce7 <st_dword>
c0008119:	8d 45 24             	lea    eax,[ebp+0x24]
c000811c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008120:	e8 c2 9b ff ff       	call   c0001ce7 <st_dword>
c0008125:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008128:	ba 02 00 00 00       	mov    edx,0x2
c000812d:	e8 b5 9b ff ff       	call   c0001ce7 <st_dword>
c0008132:	8d 45 30             	lea    eax,[ebp+0x30]
c0008135:	ba 01 00 00 00       	mov    edx,0x1
c000813a:	e8 a4 9b ff ff       	call   c0001ce3 <st_word>
c000813f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008142:	ba 06 00 00 00       	mov    edx,0x6
c0008147:	e8 97 9b ff ff       	call   c0001ce3 <st_word>
c000814c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008150:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008154:	8d 45 47             	lea    eax,[ebp+0x47]
c0008157:	b9 13 00 00 00       	mov    ecx,0x13
c000815c:	ba 6e 9d 02 c0       	mov    edx,0xc0029d6e
c0008161:	eb 2f                	jmp    c0008192 <f_mkfs+0xe11>
c0008163:	8d 45 27             	lea    eax,[ebp+0x27]
c0008166:	ba 00 00 21 50       	mov    edx,0x50210000
c000816b:	e8 77 9b ff ff       	call   c0001ce7 <st_dword>
c0008170:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008175:	8d 45 16             	lea    eax,[ebp+0x16]
c0008178:	e8 66 9b ff ff       	call   c0001ce3 <st_word>
c000817d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008181:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008185:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008188:	b9 13 00 00 00       	mov    ecx,0x13
c000818d:	ba 82 9d 02 c0       	mov    edx,0xc0029d82
c0008192:	e8 59 9b ff ff       	call   c0001cf0 <mem_cpy>
c0008197:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000819d:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081a2:	89 f0                	mov    eax,esi
c00081a4:	e8 3a 9b ff ff       	call   c0001ce3 <st_word>
c00081a9:	83 ec 0c             	sub    esp,0xc
c00081ac:	6a 01                	push   0x1
c00081ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081b6:	55                   	push   ebp
c00081b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081bb:	e8 7c 9a ff ff       	call   c0001c3c <disk_write>
c00081c0:	83 c4 20             	add    esp,0x20
c00081c3:	85 c0                	test   eax,eax
c00081c5:	0f 85 67 02 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c00081cb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081d0:	0f 85 b7 00 00 00    	jne    c000828d <f_mkfs+0xf0c>
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	6a 01                	push   0x1
c00081db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081e3:	83 c0 06             	add    eax,0x6
c00081e6:	83 d2 00             	adc    edx,0x0
c00081e9:	52                   	push   edx
c00081ea:	50                   	push   eax
c00081eb:	55                   	push   ebp
c00081ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f0:	e8 47 9a ff ff       	call   c0001c3c <disk_write>
c00081f5:	83 c4 20             	add    esp,0x20
c00081f8:	b9 00 02 00 00       	mov    ecx,0x200
c00081fd:	31 d2                	xor    edx,edx
c00081ff:	89 e8                	mov    eax,ebp
c0008201:	e8 ff 9a ff ff       	call   c0001d05 <mem_set>
c0008206:	ba 52 52 61 41       	mov    edx,0x41615252
c000820b:	89 e8                	mov    eax,ebp
c000820d:	e8 d5 9a ff ff       	call   c0001ce7 <st_dword>
c0008212:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008218:	ba 72 72 41 61       	mov    edx,0x61417272
c000821d:	e8 c5 9a ff ff       	call   c0001ce7 <st_dword>
c0008222:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008225:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000822b:	e8 b7 9a ff ff       	call   c0001ce7 <st_dword>
c0008230:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008236:	ba 02 00 00 00       	mov    edx,0x2
c000823b:	e8 a7 9a ff ff       	call   c0001ce7 <st_dword>
c0008240:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008245:	89 f0                	mov    eax,esi
c0008247:	e8 97 9a ff ff       	call   c0001ce3 <st_word>
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	6a 01                	push   0x1
c0008251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008255:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008259:	83 c0 07             	add    eax,0x7
c000825c:	83 d2 00             	adc    edx,0x0
c000825f:	52                   	push   edx
c0008260:	50                   	push   eax
c0008261:	55                   	push   ebp
c0008262:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008266:	e8 d1 99 ff ff       	call   c0001c3c <disk_write>
c000826b:	83 c4 14             	add    esp,0x14
c000826e:	6a 01                	push   0x1
c0008270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008274:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008278:	83 c0 01             	add    eax,0x1
c000827b:	83 d2 00             	adc    edx,0x0
c000827e:	52                   	push   edx
c000827f:	50                   	push   eax
c0008280:	55                   	push   ebp
c0008281:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008285:	e8 b2 99 ff ff       	call   c0001c3c <disk_write>
c000828a:	83 c4 20             	add    esp,0x20
c000828d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008294:	31 d2                	xor    edx,edx
c0008296:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000829c:	31 db                	xor    ebx,ebx
c000829e:	89 e8                	mov    eax,ebp
c00082a0:	e8 60 9a ff ff       	call   c0001d05 <mem_set>
c00082a5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082b1:	0f 94 c3             	sete   bl
c00082b4:	4b                   	dec    ebx
c00082b5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082bb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082c6:	75 21                	jne    c00082e9 <f_mkfs+0xf68>
c00082c8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082cd:	89 e8                	mov    eax,ebp
c00082cf:	e8 13 9a ff ff       	call   c0001ce7 <st_dword>
c00082d4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082d7:	83 ca ff             	or     edx,0xffffffff
c00082da:	e8 08 9a ff ff       	call   c0001ce7 <st_dword>
c00082df:	8d 45 08             	lea    eax,[ebp+0x8]
c00082e2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082e7:	eb 04                	jmp    c00082ed <f_mkfs+0xf6c>
c00082e9:	89 da                	mov    edx,ebx
c00082eb:	89 e8                	mov    eax,ebp
c00082ed:	e8 f5 99 ff ff       	call   c0001ce7 <st_dword>
c00082f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082fa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008302:	39 ce                	cmp    esi,ecx
c0008304:	76 02                	jbe    c0008308 <f_mkfs+0xf87>
c0008306:	89 ce                	mov    esi,ecx
c0008308:	83 ec 0c             	sub    esp,0xc
c000830b:	56                   	push   esi
c000830c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008310:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008314:	55                   	push   ebp
c0008315:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008319:	e8 1e 99 ff ff       	call   c0001c3c <disk_write>
c000831e:	83 c4 20             	add    esp,0x20
c0008321:	85 c0                	test   eax,eax
c0008323:	0f 85 09 01 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0008329:	31 d2                	xor    edx,edx
c000832b:	b9 00 02 00 00       	mov    ecx,0x200
c0008330:	89 e8                	mov    eax,ebp
c0008332:	e8 ce 99 ff ff       	call   c0001d05 <mem_set>
c0008337:	31 d2                	xor    edx,edx
c0008339:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000833d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008341:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008345:	75 b3                	jne    c00082fa <f_mkfs+0xf79>
c0008347:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000834a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008351:	40                   	inc    eax
c0008352:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008356:	0f 87 65 ff ff ff    	ja     c00082c1 <f_mkfs+0xf40>
c000835c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008361:	74 04                	je     c0008367 <f_mkfs+0xfe6>
c0008363:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008367:	89 fb                	mov    ebx,edi
c0008369:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000836d:	76 04                	jbe    c0008373 <f_mkfs+0xff2>
c000836f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008373:	83 ec 0c             	sub    esp,0xc
c0008376:	53                   	push   ebx
c0008377:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000837b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000837f:	55                   	push   ebp
c0008380:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008384:	e8 b3 98 ff ff       	call   c0001c3c <disk_write>
c0008389:	83 c4 20             	add    esp,0x20
c000838c:	85 c0                	test   eax,eax
c000838e:	0f 85 9e 00 00 00    	jne    c0008432 <f_mkfs+0x10b1>
c0008394:	31 d2                	xor    edx,edx
c0008396:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000839a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000839e:	29 df                	sub    edi,ebx
c00083a0:	75 c5                	jne    c0008367 <f_mkfs+0xfe6>
c00083a2:	b1 0c                	mov    cl,0xc
c00083a4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a9:	74 1d                	je     c00083c8 <f_mkfs+0x1047>
c00083ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00083b0:	b1 06                	mov    cl,0x6
c00083b2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083b6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083ba:	72 0c                	jb     c00083c8 <f_mkfs+0x1047>
c00083bc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083c1:	0f 94 c1             	sete   cl
c00083c4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083cd:	75 4c                	jne    c000841b <f_mkfs+0x109a>
c00083cf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083d3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083d7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083de:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083e5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083f0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083fb:	0f b6 c9             	movzx  ecx,cl
c00083fe:	83 ec 0c             	sub    esp,0xc
c0008401:	55                   	push   ebp
c0008402:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000840d:	e8 2f c2 ff ff       	call   c0004641 <create_partition>
c0008412:	83 c4 10             	add    esp,0x10
c0008415:	89 c3                	mov    ebx,eax
c0008417:	85 c0                	test   eax,eax
c0008419:	75 34                	jne    c000844f <f_mkfs+0x10ce>
c000841b:	31 db                	xor    ebx,ebx
c000841d:	50                   	push   eax
c000841e:	6a 00                	push   0x0
c0008420:	6a 00                	push   0x0
c0008422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008426:	e8 27 98 ff ff       	call   c0001c52 <disk_ioctl>
c000842b:	83 c4 10             	add    esp,0x10
c000842e:	85 c0                	test   eax,eax
c0008430:	74 1d                	je     c000844f <f_mkfs+0x10ce>
c0008432:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000843a:	75 0c                	jne    c0008448 <f_mkfs+0x10c7>
c000843c:	83 ec 0c             	sub    esp,0xc
c000843f:	55                   	push   ebp
c0008440:	e8 75 00 00 00       	call   c00084ba <ff_memfree>
c0008445:	83 c4 10             	add    esp,0x10
c0008448:	bb 01 00 00 00       	mov    ebx,0x1
c000844d:	eb 48                	jmp    c0008497 <f_mkfs+0x1116>
c000844f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008457:	75 3e                	jne    c0008497 <f_mkfs+0x1116>
c0008459:	83 ec 0c             	sub    esp,0xc
c000845c:	55                   	push   ebp
c000845d:	e8 58 00 00 00       	call   c00084ba <ff_memfree>
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	eb 30                	jmp    c0008497 <f_mkfs+0x1116>
c0008467:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000846c:	0f 85 eb fa ff ff    	jne    c0007f5d <f_mkfs+0xbdc>
c0008472:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008476:	81 ff 80 00 00 00    	cmp    edi,0x80
c000847c:	0f 86 b8 f9 ff ff    	jbe    c0007e3a <f_mkfs+0xab9>
c0008482:	e9 bf fb ff ff       	jmp    c0008046 <f_mkfs+0xcc5>
c0008487:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000848c:	0f 85 c0 fa ff ff    	jne    c0007f52 <f_mkfs+0xbd1>
c0008492:	e9 af fb ff ff       	jmp    c0008046 <f_mkfs+0xcc5>
c0008497:	81 c4 9c 00 00 00    	add    esp,0x9c
c000849d:	89 d8                	mov    eax,ebx
c000849f:	5b                   	pop    ebx
c00084a0:	5e                   	pop    esi
c00084a1:	5f                   	pop    edi
c00084a2:	5d                   	pop    ebp
c00084a3:	c3                   	ret    

c00084a4 <ff_memalloc>:
c00084a4:	83 ec 0c             	sub    esp,0xc
c00084a7:	83 ec 0c             	sub    esp,0xc
c00084aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ae:	e8 69 74 00 00       	call   c000f91c <malloc>
c00084b3:	83 c4 10             	add    esp,0x10
c00084b6:	83 c4 0c             	add    esp,0xc
c00084b9:	c3                   	ret    

c00084ba <ff_memfree>:
c00084ba:	83 ec 0c             	sub    esp,0xc
c00084bd:	83 ec 0c             	sub    esp,0xc
c00084c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c4:	e8 63 74 00 00       	call   c000f92c <free>
c00084c9:	83 c4 10             	add    esp,0x10
c00084cc:	90                   	nop
c00084cd:	83 c4 0c             	add    esp,0xc
c00084d0:	c3                   	ret    

c00084d1 <ff_uni2oem>:
c00084d1:	83 ec 14             	sub    esp,0x14
c00084d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084dc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e3:	c7 44 24 0c a0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0a0
c00084eb:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084f0:	77 0b                	ja     c00084fd <ff_uni2oem+0x2c>
c00084f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084f6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084fb:	eb 5b                	jmp    c0008558 <ff_uni2oem+0x87>
c00084fd:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008505:	77 51                	ja     c0008558 <ff_uni2oem+0x87>
c0008507:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000850d:	75 49                	jne    c0008558 <ff_uni2oem+0x87>
c000850f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008516:	eb 0b                	jmp    c0008523 <ff_uni2oem+0x52>
c0008518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851d:	40                   	inc    eax
c000851e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008523:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008529:	77 1b                	ja     c0008546 <ff_uni2oem+0x75>
c000852b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008530:	01 c0                	add    eax,eax
c0008532:	89 c2                	mov    edx,eax
c0008534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008538:	01 d0                	add    eax,edx
c000853a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000853d:	0f b7 c0             	movzx  eax,ax
c0008540:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008544:	75 d2                	jne    c0008518 <ff_uni2oem+0x47>
c0008546:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854b:	83 e8 80             	sub    eax,0xffffff80
c000854e:	25 ff 00 00 00       	and    eax,0xff
c0008553:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008558:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000855d:	83 c4 14             	add    esp,0x14
c0008560:	c3                   	ret    

c0008561 <ff_oem2uni>:
c0008561:	83 ec 18             	sub    esp,0x18
c0008564:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000856c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008571:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008575:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000857c:	c7 44 24 10 a0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0a0
c0008584:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000858a:	77 0b                	ja     c0008597 <ff_oem2uni+0x36>
c000858c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008590:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008595:	eb 2d                	jmp    c00085c4 <ff_oem2uni+0x63>
c0008597:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000859d:	75 25                	jne    c00085c4 <ff_oem2uni+0x63>
c000859f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085a6:	77 1c                	ja     c00085c4 <ff_oem2uni+0x63>
c00085a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085ad:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085b2:	01 c0                	add    eax,eax
c00085b4:	89 c2                	mov    edx,eax
c00085b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ba:	01 d0                	add    eax,edx
c00085bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085bf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085c4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c9:	83 c4 18             	add    esp,0x18
c00085cc:	c3                   	ret    

c00085cd <ff_wtoupper>:
c00085cd:	83 ec 10             	sub    esp,0x10
c00085d0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d8:	0f 87 3e 01 00 00    	ja     c000871c <ff_wtoupper+0x14f>
c00085de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085e7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085ee:	77 07                	ja     c00085f7 <ff_wtoupper+0x2a>
c00085f0:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c00085f5:	eb 05                	jmp    c00085fc <ff_wtoupper+0x2f>
c00085f7:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c00085fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008604:	8d 50 02             	lea    edx,[eax+0x2]
c0008607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008613:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008619:	0f 84 f4 00 00 00    	je     c0008713 <ff_wtoupper+0x146>
c000861f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008624:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008629:	0f 82 e4 00 00 00    	jb     c0008713 <ff_wtoupper+0x146>
c000862f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008633:	8d 50 02             	lea    edx,[eax+0x2]
c0008636:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000863a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000863d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008642:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008647:	66 c1 e8 08          	shr    ax,0x8
c000864b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008650:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008657:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000865c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008661:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008666:	01 ca                	add    edx,ecx
c0008668:	39 d0                	cmp    eax,edx
c000866a:	0f 8d 86 00 00 00    	jge    c00086f6 <ff_wtoupper+0x129>
c0008670:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008675:	83 f8 08             	cmp    eax,0x8
c0008678:	0f 87 94 00 00 00    	ja     c0008712 <ff_wtoupper+0x145>
c000867e:	8b 04 85 a0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6260]
c0008685:	ff e0                	jmp    eax
c0008687:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000868c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008691:	29 c2                	sub    edx,eax
c0008693:	89 d0                	mov    eax,edx
c0008695:	01 c0                	add    eax,eax
c0008697:	89 c2                	mov    edx,eax
c0008699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000869d:	01 d0                	add    eax,edx
c000869f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086a2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086a7:	eb 4b                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086a9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086ae:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086b2:	83 e0 01             	and    eax,0x1
c00086b5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086ba:	eb 38                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086c2:	eb 30                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ca:	eb 28                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086d2:	eb 20                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086da:	eb 18                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086dc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086e2:	eb 10                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086e4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086ea:	eb 08                	jmp    c00086f4 <ff_wtoupper+0x127>
c00086ec:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086f3:	90                   	nop
c00086f4:	eb 1c                	jmp    c0008712 <ff_wtoupper+0x145>
c00086f6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086fc:	0f 85 fe fe ff ff    	jne    c0008600 <ff_wtoupper+0x33>
c0008702:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008707:	01 c0                	add    eax,eax
c0008709:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000870d:	e9 ee fe ff ff       	jmp    c0008600 <ff_wtoupper+0x33>
c0008712:	90                   	nop
c0008713:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008718:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000871c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008720:	83 c4 10             	add    esp,0x10
c0008723:	c3                   	ret    

c0008724 <psrc_set_converter>:
c0008724:	56                   	push   esi
c0008725:	89 d6                	mov    esi,edx
c0008727:	53                   	push   ebx
c0008728:	89 c3                	mov    ebx,eax
c000872a:	83 ec 0c             	sub    esp,0xc
c000872d:	52                   	push   edx
c000872e:	50                   	push   eax
c000872f:	e8 6f 55 00 00       	call   c000dca3 <sinc_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 25                	je     c0008760 <psrc_set_converter+0x3c>
c000873b:	50                   	push   eax
c000873c:	50                   	push   eax
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 17 5d 00 00       	call   c000e45b <zoh_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	85 c0                	test   eax,eax
c0008749:	74 15                	je     c0008760 <psrc_set_converter+0x3c>
c000874b:	51                   	push   ecx
c000874c:	51                   	push   ecx
c000874d:	56                   	push   esi
c000874e:	53                   	push   ebx
c000874f:	e8 0f 11 00 00       	call   c0009863 <linear_set_converter>
c0008754:	83 c4 10             	add    esp,0x10
c0008757:	ba 0a 00 00 00       	mov    edx,0xa
c000875c:	85 c0                	test   eax,eax
c000875e:	75 02                	jne    c0008762 <psrc_set_converter+0x3e>
c0008760:	31 d2                	xor    edx,edx
c0008762:	89 d0                	mov    eax,edx
c0008764:	5a                   	pop    edx
c0008765:	5b                   	pop    ebx
c0008766:	5e                   	pop    esi
c0008767:	c3                   	ret    

c0008768 <src_delete>:
c0008768:	53                   	push   ebx
c0008769:	83 ec 08             	sub    esp,0x8
c000876c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008770:	85 db                	test   ebx,ebx
c0008772:	74 29                	je     c000879d <src_delete+0x35>
c0008774:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008777:	85 c0                	test   eax,eax
c0008779:	74 0c                	je     c0008787 <src_delete+0x1f>
c000877b:	83 ec 0c             	sub    esp,0xc
c000877e:	50                   	push   eax
c000877f:	e8 a8 71 00 00       	call   c000f92c <free>
c0008784:	83 c4 10             	add    esp,0x10
c0008787:	50                   	push   eax
c0008788:	6a 3c                	push   0x3c
c000878a:	6a 00                	push   0x0
c000878c:	53                   	push   ebx
c000878d:	e8 f6 7f ff ff       	call   c0000788 <memset>
c0008792:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008795:	e8 92 71 00 00       	call   c000f92c <free>
c000879a:	83 c4 10             	add    esp,0x10
c000879d:	31 c0                	xor    eax,eax
c000879f:	83 c4 08             	add    esp,0x8
c00087a2:	5b                   	pop    ebx
c00087a3:	c3                   	ret    

c00087a4 <src_process>:
c00087a4:	55                   	push   ebp
c00087a5:	57                   	push   edi
c00087a6:	56                   	push   esi
c00087a7:	53                   	push   ebx
c00087a8:	83 ec 1c             	sub    esp,0x1c
c00087ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087b3:	85 ed                	test   ebp,ebp
c00087b5:	0f 84 6f 01 00 00    	je     c000892a <src_process+0x186>
c00087bb:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087bf:	0f 84 6c 01 00 00    	je     c0008931 <src_process+0x18d>
c00087c5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c9:	0f 84 62 01 00 00    	je     c0008931 <src_process+0x18d>
c00087cf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087d6:	0f 85 5c 01 00 00    	jne    c0008938 <src_process+0x194>
c00087dc:	85 db                	test   ebx,ebx
c00087de:	0f 84 5b 01 00 00    	je     c000893f <src_process+0x19b>
c00087e4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087e6:	85 f6                	test   esi,esi
c00087e8:	0f 84 58 01 00 00    	je     c0008946 <src_process+0x1a2>
c00087ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087f1:	85 ff                	test   edi,edi
c00087f3:	0f 84 4d 01 00 00    	je     c0008946 <src_process+0x1a2>
c00087f9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087fc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008803:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008807:	68 00 00 70 3f       	push   0x3f700000
c000880c:	6a 00                	push   0x0
c000880e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008816:	e8 5c 04 02 00       	call   c0028c77 <__ltdf2>
c000881b:	83 c4 10             	add    esp,0x10
c000881e:	85 c0                	test   eax,eax
c0008820:	0f 88 27 01 00 00    	js     c000894d <src_process+0x1a9>
c0008826:	68 00 00 70 40       	push   0x40700000
c000882b:	6a 00                	push   0x0
c000882d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008835:	e8 1f 04 02 00       	call   c0028c59 <__gtdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	0f 8f 08 01 00 00    	jg     c000894d <src_process+0x1a9>
c0008845:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008849:	79 07                	jns    c0008852 <src_process+0xae>
c000884b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008852:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008855:	85 c0                	test   eax,eax
c0008857:	79 50                	jns    c00088a9 <src_process+0x105>
c0008859:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008860:	39 fe                	cmp    esi,edi
c0008862:	72 37                	jb     c000889b <src_process+0xf7>
c0008864:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000886b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008872:	68 00 00 70 3f       	push   0x3f700000
c0008877:	6a 00                	push   0x0
c0008879:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000887c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000887f:	e8 f3 03 02 00       	call   c0028c77 <__ltdf2>
c0008884:	83 c4 10             	add    esp,0x10
c0008887:	85 c0                	test   eax,eax
c0008889:	79 37                	jns    c00088c2 <src_process+0x11e>
c000888b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000888f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008893:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008896:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008899:	eb 27                	jmp    c00088c2 <src_process+0x11e>
c000889b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000889e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a2:	8d 04 86             	lea    eax,[esi+eax*4]
c00088a5:	39 c7                	cmp    edi,eax
c00088a7:	eb 0d                	jmp    c00088b6 <src_process+0x112>
c00088a9:	39 fe                	cmp    esi,edi
c00088ab:	72 ee                	jb     c000889b <src_process+0xf7>
c00088ad:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088b1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088b4:	39 c6                	cmp    esi,eax
c00088b6:	73 ac                	jae    c0008864 <src_process+0xc0>
c00088b8:	b8 10 00 00 00       	mov    eax,0x10
c00088bd:	e9 90 00 00 00       	jmp    c0008952 <src_process+0x1ae>
c00088c2:	83 ec 10             	sub    esp,0x10
c00088c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088cb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088ce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088d1:	e8 a6 fa 01 00       	call   c002837c <__subdf3>
c00088d6:	83 c4 18             	add    esp,0x18
c00088d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088e1:	52                   	push   edx
c00088e2:	50                   	push   eax
c00088e3:	e8 28 05 02 00       	call   c0028e10 <fabs>
c00088e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088f0:	83 c4 10             	add    esp,0x10
c00088f3:	68 af 03 d2 3c       	push   0x3cd203af
c00088f8:	68 16 56 e7 9e       	push   0x9ee75616
c00088fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008905:	e8 6d 03 02 00       	call   c0028c77 <__ltdf2>
c000890a:	83 c4 10             	add    esp,0x10
c000890d:	85 c0                	test   eax,eax
c000890f:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008913:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008917:	79 05                	jns    c000891e <src_process+0x17a>
c0008919:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000891c:	eb 03                	jmp    c0008921 <src_process+0x17d>
c000891e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008921:	83 c4 1c             	add    esp,0x1c
c0008924:	5b                   	pop    ebx
c0008925:	5e                   	pop    esi
c0008926:	5f                   	pop    edi
c0008927:	5d                   	pop    ebp
c0008928:	ff e0                	jmp    eax
c000892a:	b8 02 00 00 00       	mov    eax,0x2
c000892f:	eb 21                	jmp    c0008952 <src_process+0x1ae>
c0008931:	b8 07 00 00 00       	mov    eax,0x7
c0008936:	eb 1a                	jmp    c0008952 <src_process+0x1ae>
c0008938:	b8 12 00 00 00       	mov    eax,0x12
c000893d:	eb 13                	jmp    c0008952 <src_process+0x1ae>
c000893f:	b8 03 00 00 00       	mov    eax,0x3
c0008944:	eb 0c                	jmp    c0008952 <src_process+0x1ae>
c0008946:	b8 04 00 00 00       	mov    eax,0x4
c000894b:	eb 05                	jmp    c0008952 <src_process+0x1ae>
c000894d:	b8 06 00 00 00       	mov    eax,0x6
c0008952:	83 c4 1c             	add    esp,0x1c
c0008955:	5b                   	pop    ebx
c0008956:	5e                   	pop    esi
c0008957:	5f                   	pop    edi
c0008958:	5d                   	pop    ebp
c0008959:	c3                   	ret    

c000895a <src_callback_read>:
c000895a:	55                   	push   ebp
c000895b:	57                   	push   edi
c000895c:	56                   	push   esi
c000895d:	53                   	push   ebx
c000895e:	83 ec 3c             	sub    esp,0x3c
c0008961:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008965:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008969:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000896d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008971:	85 ed                	test   ebp,ebp
c0008973:	0f 8e 52 01 00 00    	jle    c0008acb <src_callback_read+0x171>
c0008979:	85 db                	test   ebx,ebx
c000897b:	0f 84 4a 01 00 00    	je     c0008acb <src_callback_read+0x171>
c0008981:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008988:	74 0c                	je     c0008996 <src_callback_read+0x3c>
c000898a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008991:	e9 35 01 00 00       	jmp    c0008acb <src_callback_read+0x171>
c0008996:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000899a:	75 0c                	jne    c00089a8 <src_callback_read+0x4e>
c000899c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00089a3:	e9 23 01 00 00       	jmp    c0008acb <src_callback_read+0x171>
c00089a8:	51                   	push   ecx
c00089a9:	6a 24                	push   0x24
c00089ab:	6a 00                	push   0x0
c00089ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089b1:	50                   	push   eax
c00089b2:	e8 d1 7d ff ff       	call   c0000788 <memset>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	68 00 00 70 3f       	push   0x3f700000
c00089bf:	6a 00                	push   0x0
c00089c1:	57                   	push   edi
c00089c2:	56                   	push   esi
c00089c3:	e8 af 02 02 00       	call   c0028c77 <__ltdf2>
c00089c8:	83 c4 10             	add    esp,0x10
c00089cb:	85 c0                	test   eax,eax
c00089cd:	78 3e                	js     c0008a0d <src_callback_read+0xb3>
c00089cf:	68 00 00 70 40       	push   0x40700000
c00089d4:	6a 00                	push   0x0
c00089d6:	57                   	push   edi
c00089d7:	56                   	push   esi
c00089d8:	e8 7c 02 02 00       	call   c0028c59 <__gtdf2>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	7f 29                	jg     c0008a0d <src_callback_read+0xb3>
c00089e4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089f0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089f4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089f7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ff:	31 f6                	xor    esi,esi
c0008a01:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a08:	e9 97 00 00 00       	jmp    c0008aa4 <src_callback_read+0x14a>
c0008a0d:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a14:	e9 b2 00 00 00       	jmp    c0008acb <src_callback_read+0x171>
c0008a19:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a21:	52                   	push   edx
c0008a22:	52                   	push   edx
c0008a23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a27:	50                   	push   eax
c0008a28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a2b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a32:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	85 c0                	test   eax,eax
c0008a3f:	75 08                	jne    c0008a49 <src_callback_read+0xef>
c0008a41:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a49:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a50:	50                   	push   eax
c0008a51:	50                   	push   eax
c0008a52:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a56:	50                   	push   eax
c0008a57:	53                   	push   ebx
c0008a58:	e8 47 fd ff ff       	call   c00087a4 <src_process>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a67:	85 c0                	test   eax,eax
c0008a69:	75 49                	jne    c0008ab4 <src_callback_read+0x15a>
c0008a6b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a6f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a72:	89 f9                	mov    ecx,edi
c0008a74:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a78:	0f af ca             	imul   ecx,edx
c0008a7b:	c1 e1 02             	shl    ecx,0x2
c0008a7e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a86:	0f af d1             	imul   edx,ecx
c0008a89:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a8d:	c1 e2 02             	shl    edx,0x2
c0008a90:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a94:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a97:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a9c:	74 12                	je     c0008ab0 <src_callback_read+0x156>
c0008a9e:	39 d5                	cmp    ebp,edx
c0008aa0:	7e 14                	jle    c0008ab6 <src_callback_read+0x15c>
c0008aa2:	89 d6                	mov    esi,edx
c0008aa4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa9:	75 9e                	jne    c0008a49 <src_callback_read+0xef>
c0008aab:	e9 69 ff ff ff       	jmp    c0008a19 <src_callback_read+0xbf>
c0008ab0:	85 c9                	test   ecx,ecx
c0008ab2:	75 ea                	jne    c0008a9e <src_callback_read+0x144>
c0008ab4:	89 f2                	mov    edx,esi
c0008ab6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aba:	85 c0                	test   eax,eax
c0008abc:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008abf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ac3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ac6:	74 05                	je     c0008acd <src_callback_read+0x173>
c0008ac8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008acb:	31 d2                	xor    edx,edx
c0008acd:	83 c4 3c             	add    esp,0x3c
c0008ad0:	89 d0                	mov    eax,edx
c0008ad2:	5b                   	pop    ebx
c0008ad3:	5e                   	pop    esi
c0008ad4:	5f                   	pop    edi
c0008ad5:	5d                   	pop    ebp
c0008ad6:	c3                   	ret    

c0008ad7 <src_set_ratio>:
c0008ad7:	57                   	push   edi
c0008ad8:	ba 02 00 00 00       	mov    edx,0x2
c0008add:	56                   	push   esi
c0008ade:	53                   	push   ebx
c0008adf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ae3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ae7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aeb:	85 db                	test   ebx,ebx
c0008aed:	74 4c                	je     c0008b3b <src_set_ratio+0x64>
c0008aef:	ba 07 00 00 00       	mov    edx,0x7
c0008af4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af8:	74 41                	je     c0008b3b <src_set_ratio+0x64>
c0008afa:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008afe:	74 3b                	je     c0008b3b <src_set_ratio+0x64>
c0008b00:	68 00 00 70 3f       	push   0x3f700000
c0008b05:	6a 00                	push   0x0
c0008b07:	57                   	push   edi
c0008b08:	56                   	push   esi
c0008b09:	e8 69 01 02 00       	call   c0028c77 <__ltdf2>
c0008b0e:	83 c4 10             	add    esp,0x10
c0008b11:	ba 06 00 00 00       	mov    edx,0x6
c0008b16:	85 c0                	test   eax,eax
c0008b18:	78 21                	js     c0008b3b <src_set_ratio+0x64>
c0008b1a:	68 00 00 70 40       	push   0x40700000
c0008b1f:	6a 00                	push   0x0
c0008b21:	57                   	push   edi
c0008b22:	56                   	push   esi
c0008b23:	e8 31 01 02 00       	call   c0028c59 <__gtdf2>
c0008b28:	83 c4 10             	add    esp,0x10
c0008b2b:	ba 06 00 00 00       	mov    edx,0x6
c0008b30:	85 c0                	test   eax,eax
c0008b32:	7f 07                	jg     c0008b3b <src_set_ratio+0x64>
c0008b34:	89 33                	mov    DWORD PTR [ebx],esi
c0008b36:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b39:	31 d2                	xor    edx,edx
c0008b3b:	5b                   	pop    ebx
c0008b3c:	89 d0                	mov    eax,edx
c0008b3e:	5e                   	pop    esi
c0008b3f:	5f                   	pop    edi
c0008b40:	c3                   	ret    

c0008b41 <src_get_channels>:
c0008b41:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b45:	b8 02 00 00 00       	mov    eax,0x2
c0008b4a:	85 d2                	test   edx,edx
c0008b4c:	74 14                	je     c0008b62 <src_get_channels+0x21>
c0008b4e:	b8 07 00 00 00       	mov    eax,0x7
c0008b53:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b57:	74 09                	je     c0008b62 <src_get_channels+0x21>
c0008b59:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b5d:	74 03                	je     c0008b62 <src_get_channels+0x21>
c0008b5f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b62:	c3                   	ret    

c0008b63 <src_reset>:
c0008b63:	53                   	push   ebx
c0008b64:	b8 02 00 00 00       	mov    eax,0x2
c0008b69:	83 ec 08             	sub    esp,0x8
c0008b6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b70:	85 db                	test   ebx,ebx
c0008b72:	74 36                	je     c0008baa <src_reset+0x47>
c0008b74:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b77:	85 c0                	test   eax,eax
c0008b79:	74 09                	je     c0008b84 <src_reset+0x21>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	53                   	push   ebx
c0008b7f:	ff d0                	call   eax
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	31 c0                	xor    eax,eax
c0008b86:	31 d2                	xor    edx,edx
c0008b88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b8b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b8d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b90:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b93:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b9a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008ba1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba8:	31 c0                	xor    eax,eax
c0008baa:	83 c4 08             	add    esp,0x8
c0008bad:	5b                   	pop    ebx
c0008bae:	c3                   	ret    

c0008baf <src_new>:
c0008baf:	57                   	push   edi
c0008bb0:	56                   	push   esi
c0008bb1:	53                   	push   ebx
c0008bb2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bb6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bba:	85 f6                	test   esi,esi
c0008bbc:	74 73                	je     c0008c31 <src_new+0x82>
c0008bbe:	85 ff                	test   edi,edi
c0008bc0:	7f 08                	jg     c0008bca <src_new+0x1b>
c0008bc2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc8:	eb 1e                	jmp    c0008be8 <src_new+0x39>
c0008bca:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bd0:	50                   	push   eax
c0008bd1:	50                   	push   eax
c0008bd2:	6a 3c                	push   0x3c
c0008bd4:	6a 01                	push   0x1
c0008bd6:	e8 71 6d 00 00       	call   c000f94c <calloc>
c0008bdb:	83 c4 10             	add    esp,0x10
c0008bde:	89 c3                	mov    ebx,eax
c0008be0:	85 c0                	test   eax,eax
c0008be2:	75 10                	jne    c0008bf4 <src_new+0x45>
c0008be4:	85 f6                	test   esi,esi
c0008be6:	75 04                	jne    c0008bec <src_new+0x3d>
c0008be8:	31 db                	xor    ebx,ebx
c0008bea:	eb 4b                	jmp    c0008c37 <src_new+0x88>
c0008bec:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bf2:	eb 43                	jmp    c0008c37 <src_new+0x88>
c0008bf4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bf7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c02:	e8 1d fb ff ff       	call   c0008724 <psrc_set_converter>
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 18                	je     c0008c23 <src_new+0x74>
c0008c0b:	85 f6                	test   esi,esi
c0008c0d:	74 06                	je     c0008c15 <src_new+0x66>
c0008c0f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c15:	83 ec 0c             	sub    esp,0xc
c0008c18:	53                   	push   ebx
c0008c19:	31 db                	xor    ebx,ebx
c0008c1b:	e8 0c 6d 00 00       	call   c000f92c <free>
c0008c20:	83 c4 10             	add    esp,0x10
c0008c23:	83 ec 0c             	sub    esp,0xc
c0008c26:	53                   	push   ebx
c0008c27:	e8 37 ff ff ff       	call   c0008b63 <src_reset>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	eb 06                	jmp    c0008c37 <src_new+0x88>
c0008c31:	85 ff                	test   edi,edi
c0008c33:	7f 9b                	jg     c0008bd0 <src_new+0x21>
c0008c35:	eb b1                	jmp    c0008be8 <src_new+0x39>
c0008c37:	89 d8                	mov    eax,ebx
c0008c39:	5b                   	pop    ebx
c0008c3a:	5e                   	pop    esi
c0008c3b:	5f                   	pop    edi
c0008c3c:	c3                   	ret    

c0008c3d <src_callback_new>:
c0008c3d:	56                   	push   esi
c0008c3e:	53                   	push   ebx
c0008c3f:	53                   	push   ebx
c0008c40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c48:	85 f6                	test   esi,esi
c0008c4a:	75 0e                	jne    c0008c5a <src_callback_new+0x1d>
c0008c4c:	31 db                	xor    ebx,ebx
c0008c4e:	85 c0                	test   eax,eax
c0008c50:	74 47                	je     c0008c99 <src_callback_new+0x5c>
c0008c52:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c58:	eb 3f                	jmp    c0008c99 <src_callback_new+0x5c>
c0008c5a:	85 c0                	test   eax,eax
c0008c5c:	74 06                	je     c0008c64 <src_callback_new+0x27>
c0008c5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c64:	51                   	push   ecx
c0008c65:	50                   	push   eax
c0008c66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c6e:	e8 3c ff ff ff       	call   c0008baf <src_new>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	89 c3                	mov    ebx,eax
c0008c78:	85 c0                	test   eax,eax
c0008c7a:	74 1d                	je     c0008c99 <src_callback_new+0x5c>
c0008c7c:	83 ec 0c             	sub    esp,0xc
c0008c7f:	50                   	push   eax
c0008c80:	e8 de fe ff ff       	call   c0008b63 <src_reset>
c0008c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c89:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c90:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c93:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	89 d8                	mov    eax,ebx
c0008c9b:	5a                   	pop    edx
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_get_name>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 14             	sub    esp,0x14
c0008ca3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 d0 4f 00 00       	call   c000dc7d <sinc_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 1d                	jne    c0008cd1 <src_get_name+0x32>
c0008cb4:	83 ec 0c             	sub    esp,0xc
c0008cb7:	53                   	push   ebx
c0008cb8:	e8 80 57 00 00       	call   c000e43d <zoh_get_name>
c0008cbd:	83 c4 10             	add    esp,0x10
c0008cc0:	85 c0                	test   eax,eax
c0008cc2:	75 0d                	jne    c0008cd1 <src_get_name+0x32>
c0008cc4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc8:	83 c4 08             	add    esp,0x8
c0008ccb:	5b                   	pop    ebx
c0008ccc:	e9 74 0b 00 00       	jmp    c0009845 <linear_get_name>
c0008cd1:	83 c4 08             	add    esp,0x8
c0008cd4:	5b                   	pop    ebx
c0008cd5:	c3                   	ret    

c0008cd6 <src_get_description>:
c0008cd6:	53                   	push   ebx
c0008cd7:	83 ec 14             	sub    esp,0x14
c0008cda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cde:	53                   	push   ebx
c0008cdf:	e8 ac 4f 00 00       	call   c000dc90 <sinc_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 1d                	jne    c0008d08 <src_get_description+0x32>
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	53                   	push   ebx
c0008cef:	e8 58 57 00 00       	call   c000e44c <zoh_get_description>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	85 c0                	test   eax,eax
c0008cf9:	75 0d                	jne    c0008d08 <src_get_description+0x32>
c0008cfb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cff:	83 c4 08             	add    esp,0x8
c0008d02:	5b                   	pop    ebx
c0008d03:	e9 4c 0b 00 00       	jmp    c0009854 <linear_get_description>
c0008d08:	83 c4 08             	add    esp,0x8
c0008d0b:	5b                   	pop    ebx
c0008d0c:	c3                   	ret    

c0008d0d <src_get_version>:
c0008d0d:	b8 a0 a1 02 c0       	mov    eax,0xc002a1a0
c0008d12:	c3                   	ret    

c0008d13 <src_is_valid_ratio>:
c0008d13:	83 ec 1c             	sub    esp,0x1c
c0008d16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d26:	68 00 00 70 3f       	push   0x3f700000
c0008d2b:	6a 00                	push   0x0
c0008d2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d35:	e8 3d ff 01 00       	call   c0028c77 <__ltdf2>
c0008d3a:	83 c4 10             	add    esp,0x10
c0008d3d:	31 d2                	xor    edx,edx
c0008d3f:	85 c0                	test   eax,eax
c0008d41:	78 1e                	js     c0008d61 <src_is_valid_ratio+0x4e>
c0008d43:	68 00 00 70 40       	push   0x40700000
c0008d48:	6a 00                	push   0x0
c0008d4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d52:	e8 02 ff 01 00       	call   c0028c59 <__gtdf2>
c0008d57:	31 d2                	xor    edx,edx
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	0f 9e c2             	setle  dl
c0008d61:	89 d0                	mov    eax,edx
c0008d63:	83 c4 1c             	add    esp,0x1c
c0008d66:	c3                   	ret    

c0008d67 <src_error>:
c0008d67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d6b:	31 c0                	xor    eax,eax
c0008d6d:	85 d2                	test   edx,edx
c0008d6f:	74 03                	je     c0008d74 <src_error+0xd>
c0008d71:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d74:	c3                   	ret    

c0008d75 <src_strerror>:
c0008d75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d79:	31 c0                	xor    eax,eax
c0008d7b:	83 fa 17             	cmp    edx,0x17
c0008d7e:	77 07                	ja     c0008d87 <src_strerror+0x12>
c0008d80:	8b 04 95 00 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a00]
c0008d87:	c3                   	ret    

c0008d88 <src_simple>:
c0008d88:	56                   	push   esi
c0008d89:	53                   	push   ebx
c0008d8a:	83 ec 18             	sub    esp,0x18
c0008d8d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d91:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d95:	50                   	push   eax
c0008d96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d9e:	e8 0c fe ff ff       	call   c0008baf <src_new>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	85 c0                	test   eax,eax
c0008da8:	75 06                	jne    c0008db0 <src_simple+0x28>
c0008daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dae:	eb 25                	jmp    c0008dd5 <src_simple+0x4d>
c0008db0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008db7:	89 c3                	mov    ebx,eax
c0008db9:	50                   	push   eax
c0008dba:	50                   	push   eax
c0008dbb:	56                   	push   esi
c0008dbc:	53                   	push   ebx
c0008dbd:	e8 e2 f9 ff ff       	call   c00087a4 <src_process>
c0008dc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc9:	e8 9a f9 ff ff       	call   c0008768 <src_delete>
c0008dce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dd2:	83 c4 10             	add    esp,0x10
c0008dd5:	83 c4 14             	add    esp,0x14
c0008dd8:	5b                   	pop    ebx
c0008dd9:	5e                   	pop    esi
c0008dda:	c3                   	ret    

c0008ddb <src_short_to_float_array>:
c0008ddb:	53                   	push   ebx
c0008ddc:	83 ec 18             	sub    esp,0x18
c0008ddf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008de3:	85 db                	test   ebx,ebx
c0008de5:	74 54                	je     c0008e3b <src_short_to_float_array+0x60>
c0008de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008deb:	4b                   	dec    ebx
c0008dec:	83 ec 0c             	sub    esp,0xc
c0008def:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008df3:	50                   	push   eax
c0008df4:	e8 12 fc 01 00       	call   c0028a0b <__floatsidf>
c0008df9:	83 c4 10             	add    esp,0x10
c0008dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e04:	68 00 00 00 3f       	push   0x3f000000
c0008e09:	6a 00                	push   0x0
c0008e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e13:	e8 90 f5 01 00       	call   c00283a8 <__muldf3>
c0008e18:	59                   	pop    ecx
c0008e19:	59                   	pop    ecx
c0008e1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e2a:	e8 4c fe 01 00       	call   c0028c7b <__truncdfsf2>
c0008e2f:	83 c4 10             	add    esp,0x10
c0008e32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e36:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e39:	eb a8                	jmp    c0008de3 <src_short_to_float_array+0x8>
c0008e3b:	83 c4 18             	add    esp,0x18
c0008e3e:	5b                   	pop    ebx
c0008e3f:	c3                   	ret    

c0008e40 <src_float_to_short_array>:
c0008e40:	56                   	push   esi
c0008e41:	53                   	push   ebx
c0008e42:	83 ec 14             	sub    esp,0x14
c0008e45:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e4d:	85 db                	test   ebx,ebx
c0008e4f:	0f 84 a4 00 00 00    	je     c0008ef9 <src_float_to_short_array+0xb9>
c0008e55:	83 ec 0c             	sub    esp,0xc
c0008e58:	4b                   	dec    ebx
c0008e59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e5d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e60:	e8 3a ff 01 00       	call   c0028d9f <__extendsfdf2>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e70:	68 00 00 e0 41       	push   0x41e00000
c0008e75:	6a 00                	push   0x0
c0008e77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7f:	e8 24 f5 01 00       	call   c00283a8 <__muldf3>
c0008e84:	83 c4 10             	add    esp,0x10
c0008e87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e8f:	68 ff ff df 41       	push   0x41dfffff
c0008e94:	68 00 00 c0 ff       	push   0xffc00000
c0008e99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea1:	e8 cf fd 01 00       	call   c0028c75 <__gedf2>
c0008ea6:	83 c4 10             	add    esp,0x10
c0008ea9:	85 c0                	test   eax,eax
c0008eab:	78 08                	js     c0008eb5 <src_float_to_short_array+0x75>
c0008ead:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eb3:	eb 98                	jmp    c0008e4d <src_float_to_short_array+0xd>
c0008eb5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eba:	6a 00                	push   0x0
c0008ebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ec4:	e8 b0 fd 01 00       	call   c0028c79 <__ledf2>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	85 c0                	test   eax,eax
c0008ece:	7f 0b                	jg     c0008edb <src_float_to_short_array+0x9b>
c0008ed0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ed6:	e9 72 ff ff ff       	jmp    c0008e4d <src_float_to_short_array+0xd>
c0008edb:	50                   	push   eax
c0008edc:	50                   	push   eax
c0008edd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee5:	e8 46 ff 01 00       	call   c0028e30 <lrint>
c0008eea:	83 c4 10             	add    esp,0x10
c0008eed:	c1 f8 10             	sar    eax,0x10
c0008ef0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ef4:	e9 54 ff ff ff       	jmp    c0008e4d <src_float_to_short_array+0xd>
c0008ef9:	83 c4 14             	add    esp,0x14
c0008efc:	5b                   	pop    ebx
c0008efd:	5e                   	pop    esi
c0008efe:	c3                   	ret    

c0008eff <src_int_to_float_array>:
c0008eff:	53                   	push   ebx
c0008f00:	83 ec 18             	sub    esp,0x18
c0008f03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f07:	85 db                	test   ebx,ebx
c0008f09:	74 52                	je     c0008f5d <src_int_to_float_array+0x5e>
c0008f0b:	83 ec 0c             	sub    esp,0xc
c0008f0e:	4b                   	dec    ebx
c0008f0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f16:	e8 f0 fa 01 00       	call   c0028a0b <__floatsidf>
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f26:	68 00 00 00 3e       	push   0x3e000000
c0008f2b:	6a 00                	push   0x0
c0008f2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f35:	e8 6e f4 01 00       	call   c00283a8 <__muldf3>
c0008f3a:	59                   	pop    ecx
c0008f3b:	59                   	pop    ecx
c0008f3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f4c:	e8 2a fd 01 00       	call   c0028c7b <__truncdfsf2>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f58:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f5b:	eb aa                	jmp    c0008f07 <src_int_to_float_array+0x8>
c0008f5d:	83 c4 18             	add    esp,0x18
c0008f60:	5b                   	pop    ebx
c0008f61:	c3                   	ret    

c0008f62 <src_float_to_int_array>:
c0008f62:	56                   	push   esi
c0008f63:	53                   	push   ebx
c0008f64:	83 ec 14             	sub    esp,0x14
c0008f67:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f6b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f6f:	85 db                	test   ebx,ebx
c0008f71:	0f 84 a2 00 00 00    	je     c0009019 <src_float_to_int_array+0xb7>
c0008f77:	83 ec 0c             	sub    esp,0xc
c0008f7a:	4b                   	dec    ebx
c0008f7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f7f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f82:	e8 18 fe 01 00       	call   c0028d9f <__extendsfdf2>
c0008f87:	83 c4 10             	add    esp,0x10
c0008f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f92:	68 00 00 e0 41       	push   0x41e00000
c0008f97:	6a 00                	push   0x0
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa1:	e8 02 f4 01 00       	call   c00283a8 <__muldf3>
c0008fa6:	83 c4 10             	add    esp,0x10
c0008fa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fb1:	68 ff ff df 41       	push   0x41dfffff
c0008fb6:	68 00 00 c0 ff       	push   0xffc00000
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc3:	e8 ad fc 01 00       	call   c0028c75 <__gedf2>
c0008fc8:	83 c4 10             	add    esp,0x10
c0008fcb:	85 c0                	test   eax,eax
c0008fcd:	78 09                	js     c0008fd8 <src_float_to_int_array+0x76>
c0008fcf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fd6:	eb 97                	jmp    c0008f6f <src_float_to_int_array+0xd>
c0008fd8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fdd:	6a 00                	push   0x0
c0008fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe7:	e8 8d fc 01 00       	call   c0028c79 <__ledf2>
c0008fec:	83 c4 10             	add    esp,0x10
c0008fef:	85 c0                	test   eax,eax
c0008ff1:	7f 0c                	jg     c0008fff <src_float_to_int_array+0x9d>
c0008ff3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ffa:	e9 70 ff ff ff       	jmp    c0008f6f <src_float_to_int_array+0xd>
c0008fff:	50                   	push   eax
c0009000:	50                   	push   eax
c0009001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009009:	e8 22 fe 01 00       	call   c0028e30 <lrint>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009014:	e9 56 ff ff ff       	jmp    c0008f6f <src_float_to_int_array+0xd>
c0009019:	83 c4 14             	add    esp,0x14
c000901c:	5b                   	pop    ebx
c000901d:	5e                   	pop    esi
c000901e:	c3                   	ret    

c000901f <linear_vari_process>:
c000901f:	55                   	push   ebp
c0009020:	31 d2                	xor    edx,edx
c0009022:	57                   	push   edi
c0009023:	56                   	push   esi
c0009024:	53                   	push   ebx
c0009025:	83 ec 3c             	sub    esp,0x3c
c0009028:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000902c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009030:	0f 8e d3 07 00 00    	jle    c0009809 <linear_vari_process+0x7ea>
c0009036:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000903a:	ba 05 00 00 00       	mov    edx,0x5
c000903f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009042:	85 db                	test   ebx,ebx
c0009044:	0f 84 bf 07 00 00    	je     c0009809 <linear_vari_process+0x7ea>
c000904a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000904d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009051:	74 19                	je     c000906c <linear_vari_process+0x4d>
c0009053:	31 d2                	xor    edx,edx
c0009055:	39 c2                	cmp    edx,eax
c0009057:	7d 0c                	jge    c0009065 <linear_vari_process+0x46>
c0009059:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000905b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000905e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009062:	42                   	inc    edx
c0009063:	eb f0                	jmp    c0009055 <linear_vari_process+0x36>
c0009065:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000906c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000906f:	0f af d0             	imul   edx,eax
c0009072:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009075:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009079:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009080:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009083:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000908a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000908e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009091:	8b 00                	mov    eax,DWORD PTR [eax]
c0009093:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009097:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000909b:	68 00 00 70 3f       	push   0x3f700000
c00090a0:	6a 00                	push   0x0
c00090a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090aa:	e8 c8 fb 01 00       	call   c0028c77 <__ltdf2>
c00090af:	83 c4 10             	add    esp,0x10
c00090b2:	ba 16 00 00 00       	mov    edx,0x16
c00090b7:	85 c0                	test   eax,eax
c00090b9:	0f 88 4a 07 00 00    	js     c0009809 <linear_vari_process+0x7ea>
c00090bf:	68 00 00 70 40       	push   0x40700000
c00090c4:	6a 00                	push   0x0
c00090c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ce:	e8 86 fb 01 00       	call   c0028c59 <__gtdf2>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	ba 16 00 00 00       	mov    edx,0x16
c00090db:	85 c0                	test   eax,eax
c00090dd:	0f 8f 26 07 00 00    	jg     c0009809 <linear_vari_process+0x7ea>
c00090e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090f5:	68 00 00 f0 3f       	push   0x3ff00000
c00090fa:	6a 00                	push   0x0
c00090fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009104:	e8 6e fb 01 00       	call   c0028c77 <__ltdf2>
c0009109:	83 c4 10             	add    esp,0x10
c000910c:	85 c0                	test   eax,eax
c000910e:	0f 89 89 02 00 00    	jns    c000939d <linear_vari_process+0x37e>
c0009114:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009117:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000911a:	0f 8d 7d 02 00 00    	jge    c000939d <linear_vari_process+0x37e>
c0009120:	83 ec 0c             	sub    esp,0xc
c0009123:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009126:	e8 e0 f8 01 00       	call   c0028a0b <__floatsidf>
c000912b:	83 c4 10             	add    esp,0x10
c000912e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009131:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009135:	68 00 00 f0 3f       	push   0x3ff00000
c000913a:	6a 00                	push   0x0
c000913c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009140:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009144:	e8 e2 eb 01 00       	call   c0027d2b <__adddf3>
c0009149:	83 c4 10             	add    esp,0x10
c000914c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009154:	52                   	push   edx
c0009155:	50                   	push   eax
c0009156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915e:	e8 45 f2 01 00       	call   c00283a8 <__muldf3>
c0009163:	5d                   	pop    ebp
c0009164:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009168:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000916c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000916f:	e8 97 f8 01 00       	call   c0028a0b <__floatsidf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000917b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917f:	52                   	push   edx
c0009180:	50                   	push   eax
c0009181:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009185:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009189:	e8 9d eb 01 00       	call   c0027d2b <__adddf3>
c000918e:	59                   	pop    ecx
c000918f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009193:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009197:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000919a:	e8 6c f8 01 00       	call   c0028a0b <__floatsidf>
c000919f:	83 c4 10             	add    esp,0x10
c00091a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091aa:	52                   	push   edx
c00091ab:	50                   	push   eax
c00091ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b4:	e8 bc fa 01 00       	call   c0028c75 <__gedf2>
c00091b9:	83 c4 10             	add    esp,0x10
c00091bc:	85 c0                	test   eax,eax
c00091be:	0f 89 d9 01 00 00    	jns    c000939d <linear_vari_process+0x37e>
c00091c4:	85 ff                	test   edi,edi
c00091c6:	0f 8e f4 00 00 00    	jle    c00092c0 <linear_vari_process+0x2a1>
c00091cc:	83 ec 10             	sub    esp,0x10
c00091cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091d2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091d5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091dc:	ff 30                	push   DWORD PTR [eax]
c00091de:	e8 99 f1 01 00       	call   c002837c <__subdf3>
c00091e3:	83 c4 18             	add    esp,0x18
c00091e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091ee:	52                   	push   edx
c00091ef:	50                   	push   eax
c00091f0:	e8 1b fc 01 00       	call   c0028e10 <fabs>
c00091f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091fd:	83 c4 10             	add    esp,0x10
c0009200:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009205:	68 23 42 92 0c       	push   0xc924223
c000920a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009212:	e8 42 fa 01 00       	call   c0028c59 <__gtdf2>
c0009217:	83 c4 10             	add    esp,0x10
c000921a:	85 c0                	test   eax,eax
c000921c:	0f 8e 9e 00 00 00    	jle    c00092c0 <linear_vari_process+0x2a1>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009229:	8b 00                	mov    eax,DWORD PTR [eax]
c000922b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000922f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009237:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000923a:	e8 3d f1 01 00       	call   c002837c <__subdf3>
c000923f:	59                   	pop    ecx
c0009240:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009244:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009248:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000924b:	e8 bb f7 01 00       	call   c0028a0b <__floatsidf>
c0009250:	83 c4 10             	add    esp,0x10
c0009253:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009257:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925b:	52                   	push   edx
c000925c:	50                   	push   eax
c000925d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009265:	e8 3e f1 01 00       	call   c00283a8 <__muldf3>
c000926a:	5f                   	pop    edi
c000926b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000926f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009273:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009276:	e8 90 f7 01 00       	call   c0028a0b <__floatsidf>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009282:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009286:	52                   	push   edx
c0009287:	50                   	push   eax
c0009288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009290:	e8 f7 f3 01 00       	call   c002868c <__divdf3>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000929c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b0:	e8 76 ea 01 00       	call   c0027d2b <__adddf3>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092c0:	31 ff                	xor    edi,edi
c00092c2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092c5:	0f 8e 9d 00 00 00    	jle    c0009368 <linear_vari_process+0x349>
c00092cb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092ce:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092d5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092de:	52                   	push   edx
c00092df:	52                   	push   edx
c00092e0:	55                   	push   ebp
c00092e1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092e4:	47                   	inc    edi
c00092e5:	e8 d6 e3 01 00       	call   c00276c0 <__subsf3>
c00092ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ed:	e8 ad fa 01 00       	call   c0028d9f <__extendsfdf2>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009301:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000930d:	e8 96 f0 01 00       	call   c00283a8 <__muldf3>
c0009312:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000931d:	e8 7d fa 01 00       	call   c0028d9f <__extendsfdf2>
c0009322:	83 c4 10             	add    esp,0x10
c0009325:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009329:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000932d:	52                   	push   edx
c000932e:	50                   	push   eax
c000932f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009333:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009337:	e8 ef e9 01 00       	call   c0027d2b <__adddf3>
c000933c:	59                   	pop    ecx
c000933d:	5d                   	pop    ebp
c000933e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009346:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000934a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000934e:	e8 28 f9 01 00       	call   c0028c7b <__truncdfsf2>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009359:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000935d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009360:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009363:	e9 5a ff ff ff       	jmp    c00092c2 <linear_vari_process+0x2a3>
c0009368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000936c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009370:	68 00 00 f0 3f       	push   0x3ff00000
c0009375:	6a 00                	push   0x0
c0009377:	e8 10 f3 01 00       	call   c002868c <__divdf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009382:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000938c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009390:	e8 96 e9 01 00       	call   c0027d2b <__adddf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	e9 50 fd ff ff       	jmp    c00090ed <linear_vari_process+0xce>
c000939d:	50                   	push   eax
c000939e:	50                   	push   eax
c000939f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a7:	e8 84 fa 01 00       	call   c0028e30 <lrint>
c00093ac:	83 ec 0c             	sub    esp,0xc
c00093af:	50                   	push   eax
c00093b0:	e8 56 f6 01 00       	call   c0028a0b <__floatsidf>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	52                   	push   edx
c00093c1:	50                   	push   eax
c00093c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ca:	e8 ad ef 01 00       	call   c002837c <__subdf3>
c00093cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093d7:	83 c4 20             	add    esp,0x20
c00093da:	6a 00                	push   0x0
c00093dc:	6a 00                	push   0x0
c00093de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093e6:	e8 8c f8 01 00       	call   c0028c77 <__ltdf2>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	85 c0                	test   eax,eax
c00093f0:	79 1e                	jns    c0009410 <linear_vari_process+0x3f1>
c00093f2:	68 00 00 f0 3f       	push   0x3ff00000
c00093f7:	6a 00                	push   0x0
c00093f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009401:	e8 25 e9 01 00       	call   c0027d2b <__adddf3>
c0009406:	83 c4 10             	add    esp,0x10
c0009409:	89 04 24             	mov    DWORD PTR [esp],eax
c000940c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009410:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009413:	83 ec 10             	sub    esp,0x10
c0009416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000941a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000941e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009422:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009426:	e8 51 ef 01 00       	call   c002837c <__subdf3>
c000942b:	83 c4 18             	add    esp,0x18
c000942e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009432:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009436:	52                   	push   edx
c0009437:	50                   	push   eax
c0009438:	e8 f3 f9 01 00       	call   c0028e30 <lrint>
c000943d:	83 c4 10             	add    esp,0x10
c0009440:	0f af f8             	imul   edi,eax
c0009443:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009446:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009449:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000944c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000944f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009452:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009456:	0f 8d 13 03 00 00    	jge    c000976f <linear_vari_process+0x750>
c000945c:	83 ec 0c             	sub    esp,0xc
c000945f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009462:	e8 a4 f5 01 00       	call   c0028a0b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000946e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009472:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009476:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000947a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	e8 21 ef 01 00       	call   c00283a8 <__muldf3>
c0009487:	89 3c 24             	mov    DWORD PTR [esp],edi
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	e8 74 f5 01 00       	call   c0028a0b <__floatsidf>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000949e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094a2:	52                   	push   edx
c00094a3:	50                   	push   eax
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ac:	e8 7a e8 01 00       	call   c0027d2b <__adddf3>
c00094b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	e8 4a f5 01 00       	call   c0028a0b <__floatsidf>
c00094c1:	83 c4 10             	add    esp,0x10
c00094c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094cc:	52                   	push   edx
c00094cd:	50                   	push   eax
c00094ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d6:	e8 9c f7 01 00       	call   c0028c77 <__ltdf2>
c00094db:	83 c4 10             	add    esp,0x10
c00094de:	85 c0                	test   eax,eax
c00094e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094e4:	0f 89 85 02 00 00    	jns    c000976f <linear_vari_process+0x750>
c00094ea:	85 c9                	test   ecx,ecx
c00094ec:	0f 8e f5 00 00 00    	jle    c00095e7 <linear_vari_process+0x5c8>
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009502:	ff 30                	push   DWORD PTR [eax]
c0009504:	e8 73 ee 01 00       	call   c002837c <__subdf3>
c0009509:	83 c4 18             	add    esp,0x18
c000950c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009510:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009514:	52                   	push   edx
c0009515:	50                   	push   eax
c0009516:	e8 f5 f8 01 00       	call   c0028e10 <fabs>
c000951b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000951f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009523:	83 c4 10             	add    esp,0x10
c0009526:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000952b:	68 23 42 92 0c       	push   0xc924223
c0009530:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009534:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009538:	e8 1c f7 01 00       	call   c0028c59 <__gtdf2>
c000953d:	83 c4 10             	add    esp,0x10
c0009540:	85 c0                	test   eax,eax
c0009542:	0f 8e 9f 00 00 00    	jle    c00095e7 <linear_vari_process+0x5c8>
c0009548:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000954f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009559:	52                   	push   edx
c000955a:	50                   	push   eax
c000955b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000955e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009561:	e8 16 ee 01 00       	call   c002837c <__subdf3>
c0009566:	5f                   	pop    edi
c0009567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000956b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009572:	e8 94 f4 01 00       	call   c0028a0b <__floatsidf>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009582:	52                   	push   edx
c0009583:	50                   	push   eax
c0009584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958c:	e8 17 ee 01 00       	call   c00283a8 <__muldf3>
c0009591:	5d                   	pop    ebp
c0009592:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009596:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000959a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000959d:	e8 69 f4 01 00       	call   c0028a0b <__floatsidf>
c00095a2:	83 c4 10             	add    esp,0x10
c00095a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ad:	52                   	push   edx
c00095ae:	50                   	push   eax
c00095af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b7:	e8 d0 f0 01 00       	call   c002868c <__divdf3>
c00095bc:	83 c4 10             	add    esp,0x10
c00095bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095d7:	e8 4f e7 01 00       	call   c0027d2b <__adddf3>
c00095dc:	83 c4 10             	add    esp,0x10
c00095df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095e7:	31 ff                	xor    edi,edi
c00095e9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095ec:	39 f8                	cmp    eax,edi
c00095ee:	0f 8e ac 00 00 00    	jle    c00096a0 <linear_vari_process+0x681>
c00095f4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095f6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f9:	29 c1                	sub    ecx,eax
c00095fb:	89 c8                	mov    eax,ecx
c00095fd:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009600:	01 f8                	add    eax,edi
c0009602:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009606:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009609:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000960c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009613:	51                   	push   ecx
c0009614:	01 f8                	add    eax,edi
c0009616:	51                   	push   ecx
c0009617:	47                   	inc    edi
c0009618:	55                   	push   ebp
c0009619:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000961c:	e8 9f e0 01 00       	call   c00276c0 <__subsf3>
c0009621:	89 04 24             	mov    DWORD PTR [esp],eax
c0009624:	e8 76 f7 01 00       	call   c0028d9f <__extendsfdf2>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009634:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009638:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000963c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009640:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009644:	e8 5f ed 01 00       	call   c00283a8 <__muldf3>
c0009649:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000964c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009650:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009654:	e8 46 f7 01 00       	call   c0028d9f <__extendsfdf2>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009660:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009664:	52                   	push   edx
c0009665:	50                   	push   eax
c0009666:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000966a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000966e:	e8 b8 e6 01 00       	call   c0027d2b <__adddf3>
c0009673:	5d                   	pop    ebp
c0009674:	59                   	pop    ecx
c0009675:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009679:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000967d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009681:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009685:	e8 f1 f5 01 00       	call   c0028c7b <__truncdfsf2>
c000968a:	83 c4 10             	add    esp,0x10
c000968d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009691:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009695:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009698:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000969b:	e9 49 ff ff ff       	jmp    c00095e9 <linear_vari_process+0x5ca>
c00096a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a8:	68 00 00 f0 3f       	push   0x3ff00000
c00096ad:	6a 00                	push   0x0
c00096af:	e8 d8 ef 01 00       	call   c002868c <__divdf3>
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096bf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096c3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096cf:	e8 57 e6 01 00       	call   c0027d2b <__adddf3>
c00096d4:	59                   	pop    ecx
c00096d5:	5f                   	pop    edi
c00096d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e6:	e8 45 f7 01 00       	call   c0028e30 <lrint>
c00096eb:	83 ec 0c             	sub    esp,0xc
c00096ee:	50                   	push   eax
c00096ef:	e8 17 f3 01 00       	call   c0028a0b <__floatsidf>
c00096f4:	83 c4 10             	add    esp,0x10
c00096f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ff:	52                   	push   edx
c0009700:	50                   	push   eax
c0009701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009709:	e8 6e ec 01 00       	call   c002837c <__subdf3>
c000970e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009712:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009716:	83 c4 20             	add    esp,0x20
c0009719:	6a 00                	push   0x0
c000971b:	6a 00                	push   0x0
c000971d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009721:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009725:	e8 4d f5 01 00       	call   c0028c77 <__ltdf2>
c000972a:	83 c4 10             	add    esp,0x10
c000972d:	85 c0                	test   eax,eax
c000972f:	79 1e                	jns    c000974f <linear_vari_process+0x730>
c0009731:	68 00 00 f0 3f       	push   0x3ff00000
c0009736:	6a 00                	push   0x0
c0009738:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000973c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009740:	e8 e6 e5 01 00       	call   c0027d2b <__adddf3>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	89 04 24             	mov    DWORD PTR [esp],eax
c000974b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000974f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009752:	83 ec 10             	sub    esp,0x10
c0009755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000975d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009761:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009765:	e8 12 ec 01 00       	call   c002837c <__subdf3>
c000976a:	e9 bc fc ff ff       	jmp    c000942b <linear_vari_process+0x40c>
c000976f:	39 fd                	cmp    ebp,edi
c0009771:	7d 38                	jge    c00097ab <linear_vari_process+0x78c>
c0009773:	83 ec 0c             	sub    esp,0xc
c0009776:	89 f8                	mov    eax,edi
c0009778:	29 e8                	sub    eax,ebp
c000977a:	99                   	cdq    
c000977b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000977e:	50                   	push   eax
c000977f:	e8 87 f2 01 00       	call   c0028a0b <__floatsidf>
c0009784:	83 c4 10             	add    esp,0x10
c0009787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000978b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000978f:	52                   	push   edx
c0009790:	50                   	push   eax
c0009791:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009795:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009799:	e8 8d e5 01 00       	call   c0027d2b <__adddf3>
c000979e:	83 c4 10             	add    esp,0x10
c00097a1:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00097a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00097a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097ab:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097b6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097bf:	85 c0                	test   eax,eax
c00097c1:	7f 29                	jg     c00097ec <linear_vari_process+0x7cd>
c00097c3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097cf:	89 01                	mov    DWORD PTR [ecx],eax
c00097d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097d7:	99                   	cdq    
c00097d8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097e1:	99                   	cdq    
c00097e2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097e5:	31 d2                	xor    edx,edx
c00097e7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097ea:	eb 1d                	jmp    c0009809 <linear_vari_process+0x7ea>
c00097ec:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097ef:	31 d2                	xor    edx,edx
c00097f1:	29 c8                	sub    eax,ecx
c00097f3:	c1 e0 02             	shl    eax,0x2
c00097f6:	39 d1                	cmp    ecx,edx
c00097f8:	7e c9                	jle    c00097c3 <linear_vari_process+0x7a4>
c00097fa:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097fc:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ff:	83 c0 04             	add    eax,0x4
c0009802:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009806:	42                   	inc    edx
c0009807:	eb ed                	jmp    c00097f6 <linear_vari_process+0x7d7>
c0009809:	83 c4 3c             	add    esp,0x3c
c000980c:	89 d0                	mov    eax,edx
c000980e:	5b                   	pop    ebx
c000980f:	5e                   	pop    esi
c0009810:	5f                   	pop    edi
c0009811:	5d                   	pop    ebp
c0009812:	c3                   	ret    

c0009813 <linear_reset>:
c0009813:	83 ec 0c             	sub    esp,0xc
c0009816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000981a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000981d:	85 c0                	test   eax,eax
c000981f:	74 20                	je     c0009841 <linear_reset+0x2e>
c0009821:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009824:	83 c0 1c             	add    eax,0x1c
c0009827:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000982a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009831:	c1 e2 02             	shl    edx,0x2
c0009834:	51                   	push   ecx
c0009835:	52                   	push   edx
c0009836:	6a 00                	push   0x0
c0009838:	50                   	push   eax
c0009839:	e8 4a 6f ff ff       	call   c0000788 <memset>
c000983e:	83 c4 10             	add    esp,0x10
c0009841:	83 c4 0c             	add    esp,0xc
c0009844:	c3                   	ret    

c0009845 <linear_get_name>:
c0009845:	31 c0                	xor    eax,eax
c0009847:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984c:	75 05                	jne    c0009853 <linear_get_name+0xe>
c000984e:	b8 60 a6 02 c0       	mov    eax,0xc002a660
c0009853:	c3                   	ret    

c0009854 <linear_get_description>:
c0009854:	31 c0                	xor    eax,eax
c0009856:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000985b:	75 05                	jne    c0009862 <linear_get_description+0xe>
c000985d:	b8 74 a6 02 c0       	mov    eax,0xc002a674
c0009862:	c3                   	ret    

c0009863 <linear_set_converter>:
c0009863:	53                   	push   ebx
c0009864:	b8 0a 00 00 00       	mov    eax,0xa
c0009869:	83 ec 08             	sub    esp,0x8
c000986c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009870:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009875:	75 6e                	jne    c00098e5 <linear_set_converter+0x82>
c0009877:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000987a:	85 c0                	test   eax,eax
c000987c:	74 13                	je     c0009891 <linear_set_converter+0x2e>
c000987e:	83 ec 0c             	sub    esp,0xc
c0009881:	50                   	push   eax
c0009882:	e8 a5 60 00 00       	call   c000f92c <free>
c0009887:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	50                   	push   eax
c0009892:	50                   	push   eax
c0009893:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009896:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000989d:	50                   	push   eax
c000989e:	6a 01                	push   0x1
c00098a0:	e8 a7 60 00 00       	call   c000f94c <calloc>
c00098a5:	83 c4 10             	add    esp,0x10
c00098a8:	89 c2                	mov    edx,eax
c00098aa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098ad:	85 d2                	test   edx,edx
c00098af:	b8 01 00 00 00       	mov    eax,0x1
c00098b4:	74 2f                	je     c00098e5 <linear_set_converter+0x82>
c00098b6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b9:	83 ec 0c             	sub    esp,0xc
c00098bc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098bf:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098c5:	c7 43 24 1f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000901f
c00098cc:	c7 43 20 1f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000901f
c00098d3:	c7 43 28 13 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009813
c00098da:	53                   	push   ebx
c00098db:	e8 33 ff ff ff       	call   c0009813 <linear_reset>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	31 c0                	xor    eax,eax
c00098e5:	83 c4 08             	add    esp,0x8
c00098e8:	5b                   	pop    ebx
c00098e9:	c3                   	ret    

c00098ea <int_to_fp>:
c00098ea:	c1 e0 0c             	shl    eax,0xc
c00098ed:	c3                   	ret    

c00098ee <fp_to_int>:
c00098ee:	c1 f8 0c             	sar    eax,0xc
c00098f1:	c3                   	ret    

c00098f2 <fp_fraction_part>:
c00098f2:	25 ff 0f 00 00       	and    eax,0xfff
c00098f7:	c3                   	ret    

c00098f8 <fp_to_double>:
c00098f8:	83 ec 1c             	sub    esp,0x1c
c00098fb:	e8 f2 ff ff ff       	call   c00098f2 <fp_fraction_part>
c0009900:	83 ec 0c             	sub    esp,0xc
c0009903:	50                   	push   eax
c0009904:	e8 02 f1 01 00       	call   c0028a0b <__floatsidf>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009914:	68 00 00 30 3f       	push   0x3f300000
c0009919:	6a 00                	push   0x0
c000991b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009923:	e8 80 ea 01 00       	call   c00283a8 <__muldf3>
c0009928:	83 c4 2c             	add    esp,0x2c
c000992b:	c3                   	ret    

c000992c <calc_output_single>:
c000992c:	55                   	push   ebp
c000992d:	57                   	push   edi
c000992e:	56                   	push   esi
c000992f:	89 c6                	mov    esi,eax
c0009931:	53                   	push   ebx
c0009932:	89 d3                	mov    ebx,edx
c0009934:	83 ec 4c             	sub    esp,0x4c
c0009937:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000993b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000993e:	e8 a7 ff ff ff       	call   c00098ea <int_to_fp>
c0009943:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009946:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000994a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000994e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009952:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009955:	99                   	cdq    
c0009956:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000995e:	f7 fb                	idiv   ebx
c0009960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009968:	89 da                	mov    edx,ebx
c000996a:	0f af d0             	imul   edx,eax
c000996d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009971:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009979:	29 c2                	sub    edx,eax
c000997b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000997e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009982:	83 c5 04             	add    ebp,0x4
c0009985:	e8 6e ff ff ff       	call   c00098f8 <fp_to_double>
c000998a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000998e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009996:	e8 53 ff ff ff       	call   c00098ee <fp_to_int>
c000999b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000999e:	52                   	push   edx
c000999f:	52                   	push   edx
c00099a0:	51                   	push   ecx
c00099a1:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00099a5:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a9:	e8 12 dd 01 00       	call   c00276c0 <__subsf3>
c00099ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00099b1:	e8 e9 f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099b6:	83 c4 10             	add    esp,0x10
c00099b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099d1:	e8 d2 e9 01 00       	call   c00283a8 <__muldf3>
c00099d6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099de:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099e5:	e8 b5 f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f5:	52                   	push   edx
c00099f6:	50                   	push   eax
c00099f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ff:	e8 27 e3 01 00       	call   c0027d2b <__adddf3>
c0009a04:	59                   	pop    ecx
c0009a05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a0d:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a13:	e8 87 f3 01 00       	call   c0028d9f <__extendsfdf2>
c0009a18:	83 c4 10             	add    esp,0x10
c0009a1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a23:	52                   	push   edx
c0009a24:	50                   	push   eax
c0009a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2d:	e8 76 e9 01 00       	call   c00283a8 <__muldf3>
c0009a32:	83 c4 10             	add    esp,0x10
c0009a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a3d:	52                   	push   edx
c0009a3e:	50                   	push   eax
c0009a3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a47:	e8 df e2 01 00       	call   c0027d2b <__adddf3>
c0009a4c:	83 c4 10             	add    esp,0x10
c0009a4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a57:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a5b:	0f 89 1d ff ff ff    	jns    c000997e <calc_output_single+0x52>
c0009a61:	89 d9                	mov    ecx,ebx
c0009a63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a67:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a6b:	89 dd                	mov    ebp,ebx
c0009a6d:	29 c8                	sub    eax,ecx
c0009a6f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a77:	99                   	cdq    
c0009a78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a80:	f7 fb                	idiv   ebx
c0009a82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a86:	0f af e8             	imul   ebp,eax
c0009a89:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a8d:	01 cd                	add    ebp,ecx
c0009a8f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a92:	89 e8                	mov    eax,ebp
c0009a94:	83 ee 04             	sub    esi,0x4
c0009a97:	e8 5c fe ff ff       	call   c00098f8 <fp_to_double>
c0009a9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009aa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009aa4:	89 e8                	mov    eax,ebp
c0009aa6:	29 dd                	sub    ebp,ebx
c0009aa8:	e8 41 fe ff ff       	call   c00098ee <fp_to_int>
c0009aad:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009ab0:	52                   	push   edx
c0009ab1:	52                   	push   edx
c0009ab2:	51                   	push   ecx
c0009ab3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ab7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009abb:	e8 00 dc 01 00       	call   c00276c0 <__subsf3>
c0009ac0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ac3:	e8 d7 f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009ac8:	83 c4 10             	add    esp,0x10
c0009acb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009acf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009adb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae3:	e8 c0 e8 01 00       	call   c00283a8 <__muldf3>
c0009ae8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009af0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009af3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009af7:	e8 a3 f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b11:	e8 15 e2 01 00       	call   c0027d2b <__adddf3>
c0009b16:	59                   	pop    ecx
c0009b17:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b1b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b1f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b25:	e8 75 f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009b2a:	83 c4 10             	add    esp,0x10
c0009b2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b31:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b35:	52                   	push   edx
c0009b36:	50                   	push   eax
c0009b37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b3f:	e8 64 e8 01 00       	call   c00283a8 <__muldf3>
c0009b44:	83 c4 10             	add    esp,0x10
c0009b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b4f:	52                   	push   edx
c0009b50:	50                   	push   eax
c0009b51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b59:	e8 cd e1 01 00       	call   c0027d2b <__adddf3>
c0009b5e:	83 c4 10             	add    esp,0x10
c0009b61:	85 ed                	test   ebp,ebp
c0009b63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b67:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b6b:	0f 8f 21 ff ff ff    	jg     c0009a92 <calc_output_single+0x166>
c0009b71:	52                   	push   edx
c0009b72:	50                   	push   eax
c0009b73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b7b:	e8 ab e1 01 00       	call   c0027d2b <__adddf3>
c0009b80:	83 c4 5c             	add    esp,0x5c
c0009b83:	5b                   	pop    ebx
c0009b84:	5e                   	pop    esi
c0009b85:	5f                   	pop    edi
c0009b86:	5d                   	pop    ebp
c0009b87:	c3                   	ret    

c0009b88 <calc_output_stereo>:
c0009b88:	55                   	push   ebp
c0009b89:	89 cd                	mov    ebp,ecx
c0009b8b:	57                   	push   edi
c0009b8c:	56                   	push   esi
c0009b8d:	53                   	push   ebx
c0009b8e:	89 c3                	mov    ebx,eax
c0009b90:	83 ec 6c             	sub    esp,0x6c
c0009b93:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b97:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b9e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009ba5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009bb0:	e8 35 fd ff ff       	call   c00098ea <int_to_fp>
c0009bb5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc9:	29 c8                	sub    eax,ecx
c0009bcb:	99                   	cdq    
c0009bcc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bd4:	0f af d0             	imul   edx,eax
c0009bd7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bda:	31 d2                	xor    edx,edx
c0009bdc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009be0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009be4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009be7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009beb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bf2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bf6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bfe:	29 c1                	sub    ecx,eax
c0009c00:	31 c0                	xor    eax,eax
c0009c02:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009c05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c0d:	83 c7 08             	add    edi,0x8
c0009c10:	e8 e3 fc ff ff       	call   c00098f8 <fp_to_double>
c0009c15:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c19:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c21:	e8 c8 fc ff ff       	call   c00098ee <fp_to_int>
c0009c26:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c29:	52                   	push   edx
c0009c2a:	52                   	push   edx
c0009c2b:	51                   	push   ecx
c0009c2c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c30:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c34:	e8 87 da 01 00       	call   c00276c0 <__subsf3>
c0009c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c3c:	e8 5e f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c41:	83 c4 10             	add    esp,0x10
c0009c44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c58:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c5c:	e8 47 e7 01 00       	call   c00283a8 <__muldf3>
c0009c61:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c69:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c6c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c70:	e8 2a f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c80:	52                   	push   edx
c0009c81:	50                   	push   eax
c0009c82:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c86:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c8a:	e8 9c e0 01 00       	call   c0027d2b <__adddf3>
c0009c8f:	59                   	pop    ecx
c0009c90:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c94:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c98:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c9e:	e8 fc f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009ca3:	83 c4 10             	add    esp,0x10
c0009ca6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009caa:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	e8 e5 e6 01 00       	call   c00283a8 <__muldf3>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cce:	52                   	push   edx
c0009ccf:	50                   	push   eax
c0009cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd8:	e8 4e e0 01 00       	call   c0027d2b <__adddf3>
c0009cdd:	59                   	pop    ecx
c0009cde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ce2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ce6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cec:	e8 ae f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009cf1:	83 c4 10             	add    esp,0x10
c0009cf4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d0c:	e8 97 e6 01 00       	call   c00283a8 <__muldf3>
c0009d11:	83 c4 10             	add    esp,0x10
c0009d14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d18:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d26:	e8 00 e0 01 00       	call   c0027d2b <__adddf3>
c0009d2b:	83 c4 10             	add    esp,0x10
c0009d2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d36:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d3a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d3e:	0f 89 c5 fe ff ff    	jns    c0009c09 <calc_output_stereo+0x81>
c0009d44:	29 e9                	sub    ecx,ebp
c0009d46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d4a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d4e:	29 c8                	sub    eax,ecx
c0009d50:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d58:	99                   	cdq    
c0009d59:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d5d:	31 d2                	xor    edx,edx
c0009d5f:	0f af f8             	imul   edi,eax
c0009d62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d66:	40                   	inc    eax
c0009d67:	01 cf                	add    edi,ecx
c0009d69:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d6e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d72:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d7a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d7d:	31 c0                	xor    eax,eax
c0009d7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d83:	89 f8                	mov    eax,edi
c0009d85:	83 eb 08             	sub    ebx,0x8
c0009d88:	e8 6b fb ff ff       	call   c00098f8 <fp_to_double>
c0009d8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d95:	89 f8                	mov    eax,edi
c0009d97:	e8 52 fb ff ff       	call   c00098ee <fp_to_int>
c0009d9c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d9f:	52                   	push   edx
c0009da0:	52                   	push   edx
c0009da1:	55                   	push   ebp
c0009da2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009da6:	e8 15 d9 01 00       	call   c00276c0 <__subsf3>
c0009dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dae:	e8 ec ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dc6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dce:	e8 d5 e5 01 00       	call   c00283a8 <__muldf3>
c0009dd3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dd6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dda:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dde:	e8 bc ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dee:	52                   	push   edx
c0009def:	50                   	push   eax
c0009df0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df8:	e8 2e df 01 00       	call   c0027d2b <__adddf3>
c0009dfd:	59                   	pop    ecx
c0009dfe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009e02:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009e06:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e0c:	e8 8e ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009e11:	83 c4 10             	add    esp,0x10
c0009e14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e18:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	e8 77 e5 01 00       	call   c00283a8 <__muldf3>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3c:	52                   	push   edx
c0009e3d:	50                   	push   eax
c0009e3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e46:	e8 e0 de 01 00       	call   c0027d2b <__adddf3>
c0009e4b:	5d                   	pop    ebp
c0009e4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e50:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e54:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e5a:	e8 40 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009e5f:	83 c4 10             	add    esp,0x10
c0009e62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e7a:	e8 29 e5 01 00       	call   c00283a8 <__muldf3>
c0009e7f:	83 c4 10             	add    esp,0x10
c0009e82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e86:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e8a:	52                   	push   edx
c0009e8b:	50                   	push   eax
c0009e8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e94:	e8 92 de 01 00       	call   c0027d2b <__adddf3>
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ea0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ea4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea8:	85 ff                	test   edi,edi
c0009eaa:	0f 8f d3 fe ff ff    	jg     c0009d83 <calc_output_stereo+0x1fb>
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	e8 66 de 01 00       	call   c0027d2b <__adddf3>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ecc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ed0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee0:	e8 c3 e4 01 00       	call   c00283a8 <__muldf3>
c0009ee5:	59                   	pop    ecx
c0009ee6:	5b                   	pop    ebx
c0009ee7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009eeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009eef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef7:	e8 7f ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009efc:	83 c4 10             	add    esp,0x10
c0009eff:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009f06:	89 03                	mov    DWORD PTR [ebx],eax
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f18:	e8 0e de 01 00       	call   c0027d2b <__adddf3>
c0009f1d:	83 c4 10             	add    esp,0x10
c0009f20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f38:	e8 6b e4 01 00       	call   c00283a8 <__muldf3>
c0009f3d:	5e                   	pop    esi
c0009f3e:	5f                   	pop    edi
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f4f:	e8 27 ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009f54:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f5b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f5e:	83 c4 7c             	add    esp,0x7c
c0009f61:	5b                   	pop    ebx
c0009f62:	5e                   	pop    esi
c0009f63:	5f                   	pop    edi
c0009f64:	5d                   	pop    ebp
c0009f65:	c3                   	ret    

c0009f66 <calc_output_quad>:
c0009f66:	55                   	push   ebp
c0009f67:	57                   	push   edi
c0009f68:	56                   	push   esi
c0009f69:	89 c6                	mov    esi,eax
c0009f6b:	53                   	push   ebx
c0009f6c:	83 ec 7c             	sub    esp,0x7c
c0009f6f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f73:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f77:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f7e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f85:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f8d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f90:	e8 55 f9 ff ff       	call   c00098ea <int_to_fp>
c0009f95:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f98:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f9b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f9f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009fa7:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fab:	99                   	cdq    
c0009fac:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fb0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fb4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fb7:	31 d2                	xor    edx,edx
c0009fb9:	0f af d8             	imul   ebx,eax
c0009fbc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fc4:	0f af c7             	imul   eax,edi
c0009fc7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fcb:	29 c1                	sub    ecx,eax
c0009fcd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fd5:	31 c0                	xor    eax,eax
c0009fd7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fde:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fe2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fe6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ff2:	89 d8                	mov    eax,ebx
c0009ff4:	83 c7 10             	add    edi,0x10
c0009ff7:	e8 fc f8 ff ff       	call   c00098f8 <fp_to_double>
c0009ffc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a004:	89 d8                	mov    eax,ebx
c000a006:	e8 e3 f8 ff ff       	call   c00098ee <fp_to_int>
c000a00b:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a00f:	52                   	push   edx
c000a010:	52                   	push   edx
c000a011:	51                   	push   ecx
c000a012:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a016:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a01a:	e8 a1 d6 01 00       	call   c00276c0 <__subsf3>
c000a01f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a022:	e8 78 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a027:	83 c4 10             	add    esp,0x10
c000a02a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a02e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a03a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a042:	e8 61 e3 01 00       	call   c00283a8 <__muldf3>
c000a047:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a04b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a04f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a052:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a056:	e8 44 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a05b:	83 c4 10             	add    esp,0x10
c000a05e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a062:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a066:	52                   	push   edx
c000a067:	50                   	push   eax
c000a068:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a070:	e8 b6 dc 01 00       	call   c0027d2b <__adddf3>
c000a075:	59                   	pop    ecx
c000a076:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a07a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a07e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a084:	e8 16 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a089:	83 c4 10             	add    esp,0x10
c000a08c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a090:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	e8 ff e2 01 00       	call   c00283a8 <__muldf3>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b4:	52                   	push   edx
c000a0b5:	50                   	push   eax
c000a0b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0be:	e8 68 dc 01 00       	call   c0027d2b <__adddf3>
c000a0c3:	59                   	pop    ecx
c000a0c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0cc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0d2:	e8 c8 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0de:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	e8 b1 e2 01 00       	call   c00283a8 <__muldf3>
c000a0f7:	83 c4 10             	add    esp,0x10
c000a0fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a102:	52                   	push   edx
c000a103:	50                   	push   eax
c000a104:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a108:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a10c:	e8 1a dc 01 00       	call   c0027d2b <__adddf3>
c000a111:	59                   	pop    ecx
c000a112:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a116:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a11a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a120:	e8 7a ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a125:	83 c4 10             	add    esp,0x10
c000a128:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	e8 63 e2 01 00       	call   c00283a8 <__muldf3>
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a150:	52                   	push   edx
c000a151:	50                   	push   eax
c000a152:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a156:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a15a:	e8 cc db 01 00       	call   c0027d2b <__adddf3>
c000a15f:	59                   	pop    ecx
c000a160:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a164:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a168:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a16e:	e8 2c ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a173:	83 c4 10             	add    esp,0x10
c000a176:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a17a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a186:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a18a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a18e:	e8 15 e2 01 00       	call   c00283a8 <__muldf3>
c000a193:	83 c4 10             	add    esp,0x10
c000a196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a19e:	52                   	push   edx
c000a19f:	50                   	push   eax
c000a1a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a8:	e8 7e db 01 00       	call   c0027d2b <__adddf3>
c000a1ad:	83 c4 10             	add    esp,0x10
c000a1b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1b4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1bc:	0f 89 30 fe ff ff    	jns    c0009ff2 <calc_output_quad+0x8c>
c000a1c2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ca:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1ce:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1d2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1da:	29 c8                	sub    eax,ecx
c000a1dc:	99                   	cdq    
c000a1dd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1e1:	31 d2                	xor    edx,edx
c000a1e3:	0f af d8             	imul   ebx,eax
c000a1e6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1ea:	40                   	inc    eax
c000a1eb:	01 cb                	add    ebx,ecx
c000a1ed:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1f2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1f6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1fe:	8d 34 86             	lea    esi,[esi+eax*4]
c000a201:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a209:	31 c0                	xor    eax,eax
c000a20b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a20f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a217:	89 d8                	mov    eax,ebx
c000a219:	83 ee 10             	sub    esi,0x10
c000a21c:	e8 d7 f6 ff ff       	call   c00098f8 <fp_to_double>
c000a221:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a229:	89 d8                	mov    eax,ebx
c000a22b:	e8 be f6 ff ff       	call   c00098ee <fp_to_int>
c000a230:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a234:	52                   	push   edx
c000a235:	52                   	push   edx
c000a236:	57                   	push   edi
c000a237:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a23b:	e8 80 d4 01 00       	call   c00276c0 <__subsf3>
c000a240:	89 04 24             	mov    DWORD PTR [esp],eax
c000a243:	e8 57 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a25b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a263:	e8 40 e1 01 00       	call   c00283a8 <__muldf3>
c000a268:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a273:	e8 27 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a283:	52                   	push   edx
c000a284:	50                   	push   eax
c000a285:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a289:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a28d:	e8 99 da 01 00       	call   c0027d2b <__adddf3>
c000a292:	59                   	pop    ecx
c000a293:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a297:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a29b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a2a1:	e8 f9 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a2a6:	83 c4 10             	add    esp,0x10
c000a2a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	e8 e2 e0 01 00       	call   c00283a8 <__muldf3>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d1:	52                   	push   edx
c000a2d2:	50                   	push   eax
c000a2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2db:	e8 4b da 01 00       	call   c0027d2b <__adddf3>
c000a2e0:	5f                   	pop    edi
c000a2e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2e5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2ef:	e8 ab ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	e8 94 e0 01 00       	call   c00283a8 <__muldf3>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31f:	52                   	push   edx
c000a320:	50                   	push   eax
c000a321:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a325:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a329:	e8 fd d9 01 00       	call   c0027d2b <__adddf3>
c000a32e:	59                   	pop    ecx
c000a32f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a333:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a337:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a33d:	e8 5d ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a342:	83 c4 10             	add    esp,0x10
c000a345:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a349:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a34d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	e8 46 e0 01 00       	call   c00283a8 <__muldf3>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a369:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36d:	52                   	push   edx
c000a36e:	50                   	push   eax
c000a36f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a373:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a377:	e8 af d9 01 00       	call   c0027d2b <__adddf3>
c000a37c:	5f                   	pop    edi
c000a37d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a381:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a385:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a38b:	e8 0f ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a390:	83 c4 10             	add    esp,0x10
c000a393:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a397:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a39b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3ab:	e8 f8 df 01 00       	call   c00283a8 <__muldf3>
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3bb:	52                   	push   edx
c000a3bc:	50                   	push   eax
c000a3bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3c5:	e8 61 d9 01 00       	call   c0027d2b <__adddf3>
c000a3ca:	83 c4 10             	add    esp,0x10
c000a3cd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3d1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3d5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d9:	85 db                	test   ebx,ebx
c000a3db:	0f 8f 36 fe ff ff    	jg     c000a217 <calc_output_quad+0x2b1>
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f1:	e8 35 d9 01 00       	call   c0027d2b <__adddf3>
c000a3f6:	83 c4 10             	add    esp,0x10
c000a3f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a411:	e8 92 df 01 00       	call   c00283a8 <__muldf3>
c000a416:	59                   	pop    ecx
c000a417:	5b                   	pop    ebx
c000a418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a41c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a428:	e8 4e e8 01 00       	call   c0028c7b <__truncdfsf2>
c000a42d:	83 c4 10             	add    esp,0x10
c000a430:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a437:	89 06                	mov    DWORD PTR [esi],eax
c000a439:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a43d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a441:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a445:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a449:	e8 dd d8 01 00       	call   c0027d2b <__adddf3>
c000a44e:	83 c4 10             	add    esp,0x10
c000a451:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a469:	e8 3a df 01 00       	call   c00283a8 <__muldf3>
c000a46e:	5e                   	pop    esi
c000a46f:	5f                   	pop    edi
c000a470:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a478:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a480:	e8 f6 e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a48f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a492:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a496:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a49a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4a2:	e8 84 d8 01 00       	call   c0027d2b <__adddf3>
c000a4a7:	83 c4 10             	add    esp,0x10
c000a4aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	e8 e1 de 01 00       	call   c00283a8 <__muldf3>
c000a4c7:	5d                   	pop    ebp
c000a4c8:	59                   	pop    ecx
c000a4c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d9:	e8 9d e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a4de:	83 c4 10             	add    esp,0x10
c000a4e1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4fb:	e8 2b d8 01 00       	call   c0027d2b <__adddf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51b:	e8 88 de 01 00       	call   c00283a8 <__muldf3>
c000a520:	5b                   	pop    ebx
c000a521:	5e                   	pop    esi
c000a522:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a526:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a532:	e8 44 e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a537:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a53e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a541:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a547:	5b                   	pop    ebx
c000a548:	5e                   	pop    esi
c000a549:	5f                   	pop    edi
c000a54a:	5d                   	pop    ebp
c000a54b:	c3                   	ret    

c000a54c <calc_output_hex>:
c000a54c:	55                   	push   ebp
c000a54d:	89 cd                	mov    ebp,ecx
c000a54f:	57                   	push   edi
c000a550:	56                   	push   esi
c000a551:	53                   	push   ebx
c000a552:	89 c3                	mov    ebx,eax
c000a554:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a55a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a55d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a564:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a56b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a56f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a573:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a576:	e8 6f f3 ff ff       	call   c00098ea <int_to_fp>
c000a57b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a57e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a582:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a585:	29 c8                	sub    eax,ecx
c000a587:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a58b:	99                   	cdq    
c000a58c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a594:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a597:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a59f:	0f af f8             	imul   edi,eax
c000a5a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a5a5:	01 cf                	add    edi,ecx
c000a5a7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5ab:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5b2:	0f af c2             	imul   eax,edx
c000a5b5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b9:	29 c1                	sub    ecx,eax
c000a5bb:	31 d2                	xor    edx,edx
c000a5bd:	31 c0                	xor    eax,eax
c000a5bf:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5d6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5de:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5ea:	89 f8                	mov    eax,edi
c000a5ec:	e8 07 f3 ff ff       	call   c00098f8 <fp_to_double>
c000a5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f9:	89 f8                	mov    eax,edi
c000a5fb:	e8 ee f2 ff ff       	call   c00098ee <fp_to_int>
c000a600:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a604:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a607:	52                   	push   edx
c000a608:	52                   	push   edx
c000a609:	51                   	push   ecx
c000a60a:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a60e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a615:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a619:	e8 a2 d0 01 00       	call   c00276c0 <__subsf3>
c000a61e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a621:	e8 79 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a626:	83 c4 10             	add    esp,0x10
c000a629:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a62d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a639:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a63d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a641:	e8 62 dd 01 00       	call   c00283a8 <__muldf3>
c000a646:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a64a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a64e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a651:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a655:	e8 45 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a665:	52                   	push   edx
c000a666:	50                   	push   eax
c000a667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a66f:	e8 b7 d6 01 00       	call   c0027d2b <__adddf3>
c000a674:	59                   	pop    ecx
c000a675:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a679:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a67d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a683:	e8 17 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a688:	83 c4 10             	add    esp,0x10
c000a68b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a68f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	e8 00 dd 01 00       	call   c00283a8 <__muldf3>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b3:	52                   	push   edx
c000a6b4:	50                   	push   eax
c000a6b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6bd:	e8 69 d6 01 00       	call   c0027d2b <__adddf3>
c000a6c2:	59                   	pop    ecx
c000a6c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6cb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6d1:	e8 c9 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a6d6:	83 c4 10             	add    esp,0x10
c000a6d9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6dd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	e8 b2 dc 01 00       	call   c00283a8 <__muldf3>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a701:	52                   	push   edx
c000a702:	50                   	push   eax
c000a703:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a707:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a70b:	e8 1b d6 01 00       	call   c0027d2b <__adddf3>
c000a710:	59                   	pop    ecx
c000a711:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a715:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a719:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a71f:	e8 7b e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a724:	83 c4 10             	add    esp,0x10
c000a727:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a72f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	e8 64 dc 01 00       	call   c00283a8 <__muldf3>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74f:	52                   	push   edx
c000a750:	50                   	push   eax
c000a751:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a755:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a759:	e8 cd d5 01 00       	call   c0027d2b <__adddf3>
c000a75e:	59                   	pop    ecx
c000a75f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a763:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a767:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a76d:	e8 2d e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a772:	83 c4 10             	add    esp,0x10
c000a775:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a779:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a77d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	e8 16 dc 01 00       	call   c00283a8 <__muldf3>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a799:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7a7:	e8 7f d5 01 00       	call   c0027d2b <__adddf3>
c000a7ac:	59                   	pop    ecx
c000a7ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7b1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7b5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7bb:	e8 df e5 01 00       	call   c0028d9f <__extendsfdf2>
c000a7c0:	83 c4 10             	add    esp,0x10
c000a7c3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7c7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7db:	e8 c8 db 01 00       	call   c00283a8 <__muldf3>
c000a7e0:	83 c4 10             	add    esp,0x10
c000a7e3:	83 c6 18             	add    esi,0x18
c000a7e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ee:	52                   	push   edx
c000a7ef:	50                   	push   eax
c000a7f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f8:	e8 2e d5 01 00       	call   c0027d2b <__adddf3>
c000a7fd:	59                   	pop    ecx
c000a7fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a802:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a806:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a80c:	e8 8e e5 01 00       	call   c0028d9f <__extendsfdf2>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a818:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a824:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a828:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82c:	e8 77 db 01 00       	call   c00283a8 <__muldf3>
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a838:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a83c:	52                   	push   edx
c000a83d:	50                   	push   eax
c000a83e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a842:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a846:	e8 e0 d4 01 00       	call   c0027d2b <__adddf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a852:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a856:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a859:	0f 89 8b fd ff ff    	jns    c000a5ea <calc_output_hex+0x9e>
c000a85f:	31 f6                	xor    esi,esi
c000a861:	31 ff                	xor    edi,edi
c000a863:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a867:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a86a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a86e:	29 e9                	sub    ecx,ebp
c000a870:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a874:	29 c8                	sub    eax,ecx
c000a876:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a879:	99                   	cdq    
c000a87a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a87e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a881:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a885:	0f af e8             	imul   ebp,eax
c000a888:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a88c:	40                   	inc    eax
c000a88d:	01 cd                	add    ebp,ecx
c000a88f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a894:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a898:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a89c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a8a0:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a8a3:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a8a7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8ab:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8af:	89 e8                	mov    eax,ebp
c000a8b1:	e8 42 f0 ff ff       	call   c00098f8 <fp_to_double>
c000a8b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8be:	89 e8                	mov    eax,ebp
c000a8c0:	e8 29 f0 ff ff       	call   c00098ee <fp_to_int>
c000a8c5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8cc:	52                   	push   edx
c000a8cd:	52                   	push   edx
c000a8ce:	51                   	push   ecx
c000a8cf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8d6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8dd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8e1:	e8 da cd 01 00       	call   c00276c0 <__subsf3>
c000a8e6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e9:	e8 b1 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a8ee:	83 c4 10             	add    esp,0x10
c000a8f1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8f5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a901:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a905:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a909:	e8 9a da 01 00       	call   c00283a8 <__muldf3>
c000a90e:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a915:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a919:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a91c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a920:	e8 7a e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a930:	52                   	push   edx
c000a931:	50                   	push   eax
c000a932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a93a:	e8 ec d3 01 00       	call   c0027d2b <__adddf3>
c000a93f:	59                   	pop    ecx
c000a940:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a944:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a948:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a94e:	e8 4c e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	e8 35 da 01 00       	call   c00283a8 <__muldf3>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97e:	52                   	push   edx
c000a97f:	50                   	push   eax
c000a980:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a984:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a988:	e8 9e d3 01 00       	call   c0027d2b <__adddf3>
c000a98d:	59                   	pop    ecx
c000a98e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a992:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a996:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a99c:	e8 fe e3 01 00       	call   c0028d9f <__extendsfdf2>
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	e8 e7 d9 01 00       	call   c00283a8 <__muldf3>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cc:	52                   	push   edx
c000a9cd:	50                   	push   eax
c000a9ce:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9d2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9d6:	e8 50 d3 01 00       	call   c0027d2b <__adddf3>
c000a9db:	59                   	pop    ecx
c000a9dc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9e0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9e4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9ea:	e8 b0 e3 01 00       	call   c0028d9f <__extendsfdf2>
c000a9ef:	83 c4 10             	add    esp,0x10
c000a9f2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9f6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	e8 99 d9 01 00       	call   c00283a8 <__muldf3>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa16:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1a:	52                   	push   edx
c000aa1b:	50                   	push   eax
c000aa1c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa20:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa24:	e8 02 d3 01 00       	call   c0027d2b <__adddf3>
c000aa29:	59                   	pop    ecx
c000aa2a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa2e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa32:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa38:	e8 62 e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa44:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	e8 4b d9 01 00       	call   c00283a8 <__muldf3>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa68:	52                   	push   edx
c000aa69:	50                   	push   eax
c000aa6a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa72:	e8 b4 d2 01 00       	call   c0027d2b <__adddf3>
c000aa77:	59                   	pop    ecx
c000aa78:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa7c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa80:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa86:	e8 14 e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa92:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa9e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa6:	e8 fd d8 01 00       	call   c00283a8 <__muldf3>
c000aaab:	83 c4 10             	add    esp,0x10
c000aaae:	83 eb 18             	sub    ebx,0x18
c000aab1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab9:	52                   	push   edx
c000aaba:	50                   	push   eax
c000aabb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aac3:	e8 63 d2 01 00       	call   c0027d2b <__adddf3>
c000aac8:	59                   	pop    ecx
c000aac9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aacd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aad1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aad7:	e8 c3 e2 01 00       	call   c0028d9f <__extendsfdf2>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaef:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf7:	e8 ac d8 01 00       	call   c00283a8 <__muldf3>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab03:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab07:	52                   	push   edx
c000ab08:	50                   	push   eax
c000ab09:	57                   	push   edi
c000ab0a:	56                   	push   esi
c000ab0b:	e8 1b d2 01 00       	call   c0027d2b <__adddf3>
c000ab10:	83 c4 10             	add    esp,0x10
c000ab13:	89 c6                	mov    esi,eax
c000ab15:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab18:	89 d7                	mov    edi,edx
c000ab1a:	85 ed                	test   ebp,ebp
c000ab1c:	0f 8f 8d fd ff ff    	jg     c000a8af <calc_output_hex+0x363>
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab32:	e8 f4 d1 01 00       	call   c0027d2b <__adddf3>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab51:	e8 52 d8 01 00       	call   c00283a8 <__muldf3>
c000ab56:	59                   	pop    ecx
c000ab57:	5b                   	pop    ebx
c000ab58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab68:	e8 0e e1 01 00       	call   c0028c7b <__truncdfsf2>
c000ab6d:	83 c4 10             	add    esp,0x10
c000ab70:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab77:	89 03                	mov    DWORD PTR [ebx],eax
c000ab79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab7d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab89:	e8 9d d1 01 00       	call   c0027d2b <__adddf3>
c000ab8e:	83 c4 10             	add    esp,0x10
c000ab91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba8:	e8 fb d7 01 00       	call   c00283a8 <__muldf3>
c000abad:	5d                   	pop    ebp
c000abae:	59                   	pop    ecx
c000abaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abbf:	e8 b7 e0 01 00       	call   c0028c7b <__truncdfsf2>
c000abc4:	83 c4 10             	add    esp,0x10
c000abc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abd1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abdd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abe1:	e8 45 d1 01 00       	call   c0027d2b <__adddf3>
c000abe6:	83 c4 10             	add    esp,0x10
c000abe9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abfc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac00:	e8 a3 d7 01 00       	call   c00283a8 <__muldf3>
c000ac05:	5b                   	pop    ebx
c000ac06:	5d                   	pop    ebp
c000ac07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac17:	e8 5f e0 01 00       	call   c0028c7b <__truncdfsf2>
c000ac1c:	83 c4 10             	add    esp,0x10
c000ac1f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac29:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac39:	e8 ed d0 01 00       	call   c0027d2b <__adddf3>
c000ac3e:	83 c4 10             	add    esp,0x10
c000ac41:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac58:	e8 4b d7 01 00       	call   c00283a8 <__muldf3>
c000ac5d:	59                   	pop    ecx
c000ac5e:	5b                   	pop    ebx
c000ac5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac6f:	e8 07 e0 01 00       	call   c0028c7b <__truncdfsf2>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac7e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac91:	e8 95 d0 01 00       	call   c0027d2b <__adddf3>
c000ac96:	83 c4 10             	add    esp,0x10
c000ac99:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac9c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	e8 f3 d6 01 00       	call   c00283a8 <__muldf3>
c000acb5:	5d                   	pop    ebp
c000acb6:	59                   	pop    ecx
c000acb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc7:	e8 af df 01 00       	call   c0028c7b <__truncdfsf2>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acd6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd9:	57                   	push   edi
c000acda:	56                   	push   esi
c000acdb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ace3:	e8 43 d0 01 00       	call   c0027d2b <__adddf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad02:	e8 a1 d6 01 00       	call   c00283a8 <__muldf3>
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad19:	e8 5d df 01 00       	call   c0028c7b <__truncdfsf2>
c000ad1e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad25:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad28:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad2e:	5b                   	pop    ebx
c000ad2f:	5e                   	pop    esi
c000ad30:	5f                   	pop    edi
c000ad31:	5d                   	pop    ebp
c000ad32:	c3                   	ret    

c000ad33 <sinc_reset>:
c000ad33:	56                   	push   esi
c000ad34:	53                   	push   ebx
c000ad35:	51                   	push   ecx
c000ad36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad3a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad3d:	85 db                	test   ebx,ebx
c000ad3f:	74 59                	je     c000ad9a <sinc_reset+0x67>
c000ad41:	31 d2                	xor    edx,edx
c000ad43:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad4a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad4d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad57:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad5e:	31 c0                	xor    eax,eax
c000ad60:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad66:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad69:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad6c:	52                   	push   edx
c000ad6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad70:	c1 e0 02             	shl    eax,0x2
c000ad73:	50                   	push   eax
c000ad74:	6a 00                	push   0x0
c000ad76:	56                   	push   esi
c000ad77:	e8 0c 5a ff ff       	call   c0000788 <memset>
c000ad7c:	83 c4 0c             	add    esp,0xc
c000ad7f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad82:	c1 e0 02             	shl    eax,0x2
c000ad85:	50                   	push   eax
c000ad86:	68 aa 00 00 00       	push   0xaa
c000ad8b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad8e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad91:	50                   	push   eax
c000ad92:	e8 f1 59 ff ff       	call   c0000788 <memset>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	58                   	pop    eax
c000ad9b:	5b                   	pop    ebx
c000ad9c:	5e                   	pop    esi
c000ad9d:	c3                   	ret    

c000ad9e <calc_output_multi>:
c000ad9e:	55                   	push   ebp
c000ad9f:	57                   	push   edi
c000ada0:	56                   	push   esi
c000ada1:	89 c6                	mov    esi,eax
c000ada3:	53                   	push   ebx
c000ada4:	83 ec 4c             	sub    esp,0x4c
c000ada7:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000adab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000adaf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adb3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adb7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adbf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adc3:	8d 46 44             	lea    eax,[esi+0x44]
c000adc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000add3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000add6:	e8 0f eb ff ff       	call   c00098ea <int_to_fp>
c000addb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adde:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ade2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ade6:	99                   	cdq    
c000ade7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adeb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adef:	0f af d0             	imul   edx,eax
c000adf2:	0f af c3             	imul   eax,ebx
c000adf5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf9:	29 c1                	sub    ecx,eax
c000adfb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ae03:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae0e:	57                   	push   edi
c000ae0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae13:	6a 00                	push   0x0
c000ae15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae19:	e8 6a 59 ff ff       	call   c0000788 <memset>
c000ae1e:	83 c4 10             	add    esp,0x10
c000ae21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae25:	89 df                	mov    edi,ebx
c000ae27:	e8 cc ea ff ff       	call   c00098f8 <fp_to_double>
c000ae2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae38:	e8 b1 ea ff ff       	call   c00098ee <fp_to_int>
c000ae3d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae40:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae43:	51                   	push   ecx
c000ae44:	51                   	push   ecx
c000ae45:	55                   	push   ebp
c000ae46:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae4a:	e8 71 c8 01 00       	call   c00276c0 <__subsf3>
c000ae4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae52:	e8 48 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae72:	e8 31 d5 01 00       	call   c00283a8 <__muldf3>
c000ae77:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae82:	e8 18 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae92:	52                   	push   edx
c000ae93:	50                   	push   eax
c000ae94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9c:	e8 8a ce 01 00       	call   c0027d2b <__adddf3>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeac:	89 f8                	mov    eax,edi
c000aeae:	b9 08 00 00 00       	mov    ecx,0x8
c000aeb3:	99                   	cdq    
c000aeb4:	f7 f9                	idiv   ecx
c000aeb6:	4a                   	dec    edx
c000aeb7:	83 fa 06             	cmp    edx,0x6
c000aeba:	77 07                	ja     c000aec3 <calc_output_multi+0x125>
c000aebc:	ff 24 95 a4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd595c]
c000aec3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aec6:	4f                   	dec    edi
c000aec7:	83 ec 0c             	sub    esp,0xc
c000aeca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aedc:	e8 be de 01 00       	call   c0028d9f <__extendsfdf2>
c000aee1:	83 c4 10             	add    esp,0x10
c000aee4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aefc:	e8 a7 d4 01 00       	call   c00283a8 <__muldf3>
c000af01:	83 c4 10             	add    esp,0x10
c000af04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af0c:	52                   	push   edx
c000af0d:	50                   	push   eax
c000af0e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af11:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af14:	e8 12 ce 01 00       	call   c0027d2b <__adddf3>
c000af19:	83 c4 10             	add    esp,0x10
c000af1c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af1f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af22:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af25:	4f                   	dec    edi
c000af26:	83 ec 0c             	sub    esp,0xc
c000af29:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af30:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af37:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af3b:	e8 5f de 01 00       	call   c0028d9f <__extendsfdf2>
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af47:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5b:	e8 48 d4 01 00       	call   c00283a8 <__muldf3>
c000af60:	83 c4 10             	add    esp,0x10
c000af63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af6b:	52                   	push   edx
c000af6c:	50                   	push   eax
c000af6d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af70:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af73:	e8 b3 cd 01 00       	call   c0027d2b <__adddf3>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af7e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af84:	4f                   	dec    edi
c000af85:	83 ec 0c             	sub    esp,0xc
c000af88:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af8f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af96:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af9a:	e8 00 de 01 00       	call   c0028d9f <__extendsfdf2>
c000af9f:	83 c4 10             	add    esp,0x10
c000afa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afba:	e8 e9 d3 01 00       	call   c00283a8 <__muldf3>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afc6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afca:	52                   	push   edx
c000afcb:	50                   	push   eax
c000afcc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afcf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afd2:	e8 54 cd 01 00       	call   c0027d2b <__adddf3>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afdd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afe0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afe3:	4f                   	dec    edi
c000afe4:	83 ec 0c             	sub    esp,0xc
c000afe7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afee:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aff5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff9:	e8 a1 dd 01 00       	call   c0028d9f <__extendsfdf2>
c000affe:	83 c4 10             	add    esp,0x10
c000b001:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b005:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b00d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b011:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b015:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b019:	e8 8a d3 01 00       	call   c00283a8 <__muldf3>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b025:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b029:	52                   	push   edx
c000b02a:	50                   	push   eax
c000b02b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b02e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b031:	e8 f5 cc 01 00       	call   c0027d2b <__adddf3>
c000b036:	83 c4 10             	add    esp,0x10
c000b039:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b03c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b03f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b042:	4f                   	dec    edi
c000b043:	83 ec 0c             	sub    esp,0xc
c000b046:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b04d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b054:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b058:	e8 42 dd 01 00       	call   c0028d9f <__extendsfdf2>
c000b05d:	83 c4 10             	add    esp,0x10
c000b060:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b064:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b068:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b070:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b074:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b078:	e8 2b d3 01 00       	call   c00283a8 <__muldf3>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b084:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b088:	52                   	push   edx
c000b089:	50                   	push   eax
c000b08a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b08d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b090:	e8 96 cc 01 00       	call   c0027d2b <__adddf3>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b09b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b09e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0a1:	4f                   	dec    edi
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0b7:	e8 e3 dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b0bc:	83 c4 10             	add    esp,0x10
c000b0bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0d7:	e8 cc d2 01 00       	call   c00283a8 <__muldf3>
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0e7:	52                   	push   edx
c000b0e8:	50                   	push   eax
c000b0e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0ef:	e8 37 cc 01 00       	call   c0027d2b <__adddf3>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b100:	4f                   	dec    edi
c000b101:	83 ec 0c             	sub    esp,0xc
c000b104:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b10b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b112:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b116:	e8 84 dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b11b:	83 c4 10             	add    esp,0x10
c000b11e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b122:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b132:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b136:	e8 6d d2 01 00       	call   c00283a8 <__muldf3>
c000b13b:	83 c4 10             	add    esp,0x10
c000b13e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b142:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b146:	52                   	push   edx
c000b147:	50                   	push   eax
c000b148:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b14b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b14e:	e8 d8 cb 01 00       	call   c0027d2b <__adddf3>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b159:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b15c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b15f:	4f                   	dec    edi
c000b160:	83 ec 0c             	sub    esp,0xc
c000b163:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b16a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b171:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b175:	e8 25 dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b17a:	83 c4 10             	add    esp,0x10
c000b17d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b181:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b18d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b191:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b195:	e8 0e d2 01 00       	call   c00283a8 <__muldf3>
c000b19a:	83 c4 10             	add    esp,0x10
c000b19d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1a1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1a5:	52                   	push   edx
c000b1a6:	50                   	push   eax
c000b1a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1aa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1ad:	e8 79 cb 01 00       	call   c0027d2b <__adddf3>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1bb:	85 ff                	test   edi,edi
c000b1bd:	0f 8f e9 fc ff ff    	jg     c000aeac <calc_output_multi+0x10e>
c000b1c3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1c7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1cb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1cf:	0f 89 4c fc ff ff    	jns    c000ae21 <calc_output_multi+0x83>
c000b1d5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1dd:	29 c8                	sub    eax,ecx
c000b1df:	99                   	cdq    
c000b1e0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e8:	0f af d0             	imul   edx,eax
c000b1eb:	40                   	inc    eax
c000b1ec:	01 d1                	add    ecx,edx
c000b1ee:	0f af c3             	imul   eax,ebx
c000b1f1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1f5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1fc:	55                   	push   ebp
c000b1fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b201:	6a 00                	push   0x0
c000b203:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b207:	e8 7c 55 ff ff       	call   c0000788 <memset>
c000b20c:	83 c4 10             	add    esp,0x10
c000b20f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b213:	e8 e0 e6 ff ff       	call   c00098f8 <fp_to_double>
c000b218:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b21c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b220:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b224:	e8 c5 e6 ff ff       	call   c00098ee <fp_to_int>
c000b229:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b22c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b22f:	57                   	push   edi
c000b230:	57                   	push   edi
c000b231:	89 df                	mov    edi,ebx
c000b233:	55                   	push   ebp
c000b234:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b238:	e8 83 c4 01 00       	call   c00276c0 <__subsf3>
c000b23d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b240:	e8 5a db 01 00       	call   c0028d9f <__extendsfdf2>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b260:	e8 43 d1 01 00       	call   c00283a8 <__muldf3>
c000b265:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b268:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b26c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b270:	e8 2a db 01 00       	call   c0028d9f <__extendsfdf2>
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b27c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b280:	52                   	push   edx
c000b281:	50                   	push   eax
c000b282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b28a:	e8 9c ca 01 00       	call   c0027d2b <__adddf3>
c000b28f:	83 c4 10             	add    esp,0x10
c000b292:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b296:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b29a:	89 f8                	mov    eax,edi
c000b29c:	b9 08 00 00 00       	mov    ecx,0x8
c000b2a1:	99                   	cdq    
c000b2a2:	f7 f9                	idiv   ecx
c000b2a4:	4a                   	dec    edx
c000b2a5:	83 fa 06             	cmp    edx,0x6
c000b2a8:	77 07                	ja     c000b2b1 <calc_output_multi+0x513>
c000b2aa:	ff 24 95 c0 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5940]
c000b2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2b5:	4f                   	dec    edi
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2cb:	e8 cf da 01 00       	call   c0028d9f <__extendsfdf2>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2eb:	e8 b8 d0 01 00       	call   c00283a8 <__muldf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2fb:	52                   	push   edx
c000b2fc:	50                   	push   eax
c000b2fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b300:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b303:	e8 23 ca 01 00       	call   c0027d2b <__adddf3>
c000b308:	83 c4 10             	add    esp,0x10
c000b30b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b30e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b315:	4f                   	dec    edi
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b31c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b320:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b327:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b32b:	e8 6f da 01 00       	call   c0028d9f <__extendsfdf2>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b343:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b34b:	e8 58 d0 01 00       	call   c00283a8 <__muldf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b35b:	52                   	push   edx
c000b35c:	50                   	push   eax
c000b35d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b360:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b363:	e8 c3 c9 01 00       	call   c0027d2b <__adddf3>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b36e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b375:	4f                   	dec    edi
c000b376:	83 ec 0c             	sub    esp,0xc
c000b379:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b37c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b380:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b387:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b38b:	e8 0f da 01 00       	call   c0028d9f <__extendsfdf2>
c000b390:	83 c4 10             	add    esp,0x10
c000b393:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b39b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ab:	e8 f8 cf 01 00       	call   c00283a8 <__muldf3>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3bb:	52                   	push   edx
c000b3bc:	50                   	push   eax
c000b3bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3c3:	e8 63 c9 01 00       	call   c0027d2b <__adddf3>
c000b3c8:	83 c4 10             	add    esp,0x10
c000b3cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d5:	4f                   	dec    edi
c000b3d6:	83 ec 0c             	sub    esp,0xc
c000b3d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3eb:	e8 af d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b403:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b407:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b40b:	e8 98 cf 01 00       	call   c00283a8 <__muldf3>
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b417:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b41b:	52                   	push   edx
c000b41c:	50                   	push   eax
c000b41d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b420:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b423:	e8 03 c9 01 00       	call   c0027d2b <__adddf3>
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b42e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b435:	4f                   	dec    edi
c000b436:	83 ec 0c             	sub    esp,0xc
c000b439:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b43c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b440:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b447:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b44b:	e8 4f d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b457:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b463:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b467:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b46b:	e8 38 cf 01 00       	call   c00283a8 <__muldf3>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b477:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b47b:	52                   	push   edx
c000b47c:	50                   	push   eax
c000b47d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b480:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b483:	e8 a3 c8 01 00       	call   c0027d2b <__adddf3>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b48e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b495:	4f                   	dec    edi
c000b496:	83 ec 0c             	sub    esp,0xc
c000b499:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b49c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4ab:	e8 ef d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b4b0:	83 c4 10             	add    esp,0x10
c000b4b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4cb:	e8 d8 ce 01 00       	call   c00283a8 <__muldf3>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4db:	52                   	push   edx
c000b4dc:	50                   	push   eax
c000b4dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4e3:	e8 43 c8 01 00       	call   c0027d2b <__adddf3>
c000b4e8:	83 c4 10             	add    esp,0x10
c000b4eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f5:	4f                   	dec    edi
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b500:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b507:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b50b:	e8 8f d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b510:	83 c4 10             	add    esp,0x10
c000b513:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b517:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b51b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b523:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b52b:	e8 78 ce 01 00       	call   c00283a8 <__muldf3>
c000b530:	83 c4 10             	add    esp,0x10
c000b533:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b537:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b53b:	52                   	push   edx
c000b53c:	50                   	push   eax
c000b53d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b540:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b543:	e8 e3 c7 01 00       	call   c0027d2b <__adddf3>
c000b548:	83 c4 10             	add    esp,0x10
c000b54b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b54e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	4f                   	dec    edi
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b55c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b560:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b567:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b56b:	e8 2f d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b570:	83 c4 10             	add    esp,0x10
c000b573:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b577:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b57b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b583:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b587:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b58b:	e8 18 ce 01 00       	call   c00283a8 <__muldf3>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b59b:	52                   	push   edx
c000b59c:	50                   	push   eax
c000b59d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5a3:	e8 83 c7 01 00       	call   c0027d2b <__adddf3>
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5b1:	85 ff                	test   edi,edi
c000b5b3:	0f 8f e1 fc ff ff    	jg     c000b29a <calc_output_multi+0x4fc>
c000b5b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5bd:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5c1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5c5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ca:	0f 8f 3f fc ff ff    	jg     c000b20f <calc_output_multi+0x471>
c000b5d0:	be 08 00 00 00       	mov    esi,0x8
c000b5d5:	89 d8                	mov    eax,ebx
c000b5d7:	99                   	cdq    
c000b5d8:	f7 fe                	idiv   esi
c000b5da:	4a                   	dec    edx
c000b5db:	83 fa 06             	cmp    edx,0x6
c000b5de:	77 07                	ja     c000b5e7 <calc_output_multi+0x849>
c000b5e0:	ff 24 95 dc a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5924]
c000b5e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5eb:	4b                   	dec    ebx
c000b5ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fe:	e8 28 c7 01 00       	call   c0027d2b <__adddf3>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b60a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b616:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61e:	e8 85 cd 01 00       	call   c00283a8 <__muldf3>
c000b623:	5d                   	pop    ebp
c000b624:	59                   	pop    ecx
c000b625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b629:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b635:	e8 41 d6 01 00       	call   c0028c7b <__truncdfsf2>
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b641:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b648:	4b                   	dec    ebx
c000b649:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b64d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b654:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b658:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b65b:	e8 cb c6 01 00       	call   c0027d2b <__adddf3>
c000b660:	83 c4 10             	add    esp,0x10
c000b663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b667:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b673:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67b:	e8 28 cd 01 00       	call   c00283a8 <__muldf3>
c000b680:	59                   	pop    ecx
c000b681:	5f                   	pop    edi
c000b682:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b686:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b692:	e8 e4 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b69e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6a5:	4b                   	dec    ebx
c000b6a6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6aa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6b1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b8:	e8 6e c6 01 00       	call   c0027d2b <__adddf3>
c000b6bd:	83 c4 10             	add    esp,0x10
c000b6c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d8:	e8 cb cc 01 00       	call   c00283a8 <__muldf3>
c000b6dd:	5f                   	pop    edi
c000b6de:	5d                   	pop    ebp
c000b6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ef:	e8 87 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b6f4:	83 c4 10             	add    esp,0x10
c000b6f7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6fb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b702:	4b                   	dec    ebx
c000b703:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b707:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b70e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b712:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b715:	e8 11 c6 01 00       	call   c0027d2b <__adddf3>
c000b71a:	83 c4 10             	add    esp,0x10
c000b71d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b721:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b729:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b731:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b735:	e8 6e cc 01 00       	call   c00283a8 <__muldf3>
c000b73a:	5d                   	pop    ebp
c000b73b:	59                   	pop    ecx
c000b73c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b740:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74c:	e8 2a d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b758:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b75b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b75f:	4b                   	dec    ebx
c000b760:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b764:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b76b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b76f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b772:	e8 b4 c5 01 00       	call   c0027d2b <__adddf3>
c000b777:	83 c4 10             	add    esp,0x10
c000b77a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b77e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b792:	e8 11 cc 01 00       	call   c00283a8 <__muldf3>
c000b797:	59                   	pop    ecx
c000b798:	5f                   	pop    edi
c000b799:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a9:	e8 cd d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b7ae:	83 c4 10             	add    esp,0x10
c000b7b1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7b5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7bc:	4b                   	dec    ebx
c000b7bd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7cc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7cf:	e8 57 c5 01 00       	call   c0027d2b <__adddf3>
c000b7d4:	83 c4 10             	add    esp,0x10
c000b7d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7ef:	e8 b4 cb 01 00       	call   c00283a8 <__muldf3>
c000b7f4:	5f                   	pop    edi
c000b7f5:	5d                   	pop    ebp
c000b7f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	e8 70 d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b80b:	83 c4 10             	add    esp,0x10
c000b80e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b812:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b819:	4b                   	dec    ebx
c000b81a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b81e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b825:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b829:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b82c:	e8 fa c4 01 00       	call   c0027d2b <__adddf3>
c000b831:	83 c4 10             	add    esp,0x10
c000b834:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b838:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84c:	e8 57 cb 01 00       	call   c00283a8 <__muldf3>
c000b851:	5d                   	pop    ebp
c000b852:	59                   	pop    ecx
c000b853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b857:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	e8 13 d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b868:	83 c4 10             	add    esp,0x10
c000b86b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b86f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b876:	4b                   	dec    ebx
c000b877:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b87e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b882:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b886:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b889:	e8 9d c4 01 00       	call   c0027d2b <__adddf3>
c000b88e:	83 c4 10             	add    esp,0x10
c000b891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a9:	e8 fa ca 01 00       	call   c00283a8 <__muldf3>
c000b8ae:	59                   	pop    ecx
c000b8af:	5f                   	pop    edi
c000b8b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	e8 b6 d3 01 00       	call   c0028c7b <__truncdfsf2>
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	85 db                	test   ebx,ebx
c000b8ca:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8ce:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8d1:	0f 8f fe fc ff ff    	jg     c000b5d5 <calc_output_multi+0x837>
c000b8d7:	83 c4 4c             	add    esp,0x4c
c000b8da:	5b                   	pop    ebx
c000b8db:	5e                   	pop    esi
c000b8dc:	5f                   	pop    edi
c000b8dd:	5d                   	pop    ebp
c000b8de:	c3                   	ret    

c000b8df <double_to_fp>:
c000b8df:	83 ec 0c             	sub    esp,0xc
c000b8e2:	68 00 00 b0 40       	push   0x40b00000
c000b8e7:	6a 00                	push   0x0
c000b8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8f1:	e8 b2 ca 01 00       	call   c00283a8 <__muldf3>
c000b8f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8fe:	83 c4 1c             	add    esp,0x1c
c000b901:	e9 2a d5 01 00       	jmp    c0028e30 <lrint>

c000b906 <prepare_data>:
c000b906:	55                   	push   ebp
c000b907:	57                   	push   edi
c000b908:	56                   	push   esi
c000b909:	53                   	push   ebx
c000b90a:	83 ec 1c             	sub    esp,0x1c
c000b90d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b911:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b915:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b919:	0f 89 57 01 00 00    	jns    c000ba76 <prepare_data+0x170>
c000b91f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b922:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b925:	85 d2                	test   edx,edx
c000b927:	75 0d                	jne    c000b936 <prepare_data+0x30>
c000b929:	8d 14 36             	lea    edx,[esi+esi*1]
c000b92c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b92f:	29 d0                	sub    eax,edx
c000b931:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b934:	eb 44                	jmp    c000b97a <prepare_data+0x74>
c000b936:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b939:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b93c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b93f:	39 c1                	cmp    ecx,eax
c000b941:	7d 04                	jge    c000b947 <prepare_data+0x41>
c000b943:	29 d0                	sub    eax,edx
c000b945:	eb 2d                	jmp    c000b974 <prepare_data+0x6e>
c000b947:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b94d:	29 d7                	sub    edi,edx
c000b94f:	01 f7                	add    edi,esi
c000b951:	51                   	push   ecx
c000b952:	29 f2                	sub    edx,esi
c000b954:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b95b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b95e:	51                   	push   ecx
c000b95f:	52                   	push   edx
c000b960:	50                   	push   eax
c000b961:	e8 3a 4d ff ff       	call   c00006a0 <memmove>
c000b966:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b969:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b96c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b96f:	29 f0                	sub    eax,esi
c000b971:	83 c4 10             	add    esp,0x10
c000b974:	29 f0                	sub    eax,esi
c000b976:	79 02                	jns    c000b97a <prepare_data+0x74>
c000b978:	31 c0                	xor    eax,eax
c000b97a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b97d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b980:	29 ef                	sub    edi,ebp
c000b982:	39 c7                	cmp    edi,eax
c000b984:	7e 02                	jle    c000b988 <prepare_data+0x82>
c000b986:	89 c7                	mov    edi,eax
c000b988:	89 f8                	mov    eax,edi
c000b98a:	99                   	cdq    
c000b98b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b98e:	b8 15 00 00 00       	mov    eax,0x15
c000b993:	29 d7                	sub    edi,edx
c000b995:	0f 88 dd 00 00 00    	js     c000ba78 <prepare_data+0x172>
c000b99b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b99e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b9a1:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b9a4:	0f 8f ce 00 00 00    	jg     c000ba78 <prepare_data+0x172>
c000b9aa:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9b0:	50                   	push   eax
c000b9b1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b8:	50                   	push   eax
c000b9b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9bf:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9c2:	50                   	push   eax
c000b9c3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ca:	50                   	push   eax
c000b9cb:	e8 98 4d ff ff       	call   c0000768 <memcpy>
c000b9d0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9d3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9d6:	01 fd                	add    ebp,edi
c000b9d8:	01 f9                	add    ecx,edi
c000b9da:	83 c4 10             	add    esp,0x10
c000b9dd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9e0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9e3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9ea:	0f 85 86 00 00 00    	jne    c000ba76 <prepare_data+0x170>
c000b9f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9f3:	89 e8                	mov    eax,ebp
c000b9f5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f8:	29 c8                	sub    eax,ecx
c000b9fa:	39 f8                	cmp    eax,edi
c000b9fc:	7d 78                	jge    c000ba76 <prepare_data+0x170>
c000b9fe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ba02:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000ba06:	74 6e                	je     c000ba76 <prepare_data+0x170>
c000ba08:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba0f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba12:	29 ef                	sub    edi,ebp
c000ba14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba18:	7c 29                	jl     c000ba43 <prepare_data+0x13d>
c000ba1a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba1d:	29 f1                	sub    ecx,esi
c000ba1f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba26:	55                   	push   ebp
c000ba27:	50                   	push   eax
c000ba28:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba2b:	50                   	push   eax
c000ba2c:	52                   	push   edx
c000ba2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba31:	e8 6a 4c ff ff       	call   c00006a0 <memmove>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba3c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba43:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba46:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba49:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba4c:	83 c6 05             	add    esi,0x5
c000ba4f:	78 07                	js     c000ba58 <prepare_data+0x152>
c000ba51:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba54:	39 cf                	cmp    edi,ecx
c000ba56:	7e 04                	jle    c000ba5c <prepare_data+0x156>
c000ba58:	89 ce                	mov    esi,ecx
c000ba5a:	29 c6                	sub    esi,eax
c000ba5c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba5f:	51                   	push   ecx
c000ba60:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba67:	51                   	push   ecx
c000ba68:	6a 00                	push   0x0
c000ba6a:	50                   	push   eax
c000ba6b:	e8 18 4d ff ff       	call   c0000788 <memset>
c000ba70:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	31 c0                	xor    eax,eax
c000ba78:	83 c4 1c             	add    esp,0x1c
c000ba7b:	5b                   	pop    ebx
c000ba7c:	5e                   	pop    esi
c000ba7d:	5f                   	pop    edi
c000ba7e:	5d                   	pop    ebp
c000ba7f:	c3                   	ret    

c000ba80 <sinc_multichan_vari_process>:
c000ba80:	55                   	push   ebp
c000ba81:	ba 05 00 00 00       	mov    edx,0x5
c000ba86:	57                   	push   edi
c000ba87:	56                   	push   esi
c000ba88:	53                   	push   ebx
c000ba89:	83 ec 4c             	sub    esp,0x4c
c000ba8c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba90:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba94:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba97:	85 db                	test   ebx,ebx
c000ba99:	0f 84 9b 06 00 00    	je     c000c13a <sinc_multichan_vari_process+0x6ba>
c000ba9f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000baa2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000baa5:	0f af c5             	imul   eax,ebp
c000baa8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baab:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bab5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000babc:	0f af c5             	imul   eax,ebp
c000babf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bac2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bac5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bac7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bacb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bacf:	68 00 00 70 3f       	push   0x3f700000
c000bad4:	6a 00                	push   0x0
c000bad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bade:	e8 94 d1 01 00       	call   c0028c77 <__ltdf2>
c000bae3:	83 c4 10             	add    esp,0x10
c000bae6:	ba 16 00 00 00       	mov    edx,0x16
c000baeb:	85 c0                	test   eax,eax
c000baed:	0f 88 47 06 00 00    	js     c000c13a <sinc_multichan_vari_process+0x6ba>
c000baf3:	68 00 00 70 40       	push   0x40700000
c000baf8:	6a 00                	push   0x0
c000bafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb02:	e8 52 d1 01 00       	call   c0028c59 <__gtdf2>
c000bb07:	83 c4 10             	add    esp,0x10
c000bb0a:	ba 16 00 00 00       	mov    edx,0x16
c000bb0f:	85 c0                	test   eax,eax
c000bb11:	0f 8f 23 06 00 00    	jg     c000c13a <sinc_multichan_vari_process+0x6ba>
c000bb17:	83 ec 0c             	sub    esp,0xc
c000bb1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb1d:	e8 e9 ce 01 00       	call   c0028a0b <__floatsidf>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb2d:	68 00 00 00 40       	push   0x40000000
c000bb32:	6a 00                	push   0x0
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3c:	e8 ea c1 01 00       	call   c0027d2b <__adddf3>
c000bb41:	59                   	pop    ecx
c000bb42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb4a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb4d:	e8 b9 ce 01 00       	call   c0028a0b <__floatsidf>
c000bb52:	83 c4 10             	add    esp,0x10
c000bb55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb5d:	52                   	push   edx
c000bb5e:	50                   	push   eax
c000bb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	e8 20 cb 01 00       	call   c002868c <__divdf3>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb77:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb7a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb95:	e8 bf d0 01 00       	call   c0028c59 <__gtdf2>
c000bb9a:	83 c4 10             	add    esp,0x10
c000bb9d:	85 c0                	test   eax,eax
c000bb9f:	7e 2d                	jle    c000bbce <sinc_multichan_vari_process+0x14e>
c000bba1:	68 00 00 f0 3f       	push   0x3ff00000
c000bba6:	6a 00                	push   0x0
c000bba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb0:	e8 c2 d0 01 00       	call   c0028c77 <__ltdf2>
c000bbb5:	83 c4 10             	add    esp,0x10
c000bbb8:	85 c0                	test   eax,eax
c000bbba:	79 4d                	jns    c000bc09 <sinc_multichan_vari_process+0x189>
c000bbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbcc:	eb 1b                	jmp    c000bbe9 <sinc_multichan_vari_process+0x169>
c000bbce:	68 00 00 f0 3f       	push   0x3ff00000
c000bbd3:	6a 00                	push   0x0
c000bbd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbdd:	e8 95 d0 01 00       	call   c0028c77 <__ltdf2>
c000bbe2:	83 c4 10             	add    esp,0x10
c000bbe5:	85 c0                	test   eax,eax
c000bbe7:	79 20                	jns    c000bc09 <sinc_multichan_vari_process+0x189>
c000bbe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf9:	e8 8e ca 01 00       	call   c002868c <__divdf3>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc09:	50                   	push   eax
c000bc0a:	50                   	push   eax
c000bc0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc13:	e8 18 d2 01 00       	call   c0028e30 <lrint>
c000bc18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc1b:	40                   	inc    eax
c000bc1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc20:	0f af c5             	imul   eax,ebp
c000bc23:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc27:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc2e:	58                   	pop    eax
c000bc2f:	5a                   	pop    edx
c000bc30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc38:	e8 f3 d1 01 00       	call   c0028e30 <lrint>
c000bc3d:	83 ec 0c             	sub    esp,0xc
c000bc40:	50                   	push   eax
c000bc41:	e8 c5 cd 01 00       	call   c0028a0b <__floatsidf>
c000bc46:	83 c4 10             	add    esp,0x10
c000bc49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc51:	52                   	push   edx
c000bc52:	50                   	push   eax
c000bc53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc5b:	e8 1c c7 01 00       	call   c002837c <__subdf3>
c000bc60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc68:	83 c4 20             	add    esp,0x20
c000bc6b:	6a 00                	push   0x0
c000bc6d:	6a 00                	push   0x0
c000bc6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc77:	e8 fb cf 01 00       	call   c0028c77 <__ltdf2>
c000bc7c:	83 c4 10             	add    esp,0x10
c000bc7f:	85 c0                	test   eax,eax
c000bc81:	79 1f                	jns    c000bca2 <sinc_multichan_vari_process+0x222>
c000bc83:	68 00 00 f0 3f       	push   0x3ff00000
c000bc88:	6a 00                	push   0x0
c000bc8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc92:	e8 94 c0 01 00       	call   c0027d2b <__adddf3>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bca2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bca5:	83 ec 10             	sub    esp,0x10
c000bca8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bcac:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bcaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcbf:	e8 b8 c6 01 00       	call   c002837c <__subdf3>
c000bcc4:	83 c4 18             	add    esp,0x18
c000bcc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bccb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bccf:	52                   	push   edx
c000bcd0:	50                   	push   eax
c000bcd1:	e8 5a d1 01 00       	call   c0028e30 <lrint>
c000bcd6:	0f af e8             	imul   ebp,eax
c000bcd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcdd:	01 e8                	add    eax,ebp
c000bcdf:	99                   	cdq    
c000bce0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bce3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bce6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcee:	68 00 00 f0 3f       	push   0x3ff00000
c000bcf3:	6a 00                	push   0x0
c000bcf5:	e8 92 c9 01 00       	call   c002868c <__divdf3>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd05:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd0a:	68 23 42 92 0c       	push   0xc924223
c000bd0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd17:	e8 0f c0 01 00       	call   c0027d2b <__adddf3>
c000bd1c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd20:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd24:	83 c4 20             	add    esp,0x20
c000bd27:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd2f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd37:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd3a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd3d:	7d 50                	jge    c000bd8f <sinc_multichan_vari_process+0x30f>
c000bd3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd42:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd45:	01 c8                	add    eax,ecx
c000bd47:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd4a:	99                   	cdq    
c000bd4b:	f7 f9                	idiv   ecx
c000bd4d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd51:	7d 0c                	jge    c000bd5f <sinc_multichan_vari_process+0x2df>
c000bd53:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd56:	85 ed                	test   ebp,ebp
c000bd58:	79 6b                	jns    c000bdc5 <sinc_multichan_vari_process+0x345>
c000bd5a:	e9 e6 00 00 00       	jmp    c000be45 <sinc_multichan_vari_process+0x3c5>
c000bd5f:	50                   	push   eax
c000bd60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd64:	57                   	push   edi
c000bd65:	53                   	push   ebx
c000bd66:	e8 9b fb ff ff       	call   c000b906 <prepare_data>
c000bd6b:	83 c4 10             	add    esp,0x10
c000bd6e:	89 c2                	mov    edx,eax
c000bd70:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd73:	85 c0                	test   eax,eax
c000bd75:	0f 85 bf 03 00 00    	jne    c000c13a <sinc_multichan_vari_process+0x6ba>
c000bd7b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd7e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd81:	01 c8                	add    eax,ecx
c000bd83:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd86:	99                   	cdq    
c000bd87:	f7 f9                	idiv   ecx
c000bd89:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd8d:	7c c4                	jl     c000bd53 <sinc_multichan_vari_process+0x2d3>
c000bd8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd97:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd9a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bda5:	89 06                	mov    DWORD PTR [esi],eax
c000bda7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bdaa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bdad:	99                   	cdq    
c000bdae:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdb4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdb7:	99                   	cdq    
c000bdb8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdbb:	31 d2                	xor    edx,edx
c000bdbd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdc0:	e9 75 03 00 00       	jmp    c000c13a <sinc_multichan_vari_process+0x6ba>
c000bdc5:	83 ec 0c             	sub    esp,0xc
c000bdc8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdcb:	e8 3b cc 01 00       	call   c0028a0b <__floatsidf>
c000bdd0:	83 c4 10             	add    esp,0x10
c000bdd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bddb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 3b bf 01 00       	call   c0027d2b <__adddf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdf7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0b:	e8 1b bf 01 00       	call   c0027d2b <__adddf3>
c000be10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be1b:	e8 eb cb 01 00       	call   c0028a0b <__floatsidf>
c000be20:	83 c4 10             	add    esp,0x10
c000be23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be2b:	52                   	push   edx
c000be2c:	50                   	push   eax
c000be2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be35:	e8 3b ce 01 00       	call   c0028c75 <__gedf2>
c000be3a:	83 c4 10             	add    esp,0x10
c000be3d:	85 c0                	test   eax,eax
c000be3f:	0f 89 4a ff ff ff    	jns    c000bd8f <sinc_multichan_vari_process+0x30f>
c000be45:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be49:	0f 8e ed 00 00 00    	jle    c000bf3c <sinc_multichan_vari_process+0x4bc>
c000be4f:	83 ec 10             	sub    esp,0x10
c000be52:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be55:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be58:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be5b:	ff 36                	push   DWORD PTR [esi]
c000be5d:	e8 1a c5 01 00       	call   c002837c <__subdf3>
c000be62:	83 c4 18             	add    esp,0x18
c000be65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be6d:	52                   	push   edx
c000be6e:	50                   	push   eax
c000be6f:	e8 9c cf 01 00       	call   c0028e10 <fabs>
c000be74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be78:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be7c:	83 c4 10             	add    esp,0x10
c000be7f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be84:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be91:	e8 c3 cd 01 00       	call   c0028c59 <__gtdf2>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	0f 8e 9b 00 00 00    	jle    c000bf3c <sinc_multichan_vari_process+0x4bc>
c000bea1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bea3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beaa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beae:	52                   	push   edx
c000beaf:	50                   	push   eax
c000beb0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beb3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beb6:	e8 c1 c4 01 00       	call   c002837c <__subdf3>
c000bebb:	59                   	pop    ecx
c000bebc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bec0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bec7:	e8 3f cb 01 00       	call   c0028a0b <__floatsidf>
c000becc:	83 c4 10             	add    esp,0x10
c000becf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed7:	52                   	push   edx
c000bed8:	50                   	push   eax
c000bed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bedd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee1:	e8 c2 c4 01 00       	call   c00283a8 <__muldf3>
c000bee6:	5d                   	pop    ebp
c000bee7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beeb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beef:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bef2:	e8 14 cb 01 00       	call   c0028a0b <__floatsidf>
c000bef7:	83 c4 10             	add    esp,0x10
c000befa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000befe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf02:	52                   	push   edx
c000bf03:	50                   	push   eax
c000bf04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf0c:	e8 7b c7 01 00       	call   c002868c <__divdf3>
c000bf11:	83 c4 10             	add    esp,0x10
c000bf14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf2c:	e8 fa bd 01 00       	call   c0027d2b <__adddf3>
c000bf31:	83 c4 10             	add    esp,0x10
c000bf34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf3c:	83 ec 0c             	sub    esp,0xc
c000bf3f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf42:	e8 c4 ca 01 00       	call   c0028a0b <__floatsidf>
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf62:	e8 10 cd 01 00       	call   c0028c77 <__ltdf2>
c000bf67:	83 c4 10             	add    esp,0x10
c000bf6a:	85 c0                	test   eax,eax
c000bf6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf74:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf78:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf7c:	78 10                	js     c000bf8e <sinc_multichan_vari_process+0x50e>
c000bf7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf9e:	e8 05 c4 01 00       	call   c00283a8 <__muldf3>
c000bfa3:	59                   	pop    ecx
c000bfa4:	5d                   	pop    ebp
c000bfa5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfb5:	e8 25 f9 ff ff       	call   c000b8df <double_to_fp>
c000bfba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbe:	89 c5                	mov    ebp,eax
c000bfc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfcc:	e8 d7 c3 01 00       	call   c00283a8 <__muldf3>
c000bfd1:	83 c4 18             	add    esp,0x18
c000bfd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfdc:	52                   	push   edx
c000bfdd:	50                   	push   eax
c000bfde:	e8 fc f8 ff ff       	call   c000b8df <double_to_fp>
c000bfe3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfe6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfed:	8d 04 90             	lea    eax,[eax+edx*4]
c000bff0:	50                   	push   eax
c000bff1:	50                   	push   eax
c000bff2:	50                   	push   eax
c000bff3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bff6:	e8 10 ca 01 00       	call   c0028a0b <__floatsidf>
c000bffb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfff:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c013:	e8 74 c6 01 00       	call   c002868c <__divdf3>
c000c018:	83 c4 1c             	add    esp,0x1c
c000c01b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c01f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c023:	52                   	push   edx
c000c024:	89 ea                	mov    edx,ebp
c000c026:	50                   	push   eax
c000c027:	89 d8                	mov    eax,ebx
c000c029:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c02c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c030:	e8 69 ed ff ff       	call   c000ad9e <calc_output_multi>
c000c035:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c038:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c03b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c043:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c047:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c04b:	e8 3c c6 01 00       	call   c002868c <__divdf3>
c000c050:	83 c4 10             	add    esp,0x10
c000c053:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c057:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c05b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c063:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c067:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c06b:	e8 bb bc 01 00       	call   c0027d2b <__adddf3>
c000c070:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c074:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c078:	83 c4 28             	add    esp,0x28
c000c07b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c083:	e8 a8 cd 01 00       	call   c0028e30 <lrint>
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	50                   	push   eax
c000c08c:	e8 7a c9 01 00       	call   c0028a0b <__floatsidf>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c098:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c09c:	52                   	push   edx
c000c09d:	50                   	push   eax
c000c09e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a6:	e8 d1 c2 01 00       	call   c002837c <__subdf3>
c000c0ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b3:	83 c4 20             	add    esp,0x20
c000c0b6:	6a 00                	push   0x0
c000c0b8:	6a 00                	push   0x0
c000c0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c2:	e8 b0 cb 01 00       	call   c0028c77 <__ltdf2>
c000c0c7:	83 c4 10             	add    esp,0x10
c000c0ca:	85 c0                	test   eax,eax
c000c0cc:	79 20                	jns    c000c0ee <sinc_multichan_vari_process+0x66e>
c000c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0de:	e8 48 bc 01 00       	call   c0027d2b <__adddf3>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0ee:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0f1:	83 ec 10             	sub    esp,0x10
c000c0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c103:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c107:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c10b:	e8 6c c2 01 00       	call   c002837c <__subdf3>
c000c110:	83 c4 18             	add    esp,0x18
c000c113:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c117:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c11b:	52                   	push   edx
c000c11c:	50                   	push   eax
c000c11d:	e8 0e cd 01 00       	call   c0028e30 <lrint>
c000c122:	0f af e8             	imul   ebp,eax
c000c125:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c129:	83 c4 10             	add    esp,0x10
c000c12c:	01 e8                	add    eax,ebp
c000c12e:	99                   	cdq    
c000c12f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c132:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c135:	e9 fd fb ff ff       	jmp    c000bd37 <sinc_multichan_vari_process+0x2b7>
c000c13a:	83 c4 4c             	add    esp,0x4c
c000c13d:	89 d0                	mov    eax,edx
c000c13f:	5b                   	pop    ebx
c000c140:	5e                   	pop    esi
c000c141:	5f                   	pop    edi
c000c142:	5d                   	pop    ebp
c000c143:	c3                   	ret    

c000c144 <sinc_hex_vari_process>:
c000c144:	55                   	push   ebp
c000c145:	ba 05 00 00 00       	mov    edx,0x5
c000c14a:	57                   	push   edi
c000c14b:	56                   	push   esi
c000c14c:	53                   	push   ebx
c000c14d:	83 ec 4c             	sub    esp,0x4c
c000c150:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c154:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c158:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c15b:	85 db                	test   ebx,ebx
c000c15d:	0f 84 9c 06 00 00    	je     c000c7ff <sinc_hex_vari_process+0x6bb>
c000c163:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c166:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c169:	0f af c7             	imul   eax,edi
c000c16c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c16f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c172:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c179:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c180:	0f af c7             	imul   eax,edi
c000c183:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c186:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c189:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c18c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c190:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c194:	68 00 00 70 3f       	push   0x3f700000
c000c199:	6a 00                	push   0x0
c000c19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a3:	e8 cf ca 01 00       	call   c0028c77 <__ltdf2>
c000c1a8:	83 c4 10             	add    esp,0x10
c000c1ab:	ba 16 00 00 00       	mov    edx,0x16
c000c1b0:	85 c0                	test   eax,eax
c000c1b2:	0f 88 47 06 00 00    	js     c000c7ff <sinc_hex_vari_process+0x6bb>
c000c1b8:	68 00 00 70 40       	push   0x40700000
c000c1bd:	6a 00                	push   0x0
c000c1bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c7:	e8 8d ca 01 00       	call   c0028c59 <__gtdf2>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	ba 16 00 00 00       	mov    edx,0x16
c000c1d4:	85 c0                	test   eax,eax
c000c1d6:	0f 8f 23 06 00 00    	jg     c000c7ff <sinc_hex_vari_process+0x6bb>
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1e2:	e8 24 c8 01 00       	call   c0028a0b <__floatsidf>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1f2:	68 00 00 00 40       	push   0x40000000
c000c1f7:	6a 00                	push   0x0
c000c1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c201:	e8 25 bb 01 00       	call   c0027d2b <__adddf3>
c000c206:	59                   	pop    ecx
c000c207:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c20b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c20f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c212:	e8 f4 c7 01 00       	call   c0028a0b <__floatsidf>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c21e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c222:	52                   	push   edx
c000c223:	50                   	push   eax
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	e8 5b c4 01 00       	call   c002868c <__divdf3>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c23c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c23f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c242:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c246:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c25a:	e8 fa c9 01 00       	call   c0028c59 <__gtdf2>
c000c25f:	83 c4 10             	add    esp,0x10
c000c262:	85 c0                	test   eax,eax
c000c264:	7e 2d                	jle    c000c293 <sinc_hex_vari_process+0x14f>
c000c266:	68 00 00 f0 3f       	push   0x3ff00000
c000c26b:	6a 00                	push   0x0
c000c26d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c275:	e8 fd c9 01 00       	call   c0028c77 <__ltdf2>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	85 c0                	test   eax,eax
c000c27f:	79 4d                	jns    c000c2ce <sinc_hex_vari_process+0x18a>
c000c281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c285:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c289:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c28d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c291:	eb 1b                	jmp    c000c2ae <sinc_hex_vari_process+0x16a>
c000c293:	68 00 00 f0 3f       	push   0x3ff00000
c000c298:	6a 00                	push   0x0
c000c29a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2a2:	e8 d0 c9 01 00       	call   c0028c77 <__ltdf2>
c000c2a7:	83 c4 10             	add    esp,0x10
c000c2aa:	85 c0                	test   eax,eax
c000c2ac:	79 20                	jns    c000c2ce <sinc_hex_vari_process+0x18a>
c000c2ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2be:	e8 c9 c3 01 00       	call   c002868c <__divdf3>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2ce:	50                   	push   eax
c000c2cf:	50                   	push   eax
c000c2d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d8:	e8 53 cb 01 00       	call   c0028e30 <lrint>
c000c2dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2e0:	40                   	inc    eax
c000c2e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e5:	0f af c7             	imul   eax,edi
c000c2e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f3:	58                   	pop    eax
c000c2f4:	5a                   	pop    edx
c000c2f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2fd:	e8 2e cb 01 00       	call   c0028e30 <lrint>
c000c302:	83 ec 0c             	sub    esp,0xc
c000c305:	50                   	push   eax
c000c306:	e8 00 c7 01 00       	call   c0028a0b <__floatsidf>
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c312:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c31c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c320:	e8 57 c0 01 00       	call   c002837c <__subdf3>
c000c325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c32d:	83 c4 20             	add    esp,0x20
c000c330:	6a 00                	push   0x0
c000c332:	6a 00                	push   0x0
c000c334:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c338:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c33c:	e8 36 c9 01 00       	call   c0028c77 <__ltdf2>
c000c341:	83 c4 10             	add    esp,0x10
c000c344:	85 c0                	test   eax,eax
c000c346:	79 1f                	jns    c000c367 <sinc_hex_vari_process+0x223>
c000c348:	68 00 00 f0 3f       	push   0x3ff00000
c000c34d:	6a 00                	push   0x0
c000c34f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c357:	e8 cf b9 01 00       	call   c0027d2b <__adddf3>
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c363:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c367:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c36a:	83 ec 10             	sub    esp,0x10
c000c36d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c371:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c380:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c384:	e8 f3 bf 01 00       	call   c002837c <__subdf3>
c000c389:	83 c4 18             	add    esp,0x18
c000c38c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c390:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c394:	52                   	push   edx
c000c395:	50                   	push   eax
c000c396:	e8 95 ca 01 00       	call   c0028e30 <lrint>
c000c39b:	0f af f8             	imul   edi,eax
c000c39e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3a2:	01 f8                	add    eax,edi
c000c3a4:	99                   	cdq    
c000c3a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b8:	6a 00                	push   0x0
c000c3ba:	e8 cd c2 01 00       	call   c002868c <__divdf3>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ca:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3cf:	68 23 42 92 0c       	push   0xc924223
c000c3d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3dc:	e8 4a b9 01 00       	call   c0027d2b <__adddf3>
c000c3e1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3e5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e9:	83 c4 20             	add    esp,0x20
c000c3ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3f4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ff:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c402:	7d 50                	jge    c000c454 <sinc_hex_vari_process+0x310>
c000c404:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c407:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c40a:	01 c8                	add    eax,ecx
c000c40c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c40f:	99                   	cdq    
c000c410:	f7 f9                	idiv   ecx
c000c412:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c416:	7d 0c                	jge    c000c424 <sinc_hex_vari_process+0x2e0>
c000c418:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c41b:	85 ff                	test   edi,edi
c000c41d:	79 6c                	jns    c000c48b <sinc_hex_vari_process+0x347>
c000c41f:	e9 e7 00 00 00       	jmp    c000c50b <sinc_hex_vari_process+0x3c7>
c000c424:	50                   	push   eax
c000c425:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c429:	56                   	push   esi
c000c42a:	53                   	push   ebx
c000c42b:	e8 d6 f4 ff ff       	call   c000b906 <prepare_data>
c000c430:	83 c4 10             	add    esp,0x10
c000c433:	89 c2                	mov    edx,eax
c000c435:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c438:	85 c0                	test   eax,eax
c000c43a:	0f 85 bf 03 00 00    	jne    c000c7ff <sinc_hex_vari_process+0x6bb>
c000c440:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c443:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c446:	01 c8                	add    eax,ecx
c000c448:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c44b:	99                   	cdq    
c000c44c:	f7 f9                	idiv   ecx
c000c44e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c452:	7c c4                	jl     c000c418 <sinc_hex_vari_process+0x2d4>
c000c454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c45c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c45f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c466:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c46a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c46d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c470:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c473:	99                   	cdq    
c000c474:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c477:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c47a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c47d:	99                   	cdq    
c000c47e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c481:	31 d2                	xor    edx,edx
c000c483:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c486:	e9 74 03 00 00       	jmp    c000c7ff <sinc_hex_vari_process+0x6bb>
c000c48b:	83 ec 0c             	sub    esp,0xc
c000c48e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c491:	e8 75 c5 01 00       	call   c0028a0b <__floatsidf>
c000c496:	83 c4 10             	add    esp,0x10
c000c499:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c49d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 75 b8 01 00       	call   c0027d2b <__adddf3>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d1:	e8 55 b8 01 00       	call   c0027d2b <__adddf3>
c000c4d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4e1:	e8 25 c5 01 00       	call   c0028a0b <__floatsidf>
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4f1:	52                   	push   edx
c000c4f2:	50                   	push   eax
c000c4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4fb:	e8 75 c7 01 00       	call   c0028c75 <__gedf2>
c000c500:	83 c4 10             	add    esp,0x10
c000c503:	85 c0                	test   eax,eax
c000c505:	0f 89 49 ff ff ff    	jns    c000c454 <sinc_hex_vari_process+0x310>
c000c50b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c50f:	0f 8e ef 00 00 00    	jle    c000c604 <sinc_hex_vari_process+0x4c0>
c000c515:	83 ec 10             	sub    esp,0x10
c000c518:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c51b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c51e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c521:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c524:	e8 53 be 01 00       	call   c002837c <__subdf3>
c000c529:	83 c4 18             	add    esp,0x18
c000c52c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c530:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c534:	52                   	push   edx
c000c535:	50                   	push   eax
c000c536:	e8 d5 c8 01 00       	call   c0028e10 <fabs>
c000c53b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c53f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c543:	83 c4 10             	add    esp,0x10
c000c546:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c54b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c558:	e8 fc c6 01 00       	call   c0028c59 <__gtdf2>
c000c55d:	83 c4 10             	add    esp,0x10
c000c560:	85 c0                	test   eax,eax
c000c562:	0f 8e 9c 00 00 00    	jle    c000c604 <sinc_hex_vari_process+0x4c0>
c000c568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c56b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c56e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c572:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c576:	52                   	push   edx
c000c577:	50                   	push   eax
c000c578:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c57b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c57e:	e8 f9 bd 01 00       	call   c002837c <__subdf3>
c000c583:	59                   	pop    ecx
c000c584:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c588:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c58c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c58f:	e8 77 c4 01 00       	call   c0028a0b <__floatsidf>
c000c594:	83 c4 10             	add    esp,0x10
c000c597:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c59b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59f:	52                   	push   edx
c000c5a0:	50                   	push   eax
c000c5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a9:	e8 fa bd 01 00       	call   c00283a8 <__muldf3>
c000c5ae:	5f                   	pop    edi
c000c5af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5b3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5b7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5ba:	e8 4c c4 01 00       	call   c0028a0b <__floatsidf>
c000c5bf:	83 c4 10             	add    esp,0x10
c000c5c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ca:	52                   	push   edx
c000c5cb:	50                   	push   eax
c000c5cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5d4:	e8 b3 c0 01 00       	call   c002868c <__divdf3>
c000c5d9:	83 c4 10             	add    esp,0x10
c000c5dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5e0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5f4:	e8 32 b7 01 00       	call   c0027d2b <__adddf3>
c000c5f9:	83 c4 10             	add    esp,0x10
c000c5fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c600:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c604:	83 ec 0c             	sub    esp,0xc
c000c607:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c60a:	e8 fc c3 01 00       	call   c0028a0b <__floatsidf>
c000c60f:	83 c4 10             	add    esp,0x10
c000c612:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c616:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62a:	e8 48 c6 01 00       	call   c0028c77 <__ltdf2>
c000c62f:	83 c4 10             	add    esp,0x10
c000c632:	85 c0                	test   eax,eax
c000c634:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c638:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c63c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c640:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c644:	78 10                	js     c000c656 <sinc_hex_vari_process+0x512>
c000c646:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c64a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c64e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c652:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c65a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c65e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c662:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c666:	e8 3d bd 01 00       	call   c00283a8 <__muldf3>
c000c66b:	59                   	pop    ecx
c000c66c:	5f                   	pop    edi
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c67d:	e8 5d f2 ff ff       	call   c000b8df <double_to_fp>
c000c682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c686:	89 c7                	mov    edi,eax
c000c688:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c68c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c690:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c694:	e8 0f bd 01 00       	call   c00283a8 <__muldf3>
c000c699:	83 c4 18             	add    esp,0x18
c000c69c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6a4:	52                   	push   edx
c000c6a5:	50                   	push   eax
c000c6a6:	e8 34 f2 ff ff       	call   c000b8df <double_to_fp>
c000c6ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6b2:	83 c4 0c             	add    esp,0xc
c000c6b5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6bb:	50                   	push   eax
c000c6bc:	50                   	push   eax
c000c6bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6c0:	e8 46 c3 01 00       	call   c0028a0b <__floatsidf>
c000c6c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6dd:	e8 aa bf 01 00       	call   c002868c <__divdf3>
c000c6e2:	83 c4 18             	add    esp,0x18
c000c6e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ed:	52                   	push   edx
c000c6ee:	89 fa                	mov    edx,edi
c000c6f0:	50                   	push   eax
c000c6f1:	89 d8                	mov    eax,ebx
c000c6f3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6f7:	e8 50 de ff ff       	call   c000a54c <calc_output_hex>
c000c6fc:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c70c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c710:	e8 77 bf 01 00       	call   c002868c <__divdf3>
c000c715:	83 c4 10             	add    esp,0x10
c000c718:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c71c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c728:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c72c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c730:	e8 f6 b5 01 00       	call   c0027d2b <__adddf3>
c000c735:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c739:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c73d:	83 c4 18             	add    esp,0x18
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c748:	e8 e3 c6 01 00       	call   c0028e30 <lrint>
c000c74d:	83 ec 0c             	sub    esp,0xc
c000c750:	50                   	push   eax
c000c751:	e8 b5 c2 01 00       	call   c0028a0b <__floatsidf>
c000c756:	83 c4 10             	add    esp,0x10
c000c759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c761:	52                   	push   edx
c000c762:	50                   	push   eax
c000c763:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c767:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c76b:	e8 0c bc 01 00       	call   c002837c <__subdf3>
c000c770:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c774:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c778:	83 c4 20             	add    esp,0x20
c000c77b:	6a 00                	push   0x0
c000c77d:	6a 00                	push   0x0
c000c77f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c787:	e8 eb c4 01 00       	call   c0028c77 <__ltdf2>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	85 c0                	test   eax,eax
c000c791:	79 20                	jns    c000c7b3 <sinc_hex_vari_process+0x66f>
c000c793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a3:	e8 83 b5 01 00       	call   c0027d2b <__adddf3>
c000c7a8:	83 c4 10             	add    esp,0x10
c000c7ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7b3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7b6:	83 ec 10             	sub    esp,0x10
c000c7b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7bd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7d0:	e8 a7 bb 01 00       	call   c002837c <__subdf3>
c000c7d5:	83 c4 18             	add    esp,0x18
c000c7d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7e0:	52                   	push   edx
c000c7e1:	50                   	push   eax
c000c7e2:	e8 49 c6 01 00       	call   c0028e30 <lrint>
c000c7e7:	0f af f8             	imul   edi,eax
c000c7ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7ee:	83 c4 10             	add    esp,0x10
c000c7f1:	01 f8                	add    eax,edi
c000c7f3:	99                   	cdq    
c000c7f4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7f7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7fa:	e9 fd fb ff ff       	jmp    c000c3fc <sinc_hex_vari_process+0x2b8>
c000c7ff:	83 c4 4c             	add    esp,0x4c
c000c802:	89 d0                	mov    eax,edx
c000c804:	5b                   	pop    ebx
c000c805:	5e                   	pop    esi
c000c806:	5f                   	pop    edi
c000c807:	5d                   	pop    ebp
c000c808:	c3                   	ret    

c000c809 <sinc_quad_vari_process>:
c000c809:	55                   	push   ebp
c000c80a:	ba 05 00 00 00       	mov    edx,0x5
c000c80f:	57                   	push   edi
c000c810:	56                   	push   esi
c000c811:	53                   	push   ebx
c000c812:	83 ec 4c             	sub    esp,0x4c
c000c815:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c819:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c81d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c820:	85 db                	test   ebx,ebx
c000c822:	0f 84 9c 06 00 00    	je     c000cec4 <sinc_quad_vari_process+0x6bb>
c000c828:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c82b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c82e:	0f af c7             	imul   eax,edi
c000c831:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c834:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c837:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c83e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c845:	0f af c7             	imul   eax,edi
c000c848:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c84b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c84e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c851:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c859:	68 00 00 70 3f       	push   0x3f700000
c000c85e:	6a 00                	push   0x0
c000c860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c868:	e8 0a c4 01 00       	call   c0028c77 <__ltdf2>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	ba 16 00 00 00       	mov    edx,0x16
c000c875:	85 c0                	test   eax,eax
c000c877:	0f 88 47 06 00 00    	js     c000cec4 <sinc_quad_vari_process+0x6bb>
c000c87d:	68 00 00 70 40       	push   0x40700000
c000c882:	6a 00                	push   0x0
c000c884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88c:	e8 c8 c3 01 00       	call   c0028c59 <__gtdf2>
c000c891:	83 c4 10             	add    esp,0x10
c000c894:	ba 16 00 00 00       	mov    edx,0x16
c000c899:	85 c0                	test   eax,eax
c000c89b:	0f 8f 23 06 00 00    	jg     c000cec4 <sinc_quad_vari_process+0x6bb>
c000c8a1:	83 ec 0c             	sub    esp,0xc
c000c8a4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c8a7:	e8 5f c1 01 00       	call   c0028a0b <__floatsidf>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8b7:	68 00 00 00 40       	push   0x40000000
c000c8bc:	6a 00                	push   0x0
c000c8be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c6:	e8 60 b4 01 00       	call   c0027d2b <__adddf3>
c000c8cb:	59                   	pop    ecx
c000c8cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8d7:	e8 2f c1 01 00       	call   c0028a0b <__floatsidf>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8e7:	52                   	push   edx
c000c8e8:	50                   	push   eax
c000c8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	e8 96 bd 01 00       	call   c002868c <__divdf3>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c901:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c904:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c907:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c90b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91f:	e8 35 c3 01 00       	call   c0028c59 <__gtdf2>
c000c924:	83 c4 10             	add    esp,0x10
c000c927:	85 c0                	test   eax,eax
c000c929:	7e 2d                	jle    c000c958 <sinc_quad_vari_process+0x14f>
c000c92b:	68 00 00 f0 3f       	push   0x3ff00000
c000c930:	6a 00                	push   0x0
c000c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93a:	e8 38 c3 01 00       	call   c0028c77 <__ltdf2>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	85 c0                	test   eax,eax
c000c944:	79 4d                	jns    c000c993 <sinc_quad_vari_process+0x18a>
c000c946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c94a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c94e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c952:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c956:	eb 1b                	jmp    c000c973 <sinc_quad_vari_process+0x16a>
c000c958:	68 00 00 f0 3f       	push   0x3ff00000
c000c95d:	6a 00                	push   0x0
c000c95f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c963:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c967:	e8 0b c3 01 00       	call   c0028c77 <__ltdf2>
c000c96c:	83 c4 10             	add    esp,0x10
c000c96f:	85 c0                	test   eax,eax
c000c971:	79 20                	jns    c000c993 <sinc_quad_vari_process+0x18a>
c000c973:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c977:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c97b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c983:	e8 04 bd 01 00       	call   c002868c <__divdf3>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c993:	50                   	push   eax
c000c994:	50                   	push   eax
c000c995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c999:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c99d:	e8 8e c4 01 00       	call   c0028e30 <lrint>
c000c9a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c9a5:	40                   	inc    eax
c000c9a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9aa:	0f af c7             	imul   eax,edi
c000c9ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b8:	58                   	pop    eax
c000c9b9:	5a                   	pop    edx
c000c9ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9c2:	e8 69 c4 01 00       	call   c0028e30 <lrint>
c000c9c7:	83 ec 0c             	sub    esp,0xc
c000c9ca:	50                   	push   eax
c000c9cb:	e8 3b c0 01 00       	call   c0028a0b <__floatsidf>
c000c9d0:	83 c4 10             	add    esp,0x10
c000c9d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e5:	e8 92 b9 01 00       	call   c002837c <__subdf3>
c000c9ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f2:	83 c4 20             	add    esp,0x20
c000c9f5:	6a 00                	push   0x0
c000c9f7:	6a 00                	push   0x0
c000c9f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca01:	e8 71 c2 01 00       	call   c0028c77 <__ltdf2>
c000ca06:	83 c4 10             	add    esp,0x10
c000ca09:	85 c0                	test   eax,eax
c000ca0b:	79 1f                	jns    c000ca2c <sinc_quad_vari_process+0x223>
c000ca0d:	68 00 00 f0 3f       	push   0x3ff00000
c000ca12:	6a 00                	push   0x0
c000ca14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca1c:	e8 0a b3 01 00       	call   c0027d2b <__adddf3>
c000ca21:	83 c4 10             	add    esp,0x10
c000ca24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca2c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca2f:	83 ec 10             	sub    esp,0x10
c000ca32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca36:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca49:	e8 2e b9 01 00       	call   c002837c <__subdf3>
c000ca4e:	83 c4 18             	add    esp,0x18
c000ca51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca59:	52                   	push   edx
c000ca5a:	50                   	push   eax
c000ca5b:	e8 d0 c3 01 00       	call   c0028e30 <lrint>
c000ca60:	0f af f8             	imul   edi,eax
c000ca63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca67:	01 f8                	add    eax,edi
c000ca69:	99                   	cdq    
c000ca6a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca6d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca78:	68 00 00 f0 3f       	push   0x3ff00000
c000ca7d:	6a 00                	push   0x0
c000ca7f:	e8 08 bc 01 00       	call   c002868c <__divdf3>
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca8f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca94:	68 23 42 92 0c       	push   0xc924223
c000ca99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa1:	e8 85 b2 01 00       	call   c0027d2b <__adddf3>
c000caa6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caaa:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caae:	83 c4 20             	add    esp,0x20
c000cab1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cac1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cac4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cac7:	7d 50                	jge    c000cb19 <sinc_quad_vari_process+0x310>
c000cac9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cacc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cacf:	01 c8                	add    eax,ecx
c000cad1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cad4:	99                   	cdq    
c000cad5:	f7 f9                	idiv   ecx
c000cad7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cadb:	7d 0c                	jge    c000cae9 <sinc_quad_vari_process+0x2e0>
c000cadd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cae0:	85 ff                	test   edi,edi
c000cae2:	79 6c                	jns    c000cb50 <sinc_quad_vari_process+0x347>
c000cae4:	e9 e7 00 00 00       	jmp    c000cbd0 <sinc_quad_vari_process+0x3c7>
c000cae9:	50                   	push   eax
c000caea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caee:	56                   	push   esi
c000caef:	53                   	push   ebx
c000caf0:	e8 11 ee ff ff       	call   c000b906 <prepare_data>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	89 c2                	mov    edx,eax
c000cafa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cafd:	85 c0                	test   eax,eax
c000caff:	0f 85 bf 03 00 00    	jne    c000cec4 <sinc_quad_vari_process+0x6bb>
c000cb05:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb08:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb0b:	01 c8                	add    eax,ecx
c000cb0d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb10:	99                   	cdq    
c000cb11:	f7 f9                	idiv   ecx
c000cb13:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb17:	7c c4                	jl     c000cadd <sinc_quad_vari_process+0x2d4>
c000cb19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb21:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb24:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb35:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb38:	99                   	cdq    
c000cb39:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb3f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb42:	99                   	cdq    
c000cb43:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb46:	31 d2                	xor    edx,edx
c000cb48:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb4b:	e9 74 03 00 00       	jmp    c000cec4 <sinc_quad_vari_process+0x6bb>
c000cb50:	83 ec 0c             	sub    esp,0xc
c000cb53:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb56:	e8 b0 be 01 00       	call   c0028a0b <__floatsidf>
c000cb5b:	83 c4 10             	add    esp,0x10
c000cb5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb62:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 b0 b1 01 00       	call   c0027d2b <__adddf3>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb96:	e8 90 b1 01 00       	call   c0027d2b <__adddf3>
c000cb9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cba2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cba6:	e8 60 be 01 00       	call   c0028a0b <__floatsidf>
c000cbab:	83 c4 10             	add    esp,0x10
c000cbae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbb6:	52                   	push   edx
c000cbb7:	50                   	push   eax
c000cbb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbc0:	e8 b0 c0 01 00       	call   c0028c75 <__gedf2>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	85 c0                	test   eax,eax
c000cbca:	0f 89 49 ff ff ff    	jns    c000cb19 <sinc_quad_vari_process+0x310>
c000cbd0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbd4:	0f 8e ef 00 00 00    	jle    c000ccc9 <sinc_quad_vari_process+0x4c0>
c000cbda:	83 ec 10             	sub    esp,0x10
c000cbdd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbe0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbe3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbe6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe9:	e8 8e b7 01 00       	call   c002837c <__subdf3>
c000cbee:	83 c4 18             	add    esp,0x18
c000cbf1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbf5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf9:	52                   	push   edx
c000cbfa:	50                   	push   eax
c000cbfb:	e8 10 c2 01 00       	call   c0028e10 <fabs>
c000cc00:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc04:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc08:	83 c4 10             	add    esp,0x10
c000cc0b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc10:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc1d:	e8 37 c0 01 00       	call   c0028c59 <__gtdf2>
c000cc22:	83 c4 10             	add    esp,0x10
c000cc25:	85 c0                	test   eax,eax
c000cc27:	0f 8e 9c 00 00 00    	jle    c000ccc9 <sinc_quad_vari_process+0x4c0>
c000cc2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc30:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc37:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc3b:	52                   	push   edx
c000cc3c:	50                   	push   eax
c000cc3d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc40:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc43:	e8 34 b7 01 00       	call   c002837c <__subdf3>
c000cc48:	59                   	pop    ecx
c000cc49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc51:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc54:	e8 b2 bd 01 00       	call   c0028a0b <__floatsidf>
c000cc59:	83 c4 10             	add    esp,0x10
c000cc5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc64:	52                   	push   edx
c000cc65:	50                   	push   eax
c000cc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6e:	e8 35 b7 01 00       	call   c00283a8 <__muldf3>
c000cc73:	5f                   	pop    edi
c000cc74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc78:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc7c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc7f:	e8 87 bd 01 00       	call   c0028a0b <__floatsidf>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc8f:	52                   	push   edx
c000cc90:	50                   	push   eax
c000cc91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc99:	e8 ee b9 01 00       	call   c002868c <__divdf3>
c000cc9e:	83 c4 10             	add    esp,0x10
c000cca1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cca5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb9:	e8 6d b0 01 00       	call   c0027d2b <__adddf3>
c000ccbe:	83 c4 10             	add    esp,0x10
c000ccc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccc5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cccf:	e8 37 bd 01 00       	call   c0028a0b <__floatsidf>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccdb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccef:	e8 83 bf 01 00       	call   c0028c77 <__ltdf2>
c000ccf4:	83 c4 10             	add    esp,0x10
c000ccf7:	85 c0                	test   eax,eax
c000ccf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccfd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd01:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cd05:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd09:	78 10                	js     c000cd1b <sinc_quad_vari_process+0x512>
c000cd0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd2b:	e8 78 b6 01 00       	call   c00283a8 <__muldf3>
c000cd30:	59                   	pop    ecx
c000cd31:	5f                   	pop    edi
c000cd32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd42:	e8 98 eb ff ff       	call   c000b8df <double_to_fp>
c000cd47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd4b:	89 c7                	mov    edi,eax
c000cd4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd59:	e8 4a b6 01 00       	call   c00283a8 <__muldf3>
c000cd5e:	83 c4 18             	add    esp,0x18
c000cd61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd69:	52                   	push   edx
c000cd6a:	50                   	push   eax
c000cd6b:	e8 6f eb ff ff       	call   c000b8df <double_to_fp>
c000cd70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd73:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd77:	83 c4 0c             	add    esp,0xc
c000cd7a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd7d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd80:	50                   	push   eax
c000cd81:	50                   	push   eax
c000cd82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd85:	e8 81 bc 01 00       	call   c0028a0b <__floatsidf>
c000cd8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd8e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda2:	e8 e5 b8 01 00       	call   c002868c <__divdf3>
c000cda7:	83 c4 18             	add    esp,0x18
c000cdaa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdb2:	52                   	push   edx
c000cdb3:	89 fa                	mov    edx,edi
c000cdb5:	50                   	push   eax
c000cdb6:	89 d8                	mov    eax,ebx
c000cdb8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdbc:	e8 a5 d1 ff ff       	call   c0009f66 <calc_output_quad>
c000cdc1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd5:	e8 b2 b8 01 00       	call   c002868c <__divdf3>
c000cdda:	83 c4 10             	add    esp,0x10
c000cddd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cde1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cded:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdf5:	e8 31 af 01 00       	call   c0027d2b <__adddf3>
c000cdfa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdfe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ce02:	83 c4 18             	add    esp,0x18
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce0d:	e8 1e c0 01 00       	call   c0028e30 <lrint>
c000ce12:	83 ec 0c             	sub    esp,0xc
c000ce15:	50                   	push   eax
c000ce16:	e8 f0 bb 01 00       	call   c0028a0b <__floatsidf>
c000ce1b:	83 c4 10             	add    esp,0x10
c000ce1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce26:	52                   	push   edx
c000ce27:	50                   	push   eax
c000ce28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce30:	e8 47 b5 01 00       	call   c002837c <__subdf3>
c000ce35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce3d:	83 c4 20             	add    esp,0x20
c000ce40:	6a 00                	push   0x0
c000ce42:	6a 00                	push   0x0
c000ce44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce4c:	e8 26 be 01 00       	call   c0028c77 <__ltdf2>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	85 c0                	test   eax,eax
c000ce56:	79 20                	jns    c000ce78 <sinc_quad_vari_process+0x66f>
c000ce58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce68:	e8 be ae 01 00       	call   c0027d2b <__adddf3>
c000ce6d:	83 c4 10             	add    esp,0x10
c000ce70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce78:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce7b:	83 ec 10             	sub    esp,0x10
c000ce7e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce95:	e8 e2 b4 01 00       	call   c002837c <__subdf3>
c000ce9a:	83 c4 18             	add    esp,0x18
c000ce9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cea1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cea5:	52                   	push   edx
c000cea6:	50                   	push   eax
c000cea7:	e8 84 bf 01 00       	call   c0028e30 <lrint>
c000ceac:	0f af f8             	imul   edi,eax
c000ceaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	01 f8                	add    eax,edi
c000ceb8:	99                   	cdq    
c000ceb9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cebc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cebf:	e9 fd fb ff ff       	jmp    c000cac1 <sinc_quad_vari_process+0x2b8>
c000cec4:	83 c4 4c             	add    esp,0x4c
c000cec7:	89 d0                	mov    eax,edx
c000cec9:	5b                   	pop    ebx
c000ceca:	5e                   	pop    esi
c000cecb:	5f                   	pop    edi
c000cecc:	5d                   	pop    ebp
c000cecd:	c3                   	ret    

c000cece <sinc_stereo_vari_process>:
c000cece:	55                   	push   ebp
c000cecf:	ba 05 00 00 00       	mov    edx,0x5
c000ced4:	57                   	push   edi
c000ced5:	56                   	push   esi
c000ced6:	53                   	push   ebx
c000ced7:	83 ec 4c             	sub    esp,0x4c
c000ceda:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cede:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cee2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cee5:	85 db                	test   ebx,ebx
c000cee7:	0f 84 9c 06 00 00    	je     c000d589 <sinc_stereo_vari_process+0x6bb>
c000ceed:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cef0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cef3:	0f af c7             	imul   eax,edi
c000cef6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cefc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cf03:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf0a:	0f af c7             	imul   eax,edi
c000cf0d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf10:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf1e:	68 00 00 70 3f       	push   0x3f700000
c000cf23:	6a 00                	push   0x0
c000cf25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2d:	e8 45 bd 01 00       	call   c0028c77 <__ltdf2>
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	ba 16 00 00 00       	mov    edx,0x16
c000cf3a:	85 c0                	test   eax,eax
c000cf3c:	0f 88 47 06 00 00    	js     c000d589 <sinc_stereo_vari_process+0x6bb>
c000cf42:	68 00 00 70 40       	push   0x40700000
c000cf47:	6a 00                	push   0x0
c000cf49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf51:	e8 03 bd 01 00       	call   c0028c59 <__gtdf2>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	ba 16 00 00 00       	mov    edx,0x16
c000cf5e:	85 c0                	test   eax,eax
c000cf60:	0f 8f 23 06 00 00    	jg     c000d589 <sinc_stereo_vari_process+0x6bb>
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf6c:	e8 9a ba 01 00       	call   c0028a0b <__floatsidf>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf7c:	68 00 00 00 40       	push   0x40000000
c000cf81:	6a 00                	push   0x0
c000cf83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8b:	e8 9b ad 01 00       	call   c0027d2b <__adddf3>
c000cf90:	59                   	pop    ecx
c000cf91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf99:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf9c:	e8 6a ba 01 00       	call   c0028a0b <__floatsidf>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfac:	52                   	push   edx
c000cfad:	50                   	push   eax
c000cfae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	e8 d1 b6 01 00       	call   c002868c <__divdf3>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfc6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe4:	e8 70 bc 01 00       	call   c0028c59 <__gtdf2>
c000cfe9:	83 c4 10             	add    esp,0x10
c000cfec:	85 c0                	test   eax,eax
c000cfee:	7e 2d                	jle    c000d01d <sinc_stereo_vari_process+0x14f>
c000cff0:	68 00 00 f0 3f       	push   0x3ff00000
c000cff5:	6a 00                	push   0x0
c000cff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfff:	e8 73 bc 01 00       	call   c0028c77 <__ltdf2>
c000d004:	83 c4 10             	add    esp,0x10
c000d007:	85 c0                	test   eax,eax
c000d009:	79 4d                	jns    c000d058 <sinc_stereo_vari_process+0x18a>
c000d00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d00f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d017:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d01b:	eb 1b                	jmp    c000d038 <sinc_stereo_vari_process+0x16a>
c000d01d:	68 00 00 f0 3f       	push   0x3ff00000
c000d022:	6a 00                	push   0x0
c000d024:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d028:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d02c:	e8 46 bc 01 00       	call   c0028c77 <__ltdf2>
c000d031:	83 c4 10             	add    esp,0x10
c000d034:	85 c0                	test   eax,eax
c000d036:	79 20                	jns    c000d058 <sinc_stereo_vari_process+0x18a>
c000d038:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d03c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d040:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d044:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d048:	e8 3f b6 01 00       	call   c002868c <__divdf3>
c000d04d:	83 c4 10             	add    esp,0x10
c000d050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d054:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d058:	50                   	push   eax
c000d059:	50                   	push   eax
c000d05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d062:	e8 c9 bd 01 00       	call   c0028e30 <lrint>
c000d067:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d06a:	40                   	inc    eax
c000d06b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06f:	0f af c7             	imul   eax,edi
c000d072:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d079:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d07d:	58                   	pop    eax
c000d07e:	5a                   	pop    edx
c000d07f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d083:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d087:	e8 a4 bd 01 00       	call   c0028e30 <lrint>
c000d08c:	83 ec 0c             	sub    esp,0xc
c000d08f:	50                   	push   eax
c000d090:	e8 76 b9 01 00       	call   c0028a0b <__floatsidf>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d09c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0aa:	e8 cd b2 01 00       	call   c002837c <__subdf3>
c000d0af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0b7:	83 c4 20             	add    esp,0x20
c000d0ba:	6a 00                	push   0x0
c000d0bc:	6a 00                	push   0x0
c000d0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0c6:	e8 ac bb 01 00       	call   c0028c77 <__ltdf2>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	85 c0                	test   eax,eax
c000d0d0:	79 1f                	jns    c000d0f1 <sinc_stereo_vari_process+0x223>
c000d0d2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0d7:	6a 00                	push   0x0
c000d0d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0e1:	e8 45 ac 01 00       	call   c0027d2b <__adddf3>
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0f4:	83 ec 10             	sub    esp,0x10
c000d0f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0fb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d106:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d10a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d10e:	e8 69 b2 01 00       	call   c002837c <__subdf3>
c000d113:	83 c4 18             	add    esp,0x18
c000d116:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d11a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d11e:	52                   	push   edx
c000d11f:	50                   	push   eax
c000d120:	e8 0b bd 01 00       	call   c0028e30 <lrint>
c000d125:	0f af f8             	imul   edi,eax
c000d128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d12c:	01 f8                	add    eax,edi
c000d12e:	99                   	cdq    
c000d12f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d132:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d139:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d13d:	68 00 00 f0 3f       	push   0x3ff00000
c000d142:	6a 00                	push   0x0
c000d144:	e8 43 b5 01 00       	call   c002868c <__divdf3>
c000d149:	83 c4 10             	add    esp,0x10
c000d14c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d150:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d154:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d159:	68 23 42 92 0c       	push   0xc924223
c000d15e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d162:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d166:	e8 c0 ab 01 00       	call   c0027d2b <__adddf3>
c000d16b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d16f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d173:	83 c4 20             	add    esp,0x20
c000d176:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d17e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d186:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d189:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d18c:	7d 50                	jge    c000d1de <sinc_stereo_vari_process+0x310>
c000d18e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d191:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d194:	01 c8                	add    eax,ecx
c000d196:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d199:	99                   	cdq    
c000d19a:	f7 f9                	idiv   ecx
c000d19c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1a0:	7d 0c                	jge    c000d1ae <sinc_stereo_vari_process+0x2e0>
c000d1a2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d1a5:	85 ff                	test   edi,edi
c000d1a7:	79 6c                	jns    c000d215 <sinc_stereo_vari_process+0x347>
c000d1a9:	e9 e7 00 00 00       	jmp    c000d295 <sinc_stereo_vari_process+0x3c7>
c000d1ae:	50                   	push   eax
c000d1af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1b3:	56                   	push   esi
c000d1b4:	53                   	push   ebx
c000d1b5:	e8 4c e7 ff ff       	call   c000b906 <prepare_data>
c000d1ba:	83 c4 10             	add    esp,0x10
c000d1bd:	89 c2                	mov    edx,eax
c000d1bf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1c2:	85 c0                	test   eax,eax
c000d1c4:	0f 85 bf 03 00 00    	jne    c000d589 <sinc_stereo_vari_process+0x6bb>
c000d1ca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1d0:	01 c8                	add    eax,ecx
c000d1d2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1d5:	99                   	cdq    
c000d1d6:	f7 f9                	idiv   ecx
c000d1d8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1dc:	7c c4                	jl     c000d1a2 <sinc_stereo_vari_process+0x2d4>
c000d1de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1f4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1f7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1fa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1fd:	99                   	cdq    
c000d1fe:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d201:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d204:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d207:	99                   	cdq    
c000d208:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d20b:	31 d2                	xor    edx,edx
c000d20d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d210:	e9 74 03 00 00       	jmp    c000d589 <sinc_stereo_vari_process+0x6bb>
c000d215:	83 ec 0c             	sub    esp,0xc
c000d218:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d21b:	e8 eb b7 01 00       	call   c0028a0b <__floatsidf>
c000d220:	83 c4 10             	add    esp,0x10
c000d223:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d227:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d22b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 eb aa 01 00       	call   c0027d2b <__adddf3>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d247:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d24b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d257:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25b:	e8 cb aa 01 00       	call   c0027d2b <__adddf3>
c000d260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d263:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d267:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d26b:	e8 9b b7 01 00       	call   c0028a0b <__floatsidf>
c000d270:	83 c4 10             	add    esp,0x10
c000d273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d27b:	52                   	push   edx
c000d27c:	50                   	push   eax
c000d27d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d285:	e8 eb b9 01 00       	call   c0028c75 <__gedf2>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	85 c0                	test   eax,eax
c000d28f:	0f 89 49 ff ff ff    	jns    c000d1de <sinc_stereo_vari_process+0x310>
c000d295:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d299:	0f 8e ef 00 00 00    	jle    c000d38e <sinc_stereo_vari_process+0x4c0>
c000d29f:	83 ec 10             	sub    esp,0x10
c000d2a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2ab:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2ae:	e8 c9 b0 01 00       	call   c002837c <__subdf3>
c000d2b3:	83 c4 18             	add    esp,0x18
c000d2b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2be:	52                   	push   edx
c000d2bf:	50                   	push   eax
c000d2c0:	e8 4b bb 01 00       	call   c0028e10 <fabs>
c000d2c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2cd:	83 c4 10             	add    esp,0x10
c000d2d0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2d5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e2:	e8 72 b9 01 00       	call   c0028c59 <__gtdf2>
c000d2e7:	83 c4 10             	add    esp,0x10
c000d2ea:	85 c0                	test   eax,eax
c000d2ec:	0f 8e 9c 00 00 00    	jle    c000d38e <sinc_stereo_vari_process+0x4c0>
c000d2f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2f5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d300:	52                   	push   edx
c000d301:	50                   	push   eax
c000d302:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d305:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d308:	e8 6f b0 01 00       	call   c002837c <__subdf3>
c000d30d:	59                   	pop    ecx
c000d30e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d312:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d316:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d319:	e8 ed b6 01 00       	call   c0028a0b <__floatsidf>
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d325:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d329:	52                   	push   edx
c000d32a:	50                   	push   eax
c000d32b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d333:	e8 70 b0 01 00       	call   c00283a8 <__muldf3>
c000d338:	5f                   	pop    edi
c000d339:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d33d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d341:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d344:	e8 c2 b6 01 00       	call   c0028a0b <__floatsidf>
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d354:	52                   	push   edx
c000d355:	50                   	push   eax
c000d356:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d35a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d35e:	e8 29 b3 01 00       	call   c002868c <__divdf3>
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d36a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d36e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d37e:	e8 a8 a9 01 00       	call   c0027d2b <__adddf3>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d38a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d38e:	83 ec 0c             	sub    esp,0xc
c000d391:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d394:	e8 72 b6 01 00       	call   c0028a0b <__floatsidf>
c000d399:	83 c4 10             	add    esp,0x10
c000d39c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b4:	e8 be b8 01 00       	call   c0028c77 <__ltdf2>
c000d3b9:	83 c4 10             	add    esp,0x10
c000d3bc:	85 c0                	test   eax,eax
c000d3be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3c6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3ce:	78 10                	js     c000d3e0 <sinc_stereo_vari_process+0x512>
c000d3d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3f0:	e8 b3 af 01 00       	call   c00283a8 <__muldf3>
c000d3f5:	59                   	pop    ecx
c000d3f6:	5f                   	pop    edi
c000d3f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d407:	e8 d3 e4 ff ff       	call   c000b8df <double_to_fp>
c000d40c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d410:	89 c7                	mov    edi,eax
c000d412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d41a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d41e:	e8 85 af 01 00       	call   c00283a8 <__muldf3>
c000d423:	83 c4 18             	add    esp,0x18
c000d426:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d42a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d42e:	52                   	push   edx
c000d42f:	50                   	push   eax
c000d430:	e8 aa e4 ff ff       	call   c000b8df <double_to_fp>
c000d435:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d438:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d43c:	83 c4 0c             	add    esp,0xc
c000d43f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d442:	8d 04 90             	lea    eax,[eax+edx*4]
c000d445:	50                   	push   eax
c000d446:	50                   	push   eax
c000d447:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d44a:	e8 bc b5 01 00       	call   c0028a0b <__floatsidf>
c000d44f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d453:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d463:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d467:	e8 20 b2 01 00       	call   c002868c <__divdf3>
c000d46c:	83 c4 18             	add    esp,0x18
c000d46f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d473:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d477:	52                   	push   edx
c000d478:	89 fa                	mov    edx,edi
c000d47a:	50                   	push   eax
c000d47b:	89 d8                	mov    eax,ebx
c000d47d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d481:	e8 02 c7 ff ff       	call   c0009b88 <calc_output_stereo>
c000d486:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d48a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d492:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d496:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d49a:	e8 ed b1 01 00       	call   c002868c <__divdf3>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4a6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ba:	e8 6c a8 01 00       	call   c0027d2b <__adddf3>
c000d4bf:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4c3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4c7:	83 c4 18             	add    esp,0x18
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4d2:	e8 59 b9 01 00       	call   c0028e30 <lrint>
c000d4d7:	83 ec 0c             	sub    esp,0xc
c000d4da:	50                   	push   eax
c000d4db:	e8 2b b5 01 00       	call   c0028a0b <__floatsidf>
c000d4e0:	83 c4 10             	add    esp,0x10
c000d4e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4eb:	52                   	push   edx
c000d4ec:	50                   	push   eax
c000d4ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4f5:	e8 82 ae 01 00       	call   c002837c <__subdf3>
c000d4fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d502:	83 c4 20             	add    esp,0x20
c000d505:	6a 00                	push   0x0
c000d507:	6a 00                	push   0x0
c000d509:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d511:	e8 61 b7 01 00       	call   c0028c77 <__ltdf2>
c000d516:	83 c4 10             	add    esp,0x10
c000d519:	85 c0                	test   eax,eax
c000d51b:	79 20                	jns    c000d53d <sinc_stereo_vari_process+0x66f>
c000d51d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d525:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d529:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52d:	e8 f9 a7 01 00       	call   c0027d2b <__adddf3>
c000d532:	83 c4 10             	add    esp,0x10
c000d535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d539:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d53d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d540:	83 ec 10             	sub    esp,0x10
c000d543:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d547:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d552:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d556:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d55a:	e8 1d ae 01 00       	call   c002837c <__subdf3>
c000d55f:	83 c4 18             	add    esp,0x18
c000d562:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d566:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d56a:	52                   	push   edx
c000d56b:	50                   	push   eax
c000d56c:	e8 bf b8 01 00       	call   c0028e30 <lrint>
c000d571:	0f af f8             	imul   edi,eax
c000d574:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d578:	83 c4 10             	add    esp,0x10
c000d57b:	01 f8                	add    eax,edi
c000d57d:	99                   	cdq    
c000d57e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d581:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d584:	e9 fd fb ff ff       	jmp    c000d186 <sinc_stereo_vari_process+0x2b8>
c000d589:	83 c4 4c             	add    esp,0x4c
c000d58c:	89 d0                	mov    eax,edx
c000d58e:	5b                   	pop    ebx
c000d58f:	5e                   	pop    esi
c000d590:	5f                   	pop    edi
c000d591:	5d                   	pop    ebp
c000d592:	c3                   	ret    

c000d593 <sinc_mono_vari_process>:
c000d593:	55                   	push   ebp
c000d594:	ba 05 00 00 00       	mov    edx,0x5
c000d599:	57                   	push   edi
c000d59a:	56                   	push   esi
c000d59b:	53                   	push   ebx
c000d59c:	83 ec 4c             	sub    esp,0x4c
c000d59f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5a3:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d5a7:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5aa:	85 db                	test   ebx,ebx
c000d5ac:	0f 84 c1 06 00 00    	je     c000dc73 <sinc_mono_vari_process+0x6e0>
c000d5b2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b8:	0f af c7             	imul   eax,edi
c000d5bb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5be:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5c1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5cf:	0f af c7             	imul   eax,edi
c000d5d2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5e6:	68 00 00 70 3f       	push   0x3f700000
c000d5eb:	6a 00                	push   0x0
c000d5ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f5:	e8 7d b6 01 00       	call   c0028c77 <__ltdf2>
c000d5fa:	83 c4 10             	add    esp,0x10
c000d5fd:	ba 16 00 00 00       	mov    edx,0x16
c000d602:	85 c0                	test   eax,eax
c000d604:	0f 88 69 06 00 00    	js     c000dc73 <sinc_mono_vari_process+0x6e0>
c000d60a:	68 00 00 70 40       	push   0x40700000
c000d60f:	6a 00                	push   0x0
c000d611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d619:	e8 3b b6 01 00       	call   c0028c59 <__gtdf2>
c000d61e:	83 c4 10             	add    esp,0x10
c000d621:	ba 16 00 00 00       	mov    edx,0x16
c000d626:	85 c0                	test   eax,eax
c000d628:	0f 8f 45 06 00 00    	jg     c000dc73 <sinc_mono_vari_process+0x6e0>
c000d62e:	83 ec 0c             	sub    esp,0xc
c000d631:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d634:	e8 d2 b3 01 00       	call   c0028a0b <__floatsidf>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d644:	68 00 00 00 40       	push   0x40000000
c000d649:	6a 00                	push   0x0
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d653:	e8 d3 a6 01 00       	call   c0027d2b <__adddf3>
c000d658:	59                   	pop    ecx
c000d659:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d65d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d661:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d664:	e8 a2 b3 01 00       	call   c0028a0b <__floatsidf>
c000d669:	83 c4 10             	add    esp,0x10
c000d66c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d670:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d674:	52                   	push   edx
c000d675:	50                   	push   eax
c000d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	e8 09 b0 01 00       	call   c002868c <__divdf3>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d68a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d68e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d691:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d694:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d698:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ac:	e8 a8 b5 01 00       	call   c0028c59 <__gtdf2>
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	85 c0                	test   eax,eax
c000d6b6:	7e 2d                	jle    c000d6e5 <sinc_mono_vari_process+0x152>
c000d6b8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bd:	6a 00                	push   0x0
c000d6bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c7:	e8 ab b5 01 00       	call   c0028c77 <__ltdf2>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	85 c0                	test   eax,eax
c000d6d1:	79 4d                	jns    c000d720 <sinc_mono_vari_process+0x18d>
c000d6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6e3:	eb 1b                	jmp    c000d700 <sinc_mono_vari_process+0x16d>
c000d6e5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ea:	6a 00                	push   0x0
c000d6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f4:	e8 7e b5 01 00       	call   c0028c77 <__ltdf2>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	85 c0                	test   eax,eax
c000d6fe:	79 20                	jns    c000d720 <sinc_mono_vari_process+0x18d>
c000d700:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d704:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d708:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d70c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d710:	e8 77 af 01 00       	call   c002868c <__divdf3>
c000d715:	83 c4 10             	add    esp,0x10
c000d718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d720:	50                   	push   eax
c000d721:	50                   	push   eax
c000d722:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d726:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d72a:	e8 01 b7 01 00       	call   c0028e30 <lrint>
c000d72f:	40                   	inc    eax
c000d730:	0f af c7             	imul   eax,edi
c000d733:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d737:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d73b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d73e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d741:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d745:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d749:	58                   	pop    eax
c000d74a:	5a                   	pop    edx
c000d74b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d753:	e8 d8 b6 01 00       	call   c0028e30 <lrint>
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	50                   	push   eax
c000d75c:	e8 aa b2 01 00       	call   c0028a0b <__floatsidf>
c000d761:	83 c4 10             	add    esp,0x10
c000d764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d772:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d776:	e8 01 ac 01 00       	call   c002837c <__subdf3>
c000d77b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d783:	83 c4 20             	add    esp,0x20
c000d786:	6a 00                	push   0x0
c000d788:	6a 00                	push   0x0
c000d78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d792:	e8 e0 b4 01 00       	call   c0028c77 <__ltdf2>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	85 c0                	test   eax,eax
c000d79c:	79 1f                	jns    c000d7bd <sinc_mono_vari_process+0x22a>
c000d79e:	68 00 00 f0 3f       	push   0x3ff00000
c000d7a3:	6a 00                	push   0x0
c000d7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ad:	e8 79 a5 01 00       	call   c0027d2b <__adddf3>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7bd:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7c3:	83 ec 10             	sub    esp,0x10
c000d7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d6:	e8 a1 ab 01 00       	call   c002837c <__subdf3>
c000d7db:	83 c4 18             	add    esp,0x18
c000d7de:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7e6:	52                   	push   edx
c000d7e7:	50                   	push   eax
c000d7e8:	e8 43 b6 01 00       	call   c0028e30 <lrint>
c000d7ed:	0f af f8             	imul   edi,eax
c000d7f0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7f3:	31 ff                	xor    edi,edi
c000d7f5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7fa:	99                   	cdq    
c000d7fb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d801:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d805:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d809:	55                   	push   ebp
c000d80a:	57                   	push   edi
c000d80b:	e8 7c ae 01 00       	call   c002868c <__divdf3>
c000d810:	83 c4 10             	add    esp,0x10
c000d813:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d817:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d81b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d820:	68 23 42 92 0c       	push   0xc924223
c000d825:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d829:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d82d:	e8 f9 a4 01 00       	call   c0027d2b <__adddf3>
c000d832:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d836:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d83a:	83 c4 20             	add    esp,0x20
c000d83d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d841:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d845:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d848:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d84b:	7d 54                	jge    c000d8a1 <sinc_mono_vari_process+0x30e>
c000d84d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d850:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d853:	01 c8                	add    eax,ecx
c000d855:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d858:	99                   	cdq    
c000d859:	f7 f9                	idiv   ecx
c000d85b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d85f:	7d 0c                	jge    c000d86d <sinc_mono_vari_process+0x2da>
c000d861:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d864:	85 ff                	test   edi,edi
c000d866:	79 73                	jns    c000d8db <sinc_mono_vari_process+0x348>
c000d868:	e9 ee 00 00 00       	jmp    c000d95b <sinc_mono_vari_process+0x3c8>
c000d86d:	50                   	push   eax
c000d86e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d872:	56                   	push   esi
c000d873:	53                   	push   ebx
c000d874:	e8 8d e0 ff ff       	call   c000b906 <prepare_data>
c000d879:	89 c2                	mov    edx,eax
c000d87b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d885:	85 d2                	test   edx,edx
c000d887:	0f 85 e6 03 00 00    	jne    c000dc73 <sinc_mono_vari_process+0x6e0>
c000d88d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d890:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d893:	01 c8                	add    eax,ecx
c000d895:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d898:	99                   	cdq    
c000d899:	f7 f9                	idiv   ecx
c000d89b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d89f:	7c c0                	jl     c000d861 <sinc_mono_vari_process+0x2ce>
c000d8a1:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d8a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8ad:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8b0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8bb:	89 01                	mov    DWORD PTR [ecx],eax
c000d8bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8c3:	99                   	cdq    
c000d8c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8cd:	99                   	cdq    
c000d8ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8d1:	31 d2                	xor    edx,edx
c000d8d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8d6:	e9 98 03 00 00       	jmp    c000dc73 <sinc_mono_vari_process+0x6e0>
c000d8db:	83 ec 0c             	sub    esp,0xc
c000d8de:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8e1:	e8 25 b1 01 00       	call   c0028a0b <__floatsidf>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 25 a4 01 00       	call   c0027d2b <__adddf3>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d90d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d921:	e8 05 a4 01 00       	call   c0027d2b <__adddf3>
c000d926:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d929:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d92d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d931:	e8 d5 b0 01 00       	call   c0028a0b <__floatsidf>
c000d936:	83 c4 10             	add    esp,0x10
c000d939:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d93d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d941:	52                   	push   edx
c000d942:	50                   	push   eax
c000d943:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d947:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d94b:	e8 09 b3 01 00       	call   c0028c59 <__gtdf2>
c000d950:	83 c4 10             	add    esp,0x10
c000d953:	85 c0                	test   eax,eax
c000d955:	0f 8f 46 ff ff ff    	jg     c000d8a1 <sinc_mono_vari_process+0x30e>
c000d95b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d95f:	0f 8e f5 00 00 00    	jle    c000da5a <sinc_mono_vari_process+0x4c7>
c000d965:	83 ec 10             	sub    esp,0x10
c000d968:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d96b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d96e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d972:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d975:	ff 30                	push   DWORD PTR [eax]
c000d977:	e8 00 aa 01 00       	call   c002837c <__subdf3>
c000d97c:	83 c4 18             	add    esp,0x18
c000d97f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d983:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d987:	52                   	push   edx
c000d988:	50                   	push   eax
c000d989:	e8 82 b4 01 00       	call   c0028e10 <fabs>
c000d98e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d992:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d996:	83 c4 10             	add    esp,0x10
c000d999:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d99e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d9a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ab:	e8 a9 b2 01 00       	call   c0028c59 <__gtdf2>
c000d9b0:	83 c4 10             	add    esp,0x10
c000d9b3:	85 c0                	test   eax,eax
c000d9b5:	0f 8e 9f 00 00 00    	jle    c000da5a <sinc_mono_vari_process+0x4c7>
c000d9bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9cc:	52                   	push   edx
c000d9cd:	50                   	push   eax
c000d9ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9d4:	e8 a3 a9 01 00       	call   c002837c <__subdf3>
c000d9d9:	5f                   	pop    edi
c000d9da:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9de:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9e2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9e5:	e8 21 b0 01 00       	call   c0028a0b <__floatsidf>
c000d9ea:	83 c4 10             	add    esp,0x10
c000d9ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f5:	52                   	push   edx
c000d9f6:	50                   	push   eax
c000d9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ff:	e8 a4 a9 01 00       	call   c00283a8 <__muldf3>
c000da04:	5d                   	pop    ebp
c000da05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da0d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da10:	e8 f6 af 01 00       	call   c0028a0b <__floatsidf>
c000da15:	83 c4 10             	add    esp,0x10
c000da18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da20:	52                   	push   edx
c000da21:	50                   	push   eax
c000da22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da2a:	e8 5d ac 01 00       	call   c002868c <__divdf3>
c000da2f:	83 c4 10             	add    esp,0x10
c000da32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da4a:	e8 dc a2 01 00       	call   c0027d2b <__adddf3>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da5a:	83 ec 0c             	sub    esp,0xc
c000da5d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da60:	e8 a6 af 01 00       	call   c0028a0b <__floatsidf>
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da80:	e8 f2 b1 01 00       	call   c0028c77 <__ltdf2>
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	85 c0                	test   eax,eax
c000da8a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da8e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da92:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da96:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da9a:	78 10                	js     c000daac <sinc_mono_vari_process+0x519>
c000da9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000daa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000daa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dabc:	e8 e7 a8 01 00       	call   c00283a8 <__muldf3>
c000dac1:	59                   	pop    ecx
c000dac2:	5f                   	pop    edi
c000dac3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dac7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dacb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dad3:	e8 07 de ff ff       	call   c000b8df <double_to_fp>
c000dad8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dadc:	89 c7                	mov    edi,eax
c000dade:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dae2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daea:	e8 b9 a8 01 00       	call   c00283a8 <__muldf3>
c000daef:	83 c4 18             	add    esp,0x18
c000daf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daf6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafa:	52                   	push   edx
c000dafb:	50                   	push   eax
c000dafc:	e8 de dd ff ff       	call   c000b8df <double_to_fp>
c000db01:	83 ec 0c             	sub    esp,0xc
c000db04:	89 c5                	mov    ebp,eax
c000db06:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db09:	e8 fd ae 01 00       	call   c0028a0b <__floatsidf>
c000db0e:	83 c4 10             	add    esp,0x10
c000db11:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db15:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db19:	52                   	push   edx
c000db1a:	50                   	push   eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 64 ab 01 00       	call   c002868c <__divdf3>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 e9                	mov    ecx,ebp
c000db2d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db31:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db35:	89 d8                	mov    eax,ebx
c000db37:	89 fa                	mov    edx,edi
c000db39:	e8 ee bd ff ff       	call   c000992c <calc_output_single>
c000db3e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db41:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db44:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db48:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db4c:	52                   	push   edx
c000db4d:	50                   	push   eax
c000db4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db56:	e8 4d a8 01 00       	call   c00283a8 <__muldf3>
c000db5b:	59                   	pop    ecx
c000db5c:	59                   	pop    ecx
c000db5d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db61:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db69:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db6d:	e8 09 b1 01 00       	call   c0028c7b <__truncdfsf2>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db78:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db8b:	e8 fc aa 01 00       	call   c002868c <__divdf3>
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbab:	e8 7b a1 01 00       	call   c0027d2b <__adddf3>
c000dbb0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbb4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb8:	83 c4 18             	add    esp,0x18
c000dbbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbc3:	e8 68 b2 01 00       	call   c0028e30 <lrint>
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	50                   	push   eax
c000dbcc:	e8 3a ae 01 00       	call   c0028a0b <__floatsidf>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbdc:	52                   	push   edx
c000dbdd:	50                   	push   eax
c000dbde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbe2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbe6:	e8 91 a7 01 00       	call   c002837c <__subdf3>
c000dbeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbf3:	83 c4 20             	add    esp,0x20
c000dbf6:	6a 00                	push   0x0
c000dbf8:	6a 00                	push   0x0
c000dbfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc02:	e8 70 b0 01 00       	call   c0028c77 <__ltdf2>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	85 c0                	test   eax,eax
c000dc0c:	79 20                	jns    c000dc2e <sinc_mono_vari_process+0x69b>
c000dc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1e:	e8 08 a1 01 00       	call   c0027d2b <__adddf3>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc2e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc31:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc34:	83 ec 10             	sub    esp,0x10
c000dc37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc47:	e8 30 a7 01 00       	call   c002837c <__subdf3>
c000dc4c:	83 c4 18             	add    esp,0x18
c000dc4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc57:	52                   	push   edx
c000dc58:	50                   	push   eax
c000dc59:	e8 d2 b1 01 00       	call   c0028e30 <lrint>
c000dc5e:	83 c4 10             	add    esp,0x10
c000dc61:	0f af f8             	imul   edi,eax
c000dc64:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc67:	99                   	cdq    
c000dc68:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc6b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc6e:	e9 d2 fb ff ff       	jmp    c000d845 <sinc_mono_vari_process+0x2b2>
c000dc73:	83 c4 4c             	add    esp,0x4c
c000dc76:	89 d0                	mov    eax,edx
c000dc78:	5b                   	pop    ebx
c000dc79:	5e                   	pop    esi
c000dc7a:	5f                   	pop    edi
c000dc7b:	5d                   	pop    ebp
c000dc7c:	c3                   	ret    

c000dc7d <sinc_get_name>:
c000dc7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc81:	31 c0                	xor    eax,eax
c000dc83:	83 fa 02             	cmp    edx,0x2
c000dc86:	77 07                	ja     c000dc8f <sinc_get_name+0x12>
c000dc88:	8b 04 95 04 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58fc]
c000dc8f:	c3                   	ret    

c000dc90 <sinc_get_description>:
c000dc90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc94:	31 c0                	xor    eax,eax
c000dc96:	83 fa 02             	cmp    edx,0x2
c000dc99:	77 07                	ja     c000dca2 <sinc_get_description+0x12>
c000dc9b:	8b 04 95 f8 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5908]
c000dca2:	c3                   	ret    

c000dca3 <sinc_set_converter>:
c000dca3:	53                   	push   ebx
c000dca4:	81 ec 58 08 00 00    	sub    esp,0x858
c000dcaa:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dcb1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcb4:	85 c0                	test   eax,eax
c000dcb6:	74 13                	je     c000dccb <sinc_set_converter+0x28>
c000dcb8:	83 ec 0c             	sub    esp,0xc
c000dcbb:	50                   	push   eax
c000dcbc:	e8 6b 1c 00 00       	call   c000f92c <free>
c000dcc1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc8:	83 c4 10             	add    esp,0x10
c000dccb:	50                   	push   eax
c000dccc:	68 44 08 00 00       	push   0x844
c000dcd1:	6a 00                	push   0x0
c000dcd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcd7:	50                   	push   eax
c000dcd8:	e8 ab 2a ff ff       	call   c0000788 <memset>
c000dcdd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dce0:	83 c4 10             	add    esp,0x10
c000dce3:	b8 0b 00 00 00       	mov    eax,0xb
c000dce8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcee:	7f 6e                	jg     c000dd5e <sinc_set_converter+0xbb>
c000dcf0:	83 fa 01             	cmp    edx,0x1
c000dcf3:	75 10                	jne    c000dd05 <sinc_set_converter+0x62>
c000dcf5:	c7 43 24 93 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d593
c000dcfc:	c7 43 20 93 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d593
c000dd03:	eb 4d                	jmp    c000dd52 <sinc_set_converter+0xaf>
c000dd05:	83 fa 02             	cmp    edx,0x2
c000dd08:	75 10                	jne    c000dd1a <sinc_set_converter+0x77>
c000dd0a:	c7 43 24 ce ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cece
c000dd11:	c7 43 20 ce ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cece
c000dd18:	eb 38                	jmp    c000dd52 <sinc_set_converter+0xaf>
c000dd1a:	83 fa 04             	cmp    edx,0x4
c000dd1d:	75 10                	jne    c000dd2f <sinc_set_converter+0x8c>
c000dd1f:	c7 43 24 09 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c809
c000dd26:	c7 43 20 09 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c809
c000dd2d:	eb 23                	jmp    c000dd52 <sinc_set_converter+0xaf>
c000dd2f:	83 fa 06             	cmp    edx,0x6
c000dd32:	75 10                	jne    c000dd44 <sinc_set_converter+0xa1>
c000dd34:	c7 43 24 44 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c144
c000dd3b:	c7 43 20 44 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c144
c000dd42:	eb 0e                	jmp    c000dd52 <sinc_set_converter+0xaf>
c000dd44:	c7 43 24 80 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba80
c000dd4b:	c7 43 20 80 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba80
c000dd52:	c7 43 28 33 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad33
c000dd59:	b8 0a 00 00 00       	mov    eax,0xa
c000dd5e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd64:	5b                   	pop    ebx
c000dd65:	c3                   	ret    

c000dd66 <zoh_vari_process>:
c000dd66:	55                   	push   ebp
c000dd67:	31 d2                	xor    edx,edx
c000dd69:	57                   	push   edi
c000dd6a:	56                   	push   esi
c000dd6b:	53                   	push   ebx
c000dd6c:	83 ec 3c             	sub    esp,0x3c
c000dd6f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd73:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd77:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd7b:	0f 8e 80 06 00 00    	jle    c000e401 <zoh_vari_process+0x69b>
c000dd81:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd84:	ba 05 00 00 00       	mov    edx,0x5
c000dd89:	85 db                	test   ebx,ebx
c000dd8b:	0f 84 70 06 00 00    	je     c000e401 <zoh_vari_process+0x69b>
c000dd91:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd94:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd98:	74 19                	je     c000ddb3 <zoh_vari_process+0x4d>
c000dd9a:	31 d2                	xor    edx,edx
c000dd9c:	39 c2                	cmp    edx,eax
c000dd9e:	7d 0c                	jge    c000ddac <zoh_vari_process+0x46>
c000dda0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dda2:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dda5:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda9:	42                   	inc    edx
c000ddaa:	eb f0                	jmp    c000dd9c <zoh_vari_process+0x36>
c000ddac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddb3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddb6:	0f af d0             	imul   edx,eax
c000ddb9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddbc:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddc0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddc7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddd1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddd4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddde:	68 00 00 70 3f       	push   0x3f700000
c000dde3:	6a 00                	push   0x0
c000dde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dded:	e8 85 ae 01 00       	call   c0028c77 <__ltdf2>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	ba 16 00 00 00       	mov    edx,0x16
c000ddfa:	85 c0                	test   eax,eax
c000ddfc:	0f 88 ff 05 00 00    	js     c000e401 <zoh_vari_process+0x69b>
c000de02:	68 00 00 70 40       	push   0x40700000
c000de07:	6a 00                	push   0x0
c000de09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de11:	e8 43 ae 01 00       	call   c0028c59 <__gtdf2>
c000de16:	83 c4 10             	add    esp,0x10
c000de19:	ba 16 00 00 00       	mov    edx,0x16
c000de1e:	85 c0                	test   eax,eax
c000de20:	0f 8f db 05 00 00    	jg     c000e401 <zoh_vari_process+0x69b>
c000de26:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de29:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de34:	68 00 00 f0 3f       	push   0x3ff00000
c000de39:	6a 00                	push   0x0
c000de3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de43:	e8 2f ae 01 00       	call   c0028c77 <__ltdf2>
c000de48:	83 c4 10             	add    esp,0x10
c000de4b:	85 c0                	test   eax,eax
c000de4d:	0f 89 da 01 00 00    	jns    c000e02d <zoh_vari_process+0x2c7>
c000de53:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de56:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de59:	0f 8d ce 01 00 00    	jge    c000e02d <zoh_vari_process+0x2c7>
c000de5f:	83 ec 0c             	sub    esp,0xc
c000de62:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de65:	e8 a1 ab 01 00       	call   c0028a0b <__floatsidf>
c000de6a:	83 c4 10             	add    esp,0x10
c000de6d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de84:	e8 1f a5 01 00       	call   c00283a8 <__muldf3>
c000de89:	59                   	pop    ecx
c000de8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de92:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de95:	e8 71 ab 01 00       	call   c0028a0b <__floatsidf>
c000de9a:	83 c4 10             	add    esp,0x10
c000de9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea5:	52                   	push   edx
c000dea6:	50                   	push   eax
c000dea7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deaf:	e8 77 9e 01 00       	call   c0027d2b <__adddf3>
c000deb4:	59                   	pop    ecx
c000deb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000debd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dec0:	e8 46 ab 01 00       	call   c0028a0b <__floatsidf>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000decc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ded0:	52                   	push   edx
c000ded1:	50                   	push   eax
c000ded2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deda:	e8 96 ad 01 00       	call   c0028c75 <__gedf2>
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	85 c0                	test   eax,eax
c000dee4:	0f 89 43 01 00 00    	jns    c000e02d <zoh_vari_process+0x2c7>
c000deea:	85 ed                	test   ebp,ebp
c000deec:	0f 8e ec 00 00 00    	jle    c000dfde <zoh_vari_process+0x278>
c000def2:	83 ec 10             	sub    esp,0x10
c000def5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000defb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000defe:	ff 37                	push   DWORD PTR [edi]
c000df00:	e8 77 a4 01 00       	call   c002837c <__subdf3>
c000df05:	83 c4 18             	add    esp,0x18
c000df08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df10:	52                   	push   edx
c000df11:	50                   	push   eax
c000df12:	e8 f9 ae 01 00       	call   c0028e10 <fabs>
c000df17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df1b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df27:	68 23 42 92 0c       	push   0xc924223
c000df2c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df34:	e8 20 ad 01 00       	call   c0028c59 <__gtdf2>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	85 c0                	test   eax,eax
c000df3e:	0f 8e 9a 00 00 00    	jle    c000dfde <zoh_vari_process+0x278>
c000df44:	8b 07                	mov    eax,DWORD PTR [edi]
c000df46:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df49:	89 04 24             	mov    DWORD PTR [esp],eax
c000df4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df50:	52                   	push   edx
c000df51:	50                   	push   eax
c000df52:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df55:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df58:	e8 1f a4 01 00       	call   c002837c <__subdf3>
c000df5d:	59                   	pop    ecx
c000df5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df62:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df66:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df69:	e8 9d aa 01 00       	call   c0028a0b <__floatsidf>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df79:	52                   	push   edx
c000df7a:	50                   	push   eax
c000df7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df83:	e8 20 a4 01 00       	call   c00283a8 <__muldf3>
c000df88:	5d                   	pop    ebp
c000df89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df94:	e8 72 aa 01 00       	call   c0028a0b <__floatsidf>
c000df99:	83 c4 10             	add    esp,0x10
c000df9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa4:	52                   	push   edx
c000dfa5:	50                   	push   eax
c000dfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfae:	e8 d9 a6 01 00       	call   c002868c <__divdf3>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfbe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfc2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfce:	e8 58 9d 01 00       	call   c0027d2b <__adddf3>
c000dfd3:	83 c4 10             	add    esp,0x10
c000dfd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfde:	31 c0                	xor    eax,eax
c000dfe0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfe3:	7e 13                	jle    c000dff8 <zoh_vari_process+0x292>
c000dfe5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfec:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfef:	40                   	inc    eax
c000dff0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dff3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dff6:	eb e8                	jmp    c000dfe0 <zoh_vari_process+0x27a>
c000dff8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e000:	68 00 00 f0 3f       	push   0x3ff00000
c000e005:	6a 00                	push   0x0
c000e007:	e8 80 a6 01 00       	call   c002868c <__divdf3>
c000e00c:	83 c4 10             	add    esp,0x10
c000e00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e012:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e016:	52                   	push   edx
c000e017:	50                   	push   eax
c000e018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e020:	e8 06 9d 01 00       	call   c0027d2b <__adddf3>
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	e9 ff fd ff ff       	jmp    c000de2c <zoh_vari_process+0xc6>
c000e02d:	55                   	push   ebp
c000e02e:	55                   	push   ebp
c000e02f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e037:	e8 f4 ad 01 00       	call   c0028e30 <lrint>
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	50                   	push   eax
c000e040:	e8 c6 a9 01 00       	call   c0028a0b <__floatsidf>
c000e045:	83 c4 10             	add    esp,0x10
c000e048:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e04c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e050:	52                   	push   edx
c000e051:	50                   	push   eax
c000e052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e05a:	e8 1d a3 01 00       	call   c002837c <__subdf3>
c000e05f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e063:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e067:	83 c4 20             	add    esp,0x20
c000e06a:	6a 00                	push   0x0
c000e06c:	6a 00                	push   0x0
c000e06e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e072:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e076:	e8 fc ab 01 00       	call   c0028c77 <__ltdf2>
c000e07b:	83 c4 10             	add    esp,0x10
c000e07e:	85 c0                	test   eax,eax
c000e080:	79 1e                	jns    c000e0a0 <zoh_vari_process+0x33a>
c000e082:	68 00 00 f0 3f       	push   0x3ff00000
c000e087:	6a 00                	push   0x0
c000e089:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e091:	e8 95 9c 01 00       	call   c0027d2b <__adddf3>
c000e096:	83 c4 10             	add    esp,0x10
c000e099:	89 04 24             	mov    DWORD PTR [esp],eax
c000e09c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0a0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0a3:	83 ec 10             	sub    esp,0x10
c000e0a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b6:	e8 c1 a2 01 00       	call   c002837c <__subdf3>
c000e0bb:	83 c4 18             	add    esp,0x18
c000e0be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0c6:	52                   	push   edx
c000e0c7:	50                   	push   eax
c000e0c8:	e8 63 ad 01 00       	call   c0028e30 <lrint>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	0f af e8             	imul   ebp,eax
c000e0d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0d6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0e0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0e7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0ea:	0f 8d 7a 02 00 00    	jge    c000e36a <zoh_vari_process+0x604>
c000e0f0:	83 ec 0c             	sub    esp,0xc
c000e0f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0f6:	e8 10 a9 01 00       	call   c0028a0b <__floatsidf>
c000e0fb:	83 c4 10             	add    esp,0x10
c000e0fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e102:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e106:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e10a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e10e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e112:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e116:	e8 8d a2 01 00       	call   c00283a8 <__muldf3>
c000e11b:	59                   	pop    ecx
c000e11c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e120:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e128:	e8 de a8 01 00       	call   c0028a0b <__floatsidf>
c000e12d:	83 c4 10             	add    esp,0x10
c000e130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e134:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e138:	52                   	push   edx
c000e139:	50                   	push   eax
c000e13a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e142:	e8 e4 9b 01 00       	call   c0027d2b <__adddf3>
c000e147:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e14a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e14e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e152:	e8 b4 a8 01 00       	call   c0028a0b <__floatsidf>
c000e157:	83 c4 10             	add    esp,0x10
c000e15a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e15e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e162:	52                   	push   edx
c000e163:	50                   	push   eax
c000e164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e16c:	e8 08 ab 01 00       	call   c0028c79 <__ledf2>
c000e171:	83 c4 10             	add    esp,0x10
c000e174:	85 c0                	test   eax,eax
c000e176:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e17a:	0f 8f ea 01 00 00    	jg     c000e36a <zoh_vari_process+0x604>
c000e180:	85 c9                	test   ecx,ecx
c000e182:	0f 8e ed 00 00 00    	jle    c000e275 <zoh_vari_process+0x50f>
c000e188:	83 ec 10             	sub    esp,0x10
c000e18b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e18e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e191:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e194:	ff 37                	push   DWORD PTR [edi]
c000e196:	e8 e1 a1 01 00       	call   c002837c <__subdf3>
c000e19b:	83 c4 18             	add    esp,0x18
c000e19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1a6:	52                   	push   edx
c000e1a7:	50                   	push   eax
c000e1a8:	e8 63 ac 01 00       	call   c0028e10 <fabs>
c000e1ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1b5:	83 c4 10             	add    esp,0x10
c000e1b8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1bd:	68 23 42 92 0c       	push   0xc924223
c000e1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ca:	e8 8a aa 01 00       	call   c0028c59 <__gtdf2>
c000e1cf:	83 c4 10             	add    esp,0x10
c000e1d2:	85 c0                	test   eax,eax
c000e1d4:	0f 8e 9b 00 00 00    	jle    c000e275 <zoh_vari_process+0x50f>
c000e1da:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1dc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1e7:	52                   	push   edx
c000e1e8:	50                   	push   eax
c000e1e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1ec:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1ef:	e8 88 a1 01 00       	call   c002837c <__subdf3>
c000e1f4:	5d                   	pop    ebp
c000e1f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1fd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e200:	e8 06 a8 01 00       	call   c0028a0b <__floatsidf>
c000e205:	83 c4 10             	add    esp,0x10
c000e208:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e20c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e210:	52                   	push   edx
c000e211:	50                   	push   eax
c000e212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21a:	e8 89 a1 01 00       	call   c00283a8 <__muldf3>
c000e21f:	59                   	pop    ecx
c000e220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e224:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e228:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e22b:	e8 db a7 01 00       	call   c0028a0b <__floatsidf>
c000e230:	83 c4 10             	add    esp,0x10
c000e233:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e237:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e23b:	52                   	push   edx
c000e23c:	50                   	push   eax
c000e23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e245:	e8 42 a4 01 00       	call   c002868c <__divdf3>
c000e24a:	83 c4 10             	add    esp,0x10
c000e24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e251:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e265:	e8 c1 9a 01 00       	call   c0027d2b <__adddf3>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e271:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e275:	31 d2                	xor    edx,edx
c000e277:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e27a:	39 d0                	cmp    eax,edx
c000e27c:	7e 1d                	jle    c000e29b <zoh_vari_process+0x535>
c000e27e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e281:	29 c1                	sub    ecx,eax
c000e283:	89 c8                	mov    eax,ecx
c000e285:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e287:	01 d0                	add    eax,edx
c000e289:	42                   	inc    edx
c000e28a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e28d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e290:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e293:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e296:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e299:	eb dc                	jmp    c000e277 <zoh_vari_process+0x511>
c000e29b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2a3:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a8:	6a 00                	push   0x0
c000e2aa:	e8 dd a3 01 00       	call   c002868c <__divdf3>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2be:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ca:	e8 5c 9a 01 00       	call   c0027d2b <__adddf3>
c000e2cf:	5d                   	pop    ebp
c000e2d0:	59                   	pop    ecx
c000e2d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e1:	e8 4a ab 01 00       	call   c0028e30 <lrint>
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	50                   	push   eax
c000e2ea:	e8 1c a7 01 00       	call   c0028a0b <__floatsidf>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2fa:	52                   	push   edx
c000e2fb:	50                   	push   eax
c000e2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e300:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e304:	e8 73 a0 01 00       	call   c002837c <__subdf3>
c000e309:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e30d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e311:	83 c4 20             	add    esp,0x20
c000e314:	6a 00                	push   0x0
c000e316:	6a 00                	push   0x0
c000e318:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e31c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e320:	e8 52 a9 01 00       	call   c0028c77 <__ltdf2>
c000e325:	83 c4 10             	add    esp,0x10
c000e328:	85 c0                	test   eax,eax
c000e32a:	79 1e                	jns    c000e34a <zoh_vari_process+0x5e4>
c000e32c:	68 00 00 f0 3f       	push   0x3ff00000
c000e331:	6a 00                	push   0x0
c000e333:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e33b:	e8 eb 99 01 00       	call   c0027d2b <__adddf3>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	89 04 24             	mov    DWORD PTR [esp],eax
c000e346:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e34a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e34d:	83 ec 10             	sub    esp,0x10
c000e350:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e358:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e360:	e8 17 a0 01 00       	call   c002837c <__subdf3>
c000e365:	e9 51 fd ff ff       	jmp    c000e0bb <zoh_vari_process+0x355>
c000e36a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e36e:	7d 3a                	jge    c000e3aa <zoh_vari_process+0x644>
c000e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	29 e8                	sub    eax,ebp
c000e379:	99                   	cdq    
c000e37a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e37d:	50                   	push   eax
c000e37e:	e8 88 a6 01 00       	call   c0028a0b <__floatsidf>
c000e383:	83 c4 10             	add    esp,0x10
c000e386:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e38a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e38e:	52                   	push   edx
c000e38f:	50                   	push   eax
c000e390:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e398:	e8 8e 99 01 00       	call   c0027d2b <__adddf3>
c000e39d:	83 c4 10             	add    esp,0x10
c000e3a0:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e3a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3b1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3b4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ba:	85 c0                	test   eax,eax
c000e3bc:	7f 25                	jg     c000e3e3 <zoh_vari_process+0x67d>
c000e3be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3c6:	89 07                	mov    DWORD PTR [edi],eax
c000e3c8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ce:	99                   	cdq    
c000e3cf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3d5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d8:	99                   	cdq    
c000e3d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3dc:	31 d2                	xor    edx,edx
c000e3de:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3e1:	eb 1e                	jmp    c000e401 <zoh_vari_process+0x69b>
c000e3e3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3e6:	31 d2                	xor    edx,edx
c000e3e8:	29 c8                	sub    eax,ecx
c000e3ea:	c1 e0 02             	shl    eax,0x2
c000e3ed:	39 d1                	cmp    ecx,edx
c000e3ef:	7e cd                	jle    c000e3be <zoh_vari_process+0x658>
c000e3f1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3f3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3f7:	83 c0 04             	add    eax,0x4
c000e3fa:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3fe:	42                   	inc    edx
c000e3ff:	eb ec                	jmp    c000e3ed <zoh_vari_process+0x687>
c000e401:	83 c4 3c             	add    esp,0x3c
c000e404:	89 d0                	mov    eax,edx
c000e406:	5b                   	pop    ebx
c000e407:	5e                   	pop    esi
c000e408:	5f                   	pop    edi
c000e409:	5d                   	pop    ebp
c000e40a:	c3                   	ret    

c000e40b <zoh_reset>:
c000e40b:	83 ec 0c             	sub    esp,0xc
c000e40e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e412:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e415:	85 c0                	test   eax,eax
c000e417:	74 20                	je     c000e439 <zoh_reset+0x2e>
c000e419:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e41c:	83 c0 1c             	add    eax,0x1c
c000e41f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e422:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e429:	c1 e2 02             	shl    edx,0x2
c000e42c:	51                   	push   ecx
c000e42d:	52                   	push   edx
c000e42e:	6a 00                	push   0x0
c000e430:	50                   	push   eax
c000e431:	e8 52 23 ff ff       	call   c0000788 <memset>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	83 c4 0c             	add    esp,0xc
c000e43c:	c3                   	ret    

c000e43d <zoh_get_name>:
c000e43d:	31 c0                	xor    eax,eax
c000e43f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e444:	75 05                	jne    c000e44b <zoh_get_name+0xe>
c000e446:	b8 1e a8 02 c0       	mov    eax,0xc002a81e
c000e44b:	c3                   	ret    

c000e44c <zoh_get_description>:
c000e44c:	31 c0                	xor    eax,eax
c000e44e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e453:	75 05                	jne    c000e45a <zoh_get_description+0xe>
c000e455:	b8 2f a8 02 c0       	mov    eax,0xc002a82f
c000e45a:	c3                   	ret    

c000e45b <zoh_set_converter>:
c000e45b:	53                   	push   ebx
c000e45c:	b8 0a 00 00 00       	mov    eax,0xa
c000e461:	83 ec 08             	sub    esp,0x8
c000e464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e468:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e46d:	75 6e                	jne    c000e4dd <zoh_set_converter+0x82>
c000e46f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e472:	85 c0                	test   eax,eax
c000e474:	74 13                	je     c000e489 <zoh_set_converter+0x2e>
c000e476:	83 ec 0c             	sub    esp,0xc
c000e479:	50                   	push   eax
c000e47a:	e8 ad 14 00 00       	call   c000f92c <free>
c000e47f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e486:	83 c4 10             	add    esp,0x10
c000e489:	50                   	push   eax
c000e48a:	50                   	push   eax
c000e48b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e48e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e495:	50                   	push   eax
c000e496:	6a 01                	push   0x1
c000e498:	e8 af 14 00 00       	call   c000f94c <calloc>
c000e49d:	83 c4 10             	add    esp,0x10
c000e4a0:	89 c2                	mov    edx,eax
c000e4a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e4a5:	85 d2                	test   edx,edx
c000e4a7:	b8 01 00 00 00       	mov    eax,0x1
c000e4ac:	74 2f                	je     c000e4dd <zoh_set_converter+0x82>
c000e4ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4b1:	83 ec 0c             	sub    esp,0xc
c000e4b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4b7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4bd:	c7 43 24 66 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd66
c000e4c4:	c7 43 20 66 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd66
c000e4cb:	c7 43 28 0b e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e40b
c000e4d2:	53                   	push   ebx
c000e4d3:	e8 33 ff ff ff       	call   c000e40b <zoh_reset>
c000e4d8:	83 c4 10             	add    esp,0x10
c000e4db:	31 c0                	xor    eax,eax
c000e4dd:	83 c4 08             	add    esp,0x8
c000e4e0:	5b                   	pop    ebx
c000e4e1:	c3                   	ret    

c000e4e2 <CPU::current()>:
c000e4e2:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e4e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4ed:	90                   	nop
c000e4ee:	c3                   	ret    

c000e4ef <operator new(unsigned long)>:
c000e4ef:	83 ec 0c             	sub    esp,0xc
c000e4f2:	83 ec 0c             	sub    esp,0xc
c000e4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f9:	e8 1e 14 00 00       	call   c000f91c <malloc>
c000e4fe:	83 c4 10             	add    esp,0x10
c000e501:	83 c4 0c             	add    esp,0xc
c000e504:	c3                   	ret    

c000e505 <operator delete(void*)>:
c000e505:	83 ec 0c             	sub    esp,0xc
c000e508:	83 ec 0c             	sub    esp,0xc
c000e50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50f:	e8 28 14 00 00       	call   c000f93c <rfree>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	90                   	nop
c000e518:	83 c4 0c             	add    esp,0xc
c000e51b:	c3                   	ret    

c000e51c <disableIRQs()>:
c000e51c:	fa                   	cli    
c000e51d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e522:	40                   	inc    eax
c000e523:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e528:	90                   	nop
c000e529:	c3                   	ret    

c000e52a <enableIRQs()>:
c000e52a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e52f:	48                   	dec    eax
c000e530:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e535:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e53a:	85 c0                	test   eax,eax
c000e53c:	75 01                	jne    c000e53f <enableIRQs()+0x15>
c000e53e:	fb                   	sti    
c000e53f:	90                   	nop
c000e540:	c3                   	ret    

c000e541 <lockScheduler()>:
c000e541:	fa                   	cli    
c000e542:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e547:	40                   	inc    eax
c000e548:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e54d:	90                   	nop
c000e54e:	c3                   	ret    

c000e54f <unlockScheduler()>:
c000e54f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e554:	48                   	dec    eax
c000e555:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e55a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e55f:	85 c0                	test   eax,eax
c000e561:	75 01                	jne    c000e564 <unlockScheduler()+0x15>
c000e563:	fb                   	sti    
c000e564:	90                   	nop
c000e565:	c3                   	ret    

c000e566 <lockStuff()>:
c000e566:	fa                   	cli    
c000e567:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e56c:	40                   	inc    eax
c000e56d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e572:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e577:	40                   	inc    eax
c000e578:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c000e57d:	90                   	nop
c000e57e:	c3                   	ret    

c000e57f <unlockStuff()>:
c000e57f:	83 ec 0c             	sub    esp,0xc
c000e582:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e587:	48                   	dec    eax
c000e588:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c000e58d:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e592:	85 c0                	test   eax,eax
c000e594:	75 18                	jne    c000e5ae <unlockStuff()+0x2f>
c000e596:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c000e59b:	85 c0                	test   eax,eax
c000e59d:	74 0f                	je     c000e5ae <unlockStuff()+0x2f>
c000e59f:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c000e5a9:	e8 d8 fe 00 00       	call   c001e486 <schedule()>
c000e5ae:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e5b3:	48                   	dec    eax
c000e5b4:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e5b9:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e5be:	85 c0                	test   eax,eax
c000e5c0:	75 01                	jne    c000e5c3 <unlockStuff()+0x44>
c000e5c2:	fb                   	sti    
c000e5c3:	90                   	nop
c000e5c4:	83 c4 0c             	add    esp,0xc
c000e5c7:	c3                   	ret    

c000e5c8 <Virt::getAKernelVAS()>:
c000e5c8:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c000e5cd:	90                   	nop
c000e5ce:	c3                   	ret    

c000e5cf <Krnl::resolveCompatibilitySymbol(char*)>:
c000e5cf:	83 ec 0c             	sub    esp,0xc
c000e5d2:	83 ec 08             	sub    esp,0x8
c000e5d5:	68 66 a8 02 c0       	push   0xc002a866
c000e5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5de:	e8 ed 22 ff ff       	call   c00008d0 <strcmp>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	85 c0                	test   eax,eax
c000e5e8:	0f 94 c0             	sete   al
c000e5eb:	84 c0                	test   al,al
c000e5ed:	74 0a                	je     c000e5f9 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e5ef:	b8 28 ee 02 c0       	mov    eax,0xc002ee28
c000e5f4:	e9 e3 00 00 00       	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f9:	83 ec 08             	sub    esp,0x8
c000e5fc:	68 6f a8 02 c0       	push   0xc002a86f
c000e601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e605:	e8 c6 22 ff ff       	call   c00008d0 <strcmp>
c000e60a:	83 c4 10             	add    esp,0x10
c000e60d:	85 c0                	test   eax,eax
c000e60f:	0f 94 c0             	sete   al
c000e612:	84 c0                	test   al,al
c000e614:	74 0a                	je     c000e620 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e616:	b8 a4 71 02 c0       	mov    eax,0xc00271a4
c000e61b:	e9 bc 00 00 00       	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e620:	83 ec 08             	sub    esp,0x8
c000e623:	68 79 a8 02 c0       	push   0xc002a879
c000e628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62c:	e8 9f 22 ff ff       	call   c00008d0 <strcmp>
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	85 c0                	test   eax,eax
c000e636:	0f 94 c0             	sete   al
c000e639:	84 c0                	test   al,al
c000e63b:	74 0a                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e63d:	b8 d8 6e 02 c0       	mov    eax,0xc0026ed8
c000e642:	e9 95 00 00 00       	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	83 ec 08             	sub    esp,0x8
c000e64a:	68 82 a8 02 c0       	push   0xc002a882
c000e64f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e653:	e8 78 22 ff ff       	call   c00008d0 <strcmp>
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	85 c0                	test   eax,eax
c000e65d:	0f 94 c0             	sete   al
c000e660:	84 c0                	test   al,al
c000e662:	74 07                	je     c000e66b <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e664:	b8 a4 72 02 c0       	mov    eax,0xc00272a4
c000e669:	eb 71                	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e66b:	83 ec 08             	sub    esp,0x8
c000e66e:	68 8c a8 02 c0       	push   0xc002a88c
c000e673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e677:	e8 54 22 ff ff       	call   c00008d0 <strcmp>
c000e67c:	83 c4 10             	add    esp,0x10
c000e67f:	85 c0                	test   eax,eax
c000e681:	0f 94 c0             	sete   al
c000e684:	84 c0                	test   al,al
c000e686:	74 07                	je     c000e68f <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e688:	b8 24 70 02 c0       	mov    eax,0xc0027024
c000e68d:	eb 4d                	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e68f:	83 ec 08             	sub    esp,0x8
c000e692:	68 95 a8 02 c0       	push   0xc002a895
c000e697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e69b:	e8 30 22 ff ff       	call   c00008d0 <strcmp>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	85 c0                	test   eax,eax
c000e6a5:	0f 94 c0             	sete   al
c000e6a8:	84 c0                	test   al,al
c000e6aa:	74 07                	je     c000e6b3 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e6ac:	b8 2c ee 02 c0       	mov    eax,0xc002ee2c
c000e6b1:	eb 29                	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6b3:	83 ec 08             	sub    esp,0x8
c000e6b6:	68 a2 a8 02 c0       	push   0xc002a8a2
c000e6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6bf:	e8 0c 22 ff ff       	call   c00008d0 <strcmp>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	85 c0                	test   eax,eax
c000e6c9:	0f 94 c0             	sete   al
c000e6cc:	84 c0                	test   al,al
c000e6ce:	74 07                	je     c000e6d7 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e6d0:	b8 2d ee 02 c0       	mov    eax,0xc002ee2d
c000e6d5:	eb 05                	jmp    c000e6dc <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6d7:	b8 00 00 00 00       	mov    eax,0x0
c000e6dc:	83 c4 0c             	add    esp,0xc
c000e6df:	c3                   	ret    

c000e6e0 <Computer::close(int, int, void*)>:
c000e6e0:	57                   	push   edi
c000e6e1:	56                   	push   esi
c000e6e2:	53                   	push   ebx
c000e6e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e6ef:	83 ec 0c             	sub    esp,0xc
c000e6f2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e6f8:	e8 81 5d 00 00       	call   c001447e <Device::closeAll()>
c000e6fd:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e703:	83 c4 10             	add    esp,0x10
c000e706:	8b 10                	mov    edx,DWORD PTR [eax]
c000e708:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e70c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e714:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e718:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e71c:	5b                   	pop    ebx
c000e71d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e720:	5e                   	pop    esi
c000e721:	5f                   	pop    edi
c000e722:	ff e0                	jmp    eax

c000e724 <Krnl::firstTask()>:
c000e724:	53                   	push   ebx
c000e725:	83 ec 14             	sub    esp,0x14
c000e728:	fb                   	sti    
c000e729:	68 3f 07 00 00       	push   0x73f
c000e72e:	e8 e9 11 00 00       	call   c000f91c <malloc>
c000e733:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e73a:	89 c3                	mov    ebx,eax
c000e73c:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e742:	68 af a8 02 c0       	push   0xc002a8af
c000e747:	6a 01                	push   0x1
c000e749:	50                   	push   eax
c000e74a:	e8 fb f8 00 00       	call   c001e04a <Process::Process(bool, char const*, Process*, char**)>
c000e74f:	83 c4 20             	add    esp,0x20
c000e752:	68 ff 00 00 00       	push   0xff
c000e757:	6a 00                	push   0x0
c000e759:	68 af f2 00 c0       	push   0xc000f2af
c000e75e:	53                   	push   ebx
c000e75f:	e8 de fa 00 00       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c000e764:	6a 7a                	push   0x7a
c000e766:	6a 00                	push   0x0
c000e768:	68 c0 ec 01 c0       	push   0xc001ecc0
c000e76d:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e773:	e8 ca fa 00 00       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c000e778:	83 c4 20             	add    esp,0x20
c000e77b:	a3 48 23 03 c0       	mov    ds:0xc0032348,eax
c000e780:	c6 05 2d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee2d,0x1
c000e787:	e8 88 09 01 00       	call   c001f114 <Vm::initialise8086()>
c000e78c:	e8 cd 4a 00 00       	call   c001325e <Fs::initVFS()>
c000e791:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e796:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e79c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e79e:	6a 00                	push   0x0
c000e7a0:	6a 00                	push   0x0
c000e7a2:	6a 00                	push   0x0
c000e7a4:	50                   	push   eax
c000e7a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7a8:	e8 2b e1 00 00       	call   c001c8d8 <Sys::loadSyscalls()>
c000e7ad:	e8 a4 bf 00 00       	call   c001a756 <Krnl::loadSystemEnv()>
c000e7b2:	83 c4 0c             	add    esp,0xc
c000e7b5:	6a 3a                	push   0x3a
c000e7b7:	68 bc a8 02 c0       	push   0xc002a8bc
c000e7bc:	68 c5 a8 02 c0       	push   0xc002a8c5
c000e7c1:	e8 b6 cc 00 00       	call   c001b47c <Reg::readIntWithDefault(char*, char*, int)>
c000e7c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7c9:	e8 80 55 00 00       	call   c0013d4e <User::loadClockSettings(int)>
c000e7ce:	58                   	pop    eax
c000e7cf:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e7d4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7da:	e8 73 5c 00 00       	call   c0014452 <Device::loadDriversForAll()>
c000e7df:	e8 b8 ba 00 00       	call   c001a29c <Krnl::startCPUs()>
c000e7e4:	5a                   	pop    edx
c000e7e5:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c000e7eb:	59                   	pop    ecx
c000e7ec:	6a 01                	push   0x1
c000e7ee:	68 cd a8 02 c0       	push   0xc002a8cd
c000e7f3:	e8 b0 f2 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c000e7f8:	5a                   	pop    edx
c000e7f9:	59                   	pop    ecx
c000e7fa:	53                   	push   ebx
c000e7fb:	50                   	push   eax
c000e7fc:	e8 d2 f4 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c000e801:	83 c4 10             	add    esp,0x10
c000e804:	83 ec 0c             	sub    esp,0xc
c000e807:	6a 02                	push   0x2
c000e809:	e8 77 fe 00 00       	call   c001e685 <blockTask(TaskState)>
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	eb f1                	jmp    c000e804 <Krnl::firstTask()+0xe0>
c000e813:	90                   	nop

c000e814 <Computer::Computer()>:
c000e814:	83 ec 0c             	sub    esp,0xc
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	68 e9 a8 02 c0       	push   0xc002a8e9
c000e823:	50                   	push   eax
c000e824:	e8 cf 5c 00 00       	call   c00144f8 <Device::Device(char const*)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c000e831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e835:	89 10                	mov    DWORD PTR [eax],edx
c000e837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e857:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e85d:	83 ca 04             	or     edx,0x4
c000e860:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e870:	0f b6 d0             	movzx  edx,al
c000e873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e877:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e882:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e888:	0f b6 d0             	movzx  edx,al
c000e88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e898:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e89e:	8d 50 01             	lea    edx,[eax+0x1]
c000e8a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8a5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8ab:	0f b6 d0             	movzx  edx,al
c000e8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8b6:	83 e1 3f             	and    ecx,0x3f
c000e8b9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c7:	0f b6 d0             	movzx  edx,al
c000e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ce:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8df:	0f b6 d0             	movzx  edx,al
c000e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f5:	8d 50 01             	lea    edx,[eax+0x1]
c000e8f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8fc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e902:	0f b6 d0             	movzx  edx,al
c000e905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e909:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e90d:	83 e1 3f             	and    ecx,0x3f
c000e910:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e918:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e91e:	0f b6 d0             	movzx  edx,al
c000e921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e925:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e930:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e936:	0f b6 d0             	movzx  edx,al
c000e939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e946:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e94c:	8d 50 01             	lea    edx,[eax+0x1]
c000e94f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e953:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e959:	0f b6 d0             	movzx  edx,al
c000e95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e960:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e964:	83 e1 3f             	and    ecx,0x3f
c000e967:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e96b:	90                   	nop
c000e96c:	83 c4 0c             	add    esp,0xc
c000e96f:	c3                   	ret    

c000e970 <Computer::setBootMessage(char const*)>:
c000e970:	c3                   	ret    
c000e971:	90                   	nop

c000e972 <Computer::detectFeatures()>:
c000e972:	55                   	push   ebp
c000e973:	57                   	push   edi
c000e974:	56                   	push   esi
c000e975:	53                   	push   ebx
c000e976:	83 ec 1c             	sub    esp,0x1c
c000e979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e97d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e987:	e8 58 19 ff ff       	call   c00002e4 <detectCPUID>
c000e98c:	85 c0                	test   eax,eax
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	0f 95 c2             	setne  dl
c000e997:	83 e0 fd             	and    eax,0xfffffffd
c000e99a:	d1 e2                	shl    edx,1
c000e99c:	09 d0                	or     eax,edx
c000e99e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9a4:	a8 02                	test   al,0x2
c000e9a6:	75 46                	jne    c000e9ee <Computer::detectFeatures()+0x7c>
c000e9a8:	f6 05 41 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee41,0x4
c000e9af:	74 07                	je     c000e9b8 <Computer::detectFeatures()+0x46>
c000e9b1:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e9b8:	e8 a9 84 01 00       	call   c0026e66 <x87Detect>
c000e9bd:	83 e0 01             	and    eax,0x1
c000e9c0:	c1 e0 04             	shl    eax,0x4
c000e9c3:	88 c2                	mov    dl,al
c000e9c5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cb:	83 e0 ef             	and    eax,0xffffffef
c000e9ce:	09 d0                	or     eax,edx
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	a8 10                	test   al,0x10
c000e9d8:	0f 85 2a 01 00 00    	jne    c000eb08 <Computer::detectFeatures()+0x196>
c000e9de:	84 c0                	test   al,al
c000e9e0:	0f 88 45 01 00 00    	js     c000eb2b <Computer::detectFeatures()+0x1b9>
c000e9e6:	83 c4 1c             	add    esp,0x1c
c000e9e9:	5b                   	pop    ebx
c000e9ea:	5e                   	pop    esi
c000e9eb:	5f                   	pop    edi
c000e9ec:	5d                   	pop    ebp
c000e9ed:	c3                   	ret    
c000e9ee:	83 ec 0c             	sub    esp,0xc
c000e9f1:	6a 20                	push   0x20
c000e9f3:	e8 b6 a5 00 00       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c000e9f8:	83 e0 01             	and    eax,0x1
c000e9fb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ea02:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea08:	83 e0 f7             	and    eax,0xfffffff7
c000ea0b:	09 d0                	or     eax,edx
c000ea0d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea13:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ea1a:	e8 8f a5 00 00       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c000ea1f:	83 e0 01             	and    eax,0x1
c000ea22:	88 c2                	mov    dl,al
c000ea24:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea2a:	83 e0 fe             	and    eax,0xfffffffe
c000ea2d:	09 d0                	or     eax,edx
c000ea2f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea35:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea3c:	e8 6d a5 00 00       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c000ea41:	c1 e0 07             	shl    eax,0x7
c000ea44:	88 c2                	mov    dl,al
c000ea46:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea4c:	83 e0 7f             	and    eax,0x7f
c000ea4f:	09 d0                	or     eax,edx
c000ea51:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea57:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea5e:	e8 4b a5 00 00       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c000ea63:	83 c4 10             	add    esp,0x10
c000ea66:	83 e0 01             	and    eax,0x1
c000ea69:	c1 e0 05             	shl    eax,0x5
c000ea6c:	88 c2                	mov    dl,al
c000ea6e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea74:	83 e0 df             	and    eax,0xffffffdf
c000ea77:	09 d0                	or     eax,edx
c000ea79:	f7 05 40 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee40,0x401
c000ea83:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea89:	0f 84 c2 00 00 00    	je     c000eb51 <Computer::detectFeatures()+0x1df>
c000ea8f:	83 e0 fe             	and    eax,0xfffffffe
c000ea92:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea98:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9e:	88 c2                	mov    dl,al
c000eaa0:	83 e2 09             	and    edx,0x9
c000eaa3:	fe ca                	dec    dl
c000eaa5:	75 09                	jne    c000eab0 <Computer::detectFeatures()+0x13e>
c000eaa7:	83 e0 fe             	and    eax,0xfffffffe
c000eaaa:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eab0:	83 ec 0c             	sub    esp,0xc
c000eab3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eab7:	50                   	push   eax
c000eab8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000eabc:	55                   	push   ebp
c000eabd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000eac1:	57                   	push   edi
c000eac2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000eac6:	56                   	push   esi
c000eac7:	68 00 00 00 80       	push   0x80000000
c000eacc:	e8 59 a4 00 00       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ead1:	83 c4 20             	add    esp,0x20
c000ead4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eadb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eadf:	0f 86 c3 fe ff ff    	jbe    c000e9a8 <Computer::detectFeatures()+0x36>
c000eae5:	83 ec 0c             	sub    esp,0xc
c000eae8:	50                   	push   eax
c000eae9:	55                   	push   ebp
c000eaea:	57                   	push   edi
c000eaeb:	56                   	push   esi
c000eaec:	68 01 00 00 80       	push   0x80000001
c000eaf1:	e8 34 a4 00 00       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eaf6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eb00:	83 c4 20             	add    esp,0x20
c000eb03:	e9 a0 fe ff ff       	jmp    c000e9a8 <Computer::detectFeatures()+0x36>
c000eb08:	e8 13 83 01 00       	call   c0026e20 <absolutelyNoChanceInHell>
c000eb0d:	88 c2                	mov    dl,al
c000eb0f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb15:	c1 e2 07             	shl    edx,0x7
c000eb18:	83 e0 7f             	and    eax,0x7f
c000eb1b:	09 d0                	or     eax,edx
c000eb1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb23:	84 c0                	test   al,al
c000eb25:	0f 89 bb fe ff ff    	jns    c000e9e6 <Computer::detectFeatures()+0x74>
c000eb2b:	e8 d0 82 01 00       	call   c0026e00 <avxDetect>
c000eb30:	83 e0 01             	and    eax,0x1
c000eb33:	c1 e0 05             	shl    eax,0x5
c000eb36:	88 c2                	mov    dl,al
c000eb38:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb3e:	83 e0 df             	and    eax,0xffffffdf
c000eb41:	09 d0                	or     eax,edx
c000eb43:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb49:	83 c4 1c             	add    esp,0x1c
c000eb4c:	5b                   	pop    ebx
c000eb4d:	5e                   	pop    esi
c000eb4e:	5f                   	pop    edi
c000eb4f:	5d                   	pop    ebp
c000eb50:	c3                   	ret    
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	68 00 02 00 00       	push   0x200
c000eb59:	e8 50 a4 00 00       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c000eb5e:	83 c4 10             	add    esp,0x10
c000eb61:	83 e0 01             	and    eax,0x1
c000eb64:	88 c2                	mov    dl,al
c000eb66:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb6c:	83 e0 fe             	and    eax,0xfffffffe
c000eb6f:	09 d0                	or     eax,edx
c000eb71:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb77:	e9 1c ff ff ff       	jmp    c000ea98 <Computer::detectFeatures()+0x126>

c000eb7c <Computer::displayFeatures()>:
c000eb7c:	53                   	push   ebx
c000eb7d:	83 ec 14             	sub    esp,0x14
c000eb80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb84:	68 f9 a8 02 c0       	push   0xc002a8f9
c000eb89:	e8 45 43 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb98:	0f 85 73 02 00 00    	jne    c000ee11 <Computer::displayFeatures()+0x295>
c000eb9e:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 0c a9 02 c0       	push   0xc002a90c
c000ebac:	e8 22 43 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000ebbb:	0f 85 8c 02 00 00    	jne    c000ee4d <Computer::displayFeatures()+0x2d1>
c000ebc1:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 1d a9 02 c0       	push   0xc002a91d
c000ebcf:	e8 ff 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebde:	0f 85 5f 02 00 00    	jne    c000ee43 <Computer::displayFeatures()+0x2c7>
c000ebe4:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 2e a9 02 c0       	push   0xc002a92e
c000ebf2:	e8 dc 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ec01:	0f 85 32 02 00 00    	jne    c000ee39 <Computer::displayFeatures()+0x2bd>
c000ec07:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 3f a9 02 c0       	push   0xc002a93f
c000ec15:	e8 b9 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec24:	0f 85 05 02 00 00    	jne    c000ee2f <Computer::displayFeatures()+0x2b3>
c000ec2a:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 50 a9 02 c0       	push   0xc002a950
c000ec38:	e8 96 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec47:	0f 85 d8 01 00 00    	jne    c000ee25 <Computer::displayFeatures()+0x2a9>
c000ec4d:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 61 a9 02 c0       	push   0xc002a961
c000ec5b:	e8 73 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec6a:	0f 85 ab 01 00 00    	jne    c000ee1b <Computer::displayFeatures()+0x29f>
c000ec70:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 72 a9 02 c0       	push   0xc002a972
c000ec7e:	e8 50 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec8d:	0f 88 1b 02 00 00    	js     c000eeae <Computer::displayFeatures()+0x332>
c000ec93:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 83 a9 02 c0       	push   0xc002a983
c000eca1:	e8 2d 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ecb0:	0f 85 a1 01 00 00    	jne    c000ee57 <Computer::displayFeatures()+0x2db>
c000ecb6:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 94 a9 02 c0       	push   0xc002a994
c000ecc4:	e8 0a 42 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ecd3:	0f 85 cb 01 00 00    	jne    c000eea4 <Computer::displayFeatures()+0x328>
c000ecd9:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 a5 a9 02 c0       	push   0xc002a9a5
c000ece7:	e8 e7 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecf6:	0f 85 9e 01 00 00    	jne    c000ee9a <Computer::displayFeatures()+0x31e>
c000ecfc:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 b6 a9 02 c0       	push   0xc002a9b6
c000ed0a:	e8 c4 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ed19:	0f 85 71 01 00 00    	jne    c000ee90 <Computer::displayFeatures()+0x314>
c000ed1f:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed24:	83 ec 08             	sub    esp,0x8
c000ed27:	50                   	push   eax
c000ed28:	68 c7 a9 02 c0       	push   0xc002a9c7
c000ed2d:	e8 a1 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed3c:	0f 85 44 01 00 00    	jne    c000ee86 <Computer::displayFeatures()+0x30a>
c000ed42:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed47:	83 ec 08             	sub    esp,0x8
c000ed4a:	50                   	push   eax
c000ed4b:	68 d8 a9 02 c0       	push   0xc002a9d8
c000ed50:	e8 7e 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ed55:	83 c4 10             	add    esp,0x10
c000ed58:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed5f:	0f 85 17 01 00 00    	jne    c000ee7c <Computer::displayFeatures()+0x300>
c000ed65:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed6a:	83 ec 08             	sub    esp,0x8
c000ed6d:	50                   	push   eax
c000ed6e:	68 e9 a9 02 c0       	push   0xc002a9e9
c000ed73:	e8 5b 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ed78:	83 c4 10             	add    esp,0x10
c000ed7b:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed82:	0f 85 ea 00 00 00    	jne    c000ee72 <Computer::displayFeatures()+0x2f6>
c000ed88:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed8d:	83 ec 08             	sub    esp,0x8
c000ed90:	50                   	push   eax
c000ed91:	68 fa a9 02 c0       	push   0xc002a9fa
c000ed96:	e8 38 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eda5:	0f 88 0d 01 00 00    	js     c000eeb8 <Computer::displayFeatures()+0x33c>
c000edab:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000edb0:	83 ec 08             	sub    esp,0x8
c000edb3:	50                   	push   eax
c000edb4:	68 0b aa 02 c0       	push   0xc002aa0b
c000edb9:	e8 15 41 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edc8:	0f 85 9a 00 00 00    	jne    c000ee68 <Computer::displayFeatures()+0x2ec>
c000edce:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000edd3:	83 ec 08             	sub    esp,0x8
c000edd6:	50                   	push   eax
c000edd7:	68 1c aa 02 c0       	push   0xc002aa1c
c000eddc:	e8 f2 40 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edeb:	75 74                	jne    c000ee61 <Computer::displayFeatures()+0x2e5>
c000eded:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000edf2:	83 ec 08             	sub    esp,0x8
c000edf5:	50                   	push   eax
c000edf6:	68 2d aa 02 c0       	push   0xc002aa2d
c000edfb:	e8 d3 40 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ee00:	c7 44 24 20 94 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c494
c000ee08:	83 c4 18             	add    esp,0x18
c000ee0b:	5b                   	pop    ebx
c000ee0c:	e9 c2 40 00 00       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ee11:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee16:	e9 88 fd ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0x27>
c000ee1b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee20:	e9 50 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0xf9>
c000ee25:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee2a:	e9 23 fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0xd6>
c000ee2f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee34:	e9 f6 fd ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0xb3>
c000ee39:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee3e:	e9 c9 fd ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x90>
c000ee43:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee48:	e9 9c fd ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x6d>
c000ee4d:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee52:	e9 6f fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x4a>
c000ee57:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee5c:	e9 5a fe ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x13f>
c000ee61:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee66:	eb 8a                	jmp    c000edf2 <Computer::displayFeatures()+0x276>
c000ee68:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee6d:	e9 61 ff ff ff       	jmp    c000edd3 <Computer::displayFeatures()+0x257>
c000ee72:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee77:	e9 11 ff ff ff       	jmp    c000ed8d <Computer::displayFeatures()+0x211>
c000ee7c:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee81:	e9 e4 fe ff ff       	jmp    c000ed6a <Computer::displayFeatures()+0x1ee>
c000ee86:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee8b:	e9 b7 fe ff ff       	jmp    c000ed47 <Computer::displayFeatures()+0x1cb>
c000ee90:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee95:	e9 8a fe ff ff       	jmp    c000ed24 <Computer::displayFeatures()+0x1a8>
c000ee9a:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee9f:	e9 5d fe ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x185>
c000eea4:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eea9:	e9 30 fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x162>
c000eeae:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eeb3:	e9 e0 fd ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x11c>
c000eeb8:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eebd:	e9 ee fe ff ff       	jmp    c000edb0 <Computer::displayFeatures()+0x234>

c000eec2 <Computer::rdmsr(unsigned int)>:
c000eec2:	83 ec 0c             	sub    esp,0xc
c000eec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eec9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eed0:	74 0a                	je     c000eedc <Computer::rdmsr(unsigned int)+0x1a>
c000eed2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eed6:	0f 32                	rdmsr  
c000eed8:	83 c4 0c             	add    esp,0xc
c000eedb:	c3                   	ret    
c000eedc:	83 ec 0c             	sub    esp,0xc
c000eedf:	68 3e aa 02 c0       	push   0xc002aa3e
c000eee4:	e8 a6 b9 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	eb e4                	jmp    c000eed2 <Computer::rdmsr(unsigned int)+0x10>

c000eeee <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeee:	57                   	push   edi
c000eeef:	56                   	push   esi
c000eef0:	52                   	push   edx
c000eef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eef5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eef9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eefd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef04:	74 0e                	je     c000ef14 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ef06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef0a:	89 f0                	mov    eax,esi
c000ef0c:	89 fa                	mov    edx,edi
c000ef0e:	0f 30                	wrmsr  
c000ef10:	58                   	pop    eax
c000ef11:	5e                   	pop    esi
c000ef12:	5f                   	pop    edi
c000ef13:	c3                   	ret    
c000ef14:	83 ec 0c             	sub    esp,0xc
c000ef17:	68 44 aa 02 c0       	push   0xc002aa44
c000ef1c:	e8 6e b9 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000ef21:	83 c4 10             	add    esp,0x10
c000ef24:	eb e0                	jmp    c000ef06 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef26 <Computer::nmiEnabled()>:
c000ef26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef2a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef30:	c3                   	ret    
c000ef31:	90                   	nop

c000ef32 <Computer::readCMOS(unsigned char)>:
c000ef32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef36:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef3d:	19 c0                	sbb    eax,eax
c000ef3f:	83 e0 80             	and    eax,0xffffff80
c000ef42:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef46:	e6 70                	out    0x70,al
c000ef48:	e4 71                	in     al,0x71
c000ef4a:	c3                   	ret    
c000ef4b:	90                   	nop

c000ef4c <Computer::enableNMI(bool)>:
c000ef4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef5a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef62:	eb ce                	jmp    c000ef32 <Computer::readCMOS(unsigned char)>

c000ef64 <Computer::open(int, int, void*)>:
c000ef64:	56                   	push   esi
c000ef65:	53                   	push   ebx
c000ef66:	83 ec 10             	sub    esp,0x10
c000ef69:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef6d:	f6 05 40 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee40,0x4
c000ef74:	68 68 12 00 00       	push   0x1268
c000ef79:	0f 94 05 64 dd 02 c0 	sete   BYTE PTR ds:0xc002dd64
c000ef80:	e8 97 09 00 00       	call   c000f91c <malloc>
c000ef85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef88:	89 c6                	mov    esi,eax
c000ef8a:	e8 a3 93 00 00       	call   c0018332 <ACPI::ACPI()>
c000ef8f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef95:	58                   	pop    eax
c000ef96:	5a                   	pop    edx
c000ef97:	56                   	push   esi
c000ef98:	53                   	push   ebx
c000ef99:	e8 6a 53 00 00       	call   c0014308 <Device::addChild(Device*)>
c000ef9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa1:	e8 cc f9 ff ff       	call   c000e972 <Computer::detectFeatures()>
c000efa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa9:	e8 ce fb ff ff       	call   c000eb7c <Computer::displayFeatures()>
c000efae:	59                   	pop    ecx
c000efaf:	5e                   	pop    esi
c000efb0:	6a 01                	push   0x1
c000efb2:	53                   	push   ebx
c000efb3:	e8 94 ff ff ff       	call   c000ef4c <Computer::enableNMI(bool)>
c000efb8:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efbf:	e8 58 09 00 00       	call   c000f91c <malloc>
c000efc4:	89 04 24             	mov    DWORD PTR [esp],eax
c000efc7:	89 c6                	mov    esi,eax
c000efc9:	e8 98 a0 00 00       	call   c0019066 <CPU::CPU()>
c000efce:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efd4:	58                   	pop    eax
c000efd5:	5a                   	pop    edx
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	e8 2b 53 00 00       	call   c0014308 <Device::addChild(Device*)>
c000efdd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efe3:	8b 10                	mov    edx,DWORD PTR [eax]
c000efe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efe9:	6a 00                	push   0x0
c000efeb:	6a 00                	push   0x0
c000efed:	50                   	push   eax
c000efee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eff1:	83 c4 20             	add    esp,0x20
c000eff4:	e8 a3 58 00 00       	call   c001489c <setupFPU()>
c000eff9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efff:	85 c0                	test   eax,eax
c000f001:	74 1f                	je     c000f022 <Computer::open(int, int, void*)+0xbe>
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	50                   	push   eax
c000f007:	53                   	push   ebx
c000f008:	e8 fb 52 00 00       	call   c0014308 <Device::addChild(Device*)>
c000f00d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000f013:	8b 10                	mov    edx,DWORD PTR [eax]
c000f015:	6a 00                	push   0x0
c000f017:	6a 00                	push   0x0
c000f019:	6a 00                	push   0x0
c000f01b:	50                   	push   eax
c000f01c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f01f:	83 c4 20             	add    esp,0x20
c000f022:	83 ec 0c             	sub    esp,0xc
c000f025:	68 24 e7 00 c0       	push   0xc000e724
c000f02a:	e8 35 f3 00 00       	call   c001e364 <setupMultitasking(void (*)())>
c000f02f:	83 c4 14             	add    esp,0x14
c000f032:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f037:	5b                   	pop    ebx
c000f038:	5e                   	pop    esi
c000f039:	c3                   	ret    

c000f03a <Computer::disableNMI()>:
c000f03a:	6a 00                	push   0x0
c000f03c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f040:	e8 07 ff ff ff       	call   c000ef4c <Computer::enableNMI(bool)>
c000f045:	58                   	pop    eax
c000f046:	5a                   	pop    edx
c000f047:	c3                   	ret    

c000f048 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f04c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f053:	19 c0                	sbb    eax,eax
c000f055:	83 e0 80             	and    eax,0xffffff80
c000f058:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f05c:	e6 70                	out    0x70,al
c000f05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f062:	e6 71                	out    0x71,al
c000f064:	c3                   	ret    
c000f065:	90                   	nop

c000f066 <Computer::handleNMI()>:
c000f066:	56                   	push   esi
c000f067:	53                   	push   ebx
c000f068:	83 ec 10             	sub    esp,0x10
c000f06b:	e4 92                	in     al,0x92
c000f06d:	89 c6                	mov    esi,eax
c000f06f:	e4 61                	in     al,0x61
c000f071:	68 4a aa 02 c0       	push   0xc002aa4a
c000f076:	88 c3                	mov    bl,al
c000f078:	e8 56 3e 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000f07d:	83 c4 10             	add    esp,0x10
c000f080:	83 e6 10             	and    esi,0x10
c000f083:	75 0d                	jne    c000f092 <Computer::handleNMI()+0x2c>
c000f085:	f6 c3 40             	test   bl,0x40
c000f088:	75 1d                	jne    c000f0a7 <Computer::handleNMI()+0x41>
c000f08a:	84 db                	test   bl,bl
c000f08c:	78 2d                	js     c000f0bb <Computer::handleNMI()+0x55>
c000f08e:	58                   	pop    eax
c000f08f:	5b                   	pop    ebx
c000f090:	5e                   	pop    esi
c000f091:	c3                   	ret    
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	68 5b aa 02 c0       	push   0xc002aa5b
c000f09a:	e8 f0 b7 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	f6 c3 40             	test   bl,0x40
c000f0a5:	74 e3                	je     c000f08a <Computer::handleNMI()+0x24>
c000f0a7:	83 ec 0c             	sub    esp,0xc
c000f0aa:	68 68 aa 02 c0       	push   0xc002aa68
c000f0af:	e8 db b7 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000f0b4:	83 c4 10             	add    esp,0x10
c000f0b7:	84 db                	test   bl,bl
c000f0b9:	79 d3                	jns    c000f08e <Computer::handleNMI()+0x28>
c000f0bb:	c7 44 24 10 72 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa72
c000f0c3:	5a                   	pop    edx
c000f0c4:	5b                   	pop    ebx
c000f0c5:	5e                   	pop    esi
c000f0c6:	e9 c4 b7 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c000f0cb:	90                   	nop

c000f0cc <Computer::setDiskActivityLight(int, bool)>:
c000f0cc:	56                   	push   esi
c000f0cd:	53                   	push   ebx
c000f0ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0d2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0d7:	77 1b                	ja     c000f0f4 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0d9:	e4 92                	in     al,0x92
c000f0db:	bb 40 00 00 00       	mov    ebx,0x40
c000f0e0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0e4:	89 da                	mov    edx,ebx
c000f0e6:	d3 e2                	shl    edx,cl
c000f0e8:	89 f1                	mov    ecx,esi
c000f0ea:	f7 d2                	not    edx
c000f0ec:	d3 e3                	shl    ebx,cl
c000f0ee:	21 d0                	and    eax,edx
c000f0f0:	09 d8                	or     eax,ebx
c000f0f2:	e6 92                	out    0x92,al
c000f0f4:	5b                   	pop    ebx
c000f0f5:	5e                   	pop    esi
c000f0f6:	c3                   	ret    
c000f0f7:	90                   	nop

c000f0f8 <GDTEntry::setBase(unsigned int)>:
c000f0f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f100:	89 c1                	mov    ecx,eax
c000f102:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f106:	c1 e9 10             	shr    ecx,0x10
c000f109:	c1 e8 18             	shr    eax,0x18
c000f10c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f10f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f112:	c3                   	ret    
c000f113:	90                   	nop

c000f114 <GDTEntry::setLimit(unsigned int)>:
c000f114:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f11c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f11f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f122:	83 e2 f0             	and    edx,0xfffffff0
c000f125:	c1 e8 10             	shr    eax,0x10
c000f128:	83 e0 0f             	and    eax,0xf
c000f12b:	09 d0                	or     eax,edx
c000f12d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f130:	c3                   	ret    
c000f131:	90                   	nop

c000f132 <GDT::GDT()>:
c000f132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f136:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f140:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f146:	90                   	nop
c000f147:	c3                   	ret    

c000f148 <GDT::addEntry(GDTEntry)>:
c000f148:	53                   	push   ebx
c000f149:	83 ec 0c             	sub    esp,0xc
c000f14c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f150:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f152:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f159:	52                   	push   edx
c000f15a:	50                   	push   eax
c000f15b:	68 ac aa 02 c0       	push   0xc002aaac
c000f160:	e8 6e 3d 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000f165:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f167:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f16b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f16f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f173:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f177:	8d 50 01             	lea    edx,[eax+0x1]
c000f17a:	c1 e0 03             	shl    eax,0x3
c000f17d:	89 13                	mov    DWORD PTR [ebx],edx
c000f17f:	83 c4 18             	add    esp,0x18
c000f182:	5b                   	pop    ebx
c000f183:	c3                   	ret    

c000f184 <GDT::getNumberOfEntries()>:
c000f184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f188:	8b 00                	mov    eax,DWORD PTR [eax]
c000f18a:	c3                   	ret    
c000f18b:	90                   	nop

c000f18c <GDT::flush()>:
c000f18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f190:	8b 10                	mov    edx,DWORD PTR [eax]
c000f192:	83 c0 04             	add    eax,0x4
c000f195:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f19c:	a3 32 ee 02 c0       	mov    ds:0xc002ee32,eax
c000f1a1:	66 89 15 30 ee 02 c0 	mov    WORD PTR ds:0xc002ee30,dx
c000f1a8:	e9 a3 12 ff ff       	jmp    c0000450 <loadGDT>
c000f1ad:	90                   	nop

c000f1ae <GDT::setup()>:
c000f1ae:	55                   	push   ebp
c000f1af:	57                   	push   edi
c000f1b0:	56                   	push   esi
c000f1b1:	53                   	push   ebx
c000f1b2:	83 ec 3c             	sub    esp,0x3c
c000f1b5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f1b9:	6a 00                	push   0x0
c000f1bb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1bf:	53                   	push   ebx
c000f1c0:	e8 33 ff ff ff       	call   c000f0f8 <GDTEntry::setBase(unsigned int)>
c000f1c5:	6a 00                	push   0x0
c000f1c7:	53                   	push   ebx
c000f1c8:	e8 47 ff ff ff       	call   c000f114 <GDTEntry::setLimit(unsigned int)>
c000f1cd:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1d5:	6a 00                	push   0x0
c000f1d7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1db:	53                   	push   ebx
c000f1dc:	e8 17 ff ff ff       	call   c000f0f8 <GDTEntry::setBase(unsigned int)>
c000f1e1:	68 ff ff ff 00       	push   0xffffff
c000f1e6:	53                   	push   ebx
c000f1e7:	e8 28 ff ff ff       	call   c000f114 <GDTEntry::setLimit(unsigned int)>
c000f1ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1f0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1f5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1fe:	83 c4 20             	add    esp,0x20
c000f201:	6a 00                	push   0x0
c000f203:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f207:	53                   	push   ebx
c000f208:	e8 eb fe ff ff       	call   c000f0f8 <GDTEntry::setBase(unsigned int)>
c000f20d:	68 ff ff ff 00       	push   0xffffff
c000f212:	53                   	push   ebx
c000f213:	e8 fc fe ff ff       	call   c000f114 <GDTEntry::setLimit(unsigned int)>
c000f218:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f21c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f220:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f224:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f228:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f22c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f231:	0d 00 92 c0 00       	or     eax,0xc09200
c000f236:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f23a:	89 d8                	mov    eax,ebx
c000f23c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f240:	80 cc 60             	or     ah,0x60
c000f243:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f247:	83 c4 0c             	add    esp,0xc
c000f24a:	89 f8                	mov    eax,edi
c000f24c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f250:	80 cc 60             	or     ah,0x60
c000f253:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f257:	89 c7                	mov    edi,eax
c000f259:	55                   	push   ebp
c000f25a:	e8 e9 fe ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c000f25f:	83 c4 0c             	add    esp,0xc
c000f262:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f266:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f26a:	55                   	push   ebp
c000f26b:	e8 d8 fe ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c000f270:	83 c4 0c             	add    esp,0xc
c000f273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f277:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f27b:	55                   	push   ebp
c000f27c:	e8 c7 fe ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c000f281:	83 c4 0c             	add    esp,0xc
c000f284:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f28c:	53                   	push   ebx
c000f28d:	51                   	push   ecx
c000f28e:	55                   	push   ebp
c000f28f:	e8 b4 fe ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c000f294:	83 c4 0c             	add    esp,0xc
c000f297:	57                   	push   edi
c000f298:	56                   	push   esi
c000f299:	55                   	push   ebp
c000f29a:	e8 a9 fe ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c000f29f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f2a2:	e8 e5 fe ff ff       	call   c000f18c <GDT::flush()>
c000f2a7:	83 c4 4c             	add    esp,0x4c
c000f2aa:	5b                   	pop    ebx
c000f2ab:	5e                   	pop    esi
c000f2ac:	5f                   	pop    edi
c000f2ad:	5d                   	pop    ebp
c000f2ae:	c3                   	ret    

c000f2af <idleFunction(void*)>:
c000f2af:	53                   	push   ebx
c000f2b0:	83 ec 08             	sub    esp,0x8
c000f2b3:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f2b8:	48                   	dec    eax
c000f2b9:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f2be:	75 01                	jne    c000f2c1 <idleFunction(void*)+0x12>
c000f2c0:	fb                   	sti    
c000f2c1:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000f2c6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2cc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2d3:	74 3c                	je     c000f311 <idleFunction(void*)+0x62>
c000f2d5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2dc:	74 33                	je     c000f311 <idleFunction(void*)+0x62>
c000f2de:	31 db                	xor    ebx,ebx
c000f2e0:	52                   	push   edx
c000f2e1:	52                   	push   edx
c000f2e2:	68 e1 00 00 00       	push   0xe1
c000f2e7:	50                   	push   eax
c000f2e8:	e8 d5 fb ff ff       	call   c000eec2 <Computer::rdmsr(unsigned int)>
c000f2ed:	53                   	push   ebx
c000f2ee:	83 e0 02             	and    eax,0x2
c000f2f1:	50                   	push   eax
c000f2f2:	68 e1 00 00 00       	push   0xe1
c000f2f7:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c000f2fd:	e8 ec fb ff ff       	call   c000eeee <Computer::wrmsr(unsigned int, unsigned long long)>
c000f302:	83 c4 20             	add    esp,0x20
c000f305:	e8 75 0f ff ff       	call   c000027f <doTPAUSE>
c000f30a:	e8 a1 9b 01 00       	call   c0028eb0 <idleCommon()>
c000f30f:	eb f4                	jmp    c000f305 <idleFunction(void*)+0x56>
c000f311:	fb                   	sti    
c000f312:	f4                   	hlt    
c000f313:	e8 98 9b 01 00       	call   c0028eb0 <idleCommon()>
c000f318:	eb f7                	jmp    c000f311 <idleFunction(void*)+0x62>

c000f31a <IDTEntry::IDTEntry(bool)>:
c000f31a:	83 ec 04             	sub    esp,0x4
c000f31d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f321:	88 04 24             	mov    BYTE PTR [esp],al
c000f324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f328:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f32e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f332:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f33d:	83 e2 f0             	and    edx,0xfffffff0
c000f340:	83 ca 0e             	or     edx,0xe
c000f343:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f34a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f34d:	83 e2 ef             	and    edx,0xffffffef
c000f350:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f353:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f357:	74 04                	je     c000f35d <IDTEntry::IDTEntry(bool)+0x43>
c000f359:	b2 03                	mov    dl,0x3
c000f35b:	eb 02                	jmp    c000f35f <IDTEntry::IDTEntry(bool)+0x45>
c000f35d:	b2 00                	mov    dl,0x0
c000f35f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f363:	83 e2 03             	and    edx,0x3
c000f366:	88 d1                	mov    cl,dl
c000f368:	c1 e1 05             	shl    ecx,0x5
c000f36b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f36e:	83 e2 9f             	and    edx,0xffffff9f
c000f371:	09 ca                	or     edx,ecx
c000f373:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f376:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f37a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f37d:	83 ca 80             	or     edx,0xffffff80
c000f380:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f383:	90                   	nop
c000f384:	83 c4 04             	add    esp,0x4
c000f387:	c3                   	ret    

c000f388 <IDTEntry::setOffset(unsigned int)>:
c000f388:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f38c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f390:	66 89 02             	mov    WORD PTR [edx],ax
c000f393:	c1 e8 10             	shr    eax,0x10
c000f396:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f39a:	c3                   	ret    
c000f39b:	90                   	nop

c000f39c <IDT::IDT()>:
c000f39c:	90                   	nop
c000f39d:	c3                   	ret    

c000f39e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f39e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3a2:	83 c0 30             	add    eax,0x30
c000f3a5:	c3                   	ret    

c000f3a6 <IDT::addEntry(IDTEntry, int)>:
c000f3a6:	53                   	push   ebx
c000f3a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3b7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3ba:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3be:	5b                   	pop    ebx
c000f3bf:	c3                   	ret    

c000f3c0 <IDT::addEntry(int, void (*)(), bool)>:
c000f3c0:	53                   	push   ebx
c000f3c1:	83 ec 10             	sub    esp,0x10
c000f3c4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c9:	50                   	push   eax
c000f3ca:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3ce:	53                   	push   ebx
c000f3cf:	e8 46 ff ff ff       	call   c000f31a <IDTEntry::IDTEntry(bool)>
c000f3d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3d8:	53                   	push   ebx
c000f3d9:	e8 aa ff ff ff       	call   c000f388 <IDTEntry::setOffset(unsigned int)>
c000f3de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3ee:	e8 b3 ff ff ff       	call   c000f3a6 <IDT::addEntry(IDTEntry, int)>
c000f3f3:	83 c4 30             	add    esp,0x30
c000f3f6:	5b                   	pop    ebx
c000f3f7:	c3                   	ret    

c000f3f8 <IDT::flush()>:
c000f3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3fc:	66 c7 05 38 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee38,0x7ff
c000f405:	a3 3a ee 02 c0       	mov    ds:0xc002ee3a,eax
c000f40a:	0f 01 1d 38 ee 02 c0 	lidtd  ds:0xc002ee38
c000f411:	c3                   	ret    

c000f412 <IDT::setup()>:
c000f412:	57                   	push   edi
c000f413:	56                   	push   esi
c000f414:	53                   	push   ebx
c000f415:	83 ec 10             	sub    esp,0x10
c000f418:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f41c:	6a 00                	push   0x0
c000f41e:	68 70 04 00 c0       	push   0xc0000470
c000f423:	6a 00                	push   0x0
c000f425:	53                   	push   ebx
c000f426:	e8 95 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	6a 00                	push   0x0
c000f42d:	68 80 04 00 c0       	push   0xc0000480
c000f432:	6a 01                	push   0x1
c000f434:	53                   	push   ebx
c000f435:	e8 86 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f43a:	83 c4 20             	add    esp,0x20
c000f43d:	6a 00                	push   0x0
c000f43f:	68 8a 04 00 c0       	push   0xc000048a
c000f444:	6a 02                	push   0x2
c000f446:	53                   	push   ebx
c000f447:	e8 74 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	6a 00                	push   0x0
c000f44e:	68 94 04 00 c0       	push   0xc0000494
c000f453:	6a 03                	push   0x3
c000f455:	53                   	push   ebx
c000f456:	e8 65 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f45b:	83 c4 20             	add    esp,0x20
c000f45e:	6a 00                	push   0x0
c000f460:	68 9e 04 00 c0       	push   0xc000049e
c000f465:	6a 04                	push   0x4
c000f467:	53                   	push   ebx
c000f468:	e8 53 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	6a 00                	push   0x0
c000f46f:	68 a8 04 00 c0       	push   0xc00004a8
c000f474:	6a 05                	push   0x5
c000f476:	53                   	push   ebx
c000f477:	e8 44 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f47c:	83 c4 20             	add    esp,0x20
c000f47f:	6a 00                	push   0x0
c000f481:	68 b2 04 00 c0       	push   0xc00004b2
c000f486:	6a 06                	push   0x6
c000f488:	53                   	push   ebx
c000f489:	e8 32 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	6a 00                	push   0x0
c000f490:	68 bc 04 00 c0       	push   0xc00004bc
c000f495:	6a 07                	push   0x7
c000f497:	53                   	push   ebx
c000f498:	e8 23 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f49d:	83 c4 20             	add    esp,0x20
c000f4a0:	6a 00                	push   0x0
c000f4a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f4a7:	6a 08                	push   0x8
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 11 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	6a 00                	push   0x0
c000f4b1:	68 ce 04 00 c0       	push   0xc00004ce
c000f4b6:	6a 09                	push   0x9
c000f4b8:	53                   	push   ebx
c000f4b9:	e8 02 ff ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4be:	83 c4 20             	add    esp,0x20
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 d8 04 00 c0       	push   0xc00004d8
c000f4c8:	6a 0a                	push   0xa
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 f0 fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	6a 00                	push   0x0
c000f4d2:	68 e0 04 00 c0       	push   0xc00004e0
c000f4d7:	6a 0b                	push   0xb
c000f4d9:	53                   	push   ebx
c000f4da:	e8 e1 fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4df:	83 c4 20             	add    esp,0x20
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 e8 04 00 c0       	push   0xc00004e8
c000f4e9:	6a 0c                	push   0xc
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 cf fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	6a 00                	push   0x0
c000f4f3:	68 f0 04 00 c0       	push   0xc00004f0
c000f4f8:	6a 0d                	push   0xd
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 c0 fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f500:	83 c4 20             	add    esp,0x20
c000f503:	6a 00                	push   0x0
c000f505:	68 f8 04 00 c0       	push   0xc00004f8
c000f50a:	6a 0e                	push   0xe
c000f50c:	53                   	push   ebx
c000f50d:	e8 ae fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f512:	6a 00                	push   0x0
c000f514:	68 00 05 00 c0       	push   0xc0000500
c000f519:	6a 0f                	push   0xf
c000f51b:	53                   	push   ebx
c000f51c:	e8 9f fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f521:	83 c4 20             	add    esp,0x20
c000f524:	6a 00                	push   0x0
c000f526:	68 0a 05 00 c0       	push   0xc000050a
c000f52b:	6a 10                	push   0x10
c000f52d:	53                   	push   ebx
c000f52e:	e8 8d fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f533:	6a 00                	push   0x0
c000f535:	68 14 05 00 c0       	push   0xc0000514
c000f53a:	6a 11                	push   0x11
c000f53c:	53                   	push   ebx
c000f53d:	e8 7e fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f542:	83 c4 20             	add    esp,0x20
c000f545:	6a 00                	push   0x0
c000f547:	68 1e 05 00 c0       	push   0xc000051e
c000f54c:	6a 12                	push   0x12
c000f54e:	53                   	push   ebx
c000f54f:	e8 6c fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f554:	6a 01                	push   0x1
c000f556:	68 b8 05 00 c0       	push   0xc00005b8
c000f55b:	6a 60                	push   0x60
c000f55d:	53                   	push   ebx
c000f55e:	e8 5d fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f563:	83 c4 20             	add    esp,0x20
c000f566:	6a 00                	push   0x0
c000f568:	68 bf 05 00 c0       	push   0xc00005bf
c000f56d:	6a 20                	push   0x20
c000f56f:	53                   	push   ebx
c000f570:	e8 4b fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f575:	6a 00                	push   0x0
c000f577:	68 aa 05 00 c0       	push   0xc00005aa
c000f57c:	6a 21                	push   0x21
c000f57e:	53                   	push   ebx
c000f57f:	e8 3c fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f584:	83 c4 20             	add    esp,0x20
c000f587:	6a 00                	push   0x0
c000f589:	68 b1 05 00 c0       	push   0xc00005b1
c000f58e:	6a 22                	push   0x22
c000f590:	53                   	push   ebx
c000f591:	e8 2a fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f596:	6a 00                	push   0x0
c000f598:	68 28 05 00 c0       	push   0xc0000528
c000f59d:	6a 23                	push   0x23
c000f59f:	53                   	push   ebx
c000f5a0:	e8 1b fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5a5:	83 c4 20             	add    esp,0x20
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 32 05 00 c0       	push   0xc0000532
c000f5af:	6a 24                	push   0x24
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 09 fe ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	6a 00                	push   0x0
c000f5b9:	68 3c 05 00 c0       	push   0xc000053c
c000f5be:	6a 25                	push   0x25
c000f5c0:	53                   	push   ebx
c000f5c1:	e8 fa fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5c6:	83 c4 20             	add    esp,0x20
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 46 05 00 c0       	push   0xc0000546
c000f5d0:	6a 26                	push   0x26
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 e8 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	6a 00                	push   0x0
c000f5da:	68 50 05 00 c0       	push   0xc0000550
c000f5df:	6a 27                	push   0x27
c000f5e1:	53                   	push   ebx
c000f5e2:	e8 d9 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5e7:	83 c4 20             	add    esp,0x20
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 5a 05 00 c0       	push   0xc000055a
c000f5f1:	6a 28                	push   0x28
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 c7 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	6a 00                	push   0x0
c000f5fb:	68 64 05 00 c0       	push   0xc0000564
c000f600:	6a 29                	push   0x29
c000f602:	53                   	push   ebx
c000f603:	e8 b8 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f608:	83 c4 20             	add    esp,0x20
c000f60b:	6a 00                	push   0x0
c000f60d:	68 6e 05 00 c0       	push   0xc000056e
c000f612:	6a 2a                	push   0x2a
c000f614:	53                   	push   ebx
c000f615:	e8 a6 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	6a 00                	push   0x0
c000f61c:	68 78 05 00 c0       	push   0xc0000578
c000f621:	6a 2b                	push   0x2b
c000f623:	53                   	push   ebx
c000f624:	e8 97 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f629:	83 c4 20             	add    esp,0x20
c000f62c:	6a 00                	push   0x0
c000f62e:	68 82 05 00 c0       	push   0xc0000582
c000f633:	6a 2c                	push   0x2c
c000f635:	53                   	push   ebx
c000f636:	e8 85 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	6a 00                	push   0x0
c000f63d:	68 8c 05 00 c0       	push   0xc000058c
c000f642:	6a 2d                	push   0x2d
c000f644:	53                   	push   ebx
c000f645:	e8 76 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f64a:	83 c4 20             	add    esp,0x20
c000f64d:	6a 00                	push   0x0
c000f64f:	68 96 05 00 c0       	push   0xc0000596
c000f654:	6a 2e                	push   0x2e
c000f656:	53                   	push   ebx
c000f657:	e8 64 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f65c:	6a 00                	push   0x0
c000f65e:	68 a0 05 00 c0       	push   0xc00005a0
c000f663:	6a 2f                	push   0x2f
c000f665:	53                   	push   ebx
c000f666:	e8 55 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f66b:	83 c4 20             	add    esp,0x20
c000f66e:	6a 00                	push   0x0
c000f670:	68 f5 05 00 c0       	push   0xc00005f5
c000f675:	6a 30                	push   0x30
c000f677:	53                   	push   ebx
c000f678:	e8 43 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f67d:	6a 00                	push   0x0
c000f67f:	68 ff 05 00 c0       	push   0xc00005ff
c000f684:	6a 31                	push   0x31
c000f686:	53                   	push   ebx
c000f687:	e8 34 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f68c:	83 c4 20             	add    esp,0x20
c000f68f:	6a 00                	push   0x0
c000f691:	68 09 06 00 c0       	push   0xc0000609
c000f696:	6a 32                	push   0x32
c000f698:	53                   	push   ebx
c000f699:	e8 22 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f69e:	6a 00                	push   0x0
c000f6a0:	68 13 06 00 c0       	push   0xc0000613
c000f6a5:	6a 33                	push   0x33
c000f6a7:	53                   	push   ebx
c000f6a8:	e8 13 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f6ad:	83 c4 20             	add    esp,0x20
c000f6b0:	6a 00                	push   0x0
c000f6b2:	68 1d 06 00 c0       	push   0xc000061d
c000f6b7:	6a 34                	push   0x34
c000f6b9:	53                   	push   ebx
c000f6ba:	e8 01 fd ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f6bf:	6a 00                	push   0x0
c000f6c1:	68 27 06 00 c0       	push   0xc0000627
c000f6c6:	6a 35                	push   0x35
c000f6c8:	53                   	push   ebx
c000f6c9:	e8 f2 fc ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f6ce:	83 c4 20             	add    esp,0x20
c000f6d1:	6a 00                	push   0x0
c000f6d3:	68 31 06 00 c0       	push   0xc0000631
c000f6d8:	6a 36                	push   0x36
c000f6da:	53                   	push   ebx
c000f6db:	e8 e0 fc ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f6e0:	6a 00                	push   0x0
c000f6e2:	68 3b 06 00 c0       	push   0xc000063b
c000f6e7:	6a 37                	push   0x37
c000f6e9:	53                   	push   ebx
c000f6ea:	e8 d1 fc ff ff       	call   c000f3c0 <IDT::addEntry(int, void (*)(), bool)>
c000f6ef:	83 c4 1c             	add    esp,0x1c
c000f6f2:	6a 03                	push   0x3
c000f6f4:	6a 02                	push   0x2
c000f6f6:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f6fc:	e8 05 2d 00 00       	call   c0012406 <VAS::allocatePages(int, int)>
c000f701:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f708:	89 c6                	mov    esi,eax
c000f70a:	e8 0d 02 00 00       	call   c000f91c <malloc>
c000f70f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f715:	89 04 24             	mov    DWORD PTR [esp],eax
c000f718:	89 c7                	mov    edi,eax
c000f71a:	e8 df 1c 00 00       	call   c00113fe <TSS::TSS()>
c000f71f:	83 c4 0c             	add    esp,0xc
c000f722:	68 c6 04 00 c0       	push   0xc00004c6
c000f727:	56                   	push   esi
c000f728:	57                   	push   edi
c000f729:	e8 10 1d 00 00       	call   c001143e <TSS::setup(unsigned long, unsigned long)>
c000f72e:	89 c6                	mov    esi,eax
c000f730:	58                   	pop    eax
c000f731:	5a                   	pop    edx
c000f732:	6a 00                	push   0x0
c000f734:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f738:	50                   	push   eax
c000f739:	e8 dc fb ff ff       	call   c000f31a <IDTEntry::IDTEntry(bool)>
c000f73e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f742:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f747:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f74e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f758:	80 ce 05             	or     dh,0x5
c000f75b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f75e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f762:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f766:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f769:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f76c:	e8 87 fc ff ff       	call   c000f3f8 <IDT::flush()>
c000f771:	83 c4 20             	add    esp,0x20
c000f774:	5b                   	pop    ebx
c000f775:	5e                   	pop    esi
c000f776:	5f                   	pop    edi
c000f777:	c3                   	ret    

c000f778 <sbrk>:
c000f778:	55                   	push   ebp
c000f779:	57                   	push   edi
c000f77a:	56                   	push   esi
c000f77b:	53                   	push   ebx
c000f77c:	83 ec 1c             	sub    esp,0x1c
c000f77f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f783:	85 c0                	test   eax,eax
c000f785:	74 3e                	je     c000f7c5 <sbrk+0x4d>
c000f787:	78 43                	js     c000f7cc <sbrk+0x54>
c000f789:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c000f78f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f795:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f79b:	83 e2 01             	and    edx,0x1
c000f79e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f7a2:	8b 0d 54 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd54
c000f7a8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f7ac:	05 ff 0f 00 00       	add    eax,0xfff
c000f7b1:	89 c2                	mov    edx,eax
c000f7b3:	78 2f                	js     c000f7e4 <sbrk+0x6c>
c000f7b5:	c1 fa 0c             	sar    edx,0xc
c000f7b8:	89 d7                	mov    edi,edx
c000f7ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7be:	be 00 00 00 00       	mov    esi,0x0
c000f7c3:	eb 36                	jmp    c000f7fb <sbrk+0x83>
c000f7c5:	a1 54 dd 02 c0       	mov    eax,ds:0xc002dd54
c000f7ca:	eb 73                	jmp    c000f83f <sbrk+0xc7>
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	50                   	push   eax
c000f7d0:	68 c8 aa 02 c0       	push   0xc002aac8
c000f7d5:	e8 f9 36 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000f7da:	83 c4 10             	add    esp,0x10
c000f7dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7e2:	eb 5b                	jmp    c000f83f <sbrk+0xc7>
c000f7e4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7ea:	eb c9                	jmp    c000f7b5 <sbrk+0x3d>
c000f7ec:	81 05 54 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd54,0x1000
c000f7f6:	46                   	inc    esi
c000f7f7:	39 f7                	cmp    edi,esi
c000f7f9:	74 33                	je     c000f82e <sbrk+0xb6>
c000f7fb:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c000f801:	8b 2d 54 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd54
c000f807:	e8 7c 07 00 00       	call   c000ff88 <Phys::allocatePage()>
c000f80c:	68 01 0c 00 00       	push   0xc01
c000f811:	55                   	push   ebp
c000f812:	50                   	push   eax
c000f813:	53                   	push   ebx
c000f814:	e8 eb 2a 00 00       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f821:	74 c9                	je     c000f7ec <sbrk+0x74>
c000f823:	8b 1d 54 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd54
c000f829:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f82c:	eb be                	jmp    c000f7ec <sbrk+0x74>
c000f82e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f833:	75 12                	jne    c000f847 <sbrk+0xcf>
c000f835:	0f 20 d8             	mov    eax,cr3
c000f838:	0f 22 d8             	mov    cr3,eax
c000f83b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	5b                   	pop    ebx
c000f843:	5e                   	pop    esi
c000f844:	5f                   	pop    edi
c000f845:	5d                   	pop    ebp
c000f846:	c3                   	ret    
c000f847:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f84b:	89 cb                	mov    ebx,ecx
c000f84d:	c1 eb 0a             	shr    ebx,0xa
c000f850:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f856:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f85c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f860:	c1 e0 0c             	shl    eax,0xc
c000f863:	01 c8                	add    eax,ecx
c000f865:	c1 e8 0a             	shr    eax,0xa
c000f868:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f86d:	2d 00 00 40 00       	sub    eax,0x400000
c000f872:	39 c3                	cmp    ebx,eax
c000f874:	77 c5                	ja     c000f83b <sbrk+0xc3>
c000f876:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f879:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f87f:	39 d8                	cmp    eax,ebx
c000f881:	73 f3                	jae    c000f876 <sbrk+0xfe>
c000f883:	eb b6                	jmp    c000f83b <sbrk+0xc3>

c000f885 <mmap>:
c000f885:	83 ec 18             	sub    esp,0x18
c000f888:	68 f8 aa 02 c0       	push   0xc002aaf8
c000f88d:	e8 fd af 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000f892:	b8 00 00 00 00       	mov    eax,0x0
c000f897:	83 c4 1c             	add    esp,0x1c
c000f89a:	c3                   	ret    

c000f89b <munmap>:
c000f89b:	83 ec 18             	sub    esp,0x18
c000f89e:	68 fd aa 02 c0       	push   0xc002aafd
c000f8a3:	e8 e7 af 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000f8a8:	b8 00 00 00 00       	mov    eax,0x0
c000f8ad:	83 c4 1c             	add    esp,0x1c
c000f8b0:	c3                   	ret    

c000f8b1 <liballoc_lock()>:
c000f8b1:	fa                   	cli    
c000f8b2:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000f8b8:	b8 00 00 00 00       	mov    eax,0x0
c000f8bd:	c3                   	ret    

c000f8be <liballoc_unlock()>:
c000f8be:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f8c3:	48                   	dec    eax
c000f8c4:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f8c9:	75 01                	jne    c000f8cc <liballoc_unlock()+0xe>
c000f8cb:	fb                   	sti    
c000f8cc:	b8 00 00 00 00       	mov    eax,0x0
c000f8d1:	c3                   	ret    

c000f8d2 <liballoc_alloc(int)>:
c000f8d2:	83 ec 10             	sub    esp,0x10
c000f8d5:	68 01 08 00 00       	push   0x801
c000f8da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8de:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f8e4:	e8 1d 2b 00 00       	call   c0012406 <VAS::allocatePages(int, int)>
c000f8e9:	83 c4 1c             	add    esp,0x1c
c000f8ec:	c3                   	ret    

c000f8ed <liballoc_free(void*, int)>:
c000f8ed:	83 ec 14             	sub    esp,0x14
c000f8f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f4:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f8fa:	e8 b1 27 00 00       	call   c00120b0 <VAS::freeAllocatedPages(unsigned long)>
c000f8ff:	b8 00 00 00 00       	mov    eax,0x0
c000f904:	83 c4 1c             	add    esp,0x1c
c000f907:	c3                   	ret    

c000f908 <realloc>:
c000f908:	83 ec 14             	sub    esp,0x14
c000f90b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f913:	e8 4c 1d ff ff       	call   c0001664 <dlrealloc>
c000f918:	83 c4 1c             	add    esp,0x1c
c000f91b:	c3                   	ret    

c000f91c <malloc>:
c000f91c:	83 ec 18             	sub    esp,0x18
c000f91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f923:	e8 ff 17 ff ff       	call   c0001127 <dlmalloc>
c000f928:	83 c4 1c             	add    esp,0x1c
c000f92b:	c3                   	ret    

c000f92c <free>:
c000f92c:	83 ec 18             	sub    esp,0x18
c000f92f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f933:	e8 94 14 ff ff       	call   c0000dcc <dlfree>
c000f938:	83 c4 1c             	add    esp,0x1c
c000f93b:	c3                   	ret    

c000f93c <rfree>:
c000f93c:	83 ec 18             	sub    esp,0x18
c000f93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f943:	e8 84 14 ff ff       	call   c0000dcc <dlfree>
c000f948:	83 c4 1c             	add    esp,0x1c
c000f94b:	c3                   	ret    

c000f94c <calloc>:
c000f94c:	56                   	push   esi
c000f94d:	53                   	push   ebx
c000f94e:	83 ec 10             	sub    esp,0x10
c000f951:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f955:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f95a:	53                   	push   ebx
c000f95b:	e8 bc ff ff ff       	call   c000f91c <malloc>
c000f960:	89 c6                	mov    esi,eax
c000f962:	83 c4 0c             	add    esp,0xc
c000f965:	53                   	push   ebx
c000f966:	6a 00                	push   0x0
c000f968:	50                   	push   eax
c000f969:	e8 1a 0e ff ff       	call   c0000788 <memset>
c000f96e:	89 f0                	mov    eax,esi
c000f970:	83 c4 14             	add    esp,0x14
c000f973:	5b                   	pop    ebx
c000f974:	5e                   	pop    esi
c000f975:	c3                   	ret    

c000f976 <hwTextMode_loadInData(VgaText*)>:
c000f976:	55                   	push   ebp
c000f977:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c000f97c:	57                   	push   edi
c000f97d:	56                   	push   esi
c000f97e:	53                   	push   ebx
c000f97f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f983:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f986:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f989:	85 d2                	test   edx,edx
c000f98b:	7e 29                	jle    c000f9b6 <hwTextMode_loadInData(VgaText*)+0x40>
c000f98d:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f993:	31 f6                	xor    esi,esi
c000f995:	29 cd                	sub    ebp,ecx
c000f997:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f99a:	31 c0                	xor    eax,eax
c000f99c:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f9a0:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f9a4:	40                   	inc    eax
c000f9a5:	83 f8 50             	cmp    eax,0x50
c000f9a8:	75 f2                	jne    c000f99c <hwTextMode_loadInData(VgaText*)+0x26>
c000f9aa:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f9b0:	46                   	inc    esi
c000f9b1:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f9b4:	7f e1                	jg     c000f997 <hwTextMode_loadInData(VgaText*)+0x21>
c000f9b6:	5b                   	pop    ebx
c000f9b7:	5e                   	pop    esi
c000f9b8:	5f                   	pop    edi
c000f9b9:	5d                   	pop    ebp
c000f9ba:	c3                   	ret    

c000f9bb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9bb:	55                   	push   ebp
c000f9bc:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000f9c3:	57                   	push   edi
c000f9c4:	56                   	push   esi
c000f9c5:	53                   	push   ebx
c000f9c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9ca:	75 44                	jne    c000fa10 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9cc:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9cf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9d2:	8b 15 60 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd60
c000f9d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9dc:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9e2:	eb 08                	jmp    c000f9ec <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9e4:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9e7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9ea:	89 da                	mov    edx,ebx
c000f9ec:	83 e5 0f             	and    ebp,0xf
c000f9ef:	c1 e0 04             	shl    eax,0x4
c000f9f2:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9f5:	0f b6 c0             	movzx  eax,al
c000f9f8:	41                   	inc    ecx
c000f9f9:	09 e8                	or     eax,ebp
c000f9fb:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9ff:	c1 e0 08             	shl    eax,0x8
c000fa02:	09 e8                	or     eax,ebp
c000fa04:	39 fb                	cmp    ebx,edi
c000fa06:	66 89 02             	mov    WORD PTR [edx],ax
c000fa09:	75 d9                	jne    c000f9e4 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	5f                   	pop    edi
c000fa0e:	5d                   	pop    ebp
c000fa0f:	c3                   	ret    
c000fa10:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000fa17:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000fa1e:	31 c0                	xor    eax,eax
c000fa20:	bd 02 00 00 00       	mov    ebp,0x2
c000fa25:	eb ab                	jmp    c000f9d2 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000fa27 <hwTextMode_showCursor(VgaText*, bool)>:
c000fa27:	56                   	push   esi
c000fa28:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fa2f:	53                   	push   ebx
c000fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa34:	75 36                	jne    c000fa6c <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa36:	84 c0                	test   al,al
c000fa38:	74 35                	je     c000fa6f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa3a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa3f:	b0 0a                	mov    al,0xa
c000fa41:	89 da                	mov    edx,ebx
c000fa43:	ee                   	out    dx,al
c000fa44:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ec                   	in     al,dx
c000fa4c:	b2 0f                	mov    dl,0xf
c000fa4e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa52:	83 e0 c0             	and    eax,0xffffffc0
c000fa55:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa58:	09 d0                	or     eax,edx
c000fa5a:	89 ca                	mov    edx,ecx
c000fa5c:	ee                   	out    dx,al
c000fa5d:	b0 0b                	mov    al,0xb
c000fa5f:	89 da                	mov    edx,ebx
c000fa61:	ee                   	out    dx,al
c000fa62:	89 ca                	mov    edx,ecx
c000fa64:	ec                   	in     al,dx
c000fa65:	83 e0 e0             	and    eax,0xffffffe0
c000fa68:	83 c8 0f             	or     eax,0xf
c000fa6b:	ee                   	out    dx,al
c000fa6c:	5b                   	pop    ebx
c000fa6d:	5e                   	pop    esi
c000fa6e:	c3                   	ret    
c000fa6f:	b0 0a                	mov    al,0xa
c000fa71:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa76:	ee                   	out    dx,al
c000fa77:	b0 20                	mov    al,0x20
c000fa79:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa7e:	ee                   	out    dx,al
c000fa7f:	5b                   	pop    ebx
c000fa80:	5e                   	pop    esi
c000fa81:	c3                   	ret    

c000fa82 <hwTextMode_update(VgaText*)>:
c000fa82:	c3                   	ret    

c000fa83 <hwTextMode_updateCursor(VgaText*)>:
c000fa83:	56                   	push   esi
c000fa84:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fa8b:	53                   	push   ebx
c000fa8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa90:	75 36                	jne    c000fac8 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa92:	be d4 03 00 00       	mov    esi,0x3d4
c000fa97:	b9 19 00 00 00       	mov    ecx,0x19
c000fa9c:	89 f2                	mov    edx,esi
c000fa9e:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000faa1:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000faa4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000faa7:	c1 e1 04             	shl    ecx,0x4
c000faaa:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000faad:	b0 0f                	mov    al,0xf
c000faaf:	ee                   	out    dx,al
c000fab0:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fab5:	88 c8                	mov    al,cl
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	ee                   	out    dx,al
c000faba:	b0 0e                	mov    al,0xe
c000fabc:	89 f2                	mov    edx,esi
c000fabe:	ee                   	out    dx,al
c000fabf:	89 c8                	mov    eax,ecx
c000fac1:	89 da                	mov    edx,ebx
c000fac3:	66 c1 e8 08          	shr    ax,0x8
c000fac7:	ee                   	out    dx,al
c000fac8:	5b                   	pop    ebx
c000fac9:	5e                   	pop    esi
c000faca:	c3                   	ret    

c000facb <hwTextMode_disableBlink(VgaText*, bool)>:
c000facb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000facf:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fad6:	75 38                	jne    c000fb10 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fad8:	ba da 03 00 00       	mov    edx,0x3da
c000fadd:	84 c0                	test   al,al
c000fadf:	75 18                	jne    c000faf9 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fae1:	ec                   	in     al,dx
c000fae2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fae7:	b0 30                	mov    al,0x30
c000fae9:	89 ca                	mov    edx,ecx
c000faeb:	ee                   	out    dx,al
c000faec:	ba c1 03 00 00       	mov    edx,0x3c1
c000faf1:	ec                   	in     al,dx
c000faf2:	83 c8 08             	or     eax,0x8
c000faf5:	89 ca                	mov    edx,ecx
c000faf7:	ee                   	out    dx,al
c000faf8:	c3                   	ret    
c000faf9:	ec                   	in     al,dx
c000fafa:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faff:	b0 30                	mov    al,0x30
c000fb01:	89 ca                	mov    edx,ecx
c000fb03:	ee                   	out    dx,al
c000fb04:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb09:	ec                   	in     al,dx
c000fb0a:	83 e0 f7             	and    eax,0xfffffff7
c000fb0d:	89 ca                	mov    edx,ecx
c000fb0f:	ee                   	out    dx,al
c000fb10:	c3                   	ret    

c000fb11 <hwTextMode_scrollScreen(VgaText*)>:
c000fb11:	55                   	push   ebp
c000fb12:	57                   	push   edi
c000fb13:	56                   	push   esi
c000fb14:	53                   	push   ebx
c000fb15:	83 ec 1c             	sub    esp,0x1c
c000fb18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb1c:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fb23:	74 0e                	je     c000fb33 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fb25:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb2c:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb33:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c000fb38:	bd 02 00 00 00       	mov    ebp,0x2
c000fb3d:	05 a0 00 00 00       	add    eax,0xa0
c000fb42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb4a:	31 c0                	xor    eax,eax
c000fb4c:	eb 0b                	jmp    c000fb59 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb4e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb54:	74 51                	je     c000fba7 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb56:	43                   	inc    ebx
c000fb57:	89 f0                	mov    eax,esi
c000fb59:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb5f:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb65:	88 13                	mov    BYTE PTR [ebx],dl
c000fb67:	8d 70 01             	lea    esi,[eax+0x1]
c000fb6a:	83 fd 18             	cmp    ebp,0x18
c000fb6d:	75 df                	jne    c000fb4e <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb6f:	a8 01                	test   al,0x1
c000fb71:	75 13                	jne    c000fb86 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb73:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb76:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb7c:	75 d8                	jne    c000fb56 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb7e:	83 c4 1c             	add    esp,0x1c
c000fb81:	5b                   	pop    ebx
c000fb82:	5e                   	pop    esi
c000fb83:	5f                   	pop    edi
c000fb84:	5d                   	pop    ebp
c000fb85:	c3                   	ret    
c000fb86:	83 ec 08             	sub    esp,0x8
c000fb89:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb8d:	50                   	push   eax
c000fb8e:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb92:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb96:	50                   	push   eax
c000fb97:	e8 18 0c 00 00       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	88 07                	mov    BYTE PTR [edi],al
c000fba1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fba5:	eb cf                	jmp    c000fb76 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fba7:	45                   	inc    ebp
c000fba8:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fbb0:	eb 94                	jmp    c000fb46 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fbb2 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbb2:	57                   	push   edi
c000fbb3:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fbba:	56                   	push   esi
c000fbbb:	53                   	push   ebx
c000fbbc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbc0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbc4:	75 62                	jne    c000fc28 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fbc6:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbcb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbd0:	83 ec 08             	sub    esp,0x8
c000fbd3:	52                   	push   edx
c000fbd4:	50                   	push   eax
c000fbd5:	e8 da 0b 00 00       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbda:	5a                   	pop    edx
c000fbdb:	0f b6 c0             	movzx  eax,al
c000fbde:	59                   	pop    ecx
c000fbdf:	50                   	push   eax
c000fbe0:	0f be c3             	movsx  eax,bl
c000fbe3:	50                   	push   eax
c000fbe4:	e8 71 0c 00 00       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	8b 35 60 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd60
c000fbf2:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fbf9:	74 07                	je     c000fc02 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbfb:	66 0f be c3          	movsx  ax,bl
c000fbff:	80 cc 02             	or     ah,0x2
c000fc02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc06:	ba 19 00 00 00       	mov    edx,0x19
c000fc0b:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fc0e:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc11:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc14:	c1 e1 04             	shl    ecx,0x4
c000fc17:	c1 e2 04             	shl    edx,0x4
c000fc1a:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc1e:	01 ca                	add    edx,ecx
c000fc20:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc24:	5b                   	pop    ebx
c000fc25:	5e                   	pop    esi
c000fc26:	5f                   	pop    edi
c000fc27:	c3                   	ret    
c000fc28:	b8 02 00 00 00       	mov    eax,0x2
c000fc2d:	31 d2                	xor    edx,edx
c000fc2f:	eb 9f                	jmp    c000fbd0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc31 <setupTextMode()>:
c000fc31:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc36:	83 e0 30             	and    eax,0x30
c000fc39:	66 83 f8 30          	cmp    ax,0x30
c000fc3d:	75 11                	jne    c000fc50 <setupTextMode()+0x1f>
c000fc3f:	81 2d 60 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dd60,0x8000
c000fc49:	c6 05 c0 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eec0,0x1
c000fc50:	c7 05 f8 ee 02 c0 cb fa 00 c0 	mov    DWORD PTR ds:0xc002eef8,0xc000facb
c000fc5a:	c7 05 e4 ee 02 c0 76 f9 00 c0 	mov    DWORD PTR ds:0xc002eee4,0xc000f976
c000fc64:	c7 05 e0 ee 02 c0 bb f9 00 c0 	mov    DWORD PTR ds:0xc002eee0,0xc000f9bb
c000fc6e:	c7 05 ec ee 02 c0 11 fb 00 c0 	mov    DWORD PTR ds:0xc002eeec,0xc000fb11
c000fc78:	c7 05 f4 ee 02 c0 27 fa 00 c0 	mov    DWORD PTR ds:0xc002eef4,0xc000fa27
c000fc82:	c7 05 e8 ee 02 c0 82 fa 00 c0 	mov    DWORD PTR ds:0xc002eee8,0xc000fa82
c000fc8c:	c7 05 f0 ee 02 c0 83 fa 00 c0 	mov    DWORD PTR ds:0xc002eef0,0xc000fa83
c000fc96:	c7 05 fc ee 02 c0 b2 fb 00 c0 	mov    DWORD PTR ds:0xc002eefc,0xc000fbb2
c000fca0:	c3                   	ret    

c000fca1 <kernel_main>:
c000fca1:	57                   	push   edi
c000fca2:	bf f9 03 00 00       	mov    edi,0x3f9
c000fca7:	56                   	push   esi
c000fca8:	89 fa                	mov    edx,edi
c000fcaa:	53                   	push   ebx
c000fcab:	31 f6                	xor    esi,esi
c000fcad:	83 ec 2c             	sub    esp,0x2c
c000fcb0:	89 f0                	mov    eax,esi
c000fcb2:	ee                   	out    dx,al
c000fcb3:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcb8:	b0 80                	mov    al,0x80
c000fcba:	89 da                	mov    edx,ebx
c000fcbc:	ee                   	out    dx,al
c000fcbd:	b1 03                	mov    cl,0x3
c000fcbf:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcc4:	88 c8                	mov    al,cl
c000fcc6:	ee                   	out    dx,al
c000fcc7:	89 f0                	mov    eax,esi
c000fcc9:	89 fa                	mov    edx,edi
c000fccb:	ee                   	out    dx,al
c000fccc:	88 c8                	mov    al,cl
c000fcce:	89 da                	mov    edx,ebx
c000fcd0:	ee                   	out    dx,al
c000fcd1:	b0 c7                	mov    al,0xc7
c000fcd3:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcd8:	ee                   	out    dx,al
c000fcd9:	b0 0b                	mov    al,0xb
c000fcdb:	ba fc 03 00 00       	mov    edx,0x3fc
c000fce0:	ee                   	out    dx,al
c000fce1:	68 04 ab 02 c0       	push   0xc002ab04
c000fce6:	e8 e8 31 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000fceb:	e8 56 09 00 00       	call   c0010646 <installVgaTextImplementation()>
c000fcf0:	e8 3c ff ff ff       	call   c000fc31 <setupTextMode()>
c000fcf5:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcfa:	05 ff 0f 00 00       	add    eax,0xfff
c000fcff:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd04:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd07:	e8 f5 03 00 00       	call   c0010101 <Phys::physicalMemorySetup(unsigned int)>
c000fd0c:	e8 7b 1f 00 00       	call   c0011c8c <Virt::virtualMemorySetup()>
c000fd11:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd20:	75 0e                	jne    c000fd30 <kernel_main+0x8f>
c000fd22:	89 d8                	mov    eax,ebx
c000fd24:	25 48 03 00 00       	and    eax,0x348
c000fd29:	3d 00 03 00 00       	cmp    eax,0x300
c000fd2e:	74 10                	je     c000fd40 <kernel_main+0x9f>
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	68 95 c4 02 c0       	push   0xc002c495
c000fd38:	e8 52 ab 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	83 ec 0c             	sub    esp,0xc
c000fd43:	89 1d 40 ee 02 c0    	mov    DWORD PTR ds:0xc002ee40,ebx
c000fd49:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd4d:	53                   	push   ebx
c000fd4e:	e8 85 21 00 00       	call   c0011ed8 <VAS::VAS()>
c000fd53:	89 1d b0 ef 02 c0    	mov    DWORD PTR ds:0xc002efb0,ebx
c000fd59:	e8 c2 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd5e:	c7 04 24 1b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab1b
c000fd65:	e8 69 31 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000fd6a:	e8 9c 1f 00 00       	call   c0011d0b <Virt::swappingSetup()>
c000fd6f:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd76:	e8 a1 fb ff ff       	call   c000f91c <malloc>
c000fd7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd7e:	89 c6                	mov    esi,eax
c000fd80:	e8 8f ea ff ff       	call   c000e814 <Computer::Computer()>
c000fd85:	58                   	pop    eax
c000fd86:	89 35 28 ee 02 c0    	mov    DWORD PTR ds:0xc002ee28,esi
c000fd8c:	5a                   	pop    edx
c000fd8d:	56                   	push   esi
c000fd8e:	68 38 ab 02 c0       	push   0xc002ab38
c000fd93:	e8 3b 31 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000fd98:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000fd9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd9f:	6a 00                	push   0x0
c000fda1:	6a 00                	push   0x0
c000fda3:	6a 00                	push   0x0
c000fda5:	50                   	push   eax
c000fda6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fda9:	83 c4 14             	add    esp,0x14
c000fdac:	53                   	push   ebx
c000fdad:	e8 d6 23 00 00       	call   c0012188 <VAS::~VAS()>
c000fdb2:	c7 04 24 4b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab4b
c000fdb9:	e8 d1 aa 00 00       	call   c001a88f <Krnl::panic(char const*)>
c000fdbe:	83 c4 30             	add    esp,0x30
c000fdc1:	5b                   	pop    ebx
c000fdc2:	5e                   	pop    esi
c000fdc3:	5f                   	pop    edi
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::allocateDMA(unsigned long)>:
c000fdc5:	55                   	push   ebp
c000fdc6:	31 d2                	xor    edx,edx
c000fdc8:	57                   	push   edi
c000fdc9:	31 ed                	xor    ebp,ebp
c000fdcb:	56                   	push   esi
c000fdcc:	31 c9                	xor    ecx,ecx
c000fdce:	53                   	push   ebx
c000fdcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdd3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdd9:	31 c0                	xor    eax,eax
c000fddb:	c1 ee 0c             	shr    esi,0xc
c000fdde:	eb 17                	jmp    c000fdf7 <Phys::allocateDMA(unsigned long)+0x32>
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	75 04                	jne    c000fde8 <Phys::allocateDMA(unsigned long)+0x23>
c000fde4:	89 d5                	mov    ebp,edx
c000fde6:	89 d0                	mov    eax,edx
c000fde8:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fdeb:	39 de                	cmp    esi,ebx
c000fded:	74 20                	je     c000fe0f <Phys::allocateDMA(unsigned long)+0x4a>
c000fdef:	42                   	inc    edx
c000fdf0:	89 d9                	mov    ecx,ebx
c000fdf2:	83 fa 2f             	cmp    edx,0x2f
c000fdf5:	7f 11                	jg     c000fe08 <Phys::allocateDMA(unsigned long)+0x43>
c000fdf7:	80 ba 80 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1180],0x0
c000fdfe:	74 e0                	je     c000fde0 <Phys::allocateDMA(unsigned long)+0x1b>
c000fe00:	31 c9                	xor    ecx,ecx
c000fe02:	42                   	inc    edx
c000fe03:	83 fa 2f             	cmp    edx,0x2f
c000fe06:	7e ef                	jle    c000fdf7 <Phys::allocateDMA(unsigned long)+0x32>
c000fe08:	5b                   	pop    ebx
c000fe09:	31 c0                	xor    eax,eax
c000fe0b:	5e                   	pop    esi
c000fe0c:	5f                   	pop    edi
c000fe0d:	5d                   	pop    ebp
c000fe0e:	c3                   	ret    
c000fe0f:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe12:	89 d7                	mov    edi,edx
c000fe14:	4f                   	dec    edi
c000fe15:	79 03                	jns    c000fe1a <Phys::allocateDMA(unsigned long)+0x55>
c000fe17:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe1a:	c1 ff 04             	sar    edi,0x4
c000fe1d:	89 c2                	mov    edx,eax
c000fe1f:	c1 fa 04             	sar    edx,0x4
c000fe22:	39 fa                	cmp    edx,edi
c000fe24:	75 2f                	jne    c000fe55 <Phys::allocateDMA(unsigned long)+0x90>
c000fe26:	85 db                	test   ebx,ebx
c000fe28:	74 1a                	je     c000fe44 <Phys::allocateDMA(unsigned long)+0x7f>
c000fe2a:	be 80 ee 02 c0       	mov    esi,0xc002ee80
c000fe2f:	8d 90 80 ee 02 c0    	lea    edx,[eax-0x3ffd1180]
c000fe35:	f7 d6                	not    esi
c000fe37:	29 c6                	sub    esi,eax
c000fe39:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe3c:	42                   	inc    edx
c000fe3d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe40:	39 d9                	cmp    ecx,ebx
c000fe42:	7f f5                	jg     c000fe39 <Phys::allocateDMA(unsigned long)+0x74>
c000fe44:	85 ff                	test   edi,edi
c000fe46:	74 13                	je     c000fe5b <Phys::allocateDMA(unsigned long)+0x96>
c000fe48:	5b                   	pop    ebx
c000fe49:	05 50 20 0c 00       	add    eax,0xc2050
c000fe4e:	5e                   	pop    esi
c000fe4f:	c1 e0 0c             	shl    eax,0xc
c000fe52:	5f                   	pop    edi
c000fe53:	5d                   	pop    ebp
c000fe54:	c3                   	ret    
c000fe55:	89 ea                	mov    edx,ebp
c000fe57:	31 c9                	xor    ecx,ecx
c000fe59:	eb a7                	jmp    c000fe02 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe5b:	5b                   	pop    ebx
c000fe5c:	c1 e0 0c             	shl    eax,0xc
c000fe5f:	5e                   	pop    esi
c000fe60:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe65:	5f                   	pop    edi
c000fe66:	5d                   	pop    ebp
c000fe67:	c3                   	ret    

c000fe68 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe70:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe76:	c1 e9 0c             	shr    ecx,0xc
c000fe79:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe7e:	76 25                	jbe    c000fea5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe80:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe85:	c1 e8 0c             	shr    eax,0xc
c000fe88:	8d 50 10             	lea    edx,[eax+0x10]
c000fe8b:	85 c9                	test   ecx,ecx
c000fe8d:	74 15                	je     c000fea4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe8f:	8d 82 80 ee 02 c0    	lea    eax,[edx-0x3ffd1180]
c000fe95:	8d 94 11 80 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1180]
c000fe9c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe9f:	40                   	inc    eax
c000fea0:	39 d0                	cmp    eax,edx
c000fea2:	75 f8                	jne    c000fe9c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fea4:	c3                   	ret    
c000fea5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000feab:	c1 ea 0c             	shr    edx,0xc
c000feae:	eb db                	jmp    c000fe8b <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000feb0 <Phys::setPageState(unsigned long, bool)>:
c000feb0:	56                   	push   esi
c000feb1:	ba 01 00 00 00       	mov    edx,0x1
c000feb6:	53                   	push   ebx
c000feb7:	8b 35 58 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd58
c000febd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fec1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fec5:	89 c8                	mov    eax,ecx
c000fec7:	83 e1 07             	and    ecx,0x7
c000feca:	c1 e8 03             	shr    eax,0x3
c000fecd:	d3 e3                	shl    ebx,cl
c000fecf:	01 c6                	add    esi,eax
c000fed1:	d3 e2                	shl    edx,cl
c000fed3:	f7 d2                	not    edx
c000fed5:	20 16                	and    BYTE PTR [esi],dl
c000fed7:	03 05 58 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd58
c000fedd:	08 18                	or     BYTE PTR [eax],bl
c000fedf:	5b                   	pop    ebx
c000fee0:	5e                   	pop    esi
c000fee1:	c3                   	ret    

c000fee2 <Phys::getPageState(unsigned long)>:
c000fee2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fee6:	8b 15 58 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd58
c000feec:	89 c8                	mov    eax,ecx
c000feee:	83 e1 07             	and    ecx,0x7
c000fef1:	c1 e8 03             	shr    eax,0x3
c000fef4:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fef8:	d3 f8                	sar    eax,cl
c000fefa:	83 e0 01             	and    eax,0x1
c000fefd:	c3                   	ret    

c000fefe <Phys::freePage(unsigned long)>:
c000fefe:	53                   	push   ebx
c000feff:	83 ec 08             	sub    esp,0x8
c000ff02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff06:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff0c:	76 57                	jbe    c000ff65 <Phys::freePage(unsigned long)+0x67>
c000ff0e:	c1 eb 0c             	shr    ebx,0xc
c000ff11:	53                   	push   ebx
c000ff12:	e8 cb ff ff ff       	call   c000fee2 <Phys::getPageState(unsigned long)>
c000ff17:	5a                   	pop    edx
c000ff18:	84 c0                	test   al,al
c000ff1a:	74 5b                	je     c000ff77 <Phys::freePage(unsigned long)+0x79>
c000ff1c:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c000ff21:	48                   	dec    eax
c000ff22:	a3 70 ee 02 c0       	mov    ds:0xc002ee70,eax
c000ff27:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff2a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff2d:	c1 e0 02             	shl    eax,0x2
c000ff30:	99                   	cdq    
c000ff31:	f7 3d 74 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee74
c000ff37:	39 05 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,eax
c000ff3d:	75 13                	jne    c000ff52 <Phys::freePage(unsigned long)+0x54>
c000ff3f:	83 ec 08             	sub    esp,0x8
c000ff42:	6a 00                	push   0x0
c000ff44:	53                   	push   ebx
c000ff45:	e8 66 ff ff ff       	call   c000feb0 <Phys::setPageState(unsigned long, bool)>
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	83 c4 08             	add    esp,0x8
c000ff50:	5b                   	pop    ebx
c000ff51:	c3                   	ret    
c000ff52:	83 ec 0c             	sub    esp,0xc
c000ff55:	a3 6c ee 02 c0       	mov    ds:0xc002ee6c,eax
c000ff5a:	50                   	push   eax
c000ff5b:	e8 14 0a 00 00       	call   c0010974 <VgaText::updateRAMUsageDisplay(int)>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	eb da                	jmp    c000ff3f <Phys::freePage(unsigned long)+0x41>
c000ff65:	68 00 10 00 00       	push   0x1000
c000ff6a:	53                   	push   ebx
c000ff6b:	e8 f8 fe ff ff       	call   c000fe68 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff70:	59                   	pop    ecx
c000ff71:	5b                   	pop    ebx
c000ff72:	83 c4 08             	add    esp,0x8
c000ff75:	5b                   	pop    ebx
c000ff76:	c3                   	ret    
c000ff77:	c7 44 24 10 66 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab66
c000ff7f:	83 c4 08             	add    esp,0x8
c000ff82:	5b                   	pop    ebx
c000ff83:	e9 07 a9 00 00       	jmp    c001a88f <Krnl::panic(char const*)>

c000ff88 <Phys::allocatePage()>:
c000ff88:	56                   	push   esi
c000ff89:	53                   	push   ebx
c000ff8a:	51                   	push   ecx
c000ff8b:	8b 35 64 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee64
c000ff91:	89 f3                	mov    ebx,esi
c000ff93:	eb 0a                	jmp    c000ff9f <Phys::allocatePage()+0x17>
c000ff95:	89 1d 64 ee 02 c0    	mov    DWORD PTR ds:0xc002ee64,ebx
c000ff9b:	39 de                	cmp    esi,ebx
c000ff9d:	74 24                	je     c000ffc3 <Phys::allocatePage()+0x3b>
c000ff9f:	53                   	push   ebx
c000ffa0:	e8 3d ff ff ff       	call   c000fee2 <Phys::getPageState(unsigned long)>
c000ffa5:	5a                   	pop    edx
c000ffa6:	84 c0                	test   al,al
c000ffa8:	74 77                	je     c0010021 <Phys::allocatePage()+0x99>
c000ffaa:	43                   	inc    ebx
c000ffab:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffb1:	75 e2                	jne    c000ff95 <Phys::allocatePage()+0xd>
c000ffb3:	31 db                	xor    ebx,ebx
c000ffb5:	c7 05 64 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee64,0x0
c000ffbf:	39 de                	cmp    esi,ebx
c000ffc1:	75 dc                	jne    c000ff9f <Phys::allocatePage()+0x17>
c000ffc3:	83 ec 0c             	sub    esp,0xc
c000ffc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffd4:	e8 27 2c 00 00       	call   c0012c00 <VAS::scanForEviction()>
c000ffd9:	83 c4 10             	add    esp,0x10
c000ffdc:	85 c0                	test   eax,eax
c000ffde:	75 76                	jne    c0010056 <Phys::allocatePage()+0xce>
c000ffe0:	83 ec 0c             	sub    esp,0xc
c000ffe3:	68 7c ab 02 c0       	push   0xc002ab7c
c000ffe8:	e8 e6 2e 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c000ffed:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fff4:	e8 cc fd ff ff       	call   c000fdc5 <Phys::allocateDMA(unsigned long)>
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	85 c0                	test   eax,eax
c000fffe:	75 56                	jne    c0010056 <Phys::allocatePage()+0xce>
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	68 8d ab 02 c0       	push   0xc002ab8d
c0010008:	e8 82 a8 00 00       	call   c001a88f <Krnl::panic(char const*)>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	8b 1d 64 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee64
c0010016:	53                   	push   ebx
c0010017:	e8 c6 fe ff ff       	call   c000fee2 <Phys::getPageState(unsigned long)>
c001001c:	5a                   	pop    edx
c001001d:	84 c0                	test   al,al
c001001f:	75 89                	jne    c000ffaa <Phys::allocatePage()+0x22>
c0010021:	6a 01                	push   0x1
c0010023:	53                   	push   ebx
c0010024:	e8 87 fe ff ff       	call   c000feb0 <Phys::setPageState(unsigned long, bool)>
c0010029:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c001002e:	59                   	pop    ecx
c001002f:	40                   	inc    eax
c0010030:	5b                   	pop    ebx
c0010031:	a3 70 ee 02 c0       	mov    ds:0xc002ee70,eax
c0010036:	8d 04 80             	lea    eax,[eax+eax*4]
c0010039:	8d 04 80             	lea    eax,[eax+eax*4]
c001003c:	c1 e0 02             	shl    eax,0x2
c001003f:	99                   	cdq    
c0010040:	f7 3d 74 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee74
c0010046:	39 05 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,eax
c001004c:	75 0c                	jne    c001005a <Phys::allocatePage()+0xd2>
c001004e:	a1 64 ee 02 c0       	mov    eax,ds:0xc002ee64
c0010053:	c1 e0 0c             	shl    eax,0xc
c0010056:	5a                   	pop    edx
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	c3                   	ret    
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	a3 6c ee 02 c0       	mov    ds:0xc002ee6c,eax
c0010062:	50                   	push   eax
c0010063:	e8 0c 09 00 00       	call   c0010974 <VgaText::updateRAMUsageDisplay(int)>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	eb e1                	jmp    c001004e <Phys::allocatePage()+0xc6>

c001006d <Phys::allocateContiguousPages(int)>:
c001006d:	57                   	push   edi
c001006e:	56                   	push   esi
c001006f:	53                   	push   ebx
c0010070:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010074:	fa                   	cli    
c0010075:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001007b:	31 db                	xor    ebx,ebx
c001007d:	85 db                	test   ebx,ebx
c001007f:	75 11                	jne    c0010092 <Phys::allocateContiguousPages(int)+0x25>
c0010081:	e8 02 ff ff ff       	call   c000ff88 <Phys::allocatePage()>
c0010086:	83 fe 01             	cmp    esi,0x1
c0010089:	89 c7                	mov    edi,eax
c001008b:	74 21                	je     c00100ae <Phys::allocateContiguousPages(int)+0x41>
c001008d:	bb 01 00 00 00       	mov    ebx,0x1
c0010092:	e8 f1 fe ff ff       	call   c000ff88 <Phys::allocatePage()>
c0010097:	89 da                	mov    edx,ebx
c0010099:	c1 e2 0c             	shl    edx,0xc
c001009c:	01 fa                	add    edx,edi
c001009e:	39 c2                	cmp    edx,eax
c00100a0:	74 20                	je     c00100c2 <Phys::allocateContiguousPages(int)+0x55>
c00100a2:	bb 01 00 00 00       	mov    ebx,0x1
c00100a7:	89 c7                	mov    edi,eax
c00100a9:	83 fe 01             	cmp    esi,0x1
c00100ac:	75 e4                	jne    c0010092 <Phys::allocateContiguousPages(int)+0x25>
c00100ae:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00100b3:	48                   	dec    eax
c00100b4:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00100b9:	75 01                	jne    c00100bc <Phys::allocateContiguousPages(int)+0x4f>
c00100bb:	fb                   	sti    
c00100bc:	89 f8                	mov    eax,edi
c00100be:	5b                   	pop    ebx
c00100bf:	5e                   	pop    esi
c00100c0:	5f                   	pop    edi
c00100c1:	c3                   	ret    
c00100c2:	43                   	inc    ebx
c00100c3:	39 f3                	cmp    ebx,esi
c00100c5:	75 b6                	jne    c001007d <Phys::allocateContiguousPages(int)+0x10>
c00100c7:	eb e5                	jmp    c00100ae <Phys::allocateContiguousPages(int)+0x41>

c00100c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100c9:	56                   	push   esi
c00100ca:	53                   	push   ebx
c00100cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100cf:	39 1d 68 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee68,ebx
c00100d5:	73 06                	jae    c00100dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100d7:	89 1d 68 ee 02 c0    	mov    DWORD PTR ds:0xc002ee68,ebx
c00100dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100e1:	c1 eb 0c             	shr    ebx,0xc
c00100e4:	c1 e8 0c             	shr    eax,0xc
c00100e7:	39 d8                	cmp    eax,ebx
c00100e9:	73 13                	jae    c00100fe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100eb:	6a 00                	push   0x0
c00100ed:	8d 70 01             	lea    esi,[eax+0x1]
c00100f0:	50                   	push   eax
c00100f1:	e8 ba fd ff ff       	call   c000feb0 <Phys::setPageState(unsigned long, bool)>
c00100f6:	5a                   	pop    edx
c00100f7:	89 f0                	mov    eax,esi
c00100f9:	59                   	pop    ecx
c00100fa:	39 f3                	cmp    ebx,esi
c00100fc:	75 ed                	jne    c00100eb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100fe:	5b                   	pop    ebx
c00100ff:	5e                   	pop    esi
c0010100:	c3                   	ret    

c0010101 <Phys::physicalMemorySetup(unsigned int)>:
c0010101:	55                   	push   ebp
c0010102:	57                   	push   edi
c0010103:	56                   	push   esi
c0010104:	53                   	push   ebx
c0010105:	31 db                	xor    ebx,ebx
c0010107:	83 ec 40             	sub    esp,0x40
c001010a:	6a 30                	push   0x30
c001010c:	6a 00                	push   0x0
c001010e:	68 80 ee 02 c0       	push   0xc002ee80
c0010113:	e8 70 06 ff ff       	call   c0000788 <memset>
c0010118:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001011c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010121:	05 00 10 00 00       	add    eax,0x1000
c0010126:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	83 ec 08             	sub    esp,0x8
c0010130:	6a 01                	push   0x1
c0010132:	53                   	push   ebx
c0010133:	43                   	inc    ebx
c0010134:	e8 77 fd ff ff       	call   c000feb0 <Phys::setPageState(unsigned long, bool)>
c0010139:	83 c4 10             	add    esp,0x10
c001013c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010142:	75 e9                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010144:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001014b:	66 85 c0             	test   ax,ax
c001014e:	0f 84 8e 01 00 00    	je     c00102e2 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010154:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010158:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010160:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010164:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001016d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010175:	eb 15                	jmp    c001018c <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010177:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001017b:	83 c3 18             	add    ebx,0x18
c001017e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010182:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010186:	0f 84 66 01 00 00    	je     c00102f2 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001018c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001018f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010192:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010195:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010199:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001019d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001019f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101a2:	01 f0                	add    eax,esi
c00101a4:	55                   	push   ebp
c00101a5:	11 fa                	adc    edx,edi
c00101a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101b3:	56                   	push   esi
c00101b4:	68 c8 ab 02 c0       	push   0xc002abc8
c00101b9:	e8 15 2d 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00101be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c2:	83 c4 10             	add    esp,0x10
c00101c5:	09 f8                	or     eax,edi
c00101c7:	0f 85 25 01 00 00    	jne    c00102f2 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101cd:	4d                   	dec    ebp
c00101ce:	75 a7                	jne    c0010177 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d0:	ba 00 00 08 00       	mov    edx,0x80000
c00101d5:	89 c1                	mov    ecx,eax
c00101d7:	39 f2                	cmp    edx,esi
c00101d9:	19 f9                	sbb    ecx,edi
c00101db:	0f 82 a7 00 00 00    	jb     c0010288 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101e1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101e5:	89 c1                	mov    ecx,eax
c00101e7:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101eb:	0f 83 97 00 00 00    	jae    c0010288 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101f1:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101f6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101fa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101fe:	39 fa                	cmp    edx,edi
c0010200:	19 e8                	sbb    eax,ebp
c0010202:	0f 82 14 01 00 00    	jb     c001031c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010208:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001020c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010210:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010216:	ba ff 1f 00 00       	mov    edx,0x1fff
c001021b:	83 d5 ff             	adc    ebp,0xffffffff
c001021e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010222:	31 c0                	xor    eax,eax
c0010224:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010228:	39 fa                	cmp    edx,edi
c001022a:	89 c1                	mov    ecx,eax
c001022c:	19 e9                	sbb    ecx,ebp
c001022e:	0f 83 43 ff ff ff    	jae    c0010177 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010234:	be 00 00 08 00       	mov    esi,0x80000
c0010239:	50                   	push   eax
c001023a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001023e:	57                   	push   edi
c001023f:	56                   	push   esi
c0010240:	68 ec ab 02 c0       	push   0xc002abec
c0010245:	e8 89 2c 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001024a:	5a                   	pop    edx
c001024b:	59                   	pop    ecx
c001024c:	57                   	push   edi
c001024d:	56                   	push   esi
c001024e:	e8 76 fe ff ff       	call   c00100c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010253:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010257:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001025b:	83 c4 0c             	add    esp,0xc
c001025e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010262:	03 05 74 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee74
c0010268:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001026f:	a3 74 ee 02 c0       	mov    ds:0xc002ee74,eax
c0010274:	52                   	push   edx
c0010275:	50                   	push   eax
c0010276:	68 a9 ab 02 c0       	push   0xc002aba9
c001027b:	e8 53 2c 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0010280:	83 c4 10             	add    esp,0x10
c0010283:	e9 ef fe ff ff       	jmp    c0010177 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010288:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001028c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010294:	39 ea                	cmp    edx,ebp
c0010296:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001029a:	0f 82 d7 fe ff ff    	jb     c0010177 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102a0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102a5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102a9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102ad:	0f 83 c4 fe ff ff    	jae    c0010177 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102b3:	39 ee                	cmp    esi,ebp
c00102b5:	89 f8                	mov    eax,edi
c00102b7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102bb:	0f 83 78 ff ff ff    	jae    c0010239 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102d1:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102dd:	e9 57 ff ff ff       	jmp    c0010239 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102e2:	83 ec 0c             	sub    esp,0xc
c00102e5:	68 9b ab 02 c0       	push   0xc002ab9b
c00102ea:	e8 a0 a5 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00102ef:	83 c4 10             	add    esp,0x10
c00102f2:	bb 40 01 00 00       	mov    ebx,0x140
c00102f7:	83 ec 08             	sub    esp,0x8
c00102fa:	6a 00                	push   0x0
c00102fc:	53                   	push   ebx
c00102fd:	43                   	inc    ebx
c00102fe:	e8 ad fb ff ff       	call   c000feb0 <Phys::setPageState(unsigned long, bool)>
c0010303:	ff 05 74 ee 02 c0    	inc    DWORD PTR ds:0xc002ee74
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010312:	75 e3                	jne    c00102f7 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010314:	83 c4 3c             	add    esp,0x3c
c0010317:	5b                   	pop    ebx
c0010318:	5e                   	pop    esi
c0010319:	5f                   	pop    edi
c001031a:	5d                   	pop    ebp
c001031b:	c3                   	ret    
c001031c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001032c:	e9 d7 fe ff ff       	jmp    c0010208 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010331:	90                   	nop

c0010332 <Pipe::isAtty()>:
c0010332:	31 c0                	xor    eax,eax
c0010334:	c3                   	ret    
c0010335:	90                   	nop

c0010336 <Pipe::~Pipe()>:
c0010336:	83 ec 0c             	sub    esp,0xc
c0010339:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c001033e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010342:	89 10                	mov    DWORD PTR [eax],edx
c0010344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	50                   	push   eax
c001034c:	e8 1b 15 00 00       	call   c001186c <UnixFile::~UnixFile()>
c0010351:	83 c4 10             	add    esp,0x10
c0010354:	90                   	nop
c0010355:	83 c4 0c             	add    esp,0xc
c0010358:	c3                   	ret    
c0010359:	90                   	nop

c001035a <Pipe::~Pipe()>:
c001035a:	83 ec 0c             	sub    esp,0xc
c001035d:	83 ec 0c             	sub    esp,0xc
c0010360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010364:	e8 cd ff ff ff       	call   c0010336 <Pipe::~Pipe()>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	83 ec 08             	sub    esp,0x8
c001036f:	6a 20                	push   0x20
c0010371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010375:	e8 79 2a 00 00       	call   c0012df3 <operator delete(void*, unsigned long)>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	83 c4 0c             	add    esp,0xc
c0010380:	c3                   	ret    
c0010381:	90                   	nop

c0010382 <Pipe::read(unsigned long long, void*, int*)>:
c0010382:	55                   	push   ebp
c0010383:	57                   	push   edi
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	83 ec 1c             	sub    esp,0x1c
c0010389:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001038d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010391:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010395:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010398:	89 c8                	mov    eax,ecx
c001039a:	99                   	cdq    
c001039b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001039f:	74 24                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103a1:	39 f9                	cmp    ecx,edi
c00103a3:	89 d1                	mov    ecx,edx
c00103a5:	19 f1                	sbb    ecx,esi
c00103a7:	73 1c                	jae    c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103a9:	fa                   	cli    
c00103aa:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c00103b0:	e8 d1 e0 00 00       	call   c001e486 <schedule()>
c00103b5:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00103ba:	48                   	dec    eax
c00103bb:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00103c0:	75 d3                	jne    c0010395 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103c2:	fb                   	sti    
c00103c3:	eb d0                	jmp    c0010395 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103c5:	39 f8                	cmp    eax,edi
c00103c7:	89 d1                	mov    ecx,edx
c00103c9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103cd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103d1:	19 f1                	sbb    ecx,esi
c00103d3:	73 08                	jae    c00103dd <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00103d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e3:	29 c6                	sub    esi,eax
c00103e5:	89 f1                	mov    ecx,esi
c00103e7:	c1 f9 1f             	sar    ecx,0x1f
c00103ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103ee:	89 ca                	mov    edx,ecx
c00103f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103f4:	19 d1                	sbb    ecx,edx
c00103f6:	73 04                	jae    c00103fc <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00103f8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010400:	89 fd                	mov    ebp,edi
c0010402:	29 f5                	sub    ebp,esi
c0010404:	85 f6                	test   esi,esi
c0010406:	74 12                	je     c001041a <Pipe::read(unsigned long long, void*, int*)+0x98>
c0010408:	52                   	push   edx
c0010409:	56                   	push   esi
c001040a:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001040d:	50                   	push   eax
c001040e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010412:	e8 51 03 ff ff       	call   c0000768 <memcpy>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	85 ed                	test   ebp,ebp
c001041c:	74 12                	je     c0010430 <Pipe::read(unsigned long long, void*, int*)+0xae>
c001041e:	50                   	push   eax
c001041f:	55                   	push   ebp
c0010420:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010423:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010427:	56                   	push   esi
c0010428:	e8 3b 03 ff ff       	call   c0000768 <memcpy>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010433:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010436:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010439:	99                   	cdq    
c001043a:	89 f7                	mov    edi,esi
c001043c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010440:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010444:	c1 ff 1f             	sar    edi,0x1f
c0010447:	57                   	push   edi
c0010448:	56                   	push   esi
c0010449:	52                   	push   edx
c001044a:	50                   	push   eax
c001044b:	e8 54 6e 01 00       	call   c00272a4 <__umoddi3>
c0010450:	83 c4 10             	add    esp,0x10
c0010453:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010456:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001045b:	75 10                	jne    c001046d <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001045d:	83 ec 0c             	sub    esp,0xc
c0010460:	68 15 ac 02 c0       	push   0xc002ac15
c0010465:	e8 25 a4 00 00       	call   c001a88f <Krnl::panic(char const*)>
c001046a:	83 c4 10             	add    esp,0x10
c001046d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010471:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010475:	89 10                	mov    DWORD PTR [eax],edx
c0010477:	83 c4 1c             	add    esp,0x1c
c001047a:	31 c0                	xor    eax,eax
c001047c:	5b                   	pop    ebx
c001047d:	5e                   	pop    esi
c001047e:	5f                   	pop    edi
c001047f:	5d                   	pop    ebp
c0010480:	c3                   	ret    
c0010481:	90                   	nop

c0010482 <Pipe::write(unsigned long long, void*, int*)>:
c0010482:	55                   	push   ebp
c0010483:	57                   	push   edi
c0010484:	56                   	push   esi
c0010485:	53                   	push   ebx
c0010486:	83 ec 1c             	sub    esp,0x1c
c0010489:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001048d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010491:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010495:	89 04 24             	mov    DWORD PTR [esp],eax
c0010498:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001049b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001049e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104a2:	89 de                	mov    esi,ebx
c00104a4:	89 df                	mov    edi,ebx
c00104a6:	c1 ff 1f             	sar    edi,0x1f
c00104a9:	01 c6                	add    esi,eax
c00104ab:	89 c8                	mov    eax,ecx
c00104ad:	11 d7                	adc    edi,edx
c00104af:	99                   	cdq    
c00104b0:	39 f1                	cmp    ecx,esi
c00104b2:	89 d0                	mov    eax,edx
c00104b4:	19 f8                	sbb    eax,edi
c00104b6:	b8 01 00 00 00       	mov    eax,0x1
c00104bb:	0f 82 80 00 00 00    	jb     c0010541 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104c4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104c7:	01 d8                	add    eax,ebx
c00104c9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104cd:	99                   	cdq    
c00104ce:	f7 f9                	idiv   ecx
c00104d0:	29 d1                	sub    ecx,edx
c00104d2:	89 d7                	mov    edi,edx
c00104d4:	89 c8                	mov    eax,ecx
c00104d6:	99                   	cdq    
c00104d7:	39 ce                	cmp    esi,ecx
c00104d9:	19 d3                	sbb    ebx,edx
c00104db:	bb 00 00 00 00       	mov    ebx,0x0
c00104e0:	72 04                	jb     c00104e6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104e2:	89 f3                	mov    ebx,esi
c00104e4:	29 cb                	sub    ebx,ecx
c00104e6:	89 f1                	mov    ecx,esi
c00104e8:	29 d9                	sub    ecx,ebx
c00104ea:	74 1a                	je     c0010506 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104ec:	52                   	push   edx
c00104ed:	51                   	push   ecx
c00104ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104f2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104f6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104f9:	57                   	push   edi
c00104fa:	e8 69 02 ff ff       	call   c0000768 <memcpy>
c00104ff:	83 c4 10             	add    esp,0x10
c0010502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010506:	85 db                	test   ebx,ebx
c0010508:	74 12                	je     c001051c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001050a:	50                   	push   eax
c001050b:	53                   	push   ebx
c001050c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010510:	51                   	push   ecx
c0010511:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010514:	e8 4f 02 ff ff       	call   c0000768 <memcpy>
c0010519:	83 c4 10             	add    esp,0x10
c001051c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001051f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010524:	75 10                	jne    c0010536 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010526:	83 ec 0c             	sub    esp,0xc
c0010529:	68 31 ac 02 c0       	push   0xc002ac31
c001052e:	e8 5c a3 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001053a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001053d:	89 38                	mov    DWORD PTR [eax],edi
c001053f:	31 c0                	xor    eax,eax
c0010541:	83 c4 1c             	add    esp,0x1c
c0010544:	5b                   	pop    ebx
c0010545:	5e                   	pop    esi
c0010546:	5f                   	pop    edi
c0010547:	5d                   	pop    ebp
c0010548:	c3                   	ret    
c0010549:	90                   	nop

c001054a <Pipe::Pipe(int)>:
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010551:	83 ec 08             	sub    esp,0x8
c0010554:	6a 00                	push   0x0
c0010556:	50                   	push   eax
c0010557:	e8 2e 11 00 00       	call   c001168a <UnixFile::UnixFile(int)>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c0010564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010568:	89 10                	mov    DWORD PTR [eax],edx
c001056a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010572:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010579:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010584:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001058b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001058f:	83 ec 0c             	sub    esp,0xc
c0010592:	50                   	push   eax
c0010593:	e8 84 f3 ff ff       	call   c000f91c <malloc>
c0010598:	83 c4 10             	add    esp,0x10
c001059b:	89 c2                	mov    edx,eax
c001059d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105ac:	90                   	nop
c00105ad:	83 c4 0c             	add    esp,0xc
c00105b0:	c3                   	ret    
c00105b1:	90                   	nop

c00105b2 <VgaText::isAtty()>:
c00105b2:	b0 01                	mov    al,0x1
c00105b4:	c3                   	ret    
c00105b5:	90                   	nop

c00105b6 <VgaText::~VgaText()>:
c00105b6:	83 ec 0c             	sub    esp,0xc
c00105b9:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c00105be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c2:	89 10                	mov    DWORD PTR [eax],edx
c00105c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c8:	83 ec 0c             	sub    esp,0xc
c00105cb:	50                   	push   eax
c00105cc:	e8 9b 12 00 00       	call   c001186c <UnixFile::~UnixFile()>
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	90                   	nop
c00105d5:	83 c4 0c             	add    esp,0xc
c00105d8:	c3                   	ret    
c00105d9:	90                   	nop

c00105da <VgaText::~VgaText()>:
c00105da:	83 ec 0c             	sub    esp,0xc
c00105dd:	83 ec 0c             	sub    esp,0xc
c00105e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e4:	e8 cd ff ff ff       	call   c00105b6 <VgaText::~VgaText()>
c00105e9:	83 c4 10             	add    esp,0x10
c00105ec:	83 ec 08             	sub    esp,0x8
c00105ef:	68 c4 02 00 00       	push   0x2c4
c00105f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f8:	e8 f6 27 00 00       	call   c0012df3 <operator delete(void*, unsigned long)>
c00105fd:	83 c4 10             	add    esp,0x10
c0010600:	83 c4 0c             	add    esp,0xc
c0010603:	c3                   	ret    

c0010604 <VgaText::read(unsigned long long, void*, int*)>:
c0010604:	83 ec 10             	sub    esp,0x10
c0010607:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001060b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001060f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010613:	e8 7e 5d 00 00       	call   c0016396 <readKeyboard(VgaText*, char*, unsigned long)>
c0010618:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001061c:	89 02                	mov    DWORD PTR [edx],eax
c001061e:	31 c0                	xor    eax,eax
c0010620:	83 c4 1c             	add    esp,0x1c
c0010623:	c3                   	ret    

c0010624 <setTerminalScrollLock(bool)>:
c0010624:	c3                   	ret    

c0010625 <addToTerminalCycle(VgaText*)>:
c0010625:	8b 15 00 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef00
c001062b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062f:	85 d2                	test   edx,edx
c0010631:	75 09                	jne    c001063c <addToTerminalCycle(VgaText*)+0x17>
c0010633:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010636:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c001063b:	c3                   	ret    
c001063c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001063f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010642:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010645:	c3                   	ret    

c0010646 <installVgaTextImplementation()>:
c0010646:	83 ec 10             	sub    esp,0x10
c0010649:	6a 20                	push   0x20
c001064b:	6a 00                	push   0x0
c001064d:	68 e0 ee 02 c0       	push   0xc002eee0
c0010652:	e8 31 01 ff ff       	call   c0000788 <memset>
c0010657:	83 c4 1c             	add    esp,0x1c
c001065a:	c3                   	ret    

c001065b <scrollTerminalScrollLock(int)>:
c001065b:	c3                   	ret    

c001065c <VgaText::load()>:
c001065c:	53                   	push   ebx
c001065d:	31 c0                	xor    eax,eax
c001065f:	83 ec 58             	sub    esp,0x58
c0010662:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010666:	89 e2                	mov    edx,esp
c0010668:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001066c:	40                   	inc    eax
c001066d:	83 f8 50             	cmp    eax,0x50
c0010670:	75 f6                	jne    c0010668 <VgaText::load()+0xc>
c0010672:	31 c0                	xor    eax,eax
c0010674:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001067b:	84 c9                	test   cl,cl
c001067d:	74 06                	je     c0010685 <VgaText::load()+0x29>
c001067f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010682:	40                   	inc    eax
c0010683:	eb ef                	jmp    c0010674 <VgaText::load()+0x18>
c0010685:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010688:	85 c0                	test   eax,eax
c001068a:	74 09                	je     c0010695 <VgaText::load()+0x39>
c001068c:	51                   	push   ecx
c001068d:	51                   	push   ecx
c001068e:	52                   	push   edx
c001068f:	53                   	push   ebx
c0010690:	ff d0                	call   eax
c0010692:	83 c4 10             	add    esp,0x10
c0010695:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010698:	85 c0                	test   eax,eax
c001069a:	74 09                	je     c00106a5 <VgaText::load()+0x49>
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	53                   	push   ebx
c00106a0:	ff d0                	call   eax
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 c4 58             	add    esp,0x58
c00106a8:	5b                   	pop    ebx
c00106a9:	c3                   	ret    

c00106aa <VgaText::updateCursor()>:
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	39 05 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,eax
c00106b4:	75 09                	jne    c00106bf <VgaText::updateCursor()+0x15>
c00106b6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00106b9:	85 c0                	test   eax,eax
c00106bb:	74 02                	je     c00106bf <VgaText::updateCursor()+0x15>
c00106bd:	ff e0                	jmp    eax
c00106bf:	c3                   	ret    

c00106c0 <VgaText::showCursor(bool)>:
c00106c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00106cb:	c3                   	ret    

c00106cc <VgaText::disableBlink(bool)>:
c00106cc:	56                   	push   esi
c00106cd:	53                   	push   ebx
c00106ce:	51                   	push   ecx
c00106cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106d7:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c00106dd:	75 15                	jne    c00106f4 <VgaText::disableBlink(bool)+0x28>
c00106df:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106e2:	85 c0                	test   eax,eax
c00106e4:	74 0e                	je     c00106f4 <VgaText::disableBlink(bool)+0x28>
c00106e6:	89 f1                	mov    ecx,esi
c00106e8:	52                   	push   edx
c00106e9:	52                   	push   edx
c00106ea:	0f b6 d1             	movzx  edx,cl
c00106ed:	52                   	push   edx
c00106ee:	53                   	push   ebx
c00106ef:	ff d0                	call   eax
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	89 f0                	mov    eax,esi
c00106f6:	83 f0 01             	xor    eax,0x1
c00106f9:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106fc:	58                   	pop    eax
c00106fd:	5b                   	pop    ebx
c00106fe:	5e                   	pop    esi
c00106ff:	c3                   	ret    

c0010700 <VgaText::doANSI_SGR(int)>:
c0010700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	85 d2                	test   edx,edx
c001070a:	75 0b                	jne    c0010717 <VgaText::doANSI_SGR(int)+0x17>
c001070c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001070f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010712:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010715:	eb 59                	jmp    c0010770 <VgaText::doANSI_SGR(int)+0x70>
c0010717:	83 fa 07             	cmp    edx,0x7
c001071a:	75 0b                	jne    c0010727 <VgaText::doANSI_SGR(int)+0x27>
c001071c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001071f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010722:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010725:	eb 49                	jmp    c0010770 <VgaText::doANSI_SGR(int)+0x70>
c0010727:	83 fa 1b             	cmp    edx,0x1b
c001072a:	74 e0                	je     c001070c <VgaText::doANSI_SGR(int)+0xc>
c001072c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 09                	ja     c001073d <VgaText::doANSI_SGR(int)+0x3d>
c0010734:	8b 14 8d 80 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2280]
c001073b:	eb 20                	jmp    c001075d <VgaText::doANSI_SGR(int)+0x5d>
c001073d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010740:	83 f9 07             	cmp    ecx,0x7
c0010743:	77 09                	ja     c001074e <VgaText::doANSI_SGR(int)+0x4e>
c0010745:	8b 14 8d 80 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2280]
c001074c:	eb 22                	jmp    c0010770 <VgaText::doANSI_SGR(int)+0x70>
c001074e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010751:	83 f9 07             	cmp    ecx,0x7
c0010754:	77 0b                	ja     c0010761 <VgaText::doANSI_SGR(int)+0x61>
c0010756:	8b 14 95 38 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23c8]
c001075d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010760:	c3                   	ret    
c0010761:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010764:	83 f9 07             	cmp    ecx,0x7
c0010767:	77 0a                	ja     c0010773 <VgaText::doANSI_SGR(int)+0x73>
c0010769:	8b 14 95 10 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23f0]
c0010770:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010773:	c3                   	ret    

c0010774 <VgaText::setDefaultBgColour(VgaColour)>:
c0010774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001077c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001077f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010782:	c3                   	ret    
c0010783:	90                   	nop

c0010784 <VgaText::setDefaultFgColour(VgaColour)>:
c0010784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001078c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001078f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010792:	c3                   	ret    
c0010793:	90                   	nop

c0010794 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010794:	53                   	push   ebx
c0010795:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010799:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001079d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107a1:	51                   	push   ecx
c00107a2:	e8 cd ff ff ff       	call   c0010774 <VgaText::setDefaultBgColour(VgaColour)>
c00107a7:	58                   	pop    eax
c00107a8:	5a                   	pop    edx
c00107a9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107b1:	5b                   	pop    ebx
c00107b2:	eb d0                	jmp    c0010784 <VgaText::setDefaultFgColour(VgaColour)>

c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107b4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107b8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107bd:	83 e0 0f             	and    eax,0xf
c00107c0:	c1 e2 04             	shl    edx,0x4
c00107c3:	09 d0                	or     eax,edx
c00107c5:	c3                   	ret    

c00107c6 <VgaText::scrollScreen()>:
c00107c6:	55                   	push   ebp
c00107c7:	b9 01 00 00 00       	mov    ecx,0x1
c00107cc:	57                   	push   edi
c00107cd:	56                   	push   esi
c00107ce:	53                   	push   ebx
c00107cf:	83 ec 0c             	sub    esp,0xc
c00107d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107d6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107dc:	31 ff                	xor    edi,edi
c00107de:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107e1:	83 f9 17             	cmp    ecx,0x17
c00107e4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107e7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107ee:	75 27                	jne    c0010817 <VgaText::scrollScreen()+0x51>
c00107f0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107f3:	01 f5                	add    ebp,esi
c00107f5:	f7 c7 01 00 00 00    	test   edi,0x1
c00107fb:	74 16                	je     c0010813 <VgaText::scrollScreen()+0x4d>
c00107fd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010801:	50                   	push   eax
c0010802:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010806:	50                   	push   eax
c0010807:	e8 a8 ff ff ff       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c001080c:	5a                   	pop    edx
c001080d:	5a                   	pop    edx
c001080e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010811:	eb 04                	jmp    c0010817 <VgaText::scrollScreen()+0x51>
c0010813:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010817:	47                   	inc    edi
c0010818:	46                   	inc    esi
c0010819:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001081f:	75 bd                	jne    c00107de <VgaText::scrollScreen()+0x18>
c0010821:	41                   	inc    ecx
c0010822:	83 f9 18             	cmp    ecx,0x18
c0010825:	75 af                	jne    c00107d6 <VgaText::scrollScreen()+0x10>
c0010827:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c001082d:	75 1b                	jne    c001084a <VgaText::scrollScreen()+0x84>
c001082f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010833:	74 05                	je     c001083a <VgaText::scrollScreen()+0x74>
c0010835:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010838:	eb 10                	jmp    c001084a <VgaText::scrollScreen()+0x84>
c001083a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001083d:	85 c0                	test   eax,eax
c001083f:	74 09                	je     c001084a <VgaText::scrollScreen()+0x84>
c0010841:	83 ec 0c             	sub    esp,0xc
c0010844:	53                   	push   ebx
c0010845:	ff d0                	call   eax
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001084e:	83 c4 0c             	add    esp,0xc
c0010851:	5b                   	pop    ebx
c0010852:	5e                   	pop    esi
c0010853:	5f                   	pop    edi
c0010854:	5d                   	pop    ebp
c0010855:	e9 50 fe ff ff       	jmp    c00106aa <VgaText::updateCursor()>

c001085a <VgaText::combineCharAndColour(char, unsigned char)>:
c001085a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001085f:	c1 e0 08             	shl    eax,0x8
c0010862:	89 c2                	mov    edx,eax
c0010864:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010869:	09 d0                	or     eax,edx
c001086b:	c3                   	ret    

c001086c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001086c:	56                   	push   esi
c001086d:	53                   	push   ebx
c001086e:	51                   	push   ecx
c001086f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010873:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010878:	50                   	push   eax
c0010879:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001087e:	50                   	push   eax
c001087f:	e8 30 ff ff ff       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010884:	5b                   	pop    ebx
c0010885:	0f b6 c0             	movzx  eax,al
c0010888:	5e                   	pop    esi
c0010889:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001088e:	50                   	push   eax
c001088f:	53                   	push   ebx
c0010890:	e8 c5 ff ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010895:	5a                   	pop    edx
c0010896:	5e                   	pop    esi
c0010897:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001089a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108a0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108a4:	0f b7 d2             	movzx  edx,dx
c00108a7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00108ab:	39 0d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ecx
c00108b1:	75 10                	jne    c00108c3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108b3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00108b6:	85 c0                	test   eax,eax
c00108b8:	74 09                	je     c00108c3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108ba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108be:	5a                   	pop    edx
c00108bf:	5b                   	pop    ebx
c00108c0:	5e                   	pop    esi
c00108c1:	ff e0                	jmp    eax
c00108c3:	58                   	pop    eax
c00108c4:	5b                   	pop    ebx
c00108c5:	5e                   	pop    esi
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <VgaText::getCursorX()>:
c00108c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00108cf:	c3                   	ret    

c00108d0 <VgaText::getCursorY()>:
c00108d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108d7:	c3                   	ret    

c00108d8 <VgaText::setCursor(int, int)>:
c00108d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108e0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108ea:	e9 bb fd ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 d4 ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010904:	83 c4 1c             	add    esp,0x1c
c0010907:	c3                   	ret    

c0010908 <VgaText::setCursorY(int)>:
c0010908:	83 ec 10             	sub    esp,0x10
c001090b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001090f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010913:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010916:	50                   	push   eax
c0010917:	e8 bc ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001091c:	83 c4 1c             	add    esp,0x1c
c001091f:	c3                   	ret    

c0010920 <VgaText::incrementCursor(bool)>:
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	51                   	push   ecx
c0010923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001092b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001092e:	40                   	inc    eax
c001092f:	83 f8 50             	cmp    eax,0x50
c0010932:	74 05                	je     c0010939 <VgaText::incrementCursor(bool)+0x19>
c0010934:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010937:	eb 24                	jmp    c001095d <VgaText::incrementCursor(bool)+0x3d>
c0010939:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001093c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010949:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001094c:	75 0f                	jne    c001095d <VgaText::incrementCursor(bool)+0x3d>
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010954:	53                   	push   ebx
c0010955:	e8 6c fe ff ff       	call   c00107c6 <VgaText::scrollScreen()>
c001095a:	83 c4 10             	add    esp,0x10
c001095d:	89 f0                	mov    eax,esi
c001095f:	84 c0                	test   al,al
c0010961:	74 0c                	je     c001096f <VgaText::incrementCursor(bool)+0x4f>
c0010963:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010967:	5a                   	pop    edx
c0010968:	5b                   	pop    ebx
c0010969:	5e                   	pop    esi
c001096a:	e9 3b fd ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c001096f:	58                   	pop    eax
c0010970:	5b                   	pop    ebx
c0010971:	5e                   	pop    esi
c0010972:	c3                   	ret    
c0010973:	90                   	nop

c0010974 <VgaText::updateRAMUsageDisplay(int)>:
c0010974:	56                   	push   esi
c0010975:	8b 35 60 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd60
c001097b:	53                   	push   ebx
c001097c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010981:	6a 0f                	push   0xf
c0010983:	6a 00                	push   0x0
c0010985:	e8 2a fe ff ff       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c001098a:	5a                   	pop    edx
c001098b:	59                   	pop    ecx
c001098c:	0f b6 c8             	movzx  ecx,al
c001098f:	51                   	push   ecx
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	99                   	cdq    
c0010995:	f7 fb                	idiv   ebx
c0010997:	89 d3                	mov    ebx,edx
c0010999:	83 c0 30             	add    eax,0x30
c001099c:	83 c3 30             	add    ebx,0x30
c001099f:	0f be c0             	movsx  eax,al
c00109a2:	0f b6 db             	movzx  ebx,bl
c00109a5:	50                   	push   eax
c00109a6:	e8 af fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ab:	5a                   	pop    edx
c00109ac:	5a                   	pop    edx
c00109ad:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109b4:	51                   	push   ecx
c00109b5:	53                   	push   ebx
c00109b6:	e8 9f fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c00109bb:	5b                   	pop    ebx
c00109bc:	5a                   	pop    edx
c00109bd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109c4:	51                   	push   ecx
c00109c5:	6a 25                	push   0x25
c00109c7:	e8 8e fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c00109cc:	59                   	pop    ecx
c00109cd:	5b                   	pop    ebx
c00109ce:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109d5:	5b                   	pop    ebx
c00109d6:	5e                   	pop    esi
c00109d7:	c3                   	ret    

c00109d8 <VgaText::updateDiskUsage()>:
c00109d8:	55                   	push   ebp
c00109d9:	bd 10 27 00 00       	mov    ebp,0x2710
c00109de:	57                   	push   edi
c00109df:	8b 3d 60 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd60
c00109e5:	56                   	push   esi
c00109e6:	53                   	push   ebx
c00109e7:	6a 0f                	push   0xf
c00109e9:	6a 00                	push   0x0
c00109eb:	e8 c4 fd ff ff       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c00109f0:	5a                   	pop    edx
c00109f1:	0f b6 d8             	movzx  ebx,al
c00109f4:	59                   	pop    ecx
c00109f5:	8b 35 88 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033188
c00109fb:	53                   	push   ebx
c00109fc:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a01:	89 f0                	mov    eax,esi
c0010a03:	99                   	cdq    
c0010a04:	f7 fd                	idiv   ebp
c0010a06:	99                   	cdq    
c0010a07:	f7 f9                	idiv   ecx
c0010a09:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0c:	0f b6 c0             	movzx  eax,al
c0010a0f:	50                   	push   eax
c0010a10:	e8 45 fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a15:	5d                   	pop    ebp
c0010a16:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a1b:	5a                   	pop    edx
c0010a1c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a20:	53                   	push   ebx
c0010a21:	89 f0                	mov    eax,esi
c0010a23:	99                   	cdq    
c0010a24:	f7 fd                	idiv   ebp
c0010a26:	99                   	cdq    
c0010a27:	f7 f9                	idiv   ecx
c0010a29:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2c:	0f b6 c0             	movzx  eax,al
c0010a2f:	50                   	push   eax
c0010a30:	e8 25 fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a35:	5d                   	pop    ebp
c0010a36:	bd 64 00 00 00       	mov    ebp,0x64
c0010a3b:	5a                   	pop    edx
c0010a3c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a43:	53                   	push   ebx
c0010a44:	89 f0                	mov    eax,esi
c0010a46:	99                   	cdq    
c0010a47:	f7 fd                	idiv   ebp
c0010a49:	99                   	cdq    
c0010a4a:	f7 f9                	idiv   ecx
c0010a4c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4f:	0f b6 c0             	movzx  eax,al
c0010a52:	50                   	push   eax
c0010a53:	e8 02 fe ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a58:	5d                   	pop    ebp
c0010a59:	5a                   	pop    edx
c0010a5a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a61:	53                   	push   ebx
c0010a62:	89 f0                	mov    eax,esi
c0010a64:	99                   	cdq    
c0010a65:	f7 f9                	idiv   ecx
c0010a67:	89 d6                	mov    esi,edx
c0010a69:	99                   	cdq    
c0010a6a:	f7 f9                	idiv   ecx
c0010a6c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6f:	0f b6 c0             	movzx  eax,al
c0010a72:	50                   	push   eax
c0010a73:	e8 e2 fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a78:	5d                   	pop    ebp
c0010a79:	5a                   	pop    edx
c0010a7a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a81:	53                   	push   ebx
c0010a82:	8d 46 30             	lea    eax,[esi+0x30]
c0010a85:	0f b6 f0             	movzx  esi,al
c0010a88:	56                   	push   esi
c0010a89:	e8 cc fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8e:	5e                   	pop    esi
c0010a8f:	8b 35 84 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033184
c0010a95:	5d                   	pop    ebp
c0010a96:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a9d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aa2:	53                   	push   ebx
c0010aa3:	89 f0                	mov    eax,esi
c0010aa5:	99                   	cdq    
c0010aa6:	f7 fd                	idiv   ebp
c0010aa8:	99                   	cdq    
c0010aa9:	f7 f9                	idiv   ecx
c0010aab:	8d 42 30             	lea    eax,[edx+0x30]
c0010aae:	0f b6 c0             	movzx  eax,al
c0010ab1:	50                   	push   eax
c0010ab2:	e8 a3 fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab7:	5a                   	pop    edx
c0010ab8:	5d                   	pop    ebp
c0010ab9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac0:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ac5:	53                   	push   ebx
c0010ac6:	89 f0                	mov    eax,esi
c0010ac8:	99                   	cdq    
c0010ac9:	f7 fd                	idiv   ebp
c0010acb:	99                   	cdq    
c0010acc:	f7 f9                	idiv   ecx
c0010ace:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad1:	0f b6 c0             	movzx  eax,al
c0010ad4:	50                   	push   eax
c0010ad5:	e8 80 fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010ada:	5a                   	pop    edx
c0010adb:	5d                   	pop    ebp
c0010adc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010ae3:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae8:	53                   	push   ebx
c0010ae9:	89 f0                	mov    eax,esi
c0010aeb:	99                   	cdq    
c0010aec:	f7 fd                	idiv   ebp
c0010aee:	99                   	cdq    
c0010aef:	f7 f9                	idiv   ecx
c0010af1:	83 c2 30             	add    edx,0x30
c0010af4:	0f b6 d2             	movzx  edx,dl
c0010af7:	52                   	push   edx
c0010af8:	e8 5d fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010afd:	5a                   	pop    edx
c0010afe:	5d                   	pop    ebp
c0010aff:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b06:	53                   	push   ebx
c0010b07:	89 f0                	mov    eax,esi
c0010b09:	99                   	cdq    
c0010b0a:	f7 f9                	idiv   ecx
c0010b0c:	89 d6                	mov    esi,edx
c0010b0e:	99                   	cdq    
c0010b0f:	f7 f9                	idiv   ecx
c0010b11:	8d 42 30             	lea    eax,[edx+0x30]
c0010b14:	0f b6 c0             	movzx  eax,al
c0010b17:	50                   	push   eax
c0010b18:	e8 3d fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1d:	5a                   	pop    edx
c0010b1e:	59                   	pop    ecx
c0010b1f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b26:	53                   	push   ebx
c0010b27:	8d 46 30             	lea    eax,[esi+0x30]
c0010b2a:	0f b6 f0             	movzx  esi,al
c0010b2d:	56                   	push   esi
c0010b2e:	e8 27 fd ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b33:	5b                   	pop    ebx
c0010b34:	5e                   	pop    esi
c0010b35:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b3c:	5b                   	pop    ebx
c0010b3d:	5e                   	pop    esi
c0010b3e:	5f                   	pop    edi
c0010b3f:	5d                   	pop    ebp
c0010b40:	c3                   	ret    
c0010b41:	90                   	nop

c0010b42 <VgaText::updateTitle()>:
c0010b42:	53                   	push   ebx
c0010b43:	31 c0                	xor    eax,eax
c0010b45:	83 ec 58             	sub    esp,0x58
c0010b48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b4c:	89 e1                	mov    ecx,esp
c0010b4e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b52:	40                   	inc    eax
c0010b53:	83 f8 50             	cmp    eax,0x50
c0010b56:	75 f6                	jne    c0010b4e <VgaText::updateTitle()+0xc>
c0010b58:	31 c0                	xor    eax,eax
c0010b5a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b61:	84 db                	test   bl,bl
c0010b63:	74 06                	je     c0010b6b <VgaText::updateTitle()+0x29>
c0010b65:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b68:	40                   	inc    eax
c0010b69:	eb ef                	jmp    c0010b5a <VgaText::updateTitle()+0x18>
c0010b6b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b6e:	85 c0                	test   eax,eax
c0010b70:	74 09                	je     c0010b7b <VgaText::updateTitle()+0x39>
c0010b72:	53                   	push   ebx
c0010b73:	53                   	push   ebx
c0010b74:	51                   	push   ecx
c0010b75:	52                   	push   edx
c0010b76:	ff d0                	call   eax
c0010b78:	83 c4 10             	add    esp,0x10
c0010b7b:	e8 58 fe ff ff       	call   c00109d8 <VgaText::updateDiskUsage()>
c0010b80:	83 c4 58             	add    esp,0x58
c0010b83:	5b                   	pop    ebx
c0010b84:	c3                   	ret    
c0010b85:	90                   	nop

c0010b86 <VgaText::setTitleTextColour(VgaColour)>:
c0010b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b8e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b91:	eb af                	jmp    c0010b42 <VgaText::updateTitle()>
c0010b93:	90                   	nop

c0010b94 <VgaText::setTitleColour(VgaColour)>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b9f:	eb a1                	jmp    c0010b42 <VgaText::updateTitle()>
c0010ba1:	90                   	nop

c0010ba2 <VgaText::setTitle(char*)>:
c0010ba2:	53                   	push   ebx
c0010ba3:	83 ec 10             	sub    esp,0x10
c0010ba6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bae:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010bb4:	50                   	push   eax
c0010bb5:	e8 8a fc fe ff       	call   c0000844 <strcpy>
c0010bba:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bbe:	83 c4 18             	add    esp,0x18
c0010bc1:	5b                   	pop    ebx
c0010bc2:	e9 7b ff ff ff       	jmp    c0010b42 <VgaText::updateTitle()>
c0010bc7:	90                   	nop

c0010bc8 <VgaText::decrementCursor(bool)>:
c0010bc8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bd0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010bd3:	85 c0                	test   eax,eax
c0010bd5:	74 04                	je     c0010bdb <VgaText::decrementCursor(bool)+0x13>
c0010bd7:	48                   	dec    eax
c0010bd8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010bdb:	84 c9                	test   cl,cl
c0010bdd:	74 09                	je     c0010be8 <VgaText::decrementCursor(bool)+0x20>
c0010bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be3:	e9 c2 fa ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop

c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bea:	53                   	push   ebx
c0010beb:	83 ec 08             	sub    esp,0x8
c0010bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bfe:	3c 07                	cmp    al,0x7
c0010c00:	75 2a                	jne    c0010c2c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c02:	a1 b8 ef 02 c0       	mov    eax,ds:0xc002efb8
c0010c07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c0f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c17:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c23:	83 c4 08             	add    esp,0x8
c0010c26:	5b                   	pop    ebx
c0010c27:	e9 b4 30 00 00       	jmp    c0013ce0 <Buzzer::beep(int, int, bool)>
c0010c2c:	3c 0d                	cmp    al,0xd
c0010c2e:	75 09                	jne    c0010c39 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010c30:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c37:	eb 2c                	jmp    c0010c65 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c39:	3c 0a                	cmp    al,0xa
c0010c3b:	75 31                	jne    c0010c6e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c3d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c40:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c47:	8d 50 01             	lea    edx,[eax+0x1]
c0010c4a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c4d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c50:	75 0f                	jne    c0010c61 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c52:	83 ec 0c             	sub    esp,0xc
c0010c55:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c58:	53                   	push   ebx
c0010c59:	e8 68 fb ff ff       	call   c00107c6 <VgaText::scrollScreen()>
c0010c5e:	83 c4 10             	add    esp,0x10
c0010c61:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c65:	83 c4 08             	add    esp,0x8
c0010c68:	5b                   	pop    ebx
c0010c69:	e9 3c fa ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010c6e:	3c 08                	cmp    al,0x8
c0010c70:	75 25                	jne    c0010c97 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c72:	50                   	push   eax
c0010c73:	50                   	push   eax
c0010c74:	6a 01                	push   0x1
c0010c76:	53                   	push   ebx
c0010c77:	e8 4c ff ff ff       	call   c0010bc8 <VgaText::decrementCursor(bool)>
c0010c7c:	5a                   	pop    edx
c0010c7d:	59                   	pop    ecx
c0010c7e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c84:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c87:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c8a:	6a 20                	push   0x20
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 da fb ff ff       	call   c001086c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c92:	83 c4 28             	add    esp,0x28
c0010c95:	5b                   	pop    ebx
c0010c96:	c3                   	ret    
c0010c97:	83 ec 08             	sub    esp,0x8
c0010c9a:	0f be c0             	movsx  eax,al
c0010c9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ca0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ca3:	51                   	push   ecx
c0010ca4:	52                   	push   edx
c0010ca5:	50                   	push   eax
c0010ca6:	53                   	push   ebx
c0010ca7:	e8 c0 fb ff ff       	call   c001086c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cac:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cb0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb8:	83 c4 28             	add    esp,0x28
c0010cbb:	5b                   	pop    ebx
c0010cbc:	e9 5f fc ff ff       	jmp    c0010920 <VgaText::incrementCursor(bool)>
c0010cc1:	90                   	nop

c0010cc2 <VgaText::isShowingCursor()>:
c0010cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010cc9:	c3                   	ret    

c0010cca <VgaText::isBlinkDisabled()>:
c0010cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cce:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010cd1:	83 f0 01             	xor    eax,0x1
c0010cd4:	c3                   	ret    
c0010cd5:	90                   	nop

c0010cd6 <VgaText::setCursorHeight(int)>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cde:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010ce1:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010ce5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce9:	e9 d2 f9 ff ff       	jmp    c00106c0 <VgaText::showCursor(bool)>

c0010cee <VgaText::getCursorHeight()>:
c0010cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010cf5:	c3                   	ret    

c0010cf6 <setActiveTerminal(VgaText*)>:
c0010cf6:	53                   	push   ebx
c0010cf7:	83 ec 08             	sub    esp,0x8
c0010cfa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cfe:	85 db                	test   ebx,ebx
c0010d00:	75 11                	jne    c0010d13 <setActiveTerminal(VgaText*)+0x1d>
c0010d02:	c7 44 24 10 6c ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac6c
c0010d0a:	83 c4 08             	add    esp,0x8
c0010d0d:	5b                   	pop    ebx
c0010d0e:	e9 7c 9b 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c0010d13:	50                   	push   eax
c0010d14:	50                   	push   eax
c0010d15:	53                   	push   ebx
c0010d16:	68 7a ac 02 c0       	push   0xc002ac7a
c0010d1b:	e8 b3 21 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0010d20:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0010d25:	83 c4 10             	add    esp,0x10
c0010d28:	85 c0                	test   eax,eax
c0010d2a:	74 0c                	je     c0010d38 <setActiveTerminal(VgaText*)+0x42>
c0010d2c:	83 ec 0c             	sub    esp,0xc
c0010d2f:	50                   	push   eax
c0010d30:	e8 75 f9 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	89 1d 04 ef 02 c0    	mov    DWORD PTR ds:0xc002ef04,ebx
c0010d3e:	51                   	push   ecx
c0010d3f:	51                   	push   ecx
c0010d40:	53                   	push   ebx
c0010d41:	68 92 ac 02 c0       	push   0xc002ac92
c0010d46:	e8 88 21 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0010d4b:	83 c4 0c             	add    esp,0xc
c0010d4e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d51:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d54:	53                   	push   ebx
c0010d55:	e8 7e fb ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010d5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5d:	e8 68 ff ff ff       	call   c0010cca <VgaText::isBlinkDisabled()>
c0010d62:	5a                   	pop    edx
c0010d63:	0f b6 c0             	movzx  eax,al
c0010d66:	59                   	pop    ecx
c0010d67:	50                   	push   eax
c0010d68:	53                   	push   ebx
c0010d69:	e8 5e f9 ff ff       	call   c00106cc <VgaText::disableBlink(bool)>
c0010d6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d71:	e8 78 ff ff ff       	call   c0010cee <VgaText::getCursorHeight()>
c0010d76:	5a                   	pop    edx
c0010d77:	59                   	pop    ecx
c0010d78:	50                   	push   eax
c0010d79:	53                   	push   ebx
c0010d7a:	e8 57 ff ff ff       	call   c0010cd6 <VgaText::setCursorHeight(int)>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d86:	75 07                	jne    c0010d8f <setActiveTerminal(VgaText*)+0x99>
c0010d88:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d93:	83 c4 08             	add    esp,0x8
c0010d96:	5b                   	pop    ebx
c0010d97:	e9 c0 f8 ff ff       	jmp    c001065c <VgaText::load()>

c0010d9c <doTerminalCycle()>:
c0010d9c:	83 ec 18             	sub    esp,0x18
c0010d9f:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c0010da4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010da7:	50                   	push   eax
c0010da8:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0010dad:	e8 44 ff ff ff       	call   c0010cf6 <setActiveTerminal(VgaText*)>
c0010db2:	83 c4 1c             	add    esp,0x1c
c0010db5:	c3                   	ret    

c0010db6 <VgaText::doUpdate()>:
c0010db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dba:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010dbd:	85 c0                	test   eax,eax
c0010dbf:	74 02                	je     c0010dc3 <VgaText::doUpdate()+0xd>
c0010dc1:	ff e0                	jmp    eax
c0010dc3:	c3                   	ret    

c0010dc4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dc4:	55                   	push   ebp
c0010dc5:	31 ed                	xor    ebp,ebp
c0010dc7:	57                   	push   edi
c0010dc8:	56                   	push   esi
c0010dc9:	53                   	push   ebx
c0010dca:	83 ec 1c             	sub    esp,0x1c
c0010dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010dd1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ddd:	50                   	push   eax
c0010dde:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de3:	50                   	push   eax
c0010de4:	e8 cb f9 ff ff       	call   c00107b4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010de9:	59                   	pop    ecx
c0010dea:	0f b6 c0             	movzx  eax,al
c0010ded:	5e                   	pop    esi
c0010dee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010df3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010df7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dfe:	0f b7 f6             	movzx  esi,si
c0010e01:	01 f6                	add    esi,esi
c0010e03:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e06:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010e09:	84 c0                	test   al,al
c0010e0b:	0f 84 fd 00 00 00    	je     c0010f0e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010e11:	3c 0d                	cmp    al,0xd
c0010e13:	75 0c                	jne    c0010e21 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010e15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e1c:	e9 e7 00 00 00       	jmp    c0010f08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e21:	3c 0a                	cmp    al,0xa
c0010e23:	75 47                	jne    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010e25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010e28:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e32:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e35:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e38:	75 0f                	jne    c0010e49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e40:	53                   	push   ebx
c0010e41:	e8 80 f9 ff ff       	call   c00107c6 <VgaText::scrollScreen()>
c0010e46:	83 c4 10             	add    esp,0x10
c0010e49:	83 ec 0c             	sub    esp,0xc
c0010e4c:	31 ed                	xor    ebp,ebp
c0010e4e:	53                   	push   ebx
c0010e4f:	e8 56 f8 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010e54:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e5f:	0f b7 f6             	movzx  esi,si
c0010e62:	01 f6                	add    esi,esi
c0010e64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e67:	e9 9c 00 00 00       	jmp    c0010f08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e6c:	3c 08                	cmp    al,0x8
c0010e6e:	75 35                	jne    c0010ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e70:	56                   	push   esi
c0010e71:	56                   	push   esi
c0010e72:	6a 01                	push   0x1
c0010e74:	53                   	push   ebx
c0010e75:	e8 4e fd ff ff       	call   c0010bc8 <VgaText::decrementCursor(bool)>
c0010e7a:	58                   	pop    eax
c0010e7b:	5a                   	pop    edx
c0010e7c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e7f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e82:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e85:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e88:	6a 20                	push   0x20
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 dc f9 ff ff       	call   c001086c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e90:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e95:	83 c4 20             	add    esp,0x20
c0010e98:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e9b:	0f b7 f6             	movzx  esi,si
c0010e9e:	01 f6                	add    esi,esi
c0010ea0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ea3:	eb 63                	jmp    c0010f08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ea5:	51                   	push   ecx
c0010ea6:	51                   	push   ecx
c0010ea7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010eab:	50                   	push   eax
c0010eac:	e8 a9 f9 ff ff       	call   c001085a <VgaText::combineCharAndColour(char, unsigned char)>
c0010eb1:	83 c4 10             	add    esp,0x10
c0010eb4:	66 89 06             	mov    WORD PTR [esi],ax
c0010eb7:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010ebd:	75 21                	jne    c0010ee0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ebf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	74 1a                	je     c0010ee0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ec6:	52                   	push   edx
c0010ec7:	52                   	push   edx
c0010ec8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ecb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ece:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ed2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ed6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ed9:	51                   	push   ecx
c0010eda:	53                   	push   ebx
c0010edb:	ff d0                	call   eax
c0010edd:	83 c4 20             	add    esp,0x20
c0010ee0:	83 c6 02             	add    esi,0x2
c0010ee3:	50                   	push   eax
c0010ee4:	50                   	push   eax
c0010ee5:	6a 00                	push   0x0
c0010ee7:	53                   	push   ebx
c0010ee8:	e8 33 fa ff ff       	call   c0010920 <VgaText::incrementCursor(bool)>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010ef4:	75 0d                	jne    c0010f03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ef6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010efb:	0f b7 f6             	movzx  esi,si
c0010efe:	01 f6                	add    esi,esi
c0010f00:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010f03:	bd 01 00 00 00       	mov    ebp,0x1
c0010f08:	47                   	inc    edi
c0010f09:	e9 f8 fe ff ff       	jmp    c0010e06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	53                   	push   ebx
c0010f12:	e8 93 f7 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	89 e8                	mov    eax,ebp
c0010f1c:	84 c0                	test   al,al
c0010f1e:	74 0c                	je     c0010f2c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010f20:	83 ec 0c             	sub    esp,0xc
c0010f23:	53                   	push   ebx
c0010f24:	e8 8d fe ff ff       	call   c0010db6 <VgaText::doUpdate()>
c0010f29:	83 c4 10             	add    esp,0x10
c0010f2c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f33:	83 c4 1c             	add    esp,0x1c
c0010f36:	5b                   	pop    ebx
c0010f37:	5e                   	pop    esi
c0010f38:	5f                   	pop    edi
c0010f39:	5d                   	pop    ebp
c0010f3a:	c3                   	ret    
c0010f3b:	90                   	nop

c0010f3c <VgaText::clearScreen()>:
c0010f3c:	57                   	push   edi
c0010f3d:	56                   	push   esi
c0010f3e:	31 f6                	xor    esi,esi
c0010f40:	53                   	push   ebx
c0010f41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f45:	52                   	push   edx
c0010f46:	6a 00                	push   0x0
c0010f48:	6a 00                	push   0x0
c0010f4a:	53                   	push   ebx
c0010f4b:	e8 88 f9 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010f50:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f5d:	7e 20                	jle    c0010f7f <VgaText::clearScreen()+0x43>
c0010f5f:	31 ff                	xor    edi,edi
c0010f61:	50                   	push   eax
c0010f62:	50                   	push   eax
c0010f63:	56                   	push   esi
c0010f64:	57                   	push   edi
c0010f65:	47                   	inc    edi
c0010f66:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f69:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f6c:	6a 20                	push   0x20
c0010f6e:	53                   	push   ebx
c0010f6f:	e8 f8 f8 ff ff       	call   c001086c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f74:	83 c4 20             	add    esp,0x20
c0010f77:	83 ff 50             	cmp    edi,0x50
c0010f7a:	75 e5                	jne    c0010f61 <VgaText::clearScreen()+0x25>
c0010f7c:	46                   	inc    esi
c0010f7d:	eb db                	jmp    c0010f5a <VgaText::clearScreen()+0x1e>
c0010f7f:	83 ec 0c             	sub    esp,0xc
c0010f82:	53                   	push   ebx
c0010f83:	e8 2e fe ff ff       	call   c0010db6 <VgaText::doUpdate()>
c0010f88:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	5f                   	pop    edi
c0010f95:	c3                   	ret    

c0010f96 <VgaText::putchar(char)>:
c0010f96:	56                   	push   esi
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 14             	sub    esp,0x14
c0010f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fa3:	3c 5b                	cmp    al,0x5b
c0010fa5:	75 18                	jne    c0010fbf <VgaText::putchar(char)+0x29>
c0010fa7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010fab:	74 1f                	je     c0010fcc <VgaText::putchar(char)+0x36>
c0010fad:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010fb3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010fba:	e9 bd 00 00 00       	jmp    c001107c <VgaText::putchar(char)+0xe6>
c0010fbf:	3c 1b                	cmp    al,0x1b
c0010fc1:	75 09                	jne    c0010fcc <VgaText::putchar(char)+0x36>
c0010fc3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010fc7:	e9 b0 00 00 00       	jmp    c001107c <VgaText::putchar(char)+0xe6>
c0010fcc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010fcf:	84 c9                	test   cl,cl
c0010fd1:	0f 84 92 00 00 00    	je     c0011069 <VgaText::putchar(char)+0xd3>
c0010fd7:	8d 50 c0             	lea    edx,[eax-0x40]
c0010fda:	80 fa 3e             	cmp    dl,0x3e
c0010fdd:	77 76                	ja     c0011055 <VgaText::putchar(char)+0xbf>
c0010fdf:	3c 6d                	cmp    al,0x6d
c0010fe1:	75 47                	jne    c001102a <VgaText::putchar(char)+0x94>
c0010fe3:	31 f6                	xor    esi,esi
c0010fe5:	31 d2                	xor    edx,edx
c0010fe7:	31 c0                	xor    eax,eax
c0010fe9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010fec:	7e 2d                	jle    c001101b <VgaText::putchar(char)+0x85>
c0010fee:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010ff3:	80 fa 3b             	cmp    dl,0x3b
c0010ff6:	75 17                	jne    c001100f <VgaText::putchar(char)+0x79>
c0010ff8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ffc:	50                   	push   eax
c0010ffd:	53                   	push   ebx
c0010ffe:	e8 fd f6 ff ff       	call   c0010700 <VgaText::doANSI_SGR(int)>
c0011003:	59                   	pop    ecx
c0011004:	31 d2                	xor    edx,edx
c0011006:	58                   	pop    eax
c0011007:	31 c0                	xor    eax,eax
c0011009:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001100d:	eb 09                	jmp    c0011018 <VgaText::putchar(char)+0x82>
c001100f:	6b c0 0a             	imul   eax,eax,0xa
c0011012:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011016:	88 ca                	mov    dl,cl
c0011018:	46                   	inc    esi
c0011019:	eb ce                	jmp    c0010fe9 <VgaText::putchar(char)+0x53>
c001101b:	84 d2                	test   dl,dl
c001101d:	74 2e                	je     c001104d <VgaText::putchar(char)+0xb7>
c001101f:	50                   	push   eax
c0011020:	53                   	push   ebx
c0011021:	e8 da f6 ff ff       	call   c0010700 <VgaText::doANSI_SGR(int)>
c0011026:	58                   	pop    eax
c0011027:	5a                   	pop    edx
c0011028:	eb 23                	jmp    c001104d <VgaText::putchar(char)+0xb7>
c001102a:	3c 4a                	cmp    al,0x4a
c001102c:	75 1f                	jne    c001104d <VgaText::putchar(char)+0xb7>
c001102e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011032:	75 19                	jne    c001104d <VgaText::putchar(char)+0xb7>
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	53                   	push   ebx
c0011038:	e8 ff fe ff ff       	call   c0010f3c <VgaText::clearScreen()>
c001103d:	83 c4 0c             	add    esp,0xc
c0011040:	6a 00                	push   0x0
c0011042:	6a 00                	push   0x0
c0011044:	53                   	push   ebx
c0011045:	e8 8e f8 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011053:	eb 27                	jmp    c001107c <VgaText::putchar(char)+0xe6>
c0011055:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011058:	83 fa 0e             	cmp    edx,0xe
c001105b:	7f 1f                	jg     c001107c <VgaText::putchar(char)+0xe6>
c001105d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011060:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011063:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011067:	eb 13                	jmp    c001107c <VgaText::putchar(char)+0xe6>
c0011069:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001106c:	0f be c0             	movsx  eax,al
c001106f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011072:	50                   	push   eax
c0011073:	53                   	push   ebx
c0011074:	e8 71 fb ff ff       	call   c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	83 c4 14             	add    esp,0x14
c001107f:	5b                   	pop    ebx
c0011080:	5e                   	pop    esi
c0011081:	c3                   	ret    

c0011082 <VgaText::puts(char const*)>:
c0011082:	53                   	push   ebx
c0011083:	83 ec 08             	sub    esp,0x8
c0011086:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001108a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001108d:	84 c0                	test   al,al
c001108f:	74 12                	je     c00110a3 <VgaText::puts(char const*)+0x21>
c0011091:	43                   	inc    ebx
c0011092:	51                   	push   ecx
c0011093:	51                   	push   ecx
c0011094:	50                   	push   eax
c0011095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011099:	e8 f8 fe ff ff       	call   c0010f96 <VgaText::putchar(char)>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	eb e7                	jmp    c001108a <VgaText::puts(char const*)+0x8>
c00110a3:	83 c4 08             	add    esp,0x8
c00110a6:	5b                   	pop    ebx
c00110a7:	c3                   	ret    

c00110a8 <VgaText::putx(unsigned int)>:
c00110a8:	57                   	push   edi
c00110a9:	b9 11 00 00 00       	mov    ecx,0x11
c00110ae:	56                   	push   esi
c00110af:	be ae ac 02 c0       	mov    esi,0xc002acae
c00110b4:	53                   	push   ebx
c00110b5:	83 ec 20             	sub    esp,0x20
c00110b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110bc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00110c0:	fc                   	cld    
c00110c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110c3:	be 08 00 00 00       	mov    esi,0x8
c00110c8:	50                   	push   eax
c00110c9:	50                   	push   eax
c00110ca:	89 d8                	mov    eax,ebx
c00110cc:	c1 e3 04             	shl    ebx,0x4
c00110cf:	c1 e8 1c             	shr    eax,0x1c
c00110d2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110d7:	50                   	push   eax
c00110d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110dc:	e8 b5 fe ff ff       	call   c0010f96 <VgaText::putchar(char)>
c00110e1:	83 c4 10             	add    esp,0x10
c00110e4:	4e                   	dec    esi
c00110e5:	75 e1                	jne    c00110c8 <VgaText::putx(unsigned int)+0x20>
c00110e7:	83 c4 20             	add    esp,0x20
c00110ea:	5b                   	pop    ebx
c00110eb:	5e                   	pop    esi
c00110ec:	5f                   	pop    edi
c00110ed:	c3                   	ret    

c00110ee <VgaText::VgaText(char const*)>:
c00110ee:	57                   	push   edi
c00110ef:	56                   	push   esi
c00110f0:	53                   	push   ebx
c00110f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f5:	83 ec 08             	sub    esp,0x8
c00110f8:	6a 00                	push   0x0
c00110fa:	50                   	push   eax
c00110fb:	e8 8a 05 00 00       	call   c001168a <UnixFile::UnixFile(int)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0011108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110c:	89 10                	mov    DWORD PTR [eax],edx
c001110e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011112:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001111d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011128:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001112c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011130:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011138:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001113f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011143:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001114a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011159:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011164:	8d 50 60             	lea    edx,[eax+0x60]
c0011167:	bb e0 ee 02 c0       	mov    ebx,0xc002eee0
c001116c:	b8 08 00 00 00       	mov    eax,0x8
c0011171:	fc                   	cld    
c0011172:	89 d7                	mov    edi,edx
c0011174:	89 de                	mov    esi,ebx
c0011176:	89 c1                	mov    ecx,eax
c0011178:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001117a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117e:	05 82 00 00 00       	add    eax,0x82
c0011183:	83 ec 08             	sub    esp,0x8
c0011186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118a:	50                   	push   eax
c001118b:	e8 b4 f6 fe ff       	call   c0000844 <strcpy>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011197:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001119e:	83 ec 0c             	sub    esp,0xc
c00111a1:	6a 01                	push   0x1
c00111a3:	e8 25 09 00 00       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	89 c2                	mov    edx,eax
c00111ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111b4:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c00111ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111c1:	89 c6                	mov    esi,eax
c00111c3:	e8 c0 ed ff ff       	call   c000ff88 <Phys::allocatePage()>
c00111c8:	6a 05                	push   0x5
c00111ca:	56                   	push   esi
c00111cb:	50                   	push   eax
c00111cc:	53                   	push   ebx
c00111cd:	e8 32 11 00 00       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111dc:	83 ec 04             	sub    esp,0x4
c00111df:	68 00 0f 00 00       	push   0xf00
c00111e4:	6a 00                	push   0x0
c00111e6:	50                   	push   eax
c00111e7:	e8 9c f5 fe ff       	call   c0000788 <memset>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	83 ec 04             	sub    esp,0x4
c00111f2:	6a 00                	push   0x0
c00111f4:	6a 07                	push   0x7
c00111f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111fa:	e8 95 f5 ff ff       	call   c0010794 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111ff:	83 c4 10             	add    esp,0x10
c0011202:	83 ec 08             	sub    esp,0x8
c0011205:	6a 02                	push   0x2
c0011207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120b:	e8 c6 fa ff ff       	call   c0010cd6 <VgaText::setCursorHeight(int)>
c0011210:	83 c4 10             	add    esp,0x10
c0011213:	83 ec 04             	sub    esp,0x4
c0011216:	6a 00                	push   0x0
c0011218:	6a 00                	push   0x0
c001121a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001121e:	e8 b5 f6 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0011223:	83 c4 10             	add    esp,0x10
c0011226:	83 ec 08             	sub    esp,0x8
c0011229:	6a 01                	push   0x1
c001122b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122f:	e8 8c f4 ff ff       	call   c00106c0 <VgaText::showCursor(bool)>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	83 ec 08             	sub    esp,0x8
c001123a:	6a 01                	push   0x1
c001123c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011240:	e8 87 f4 ff ff       	call   c00106cc <VgaText::disableBlink(bool)>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	83 ec 0c             	sub    esp,0xc
c001124b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124f:	e8 e8 fc ff ff       	call   c0010f3c <VgaText::clearScreen()>
c0011254:	83 c4 10             	add    esp,0x10
c0011257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001125f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011263:	05 02 01 00 00       	add    eax,0x102
c0011268:	83 ec 04             	sub    esp,0x4
c001126b:	68 96 00 00 00       	push   0x96
c0011270:	6a 00                	push   0x0
c0011272:	50                   	push   eax
c0011273:	e8 10 f5 fe ff       	call   c0000788 <memset>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127f:	05 98 01 00 00       	add    eax,0x198
c0011284:	83 ec 04             	sub    esp,0x4
c0011287:	68 2c 01 00 00       	push   0x12c
c001128c:	6a 00                	push   0x0
c001128e:	50                   	push   eax
c001128f:	e8 f4 f4 fe ff       	call   c0000788 <memset>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	90                   	nop
c0011298:	5b                   	pop    ebx
c0011299:	5e                   	pop    esi
c001129a:	5f                   	pop    edi
c001129b:	c3                   	ret    

c001129c <VgaText::receiveKey(unsigned char)>:
c001129c:	55                   	push   ebp
c001129d:	57                   	push   edi
c001129e:	56                   	push   esi
c001129f:	53                   	push   ebx
c00112a0:	83 ec 1c             	sub    esp,0x1c
c00112a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112ab:	84 db                	test   bl,bl
c00112ad:	0f 84 c9 00 00 00    	je     c001137c <VgaText::receiveKey(unsigned char)+0xe0>
c00112b3:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00112b9:	80 fb 08             	cmp    bl,0x8
c00112bc:	75 2c                	jne    c00112ea <VgaText::receiveKey(unsigned char)+0x4e>
c00112be:	83 ec 0c             	sub    esp,0xc
c00112c1:	57                   	push   edi
c00112c2:	e8 dd f4 fe ff       	call   c00007a4 <strlen>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	85 c0                	test   eax,eax
c00112cc:	74 41                	je     c001130f <VgaText::receiveKey(unsigned char)+0x73>
c00112ce:	50                   	push   eax
c00112cf:	50                   	push   eax
c00112d0:	6a 08                	push   0x8
c00112d2:	56                   	push   esi
c00112d3:	e8 be fc ff ff       	call   c0010f96 <VgaText::putchar(char)>
c00112d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112db:	e8 c4 f4 fe ff       	call   c00007a4 <strlen>
c00112e0:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112e8:	eb 22                	jmp    c001130c <VgaText::receiveKey(unsigned char)+0x70>
c00112ea:	0f be c3             	movsx  eax,bl
c00112ed:	52                   	push   edx
c00112ee:	52                   	push   edx
c00112ef:	50                   	push   eax
c00112f0:	56                   	push   esi
c00112f1:	e8 a0 fc ff ff       	call   c0010f96 <VgaText::putchar(char)>
c00112f6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112ff:	59                   	pop    ecx
c0011300:	5d                   	pop    ebp
c0011301:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011305:	50                   	push   eax
c0011306:	57                   	push   edi
c0011307:	e8 78 f6 fe ff       	call   c0000984 <strcat>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011316:	75 05                	jne    c001131d <VgaText::receiveKey(unsigned char)+0x81>
c0011318:	80 fb 0a             	cmp    bl,0xa
c001131b:	75 53                	jne    c0011370 <VgaText::receiveKey(unsigned char)+0xd4>
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011326:	53                   	push   ebx
c0011327:	e8 78 f4 fe ff       	call   c00007a4 <strlen>
c001132c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132f:	89 c5                	mov    ebp,eax
c0011331:	e8 6e f4 fe ff       	call   c00007a4 <strlen>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001133d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011342:	76 10                	jbe    c0011354 <VgaText::receiveKey(unsigned char)+0xb8>
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	68 bf ac 02 c0       	push   0xc002acbf
c001134c:	e8 3e 95 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	50                   	push   eax
c0011355:	50                   	push   eax
c0011356:	57                   	push   edi
c0011357:	53                   	push   ebx
c0011358:	e8 27 f6 fe ff       	call   c0000984 <strcat>
c001135d:	83 c4 0c             	add    esp,0xc
c0011360:	68 96 00 00 00       	push   0x96
c0011365:	6a 00                	push   0x0
c0011367:	57                   	push   edi
c0011368:	e8 1b f4 fe ff       	call   c0000788 <memset>
c001136d:	83 c4 10             	add    esp,0x10
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	56                   	push   esi
c0011374:	e8 3d fa ff ff       	call   c0010db6 <VgaText::doUpdate()>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	83 c4 1c             	add    esp,0x1c
c001137f:	5b                   	pop    ebx
c0011380:	5e                   	pop    esi
c0011381:	5f                   	pop    edi
c0011382:	5d                   	pop    ebp
c0011383:	c3                   	ret    

c0011384 <VgaText::write(unsigned long long, void*, int*)>:
c0011384:	55                   	push   ebp
c0011385:	57                   	push   edi
c0011386:	56                   	push   esi
c0011387:	53                   	push   ebx
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001138f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011393:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011397:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001139e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113a1:	39 eb                	cmp    ebx,ebp
c00113a3:	74 13                	je     c00113b8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113a5:	43                   	inc    ebx
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113ac:	50                   	push   eax
c00113ad:	56                   	push   esi
c00113ae:	e8 e3 fb ff ff       	call   c0010f96 <VgaText::putchar(char)>
c00113b3:	83 c4 10             	add    esp,0x10
c00113b6:	eb e9                	jmp    c00113a1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113c2:	56                   	push   esi
c00113c3:	e8 ee f9 ff ff       	call   c0010db6 <VgaText::doUpdate()>
c00113c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113cc:	89 38                	mov    DWORD PTR [eax],edi
c00113ce:	83 c4 1c             	add    esp,0x1c
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	5b                   	pop    ebx
c00113d4:	5e                   	pop    esi
c00113d5:	5f                   	pop    edi
c00113d6:	5d                   	pop    ebp
c00113d7:	c3                   	ret    

c00113d8 <newTerminal(char*)>:
c00113d8:	83 ec 28             	sub    esp,0x28
c00113db:	68 c4 02 00 00       	push   0x2c4
c00113e0:	e8 37 e5 ff ff       	call   c000f91c <malloc>
c00113e5:	5a                   	pop    edx
c00113e6:	59                   	pop    ecx
c00113e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113eb:	50                   	push   eax
c00113ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113f0:	e8 f9 fc ff ff       	call   c00110ee <VgaText::VgaText(char const*)>
c00113f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f9:	83 c4 2c             	add    esp,0x2c
c00113fc:	c3                   	ret    
c00113fd:	90                   	nop

c00113fe <TSS::TSS()>:
c00113fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011402:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011409:	90                   	nop
c001140a:	c3                   	ret    
c001140b:	90                   	nop

c001140c <TSS::setESP(unsigned long)>:
c001140c:	55                   	push   ebp
c001140d:	89 e5                	mov    ebp,esp
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011415:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011418:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001141b:	90                   	nop
c001141c:	5d                   	pop    ebp
c001141d:	c3                   	ret    

c001141e <TSS::flush()>:
c001141e:	55                   	push   ebp
c001141f:	89 e5                	mov    ebp,esp
c0011421:	83 ec 10             	sub    esp,0x10
c0011424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011427:	8b 00                	mov    eax,DWORD PTR [eax]
c0011429:	83 c8 03             	or     eax,0x3
c001142c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011430:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011434:	66 89 d0             	mov    ax,dx
c0011437:	0f 00 d8             	ltr    ax
c001143a:	90                   	nop
c001143b:	c9                   	leave  
c001143c:	c3                   	ret    
c001143d:	90                   	nop

c001143e <TSS::setup(unsigned long, unsigned long)>:
c001143e:	55                   	push   ebp
c001143f:	89 e5                	mov    ebp,esp
c0011441:	83 ec 18             	sub    esp,0x18
c0011444:	83 ec 0c             	sub    esp,0xc
c0011447:	6a 68                	push   0x68
c0011449:	e8 ce e4 ff ff       	call   c000f91c <malloc>
c001144e:	83 c4 10             	add    esp,0x10
c0011451:	89 c2                	mov    edx,eax
c0011453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011456:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145f:	83 ec 04             	sub    esp,0x4
c0011462:	6a 68                	push   0x68
c0011464:	6a 00                	push   0x0
c0011466:	50                   	push   eax
c0011467:	e8 1c f3 fe ff       	call   c0000788 <memset>
c001146c:	83 c4 10             	add    esp,0x10
c001146f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011475:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001147b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011481:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011490:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011499:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001149f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a5:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b1:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00114b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bd:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114e4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011503:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011506:	0f 20 da             	mov    edx,cr3
c0011509:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001150c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001150f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011515:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	50                   	push   eax
c001151c:	8d 45 ec             	lea    eax,[ebp-0x14]
c001151f:	50                   	push   eax
c0011520:	e8 d3 db ff ff       	call   c000f0f8 <GDTEntry::setBase(unsigned int)>
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	6a 68                	push   0x68
c001152d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011530:	50                   	push   eax
c0011531:	e8 de db ff ff       	call   c000f114 <GDTEntry::setLimit(unsigned int)>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001153d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011540:	83 e0 0f             	and    eax,0xf
c0011543:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011546:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011549:	83 c8 40             	or     eax,0x40
c001154c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001154f:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0011554:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001155a:	05 78 01 00 00       	add    eax,0x178
c001155f:	83 ec 04             	sub    esp,0x4
c0011562:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011565:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011568:	50                   	push   eax
c0011569:	e8 da db ff ff       	call   c000f148 <GDT::addEntry(GDTEntry)>
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	89 c2                	mov    edx,eax
c0011573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011576:	89 10                	mov    DWORD PTR [eax],edx
c0011578:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001157d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011583:	05 78 01 00 00       	add    eax,0x178
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	50                   	push   eax
c001158c:	e8 fb db ff ff       	call   c000f18c <GDT::flush()>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011597:	8b 00                	mov    eax,DWORD PTR [eax]
c0011599:	83 ec 08             	sub    esp,0x8
c001159c:	50                   	push   eax
c001159d:	68 28 ad 02 c0       	push   0xc002ad28
c00115a2:	e8 2c 19 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00115af:	c9                   	leave  
c00115b0:	c3                   	ret    
c00115b1:	90                   	nop

c00115b2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115c2:	75 08                	jne    c00115cc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00115c4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115ca:	eb 38                	jmp    c0011604 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00115cc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115d1:	75 17                	jne    c00115ea <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00115d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115db:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00115e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115e7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115ea:	89 c1                	mov    ecx,eax
c00115ec:	83 e1 fd             	and    ecx,0xfffffffd
c00115ef:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115f5:	74 cd                	je     c00115c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115f7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115fc:	83 e0 ef             	and    eax,0xffffffef
c00115ff:	83 f8 08             	cmp    eax,0x8
c0011602:	76 c0                	jbe    c00115c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011604:	31 c0                	xor    eax,eax
c0011606:	c3                   	ret    
c0011607:	90                   	nop

c0011608 <ReservedFilename::isAtty()>:
c0011608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001160f:	31 c0                	xor    eax,eax
c0011611:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011617:	74 09                	je     c0011622 <ReservedFilename::isAtty()+0x1a>
c0011619:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001161f:	0f 94 c0             	sete   al
c0011622:	c3                   	ret    
c0011623:	90                   	nop

c0011624 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011628:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001162c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011633:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011638:	75 08                	jne    c0011642 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001163a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011640:	eb 3d                	jmp    c001167f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011642:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011647:	75 17                	jne    c0011660 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011651:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011657:	8b 10                	mov    edx,DWORD PTR [eax]
c0011659:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001165d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011660:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011665:	75 04                	jne    c001166b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011667:	89 0a                	mov    DWORD PTR [edx],ecx
c0011669:	eb 14                	jmp    c001167f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001166b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011670:	74 c8                	je     c001163a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011672:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011677:	83 e0 ef             	and    eax,0xffffffef
c001167a:	83 f8 08             	cmp    eax,0x8
c001167d:	76 bb                	jbe    c001163a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001167f:	31 c0                	xor    eax,eax
c0011681:	c3                   	ret    

c0011682 <UnixFile::getFileDescriptor()>:
c0011682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011686:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011689:	c3                   	ret    

c001168a <UnixFile::UnixFile(int)>:
c001168a:	53                   	push   ebx
c001168b:	83 ec 28             	sub    esp,0x28
c001168e:	ba 14 ae 02 c0       	mov    edx,0xc002ae14
c0011693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011697:	89 10                	mov    DWORD PTR [eax],edx
c0011699:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116a1:	0f 8f 8c 01 00 00    	jg     c0011833 <UnixFile::UnixFile(int)+0x1a9>
c00116a7:	a1 c0 dd 02 c0       	mov    eax,ds:0xc002ddc0
c00116ac:	8d 50 01             	lea    edx,[eax+0x1]
c00116af:	89 15 c0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc0,edx
c00116b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116bc:	83 ec 08             	sub    esp,0x8
c00116bf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00116c3:	68 98 ef 02 c0       	push   0xc002ef98
c00116c8:	e8 5f 78 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	a0 94 ef 02 c0       	mov    al,ds:0xc002ef94
c00116d5:	83 f0 01             	xor    eax,0x1
c00116d8:	84 c0                	test   al,al
c00116da:	0f 84 54 01 00 00    	je     c0011834 <UnixFile::UnixFile(int)+0x1aa>
c00116e0:	c6 05 94 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef94,0x1
c00116e7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116ef:	83 ec 0c             	sub    esp,0xc
c00116f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116f6:	e8 21 e2 ff ff       	call   c000f91c <malloc>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	89 c3                	mov    ebx,eax
c0011700:	83 ec 08             	sub    esp,0x8
c0011703:	68 03 ff ff 0f       	push   0xfffff03
c0011708:	53                   	push   ebx
c0011709:	e8 2c 01 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	89 1d 8c ef 02 c0    	mov    DWORD PTR ds:0xc002ef8c,ebx
c0011717:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011726:	e8 f1 e1 ff ff       	call   c000f91c <malloc>
c001172b:	83 c4 10             	add    esp,0x10
c001172e:	89 c3                	mov    ebx,eax
c0011730:	83 ec 08             	sub    esp,0x8
c0011733:	68 01 ff ff 0f       	push   0xfffff01
c0011738:	53                   	push   ebx
c0011739:	e8 fc 00 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	89 1d 90 ef 02 c0    	mov    DWORD PTR ds:0xc002ef90,ebx
c0011747:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001174f:	83 ec 0c             	sub    esp,0xc
c0011752:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011756:	e8 c1 e1 ff ff       	call   c000f91c <malloc>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	89 c3                	mov    ebx,eax
c0011760:	83 ec 08             	sub    esp,0x8
c0011763:	68 00 ff ff 0f       	push   0xfffff00
c0011768:	53                   	push   ebx
c0011769:	e8 cc 00 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	89 1d 84 ef 02 c0    	mov    DWORD PTR ds:0xc002ef84,ebx
c0011777:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001177f:	83 ec 0c             	sub    esp,0xc
c0011782:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011786:	e8 91 e1 ff ff       	call   c000f91c <malloc>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	89 c3                	mov    ebx,eax
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	68 02 ff ff 0f       	push   0xfffff02
c0011798:	53                   	push   ebx
c0011799:	e8 9c 00 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	89 1d 88 ef 02 c0    	mov    DWORD PTR ds:0xc002ef88,ebx
c00117a7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117af:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00117b4:	7f 7e                	jg     c0011834 <UnixFile::UnixFile(int)+0x1aa>
c00117b6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00117be:	83 ec 0c             	sub    esp,0xc
c00117c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117c5:	e8 52 e1 ff ff       	call   c000f91c <malloc>
c00117ca:	83 c4 10             	add    esp,0x10
c00117cd:	89 c3                	mov    ebx,eax
c00117cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117d3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	50                   	push   eax
c00117dc:	53                   	push   ebx
c00117dd:	e8 58 00 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117e9:	89 1c 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],ebx
c00117f0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117f8:	83 ec 0c             	sub    esp,0xc
c00117fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ff:	e8 18 e1 ff ff       	call   c000f91c <malloc>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	89 c3                	mov    ebx,eax
c0011809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001180d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011812:	83 ec 08             	sub    esp,0x8
c0011815:	50                   	push   eax
c0011816:	53                   	push   ebx
c0011817:	e8 1e 00 00 00       	call   c001183a <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011823:	89 1c 85 20 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10e0],ebx
c001182a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001182e:	e9 7c ff ff ff       	jmp    c00117af <UnixFile::UnixFile(int)+0x125>
c0011833:	90                   	nop
c0011834:	83 c4 28             	add    esp,0x28
c0011837:	5b                   	pop    ebx
c0011838:	c3                   	ret    
c0011839:	90                   	nop

c001183a <ReservedFilename::ReservedFilename(int)>:
c001183a:	83 ec 0c             	sub    esp,0xc
c001183d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011841:	83 ec 08             	sub    esp,0x8
c0011844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011848:	50                   	push   eax
c0011849:	e8 3c fe ff ff       	call   c001168a <UnixFile::UnixFile(int)>
c001184e:	83 c4 10             	add    esp,0x10
c0011851:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	89 10                	mov    DWORD PTR [eax],edx
c001185c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011860:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011864:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011867:	90                   	nop
c0011868:	83 c4 0c             	add    esp,0xc
c001186b:	c3                   	ret    

c001186c <UnixFile::~UnixFile()>:
c001186c:	83 ec 1c             	sub    esp,0x1c
c001186f:	ba 14 ae 02 c0       	mov    edx,0xc002ae14
c0011874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011878:	89 10                	mov    DWORD PTR [eax],edx
c001187a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001187e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011881:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011886:	7f 73                	jg     c00118fb <UnixFile::~UnixFile()+0x8f>
c0011888:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	68 98 ef 02 c0       	push   0xc002ef98
c0011898:	e8 63 77 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	68 98 ef 02 c0       	push   0xc002ef98
c00118ac:	e8 57 77 01 00       	call   c0029008 <LinkedList<UnixFile>::removeFirst()>
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118b8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00118bc:	74 40                	je     c00118fe <UnixFile::~UnixFile()+0x92>
c00118be:	83 ec 08             	sub    esp,0x8
c00118c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118c5:	68 98 ef 02 c0       	push   0xc002ef98
c00118ca:	e8 5d 76 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d6:	8d 50 01             	lea    edx,[eax+0x1]
c00118d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118dd:	3d 88 13 00 00       	cmp    eax,0x1388
c00118e2:	0f 94 c0             	sete   al
c00118e5:	84 c0                	test   al,al
c00118e7:	74 a7                	je     c0011890 <UnixFile::~UnixFile()+0x24>
c00118e9:	83 ec 0c             	sub    esp,0xc
c00118ec:	68 ec ad 02 c0       	push   0xc002adec
c00118f1:	e8 99 8f 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00118f6:	83 c4 10             	add    esp,0x10
c00118f9:	eb 95                	jmp    c0011890 <UnixFile::~UnixFile()+0x24>
c00118fb:	90                   	nop
c00118fc:	eb 01                	jmp    c00118ff <UnixFile::~UnixFile()+0x93>
c00118fe:	90                   	nop
c00118ff:	90                   	nop
c0011900:	83 c4 1c             	add    esp,0x1c
c0011903:	c3                   	ret    

c0011904 <UnixFile::~UnixFile()>:
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	83 ec 0c             	sub    esp,0xc
c001190a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190e:	e8 59 ff ff ff       	call   c001186c <UnixFile::~UnixFile()>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	83 ec 08             	sub    esp,0x8
c0011919:	6a 0c                	push   0xc
c001191b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191f:	e8 cf 14 00 00       	call   c0012df3 <operator delete(void*, unsigned long)>
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	83 c4 0c             	add    esp,0xc
c001192a:	c3                   	ret    
c001192b:	90                   	nop

c001192c <ReservedFilename::~ReservedFilename()>:
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	89 10                	mov    DWORD PTR [eax],edx
c001193a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	50                   	push   eax
c0011942:	e8 25 ff ff ff       	call   c001186c <UnixFile::~UnixFile()>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	90                   	nop
c001194b:	83 c4 0c             	add    esp,0xc
c001194e:	c3                   	ret    
c001194f:	90                   	nop

c0011950 <ReservedFilename::~ReservedFilename()>:
c0011950:	83 ec 0c             	sub    esp,0xc
c0011953:	83 ec 0c             	sub    esp,0xc
c0011956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195a:	e8 cd ff ff ff       	call   c001192c <ReservedFilename::~ReservedFilename()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	83 ec 08             	sub    esp,0x8
c0011965:	6a 0c                	push   0xc
c0011967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001196b:	e8 83 14 00 00       	call   c0012df3 <operator delete(void*, unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	83 c4 0c             	add    esp,0xc
c0011976:	c3                   	ret    

c0011977 <getFromFileDescriptor(int)>:
c0011977:	53                   	push   ebx
c0011978:	83 ec 08             	sub    esp,0x8
c001197b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001197f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011985:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001198b:	7f 2c                	jg     c00119b9 <getFromFileDescriptor(int)+0x42>
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	68 98 ef 02 c0       	push   0xc002ef98
c0011995:	e8 66 76 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	85 c0                	test   eax,eax
c001199f:	75 04                	jne    c00119a5 <getFromFileDescriptor(int)+0x2e>
c00119a1:	31 c0                	xor    eax,eax
c00119a3:	eb 6e                	jmp    c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119a5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119a8:	74 69                	je     c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119aa:	52                   	push   edx
c00119ab:	52                   	push   edx
c00119ac:	50                   	push   eax
c00119ad:	68 98 ef 02 c0       	push   0xc002ef98
c00119b2:	e8 f3 76 01 00       	call   c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>
c00119b7:	eb e1                	jmp    c001199a <getFromFileDescriptor(int)+0x23>
c00119b9:	a1 8c ef 02 c0       	mov    eax,ds:0xc002ef8c
c00119be:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00119c4:	74 4d                	je     c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119c6:	a1 90 ef 02 c0       	mov    eax,ds:0xc002ef90
c00119cb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00119d1:	74 40                	je     c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119d3:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c00119d8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119de:	74 33                	je     c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119e0:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c00119e5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119eb:	74 26                	je     c0011a13 <getFromFileDescriptor(int)+0x9c>
c00119ed:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119f3:	83 f8 08             	cmp    eax,0x8
c00119f6:	77 09                	ja     c0011a01 <getFromFileDescriptor(int)+0x8a>
c00119f8:	8b 04 85 60 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10a0]
c00119ff:	eb 12                	jmp    c0011a13 <getFromFileDescriptor(int)+0x9c>
c0011a01:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a07:	83 fb 08             	cmp    ebx,0x8
c0011a0a:	77 95                	ja     c00119a1 <getFromFileDescriptor(int)+0x2a>
c0011a0c:	8b 04 9d 20 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10e0]
c0011a13:	83 c4 08             	add    esp,0x8
c0011a16:	5b                   	pop    ebx
c0011a17:	c3                   	ret    

c0011a18 <__static_initialization_and_destruction_0(int, int)>:
c0011a18:	83 ec 0c             	sub    esp,0xc
c0011a1b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a20:	75 34                	jne    c0011a56 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a22:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a2a:	75 2a                	jne    c0011a56 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a2c:	83 ec 0c             	sub    esp,0xc
c0011a2f:	68 98 ef 02 c0       	push   0xc002ef98
c0011a34:	e8 9b 74 01 00       	call   c0028ed4 <LinkedList<UnixFile>::LinkedList()>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	83 ec 04             	sub    esp,0x4
c0011a3f:	68 50 dd 02 c0       	push   0xc002dd50
c0011a44:	68 98 ef 02 c0       	push   0xc002ef98
c0011a49:	68 d2 8e 02 c0       	push   0xc0028ed2
c0011a4e:	e8 1a 13 00 00       	call   c0012d6d <__cxa_atexit>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	90                   	nop
c0011a57:	83 c4 0c             	add    esp,0xc
c0011a5a:	c3                   	ret    

c0011a5b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a5b:	83 ec 0c             	sub    esp,0xc
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	68 ff ff 00 00       	push   0xffff
c0011a66:	6a 01                	push   0x1
c0011a68:	e8 ab ff ff ff       	call   c0011a18 <__static_initialization_and_destruction_0(int, int)>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	83 c4 0c             	add    esp,0xc
c0011a73:	c3                   	ret    

c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a74:	53                   	push   ebx
c0011a75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a7d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a83:	89 c8                	mov    eax,ecx
c0011a85:	d1 e8                	shr    eax,1
c0011a87:	03 05 c8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddc8
c0011a8d:	83 e1 01             	and    ecx,0x1
c0011a90:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a92:	75 09                	jne    c0011a9d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a94:	83 e2 f0             	and    edx,0xfffffff0
c0011a97:	09 da                	or     edx,ebx
c0011a99:	88 10                	mov    BYTE PTR [eax],dl
c0011a9b:	5b                   	pop    ebx
c0011a9c:	c3                   	ret    
c0011a9d:	c1 e3 04             	shl    ebx,0x4
c0011aa0:	83 e2 0f             	and    edx,0xf
c0011aa3:	09 da                	or     edx,ebx
c0011aa5:	88 10                	mov    BYTE PTR [eax],dl
c0011aa7:	5b                   	pop    ebx
c0011aa8:	c3                   	ret    

c0011aa9 <Virt::getPageState(unsigned long)>:
c0011aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aad:	8b 0d c8 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddc8
c0011ab3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ab9:	89 d0                	mov    eax,edx
c0011abb:	d1 e8                	shr    eax,1
c0011abd:	83 e2 01             	and    edx,0x1
c0011ac0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011ac3:	75 04                	jne    c0011ac9 <Virt::getPageState(unsigned long)+0x20>
c0011ac5:	83 e0 0f             	and    eax,0xf
c0011ac8:	c3                   	ret    
c0011ac9:	c0 e8 04             	shr    al,0x4
c0011acc:	c3                   	ret    

c0011acd <Virt::allocateKernelVirtualPages(int)>:
c0011acd:	55                   	push   ebp
c0011ace:	31 ed                	xor    ebp,ebp
c0011ad0:	57                   	push   edi
c0011ad1:	56                   	push   esi
c0011ad2:	53                   	push   ebx
c0011ad3:	31 db                	xor    ebx,ebx
c0011ad5:	83 ec 1c             	sub    esp,0x1c
c0011ad8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011adc:	8b 3d c4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddc4
c0011ae2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ae7:	57                   	push   edi
c0011ae8:	e8 bc ff ff ff       	call   c0011aa9 <Virt::getPageState(unsigned long)>
c0011aed:	5a                   	pop    edx
c0011aee:	84 c0                	test   al,al
c0011af0:	75 3a                	jne    c0011b2c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011af2:	85 db                	test   ebx,ebx
c0011af4:	75 02                	jne    c0011af8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011af6:	89 fd                	mov    ebp,edi
c0011af8:	43                   	inc    ebx
c0011af9:	39 f3                	cmp    ebx,esi
c0011afb:	74 5a                	je     c0011b57 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011afd:	47                   	inc    edi
c0011afe:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b04:	76 31                	jbe    c0011b37 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b06:	c7 05 c4 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ddc4,0xc8000
c0011b10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b15:	75 28                	jne    c0011b3f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b17:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b1c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b21:	57                   	push   edi
c0011b22:	e8 82 ff ff ff       	call   c0011aa9 <Virt::getPageState(unsigned long)>
c0011b27:	5a                   	pop    edx
c0011b28:	84 c0                	test   al,al
c0011b2a:	74 c6                	je     c0011af2 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b2c:	31 db                	xor    ebx,ebx
c0011b2e:	47                   	inc    edi
c0011b2f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b35:	77 cf                	ja     c0011b06 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b37:	89 3d c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,edi
c0011b3d:	eb a8                	jmp    c0011ae7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b3f:	83 ec 0c             	sub    esp,0xc
c0011b42:	68 44 ae 02 c0       	push   0xc002ae44
c0011b47:	e8 43 8d 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011b4c:	8b 3d c4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddc4
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	eb 90                	jmp    c0011ae7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b57:	89 2d c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,ebp
c0011b5d:	4b                   	dec    ebx
c0011b5e:	74 5f                	je     c0011bbf <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b60:	85 f6                	test   esi,esi
c0011b62:	74 3d                	je     c0011ba1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b64:	89 e8                	mov    eax,ebp
c0011b66:	31 db                	xor    ebx,ebx
c0011b68:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b6b:	eb 14                	jmp    c0011b81 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b6d:	6a 01                	push   0x1
c0011b6f:	43                   	inc    ebx
c0011b70:	50                   	push   eax
c0011b71:	e8 fe fe ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b76:	58                   	pop    eax
c0011b77:	39 f3                	cmp    ebx,esi
c0011b79:	5a                   	pop    edx
c0011b7a:	74 25                	je     c0011ba1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b7c:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c0011b81:	8d 50 01             	lea    edx,[eax+0x1]
c0011b84:	85 db                	test   ebx,ebx
c0011b86:	89 15 c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,edx
c0011b8c:	74 20                	je     c0011bae <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b8e:	39 df                	cmp    edi,ebx
c0011b90:	75 db                	jne    c0011b6d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b92:	6a 03                	push   0x3
c0011b94:	43                   	inc    ebx
c0011b95:	50                   	push   eax
c0011b96:	e8 d9 fe ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b9b:	59                   	pop    ecx
c0011b9c:	39 f3                	cmp    ebx,esi
c0011b9e:	58                   	pop    eax
c0011b9f:	75 db                	jne    c0011b7c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ba1:	83 c4 1c             	add    esp,0x1c
c0011ba4:	89 e8                	mov    eax,ebp
c0011ba6:	5b                   	pop    ebx
c0011ba7:	c1 e0 0c             	shl    eax,0xc
c0011baa:	5e                   	pop    esi
c0011bab:	5f                   	pop    edi
c0011bac:	5d                   	pop    ebp
c0011bad:	c3                   	ret    
c0011bae:	6a 02                	push   0x2
c0011bb0:	bb 01 00 00 00       	mov    ebx,0x1
c0011bb5:	50                   	push   eax
c0011bb6:	e8 b9 fe ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bbb:	58                   	pop    eax
c0011bbc:	5a                   	pop    edx
c0011bbd:	eb bd                	jmp    c0011b7c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bbf:	6a 04                	push   0x4
c0011bc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0011bc4:	55                   	push   ebp
c0011bc5:	a3 c4 dd 02 c0       	mov    ds:0xc002ddc4,eax
c0011bca:	e8 a5 fe ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bcf:	59                   	pop    ecx
c0011bd0:	89 e8                	mov    eax,ebp
c0011bd2:	5b                   	pop    ebx
c0011bd3:	c1 e0 0c             	shl    eax,0xc
c0011bd6:	83 c4 1c             	add    esp,0x1c
c0011bd9:	5b                   	pop    ebx
c0011bda:	5e                   	pop    esi
c0011bdb:	5f                   	pop    edi
c0011bdc:	5d                   	pop    ebp
c0011bdd:	c3                   	ret    

c0011bde <Virt::freeSwapfilePage(unsigned long)>:
c0011bde:	53                   	push   ebx
c0011bdf:	8b 15 ac ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efac
c0011be5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011be9:	b8 01 00 00 00       	mov    eax,0x1
c0011bee:	89 cb                	mov    ebx,ecx
c0011bf0:	d3 e0                	shl    eax,cl
c0011bf2:	c1 eb 05             	shr    ebx,0x5
c0011bf5:	f7 d0                	not    eax
c0011bf7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bfa:	5b                   	pop    ebx
c0011bfb:	c3                   	ret    

c0011bfc <Virt::swapIDToSector(unsigned long)>:
c0011bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c00:	0f af 05 cc dd 02 c0 	imul   eax,DWORD PTR ds:0xc002ddcc
c0011c07:	03 05 d4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddd4
c0011c0d:	c3                   	ret    

c0011c0e <Virt::allocateSwapfilePage()>:
c0011c0e:	55                   	push   ebp
c0011c0f:	31 d2                	xor    edx,edx
c0011c11:	57                   	push   edi
c0011c12:	56                   	push   esi
c0011c13:	53                   	push   ebx
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	8b 0d cc dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddcc
c0011c1d:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011c22:	f7 f1                	div    ecx
c0011c24:	39 0d d0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddd0,ecx
c0011c2a:	72 2d                	jb     c0011c59 <Virt::allocateSwapfilePage()+0x4b>
c0011c2c:	8b 35 ac ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efac
c0011c32:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c34:	f6 c2 01             	test   dl,0x1
c0011c37:	74 3c                	je     c0011c75 <Virt::allocateSwapfilePage()+0x67>
c0011c39:	31 c9                	xor    ecx,ecx
c0011c3b:	bf 01 00 00 00       	mov    edi,0x1
c0011c40:	eb 12                	jmp    c0011c54 <Virt::allocateSwapfilePage()+0x46>
c0011c42:	89 fd                	mov    ebp,edi
c0011c44:	89 ca                	mov    edx,ecx
c0011c46:	d3 e5                	shl    ebp,cl
c0011c48:	c1 ea 05             	shr    edx,0x5
c0011c4b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c50:	85 ea                	test   edx,ebp
c0011c52:	74 2a                	je     c0011c7e <Virt::allocateSwapfilePage()+0x70>
c0011c54:	41                   	inc    ecx
c0011c55:	39 c8                	cmp    eax,ecx
c0011c57:	77 e9                	ja     c0011c42 <Virt::allocateSwapfilePage()+0x34>
c0011c59:	83 ec 0c             	sub    esp,0xc
c0011c5c:	68 cb af 02 c0       	push   0xc002afcb
c0011c61:	e8 29 8c 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	31 c9                	xor    ecx,ecx
c0011c6b:	83 c4 0c             	add    esp,0xc
c0011c6e:	89 c8                	mov    eax,ecx
c0011c70:	5b                   	pop    ebx
c0011c71:	5e                   	pop    esi
c0011c72:	5f                   	pop    edi
c0011c73:	5d                   	pop    ebp
c0011c74:	c3                   	ret    
c0011c75:	89 f3                	mov    ebx,esi
c0011c77:	bd 01 00 00 00       	mov    ebp,0x1
c0011c7c:	31 c9                	xor    ecx,ecx
c0011c7e:	09 ea                	or     edx,ebp
c0011c80:	89 c8                	mov    eax,ecx
c0011c82:	89 13                	mov    DWORD PTR [ebx],edx
c0011c84:	83 c4 0c             	add    esp,0xc
c0011c87:	5b                   	pop    ebx
c0011c88:	5e                   	pop    esi
c0011c89:	5f                   	pop    edi
c0011c8a:	5d                   	pop    ebp
c0011c8b:	c3                   	ret    

c0011c8c <Virt::virtualMemorySetup()>:
c0011c8c:	53                   	push   ebx
c0011c8d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c92:	83 ec 08             	sub    esp,0x8
c0011c95:	6a 0f                	push   0xf
c0011c97:	53                   	push   ebx
c0011c98:	43                   	inc    ebx
c0011c99:	e8 d6 fd ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c9e:	59                   	pop    ecx
c0011c9f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ca5:	58                   	pop    eax
c0011ca6:	75 ed                	jne    c0011c95 <Virt::virtualMemorySetup()+0x9>
c0011ca8:	83 ec 08             	sub    esp,0x8
c0011cab:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cb0:	68 00 00 00 c8       	push   0xc8000000
c0011cb5:	68 e2 af 02 c0       	push   0xc002afe2
c0011cba:	e8 14 12 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011cbf:	58                   	pop    eax
c0011cc0:	5a                   	pop    edx
c0011cc1:	68 00 f0 ff ef       	push   0xeffff000
c0011cc6:	68 f6 af 02 c0       	push   0xc002aff6
c0011ccb:	e8 03 12 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	83 ec 08             	sub    esp,0x8
c0011cd6:	6a 00                	push   0x0
c0011cd8:	53                   	push   ebx
c0011cd9:	43                   	inc    ebx
c0011cda:	e8 95 fd ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ce8:	75 e9                	jne    c0011cd3 <Virt::virtualMemorySetup()+0x47>
c0011cea:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011cef:	83 ec 08             	sub    esp,0x8
c0011cf2:	6a 0f                	push   0xf
c0011cf4:	53                   	push   ebx
c0011cf5:	43                   	inc    ebx
c0011cf6:	e8 79 fd ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d04:	75 e9                	jne    c0011cef <Virt::virtualMemorySetup()+0x63>
c0011d06:	83 c4 08             	add    esp,0x8
c0011d09:	5b                   	pop    ebx
c0011d0a:	c3                   	ret    

c0011d0b <Virt::swappingSetup()>:
c0011d0b:	c3                   	ret    

c0011d0c <Virt::setupPageSwapping(int)>:
c0011d0c:	57                   	push   edi
c0011d0d:	56                   	push   esi
c0011d0e:	53                   	push   ebx
c0011d0f:	83 ec 1c             	sub    esp,0x1c
c0011d12:	68 0a b0 02 c0       	push   0xc002b00a
c0011d17:	e8 b7 11 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011d1c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d23:	e8 f4 db ff ff       	call   c000f91c <malloc>
c0011d28:	83 c4 0c             	add    esp,0xc
c0011d2b:	89 c6                	mov    esi,eax
c0011d2d:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c0011d33:	68 1e b0 02 c0       	push   0xc002b01e
c0011d38:	50                   	push   eax
c0011d39:	e8 f4 16 00 00       	call   c0013432 <File::File(char const*, Process*)>
c0011d3e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d41:	e8 c8 18 00 00       	call   c001360e <File::unlink()>
c0011d46:	59                   	pop    ecx
c0011d47:	5b                   	pop    ebx
c0011d48:	6a 12                	push   0x12
c0011d4a:	56                   	push   esi
c0011d4b:	e8 46 17 00 00       	call   c0013496 <File::open(FileOpenMode)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	85 c0                	test   eax,eax
c0011d55:	0f 85 5b 01 00 00    	jne    c0011eb6 <Virt::setupPageSwapping(int)+0x1aa>
c0011d5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d67:	c1 e3 08             	shl    ebx,0x8
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 00 00 01 00       	push   0x10000
c0011d72:	e8 a5 db ff ff       	call   c000f91c <malloc>
c0011d77:	83 c4 0c             	add    esp,0xc
c0011d7a:	89 c7                	mov    edi,eax
c0011d7c:	68 00 00 01 00       	push   0x10000
c0011d81:	68 ee 00 00 00       	push   0xee
c0011d86:	50                   	push   eax
c0011d87:	e8 fc e9 fe ff       	call   c0000788 <memset>
c0011d8c:	83 c4 10             	add    esp,0x10
c0011d8f:	85 db                	test   ebx,ebx
c0011d91:	79 03                	jns    c0011d96 <Virt::setupPageSwapping(int)+0x8a>
c0011d93:	83 c3 0f             	add    ebx,0xf
c0011d96:	c1 fb 04             	sar    ebx,0x4
c0011d99:	4b                   	dec    ebx
c0011d9a:	83 fb ff             	cmp    ebx,0xffffffff
c0011d9d:	74 4f                	je     c0011dee <Virt::setupPageSwapping(int)+0xe2>
c0011d9f:	83 ec 0c             	sub    esp,0xc
c0011da2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011da8:	52                   	push   edx
c0011da9:	57                   	push   edi
c0011daa:	6a 00                	push   0x0
c0011dac:	68 00 00 01 00       	push   0x10000
c0011db1:	56                   	push   esi
c0011db2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011db5:	83 c4 20             	add    esp,0x20
c0011db8:	85 c0                	test   eax,eax
c0011dba:	0f 85 e0 00 00 00    	jne    c0011ea0 <Virt::setupPageSwapping(int)+0x194>
c0011dc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dc4:	3d 00 00 01 00       	cmp    eax,0x10000
c0011dc9:	74 ce                	je     c0011d99 <Virt::setupPageSwapping(int)+0x8d>
c0011dcb:	83 ec 08             	sub    esp,0x8
c0011dce:	4b                   	dec    ebx
c0011dcf:	50                   	push   eax
c0011dd0:	68 71 b0 02 c0       	push   0xc002b071
c0011dd5:	e8 f9 10 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011dda:	c7 04 24 7a b0 02 c0 	mov    DWORD PTR [esp],0xc002b07a
c0011de1:	e8 a9 8a 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	83 fb ff             	cmp    ebx,0xffffffff
c0011dec:	75 b1                	jne    c0011d9f <Virt::setupPageSwapping(int)+0x93>
c0011dee:	83 ec 0c             	sub    esp,0xc
c0011df1:	56                   	push   esi
c0011df2:	e8 fd 16 00 00       	call   c00134f4 <File::close()>
c0011df7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dfa:	e8 3d db ff ff       	call   c000f93c <rfree>
c0011dff:	83 c4 10             	add    esp,0x10
c0011e02:	85 f6                	test   esi,esi
c0011e04:	74 0c                	je     c0011e12 <Virt::setupPageSwapping(int)+0x106>
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e0b:	56                   	push   esi
c0011e0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	83 ec 08             	sub    esp,0x8
c0011e15:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0011e1a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011e20:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e22:	68 1e b0 02 c0       	push   0xc002b01e
c0011e27:	50                   	push   eax
c0011e28:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011e2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e2f:	c6 05 d8 dd 02 c0 43 	mov    BYTE PTR ds:0xc002ddd8,0x43
c0011e36:	c1 e2 0b             	shl    edx,0xb
c0011e39:	a3 d4 dd 02 c0       	mov    ds:0xc002ddd4,eax
c0011e3e:	89 15 d0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddd0,edx
c0011e44:	c7 05 cc dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x8
c0011e4e:	c1 ea 08             	shr    edx,0x8
c0011e51:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e54:	e8 c3 da ff ff       	call   c000f91c <malloc>
c0011e59:	83 c4 0c             	add    esp,0xc
c0011e5c:	89 c1                	mov    ecx,eax
c0011e5e:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c0011e63:	31 d2                	xor    edx,edx
c0011e65:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011e6a:	f7 35 cc dd 02 c0    	div    DWORD PTR ds:0xc002ddcc
c0011e70:	c1 e8 05             	shr    eax,0x5
c0011e73:	50                   	push   eax
c0011e74:	6a 00                	push   0x0
c0011e76:	51                   	push   ecx
c0011e77:	e8 0c e9 fe ff       	call   c0000788 <memset>
c0011e7c:	58                   	pop    eax
c0011e7d:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011e82:	5a                   	pop    edx
c0011e83:	31 d2                	xor    edx,edx
c0011e85:	f7 35 cc dd 02 c0    	div    DWORD PTR ds:0xc002ddcc
c0011e8b:	c1 e8 05             	shr    eax,0x5
c0011e8e:	50                   	push   eax
c0011e8f:	68 80 b0 02 c0       	push   0xc002b080
c0011e94:	e8 3a 10 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011e99:	83 c4 20             	add    esp,0x20
c0011e9c:	5b                   	pop    ebx
c0011e9d:	5e                   	pop    esi
c0011e9e:	5f                   	pop    edi
c0011e9f:	c3                   	ret    
c0011ea0:	83 ec 08             	sub    esp,0x8
c0011ea3:	50                   	push   eax
c0011ea4:	68 59 b0 02 c0       	push   0xc002b059
c0011ea9:	e8 25 10 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	e9 0a ff ff ff       	jmp    c0011dc0 <Virt::setupPageSwapping(int)+0xb4>
c0011eb6:	83 ec 08             	sub    esp,0x8
c0011eb9:	50                   	push   eax
c0011eba:	68 35 b0 02 c0       	push   0xc002b035
c0011ebf:	e8 0f 10 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0011ec4:	c7 04 24 3e b0 02 c0 	mov    DWORD PTR [esp],0xc002b03e
c0011ecb:	e8 bf 89 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	e9 83 fe ff ff       	jmp    c0011d5b <Virt::setupPageSwapping(int)+0x4f>

c0011ed8 <VAS::VAS()>:
c0011ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011edc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ee3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ee7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef2:	a3 b0 ef 02 c0       	mov    ds:0xc002efb0,eax
c0011ef7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011eff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f03:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f11:	90                   	nop
c0011f12:	c3                   	ret    
c0011f13:	90                   	nop

c0011f14 <VAS::VAS(VAS*)>:
c0011f14:	83 ec 0c             	sub    esp,0xc
c0011f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f26:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	68 64 ae 02 c0       	push   0xc002ae64
c0011f35:	e8 55 89 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0011f3a:	83 c4 10             	add    esp,0x10
c0011f3d:	90                   	nop
c0011f3e:	83 c4 0c             	add    esp,0xc
c0011f41:	c3                   	ret    

c0011f42 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f46:	89 c2                	mov    edx,eax
c0011f48:	c1 e8 0a             	shr    eax,0xa
c0011f4b:	c1 ea 16             	shr    edx,0x16
c0011f4e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f53:	19 c9                	sbb    ecx,ecx
c0011f55:	c1 e2 0c             	shl    edx,0xc
c0011f58:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f5e:	25 fc 0f 00 00       	and    eax,0xffc
c0011f63:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f6a:	01 d0                	add    eax,edx
c0011f6c:	c3                   	ret    
c0011f6d:	90                   	nop

c0011f6e <VAS::getPageTableEntry(unsigned long)>:
c0011f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f72:	89 ca                	mov    edx,ecx
c0011f74:	c1 e9 0a             	shr    ecx,0xa
c0011f77:	c1 ea 16             	shr    edx,0x16
c0011f7a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f80:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f86:	c1 e0 0c             	shl    eax,0xc
c0011f89:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f8c:	c3                   	ret    

c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f8d:	57                   	push   edi
c0011f8e:	56                   	push   esi
c0011f8f:	be 01 00 00 00       	mov    esi,0x1
c0011f94:	53                   	push   ebx
c0011f95:	83 ec 10             	sub    esp,0x10
c0011f98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f9c:	c1 eb 0c             	shr    ebx,0xc
c0011f9f:	eb 3f                	jmp    c0011fe0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fa1:	83 ec 08             	sub    esp,0x8
c0011fa4:	57                   	push   edi
c0011fa5:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0011fab:	e8 be ff ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fb5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fb9:	f6 c4 04             	test   ah,0x4
c0011fbc:	75 5f                	jne    c001201d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fbe:	80 fa 04             	cmp    dl,0x4
c0011fc1:	74 78                	je     c001203b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fc3:	80 fa 02             	cmp    dl,0x2
c0011fc6:	0f 84 88 00 00 00    	je     c0012054 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fcc:	80 fa 03             	cmp    dl,0x3
c0011fcf:	0f 84 ad 00 00 00    	je     c0012082 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011fd5:	fe ca                	dec    dl
c0011fd7:	0f 84 92 00 00 00    	je     c001206f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fdd:	43                   	inc    ebx
c0011fde:	31 f6                	xor    esi,esi
c0011fe0:	53                   	push   ebx
c0011fe1:	89 df                	mov    edi,ebx
c0011fe3:	e8 c1 fa ff ff       	call   c0011aa9 <Virt::getPageState(unsigned long)>
c0011fe8:	c1 e7 0c             	shl    edi,0xc
c0011feb:	59                   	pop    ecx
c0011fec:	84 c0                	test   al,al
c0011fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ff2:	75 ad                	jne    c0011fa1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011ff4:	83 ec 0c             	sub    esp,0xc
c0011ff7:	68 9b b0 02 c0       	push   0xc002b09b
c0011ffc:	e8 8e 88 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012001:	58                   	pop    eax
c0012002:	5a                   	pop    edx
c0012003:	57                   	push   edi
c0012004:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001200a:	e8 5f ff ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	8b 00                	mov    eax,DWORD PTR [eax]
c0012014:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012018:	f6 c4 04             	test   ah,0x4
c001201b:	74 c0                	je     c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001201d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012021:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012026:	83 ec 0c             	sub    esp,0xc
c0012029:	50                   	push   eax
c001202a:	e8 cf de ff ff       	call   c000fefe <Phys::freePage(unsigned long)>
c001202f:	83 c4 10             	add    esp,0x10
c0012032:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012036:	80 fa 04             	cmp    dl,0x4
c0012039:	75 88                	jne    c0011fc3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001203b:	89 f0                	mov    eax,esi
c001203d:	84 c0                	test   al,al
c001203f:	75 47                	jne    c0012088 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012041:	c7 44 24 20 88 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae88
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	5b                   	pop    ebx
c001204d:	5e                   	pop    esi
c001204e:	5f                   	pop    edi
c001204f:	e9 3b 88 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c0012054:	89 f0                	mov    eax,esi
c0012056:	84 c0                	test   al,al
c0012058:	75 15                	jne    c001206f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205a:	83 ec 0c             	sub    esp,0xc
c001205d:	68 b7 b0 02 c0       	push   0xc002b0b7
c0012062:	e8 28 88 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	e9 6e ff ff ff       	jmp    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001206f:	83 ec 08             	sub    esp,0x8
c0012072:	6a 00                	push   0x0
c0012074:	53                   	push   ebx
c0012075:	e8 fa f9 ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	e9 5b ff ff ff       	jmp    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012082:	89 f0                	mov    eax,esi
c0012084:	84 c0                	test   al,al
c0012086:	75 15                	jne    c001209d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 00                	push   0x0
c001208d:	53                   	push   ebx
c001208e:	e8 e1 f9 ff ff       	call   c0011a74 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012093:	83 c4 10             	add    esp,0x10
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	5b                   	pop    ebx
c001209a:	5e                   	pop    esi
c001209b:	5f                   	pop    edi
c001209c:	c3                   	ret    
c001209d:	c7 44 24 20 d3 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0d3
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	5b                   	pop    ebx
c00120a9:	5e                   	pop    esi
c00120aa:	5f                   	pop    edi
c00120ab:	e9 df 87 00 00       	jmp    c001a88f <Krnl::panic(char const*)>

c00120b0 <VAS::freeAllocatedPages(unsigned long)>:
c00120b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120b8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120bc:	74 09                	je     c00120c7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120c2:	e9 c6 fe ff ff       	jmp    c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c00120c7:	c7 44 24 04 ac ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aeac
c00120cf:	e9 ff 0d 00 00       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)>

c00120d4 <VAS::virtualToPhysical(unsigned long)>:
c00120d4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120d8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120dc:	e8 8d fe ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c00120e1:	5a                   	pop    edx
c00120e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00120e4:	59                   	pop    ecx
c00120e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ea:	c3                   	ret    
c00120eb:	90                   	nop

c00120ec <VAS::reflagRange(unsigned long, int, int, int)>:
c00120ec:	55                   	push   ebp
c00120ed:	57                   	push   edi
c00120ee:	56                   	push   esi
c00120ef:	53                   	push   ebx
c00120f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120f4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012100:	85 db                	test   ebx,ebx
c0012102:	7e 22                	jle    c0012126 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012104:	c1 e3 0c             	shl    ebx,0xc
c0012107:	01 f3                	add    ebx,esi
c0012109:	56                   	push   esi
c001210a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012110:	55                   	push   ebp
c0012111:	e8 58 fe ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c0012116:	5a                   	pop    edx
c0012117:	59                   	pop    ecx
c0012118:	8b 08                	mov    ecx,DWORD PTR [eax]
c001211a:	21 f9                	and    ecx,edi
c001211c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012120:	39 f3                	cmp    ebx,esi
c0012122:	89 08                	mov    DWORD PTR [eax],ecx
c0012124:	75 e3                	jne    c0012109 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012126:	5b                   	pop    ebx
c0012127:	5e                   	pop    esi
c0012128:	5f                   	pop    edi
c0012129:	5d                   	pop    ebp
c001212a:	c3                   	ret    
c001212b:	90                   	nop

c001212c <VAS::setToWriteCombining(unsigned long, int)>:
c001212c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012137:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001213e:	75 01                	jne    c0012141 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012140:	c3                   	ret    
c0012141:	68 80 00 00 00       	push   0x80
c0012146:	6a ff                	push   0xffffffff
c0012148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012154:	e8 93 ff ff ff       	call   c00120ec <VAS::reflagRange(unsigned long, int, int, int)>
c0012159:	83 c4 14             	add    esp,0x14
c001215c:	c3                   	ret    
c001215d:	90                   	nop

c001215e <VAS::mapOtherVASIn(bool, VAS*)>:
c001215e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012167:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001216a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001216e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012171:	19 c0                	sbb    eax,eax
c0012173:	83 ca 03             	or     edx,0x3
c0012176:	83 e0 fc             	and    eax,0xfffffffc
c0012179:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012180:	0f 20 d8             	mov    eax,cr3
c0012183:	0f 22 d8             	mov    cr3,eax
c0012186:	c3                   	ret    
c0012187:	90                   	nop

c0012188 <VAS::~VAS()>:
c0012188:	83 ec 2c             	sub    esp,0x2c
c001218b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012193:	fa                   	cli    
c0012194:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012199:	40                   	inc    eax
c001219a:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001219f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00121a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121a9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00121b3:	6a 01                	push   0x1
c00121b5:	50                   	push   eax
c00121b6:	e8 a3 ff ff ff       	call   c001215e <VAS::mapOtherVASIn(bool, VAS*)>
c00121bb:	83 c4 0c             	add    esp,0xc
c00121be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121c6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121ce:	0f 8f d4 00 00 00    	jg     c00122a8 <VAS::~VAS()+0x120>
c00121d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121df:	c1 e2 02             	shl    edx,0x2
c00121e2:	01 d0                	add    eax,edx
c00121e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00121e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ee:	83 e0 01             	and    eax,0x1
c00121f1:	0f 84 a8 00 00 00    	je     c001229f <VAS::~VAS()+0x117>
c00121f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121ff:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012207:	7f 72                	jg     c001227b <VAS::~VAS()+0xf3>
c0012209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001220d:	c1 e0 0a             	shl    eax,0xa
c0012210:	89 c2                	mov    edx,eax
c0012212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012216:	01 d0                	add    eax,edx
c0012218:	c1 e0 0c             	shl    eax,0xc
c001221b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001221f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012224:	8b 00                	mov    eax,DWORD PTR [eax]
c0012226:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012229:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012233:	6a 01                	push   0x1
c0012235:	50                   	push   eax
c0012236:	e8 07 fd ff ff       	call   c0011f42 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001223b:	83 c4 0c             	add    esp,0xc
c001223e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012246:	8b 00                	mov    eax,DWORD PTR [eax]
c0012248:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012250:	25 01 04 00 00       	and    eax,0x401
c0012255:	3d 01 04 00 00       	cmp    eax,0x401
c001225a:	75 19                	jne    c0012275 <VAS::~VAS()+0xed>
c001225c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012260:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012265:	83 ec 0c             	sub    esp,0xc
c0012268:	50                   	push   eax
c0012269:	e8 90 dc ff ff       	call   c000fefe <Phys::freePage(unsigned long)>
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012275:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012279:	eb 84                	jmp    c00121ff <VAS::~VAS()+0x77>
c001227b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001227f:	25 00 04 00 00       	and    eax,0x400
c0012284:	74 19                	je     c001229f <VAS::~VAS()+0x117>
c0012286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001228a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	50                   	push   eax
c0012293:	e8 66 dc ff ff       	call   c000fefe <Phys::freePage(unsigned long)>
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001229f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122a3:	e9 1e ff ff ff       	jmp    c00121c6 <VAS::~VAS()+0x3e>
c00122a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122af:	83 ec 0c             	sub    esp,0xc
c00122b2:	50                   	push   eax
c00122b3:	e8 d5 fc ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c00122b8:	83 c4 10             	add    esp,0x10
c00122bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	50                   	push   eax
c00122c6:	e8 33 dc ff ff       	call   c000fefe <Phys::freePage(unsigned long)>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122d6:	c1 e0 02             	shl    eax,0x2
c00122d9:	83 ec 08             	sub    esp,0x8
c00122dc:	50                   	push   eax
c00122dd:	68 d0 ae 02 c0       	push   0xc002aed0
c00122e2:	e8 ec 0b 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00122ef:	48                   	dec    eax
c00122f0:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00122f5:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00122fa:	85 c0                	test   eax,eax
c00122fc:	75 01                	jne    c00122ff <VAS::~VAS()+0x177>
c00122fe:	fb                   	sti    
c00122ff:	90                   	nop
c0012300:	83 c4 2c             	add    esp,0x2c
c0012303:	c3                   	ret    

c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012304:	55                   	push   ebp
c0012305:	57                   	push   edi
c0012306:	56                   	push   esi
c0012307:	53                   	push   ebx
c0012308:	83 ec 1c             	sub    esp,0x1c
c001230b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001230f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012313:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012319:	77 08                	ja     c0012323 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001231b:	0f 20 d8             	mov    eax,cr3
c001231e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012321:	75 47                	jne    c001236a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012323:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012327:	09 d8                	or     eax,ebx
c0012329:	a9 ff 0f 00 00       	test   eax,0xfff
c001232e:	75 57                	jne    c0012387 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012330:	89 de                	mov    esi,ebx
c0012332:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012335:	c1 ee 16             	shr    esi,0x16
c0012338:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001233f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012343:	74 54                	je     c0012399 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012345:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012349:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001234f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012353:	c1 e6 0c             	shl    esi,0xc
c0012356:	c1 eb 0a             	shr    ebx,0xa
c0012359:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001235f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012362:	83 c4 1c             	add    esp,0x1c
c0012365:	5b                   	pop    ebx
c0012366:	5e                   	pop    esi
c0012367:	5f                   	pop    edi
c0012368:	5d                   	pop    ebp
c0012369:	c3                   	ret    
c001236a:	83 ec 0c             	sub    esp,0xc
c001236d:	68 f0 ae 02 c0       	push   0xc002aef0
c0012372:	e8 5c 0b 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001237e:	09 d8                	or     eax,ebx
c0012380:	a9 ff 0f 00 00       	test   eax,0xfff
c0012385:	74 a9                	je     c0012330 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	68 58 af 02 c0       	push   0xc002af58
c001238f:	e8 fb 84 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	eb 97                	jmp    c0012330 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001239d:	e8 e6 db ff ff       	call   c000ff88 <Phys::allocatePage()>
c00123a2:	83 ec 0c             	sub    esp,0xc
c00123a5:	89 c5                	mov    ebp,eax
c00123a7:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c00123ad:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123b1:	6a 01                	push   0x1
c00123b3:	e8 15 f7 ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c00123b8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123bf:	6a 01                	push   0x1
c00123c1:	50                   	push   eax
c00123c2:	55                   	push   ebp
c00123c3:	81 cd 07 04 00 00    	or     ebp,0x407
c00123c9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123cd:	51                   	push   ecx
c00123ce:	e8 27 02 00 00       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123d3:	83 c4 1c             	add    esp,0x1c
c00123d6:	68 00 10 00 00       	push   0x1000
c00123db:	6a 00                	push   0x0
c00123dd:	50                   	push   eax
c00123de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123e2:	e8 a1 e3 fe ff       	call   c0000788 <memset>
c00123e7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123ee:	e8 9a fb ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c00123f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123f7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123fa:	83 c4 10             	add    esp,0x10
c00123fd:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012400:	e9 40 ff ff ff       	jmp    c0012345 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012405:	90                   	nop

c0012406 <VAS::allocatePages(int, int)>:
c0012406:	55                   	push   ebp
c0012407:	57                   	push   edi
c0012408:	56                   	push   esi
c0012409:	53                   	push   ebx
c001240a:	83 ec 1c             	sub    esp,0x1c
c001240d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012411:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012416:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001241c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012422:	83 e0 01             	and    eax,0x1
c0012425:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012429:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001242d:	0f 85 cc 00 00 00    	jne    c00124ff <VAS::allocatePages(int, int)+0xf9>
c0012433:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012436:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001243a:	85 c0                	test   eax,eax
c001243c:	0f 84 a1 00 00 00    	je     c00124e3 <VAS::allocatePages(int, int)+0xdd>
c0012442:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012446:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001244a:	c1 e6 0c             	shl    esi,0xc
c001244d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012451:	85 c0                	test   eax,eax
c0012453:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012456:	7e 33                	jle    c001248b <VAS::allocatePages(int, int)+0x85>
c0012458:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001245c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012460:	81 cd 00 04 00 00    	or     ebp,0x400
c0012466:	e8 1d db ff ff       	call   c000ff88 <Phys::allocatePage()>
c001246b:	55                   	push   ebp
c001246c:	53                   	push   ebx
c001246d:	50                   	push   eax
c001246e:	57                   	push   edi
c001246f:	e8 90 fe ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012474:	83 c4 10             	add    esp,0x10
c0012477:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001247c:	74 03                	je     c0012481 <VAS::allocatePages(int, int)+0x7b>
c001247e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012481:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012487:	39 de                	cmp    esi,ebx
c0012489:	75 db                	jne    c0012466 <VAS::allocatePages(int, int)+0x60>
c001248b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012490:	75 12                	jne    c00124a4 <VAS::allocatePages(int, int)+0x9e>
c0012492:	0f 20 d8             	mov    eax,cr3
c0012495:	0f 22 d8             	mov    cr3,eax
c0012498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249c:	83 c4 1c             	add    esp,0x1c
c001249f:	5b                   	pop    ebx
c00124a0:	5e                   	pop    esi
c00124a1:	5f                   	pop    edi
c00124a2:	5d                   	pop    ebp
c00124a3:	c3                   	ret    
c00124a4:	c1 ee 0a             	shr    esi,0xa
c00124a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124ab:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124b1:	c1 eb 0a             	shr    ebx,0xa
c00124b4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124ba:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124c0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124c6:	39 c3                	cmp    ebx,eax
c00124c8:	77 ce                	ja     c0012498 <VAS::allocatePages(int, int)+0x92>
c00124ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124d3:	39 d8                	cmp    eax,ebx
c00124d5:	73 f3                	jae    c00124ca <VAS::allocatePages(int, int)+0xc4>
c00124d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124db:	83 c4 1c             	add    esp,0x1c
c00124de:	5b                   	pop    ebx
c00124df:	5e                   	pop    esi
c00124e0:	5f                   	pop    edi
c00124e1:	5d                   	pop    ebp
c00124e2:	c3                   	ret    
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	68 7c af 02 c0       	push   0xc002af7c
c00124eb:	e8 9f 83 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00124f0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124f7:	83 c4 10             	add    esp,0x10
c00124fa:	e9 43 ff ff ff       	jmp    c0012442 <VAS::allocatePages(int, int)+0x3c>
c00124ff:	83 ec 0c             	sub    esp,0xc
c0012502:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012506:	e8 c2 f5 ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c001250b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012517:	0f 87 9b 00 00 00    	ja     c00125b8 <VAS::allocatePages(int, int)+0x1b2>
c001251d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012521:	85 d2                	test   edx,edx
c0012523:	7e 3c                	jle    c0012561 <VAS::allocatePages(int, int)+0x15b>
c0012525:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012529:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001252d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012531:	c1 e5 0c             	shl    ebp,0xc
c0012534:	81 ce 00 04 00 00    	or     esi,0x400
c001253a:	01 dd                	add    ebp,ebx
c001253c:	e8 47 da ff ff       	call   c000ff88 <Phys::allocatePage()>
c0012541:	56                   	push   esi
c0012542:	53                   	push   ebx
c0012543:	50                   	push   eax
c0012544:	57                   	push   edi
c0012545:	e8 ba fd ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012552:	74 03                	je     c0012557 <VAS::allocatePages(int, int)+0x151>
c0012554:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012557:	81 c3 00 10 00 00    	add    ebx,0x1000
c001255d:	39 dd                	cmp    ebp,ebx
c001255f:	75 db                	jne    c001253c <VAS::allocatePages(int, int)+0x136>
c0012561:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012566:	0f 84 26 ff ff ff    	je     c0012492 <VAS::allocatePages(int, int)+0x8c>
c001256c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012570:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012574:	89 d3                	mov    ebx,edx
c0012576:	c1 e0 0c             	shl    eax,0xc
c0012579:	c1 eb 0a             	shr    ebx,0xa
c001257c:	01 d0                	add    eax,edx
c001257e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012584:	c1 e8 0a             	shr    eax,0xa
c0012587:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001258d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012592:	2d 00 00 40 00       	sub    eax,0x400000
c0012597:	39 c3                	cmp    ebx,eax
c0012599:	0f 87 f9 fe ff ff    	ja     c0012498 <VAS::allocatePages(int, int)+0x92>
c001259f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a8:	39 d8                	cmp    eax,ebx
c00125aa:	73 f3                	jae    c001259f <VAS::allocatePages(int, int)+0x199>
c00125ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125b0:	83 c4 1c             	add    esp,0x1c
c00125b3:	5b                   	pop    ebx
c00125b4:	5e                   	pop    esi
c00125b5:	5f                   	pop    edi
c00125b6:	5d                   	pop    ebp
c00125b7:	c3                   	ret    
c00125b8:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00125bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125c3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125ca:	0f 84 4d ff ff ff    	je     c001251d <VAS::allocatePages(int, int)+0x117>
c00125d0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125d8:	e9 40 ff ff ff       	jmp    c001251d <VAS::allocatePages(int, int)+0x117>
c00125dd:	90                   	nop

c00125de <VAS::setCPUSpecific(unsigned long)>:
c00125de:	83 ec 0c             	sub    esp,0xc
c00125e1:	6a 05                	push   0x5
c00125e3:	68 00 00 40 c2       	push   0xc2400000
c00125e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125f0:	e8 0f fd ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125f5:	83 c4 1c             	add    esp,0x1c
c00125f8:	c3                   	ret    
c00125f9:	90                   	nop

c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125fa:	55                   	push   ebp
c00125fb:	57                   	push   edi
c00125fc:	56                   	push   esi
c00125fd:	53                   	push   ebx
c00125fe:	83 ec 1c             	sub    esp,0x1c
c0012601:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012606:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001260a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012610:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012614:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001261a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001261e:	83 e0 01             	and    eax,0x1
c0012621:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012625:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012629:	85 c0                	test   eax,eax
c001262b:	7e 39                	jle    c0012666 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001262d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012631:	89 f3                	mov    ebx,esi
c0012633:	c1 e0 0c             	shl    eax,0xc
c0012636:	01 f0                	add    eax,esi
c0012638:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001263c:	55                   	push   ebp
c001263d:	53                   	push   ebx
c001263e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012642:	29 f0                	sub    eax,esi
c0012644:	01 d8                	add    eax,ebx
c0012646:	50                   	push   eax
c0012647:	57                   	push   edi
c0012648:	e8 b7 fc ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012655:	74 03                	je     c001265a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012657:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001265a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012660:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012664:	75 d6                	jne    c001263c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012666:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001266b:	75 10                	jne    c001267d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001266d:	0f 20 d8             	mov    eax,cr3
c0012670:	0f 22 d8             	mov    cr3,eax
c0012673:	83 c4 1c             	add    esp,0x1c
c0012676:	89 f0                	mov    eax,esi
c0012678:	5b                   	pop    ebx
c0012679:	5e                   	pop    esi
c001267a:	5f                   	pop    edi
c001267b:	5d                   	pop    ebp
c001267c:	c3                   	ret    
c001267d:	89 f3                	mov    ebx,esi
c001267f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012683:	c1 eb 0a             	shr    ebx,0xa
c0012686:	c1 e0 0c             	shl    eax,0xc
c0012689:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001268f:	01 f0                	add    eax,esi
c0012691:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012697:	c1 e8 0a             	shr    eax,0xa
c001269a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001269f:	2d 00 00 40 00       	sub    eax,0x400000
c00126a4:	39 c3                	cmp    ebx,eax
c00126a6:	77 cb                	ja     c0012673 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126b1:	39 d8                	cmp    eax,ebx
c00126b3:	73 f3                	jae    c00126a8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126b5:	83 c4 1c             	add    esp,0x1c
c00126b8:	89 f0                	mov    eax,esi
c00126ba:	5b                   	pop    ebx
c00126bb:	5e                   	pop    esi
c00126bc:	5f                   	pop    edi
c00126bd:	5d                   	pop    ebp
c00126be:	c3                   	ret    
c00126bf:	90                   	nop

c00126c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126c0:	55                   	push   ebp
c00126c1:	57                   	push   edi
c00126c2:	56                   	push   esi
c00126c3:	53                   	push   ebx
c00126c4:	83 ec 1c             	sub    esp,0x1c
c00126c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126cf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126d7:	a9 ff 0f 00 00       	test   eax,0xfff
c00126dc:	75 4a                	jne    c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126e5:	c1 eb 16             	shr    ebx,0x16
c00126e8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126ef:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126f3:	74 4d                	je     c0012742 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126fd:	c1 e8 0a             	shr    eax,0xa
c0012700:	80 fa 01             	cmp    dl,0x1
c0012703:	19 d2                	sbb    edx,edx
c0012705:	c1 e3 0c             	shl    ebx,0xc
c0012708:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001270c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012712:	25 fc 0f 00 00       	and    eax,0xffc
c0012717:	01 d8                	add    eax,ebx
c0012719:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012720:	83 c4 1c             	add    esp,0x1c
c0012723:	5b                   	pop    ebx
c0012724:	5e                   	pop    esi
c0012725:	5f                   	pop    edi
c0012726:	5d                   	pop    ebp
c0012727:	c3                   	ret    
c0012728:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001272c:	83 ec 0c             	sub    esp,0xc
c001272f:	68 a8 af 02 c0       	push   0xc002afa8
c0012734:	e8 56 81 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012739:	83 c4 10             	add    esp,0x10
c001273c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012740:	eb 9c                	jmp    c00126de <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012742:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012746:	e8 3d d8 ff ff       	call   c000ff88 <Phys::allocatePage()>
c001274b:	83 ec 0c             	sub    esp,0xc
c001274e:	89 c5                	mov    ebp,eax
c0012750:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c0012756:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001275a:	6a 01                	push   0x1
c001275c:	e8 6c f3 ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0012761:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012768:	6a 01                	push   0x1
c001276a:	50                   	push   eax
c001276b:	55                   	push   ebp
c001276c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012772:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012776:	51                   	push   ecx
c0012777:	e8 7e fe ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	68 00 10 00 00       	push   0x1000
c0012784:	6a 00                	push   0x0
c0012786:	50                   	push   eax
c0012787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001278b:	e8 f8 df fe ff       	call   c0000788 <memset>
c0012790:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012794:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012797:	e8 f1 f7 ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c001279c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a9:	e9 47 ff ff ff       	jmp    c00126f5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00127ae <VAS::VAS(bool)>:
c00127ae:	53                   	push   ebx
c00127af:	83 ec 28             	sub    esp,0x28
c00127b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127db:	e8 a8 d7 ff ff       	call   c000ff88 <Phys::allocatePage()>
c00127e0:	89 c2                	mov    edx,eax
c00127e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127e9:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c00127ef:	83 ec 0c             	sub    esp,0xc
c00127f2:	6a 01                	push   0x1
c00127f4:	e8 d4 f2 ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	89 c2                	mov    edx,eax
c00127fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012805:	83 ec 0c             	sub    esp,0xc
c0012808:	6a 03                	push   0x3
c001280a:	6a 01                	push   0x1
c001280c:	52                   	push   edx
c001280d:	50                   	push   eax
c001280e:	53                   	push   ebx
c001280f:	e8 e6 fd ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012814:	83 c4 20             	add    esp,0x20
c0012817:	89 c2                	mov    edx,eax
c0012819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012820:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012828:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012830:	7f 1c                	jg     c001284e <VAS::VAS(bool)+0xa0>
c0012832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012836:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012839:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001283d:	c1 e2 02             	shl    edx,0x2
c0012840:	01 d0                	add    eax,edx
c0012842:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012848:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001284c:	eb da                	jmp    c0012828 <VAS::VAS(bool)+0x7a>
c001284e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012856:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001285e:	7f 7a                	jg     c00128da <VAS::VAS(bool)+0x12c>
c0012860:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012864:	2d 00 02 00 00       	sub    eax,0x200
c0012869:	c1 e0 0c             	shl    eax,0xc
c001286c:	83 c8 03             	or     eax,0x3
c001286f:	89 c2                	mov    edx,eax
c0012871:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012882:	83 e0 10             	and    eax,0x10
c0012885:	84 c0                	test   al,al
c0012887:	74 07                	je     c0012890 <VAS::VAS(bool)+0xe2>
c0012889:	b8 00 01 00 00       	mov    eax,0x100
c001288e:	eb 05                	jmp    c0012895 <VAS::VAS(bool)+0xe7>
c0012890:	b8 00 00 00 00       	mov    eax,0x0
c0012895:	09 d0                	or     eax,edx
c0012897:	89 c1                	mov    ecx,eax
c0012899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128a4:	c1 e2 02             	shl    edx,0x2
c00128a7:	01 d0                	add    eax,edx
c00128a9:	89 ca                	mov    edx,ecx
c00128ab:	89 10                	mov    DWORD PTR [eax],edx
c00128ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b1:	2d 40 03 00 00       	sub    eax,0x340
c00128b6:	83 f8 7f             	cmp    eax,0x7f
c00128b9:	77 16                	ja     c00128d1 <VAS::VAS(bool)+0x123>
c00128bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128c6:	c1 e2 02             	shl    edx,0x2
c00128c9:	01 d0                	add    eax,edx
c00128cb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128d1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128d5:	e9 7c ff ff ff       	jmp    c0012856 <VAS::VAS(bool)+0xa8>
c00128da:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00128df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128eb:	83 e0 10             	and    eax,0x10
c00128ee:	84 c0                	test   al,al
c00128f0:	74 07                	je     c00128f9 <VAS::VAS(bool)+0x14b>
c00128f2:	b8 03 41 00 00       	mov    eax,0x4103
c00128f7:	eb 05                	jmp    c00128fe <VAS::VAS(bool)+0x150>
c00128f9:	b8 03 40 00 00       	mov    eax,0x4003
c00128fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012902:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012905:	81 c2 20 0c 00 00    	add    edx,0xc20
c001290b:	89 02                	mov    DWORD PTR [edx],eax
c001290d:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012912:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012918:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001291e:	83 ec 08             	sub    esp,0x8
c0012921:	50                   	push   eax
c0012922:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012926:	e8 b3 fc ff ff       	call   c00125de <VAS::setCPUSpecific(unsigned long)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012935:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001293a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012940:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012946:	83 e0 10             	and    eax,0x10
c0012949:	84 c0                	test   al,al
c001294b:	74 07                	je     c0012954 <VAS::VAS(bool)+0x1a6>
c001294d:	b8 00 01 00 00       	mov    eax,0x100
c0012952:	eb 05                	jmp    c0012959 <VAS::VAS(bool)+0x1ab>
c0012954:	b8 00 00 00 00       	mov    eax,0x0
c0012959:	09 c2                	or     edx,eax
c001295b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001295f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012962:	05 fc 0f 00 00       	add    eax,0xffc
c0012967:	83 ca 03             	or     edx,0x3
c001296a:	89 10                	mov    DWORD PTR [eax],edx
c001296c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012971:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012977:	83 ec 0c             	sub    esp,0xc
c001297a:	50                   	push   eax
c001297b:	e8 74 1c 00 00       	call   c00145f4 <Device::getName()>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	83 ec 08             	sub    esp,0x8
c0012986:	68 ed b0 02 c0       	push   0xc002b0ed
c001298b:	50                   	push   eax
c001298c:	e8 3f df fe ff       	call   c00008d0 <strcmp>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	85 c0                	test   eax,eax
c0012996:	0f 94 c0             	sete   al
c0012999:	84 c0                	test   al,al
c001299b:	0f 84 87 00 00 00    	je     c0012a28 <VAS::VAS(bool)+0x27a>
c00129a1:	fa                   	cli    
c00129a2:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00129a7:	40                   	inc    eax
c00129a8:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00129ad:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00129b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129b8:	05 7c 09 00 00       	add    eax,0x97c
c00129bd:	83 ec 0c             	sub    esp,0xc
c00129c0:	50                   	push   eax
c00129c1:	e8 d8 c9 ff ff       	call   c000f39e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129ce:	89 c3                	mov    ebx,eax
c00129d0:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00129d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129db:	05 7c 09 00 00       	add    eax,0x97c
c00129e0:	83 ec 0c             	sub    esp,0xc
c00129e3:	50                   	push   eax
c00129e4:	e8 b5 c9 ff ff       	call   c000f39e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e9:	83 c4 10             	add    esp,0x10
c00129ec:	83 ec 08             	sub    esp,0x8
c00129ef:	50                   	push   eax
c00129f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129f4:	e8 75 f5 ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00129fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a03:	6a 11                	push   0x11
c0012a05:	53                   	push   ebx
c0012a06:	50                   	push   eax
c0012a07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a0b:	e8 f4 f8 ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012a18:	48                   	dec    eax
c0012a19:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012a1e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012a23:	85 c0                	test   eax,eax
c0012a25:	75 01                	jne    c0012a28 <VAS::VAS(bool)+0x27a>
c0012a27:	fb                   	sti    
c0012a28:	90                   	nop
c0012a29:	83 c4 28             	add    esp,0x28
c0012a2c:	5b                   	pop    ebx
c0012a2d:	c3                   	ret    

c0012a2e <VAS::evict(unsigned long)>:
c0012a2e:	55                   	push   ebp
c0012a2f:	57                   	push   edi
c0012a30:	56                   	push   esi
c0012a31:	53                   	push   ebx
c0012a32:	83 ec 1c             	sub    esp,0x1c
c0012a35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a39:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a41:	e8 c8 f1 ff ff       	call   c0011c0e <Virt::allocateSwapfilePage()>
c0012a46:	89 c7                	mov    edi,eax
c0012a48:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c0012a4d:	85 c0                	test   eax,eax
c0012a4f:	7e 3d                	jle    c0012a8e <VAS::evict(unsigned long)+0x60>
c0012a51:	89 ee                	mov    esi,ebp
c0012a53:	31 db                	xor    ebx,ebx
c0012a55:	83 ec 0c             	sub    esp,0xc
c0012a58:	57                   	push   edi
c0012a59:	e8 9e f1 ff ff       	call   c0011bfc <Virt::swapIDToSector(unsigned long)>
c0012a5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a61:	01 d8                	add    eax,ebx
c0012a63:	6a 01                	push   0x1
c0012a65:	31 d2                	xor    edx,edx
c0012a67:	43                   	inc    ebx
c0012a68:	52                   	push   edx
c0012a69:	81 c6 00 02 00 00    	add    esi,0x200
c0012a6f:	50                   	push   eax
c0012a70:	0f be 05 d8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddd8
c0012a77:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0012a7e:	e8 47 3e 00 00       	call   c00168ca <LogicalDisk::write(unsigned long long, int, void*)>
c0012a83:	83 c4 20             	add    esp,0x20
c0012a86:	39 1d cc dd 02 c0    	cmp    DWORD PTR ds:0xc002ddcc,ebx
c0012a8c:	7f c7                	jg     c0012a55 <VAS::evict(unsigned long)+0x27>
c0012a8e:	83 ec 08             	sub    esp,0x8
c0012a91:	c1 e7 0b             	shl    edi,0xb
c0012a94:	55                   	push   ebp
c0012a95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a99:	e8 d0 f4 ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c0012a9e:	83 c4 0c             	add    esp,0xc
c0012aa1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aa3:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aa9:	09 d7                	or     edi,edx
c0012aab:	89 38                	mov    DWORD PTR [eax],edi
c0012aad:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c0012ab2:	40                   	inc    eax
c0012ab3:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c0012ab8:	0f 20 da             	mov    edx,cr3
c0012abb:	0f 22 da             	mov    cr3,edx
c0012abe:	50                   	push   eax
c0012abf:	55                   	push   ebp
c0012ac0:	68 fb b0 02 c0       	push   0xc002b0fb
c0012ac5:	e8 09 04 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012aca:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0012acf:	c7 44 24 40 10 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b110
c0012ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0012ada:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012ade:	89 15 a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,edx
c0012ae4:	83 c4 2c             	add    esp,0x2c
c0012ae7:	5b                   	pop    ebx
c0012ae8:	5e                   	pop    esi
c0012ae9:	5f                   	pop    edi
c0012aea:	5d                   	pop    ebp
c0012aeb:	e9 e3 03 00 00       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)>

c0012af0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012af0:	55                   	push   ebp
c0012af1:	57                   	push   edi
c0012af2:	56                   	push   esi
c0012af3:	53                   	push   ebx
c0012af4:	83 ec 0c             	sub    esp,0xc
c0012af7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012afb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b01:	0f 84 dc 00 00 00    	je     c0012be3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b07:	56                   	push   esi
c0012b08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b0c:	e8 5d f4 ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c0012b11:	5b                   	pop    ebx
c0012b12:	85 c0                	test   eax,eax
c0012b14:	5f                   	pop    edi
c0012b15:	89 c3                	mov    ebx,eax
c0012b17:	0f 84 c6 00 00 00    	je     c0012be3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b1d:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b1f:	31 c0                	xor    eax,eax
c0012b21:	89 fa                	mov    edx,edi
c0012b23:	81 e2 01 04 00 00    	and    edx,0x401
c0012b29:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b2f:	0f 85 b0 00 00 00    	jne    c0012be5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b35:	e8 4e d4 ff ff       	call   c000ff88 <Phys::allocatePage()>
c0012b3a:	c1 ef 0b             	shr    edi,0xb
c0012b3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b3f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b45:	09 c2                	or     edx,eax
c0012b47:	81 ca 01 08 00 00    	or     edx,0x801
c0012b4d:	89 13                	mov    DWORD PTR [ebx],edx
c0012b4f:	8b 0d cc dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddcc
c0012b55:	85 c9                	test   ecx,ecx
c0012b57:	7e 3d                	jle    c0012b96 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b59:	89 f5                	mov    ebp,esi
c0012b5b:	31 db                	xor    ebx,ebx
c0012b5d:	83 ec 0c             	sub    esp,0xc
c0012b60:	57                   	push   edi
c0012b61:	e8 96 f0 ff ff       	call   c0011bfc <Virt::swapIDToSector(unsigned long)>
c0012b66:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b69:	01 d8                	add    eax,ebx
c0012b6b:	6a 01                	push   0x1
c0012b6d:	31 d2                	xor    edx,edx
c0012b6f:	43                   	inc    ebx
c0012b70:	52                   	push   edx
c0012b71:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b77:	50                   	push   eax
c0012b78:	0f be 05 d8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddd8
c0012b7f:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0012b86:	e8 d3 3c 00 00       	call   c001685e <LogicalDisk::read(unsigned long long, int, void*)>
c0012b8b:	83 c4 20             	add    esp,0x20
c0012b8e:	39 1d cc dd 02 c0    	cmp    DWORD PTR ds:0xc002ddcc,ebx
c0012b94:	7f c7                	jg     c0012b5d <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b96:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c0012b9b:	48                   	dec    eax
c0012b9c:	52                   	push   edx
c0012b9d:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c0012ba2:	50                   	push   eax
c0012ba3:	56                   	push   esi
c0012ba4:	68 21 b1 02 c0       	push   0xc002b121
c0012ba9:	e8 25 03 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012bae:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bb1:	e8 28 f0 ff ff       	call   c0011bde <Virt::freeSwapfilePage(unsigned long)>
c0012bb6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012bbb:	83 c4 10             	add    esp,0x10
c0012bbe:	48                   	dec    eax
c0012bbf:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012bc4:	85 c0                	test   eax,eax
c0012bc6:	75 01                	jne    c0012bc9 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012bc8:	fb                   	sti    
c0012bc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcd:	25 ff 0f 00 00       	and    eax,0xfff
c0012bd2:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bd7:	77 14                	ja     c0012bed <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012bd9:	0f 20 d8             	mov    eax,cr3
c0012bdc:	0f 22 d8             	mov    cr3,eax
c0012bdf:	b0 01                	mov    al,0x1
c0012be1:	eb 02                	jmp    c0012be5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012be3:	31 c0                	xor    eax,eax
c0012be5:	83 c4 0c             	add    esp,0xc
c0012be8:	5b                   	pop    ebx
c0012be9:	5e                   	pop    esi
c0012bea:	5f                   	pop    edi
c0012beb:	5d                   	pop    ebp
c0012bec:	c3                   	ret    
c0012bed:	83 ec 0c             	sub    esp,0xc
c0012bf0:	68 36 b1 02 c0       	push   0xc002b136
c0012bf5:	e8 d9 02 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012bfa:	83 c4 10             	add    esp,0x10
c0012bfd:	eb da                	jmp    c0012bd9 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bff:	90                   	nop

c0012c00 <VAS::scanForEviction()>:
c0012c00:	57                   	push   edi
c0012c01:	56                   	push   esi
c0012c02:	53                   	push   ebx
c0012c03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c07:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c0a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c10:	75 0e                	jne    c0012c20 <VAS::scanForEviction()+0x20>
c0012c12:	89 da                	mov    edx,ebx
c0012c14:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c17:	c1 ea 16             	shr    edx,0x16
c0012c1a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c1e:	74 48                	je     c0012c68 <VAS::scanForEviction()+0x68>
c0012c20:	53                   	push   ebx
c0012c21:	56                   	push   esi
c0012c22:	e8 47 f3 ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c0012c27:	5a                   	pop    edx
c0012c28:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c2a:	59                   	pop    ecx
c0012c2b:	89 fa                	mov    edx,edi
c0012c2d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c33:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c39:	74 3d                	je     c0012c78 <VAS::scanForEviction()+0x78>
c0012c3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c41:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c47:	76 2a                	jbe    c0012c73 <VAS::scanForEviction()+0x73>
c0012c49:	31 db                	xor    ebx,ebx
c0012c4b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c52:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c58:	75 c6                	jne    c0012c20 <VAS::scanForEviction()+0x20>
c0012c5a:	89 da                	mov    edx,ebx
c0012c5c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c5f:	c1 ea 16             	shr    edx,0x16
c0012c62:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c66:	75 b8                	jne    c0012c20 <VAS::scanForEviction()+0x20>
c0012c68:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c6e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c71:	eb 97                	jmp    c0012c0a <VAS::scanForEviction()+0xa>
c0012c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c76:	eb 92                	jmp    c0012c0a <VAS::scanForEviction()+0xa>
c0012c78:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c7e:	74 bb                	je     c0012c3b <VAS::scanForEviction()+0x3b>
c0012c80:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c86:	74 0a                	je     c0012c92 <VAS::scanForEviction()+0x92>
c0012c88:	83 e7 df             	and    edi,0xffffffdf
c0012c8b:	89 38                	mov    DWORD PTR [eax],edi
c0012c8d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c90:	eb a9                	jmp    c0012c3b <VAS::scanForEviction()+0x3b>
c0012c92:	83 ec 08             	sub    esp,0x8
c0012c95:	53                   	push   ebx
c0012c96:	56                   	push   esi
c0012c97:	e8 92 fd ff ff       	call   c0012a2e <VAS::evict(unsigned long)>
c0012c9c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	89 f8                	mov    eax,edi
c0012ca8:	5b                   	pop    ebx
c0012ca9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cae:	5e                   	pop    esi
c0012caf:	5f                   	pop    edi
c0012cb0:	c3                   	ret    

c0012cb1 <mapVASFirstTime>:
c0012cb1:	55                   	push   ebp
c0012cb2:	57                   	push   edi
c0012cb3:	56                   	push   esi
c0012cb4:	53                   	push   ebx
c0012cb5:	83 ec 0c             	sub    esp,0xc
c0012cb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cbd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cc0:	4a                   	dec    edx
c0012cc1:	0f 84 8e 00 00 00    	je     c0012d55 <mapVASFirstTime+0xa4>
c0012cc7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cca:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012ccd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cd2:	c1 e5 15             	shl    ebp,0x15
c0012cd5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cda:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012ce0:	29 eb                	sub    ebx,ebp
c0012ce2:	29 ee                	sub    esi,ebp
c0012ce4:	e8 9f d2 ff ff       	call   c000ff88 <Phys::allocatePage()>
c0012ce9:	83 ec 0c             	sub    esp,0xc
c0012cec:	68 03 04 00 00       	push   0x403
c0012cf1:	6a 01                	push   0x1
c0012cf3:	53                   	push   ebx
c0012cf4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cfa:	50                   	push   eax
c0012cfb:	57                   	push   edi
c0012cfc:	e8 f9 f8 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d01:	83 c4 20             	add    esp,0x20
c0012d04:	39 f3                	cmp    ebx,esi
c0012d06:	75 dc                	jne    c0012ce4 <mapVASFirstTime+0x33>
c0012d08:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d0d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d12:	29 ee                	sub    esi,ebp
c0012d14:	29 e8                	sub    eax,ebp
c0012d16:	89 c5                	mov    ebp,eax
c0012d18:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d1c:	19 db                	sbb    ebx,ebx
c0012d1e:	e8 65 d2 ff ff       	call   c000ff88 <Phys::allocatePage()>
c0012d23:	83 e3 04             	and    ebx,0x4
c0012d26:	83 ec 0c             	sub    esp,0xc
c0012d29:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d2f:	53                   	push   ebx
c0012d30:	6a 01                	push   0x1
c0012d32:	56                   	push   esi
c0012d33:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d39:	50                   	push   eax
c0012d3a:	57                   	push   edi
c0012d3b:	e8 ba f8 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d40:	83 c4 20             	add    esp,0x20
c0012d43:	39 f5                	cmp    ebp,esi
c0012d45:	75 d1                	jne    c0012d18 <mapVASFirstTime+0x67>
c0012d47:	0f 20 d8             	mov    eax,cr3
c0012d4a:	0f 22 d8             	mov    cr3,eax
c0012d4d:	83 c4 0c             	add    esp,0xc
c0012d50:	5b                   	pop    ebx
c0012d51:	5e                   	pop    esi
c0012d52:	5f                   	pop    edi
c0012d53:	5d                   	pop    ebp
c0012d54:	c3                   	ret    
c0012d55:	83 ec 0c             	sub    esp,0xc
c0012d58:	68 46 b1 02 c0       	push   0xc002b146
c0012d5d:	e8 71 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012d62:	83 c4 10             	add    esp,0x10
c0012d65:	83 c4 0c             	add    esp,0xc
c0012d68:	5b                   	pop    ebx
c0012d69:	5e                   	pop    esi
c0012d6a:	5f                   	pop    edi
c0012d6b:	5d                   	pop    ebp
c0012d6c:	c3                   	ret    

c0012d6d <__cxa_atexit>:
c0012d6d:	31 c0                	xor    eax,eax
c0012d6f:	c3                   	ret    

c0012d70 <__cxa_finalize>:
c0012d70:	c3                   	ret    

c0012d71 <__stack_chk_fail>:
c0012d71:	55                   	push   ebp
c0012d72:	89 e5                	mov    ebp,esp
c0012d74:	83 ec 14             	sub    esp,0x14
c0012d77:	68 5f b1 02 c0       	push   0xc002b15f
c0012d7c:	e8 52 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012d81:	58                   	pop    eax
c0012d82:	5a                   	pop    edx
c0012d83:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d86:	68 af b1 02 c0       	push   0xc002b1af
c0012d8b:	e8 43 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012d90:	59                   	pop    ecx
c0012d91:	58                   	pop    eax
c0012d92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d95:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d98:	68 af b1 02 c0       	push   0xc002b1af
c0012d9d:	e8 31 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012da2:	5a                   	pop    edx
c0012da3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da6:	59                   	pop    ecx
c0012da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012da9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dac:	68 af b1 02 c0       	push   0xc002b1af
c0012db1:	e8 1d 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012db6:	5a                   	pop    edx
c0012db7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dba:	59                   	pop    ecx
c0012dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dbf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dc2:	68 af b1 02 c0       	push   0xc002b1af
c0012dc7:	e8 07 01 00 00       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0012dcc:	c7 04 24 b7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1b7
c0012dd3:	e8 b7 7a 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012dd8:	83 c4 10             	add    esp,0x10
c0012ddb:	c9                   	leave  
c0012ddc:	c3                   	ret    

c0012ddd <__cxa_pure_virtual>:
c0012ddd:	83 ec 18             	sub    esp,0x18
c0012de0:	68 cf b1 02 c0       	push   0xc002b1cf
c0012de5:	e8 a5 7a 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0012dea:	83 c4 1c             	add    esp,0x1c
c0012ded:	c3                   	ret    

c0012dee <operator new[](unsigned long)>:
c0012dee:	e9 29 cb ff ff       	jmp    c000f91c <malloc>

c0012df3 <operator delete(void*, unsigned long)>:
c0012df3:	e9 44 cb ff ff       	jmp    c000f93c <rfree>

c0012df8 <operator delete[](void*)>:
c0012df8:	e9 3f cb ff ff       	jmp    c000f93c <rfree>

c0012dfd <operator delete[](void*, unsigned long)>:
c0012dfd:	e9 3a cb ff ff       	jmp    c000f93c <rfree>

c0012e02 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e02:	57                   	push   edi
c0012e03:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e08:	56                   	push   esi
c0012e09:	be e4 b1 02 c0       	mov    esi,0xc002b1e4
c0012e0e:	53                   	push   ebx
c0012e0f:	83 ec 40             	sub    esp,0x40
c0012e12:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e16:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e1a:	fc                   	cld    
c0012e1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e1d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e21:	83 f9 3e             	cmp    ecx,0x3e
c0012e24:	7e 05                	jle    c0012e2b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e26:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e2b:	89 df                	mov    edi,ebx
c0012e2d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e31:	eb 02                	jmp    c0012e35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e33:	89 c7                	mov    edi,eax
c0012e35:	31 d2                	xor    edx,edx
c0012e37:	46                   	inc    esi
c0012e38:	89 f8                	mov    eax,edi
c0012e3a:	f7 f1                	div    ecx
c0012e3c:	39 cf                	cmp    edi,ecx
c0012e3e:	73 f3                	jae    c0012e33 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e40:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e43:	eb 02                	jmp    c0012e47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e45:	89 c3                	mov    ebx,eax
c0012e47:	31 d2                	xor    edx,edx
c0012e49:	4e                   	dec    esi
c0012e4a:	89 d8                	mov    eax,ebx
c0012e4c:	f7 f1                	div    ecx
c0012e4e:	39 cb                	cmp    ebx,ecx
c0012e50:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e54:	88 16                	mov    BYTE PTR [esi],dl
c0012e56:	73 ed                	jae    c0012e45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e58:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e5c:	83 c4 40             	add    esp,0x40
c0012e5f:	5b                   	pop    ebx
c0012e60:	5e                   	pop    esi
c0012e61:	5f                   	pop    edi
c0012e62:	c3                   	ret    

c0012e63 <Dbg::logc(char)>:
c0012e63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e67:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e6c:	ec                   	in     al,dx
c0012e6d:	a8 20                	test   al,0x20
c0012e6f:	74 fb                	je     c0012e6c <Dbg::logc(char)+0x9>
c0012e71:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e76:	88 c8                	mov    al,cl
c0012e78:	ee                   	out    dx,al
c0012e79:	c3                   	ret    

c0012e7a <Dbg::logs(char*)>:
c0012e7a:	53                   	push   ebx
c0012e7b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e82:	84 c0                	test   al,al
c0012e84:	74 0f                	je     c0012e95 <Dbg::logs(char*)+0x1b>
c0012e86:	50                   	push   eax
c0012e87:	43                   	inc    ebx
c0012e88:	e8 d6 ff ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012e8d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e90:	5a                   	pop    edx
c0012e91:	84 c0                	test   al,al
c0012e93:	75 f1                	jne    c0012e86 <Dbg::logs(char*)+0xc>
c0012e95:	5b                   	pop    ebx
c0012e96:	c3                   	ret    

c0012e97 <Dbg::logWriteInt(unsigned int)>:
c0012e97:	83 ec 10             	sub    esp,0x10
c0012e9a:	6a 0a                	push   0xa
c0012e9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ea0:	50                   	push   eax
c0012ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea5:	e8 58 ff ff ff       	call   c0012e02 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eaa:	50                   	push   eax
c0012eab:	e8 ca ff ff ff       	call   c0012e7a <Dbg::logs(char*)>
c0012eb0:	83 c4 20             	add    esp,0x20
c0012eb3:	c3                   	ret    

c0012eb4 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eb4:	83 ec 10             	sub    esp,0x10
c0012eb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ebb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ebf:	50                   	push   eax
c0012ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec4:	e8 39 ff ff ff       	call   c0012e02 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ec9:	50                   	push   eax
c0012eca:	e8 ab ff ff ff       	call   c0012e7a <Dbg::logs(char*)>
c0012ecf:	83 c4 20             	add    esp,0x20
c0012ed2:	c3                   	ret    

c0012ed3 <Dbg::kprintf(char const*, ...)>:
c0012ed3:	55                   	push   ebp
c0012ed4:	57                   	push   edi
c0012ed5:	56                   	push   esi
c0012ed6:	53                   	push   ebx
c0012ed7:	83 ec 0c             	sub    esp,0xc
c0012eda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ede:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ee6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ee9:	84 c0                	test   al,al
c0012eeb:	74 4a                	je     c0012f37 <Dbg::kprintf(char const*, ...)+0x64>
c0012eed:	31 db                	xor    ebx,ebx
c0012eef:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ef2:	3c 25                	cmp    al,0x25
c0012ef4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ef7:	0f 85 e4 00 00 00    	jne    c0012fe1 <Dbg::kprintf(char const*, ...)+0x10e>
c0012efd:	83 c3 02             	add    ebx,0x2
c0012f00:	8a 07                	mov    al,BYTE PTR [edi]
c0012f02:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f05:	83 e8 25             	sub    eax,0x25
c0012f08:	3c 53                	cmp    al,0x53
c0012f0a:	0f 87 ba 00 00 00    	ja     c0012fca <Dbg::kprintf(char const*, ...)+0xf7>
c0012f10:	0f b6 c0             	movzx  eax,al
c0012f13:	ff 24 85 24 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4ddc]
c0012f1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f1e:	89 c8                	mov    eax,ecx
c0012f20:	83 c1 04             	add    ecx,0x4
c0012f23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f27:	ff 30                	push   DWORD PTR [eax]
c0012f29:	e8 4c ff ff ff       	call   c0012e7a <Dbg::logs(char*)>
c0012f2e:	58                   	pop    eax
c0012f2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f33:	84 c0                	test   al,al
c0012f35:	75 b8                	jne    c0012eef <Dbg::kprintf(char const*, ...)+0x1c>
c0012f37:	83 c4 0c             	add    esp,0xc
c0012f3a:	5b                   	pop    ebx
c0012f3b:	5e                   	pop    esi
c0012f3c:	5f                   	pop    edi
c0012f3d:	5d                   	pop    ebp
c0012f3e:	c3                   	ret    
c0012f3f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f43:	89 d0                	mov    eax,edx
c0012f45:	83 c2 04             	add    edx,0x4
c0012f48:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f4c:	ff 30                	push   DWORD PTR [eax]
c0012f4e:	e8 44 ff ff ff       	call   c0012e97 <Dbg::logWriteInt(unsigned int)>
c0012f53:	58                   	pop    eax
c0012f54:	eb d9                	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f5a:	89 d0                	mov    eax,edx
c0012f5c:	83 c2 04             	add    edx,0x4
c0012f5f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f62:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f66:	50                   	push   eax
c0012f67:	e8 f7 fe ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012f6c:	58                   	pop    eax
c0012f6d:	eb c0                	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f73:	89 c8                	mov    eax,ecx
c0012f75:	83 c1 04             	add    ecx,0x4
c0012f78:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f7c:	ff 30                	push   DWORD PTR [eax]
c0012f7e:	e8 14 ff ff ff       	call   c0012e97 <Dbg::logWriteInt(unsigned int)>
c0012f83:	5f                   	pop    edi
c0012f84:	eb a9                	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f8a:	89 c8                	mov    eax,ecx
c0012f8c:	83 c1 04             	add    ecx,0x4
c0012f8f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f93:	6a 10                	push   0x10
c0012f95:	ff 30                	push   DWORD PTR [eax]
c0012f97:	e8 18 ff ff ff       	call   c0012eb4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f9c:	59                   	pop    ecx
c0012f9d:	5f                   	pop    edi
c0012f9e:	eb 8f                	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa4:	89 d0                	mov    eax,edx
c0012fa6:	83 c2 08             	add    edx,0x8
c0012fa9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fad:	6a 10                	push   0x10
c0012faf:	ff 30                	push   DWORD PTR [eax]
c0012fb1:	e8 fe fe ff ff       	call   c0012eb4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fb6:	58                   	pop    eax
c0012fb7:	5a                   	pop    edx
c0012fb8:	e9 72 ff ff ff       	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbd:	6a 25                	push   0x25
c0012fbf:	e8 9f fe ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012fc4:	58                   	pop    eax
c0012fc5:	e9 65 ff ff ff       	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012fca:	6a 25                	push   0x25
c0012fcc:	e8 92 fe ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012fd1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fd4:	50                   	push   eax
c0012fd5:	e8 89 fe ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012fda:	5a                   	pop    edx
c0012fdb:	59                   	pop    ecx
c0012fdc:	e9 4e ff ff ff       	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe1:	50                   	push   eax
c0012fe2:	89 eb                	mov    ebx,ebp
c0012fe4:	e8 7a fe ff ff       	call   c0012e63 <Dbg::logc(char)>
c0012fe9:	89 fd                	mov    ebp,edi
c0012feb:	58                   	pop    eax
c0012fec:	e9 3e ff ff ff       	jmp    c0012f2f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff1:	90                   	nop

c0012ff2 <File::read(unsigned long long, void*, int*)>:
c0012ff2:	53                   	push   ebx
c0012ff3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ff7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ffb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013002:	3c 19                	cmp    al,0x19
c0013004:	77 35                	ja     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c0013006:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c001300d:	85 c0                	test   eax,eax
c001300f:	74 2a                	je     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c0013011:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013017:	85 c0                	test   eax,eax
c0013019:	74 20                	je     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c001301b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001301f:	74 21                	je     c0013042 <File::read(unsigned long long, void*, int*)+0x50>
c0013021:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013023:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013027:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001302d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013031:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013035:	5b                   	pop    ebx
c0013036:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013039:	ff e0                	jmp    eax
c001303b:	b8 0b 00 00 00       	mov    eax,0xb
c0013040:	eb 05                	jmp    c0013047 <File::read(unsigned long long, void*, int*)+0x55>
c0013042:	b8 05 00 00 00       	mov    eax,0x5
c0013047:	5b                   	pop    ebx
c0013048:	c3                   	ret    
c0013049:	90                   	nop

c001304a <File::write(unsigned long long, void*, int*)>:
c001304a:	53                   	push   ebx
c001304b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001304f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013053:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001305a:	3c 19                	cmp    al,0x19
c001305c:	77 35                	ja     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c001305e:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0013065:	85 c0                	test   eax,eax
c0013067:	74 2a                	je     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c0013069:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001306f:	85 c0                	test   eax,eax
c0013071:	74 20                	je     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c0013073:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013077:	74 21                	je     c001309a <File::write(unsigned long long, void*, int*)+0x50>
c0013079:	8b 08                	mov    ecx,DWORD PTR [eax]
c001307b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001307f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001308d:	5b                   	pop    ebx
c001308e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013091:	ff e0                	jmp    eax
c0013093:	b8 0b 00 00 00       	mov    eax,0xb
c0013098:	eb 05                	jmp    c001309f <File::write(unsigned long long, void*, int*)+0x55>
c001309a:	b8 05 00 00 00       	mov    eax,0x5
c001309f:	5b                   	pop    ebx
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <Directory::read(unsigned long long, void*, int*)>:
c00130a2:	53                   	push   ebx
c00130a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130b2:	3c 19                	cmp    al,0x19
c00130b4:	77 35                	ja     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130b6:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00130bd:	85 c0                	test   eax,eax
c00130bf:	74 2a                	je     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c7:	85 c0                	test   eax,eax
c00130c9:	74 20                	je     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130cf:	74 21                	je     c00130f2 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130e5:	5b                   	pop    ebx
c00130e6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130e9:	ff e0                	jmp    eax
c00130eb:	b8 0b 00 00 00       	mov    eax,0xb
c00130f0:	eb 05                	jmp    c00130f7 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130f2:	b8 05 00 00 00       	mov    eax,0x5
c00130f7:	5b                   	pop    ebx
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Directory::write(unsigned long long, void*, int*)>:
c00130fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013105:	b8 0b 00 00 00       	mov    eax,0xb
c001310a:	80 fa 19             	cmp    dl,0x19
c001310d:	77 18                	ja     c0013127 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001310f:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013116:	85 d2                	test   edx,edx
c0013118:	74 0d                	je     c0013127 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001311a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013121:	19 c0                	sbb    eax,eax
c0013123:	83 e0 0a             	and    eax,0xa
c0013126:	40                   	inc    eax
c0013127:	c3                   	ret    

c0013128 <File::isAtty()>:
c0013128:	31 c0                	xor    eax,eax
c001312a:	c3                   	ret    
c001312b:	90                   	nop

c001312c <Directory::isAtty()>:
c001312c:	31 c0                	xor    eax,eax
c001312e:	c3                   	ret    
c001312f:	90                   	nop

c0013130 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013130:	b8 0a 00 00 00       	mov    eax,0xa
c0013135:	c3                   	ret    

c0013136 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013136:	b8 0a 00 00 00       	mov    eax,0xa
c001313b:	c3                   	ret    

c001313c <Filesystem::getFileFirstSector(char const*)>:
c001313c:	31 c0                	xor    eax,eax
c001313e:	31 d2                	xor    edx,edx
c0013140:	c3                   	ret    
c0013141:	90                   	nop

c0013142 <File::~File()>:
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	89 10                	mov    DWORD PTR [eax],edx
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	50                   	push   eax
c0013158:	e8 0f e7 ff ff       	call   c001186c <UnixFile::~UnixFile()>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	90                   	nop
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <File::~File()>:
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013170:	e8 cd ff ff ff       	call   c0013142 <File::~File()>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 ec 08             	sub    esp,0x8
c001317b:	68 14 01 00 00       	push   0x114
c0013180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013184:	e8 6a fc ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	83 c4 0c             	add    esp,0xc
c001318f:	c3                   	ret    

c0013190 <Directory::~Directory()>:
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	89 10                	mov    DWORD PTR [eax],edx
c001319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a2:	83 ec 0c             	sub    esp,0xc
c00131a5:	50                   	push   eax
c00131a6:	e8 c1 e6 ff ff       	call   c001186c <UnixFile::~UnixFile()>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	90                   	nop
c00131af:	83 c4 0c             	add    esp,0xc
c00131b2:	c3                   	ret    
c00131b3:	90                   	nop

c00131b4 <Directory::~Directory()>:
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	83 ec 0c             	sub    esp,0xc
c00131ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131be:	e8 cd ff ff ff       	call   c0013190 <Directory::~Directory()>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	83 ec 08             	sub    esp,0x8
c00131c9:	68 14 01 00 00       	push   0x114
c00131ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d2:	e8 1c fc ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00131d7:	83 c4 10             	add    esp,0x10
c00131da:	83 c4 0c             	add    esp,0xc
c00131dd:	c3                   	ret    

c00131de <Filesystem::Filesystem()>:
c00131de:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c00131e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e7:	89 10                	mov    DWORD PTR [eax],edx
c00131e9:	8b 15 b4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efb4
c00131ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131fa:	a3 b4 ef 02 c0       	mov    ds:0xc002efb4,eax
c00131ff:	90                   	nop
c0013200:	c3                   	ret    
c0013201:	90                   	nop

c0013202 <Filesystem::~Filesystem()>:
c0013202:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c0013207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001320b:	89 10                	mov    DWORD PTR [eax],edx
c001320d:	90                   	nop
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Filesystem::~Filesystem()>:
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013217:	e8 e6 ff ff ff       	call   c0013202 <Filesystem::~Filesystem()>
c001321c:	83 c4 04             	add    esp,0x4
c001321f:	83 ec 08             	sub    esp,0x8
c0013222:	6a 08                	push   0x8
c0013224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013228:	e8 c6 fb ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	83 c4 0c             	add    esp,0xc
c0013233:	c3                   	ret    

c0013234 <Fs::getcwd(Process*, char*, int)>:
c0013234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013238:	31 c0                	xor    eax,eax
c001323a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001323d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013241:	7d 15                	jge    c0013258 <Fs::getcwd(Process*, char*, int)+0x24>
c0013243:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013247:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001324e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013251:	84 c9                	test   cl,cl
c0013253:	74 06                	je     c001325b <Fs::getcwd(Process*, char*, int)+0x27>
c0013255:	40                   	inc    eax
c0013256:	eb e2                	jmp    c001323a <Fs::getcwd(Process*, char*, int)+0x6>
c0013258:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001325b:	31 c0                	xor    eax,eax
c001325d:	c3                   	ret    

c001325e <Fs::initVFS()>:
c001325e:	83 ec 18             	sub    esp,0x18
c0013261:	6a 08                	push   0x8
c0013263:	e8 b4 c6 ff ff       	call   c000f91c <malloc>
c0013268:	89 04 24             	mov    DWORD PTR [esp],eax
c001326b:	e8 fc e3 00 00       	call   c002166c <FAT::FAT()>
c0013270:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013277:	e8 a0 c6 ff ff       	call   c000f91c <malloc>
c001327c:	89 04 24             	mov    DWORD PTR [esp],eax
c001327f:	e8 40 f6 00 00       	call   c00228c4 <ISO9660::ISO9660()>
c0013284:	83 c4 1c             	add    esp,0x1c
c0013287:	c3                   	ret    

c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013288:	55                   	push   ebp
c0013289:	57                   	push   edi
c001328a:	56                   	push   esi
c001328b:	53                   	push   ebx
c001328c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013292:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013299:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132a0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132a7:	68 00 04 00 00       	push   0x400
c00132ac:	6a 00                	push   0x0
c00132ae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132b2:	56                   	push   esi
c00132b3:	e8 d0 d4 fe ff       	call   c0000788 <memset>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132bf:	75 0b                	jne    c00132cc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132c1:	50                   	push   eax
c00132c2:	50                   	push   eax
c00132c3:	57                   	push   edi
c00132c4:	56                   	push   esi
c00132c5:	e8 7a d5 fe ff       	call   c0000844 <strcpy>
c00132ca:	eb 41                	jmp    c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132cc:	8a 07                	mov    al,BYTE PTR [edi]
c00132ce:	3c 5c                	cmp    al,0x5c
c00132d0:	74 04                	je     c00132d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132d2:	3c 2f                	cmp    al,0x2f
c00132d4:	75 18                	jne    c00132ee <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132d6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132d9:	3c 60                	cmp    al,0x60
c00132db:	7e 03                	jle    c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132dd:	83 e8 20             	sub    eax,0x20
c00132e0:	88 04 24             	mov    BYTE PTR [esp],al
c00132e3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132ea:	50                   	push   eax
c00132eb:	50                   	push   eax
c00132ec:	eb 18                	jmp    c0013306 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132ee:	50                   	push   eax
c00132ef:	50                   	push   eax
c00132f0:	55                   	push   ebp
c00132f1:	56                   	push   esi
c00132f2:	e8 4d d5 fe ff       	call   c0000844 <strcpy>
c00132f7:	5a                   	pop    edx
c00132f8:	59                   	pop    ecx
c00132f9:	68 91 cb 02 c0       	push   0xc002cb91
c00132fe:	56                   	push   esi
c00132ff:	e8 80 d6 fe ff       	call   c0000984 <strcat>
c0013304:	5d                   	pop    ebp
c0013305:	58                   	pop    eax
c0013306:	57                   	push   edi
c0013307:	56                   	push   esi
c0013308:	e8 77 d6 fe ff       	call   c0000984 <strcat>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013313:	3c 60                	cmp    al,0x60
c0013315:	7e 03                	jle    c001331a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013317:	83 e8 20             	sub    eax,0x20
c001331a:	88 04 24             	mov    BYTE PTR [esp],al
c001331d:	88 03                	mov    BYTE PTR [ebx],al
c001331f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013326:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001332c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013330:	bf 03 00 00 00       	mov    edi,0x3
c0013335:	b8 03 00 00 00       	mov    eax,0x3
c001333a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001333d:	84 d2                	test   dl,dl
c001333f:	0f 84 91 00 00 00    	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013345:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013348:	80 fa 5c             	cmp    dl,0x5c
c001334b:	74 05                	je     c0013352 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001334d:	80 fa 2f             	cmp    dl,0x2f
c0013350:	75 12                	jne    c0013364 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013352:	89 c5                	mov    ebp,eax
c0013354:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013359:	74 09                	je     c0013364 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001335b:	40                   	inc    eax
c001335c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013360:	89 cf                	mov    edi,ecx
c0013362:	eb d6                	jmp    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013364:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013369:	75 5b                	jne    c00133c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001336b:	80 fa 2e             	cmp    dl,0x2e
c001336e:	75 56                	jne    c00133c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013370:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013374:	74 19                	je     c001338f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013376:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001337b:	74 53                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001337d:	89 f9                	mov    ecx,edi
c001337f:	41                   	inc    ecx
c0013380:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013383:	80 fa 2f             	cmp    dl,0x2f
c0013386:	74 f7                	je     c001337f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013388:	80 fa 5c             	cmp    dl,0x5c
c001338b:	74 f2                	je     c001337f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001338d:	eb d1                	jmp    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013394:	74 3a                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013396:	83 f8 03             	cmp    eax,0x3
c0013399:	74 c5                	je     c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001339b:	41                   	inc    ecx
c001339c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001339f:	80 fa 2f             	cmp    dl,0x2f
c00133a2:	74 f7                	je     c001339b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a4:	80 fa 5c             	cmp    dl,0x5c
c00133a7:	74 f2                	je     c001339b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a9:	48                   	dec    eax
c00133aa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133ae:	75 06                	jne    c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133b0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133b4:	eb f3                	jmp    c00133a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133b6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133ba:	74 07                	je     c00133c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133c0:	48                   	dec    eax
c00133c1:	eb f3                	jmp    c00133b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133c3:	40                   	inc    eax
c00133c4:	eb 9a                	jmp    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c6:	80 fa 2f             	cmp    dl,0x2f
c00133c9:	74 95                	je     c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133cb:	80 fa 5c             	cmp    dl,0x5c
c00133ce:	74 90                	je     c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133d3:	40                   	inc    eax
c00133d4:	eb 8a                	jmp    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	53                   	push   ebx
c00133de:	e8 c1 d3 fe ff       	call   c00007a4 <strlen>
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133eb:	75 26                	jne    c0013413 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133ed:	83 ec 0c             	sub    esp,0xc
c00133f0:	53                   	push   ebx
c00133f1:	e8 ae d3 fe ff       	call   c00007a4 <strlen>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133fe:	74 26                	je     c0013426 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	53                   	push   ebx
c0013404:	e8 9b d3 fe ff       	call   c00007a4 <strlen>
c0013409:	83 c4 10             	add    esp,0x10
c001340c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013411:	eb c7                	jmp    c00133da <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013413:	83 ec 0c             	sub    esp,0xc
c0013416:	53                   	push   ebx
c0013417:	e8 88 d3 fe ff       	call   c00007a4 <strlen>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013424:	74 c7                	je     c00133ed <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013426:	81 c4 0c 04 00 00    	add    esp,0x40c
c001342c:	5b                   	pop    ebx
c001342d:	5e                   	pop    esi
c001342e:	5f                   	pop    edi
c001342f:	5d                   	pop    ebp
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <File::File(char const*, Process*)>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013439:	83 ec 08             	sub    esp,0x8
c001343c:	6a 00                	push   0x0
c001343e:	50                   	push   eax
c001343f:	e8 46 e2 ff ff       	call   c001168a <UnixFile::UnixFile(int)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c001344c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013450:	89 10                	mov    DWORD PTR [eax],edx
c0013452:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013456:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001345c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013460:	83 c0 0d             	add    eax,0xd
c0013463:	83 ec 04             	sub    esp,0x4
c0013466:	52                   	push   edx
c0013467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001346b:	50                   	push   eax
c001346c:	e8 17 fe ff ff       	call   c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013471:	83 c4 10             	add    esp,0x10
c0013474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013478:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001347b:	8d 50 bf             	lea    edx,[eax-0x41]
c001347e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013482:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013490:	90                   	nop
c0013491:	83 c4 0c             	add    esp,0xc
c0013494:	c3                   	ret    
c0013495:	90                   	nop

c0013496 <File::open(FileOpenMode)>:
c0013496:	53                   	push   ebx
c0013497:	b8 0b 00 00 00       	mov    eax,0xb
c001349c:	83 ec 08             	sub    esp,0x8
c001349f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134aa:	80 fa 19             	cmp    dl,0x19
c00134ad:	77 40                	ja     c00134ef <File::open(FileOpenMode)+0x59>
c00134af:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c00134b6:	85 d2                	test   edx,edx
c00134b8:	74 35                	je     c00134ef <File::open(FileOpenMode)+0x59>
c00134ba:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134c0:	85 d2                	test   edx,edx
c00134c2:	74 2b                	je     c00134ef <File::open(FileOpenMode)+0x59>
c00134c4:	b8 06 00 00 00       	mov    eax,0x6
c00134c9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134cd:	75 20                	jne    c00134ef <File::open(FileOpenMode)+0x59>
c00134cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00134d1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134db:	51                   	push   ecx
c00134dc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134df:	51                   	push   ecx
c00134e0:	52                   	push   edx
c00134e1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134e4:	83 c4 10             	add    esp,0x10
c00134e7:	85 c0                	test   eax,eax
c00134e9:	75 04                	jne    c00134ef <File::open(FileOpenMode)+0x59>
c00134eb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134ef:	83 c4 08             	add    esp,0x8
c00134f2:	5b                   	pop    ebx
c00134f3:	c3                   	ret    

c00134f4 <File::close()>:
c00134f4:	53                   	push   ebx
c00134f5:	b8 0b 00 00 00       	mov    eax,0xb
c00134fa:	83 ec 08             	sub    esp,0x8
c00134fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013501:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013508:	80 fa 19             	cmp    dl,0x19
c001350b:	77 41                	ja     c001354e <File::close()+0x5a>
c001350d:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013514:	85 db                	test   ebx,ebx
c0013516:	74 36                	je     c001354e <File::close()+0x5a>
c0013518:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001351f:	74 2d                	je     c001354e <File::close()+0x5a>
c0013521:	b8 05 00 00 00       	mov    eax,0x5
c0013526:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001352a:	74 22                	je     c001354e <File::close()+0x5a>
c001352c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013530:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c0013537:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001353d:	53                   	push   ebx
c001353e:	53                   	push   ebx
c001353f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013541:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013547:	50                   	push   eax
c0013548:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	83 c4 08             	add    esp,0x8
c0013551:	5b                   	pop    ebx
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <File::seek(unsigned long long)>:
c0013554:	56                   	push   esi
c0013555:	53                   	push   ebx
c0013556:	b8 0b 00 00 00       	mov    eax,0xb
c001355b:	51                   	push   ecx
c001355c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013560:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013564:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001356b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001356f:	80 fa 19             	cmp    dl,0x19
c0013572:	77 31                	ja     c00135a5 <File::seek(unsigned long long)+0x51>
c0013574:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c001357b:	85 d2                	test   edx,edx
c001357d:	74 26                	je     c00135a5 <File::seek(unsigned long long)+0x51>
c001357f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013585:	85 d2                	test   edx,edx
c0013587:	74 1c                	je     c00135a5 <File::seek(unsigned long long)+0x51>
c0013589:	b8 05 00 00 00       	mov    eax,0x5
c001358e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013592:	74 11                	je     c00135a5 <File::seek(unsigned long long)+0x51>
c0013594:	8b 02                	mov    eax,DWORD PTR [edx]
c0013596:	53                   	push   ebx
c0013597:	51                   	push   ecx
c0013598:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001359e:	52                   	push   edx
c001359f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	5a                   	pop    edx
c00135a6:	5b                   	pop    ebx
c00135a7:	5e                   	pop    esi
c00135a8:	c3                   	ret    
c00135a9:	90                   	nop

c00135aa <File::tell(unsigned long long*)>:
c00135aa:	83 ec 0c             	sub    esp,0xc
c00135ad:	b8 0b 00 00 00       	mov    eax,0xb
c00135b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135b6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135bd:	80 fa 19             	cmp    dl,0x19
c00135c0:	77 34                	ja     c00135f6 <File::tell(unsigned long long*)+0x4c>
c00135c2:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c00135c9:	85 d2                	test   edx,edx
c00135cb:	74 29                	je     c00135f6 <File::tell(unsigned long long*)+0x4c>
c00135cd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d3:	85 d2                	test   edx,edx
c00135d5:	74 1f                	je     c00135f6 <File::tell(unsigned long long*)+0x4c>
c00135d7:	b8 05 00 00 00       	mov    eax,0x5
c00135dc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135e0:	74 14                	je     c00135f6 <File::tell(unsigned long long*)+0x4c>
c00135e2:	50                   	push   eax
c00135e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135e9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135ef:	52                   	push   edx
c00135f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135f3:	83 c4 10             	add    esp,0x10
c00135f6:	83 c4 0c             	add    esp,0xc
c00135f9:	c3                   	ret    

c00135fa <File::rewind()>:
c00135fa:	83 ec 10             	sub    esp,0x10
c00135fd:	6a 00                	push   0x0
c00135ff:	6a 00                	push   0x0
c0013601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013605:	e8 4a ff ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001360a:	83 c4 1c             	add    esp,0x1c
c001360d:	c3                   	ret    

c001360e <File::unlink()>:
c001360e:	83 ec 0c             	sub    esp,0xc
c0013611:	b8 0b 00 00 00       	mov    eax,0xb
c0013616:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001361a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013621:	80 f9 19             	cmp    cl,0x19
c0013624:	77 2f                	ja     c0013655 <File::unlink()+0x47>
c0013626:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c001362d:	85 c9                	test   ecx,ecx
c001362f:	74 24                	je     c0013655 <File::unlink()+0x47>
c0013631:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013637:	85 c9                	test   ecx,ecx
c0013639:	74 1a                	je     c0013655 <File::unlink()+0x47>
c001363b:	b8 06 00 00 00       	mov    eax,0x6
c0013640:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013644:	75 0f                	jne    c0013655 <File::unlink()+0x47>
c0013646:	83 c2 0d             	add    edx,0xd
c0013649:	50                   	push   eax
c001364a:	50                   	push   eax
c001364b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001364d:	52                   	push   edx
c001364e:	51                   	push   ecx
c001364f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013652:	83 c4 10             	add    esp,0x10
c0013655:	83 c4 0c             	add    esp,0xc
c0013658:	c3                   	ret    
c0013659:	90                   	nop

c001365a <File::rename(char const*)>:
c001365a:	83 ec 0c             	sub    esp,0xc
c001365d:	b8 0b 00 00 00       	mov    eax,0xb
c0013662:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013666:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366d:	80 f9 19             	cmp    cl,0x19
c0013670:	77 32                	ja     c00136a4 <File::rename(char const*)+0x4a>
c0013672:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013679:	85 c9                	test   ecx,ecx
c001367b:	74 27                	je     c00136a4 <File::rename(char const*)+0x4a>
c001367d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013683:	85 c9                	test   ecx,ecx
c0013685:	74 1d                	je     c00136a4 <File::rename(char const*)+0x4a>
c0013687:	b8 06 00 00 00       	mov    eax,0x6
c001368c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013690:	75 12                	jne    c00136a4 <File::rename(char const*)+0x4a>
c0013692:	83 c2 0d             	add    edx,0xd
c0013695:	50                   	push   eax
c0013696:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001369c:	52                   	push   edx
c001369d:	51                   	push   ecx
c001369e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	83 c4 0c             	add    esp,0xc
c00136a7:	c3                   	ret    

c00136a8 <File::chfatattr(unsigned char, unsigned char)>:
c00136a8:	57                   	push   edi
c00136a9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ae:	56                   	push   esi
c00136af:	53                   	push   ebx
c00136b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136c3:	80 f9 19             	cmp    cl,0x19
c00136c6:	77 37                	ja     c00136ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c8:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00136cf:	85 c9                	test   ecx,ecx
c00136d1:	74 2c                	je     c00136ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d9:	85 c9                	test   ecx,ecx
c00136db:	74 22                	je     c00136ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136dd:	b8 06 00 00 00       	mov    eax,0x6
c00136e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e6:	75 17                	jne    c00136ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136ea:	89 f0                	mov    eax,esi
c00136ec:	83 c2 0d             	add    edx,0xd
c00136ef:	0f b6 f0             	movzx  esi,al
c00136f2:	0f b6 db             	movzx  ebx,bl
c00136f5:	56                   	push   esi
c00136f6:	53                   	push   ebx
c00136f7:	52                   	push   edx
c00136f8:	51                   	push   ecx
c00136f9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136fc:	83 c4 10             	add    esp,0x10
c00136ff:	5b                   	pop    ebx
c0013700:	5e                   	pop    esi
c0013701:	5f                   	pop    edi
c0013702:	c3                   	ret    
c0013703:	90                   	nop

c0013704 <File::exists()>:
c0013704:	83 ec 0c             	sub    esp,0xc
c0013707:	31 c0                	xor    eax,eax
c0013709:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013714:	80 f9 19             	cmp    cl,0x19
c0013717:	77 24                	ja     c001373d <File::exists()+0x39>
c0013719:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013720:	85 c9                	test   ecx,ecx
c0013722:	74 19                	je     c001373d <File::exists()+0x39>
c0013724:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001372a:	85 c9                	test   ecx,ecx
c001372c:	74 0f                	je     c001373d <File::exists()+0x39>
c001372e:	83 c2 0d             	add    edx,0xd
c0013731:	50                   	push   eax
c0013732:	50                   	push   eax
c0013733:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013735:	52                   	push   edx
c0013736:	51                   	push   ecx
c0013737:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001373a:	83 c4 10             	add    esp,0x10
c001373d:	83 c4 0c             	add    esp,0xc
c0013740:	c3                   	ret    
c0013741:	90                   	nop

c0013742 <File::stat(unsigned long long*, bool*)>:
c0013742:	56                   	push   esi
c0013743:	53                   	push   ebx
c0013744:	50                   	push   eax
c0013745:	b8 0b 00 00 00       	mov    eax,0xb
c001374a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013752:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013759:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001375d:	80 f9 19             	cmp    cl,0x19
c0013760:	77 3d                	ja     c001379f <File::stat(unsigned long long*, bool*)+0x5d>
c0013762:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013769:	85 c9                	test   ecx,ecx
c001376b:	74 32                	je     c001379f <File::stat(unsigned long long*, bool*)+0x5d>
c001376d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013773:	85 c9                	test   ecx,ecx
c0013775:	74 28                	je     c001379f <File::stat(unsigned long long*, bool*)+0x5d>
c0013777:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013779:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001377d:	74 13                	je     c0013792 <File::stat(unsigned long long*, bool*)+0x50>
c001377f:	83 ec 04             	sub    esp,0x4
c0013782:	56                   	push   esi
c0013783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013789:	51                   	push   ecx
c001378a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001378d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013790:	eb 0a                	jmp    c001379c <File::stat(unsigned long long*, bool*)+0x5a>
c0013792:	53                   	push   ebx
c0013793:	83 c2 0d             	add    edx,0xd
c0013796:	56                   	push   esi
c0013797:	52                   	push   edx
c0013798:	51                   	push   ecx
c0013799:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	5a                   	pop    edx
c00137a0:	5b                   	pop    ebx
c00137a1:	5e                   	pop    esi
c00137a2:	c3                   	ret    

c00137a3 <Fs::setcwd(Process*, char*)>:
c00137a3:	55                   	push   ebp
c00137a4:	57                   	push   edi
c00137a5:	56                   	push   esi
c00137a6:	53                   	push   ebx
c00137a7:	81 ec 20 02 00 00    	sub    esp,0x220
c00137ad:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137b4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137ba:	57                   	push   edi
c00137bb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137c2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137c6:	56                   	push   esi
c00137c7:	e8 bc fa ff ff       	call   c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00137cf:	e8 d0 cf fe ff       	call   c00007a4 <strlen>
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	83 f8 02             	cmp    eax,0x2
c00137da:	77 17                	ja     c00137f3 <Fs::setcwd(Process*, char*)+0x50>
c00137dc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137e1:	83 e8 41             	sub    eax,0x41
c00137e4:	83 f8 19             	cmp    eax,0x19
c00137e7:	76 24                	jbe    c001380d <Fs::setcwd(Process*, char*)+0x6a>
c00137e9:	b8 03 00 00 00       	mov    eax,0x3
c00137ee:	e9 e0 00 00 00       	jmp    c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c00137f3:	83 ec 0c             	sub    esp,0xc
c00137f6:	56                   	push   esi
c00137f7:	e8 a8 cf fe ff       	call   c00007a4 <strlen>
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	83 f8 03             	cmp    eax,0x3
c0013802:	75 34                	jne    c0013838 <Fs::setcwd(Process*, char*)+0x95>
c0013804:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013809:	75 2d                	jne    c0013838 <Fs::setcwd(Process*, char*)+0x95>
c001380b:	eb cf                	jmp    c00137dc <Fs::setcwd(Process*, char*)+0x39>
c001380d:	8b 14 85 40 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0bc0]
c0013814:	b8 05 00 00 00       	mov    eax,0x5
c0013819:	85 d2                	test   edx,edx
c001381b:	0f 84 b2 00 00 00    	je     c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c0013821:	b8 06 00 00 00       	mov    eax,0x6
c0013826:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001382d:	0f 85 92 00 00 00    	jne    c00138c5 <Fs::setcwd(Process*, char*)+0x122>
c0013833:	e9 9b 00 00 00       	jmp    c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c0013838:	83 ec 0c             	sub    esp,0xc
c001383b:	68 14 01 00 00       	push   0x114
c0013840:	e8 d7 c0 ff ff       	call   c000f91c <malloc>
c0013845:	83 c4 0c             	add    esp,0xc
c0013848:	89 c3                	mov    ebx,eax
c001384a:	55                   	push   ebp
c001384b:	56                   	push   esi
c001384c:	50                   	push   eax
c001384d:	e8 e0 fb ff ff       	call   c0013432 <File::File(char const*, Process*)>
c0013852:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013857:	83 c4 0c             	add    esp,0xc
c001385a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001385e:	50                   	push   eax
c001385f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013863:	50                   	push   eax
c0013864:	53                   	push   ebx
c0013865:	e8 d8 fe ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	83 f8 02             	cmp    eax,0x2
c0013870:	74 04                	je     c0013876 <Fs::setcwd(Process*, char*)+0xd3>
c0013872:	85 c0                	test   eax,eax
c0013874:	74 1c                	je     c0013892 <Fs::setcwd(Process*, char*)+0xef>
c0013876:	b8 01 00 00 00       	mov    eax,0x1
c001387b:	85 db                	test   ebx,ebx
c001387d:	74 54                	je     c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c001387f:	83 ec 0c             	sub    esp,0xc
c0013882:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013884:	53                   	push   ebx
c0013885:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	b8 01 00 00 00       	mov    eax,0x1
c0013890:	eb 41                	jmp    c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c0013892:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013897:	75 1c                	jne    c00138b5 <Fs::setcwd(Process*, char*)+0x112>
c0013899:	b8 02 00 00 00       	mov    eax,0x2
c001389e:	85 db                	test   ebx,ebx
c00138a0:	74 31                	je     c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a7:	53                   	push   ebx
c00138a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	b8 02 00 00 00       	mov    eax,0x2
c00138b3:	eb 1e                	jmp    c00138d3 <Fs::setcwd(Process*, char*)+0x130>
c00138b5:	85 db                	test   ebx,ebx
c00138b7:	74 0c                	je     c00138c5 <Fs::setcwd(Process*, char*)+0x122>
c00138b9:	83 ec 0c             	sub    esp,0xc
c00138bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138be:	53                   	push   ebx
c00138bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	50                   	push   eax
c00138c6:	50                   	push   eax
c00138c7:	56                   	push   esi
c00138c8:	57                   	push   edi
c00138c9:	e8 76 cf fe ff       	call   c0000844 <strcpy>
c00138ce:	83 c4 10             	add    esp,0x10
c00138d1:	31 c0                	xor    eax,eax
c00138d3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138d9:	5b                   	pop    ebx
c00138da:	5e                   	pop    esi
c00138db:	5f                   	pop    edi
c00138dc:	5d                   	pop    ebp
c00138dd:	c3                   	ret    

c00138de <Directory::Directory(char const*, Process*)>:
c00138de:	83 ec 0c             	sub    esp,0xc
c00138e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e5:	83 ec 08             	sub    esp,0x8
c00138e8:	6a 00                	push   0x0
c00138ea:	50                   	push   eax
c00138eb:	e8 9a dd ff ff       	call   c001168a <UnixFile::UnixFile(int)>
c00138f0:	83 c4 10             	add    esp,0x10
c00138f3:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c00138f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fc:	89 10                	mov    DWORD PTR [eax],edx
c00138fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013902:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390c:	83 c0 0d             	add    eax,0xd
c001390f:	83 ec 04             	sub    esp,0x4
c0013912:	52                   	push   edx
c0013913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013917:	50                   	push   eax
c0013918:	e8 6b f9 ff ff       	call   c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>
c001391d:	83 c4 10             	add    esp,0x10
c0013920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013924:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013927:	8d 50 bf             	lea    edx,[eax-0x41]
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013938:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001393c:	90                   	nop
c001393d:	83 c4 0c             	add    esp,0xc
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Directory::open()>:
c0013942:	53                   	push   ebx
c0013943:	b8 0b 00 00 00       	mov    eax,0xb
c0013948:	83 ec 08             	sub    esp,0x8
c001394b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001394f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013956:	80 fa 19             	cmp    dl,0x19
c0013959:	77 3d                	ja     c0013998 <Directory::open()+0x56>
c001395b:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013962:	85 d2                	test   edx,edx
c0013964:	74 32                	je     c0013998 <Directory::open()+0x56>
c0013966:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001396c:	85 d2                	test   edx,edx
c001396e:	74 28                	je     c0013998 <Directory::open()+0x56>
c0013970:	b8 06 00 00 00       	mov    eax,0x6
c0013975:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013979:	75 1d                	jne    c0013998 <Directory::open()+0x56>
c001397b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013981:	50                   	push   eax
c0013982:	8b 02                	mov    eax,DWORD PTR [edx]
c0013984:	51                   	push   ecx
c0013985:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013988:	51                   	push   ecx
c0013989:	52                   	push   edx
c001398a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001398d:	83 c4 10             	add    esp,0x10
c0013990:	85 c0                	test   eax,eax
c0013992:	75 04                	jne    c0013998 <Directory::open()+0x56>
c0013994:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013998:	83 c4 08             	add    esp,0x8
c001399b:	5b                   	pop    ebx
c001399c:	c3                   	ret    
c001399d:	90                   	nop

c001399e <Directory::close()>:
c001399e:	53                   	push   ebx
c001399f:	b8 0b 00 00 00       	mov    eax,0xb
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139ab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139b2:	80 fa 19             	cmp    dl,0x19
c00139b5:	77 41                	ja     c00139f8 <Directory::close()+0x5a>
c00139b7:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c00139be:	85 db                	test   ebx,ebx
c00139c0:	74 36                	je     c00139f8 <Directory::close()+0x5a>
c00139c2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139c9:	74 2d                	je     c00139f8 <Directory::close()+0x5a>
c00139cb:	b8 05 00 00 00       	mov    eax,0x5
c00139d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139d4:	74 22                	je     c00139f8 <Directory::close()+0x5a>
c00139d6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139da:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c00139e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139e7:	53                   	push   ebx
c00139e8:	53                   	push   ebx
c00139e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00139eb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139f1:	50                   	push   eax
c00139f2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139f5:	83 c4 10             	add    esp,0x10
c00139f8:	83 c4 08             	add    esp,0x8
c00139fb:	5b                   	pop    ebx
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <Directory::unlink()>:
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	b8 0b 00 00 00       	mov    eax,0xb
c0013a06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a11:	80 f9 19             	cmp    cl,0x19
c0013a14:	77 2f                	ja     c0013a45 <Directory::unlink()+0x47>
c0013a16:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013a1d:	85 c9                	test   ecx,ecx
c0013a1f:	74 24                	je     c0013a45 <Directory::unlink()+0x47>
c0013a21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a27:	85 c9                	test   ecx,ecx
c0013a29:	74 1a                	je     c0013a45 <Directory::unlink()+0x47>
c0013a2b:	b8 06 00 00 00       	mov    eax,0x6
c0013a30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a34:	75 0f                	jne    c0013a45 <Directory::unlink()+0x47>
c0013a36:	83 c2 0d             	add    edx,0xd
c0013a39:	50                   	push   eax
c0013a3a:	50                   	push   eax
c0013a3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a3d:	52                   	push   edx
c0013a3e:	51                   	push   ecx
c0013a3f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	83 c4 0c             	add    esp,0xc
c0013a48:	c3                   	ret    
c0013a49:	90                   	nop

c0013a4a <Directory::rename(char const*)>:
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a5d:	80 f9 19             	cmp    cl,0x19
c0013a60:	77 32                	ja     c0013a94 <Directory::rename(char const*)+0x4a>
c0013a62:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013a69:	85 c9                	test   ecx,ecx
c0013a6b:	74 27                	je     c0013a94 <Directory::rename(char const*)+0x4a>
c0013a6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a73:	85 c9                	test   ecx,ecx
c0013a75:	74 1d                	je     c0013a94 <Directory::rename(char const*)+0x4a>
c0013a77:	b8 06 00 00 00       	mov    eax,0x6
c0013a7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a80:	75 12                	jne    c0013a94 <Directory::rename(char const*)+0x4a>
c0013a82:	83 c2 0d             	add    edx,0xd
c0013a85:	50                   	push   eax
c0013a86:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a8c:	52                   	push   edx
c0013a8d:	51                   	push   ecx
c0013a8e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	83 c4 0c             	add    esp,0xc
c0013a97:	c3                   	ret    

c0013a98 <Directory::exists()>:
c0013a98:	83 ec 0c             	sub    esp,0xc
c0013a9b:	31 c0                	xor    eax,eax
c0013a9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa8:	80 f9 19             	cmp    cl,0x19
c0013aab:	77 24                	ja     c0013ad1 <Directory::exists()+0x39>
c0013aad:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013ab4:	85 c9                	test   ecx,ecx
c0013ab6:	74 19                	je     c0013ad1 <Directory::exists()+0x39>
c0013ab8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abe:	85 c9                	test   ecx,ecx
c0013ac0:	74 0f                	je     c0013ad1 <Directory::exists()+0x39>
c0013ac2:	83 c2 0d             	add    edx,0xd
c0013ac5:	50                   	push   eax
c0013ac6:	50                   	push   eax
c0013ac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac9:	52                   	push   edx
c0013aca:	51                   	push   ecx
c0013acb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013ace:	83 c4 10             	add    esp,0x10
c0013ad1:	83 c4 0c             	add    esp,0xc
c0013ad4:	c3                   	ret    
c0013ad5:	90                   	nop

c0013ad6 <Directory::read(dirent*)>:
c0013ad6:	83 ec 1c             	sub    esp,0x1c
c0013ad9:	b8 0b 00 00 00       	mov    eax,0xb
c0013ade:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ae2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae9:	80 fa 19             	cmp    dl,0x19
c0013aec:	77 30                	ja     c0013b1e <Directory::read(dirent*)+0x48>
c0013aee:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013af5:	85 d2                	test   edx,edx
c0013af7:	74 25                	je     c0013b1e <Directory::read(dirent*)+0x48>
c0013af9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b00:	74 1c                	je     c0013b1e <Directory::read(dirent*)+0x48>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b07:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b0b:	52                   	push   edx
c0013b0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b10:	6a 00                	push   0x0
c0013b12:	68 10 01 00 00       	push   0x110
c0013b17:	51                   	push   ecx
c0013b18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b1b:	83 c4 20             	add    esp,0x20
c0013b1e:	83 c4 1c             	add    esp,0x1c
c0013b21:	c3                   	ret    

c0013b22 <Directory::create()>:
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	b8 0b 00 00 00       	mov    eax,0xb
c0013b2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b35:	80 f9 19             	cmp    cl,0x19
c0013b38:	77 2f                	ja     c0013b69 <Directory::create()+0x47>
c0013b3a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013b41:	85 c9                	test   ecx,ecx
c0013b43:	74 24                	je     c0013b69 <Directory::create()+0x47>
c0013b45:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b4b:	85 c9                	test   ecx,ecx
c0013b4d:	74 1a                	je     c0013b69 <Directory::create()+0x47>
c0013b4f:	b8 06 00 00 00       	mov    eax,0x6
c0013b54:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b58:	75 0f                	jne    c0013b69 <Directory::create()+0x47>
c0013b5a:	83 c2 0d             	add    edx,0xd
c0013b5d:	50                   	push   eax
c0013b5e:	50                   	push   eax
c0013b5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b61:	52                   	push   edx
c0013b62:	51                   	push   ecx
c0013b63:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	83 c4 0c             	add    esp,0xc
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b6e:	b8 0a 00 00 00       	mov    eax,0xa
c0013b73:	c3                   	ret    

c0013b74 <Bus::Bus(char const*)>:
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7b:	83 ec 08             	sub    esp,0x8
c0013b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b82:	50                   	push   eax
c0013b83:	e8 70 09 00 00       	call   c00144f8 <Device::Device(char const*)>
c0013b88:	83 c4 10             	add    esp,0x10
c0013b8b:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0013b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b94:	89 10                	mov    DWORD PTR [eax],edx
c0013b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013ba4:	90                   	nop
c0013ba5:	83 c4 0c             	add    esp,0xc
c0013ba8:	c3                   	ret    
c0013ba9:	90                   	nop

c0013baa <Bus::~Bus()>:
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0013bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb6:	89 10                	mov    DWORD PTR [eax],edx
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	50                   	push   eax
c0013bc0:	e8 15 06 00 00       	call   c00141da <Device::~Device()>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	90                   	nop
c0013bc9:	83 c4 0c             	add    esp,0xc
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Bus::~Bus()>:
c0013bce:	83 ec 0c             	sub    esp,0xc
c0013bd1:	83 ec 0c             	sub    esp,0xc
c0013bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd8:	e8 cd ff ff ff       	call   c0013baa <Bus::~Bus()>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	83 ec 08             	sub    esp,0x8
c0013be3:	68 58 01 00 00       	push   0x158
c0013be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bec:	e8 02 f2 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 c4 0c             	add    esp,0xc
c0013bf7:	c3                   	ret    

c0013bf8 <Buzzer::Buzzer(char const*)>:
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bff:	83 ec 08             	sub    esp,0x8
c0013c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c06:	50                   	push   eax
c0013c07:	e8 ec 08 00 00       	call   c00144f8 <Device::Device(char const*)>
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0013c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c18:	89 10                	mov    DWORD PTR [eax],edx
c0013c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c36:	90                   	nop
c0013c37:	83 c4 0c             	add    esp,0xc
c0013c3a:	c3                   	ret    
c0013c3b:	90                   	nop

c0013c3c <Buzzer::~Buzzer()>:
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0013c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c48:	89 10                	mov    DWORD PTR [eax],edx
c0013c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	50                   	push   eax
c0013c52:	e8 83 05 00 00       	call   c00141da <Device::~Device()>
c0013c57:	83 c4 10             	add    esp,0x10
c0013c5a:	90                   	nop
c0013c5b:	83 c4 0c             	add    esp,0xc
c0013c5e:	c3                   	ret    
c0013c5f:	90                   	nop

c0013c60 <Buzzer::~Buzzer()>:
c0013c60:	83 ec 0c             	sub    esp,0xc
c0013c63:	83 ec 0c             	sub    esp,0xc
c0013c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6a:	e8 cd ff ff ff       	call   c0013c3c <Buzzer::~Buzzer()>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	83 ec 08             	sub    esp,0x8
c0013c75:	68 5c 01 00 00       	push   0x15c
c0013c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c7e:	e8 70 f1 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	83 c4 0c             	add    esp,0xc
c0013c89:	c3                   	ret    

c0013c8a <Buzzer::stop()>:
c0013c8a:	83 ec 14             	sub    esp,0x14
c0013c8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c91:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c93:	6a 00                	push   0x0
c0013c95:	50                   	push   eax
c0013c96:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c99:	83 c4 1c             	add    esp,0x1c
c0013c9c:	c3                   	ret    

c0013c9d <beepThread(void*)>:
c0013c9d:	53                   	push   ebx
c0013c9e:	83 ec 08             	sub    esp,0x8
c0013ca1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0013ca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013caa:	48                   	dec    eax
c0013cab:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0013cb0:	75 01                	jne    c0013cb3 <beepThread(void*)+0x16>
c0013cb2:	fb                   	sti    
c0013cb3:	50                   	push   eax
c0013cb4:	50                   	push   eax
c0013cb5:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cba:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cc0:	52                   	push   edx
c0013cc1:	50                   	push   eax
c0013cc2:	e8 c2 aa 00 00       	call   c001e789 <nanoSleep(unsigned long long)>
c0013cc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cca:	e8 bb ff ff ff       	call   c0013c8a <Buzzer::stop()>
c0013ccf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cd7:	83 c4 18             	add    esp,0x18
c0013cda:	5b                   	pop    ebx
c0013cdb:	e9 a5 a9 00 00       	jmp    c001e685 <blockTask(TaskState)>

c0013ce0 <Buzzer::beep(int, int, bool)>:
c0013ce0:	57                   	push   edi
c0013ce1:	56                   	push   esi
c0013ce2:	53                   	push   ebx
c0013ce3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ce7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ceb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cef:	52                   	push   edx
c0013cf0:	52                   	push   edx
c0013cf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf7:	56                   	push   esi
c0013cf8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	89 f8                	mov    eax,edi
c0013d00:	84 c0                	test   al,al
c0013d02:	74 1f                	je     c0013d23 <Buzzer::beep(int, int, bool)+0x43>
c0013d04:	50                   	push   eax
c0013d05:	50                   	push   eax
c0013d06:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d0c:	99                   	cdq    
c0013d0d:	52                   	push   edx
c0013d0e:	50                   	push   eax
c0013d0f:	e8 75 aa 00 00       	call   c001e789 <nanoSleep(unsigned long long)>
c0013d14:	83 c4 10             	add    esp,0x10
c0013d17:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d1b:	5b                   	pop    ebx
c0013d1c:	5e                   	pop    esi
c0013d1d:	5f                   	pop    edi
c0013d1e:	e9 67 ff ff ff       	jmp    c0013c8a <Buzzer::stop()>
c0013d23:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d29:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0013d2e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d36:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d3a:	c7 44 24 14 9d 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c9d
c0013d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d46:	5b                   	pop    ebx
c0013d47:	5e                   	pop    esi
c0013d48:	5f                   	pop    edi
c0013d49:	e9 f4 a4 00 00       	jmp    c001e242 <Process::createThread(void (*)(void*), void*, int)>

c0013d4e <User::loadClockSettings(int)>:
c0013d4e:	53                   	push   ebx
c0013d4f:	83 ec 14             	sub    esp,0x14
c0013d52:	68 14 01 00 00       	push   0x114
c0013d57:	e8 c0 bb ff ff       	call   c000f91c <malloc>
c0013d5c:	83 c4 0c             	add    esp,0xc
c0013d5f:	89 c3                	mov    ebx,eax
c0013d61:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c0013d67:	68 70 b4 02 c0       	push   0xc002b470
c0013d6c:	50                   	push   eax
c0013d6d:	e8 c0 f6 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c0013d72:	58                   	pop    eax
c0013d73:	5a                   	pop    edx
c0013d74:	6a 01                	push   0x1
c0013d76:	53                   	push   ebx
c0013d77:	e8 1a f7 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c0013d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d7f:	e8 70 f7 ff ff       	call   c00134f4 <File::close()>
c0013d84:	83 c4 10             	add    esp,0x10
c0013d87:	85 db                	test   ebx,ebx
c0013d89:	74 0f                	je     c0013d9a <User::loadClockSettings(int)+0x4c>
c0013d8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d94:	83 c4 08             	add    esp,0x8
c0013d97:	5b                   	pop    ebx
c0013d98:	ff e0                	jmp    eax
c0013d9a:	83 c4 08             	add    esp,0x8
c0013d9d:	5b                   	pop    ebx
c0013d9e:	c3                   	ret    
c0013d9f:	90                   	nop

c0013da0 <Clock::Clock(char const*)>:
c0013da0:	83 ec 0c             	sub    esp,0xc
c0013da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da7:	83 ec 08             	sub    esp,0x8
c0013daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dae:	50                   	push   eax
c0013daf:	e8 44 07 00 00       	call   c00144f8 <Device::Device(char const*)>
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c0013dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc0:	89 10                	mov    DWORD PTR [eax],edx
c0013dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dd0:	90                   	nop
c0013dd1:	83 c4 0c             	add    esp,0xc
c0013dd4:	c3                   	ret    
c0013dd5:	90                   	nop

c0013dd6 <Clock::~Clock()>:
c0013dd6:	83 ec 0c             	sub    esp,0xc
c0013dd9:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c0013dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de2:	89 10                	mov    DWORD PTR [eax],edx
c0013de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de8:	83 ec 0c             	sub    esp,0xc
c0013deb:	50                   	push   eax
c0013dec:	e8 e9 03 00 00       	call   c00141da <Device::~Device()>
c0013df1:	83 c4 10             	add    esp,0x10
c0013df4:	90                   	nop
c0013df5:	83 c4 0c             	add    esp,0xc
c0013df8:	c3                   	ret    
c0013df9:	90                   	nop

c0013dfa <Clock::~Clock()>:
c0013dfa:	83 ec 0c             	sub    esp,0xc
c0013dfd:	83 ec 0c             	sub    esp,0xc
c0013e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e04:	e8 cd ff ff ff       	call   c0013dd6 <Clock::~Clock()>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	83 ec 08             	sub    esp,0x8
c0013e0f:	68 58 01 00 00       	push   0x158
c0013e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e18:	e8 d6 ef ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	83 c4 0c             	add    esp,0xc
c0013e23:	c3                   	ret    

c0013e24 <Clock::timeInSecondsLocal()>:
c0013e24:	53                   	push   ebx
c0013e25:	83 ec 14             	sub    esp,0x14
c0013e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e2e:	50                   	push   eax
c0013e2f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e32:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c0013e39:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c0013e3f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e45:	89 cb                	mov    ebx,ecx
c0013e47:	c1 fb 1f             	sar    ebx,0x1f
c0013e4a:	01 c8                	add    eax,ecx
c0013e4c:	11 da                	adc    edx,ebx
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	31 c9                	xor    ecx,ecx
c0013e53:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0013e5a:	74 05                	je     c0013e61 <Clock::timeInSecondsLocal()+0x3d>
c0013e5c:	b9 08 07 00 00       	mov    ecx,0x708
c0013e61:	31 db                	xor    ebx,ebx
c0013e63:	01 c8                	add    eax,ecx
c0013e65:	11 da                	adc    edx,ebx
c0013e67:	83 c4 08             	add    esp,0x8
c0013e6a:	5b                   	pop    ebx
c0013e6b:	c3                   	ret    

c0013e6c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e6c:	57                   	push   edi
c0013e6d:	56                   	push   esi
c0013e6e:	53                   	push   ebx
c0013e6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e77:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e79:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e7d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e80:	0f b6 05 bc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002efbc
c0013e87:	03 05 c0 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efc0
c0013e8d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e93:	99                   	cdq    
c0013e94:	29 c6                	sub    esi,eax
c0013e96:	19 d7                	sbb    edi,edx
c0013e98:	89 f0                	mov    eax,esi
c0013e9a:	89 fa                	mov    edx,edi
c0013e9c:	31 f6                	xor    esi,esi
c0013e9e:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0013ea5:	74 05                	je     c0013eac <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ea7:	be 08 07 00 00       	mov    esi,0x708
c0013eac:	31 ff                	xor    edi,edi
c0013eae:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eb2:	29 f0                	sub    eax,esi
c0013eb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb8:	19 fa                	sbb    edx,edi
c0013eba:	89 d8                	mov    eax,ebx
c0013ebc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ec0:	5b                   	pop    ebx
c0013ec1:	5e                   	pop    esi
c0013ec2:	5f                   	pop    edi
c0013ec3:	ff e0                	jmp    eax

c0013ec5 <datetimeToSeconds(datetime_t)>:
c0013ec5:	55                   	push   ebp
c0013ec6:	57                   	push   edi
c0013ec7:	56                   	push   esi
c0013ec8:	53                   	push   ebx
c0013ec9:	83 ec 14             	sub    esp,0x14
c0013ecc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ed0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ed4:	89 d3                	mov    ebx,edx
c0013ed6:	0f b6 c6             	movzx  eax,dh
c0013ed9:	c1 eb 10             	shr    ebx,0x10
c0013edc:	48                   	dec    eax
c0013edd:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ee2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ee6:	0f b6 f5             	movzx  esi,ch
c0013ee9:	89 cf                	mov    edi,ecx
c0013eeb:	6b f6 3c             	imul   esi,esi,0x3c
c0013eee:	c1 ef 10             	shr    edi,0x10
c0013ef1:	0f b6 c9             	movzx  ecx,cl
c0013ef4:	89 f8                	mov    eax,edi
c0013ef6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013efc:	0f b6 f8             	movzx  edi,al
c0013eff:	0f b6 d2             	movzx  edx,dl
c0013f02:	01 fe                	add    esi,edi
c0013f04:	01 f1                	add    ecx,esi
c0013f06:	0f b7 f3             	movzx  esi,bx
c0013f09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f0d:	c1 f9 1f             	sar    ecx,0x1f
c0013f10:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f19:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f1e:	8b 0c 8d e0 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b20]
c0013f25:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f29:	76 29                	jbe    c0013f54 <datetimeToSeconds(datetime_t)+0x8f>
c0013f2b:	f6 c3 03             	test   bl,0x3
c0013f2e:	75 24                	jne    c0013f54 <datetimeToSeconds(datetime_t)+0x8f>
c0013f30:	31 d2                	xor    edx,edx
c0013f32:	bf 64 00 00 00       	mov    edi,0x64
c0013f37:	89 d8                	mov    eax,ebx
c0013f39:	66 f7 f7             	div    di
c0013f3c:	66 85 d2             	test   dx,dx
c0013f3f:	75 12                	jne    c0013f53 <datetimeToSeconds(datetime_t)+0x8e>
c0013f41:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f47:	bf 90 01 00 00       	mov    edi,0x190
c0013f4c:	99                   	cdq    
c0013f4d:	f7 ff                	idiv   edi
c0013f4f:	85 d2                	test   edx,edx
c0013f51:	75 01                	jne    c0013f54 <datetimeToSeconds(datetime_t)+0x8f>
c0013f53:	41                   	inc    ecx
c0013f54:	66 83 fb 46          	cmp    bx,0x46
c0013f58:	76 45                	jbe    c0013f9f <datetimeToSeconds(datetime_t)+0xda>
c0013f5a:	bb 46 00 00 00       	mov    ebx,0x46
c0013f5f:	bf 64 00 00 00       	mov    edi,0x64
c0013f64:	bd 90 01 00 00       	mov    ebp,0x190
c0013f69:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f6e:	f6 c3 03             	test   bl,0x3
c0013f71:	75 23                	jne    c0013f96 <datetimeToSeconds(datetime_t)+0xd1>
c0013f73:	89 d8                	mov    eax,ebx
c0013f75:	99                   	cdq    
c0013f76:	f7 ff                	idiv   edi
c0013f78:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f7d:	85 d2                	test   edx,edx
c0013f7f:	75 15                	jne    c0013f96 <datetimeToSeconds(datetime_t)+0xd1>
c0013f81:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f87:	99                   	cdq    
c0013f88:	f7 fd                	idiv   ebp
c0013f8a:	83 fa 01             	cmp    edx,0x1
c0013f8d:	19 c0                	sbb    eax,eax
c0013f8f:	f7 d0                	not    eax
c0013f91:	05 6e 01 00 00       	add    eax,0x16e
c0013f96:	01 c1                	add    ecx,eax
c0013f98:	43                   	inc    ebx
c0013f99:	39 f3                	cmp    ebx,esi
c0013f9b:	7c cc                	jl     c0013f69 <datetimeToSeconds(datetime_t)+0xa4>
c0013f9d:	eb 35                	jmp    c0013fd4 <datetimeToSeconds(datetime_t)+0x10f>
c0013f9f:	74 33                	je     c0013fd4 <datetimeToSeconds(datetime_t)+0x10f>
c0013fa1:	b8 45 00 00 00       	mov    eax,0x45
c0013fa6:	89 c2                	mov    edx,eax
c0013fa8:	83 e2 03             	and    edx,0x3
c0013fab:	39 f0                	cmp    eax,esi
c0013fad:	7e 0f                	jle    c0013fbe <datetimeToSeconds(datetime_t)+0xf9>
c0013faf:	83 fa 01             	cmp    edx,0x1
c0013fb2:	19 d2                	sbb    edx,edx
c0013fb4:	48                   	dec    eax
c0013fb5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fbc:	eb e8                	jmp    c0013fa6 <datetimeToSeconds(datetime_t)+0xe1>
c0013fbe:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fc3:	85 d2                	test   edx,edx
c0013fc5:	75 0b                	jne    c0013fd2 <datetimeToSeconds(datetime_t)+0x10d>
c0013fc7:	66 83 fb 01          	cmp    bx,0x1
c0013fcb:	19 c0                	sbb    eax,eax
c0013fcd:	05 6e 01 00 00       	add    eax,0x16e
c0013fd2:	29 c1                	sub    ecx,eax
c0013fd4:	b8 80 51 01 00       	mov    eax,0x15180
c0013fd9:	f7 e9                	imul   ecx
c0013fdb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fdf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fe3:	83 c4 14             	add    esp,0x14
c0013fe6:	5b                   	pop    ebx
c0013fe7:	5e                   	pop    esi
c0013fe8:	5f                   	pop    edi
c0013fe9:	5d                   	pop    ebp
c0013fea:	c3                   	ret    
c0013feb:	90                   	nop

c0013fec <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fec:	57                   	push   edi
c0013fed:	56                   	push   esi
c0013fee:	53                   	push   ebx
c0013fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ff3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ff5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ffc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014000:	e8 c0 fe ff ff       	call   c0013ec5 <datetimeToSeconds(datetime_t)>
c0014005:	59                   	pop    ecx
c0014006:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c001400d:	5b                   	pop    ebx
c001400e:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c0014014:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001401a:	89 cb                	mov    ebx,ecx
c001401c:	c1 fb 1f             	sar    ebx,0x1f
c001401f:	29 c8                	sub    eax,ecx
c0014021:	19 da                	sbb    edx,ebx
c0014023:	31 c9                	xor    ecx,ecx
c0014025:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c001402c:	74 05                	je     c0014033 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001402e:	b9 08 07 00 00       	mov    ecx,0x708
c0014033:	31 db                	xor    ebx,ebx
c0014035:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014039:	29 c8                	sub    eax,ecx
c001403b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001403f:	19 da                	sbb    edx,ebx
c0014041:	89 f8                	mov    eax,edi
c0014043:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014047:	5b                   	pop    ebx
c0014048:	5e                   	pop    esi
c0014049:	5f                   	pop    edi
c001404a:	ff e0                	jmp    eax

c001404c <secondsToDatetime(unsigned long long)>:
c001404c:	55                   	push   ebp
c001404d:	57                   	push   edi
c001404e:	56                   	push   esi
c001404f:	53                   	push   ebx
c0014050:	83 ec 1c             	sub    esp,0x1c
c0014053:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014057:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001405b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001405f:	6a 00                	push   0x0
c0014061:	68 80 51 01 00       	push   0x15180
c0014066:	55                   	push   ebp
c0014067:	57                   	push   edi
c0014068:	e8 37 31 01 00       	call   c00271a4 <__udivdi3>
c001406d:	83 c4 10             	add    esp,0x10
c0014070:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014076:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001407a:	6a 00                	push   0x0
c001407c:	68 80 51 01 00       	push   0x15180
c0014081:	55                   	push   ebp
c0014082:	57                   	push   edi
c0014083:	bf 10 0e 00 00       	mov    edi,0xe10
c0014088:	e8 17 32 01 00       	call   c00272a4 <__umoddi3>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	99                   	cdq    
c0014091:	f7 ff                	idiv   edi
c0014093:	bf 3c 00 00 00       	mov    edi,0x3c
c0014098:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001409b:	89 d0                	mov    eax,edx
c001409d:	99                   	cdq    
c001409e:	f7 ff                	idiv   edi
c00140a0:	85 db                	test   ebx,ebx
c00140a2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140a5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140a8:	79 11                	jns    c00140bb <secondsToDatetime(unsigned long long)+0x6f>
c00140aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140ae:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140b4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b9:	eb 07                	jmp    c00140c2 <secondsToDatetime(unsigned long long)+0x76>
c00140bb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140c0:	89 d8                	mov    eax,ebx
c00140c2:	bf b4 05 00 00       	mov    edi,0x5b4
c00140c7:	99                   	cdq    
c00140c8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140cd:	f7 f9                	idiv   ecx
c00140cf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140d8:	31 d2                	xor    edx,edx
c00140da:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140e2:	01 c3                	add    ebx,eax
c00140e4:	89 d8                	mov    eax,ebx
c00140e6:	f7 f1                	div    ecx
c00140e8:	31 d2                	xor    edx,edx
c00140ea:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140ed:	89 d8                	mov    eax,ebx
c00140ef:	f7 f7                	div    edi
c00140f1:	31 d2                	xor    edx,edx
c00140f3:	29 c1                	sub    ecx,eax
c00140f5:	89 d8                	mov    eax,ebx
c00140f7:	f7 f5                	div    ebp
c00140f9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140fe:	29 c1                	sub    ecx,eax
c0014100:	31 d2                	xor    edx,edx
c0014102:	89 c8                	mov    eax,ecx
c0014104:	f7 f5                	div    ebp
c0014106:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001410b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001410f:	31 d2                	xor    edx,edx
c0014111:	89 c8                	mov    eax,ecx
c0014113:	f7 f5                	div    ebp
c0014115:	31 d2                	xor    edx,edx
c0014117:	01 c3                	add    ebx,eax
c0014119:	89 c8                	mov    eax,ecx
c001411b:	f7 f7                	div    edi
c001411d:	bf 99 00 00 00       	mov    edi,0x99
c0014122:	29 c3                	sub    ebx,eax
c0014124:	31 d2                	xor    edx,edx
c0014126:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001412e:	29 c3                	sub    ebx,eax
c0014130:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014133:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014136:	bb 05 00 00 00       	mov    ebx,0x5
c001413b:	83 c1 02             	add    ecx,0x2
c001413e:	89 c8                	mov    eax,ecx
c0014140:	f7 f7                	div    edi
c0014142:	31 d2                	xor    edx,edx
c0014144:	89 c7                	mov    edi,eax
c0014146:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001414c:	83 c0 02             	add    eax,0x2
c001414f:	f7 f3                	div    ebx
c0014151:	89 eb                	mov    ebx,ebp
c0014153:	29 c3                	sub    ebx,eax
c0014155:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001415b:	88 1e                	mov    BYTE PTR [esi],bl
c001415d:	19 c0                	sbb    eax,eax
c001415f:	31 d2                	xor    edx,edx
c0014161:	83 e0 0c             	and    eax,0xc
c0014164:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014168:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014170:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014174:	83 f9 01             	cmp    ecx,0x1
c0014177:	0f 96 c2             	setbe  dl
c001417a:	41                   	inc    ecx
c001417b:	01 d0                	add    eax,edx
c001417d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014180:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014184:	83 c4 1c             	add    esp,0x1c
c0014187:	89 f0                	mov    eax,esi
c0014189:	5b                   	pop    ebx
c001418a:	5e                   	pop    esi
c001418b:	5f                   	pop    edi
c001418c:	5d                   	pop    ebp
c001418d:	c2 04 00             	ret    0x4

c0014190 <Clock::timeInDatetimeLocal()>:
c0014190:	53                   	push   ebx
c0014191:	83 ec 14             	sub    esp,0x14
c0014194:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001419c:	e8 83 fc ff ff       	call   c0013e24 <Clock::timeInSecondsLocal()>
c00141a1:	83 c4 0c             	add    esp,0xc
c00141a4:	52                   	push   edx
c00141a5:	50                   	push   eax
c00141a6:	53                   	push   ebx
c00141a7:	e8 a0 fe ff ff       	call   c001404c <secondsToDatetime(unsigned long long)>
c00141ac:	89 d8                	mov    eax,ebx
c00141ae:	83 c4 14             	add    esp,0x14
c00141b1:	5b                   	pop    ebx
c00141b2:	c2 04 00             	ret    0x4
c00141b5:	90                   	nop

c00141b6 <Device::hibernate()>:
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <Device::wake()>:
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <Device::detect()>:
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <Device::disableLegacy()>:
c00141bc:	c3                   	ret    
c00141bd:	90                   	nop

c00141be <Device::powerSaving(PowerSavingLevel)>:
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <DriverlessDevice::close(int, int, void*)>:
c00141c0:	31 c0                	xor    eax,eax
c00141c2:	c3                   	ret    
c00141c3:	90                   	nop

c00141c4 <DriverlessDevice::detect()>:
c00141c4:	c3                   	ret    
c00141c5:	90                   	nop

c00141c6 <DriverlessDevice::open(int, int, void*)>:
c00141c6:	83 ec 18             	sub    esp,0x18
c00141c9:	68 10 b5 02 c0       	push   0xc002b510
c00141ce:	e8 bc 66 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00141d3:	83 c8 ff             	or     eax,0xffffffff
c00141d6:	83 c4 1c             	add    esp,0x1c
c00141d9:	c3                   	ret    

c00141da <Device::~Device()>:
c00141da:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c00141df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e3:	89 10                	mov    DWORD PTR [eax],edx
c00141e5:	90                   	nop
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::~Device()>:
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ef:	e8 e6 ff ff ff       	call   c00141da <Device::~Device()>
c00141f4:	83 c4 04             	add    esp,0x4
c00141f7:	83 ec 08             	sub    esp,0x8
c00141fa:	68 58 01 00 00       	push   0x158
c00141ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014203:	e8 eb eb ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	83 c4 0c             	add    esp,0xc
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <Device::findAndLoadDriver()>:
c0014210:	c3                   	ret    
c0014211:	90                   	nop

c0014212 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014212:	57                   	push   edi
c0014213:	b9 09 00 00 00       	mov    ecx,0x9
c0014218:	56                   	push   esi
c0014219:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001421d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014221:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001422b:	81 c7 18 01 00 00    	add    edi,0x118
c0014231:	fc                   	cld    
c0014232:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014234:	5e                   	pop    esi
c0014235:	5f                   	pop    edi
c0014236:	c3                   	ret    
c0014237:	90                   	nop

c0014238 <Device::preOpenACPI(void*, char*, char*)>:
c0014238:	56                   	push   esi
c0014239:	53                   	push   ebx
c001423a:	83 ec 08             	sub    esp,0x8
c001423d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014241:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014245:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001424f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014253:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014259:	6a 1e                	push   0x1e
c001425b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014265:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001426b:	50                   	push   eax
c001426c:	e8 f7 c4 fe ff       	call   c0000768 <memcpy>
c0014271:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014275:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014279:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014281:	83 c4 14             	add    esp,0x14
c0014284:	5b                   	pop    ebx
c0014285:	5e                   	pop    esi
c0014286:	e9 dd c4 fe ff       	jmp    c0000768 <memcpy>
c001428b:	90                   	nop

c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001428c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014290:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014295:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001429c:	75 0b                	jne    c00142a9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001429e:	8b 00                	mov    eax,DWORD PTR [eax]
c00142a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142a7:	eb 1e                	jmp    c00142c7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142a9:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00142ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142b4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142bc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142c7:	ff e0                	jmp    eax
c00142c9:	90                   	nop

c00142ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ce:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142d3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142da:	75 0b                	jne    c00142e7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00142de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142e2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142e5:	eb 1e                	jmp    c0014305 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142e7:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00142ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014302:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014305:	ff e0                	jmp    eax
c0014307:	90                   	nop

c0014308 <Device::addChild(Device*)>:
c0014308:	53                   	push   ebx
c0014309:	83 ec 08             	sub    esp,0x8
c001430c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014310:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014314:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001431a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014320:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014322:	85 d2                	test   edx,edx
c0014324:	74 04                	je     c001432a <Device::addChild(Device*)+0x22>
c0014326:	89 d3                	mov    ebx,edx
c0014328:	eb f6                	jmp    c0014320 <Device::addChild(Device*)+0x18>
c001432a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001432d:	83 ec 0c             	sub    esp,0xc
c0014330:	6a 08                	push   0x8
c0014332:	e8 e5 b5 ff ff       	call   c000f91c <malloc>
c0014337:	89 03                	mov    DWORD PTR [ebx],eax
c0014339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001433f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014346:	83 c4 18             	add    esp,0x18
c0014349:	5b                   	pop    ebx
c001434a:	c3                   	ret    
c001434b:	90                   	nop

c001434c <Device::removeAllChildren()>:
c001434c:	56                   	push   esi
c001434d:	53                   	push   ebx
c001434e:	52                   	push   edx
c001434f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014353:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435c:	74 17                	je     c0014375 <Device::removeAllChildren()+0x29>
c001435e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014361:	85 c0                	test   eax,eax
c0014363:	74 0c                	je     c0014371 <Device::removeAllChildren()+0x25>
c0014365:	83 ec 0c             	sub    esp,0xc
c0014368:	8b 10                	mov    edx,DWORD PTR [eax]
c001436a:	50                   	push   eax
c001436b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014373:	eb e4                	jmp    c0014359 <Device::removeAllChildren()+0xd>
c0014375:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001437b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014381:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014387:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001438e:	58                   	pop    eax
c001438f:	5b                   	pop    ebx
c0014390:	5e                   	pop    esi
c0014391:	c3                   	ret    

c0014392 <Device::hibernateAll()>:
c0014392:	53                   	push   ebx
c0014393:	83 ec 14             	sub    esp,0x14
c0014396:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001439a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439c:	53                   	push   ebx
c001439d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143a6:	83 c4 10             	add    esp,0x10
c00143a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ac:	74 0f                	je     c00143bd <Device::hibernateAll()+0x2b>
c00143ae:	83 ec 0c             	sub    esp,0xc
c00143b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b4:	e8 d9 ff ff ff       	call   c0014392 <Device::hibernateAll()>
c00143b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143bb:	eb e9                	jmp    c00143a6 <Device::hibernateAll()+0x14>
c00143bd:	83 c4 08             	add    esp,0x8
c00143c0:	5b                   	pop    ebx
c00143c1:	c3                   	ret    

c00143c2 <Device::wakeAll()>:
c00143c2:	53                   	push   ebx
c00143c3:	83 ec 14             	sub    esp,0x14
c00143c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143cc:	53                   	push   ebx
c00143cd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143dc:	74 0f                	je     c00143ed <Device::wakeAll()+0x2b>
c00143de:	83 ec 0c             	sub    esp,0xc
c00143e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e4:	e8 d9 ff ff ff       	call   c00143c2 <Device::wakeAll()>
c00143e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143eb:	eb e9                	jmp    c00143d6 <Device::wakeAll()+0x14>
c00143ed:	83 c4 08             	add    esp,0x8
c00143f0:	5b                   	pop    ebx
c00143f1:	c3                   	ret    

c00143f2 <Device::detectAll()>:
c00143f2:	53                   	push   ebx
c00143f3:	83 ec 14             	sub    esp,0x14
c00143f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fc:	53                   	push   ebx
c00143fd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014400:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001440c:	74 0f                	je     c001441d <Device::detectAll()+0x2b>
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014414:	e8 d9 ff ff ff       	call   c00143f2 <Device::detectAll()>
c0014419:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001441b:	eb e9                	jmp    c0014406 <Device::detectAll()+0x14>
c001441d:	83 c4 08             	add    esp,0x8
c0014420:	5b                   	pop    ebx
c0014421:	c3                   	ret    

c0014422 <Device::disableLegacyAll()>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 14             	sub    esp,0x14
c0014426:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	53                   	push   ebx
c001442d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014430:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443c:	74 0f                	je     c001444d <Device::disableLegacyAll()+0x2b>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014444:	e8 d9 ff ff ff       	call   c0014422 <Device::disableLegacyAll()>
c0014449:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444b:	eb e9                	jmp    c0014436 <Device::disableLegacyAll()+0x14>
c001444d:	83 c4 08             	add    esp,0x8
c0014450:	5b                   	pop    ebx
c0014451:	c3                   	ret    

c0014452 <Device::loadDriversForAll()>:
c0014452:	53                   	push   ebx
c0014453:	83 ec 08             	sub    esp,0x8
c0014456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014460:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014462:	85 db                	test   ebx,ebx
c0014464:	74 12                	je     c0014478 <Device::loadDriversForAll()+0x26>
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001446c:	e8 e1 ff ff ff       	call   c0014452 <Device::loadDriversForAll()>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	89 d8                	mov    eax,ebx
c0014476:	eb e8                	jmp    c0014460 <Device::loadDriversForAll()+0xe>
c0014478:	83 c4 08             	add    esp,0x8
c001447b:	5b                   	pop    ebx
c001447c:	c3                   	ret    
c001447d:	90                   	nop

c001447e <Device::closeAll()>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 08             	sub    esp,0x8
c0014482:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014488:	6a 00                	push   0x0
c001448a:	6a 00                	push   0x0
c001448c:	6a 00                	push   0x0
c001448e:	53                   	push   ebx
c001448f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014492:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001449e:	74 0f                	je     c00144af <Device::closeAll()+0x31>
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a6:	e8 d3 ff ff ff       	call   c001447e <Device::closeAll()>
c00144ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ad:	eb e9                	jmp    c0014498 <Device::closeAll()+0x1a>
c00144af:	83 c4 08             	add    esp,0x8
c00144b2:	5b                   	pop    ebx
c00144b3:	c3                   	ret    

c00144b4 <Device::powerSavingAll(PowerSavingLevel)>:
c00144b4:	56                   	push   esi
c00144b5:	53                   	push   ebx
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144bd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c3:	56                   	push   esi
c00144c4:	53                   	push   ebx
c00144c5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ce:	83 c4 10             	add    esp,0x10
c00144d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144d4:	74 0f                	je     c00144e5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144d6:	52                   	push   edx
c00144d7:	52                   	push   edx
c00144d8:	56                   	push   esi
c00144d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144dc:	e8 d3 ff ff ff       	call   c00144b4 <Device::powerSavingAll(PowerSavingLevel)>
c00144e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144e3:	eb e9                	jmp    c00144ce <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144e5:	58                   	pop    eax
c00144e6:	5b                   	pop    ebx
c00144e7:	5e                   	pop    esi
c00144e8:	c3                   	ret    
c00144e9:	90                   	nop

c00144ea <Device::setName(char const*)>:
c00144ea:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144f2:	e9 4d c3 fe ff       	jmp    c0000844 <strcpy>
c00144f7:	90                   	nop

c00144f8 <Device::Device(char const*)>:
c00144f8:	83 ec 1c             	sub    esp,0x1c
c00144fb:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c0014500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014504:	89 10                	mov    DWORD PTR [eax],edx
c0014506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014534:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001453e:	83 ec 08             	sub    esp,0x8
c0014541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014549:	e8 9c ff ff ff       	call   c00144ea <Device::setName(char const*)>
c001454e:	83 c4 10             	add    esp,0x10
c0014551:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014559:	83 ec 0c             	sub    esp,0xc
c001455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014560:	e8 b7 b3 ff ff       	call   c000f91c <malloc>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001456e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014575:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014579:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001457f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014583:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014589:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001458f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014593:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014599:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145af:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ba:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145ee:	90                   	nop
c00145ef:	83 c4 1c             	add    esp,0x1c
c00145f2:	c3                   	ret    
c00145f3:	90                   	nop

c00145f4 <Device::getName()>:
c00145f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145f8:	05 d0 00 00 00       	add    eax,0xd0
c00145fd:	c3                   	ret    

c00145fe <DriverlessDevice::DriverlessDevice(char const*)>:
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014605:	83 ec 08             	sub    esp,0x8
c0014608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460c:	50                   	push   eax
c001460d:	e8 e6 fe ff ff       	call   c00144f8 <Device::Device(char const*)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c001461a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461e:	89 10                	mov    DWORD PTR [eax],edx
c0014620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014624:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001462e:	90                   	nop
c001462f:	83 c4 0c             	add    esp,0xc
c0014632:	c3                   	ret    
c0014633:	90                   	nop

c0014634 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014634:	57                   	push   edi
c0014635:	56                   	push   esi
c0014636:	53                   	push   ebx
c0014637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001463b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001463f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014643:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014649:	75 0c                	jne    c0014657 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001464b:	52                   	push   edx
c001464c:	52                   	push   edx
c001464d:	53                   	push   ebx
c001464e:	56                   	push   esi
c001464f:	e8 a2 4a 01 00       	call   c00290f6 <LinkedList<Device>::addElement(Device*)>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001465d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014660:	74 12                	je     c0014674 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014662:	50                   	push   eax
c0014663:	57                   	push   edi
c0014664:	56                   	push   esi
c0014665:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014668:	e8 c7 ff ff ff       	call   c0014634 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001466d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	eb e9                	jmp    c001465d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014674:	5b                   	pop    ebx
c0014675:	5e                   	pop    esi
c0014676:	5f                   	pop    edi
c0014677:	c3                   	ret    

c0014678 <getDevicesOfType(DeviceType)>:
c0014678:	53                   	push   ebx
c0014679:	83 ec 14             	sub    esp,0x14
c001467c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014680:	53                   	push   ebx
c0014681:	e8 4c 4b 01 00       	call   c00291d2 <LinkedList<Device>::LinkedList()>
c0014686:	83 c4 0c             	add    esp,0xc
c0014689:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001468d:	53                   	push   ebx
c001468e:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0014694:	e8 9b ff ff ff       	call   c0014634 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014699:	89 d8                	mov    eax,ebx
c001469b:	83 c4 18             	add    esp,0x18
c001469e:	5b                   	pop    ebx
c001469f:	c2 04 00             	ret    0x4

c00146a2 <HardDiskController::HardDiskController(char const*)>:
c00146a2:	83 ec 0c             	sub    esp,0xc
c00146a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a9:	83 ec 08             	sub    esp,0x8
c00146ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b0:	50                   	push   eax
c00146b1:	e8 42 fe ff ff       	call   c00144f8 <Device::Device(char const*)>
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c00146be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c2:	89 10                	mov    DWORD PTR [eax],edx
c00146c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146d2:	90                   	nop
c00146d3:	83 c4 0c             	add    esp,0xc
c00146d6:	c3                   	ret    
c00146d7:	90                   	nop

c00146d8 <HardDiskController::~HardDiskController()>:
c00146d8:	83 ec 0c             	sub    esp,0xc
c00146db:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c00146e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e4:	89 10                	mov    DWORD PTR [eax],edx
c00146e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	50                   	push   eax
c00146ee:	e8 e7 fa ff ff       	call   c00141da <Device::~Device()>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	90                   	nop
c00146f7:	83 c4 0c             	add    esp,0xc
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <HardDiskController::~HardDiskController()>:
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	83 ec 0c             	sub    esp,0xc
c0014702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014706:	e8 cd ff ff ff       	call   c00146d8 <HardDiskController::~HardDiskController()>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	83 ec 08             	sub    esp,0x8
c0014711:	68 58 01 00 00       	push   0x158
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	e8 d4 e6 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	83 c4 0c             	add    esp,0xc
c0014725:	c3                   	ret    

c0014726 <PhysicalDisk::eject()>:
c0014726:	83 ec 18             	sub    esp,0x18
c0014729:	68 b4 b5 02 c0       	push   0xc002b5b4
c001472e:	e8 a0 e7 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014733:	83 c8 ff             	or     eax,0xffffffff
c0014736:	83 c4 1c             	add    esp,0x1c
c0014739:	c3                   	ret    

c001473a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001473a:	83 ec 0c             	sub    esp,0xc
c001473d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014741:	83 ec 08             	sub    esp,0x8
c0014744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014748:	50                   	push   eax
c0014749:	e8 aa fd ff ff       	call   c00144f8 <Device::Device(char const*)>
c001474e:	83 c4 10             	add    esp,0x10
c0014751:	ba e4 b5 02 c0       	mov    edx,0xc002b5e4
c0014756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475a:	89 10                	mov    DWORD PTR [eax],edx
c001475c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014760:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014776:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014784:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014788:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014792:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001479c:	90                   	nop
c001479d:	83 c4 0c             	add    esp,0xc
c00147a0:	c3                   	ret    
c00147a1:	90                   	nop

c00147a2 <PhysicalDisk::startCache()>:
c00147a2:	56                   	push   esi
c00147a3:	53                   	push   ebx
c00147a4:	83 ec 10             	sub    esp,0x10
c00147a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147ab:	6a 44                	push   0x44
c00147ad:	e8 6a b1 ff ff       	call   c000f91c <malloc>
c00147b2:	89 c6                	mov    esi,eax
c00147b4:	58                   	pop    eax
c00147b5:	5a                   	pop    edx
c00147b6:	53                   	push   ebx
c00147b7:	56                   	push   esi
c00147b8:	e8 cf 28 00 00       	call   c001708c <VCache::VCache(PhysicalDisk*)>
c00147bd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147c3:	83 c4 14             	add    esp,0x14
c00147c6:	5b                   	pop    ebx
c00147c7:	5e                   	pop    esi
c00147c8:	c3                   	ret    
c00147c9:	90                   	nop

c00147ca <PhysicalDisk::~PhysicalDisk()>:
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	ba e4 b5 02 c0       	mov    edx,0xc002b5e4
c00147d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d6:	89 10                	mov    DWORD PTR [eax],edx
c00147d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147dc:	83 ec 0c             	sub    esp,0xc
c00147df:	50                   	push   eax
c00147e0:	e8 f5 f9 ff ff       	call   c00141da <Device::~Device()>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	90                   	nop
c00147e9:	83 c4 0c             	add    esp,0xc
c00147ec:	c3                   	ret    
c00147ed:	90                   	nop

c00147ee <PhysicalDisk::~PhysicalDisk()>:
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	83 ec 0c             	sub    esp,0xc
c00147f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f8:	e8 cd ff ff ff       	call   c00147ca <PhysicalDisk::~PhysicalDisk()>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	83 ec 08             	sub    esp,0x8
c0014803:	68 6c 01 00 00       	push   0x16c
c0014808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480c:	e8 e2 e5 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	83 c4 0c             	add    esp,0xc
c0014817:	c3                   	ret    

c0014818 <FPU::FPU(char const*)>:
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014826:	50                   	push   eax
c0014827:	e8 cc fc ff ff       	call   c00144f8 <Device::Device(char const*)>
c001482c:	83 c4 10             	add    esp,0x10
c001482f:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c0014834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014838:	89 10                	mov    DWORD PTR [eax],edx
c001483a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014848:	90                   	nop
c0014849:	83 c4 0c             	add    esp,0xc
c001484c:	c3                   	ret    
c001484d:	90                   	nop

c001484e <FPU::~FPU()>:
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	89 10                	mov    DWORD PTR [eax],edx
c001485c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014860:	83 ec 0c             	sub    esp,0xc
c0014863:	50                   	push   eax
c0014864:	e8 71 f9 ff ff       	call   c00141da <Device::~Device()>
c0014869:	83 c4 10             	add    esp,0x10
c001486c:	90                   	nop
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	c3                   	ret    
c0014871:	90                   	nop

c0014872 <FPU::~FPU()>:
c0014872:	83 ec 0c             	sub    esp,0xc
c0014875:	83 ec 0c             	sub    esp,0xc
c0014878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487c:	e8 cd ff ff ff       	call   c001484e <FPU::~FPU()>
c0014881:	83 c4 10             	add    esp,0x10
c0014884:	83 ec 08             	sub    esp,0x8
c0014887:	68 58 01 00 00       	push   0x158
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	e8 5e e5 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	83 c4 0c             	add    esp,0xc
c001489b:	c3                   	ret    

c001489c <setupFPU()>:
c001489c:	53                   	push   ebx
c001489d:	83 ec 08             	sub    esp,0x8
c00148a0:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c00148a6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148ad:	74 19                	je     c00148c8 <setupFPU()+0x2c>
c00148af:	83 ec 0c             	sub    esp,0xc
c00148b2:	68 58 01 00 00       	push   0x158
c00148b7:	e8 60 b0 ff ff       	call   c000f91c <malloc>
c00148bc:	89 c3                	mov    ebx,eax
c00148be:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c1:	e8 60 14 01 00       	call   c0025d26 <AVX::AVX()>
c00148c6:	eb 5b                	jmp    c0014923 <setupFPU()+0x87>
c00148c8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148ce:	84 c0                	test   al,al
c00148d0:	79 19                	jns    c00148eb <setupFPU()+0x4f>
c00148d2:	83 ec 0c             	sub    esp,0xc
c00148d5:	68 58 01 00 00       	push   0x158
c00148da:	e8 3d b0 ff ff       	call   c000f91c <malloc>
c00148df:	89 c3                	mov    ebx,eax
c00148e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e4:	e8 63 15 01 00       	call   c0025e4c <SSE::SSE()>
c00148e9:	eb 38                	jmp    c0014923 <setupFPU()+0x87>
c00148eb:	a8 20                	test   al,0x20
c00148ed:	74 19                	je     c0014908 <setupFPU()+0x6c>
c00148ef:	83 ec 0c             	sub    esp,0xc
c00148f2:	68 58 01 00 00       	push   0x158
c00148f7:	e8 20 b0 ff ff       	call   c000f91c <malloc>
c00148fc:	89 c3                	mov    ebx,eax
c00148fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014901:	e8 b0 14 01 00       	call   c0025db6 <MMX::MMX()>
c0014906:	eb 1b                	jmp    c0014923 <setupFPU()+0x87>
c0014908:	a8 10                	test   al,0x10
c001490a:	74 1c                	je     c0014928 <setupFPU()+0x8c>
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	68 58 01 00 00       	push   0x158
c0014914:	e8 03 b0 ff ff       	call   c000f91c <malloc>
c0014919:	89 c3                	mov    ebx,eax
c001491b:	89 04 24             	mov    DWORD PTR [esp],eax
c001491e:	e8 b7 15 01 00       	call   c0025eda <x87::x87()>
c0014923:	83 c4 10             	add    esp,0x10
c0014926:	eb 24                	jmp    c001494c <setupFPU()+0xb0>
c0014928:	83 e0 ef             	and    eax,0xffffffef
c001492b:	83 ec 0c             	sub    esp,0xc
c001492e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014934:	68 14 b6 02 c0       	push   0xc002b614
c0014939:	e8 95 e5 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001493e:	0f 20 c0             	mov    eax,cr0
c0014941:	83 c8 04             	or     eax,0x4
c0014944:	0f 22 c0             	mov    cr0,eax
c0014947:	31 db                	xor    ebx,ebx
c0014949:	83 c4 10             	add    esp,0x10
c001494c:	89 d8                	mov    eax,ebx
c001494e:	83 c4 08             	add    esp,0x8
c0014951:	5b                   	pop    ebx
c0014952:	c3                   	ret    
c0014953:	90                   	nop

c0014954 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014958:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001495c:	c1 e0 04             	shl    eax,0x4
c001495f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014963:	8d 50 10             	lea    edx,[eax+0x10]
c0014966:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001496c:	74 08                	je     c0014976 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001496e:	83 c0 04             	add    eax,0x4
c0014971:	39 d0                	cmp    eax,edx
c0014973:	75 f1                	jne    c0014966 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014975:	c3                   	ret    
c0014976:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014980:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001498a:	eb e2                	jmp    c001496e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001498c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001498c:	57                   	push   edi
c001498d:	31 c0                	xor    eax,eax
c001498f:	56                   	push   esi
c0014990:	53                   	push   ebx
c0014991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014995:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014999:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001499d:	89 da                	mov    edx,ebx
c001499f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149a3:	c1 e2 04             	shl    edx,0x4
c00149a6:	01 ca                	add    edx,ecx
c00149a8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149b0:	74 16                	je     c00149c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149b2:	40                   	inc    eax
c00149b3:	83 f8 04             	cmp    eax,0x4
c00149b6:	75 f0                	jne    c00149a8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149b8:	c7 44 24 10 58 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b658
c00149c0:	5b                   	pop    ebx
c00149c1:	5e                   	pop    esi
c00149c2:	5f                   	pop    edi
c00149c3:	e9 c7 5e 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c00149c8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149cb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149ce:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149d4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149da:	5b                   	pop    ebx
c00149db:	5e                   	pop    esi
c00149dc:	5f                   	pop    edi
c00149dd:	c3                   	ret    

c00149de <doubleFault(regs*, void*)>:
c00149de:	55                   	push   ebp
c00149df:	89 e5                	mov    ebp,esp
c00149e1:	83 ec 08             	sub    esp,0x8
c00149e4:	83 ec 0c             	sub    esp,0xc
c00149e7:	68 93 b6 02 c0       	push   0xc002b693
c00149ec:	e8 9e 5e 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00149f1:	83 c4 10             	add    esp,0x10
c00149f4:	90                   	nop
c00149f5:	c9                   	leave  
c00149f6:	c3                   	ret    
c00149f7:	90                   	nop

c00149f8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149f8:	56                   	push   esi
c00149f9:	53                   	push   ebx
c00149fa:	50                   	push   eax
c00149fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a03:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a08:	75 35                	jne    c0014a3f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a0a:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a0d:	31 d2                	xor    edx,edx
c0014a0f:	89 c1                	mov    ecx,eax
c0014a11:	c1 e1 04             	shl    ecx,0x4
c0014a14:	01 f1                	add    ecx,esi
c0014a16:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a1e:	74 3e                	je     c0014a5e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a20:	42                   	inc    edx
c0014a21:	83 fa 04             	cmp    edx,0x4
c0014a24:	75 f0                	jne    c0014a16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a26:	83 ec 0c             	sub    esp,0xc
c0014a29:	68 d8 b6 02 c0       	push   0xc002b6d8
c0014a2e:	e8 5c 5e 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0014a33:	83 c4 10             	add    esp,0x10
c0014a36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a3b:	5a                   	pop    edx
c0014a3c:	5b                   	pop    ebx
c0014a3d:	5e                   	pop    esi
c0014a3e:	c3                   	ret    
c0014a3f:	83 ec 0c             	sub    esp,0xc
c0014a42:	56                   	push   esi
c0014a43:	e8 ac fb ff ff       	call   c00145f4 <Device::getName()>
c0014a48:	83 c4 10             	add    esp,0x10
c0014a4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a4e:	75 ba                	jne    c0014a0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a50:	83 fb 0f             	cmp    ebx,0xf
c0014a53:	7f 29                	jg     c0014a7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a55:	0f b6 9b 80 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f80]
c0014a5c:	eb ac                	jmp    c0014a0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a5e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a65:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a68:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a72:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a78:	89 d8                	mov    eax,ebx
c0014a7a:	5a                   	pop    edx
c0014a7b:	5b                   	pop    ebx
c0014a7c:	5e                   	pop    esi
c0014a7d:	c3                   	ret    
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	68 a0 b6 02 c0       	push   0xc002b6a0
c0014a86:	e8 04 5e 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	e9 77 ff ff ff       	jmp    c0014a0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a93:	90                   	nop

c0014a94 <InterruptController::clearAllHandlers(int, bool)>:
c0014a94:	56                   	push   esi
c0014a95:	53                   	push   ebx
c0014a96:	52                   	push   edx
c0014a97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a9f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014aa4:	75 61                	jne    c0014b07 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014aa6:	8d 46 20             	lea    eax,[esi+0x20]
c0014aa9:	c1 e6 04             	shl    esi,0x4
c0014aac:	c1 e0 04             	shl    eax,0x4
c0014aaf:	01 de                	add    esi,ebx
c0014ab1:	01 d8                	add    eax,ebx
c0014ab3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014abd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ac7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ad1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014adb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014ae5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014aef:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014af9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b03:	58                   	pop    eax
c0014b04:	5b                   	pop    ebx
c0014b05:	5e                   	pop    esi
c0014b06:	c3                   	ret    
c0014b07:	83 ec 0c             	sub    esp,0xc
c0014b0a:	53                   	push   ebx
c0014b0b:	e8 e4 fa ff ff       	call   c00145f4 <Device::getName()>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b16:	75 8e                	jne    c0014aa6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b18:	83 fe 0f             	cmp    esi,0xf
c0014b1b:	7f 09                	jg     c0014b26 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b1d:	0f b6 b6 80 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f80]
c0014b24:	eb 80                	jmp    c0014aa6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	68 14 b7 02 c0       	push   0xc002b714
c0014b2e:	e8 5c 5d 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	e9 6b ff ff ff       	jmp    c0014aa6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b3b:	90                   	nop

c0014b3c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b3c:	56                   	push   esi
c0014b3d:	53                   	push   ebx
c0014b3e:	52                   	push   edx
c0014b3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b47:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b4c:	75 3a                	jne    c0014b88 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b52:	8d 50 20             	lea    edx,[eax+0x20]
c0014b55:	c1 e2 04             	shl    edx,0x4
c0014b58:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b5b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b5f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b65:	74 0b                	je     c0014b72 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b67:	83 c0 04             	add    eax,0x4
c0014b6a:	39 d0                	cmp    eax,edx
c0014b6c:	75 f1                	jne    c0014b5f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b6e:	58                   	pop    eax
c0014b6f:	5b                   	pop    ebx
c0014b70:	5e                   	pop    esi
c0014b71:	c3                   	ret    
c0014b72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b7c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b86:	eb df                	jmp    c0014b67 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b88:	83 ec 0c             	sub    esp,0xc
c0014b8b:	56                   	push   esi
c0014b8c:	e8 63 fa ff ff       	call   c00145f4 <Device::getName()>
c0014b91:	83 c4 10             	add    esp,0x10
c0014b94:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b97:	75 b5                	jne    c0014b4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b99:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b9e:	7f 11                	jg     c0014bb1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba4:	0f b6 80 80 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f80]
c0014bab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014baf:	eb 9d                	jmp    c0014b4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bb1:	83 ec 0c             	sub    esp,0xc
c0014bb4:	68 14 b7 02 c0       	push   0xc002b714
c0014bb9:	e8 d1 5c 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	eb 8b                	jmp    c0014b4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bc3 <nmiHandler(regs*, void*)>:
c0014bc3:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0014bc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bcc:	e9 95 a4 ff ff       	jmp    c000f066 <Computer::handleNMI()>

c0014bd1 <int_handler>:
c0014bd1:	55                   	push   ebp
c0014bd2:	57                   	push   edi
c0014bd3:	56                   	push   esi
c0014bd4:	53                   	push   ebx
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bdc:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c0014be3:	74 0b                	je     c0014bf0 <int_handler+0x1f>
c0014be5:	fa                   	cli    
c0014be6:	f4                   	hlt    
c0014be7:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c0014bee:	75 f5                	jne    c0014be5 <int_handler+0x14>
c0014bf0:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0014bf5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bfe:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c04:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c07:	83 f8 17             	cmp    eax,0x17
c0014c0a:	77 13                	ja     c0014c1f <int_handler+0x4e>
c0014c0c:	83 ec 08             	sub    esp,0x8
c0014c0f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c11:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c14:	0f b6 c0             	movzx  eax,al
c0014c17:	50                   	push   eax
c0014c18:	57                   	push   edi
c0014c19:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	83 c3 15             	add    ebx,0x15
c0014c22:	c1 e3 04             	shl    ebx,0x4
c0014c25:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c29:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c30:	31 db                	xor    ebx,ebx
c0014c32:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c36:	85 c0                	test   eax,eax
c0014c38:	74 13                	je     c0014c4d <int_handler+0x7c>
c0014c3a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c3d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c41:	74 1c                	je     c0014c5f <int_handler+0x8e>
c0014c43:	83 ec 08             	sub    esp,0x8
c0014c46:	52                   	push   edx
c0014c47:	56                   	push   esi
c0014c48:	ff d0                	call   eax
c0014c4a:	83 c4 10             	add    esp,0x10
c0014c4d:	43                   	inc    ebx
c0014c4e:	83 fb 04             	cmp    ebx,0x4
c0014c51:	75 df                	jne    c0014c32 <int_handler+0x61>
c0014c53:	83 c4 0c             	add    esp,0xc
c0014c56:	31 c0                	xor    eax,eax
c0014c58:	5b                   	pop    ebx
c0014c59:	31 d2                	xor    edx,edx
c0014c5b:	5e                   	pop    esi
c0014c5c:	5f                   	pop    edi
c0014c5d:	5d                   	pop    ebp
c0014c5e:	c3                   	ret    
c0014c5f:	83 ec 08             	sub    esp,0x8
c0014c62:	52                   	push   edx
c0014c63:	56                   	push   esi
c0014c64:	ff d0                	call   eax
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	83 c4 0c             	add    esp,0xc
c0014c6c:	5b                   	pop    ebx
c0014c6d:	5e                   	pop    esi
c0014c6e:	5f                   	pop    edi
c0014c6f:	5d                   	pop    ebp
c0014c70:	c3                   	ret    
c0014c71:	90                   	nop

c0014c72 <InterruptController::InterruptController(char const*)>:
c0014c72:	83 ec 1c             	sub    esp,0x1c
c0014c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c79:	83 ec 08             	sub    esp,0x8
c0014c7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c80:	50                   	push   eax
c0014c81:	e8 72 f8 ff ff       	call   c00144f8 <Device::Device(char const*)>
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	ba d4 b9 02 c0       	mov    edx,0xc002b9d4
c0014c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c92:	89 10                	mov    DWORD PTR [eax],edx
c0014c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c98:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014ca2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014caa:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cb2:	7f 5e                	jg     c0014d12 <InterruptController::InterruptController(char const*)+0xa0>
c0014cb4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cbc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cc1:	7f 49                	jg     c0014d0c <InterruptController::InterruptController(char const*)+0x9a>
c0014cc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ccb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cd6:	01 ca                	add    edx,ecx
c0014cd8:	83 c2 54             	add    edx,0x54
c0014cdb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ceb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cf6:	01 ca                	add    edx,ecx
c0014cf8:	81 c2 54 04 00 00    	add    edx,0x454
c0014cfe:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d06:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d0a:	eb b0                	jmp    c0014cbc <InterruptController::InterruptController(char const*)+0x4a>
c0014d0c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d10:	eb 98                	jmp    c0014caa <InterruptController::InterruptController(char const*)+0x38>
c0014d12:	90                   	nop
c0014d13:	83 c4 1c             	add    esp,0x1c
c0014d16:	c3                   	ret    
c0014d17:	90                   	nop

c0014d18 <InterruptController::~InterruptController()>:
c0014d18:	83 ec 0c             	sub    esp,0xc
c0014d1b:	ba d4 b9 02 c0       	mov    edx,0xc002b9d4
c0014d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d24:	89 10                	mov    DWORD PTR [eax],edx
c0014d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d2a:	83 ec 0c             	sub    esp,0xc
c0014d2d:	50                   	push   eax
c0014d2e:	e8 a7 f4 ff ff       	call   c00141da <Device::~Device()>
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	90                   	nop
c0014d37:	83 c4 0c             	add    esp,0xc
c0014d3a:	c3                   	ret    
c0014d3b:	90                   	nop

c0014d3c <InterruptController::~InterruptController()>:
c0014d3c:	83 ec 0c             	sub    esp,0xc
c0014d3f:	83 ec 0c             	sub    esp,0xc
c0014d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d46:	e8 cd ff ff ff       	call   c0014d18 <InterruptController::~InterruptController()>
c0014d4b:	83 c4 10             	add    esp,0x10
c0014d4e:	83 ec 08             	sub    esp,0x8
c0014d51:	68 58 21 00 00       	push   0x2158
c0014d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d5a:	e8 94 e0 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	83 c4 0c             	add    esp,0xc
c0014d65:	c3                   	ret    

c0014d66 <displayDebugInfo(regs*)>:
c0014d66:	55                   	push   ebp
c0014d67:	57                   	push   edi
c0014d68:	56                   	push   esi
c0014d69:	53                   	push   ebx
c0014d6a:	83 ec 24             	sub    esp,0x24
c0014d6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d71:	0f 20 c2             	mov    edx,cr0
c0014d74:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d78:	0f 20 d7             	mov    edi,cr2
c0014d7b:	0f 20 de             	mov    esi,cr3
c0014d7e:	0f 20 e5             	mov    ebp,cr4
c0014d81:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d84:	68 4e b7 02 c0       	push   0xc002b74e
c0014d89:	e8 45 e1 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014d8e:	59                   	pop    ecx
c0014d8f:	58                   	pop    eax
c0014d90:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d93:	68 59 b7 02 c0       	push   0xc002b759
c0014d98:	e8 36 e1 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014d9d:	58                   	pop    eax
c0014d9e:	5a                   	pop    edx
c0014d9f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014da2:	68 64 b7 02 c0       	push   0xc002b764
c0014da7:	e8 27 e1 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014dac:	59                   	pop    ecx
c0014dad:	58                   	pop    eax
c0014dae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014db1:	68 6f b7 02 c0       	push   0xc002b76f
c0014db6:	e8 18 e1 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014dbb:	58                   	pop    eax
c0014dbc:	5a                   	pop    edx
c0014dbd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dc0:	68 7a b7 02 c0       	push   0xc002b77a
c0014dc5:	e8 09 e1 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014dca:	59                   	pop    ecx
c0014dcb:	58                   	pop    eax
c0014dcc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014dcf:	68 85 b7 02 c0       	push   0xc002b785
c0014dd4:	e8 fa e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014dd9:	58                   	pop    eax
c0014dda:	5a                   	pop    edx
c0014ddb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dde:	68 90 b7 02 c0       	push   0xc002b790
c0014de3:	e8 eb e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014de8:	59                   	pop    ecx
c0014de9:	58                   	pop    eax
c0014dea:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ded:	68 9b b7 02 c0       	push   0xc002b79b
c0014df2:	e8 dc e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014df7:	58                   	pop    eax
c0014df8:	5a                   	pop    edx
c0014df9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dfc:	68 a6 b7 02 c0       	push   0xc002b7a6
c0014e01:	e8 cd e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e0b:	68 b5 b7 02 c0       	push   0xc002b7b5
c0014e10:	e8 be e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e1a:	68 c0 b7 02 c0       	push   0xc002b7c0
c0014e1f:	e8 af e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014e24:	59                   	pop    ecx
c0014e25:	58                   	pop    eax
c0014e26:	57                   	push   edi
c0014e27:	68 cb b7 02 c0       	push   0xc002b7cb
c0014e2c:	e8 a2 e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014e31:	58                   	pop    eax
c0014e32:	5a                   	pop    edx
c0014e33:	56                   	push   esi
c0014e34:	68 d6 b7 02 c0       	push   0xc002b7d6
c0014e39:	e8 95 e0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0014e3e:	59                   	pop    ecx
c0014e3f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4a:	e8 a7 be ff ff       	call   c0010cf6 <setActiveTerminal(VgaText*)>
c0014e4f:	58                   	pop    eax
c0014e50:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e53:	5a                   	pop    edx
c0014e54:	c1 e0 05             	shl    eax,0x5
c0014e57:	05 e0 dd 02 c0       	add    eax,0xc002dde0
c0014e5c:	50                   	push   eax
c0014e5d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e68:	e8 15 c2 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014e6d:	59                   	pop    ecx
c0014e6e:	58                   	pop    eax
c0014e6f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e74:	68 e1 b7 02 c0       	push   0xc002b7e1
c0014e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7f:	e8 fe c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014e84:	58                   	pop    eax
c0014e85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e8a:	5a                   	pop    edx
c0014e8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e8e:	83 c0 0c             	add    eax,0xc
c0014e91:	50                   	push   eax
c0014e92:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9d:	e8 e0 c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014ea2:	59                   	pop    ecx
c0014ea3:	58                   	pop    eax
c0014ea4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ea9:	68 ea b7 02 c0       	push   0xc002b7ea
c0014eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb4:	e8 c9 c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014eb9:	58                   	pop    eax
c0014eba:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ebf:	5a                   	pop    edx
c0014ec0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec9:	e8 da c1 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014ece:	59                   	pop    ecx
c0014ecf:	58                   	pop    eax
c0014ed0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ed5:	68 f2 b7 02 c0       	push   0xc002b7f2
c0014eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee0:	e8 9d c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014ee5:	58                   	pop    eax
c0014ee6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014eeb:	5a                   	pop    edx
c0014eec:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014eef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef5:	e8 ae c1 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f01:	68 fa b7 02 c0       	push   0xc002b7fa
c0014f06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0c:	e8 71 c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014f11:	58                   	pop    eax
c0014f12:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f17:	5a                   	pop    edx
c0014f18:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f21:	e8 82 c1 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014f26:	59                   	pop    ecx
c0014f27:	58                   	pop    eax
c0014f28:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f2d:	68 02 b8 02 c0       	push   0xc002b802
c0014f32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f38:	e8 45 c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f43:	5a                   	pop    edx
c0014f44:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4d:	e8 56 c1 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014f52:	59                   	pop    ecx
c0014f53:	58                   	pop    eax
c0014f54:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f59:	68 0a b8 02 c0       	push   0xc002b80a
c0014f5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f64:	e8 19 c1 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014f69:	58                   	pop    eax
c0014f6a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f6f:	5a                   	pop    edx
c0014f70:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 2a c1 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014f7e:	59                   	pop    ecx
c0014f7f:	58                   	pop    eax
c0014f80:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f85:	68 12 b8 02 c0       	push   0xc002b812
c0014f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f90:	e8 ed c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014f95:	58                   	pop    eax
c0014f96:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f9b:	5a                   	pop    edx
c0014f9c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa5:	e8 fe c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014faa:	59                   	pop    ecx
c0014fab:	58                   	pop    eax
c0014fac:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fb1:	68 1a b8 02 c0       	push   0xc002b81a
c0014fb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbc:	e8 c1 c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fc7:	5a                   	pop    edx
c0014fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fcc:	52                   	push   edx
c0014fcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd3:	e8 d0 c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0014fd8:	59                   	pop    ecx
c0014fd9:	58                   	pop    eax
c0014fda:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fdf:	68 23 b8 02 c0       	push   0xc002b823
c0014fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fea:	e8 93 c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0014fef:	58                   	pop    eax
c0014ff0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ff5:	5a                   	pop    edx
c0014ff6:	57                   	push   edi
c0014ff7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffd:	e8 a6 c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0015002:	59                   	pop    ecx
c0015003:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015008:	5f                   	pop    edi
c0015009:	68 2b b8 02 c0       	push   0xc002b82b
c001500e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015014:	e8 69 c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0015019:	58                   	pop    eax
c001501a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001501f:	5a                   	pop    edx
c0015020:	56                   	push   esi
c0015021:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015027:	e8 7c c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001502c:	59                   	pop    ecx
c001502d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015032:	5e                   	pop    esi
c0015033:	68 33 b8 02 c0       	push   0xc002b833
c0015038:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503e:	e8 3f c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0015043:	5f                   	pop    edi
c0015044:	58                   	pop    eax
c0015045:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001504a:	55                   	push   ebp
c001504b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015051:	e8 52 c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0015056:	58                   	pop    eax
c0015057:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001505c:	5a                   	pop    edx
c001505d:	68 3b b8 02 c0       	push   0xc002b83b
c0015062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015068:	e8 15 c0 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001506d:	0f 21 c0             	mov    eax,db0
c0015070:	59                   	pop    ecx
c0015071:	5e                   	pop    esi
c0015072:	50                   	push   eax
c0015073:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507e:	e8 25 c0 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0015083:	5f                   	pop    edi
c0015084:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015089:	5d                   	pop    ebp
c001508a:	68 44 b8 02 c0       	push   0xc002b844
c001508f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015095:	e8 e8 bf ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001509a:	0f 21 c8             	mov    eax,db1
c001509d:	5a                   	pop    edx
c001509e:	59                   	pop    ecx
c001509f:	50                   	push   eax
c00150a0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ab:	e8 f8 bf ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c00150b0:	5e                   	pop    esi
c00150b1:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150b6:	5f                   	pop    edi
c00150b7:	68 4c b8 02 c0       	push   0xc002b84c
c00150bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c2:	e8 bb bf ff ff       	call   c0011082 <VgaText::puts(char const*)>
c00150c7:	0f 21 d0             	mov    eax,db2
c00150ca:	5d                   	pop    ebp
c00150cb:	5a                   	pop    edx
c00150cc:	50                   	push   eax
c00150cd:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d8:	e8 cb bf ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c00150dd:	59                   	pop    ecx
c00150de:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150e3:	5e                   	pop    esi
c00150e4:	68 54 b8 02 c0       	push   0xc002b854
c00150e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ef:	e8 8e bf ff ff       	call   c0011082 <VgaText::puts(char const*)>
c00150f4:	0f 21 d8             	mov    eax,db3
c00150f7:	5f                   	pop    edi
c00150f8:	5d                   	pop    ebp
c00150f9:	50                   	push   eax
c00150fa:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015105:	e8 9e bf ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001510a:	58                   	pop    eax
c001510b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015110:	5a                   	pop    edx
c0015111:	68 5c b8 02 c0       	push   0xc002b85c
c0015116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511c:	e8 61 bf ff ff       	call   c0011082 <VgaText::puts(char const*)>
c0015121:	0f 21 f0             	mov    eax,db6
c0015124:	59                   	pop    ecx
c0015125:	5e                   	pop    esi
c0015126:	50                   	push   eax
c0015127:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001512c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015132:	e8 71 bf ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0015137:	5f                   	pop    edi
c0015138:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001513d:	5d                   	pop    ebp
c001513e:	68 64 b8 02 c0       	push   0xc002b864
c0015143:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015149:	e8 34 bf ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001514e:	0f 21 f8             	mov    eax,db7
c0015151:	5a                   	pop    edx
c0015152:	59                   	pop    ecx
c0015153:	50                   	push   eax
c0015154:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015159:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515f:	e8 44 bf ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c0015164:	5e                   	pop    esi
c0015165:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015168:	e8 ea 88 00 00       	call   c001da57 <Thr::getDriverNameFromAddress(unsigned long)>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	85 c0                	test   eax,eax
c0015172:	74 7d                	je     c00151f1 <displayDebugInfo(regs*)+0x48b>
c0015174:	89 c6                	mov    esi,eax
c0015176:	50                   	push   eax
c0015177:	50                   	push   eax
c0015178:	56                   	push   esi
c0015179:	68 6c b8 02 c0       	push   0xc002b86c
c001517e:	e8 50 dd ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015183:	5a                   	pop    edx
c0015184:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015189:	59                   	pop    ecx
c001518a:	68 7a b8 02 c0       	push   0xc002b87a
c001518f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015195:	e8 e8 be ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001519a:	5f                   	pop    edi
c001519b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00151a0:	5d                   	pop    ebp
c00151a1:	56                   	push   esi
c00151a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a8:	e8 d5 be ff ff       	call   c0011082 <VgaText::puts(char const*)>
c00151ad:	58                   	pop    eax
c00151ae:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00151b3:	5a                   	pop    edx
c00151b4:	68 86 b8 02 c0       	push   0xc002b886
c00151b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151bf:	e8 be be ff ff       	call   c0011082 <VgaText::puts(char const*)>
c00151c4:	59                   	pop    ecx
c00151c5:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00151ca:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151d0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151d3:	e8 b6 88 00 00       	call   c001da8e <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151d8:	5b                   	pop    ebx
c00151d9:	5d                   	pop    ebp
c00151da:	50                   	push   eax
c00151db:	57                   	push   edi
c00151dc:	e8 c7 be ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c00151e1:	58                   	pop    eax
c00151e2:	5a                   	pop    edx
c00151e3:	56                   	push   esi
c00151e4:	68 92 b8 02 c0       	push   0xc002b892
c00151e9:	e8 e5 dc ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	fa                   	cli    
c00151f2:	f4                   	hlt    
c00151f3:	eb fe                	jmp    c00151f3 <displayDebugInfo(regs*)+0x48d>

c00151f5 <x87EmulHandler(regs*, void*)>:
c00151f5:	83 ec 0c             	sub    esp,0xc
c00151f8:	0f 20 c2             	mov    edx,cr0
c00151fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015200:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015204:	75 4b                	jne    c0015251 <x87EmulHandler(regs*, void*)+0x5c>
c0015206:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001520b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015211:	85 c0                	test   eax,eax
c0015213:	74 05                	je     c001521a <x87EmulHandler(regs*, void*)+0x25>
c0015215:	83 e2 08             	and    edx,0x8
c0015218:	75 17                	jne    c0015231 <x87EmulHandler(regs*, void*)+0x3c>
c001521a:	83 ec 0c             	sub    esp,0xc
c001521d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015221:	e8 a5 ae 00 00       	call   c00200cb <Vm::x87Handler(regs*)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	84 c0                	test   al,al
c001522b:	74 24                	je     c0015251 <x87EmulHandler(regs*, void*)+0x5c>
c001522d:	83 c4 0c             	add    esp,0xc
c0015230:	c3                   	ret    
c0015231:	83 ec 0c             	sub    esp,0xc
c0015234:	68 b8 b8 02 c0       	push   0xc002b8b8
c0015239:	e8 95 dc ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001523e:	0f 06                	clts   
c0015240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015245:	83 c4 10             	add    esp,0x10
c0015248:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c001524d:	83 c4 0c             	add    esp,0xc
c0015250:	c3                   	ret    
c0015251:	83 ec 0c             	sub    esp,0xc
c0015254:	68 a2 b8 02 c0       	push   0xc002b8a2
c0015259:	e8 75 dc ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001525e:	5a                   	pop    edx
c001525f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015263:	e8 fe fa ff ff       	call   c0014d66 <displayDebugInfo(regs*)>

c0015268 <gpFault(regs*, void*)>:
c0015268:	53                   	push   ebx
c0015269:	83 ec 14             	sub    esp,0x14
c001526c:	c7 05 c4 ef 02 c0 48 f4 01 c0 	mov    DWORD PTR ds:0xc002efc4,0xc001f448
c0015276:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001527a:	53                   	push   ebx
c001527b:	e8 c8 a1 00 00       	call   c001f448 <Vm::faultHandler(regs*)>
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	84 c0                	test   al,al
c0015285:	74 05                	je     c001528c <gpFault(regs*, void*)+0x24>
c0015287:	83 c4 08             	add    esp,0x8
c001528a:	5b                   	pop    ebx
c001528b:	c3                   	ret    
c001528c:	83 ec 0c             	sub    esp,0xc
c001528f:	68 c5 b8 02 c0       	push   0xc002b8c5
c0015294:	e8 3a dc ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015299:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529c:	e8 c5 fa ff ff       	call   c0014d66 <displayDebugInfo(regs*)>

c00152a1 <pgFault(regs*, void*)>:
c00152a1:	83 ec 14             	sub    esp,0x14
c00152a4:	0f 20 d0             	mov    eax,cr2
c00152a7:	50                   	push   eax
c00152a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152b6:	e8 35 d8 ff ff       	call   c0012af0 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	84 c0                	test   al,al
c00152c0:	74 04                	je     c00152c6 <pgFault(regs*, void*)+0x25>
c00152c2:	83 c4 0c             	add    esp,0xc
c00152c5:	c3                   	ret    
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	68 e0 b8 02 c0       	push   0xc002b8e0
c00152ce:	e8 00 dc ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00152d3:	58                   	pop    eax
c00152d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d8:	e8 89 fa ff ff       	call   c0014d66 <displayDebugInfo(regs*)>

c00152dd <otherISRHandler(regs*, void*)>:
c00152dd:	53                   	push   ebx
c00152de:	83 ec 0c             	sub    esp,0xc
c00152e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152e5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152e8:	50                   	push   eax
c00152e9:	50                   	push   eax
c00152ea:	68 ed b8 02 c0       	push   0xc002b8ed
c00152ef:	e8 df db ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00152f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152f7:	e8 6a fa ff ff       	call   c0014d66 <displayDebugInfo(regs*)>

c00152fc <opcodeFault(regs*, void*)>:
c00152fc:	55                   	push   ebp
c00152fd:	89 e5                	mov    ebp,esp
c00152ff:	56                   	push   esi
c0015300:	53                   	push   ebx
c0015301:	83 ec 40             	sub    esp,0x40
c0015304:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015309:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001530f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015315:	84 c0                	test   al,al
c0015317:	74 24                	je     c001533d <opcodeFault(regs*, void*)+0x41>
c0015319:	83 ec 0c             	sub    esp,0xc
c001531c:	68 0c b9 02 c0       	push   0xc002b90c
c0015321:	e8 ad db ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015326:	83 c4 10             	add    esp,0x10
c0015329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532f:	8d 50 19             	lea    edx,[eax+0x19]
c0015332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015335:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015338:	e9 d5 05 00 00       	jmp    c0015912 <opcodeFault(regs*, void*)+0x616>
c001533d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015340:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015343:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015346:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001534a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001534e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015351:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015354:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015357:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535a:	8a 00                	mov    al,BYTE PTR [eax]
c001535c:	3c f0                	cmp    al,0xf0
c001535e:	75 17                	jne    c0015377 <opcodeFault(regs*, void*)+0x7b>
c0015360:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015366:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015369:	8d 50 01             	lea    edx,[eax+0x1]
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015372:	e9 da 00 00 00       	jmp    c0015451 <opcodeFault(regs*, void*)+0x155>
c0015377:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537a:	8a 00                	mov    al,BYTE PTR [eax]
c001537c:	3c f2                	cmp    al,0xf2
c001537e:	74 09                	je     c0015389 <opcodeFault(regs*, void*)+0x8d>
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	8a 00                	mov    al,BYTE PTR [eax]
c0015385:	3c f3                	cmp    al,0xf3
c0015387:	75 1b                	jne    c00153a4 <opcodeFault(regs*, void*)+0xa8>
c0015389:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001538d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015393:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015396:	8d 50 01             	lea    edx,[eax+0x1]
c0015399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539f:	e9 ad 00 00 00       	jmp    c0015451 <opcodeFault(regs*, void*)+0x155>
c00153a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a7:	8a 00                	mov    al,BYTE PTR [eax]
c00153a9:	3c 66                	cmp    al,0x66
c00153ab:	75 1f                	jne    c00153cc <opcodeFault(regs*, void*)+0xd0>
c00153ad:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153b5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153be:	8d 50 01             	lea    edx,[eax+0x1]
c00153c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c7:	e9 85 00 00 00       	jmp    c0015451 <opcodeFault(regs*, void*)+0x155>
c00153cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cf:	8a 00                	mov    al,BYTE PTR [eax]
c00153d1:	3c 67                	cmp    al,0x67
c00153d3:	75 18                	jne    c00153ed <opcodeFault(regs*, void*)+0xf1>
c00153d5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e2:	8d 50 01             	lea    edx,[eax+0x1]
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153eb:	eb 64                	jmp    c0015451 <opcodeFault(regs*, void*)+0x155>
c00153ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f0:	8a 00                	mov    al,BYTE PTR [eax]
c00153f2:	3c 2e                	cmp    al,0x2e
c00153f4:	74 09                	je     c00153ff <opcodeFault(regs*, void*)+0x103>
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8a 00                	mov    al,BYTE PTR [eax]
c00153fb:	3c 3e                	cmp    al,0x3e
c00153fd:	75 18                	jne    c0015417 <opcodeFault(regs*, void*)+0x11b>
c00153ff:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015403:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540c:	8d 50 01             	lea    edx,[eax+0x1]
c001540f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015415:	eb 3a                	jmp    c0015451 <opcodeFault(regs*, void*)+0x155>
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	3c 36                	cmp    al,0x36
c001541e:	74 1b                	je     c001543b <opcodeFault(regs*, void*)+0x13f>
c0015420:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015423:	8a 00                	mov    al,BYTE PTR [eax]
c0015425:	3c 26                	cmp    al,0x26
c0015427:	74 12                	je     c001543b <opcodeFault(regs*, void*)+0x13f>
c0015429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542c:	8a 00                	mov    al,BYTE PTR [eax]
c001542e:	3c 64                	cmp    al,0x64
c0015430:	74 09                	je     c001543b <opcodeFault(regs*, void*)+0x13f>
c0015432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015435:	8a 00                	mov    al,BYTE PTR [eax]
c0015437:	3c 65                	cmp    al,0x65
c0015439:	75 16                	jne    c0015451 <opcodeFault(regs*, void*)+0x155>
c001543b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001543f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015448:	8d 50 01             	lea    edx,[eax+0x1]
c001544b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015451:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015454:	8a 00                	mov    al,BYTE PTR [eax]
c0015456:	3c 0f                	cmp    al,0xf
c0015458:	0f 85 ad 00 00 00    	jne    c001550b <opcodeFault(regs*, void*)+0x20f>
c001545e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015461:	40                   	inc    eax
c0015462:	8a 00                	mov    al,BYTE PTR [eax]
c0015464:	3c c2                	cmp    al,0xc2
c0015466:	74 0e                	je     c0015476 <opcodeFault(regs*, void*)+0x17a>
c0015468:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546b:	40                   	inc    eax
c001546c:	8a 00                	mov    al,BYTE PTR [eax]
c001546e:	3c c3                	cmp    al,0xc3
c0015470:	0f 85 95 00 00 00    	jne    c001550b <opcodeFault(regs*, void*)+0x20f>
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	68 2f b9 02 c0       	push   0xc002b92f
c001547e:	e8 50 da ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548c:	8d 50 01             	lea    edx,[eax+0x1]
c001548f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015492:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015495:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549b:	8a 00                	mov    al,BYTE PTR [eax]
c001549d:	8d 50 fe             	lea    edx,[eax-0x2]
c00154a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a3:	88 10                	mov    BYTE PTR [eax],dl
c00154a5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154a8:	50                   	push   eax
c00154a9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ac:	50                   	push   eax
c00154ad:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154b0:	50                   	push   eax
c00154b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154b4:	e8 9d 4a 00 00       	call   c0019f56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154b9:	83 c4 10             	add    esp,0x10
c00154bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154c5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154c8:	01 d0                	add    eax,edx
c00154ca:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154d6:	48                   	dec    eax
c00154d7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	83 ec 04             	sub    esp,0x4
c00154e9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154ef:	50                   	push   eax
c00154f0:	e8 bf ac fe ff       	call   c00001b4 <voodooXADD>
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154fb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154fe:	01 c2                	add    edx,eax
c0015500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015503:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015506:	e9 07 04 00 00       	jmp    c0015912 <opcodeFault(regs*, void*)+0x616>
c001550b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550e:	8a 00                	mov    al,BYTE PTR [eax]
c0015510:	3c 0f                	cmp    al,0xf
c0015512:	0f 85 8b 01 00 00    	jne    c00156a3 <opcodeFault(regs*, void*)+0x3a7>
c0015518:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551b:	40                   	inc    eax
c001551c:	8a 00                	mov    al,BYTE PTR [eax]
c001551e:	3c c7                	cmp    al,0xc7
c0015520:	0f 86 7d 01 00 00    	jbe    c00156a3 <opcodeFault(regs*, void*)+0x3a7>
c0015526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015529:	40                   	inc    eax
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c cf                	cmp    al,0xcf
c001552e:	0f 87 6f 01 00 00    	ja     c00156a3 <opcodeFault(regs*, void*)+0x3a7>
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	40                   	inc    eax
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	83 c0 38             	add    eax,0x38
c001553d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015540:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015544:	75 0b                	jne    c0015551 <opcodeFault(regs*, void*)+0x255>
c0015546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015549:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001554c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001554f:	eb 75                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c0015551:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015555:	75 0b                	jne    c0015562 <opcodeFault(regs*, void*)+0x266>
c0015557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001555d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015560:	eb 64                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c0015562:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015566:	75 0b                	jne    c0015573 <opcodeFault(regs*, void*)+0x277>
c0015568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001556e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015571:	eb 53                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c0015573:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015577:	75 0b                	jne    c0015584 <opcodeFault(regs*, void*)+0x288>
c0015579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001557f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015582:	eb 42                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c0015584:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015588:	75 0b                	jne    c0015595 <opcodeFault(regs*, void*)+0x299>
c001558a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015590:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015593:	eb 31                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c0015595:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015599:	75 0b                	jne    c00155a6 <opcodeFault(regs*, void*)+0x2aa>
c001559b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a4:	eb 20                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c00155a6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155aa:	75 0b                	jne    c00155b7 <opcodeFault(regs*, void*)+0x2bb>
c00155ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155af:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b5:	eb 0f                	jmp    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c00155b7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155bb:	75 09                	jne    c00155c6 <opcodeFault(regs*, void*)+0x2ca>
c00155bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155ca:	74 10                	je     c00155dc <opcodeFault(regs*, void*)+0x2e0>
c00155cc:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155d3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155da:	eb 2d                	jmp    c0015609 <opcodeFault(regs*, void*)+0x30d>
c00155dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155df:	c1 e0 18             	shl    eax,0x18
c00155e2:	89 c2                	mov    edx,eax
c00155e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e7:	c1 e0 08             	shl    eax,0x8
c00155ea:	25 00 00 ff 00       	and    eax,0xff0000
c00155ef:	09 c2                	or     edx,eax
c00155f1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f4:	c1 e8 08             	shr    eax,0x8
c00155f7:	25 00 ff 00 00       	and    eax,0xff00
c00155fc:	09 c2                	or     edx,eax
c00155fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015601:	c1 e8 18             	shr    eax,0x18
c0015604:	09 d0                	or     eax,edx
c0015606:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015609:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001560d:	75 0b                	jne    c001561a <opcodeFault(regs*, void*)+0x31e>
c001560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015612:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015615:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015618:	eb 75                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001561a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001561e:	75 0b                	jne    c001562b <opcodeFault(regs*, void*)+0x32f>
c0015620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015623:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015626:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015629:	eb 64                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001562b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001562f:	75 0b                	jne    c001563c <opcodeFault(regs*, void*)+0x340>
c0015631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015634:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015637:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001563a:	eb 53                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001563c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015640:	75 0b                	jne    c001564d <opcodeFault(regs*, void*)+0x351>
c0015642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015645:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015648:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001564b:	eb 42                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001564d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015651:	75 0b                	jne    c001565e <opcodeFault(regs*, void*)+0x362>
c0015653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015656:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015659:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001565c:	eb 31                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001565e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015662:	75 0b                	jne    c001566f <opcodeFault(regs*, void*)+0x373>
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001566d:	eb 20                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c001566f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015673:	75 0b                	jne    c0015680 <opcodeFault(regs*, void*)+0x384>
c0015675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015678:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001567e:	eb 0f                	jmp    c001568f <opcodeFault(regs*, void*)+0x393>
c0015680:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015684:	75 09                	jne    c001568f <opcodeFault(regs*, void*)+0x393>
c0015686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015689:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001568c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001568f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015692:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015695:	8d 50 02             	lea    edx,[eax+0x2]
c0015698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001569e:	e9 6f 02 00 00       	jmp    c0015912 <opcodeFault(regs*, void*)+0x616>
c00156a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a6:	8a 00                	mov    al,BYTE PTR [eax]
c00156a8:	3c 0f                	cmp    al,0xf
c00156aa:	0f 85 8d 01 00 00    	jne    c001583d <opcodeFault(regs*, void*)+0x541>
c00156b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b3:	40                   	inc    eax
c00156b4:	8a 00                	mov    al,BYTE PTR [eax]
c00156b6:	3c c7                	cmp    al,0xc7
c00156b8:	0f 85 7f 01 00 00    	jne    c001583d <opcodeFault(regs*, void*)+0x541>
c00156be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c7:	8d 50 01             	lea    edx,[eax+0x1]
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156d0:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156d3:	50                   	push   eax
c00156d4:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156d7:	50                   	push   eax
c00156d8:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156db:	50                   	push   eax
c00156dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156df:	e8 72 48 00 00       	call   c0019f56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156ea:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156ed:	83 f0 01             	xor    eax,0x1
c00156f0:	84 c0                	test   al,al
c00156f2:	0f 84 45 01 00 00    	je     c001583d <opcodeFault(regs*, void*)+0x541>
c00156f8:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156fb:	3c 01                	cmp    al,0x1
c00156fd:	0f 85 3a 01 00 00    	jne    c001583d <opcodeFault(regs*, void*)+0x541>
c0015703:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015706:	83 f0 01             	xor    eax,0x1
c0015709:	84 c0                	test   al,al
c001570b:	0f 84 2c 01 00 00    	je     c001583d <opcodeFault(regs*, void*)+0x541>
c0015711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015714:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015717:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001571a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015721:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015724:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015727:	89 c2                	mov    edx,eax
c0015729:	b8 00 00 00 00       	mov    eax,0x0
c001572e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015731:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001573a:	ba 00 00 00 00       	mov    edx,0x0
c001573f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015742:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015748:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001574b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001574e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015755:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015758:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001575b:	89 c2                	mov    edx,eax
c001575d:	b8 00 00 00 00       	mov    eax,0x0
c0015762:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015765:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001576e:	ba 00 00 00 00       	mov    edx,0x0
c0015773:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015776:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015779:	fa                   	cli    
c001577a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001577f:	40                   	inc    eax
c0015780:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015785:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015788:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001578b:	8b 00                	mov    eax,DWORD PTR [eax]
c001578d:	89 c1                	mov    ecx,eax
c001578f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015792:	89 cb                	mov    ebx,ecx
c0015794:	89 d0                	mov    eax,edx
c0015796:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015799:	89 c6                	mov    esi,eax
c001579b:	89 f0                	mov    eax,esi
c001579d:	09 d8                	or     eax,ebx
c001579f:	85 c0                	test   eax,eax
c00157a1:	75 21                	jne    c00157c4 <opcodeFault(regs*, void*)+0x4c8>
c00157a3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157a9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157ac:	89 01                	mov    DWORD PTR [ecx],eax
c00157ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157b7:	83 c8 40             	or     eax,0x40
c00157ba:	89 c2                	mov    edx,eax
c00157bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157c2:	eb 3e                	jmp    c0015802 <opcodeFault(regs*, void*)+0x506>
c00157c4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00157cc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157cf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157d2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157db:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157de:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157e1:	89 d0                	mov    eax,edx
c00157e3:	31 d2                	xor    edx,edx
c00157e5:	89 c3                	mov    ebx,eax
c00157e7:	89 d6                	mov    esi,edx
c00157e9:	89 da                	mov    edx,ebx
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157f7:	83 e0 bf             	and    eax,0xffffffbf
c00157fa:	89 c2                	mov    edx,eax
c00157fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ff:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015802:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015807:	48                   	dec    eax
c0015808:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001580d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015812:	85 c0                	test   eax,eax
c0015814:	75 01                	jne    c0015817 <opcodeFault(regs*, void*)+0x51b>
c0015816:	fb                   	sti    
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001581d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015820:	01 c2                	add    edx,eax
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	68 3e b9 02 c0       	push   0xc002b93e
c0015830:	e8 9e d6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	e9 d5 00 00 00       	jmp    c0015912 <opcodeFault(regs*, void*)+0x616>
c001583d:	83 ec 0c             	sub    esp,0xc
c0015840:	68 51 b9 02 c0       	push   0xc002b951
c0015845:	e8 89 d6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015856:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015859:	c1 e0 04             	shl    eax,0x4
c001585c:	01 d0                	add    eax,edx
c001585e:	83 c0 03             	add    eax,0x3
c0015861:	8a 00                	mov    al,BYTE PTR [eax]
c0015863:	0f b6 d8             	movzx  ebx,al
c0015866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015869:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015872:	c1 e0 04             	shl    eax,0x4
c0015875:	01 d0                	add    eax,edx
c0015877:	83 c0 02             	add    eax,0x2
c001587a:	8a 00                	mov    al,BYTE PTR [eax]
c001587c:	0f b6 c8             	movzx  ecx,al
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015888:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588b:	c1 e0 04             	shl    eax,0x4
c001588e:	01 d0                	add    eax,edx
c0015890:	40                   	inc    eax
c0015891:	8a 00                	mov    al,BYTE PTR [eax]
c0015893:	0f b6 d0             	movzx  edx,al
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a2:	c1 e0 04             	shl    eax,0x4
c00158a5:	01 f0                	add    eax,esi
c00158a7:	8a 00                	mov    al,BYTE PTR [eax]
c00158a9:	0f b6 c0             	movzx  eax,al
c00158ac:	83 ec 0c             	sub    esp,0xc
c00158af:	53                   	push   ebx
c00158b0:	51                   	push   ecx
c00158b1:	52                   	push   edx
c00158b2:	50                   	push   eax
c00158b3:	68 64 b9 02 c0       	push   0xc002b964
c00158b8:	e8 16 d6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00158bd:	83 c4 20             	add    esp,0x20
c00158c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c6:	83 c0 03             	add    eax,0x3
c00158c9:	8a 00                	mov    al,BYTE PTR [eax]
c00158cb:	0f b6 d8             	movzx  ebx,al
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d4:	83 c0 02             	add    eax,0x2
c00158d7:	8a 00                	mov    al,BYTE PTR [eax]
c00158d9:	0f b6 c8             	movzx  ecx,al
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e2:	40                   	inc    eax
c00158e3:	8a 00                	mov    al,BYTE PTR [eax]
c00158e5:	0f b6 d0             	movzx  edx,al
c00158e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ee:	8a 00                	mov    al,BYTE PTR [eax]
c00158f0:	0f b6 c0             	movzx  eax,al
c00158f3:	83 ec 0c             	sub    esp,0xc
c00158f6:	53                   	push   ebx
c00158f7:	51                   	push   ecx
c00158f8:	52                   	push   edx
c00158f9:	50                   	push   eax
c00158fa:	68 8c b9 02 c0       	push   0xc002b98c
c00158ff:	e8 cf d5 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0015904:	83 c4 20             	add    esp,0x20
c0015907:	83 ec 0c             	sub    esp,0xc
c001590a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001590d:	e8 54 f4 ff ff       	call   c0014d66 <displayDebugInfo(regs*)>
c0015912:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015915:	5b                   	pop    ebx
c0015916:	5e                   	pop    esi
c0015917:	5d                   	pop    ebp
c0015918:	c3                   	ret    

c0015919 <displayProgramFault(char const*)>:
c0015919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015921:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015927:	85 c0                	test   eax,eax
c0015929:	74 15                	je     c0015940 <displayProgramFault(char const*)+0x27>
c001592b:	83 ec 0c             	sub    esp,0xc
c001592e:	6a 04                	push   0x4
c0015930:	6a 0f                	push   0xf
c0015932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015936:	50                   	push   eax
c0015937:	e8 88 b4 ff ff       	call   c0010dc4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001593c:	83 c4 1c             	add    esp,0x1c
c001593f:	c3                   	ret    
c0015940:	c3                   	ret    

c0015941 <setupInterruptController()>:
c0015941:	55                   	push   ebp
c0015942:	89 e5                	mov    ebp,esp
c0015944:	53                   	push   ebx
c0015945:	83 ec 24             	sub    esp,0x24
c0015948:	b8 00 00 00 00       	mov    eax,0x0
c001594d:	85 c0                	test   eax,eax
c001594f:	0f 95 c0             	setne  al
c0015952:	84 c0                	test   al,al
c0015954:	74 5b                	je     c00159b1 <setupInterruptController()+0x70>
c0015956:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015963:	e8 b4 9f ff ff       	call   c000f91c <malloc>
c0015968:	83 c4 10             	add    esp,0x10
c001596b:	89 c3                	mov    ebx,eax
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	53                   	push   ebx
c0015971:	e8 a2 07 01 00       	call   c0026118 <APIC::APIC()>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001597c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001597f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015982:	8b 00                	mov    eax,DWORD PTR [eax]
c0015984:	83 c0 08             	add    eax,0x8
c0015987:	8b 00                	mov    eax,DWORD PTR [eax]
c0015989:	6a 00                	push   0x0
c001598b:	6a 00                	push   0x0
c001598d:	6a 00                	push   0x0
c001598f:	52                   	push   edx
c0015990:	ff d0                	call   eax
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001599a:	83 ec 08             	sub    esp,0x8
c001599d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159a0:	50                   	push   eax
c00159a1:	e8 62 e9 ff ff       	call   c0014308 <Device::addChild(Device*)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ac:	e9 89 03 00 00       	jmp    c0015d3a <setupInterruptController()+0x3f9>
c00159b1:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c00159b6:	84 c0                	test   al,al
c00159b8:	75 24                	jne    c00159de <setupInterruptController()+0x9d>
c00159ba:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00159bf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159c5:	83 e2 fe             	and    edx,0xfffffffe
c00159c8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	68 b1 b9 02 c0       	push   0xc002b9b1
c00159d6:	e8 f8 d4 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00159e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159e9:	83 e0 01             	and    eax,0x1
c00159ec:	84 c0                	test   al,al
c00159ee:	0f 95 c0             	setne  al
c00159f1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159f4:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159fb:	83 ec 0c             	sub    esp,0xc
c00159fe:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a01:	e8 16 9f ff ff       	call   c000f91c <malloc>
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	89 c3                	mov    ebx,eax
c0015a0b:	83 ec 0c             	sub    esp,0xc
c0015a0e:	53                   	push   ebx
c0015a0f:	e8 5c 0c 01 00       	call   c0026670 <PIC::PIC()>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a22:	83 c0 08             	add    eax,0x8
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	6a 00                	push   0x0
c0015a29:	6a 00                	push   0x0
c0015a2b:	6a 00                	push   0x0
c0015a2d:	52                   	push   edx
c0015a2e:	ff d0                	call   eax
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a37:	74 73                	je     c0015aac <setupInterruptController()+0x16b>
c0015a39:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a41:	83 c0 0c             	add    eax,0xc
c0015a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a46:	6a 00                	push   0x0
c0015a48:	6a 00                	push   0x0
c0015a4a:	6a 00                	push   0x0
c0015a4c:	52                   	push   edx
c0015a4d:	ff d0                	call   eax
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a56:	74 15                	je     c0015a6d <setupInterruptController()+0x12c>
c0015a58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5d:	83 c0 04             	add    eax,0x4
c0015a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a68:	ff d0                	call   eax
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a74:	83 ec 0c             	sub    esp,0xc
c0015a77:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a7a:	e8 9d 9e ff ff       	call   c000f91c <malloc>
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	89 c3                	mov    ebx,eax
c0015a84:	83 ec 0c             	sub    esp,0xc
c0015a87:	53                   	push   ebx
c0015a88:	e8 8b 06 01 00       	call   c0026118 <APIC::APIC()>
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a93:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9b:	83 c0 08             	add    eax,0x8
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	6a 00                	push   0x0
c0015aa2:	6a 00                	push   0x0
c0015aa4:	6a 00                	push   0x0
c0015aa6:	52                   	push   edx
c0015aa7:	ff d0                	call   eax
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015ab1:	83 ec 08             	sub    esp,0x8
c0015ab4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab7:	50                   	push   eax
c0015ab8:	e8 4b e8 ff ff       	call   c0014308 <Device::addChild(Device*)>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	c7 05 c8 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efc8,0x0
c0015aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acf:	83 c0 24             	add    eax,0x24
c0015ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad4:	6a 00                	push   0x0
c0015ad6:	68 dd 52 01 c0       	push   0xc00152dd
c0015adb:	6a 00                	push   0x0
c0015add:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae0:	ff d0                	call   eax
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aea:	83 c0 24             	add    eax,0x24
c0015aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aef:	6a 00                	push   0x0
c0015af1:	68 dd 52 01 c0       	push   0xc00152dd
c0015af6:	6a 01                	push   0x1
c0015af8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afb:	ff d0                	call   eax
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b05:	83 c0 24             	add    eax,0x24
c0015b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0a:	6a 00                	push   0x0
c0015b0c:	68 c3 4b 01 c0       	push   0xc0014bc3
c0015b11:	6a 02                	push   0x2
c0015b13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b16:	ff d0                	call   eax
c0015b18:	83 c4 10             	add    esp,0x10
c0015b1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b20:	83 c0 24             	add    eax,0x24
c0015b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b25:	6a 00                	push   0x0
c0015b27:	68 dd 52 01 c0       	push   0xc00152dd
c0015b2c:	6a 03                	push   0x3
c0015b2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b31:	ff d0                	call   eax
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3b:	83 c0 24             	add    eax,0x24
c0015b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b40:	6a 00                	push   0x0
c0015b42:	68 dd 52 01 c0       	push   0xc00152dd
c0015b47:	6a 04                	push   0x4
c0015b49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4c:	ff d0                	call   eax
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b56:	83 c0 24             	add    eax,0x24
c0015b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5b:	6a 00                	push   0x0
c0015b5d:	68 dd 52 01 c0       	push   0xc00152dd
c0015b62:	6a 05                	push   0x5
c0015b64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b67:	ff d0                	call   eax
c0015b69:	83 c4 10             	add    esp,0x10
c0015b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b71:	83 c0 24             	add    eax,0x24
c0015b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b76:	6a 00                	push   0x0
c0015b78:	68 fc 52 01 c0       	push   0xc00152fc
c0015b7d:	6a 06                	push   0x6
c0015b7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b82:	ff d0                	call   eax
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8c:	83 c0 24             	add    eax,0x24
c0015b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b91:	6a 00                	push   0x0
c0015b93:	68 f5 51 01 c0       	push   0xc00151f5
c0015b98:	6a 07                	push   0x7
c0015b9a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9d:	ff d0                	call   eax
c0015b9f:	83 c4 10             	add    esp,0x10
c0015ba2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba7:	83 c0 24             	add    eax,0x24
c0015baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bac:	6a 00                	push   0x0
c0015bae:	68 de 49 01 c0       	push   0xc00149de
c0015bb3:	6a 08                	push   0x8
c0015bb5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb8:	ff d0                	call   eax
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc2:	83 c0 24             	add    eax,0x24
c0015bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc7:	6a 00                	push   0x0
c0015bc9:	68 dd 52 01 c0       	push   0xc00152dd
c0015bce:	6a 09                	push   0x9
c0015bd0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd3:	ff d0                	call   eax
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdd:	83 c0 24             	add    eax,0x24
c0015be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be2:	6a 00                	push   0x0
c0015be4:	68 dd 52 01 c0       	push   0xc00152dd
c0015be9:	6a 0a                	push   0xa
c0015beb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bee:	ff d0                	call   eax
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf8:	83 c0 24             	add    eax,0x24
c0015bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfd:	6a 00                	push   0x0
c0015bff:	68 dd 52 01 c0       	push   0xc00152dd
c0015c04:	6a 0b                	push   0xb
c0015c06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c09:	ff d0                	call   eax
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c13:	83 c0 24             	add    eax,0x24
c0015c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c18:	6a 00                	push   0x0
c0015c1a:	68 dd 52 01 c0       	push   0xc00152dd
c0015c1f:	6a 0c                	push   0xc
c0015c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c24:	ff d0                	call   eax
c0015c26:	83 c4 10             	add    esp,0x10
c0015c29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2e:	83 c0 24             	add    eax,0x24
c0015c31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c33:	6a 00                	push   0x0
c0015c35:	68 68 52 01 c0       	push   0xc0015268
c0015c3a:	6a 0d                	push   0xd
c0015c3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3f:	ff d0                	call   eax
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c49:	83 c0 24             	add    eax,0x24
c0015c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4e:	6a 00                	push   0x0
c0015c50:	68 a1 52 01 c0       	push   0xc00152a1
c0015c55:	6a 0e                	push   0xe
c0015c57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5a:	ff d0                	call   eax
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c64:	83 c0 24             	add    eax,0x24
c0015c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c69:	6a 00                	push   0x0
c0015c6b:	68 dd 52 01 c0       	push   0xc00152dd
c0015c70:	6a 0f                	push   0xf
c0015c72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c75:	ff d0                	call   eax
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7f:	83 c0 24             	add    eax,0x24
c0015c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c84:	6a 00                	push   0x0
c0015c86:	68 dd 52 01 c0       	push   0xc00152dd
c0015c8b:	6a 10                	push   0x10
c0015c8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c90:	ff d0                	call   eax
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9a:	83 c0 24             	add    eax,0x24
c0015c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9f:	6a 00                	push   0x0
c0015ca1:	68 dd 52 01 c0       	push   0xc00152dd
c0015ca6:	6a 11                	push   0x11
c0015ca8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cab:	ff d0                	call   eax
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb5:	83 c0 24             	add    eax,0x24
c0015cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cba:	6a 00                	push   0x0
c0015cbc:	68 dd 52 01 c0       	push   0xc00152dd
c0015cc1:	6a 12                	push   0x12
c0015cc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc6:	ff d0                	call   eax
c0015cc8:	83 c4 10             	add    esp,0x10
c0015ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd0:	83 c0 24             	add    eax,0x24
c0015cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd5:	6a 00                	push   0x0
c0015cd7:	68 dd 52 01 c0       	push   0xc00152dd
c0015cdc:	6a 13                	push   0x13
c0015cde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce1:	ff d0                	call   eax
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ceb:	83 c0 24             	add    eax,0x24
c0015cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf0:	6a 00                	push   0x0
c0015cf2:	68 dd 52 01 c0       	push   0xc00152dd
c0015cf7:	6a 14                	push   0x14
c0015cf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cfc:	ff d0                	call   eax
c0015cfe:	83 c4 10             	add    esp,0x10
c0015d01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d06:	83 c0 24             	add    eax,0x24
c0015d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0b:	6a 00                	push   0x0
c0015d0d:	68 dd 52 01 c0       	push   0xc00152dd
c0015d12:	6a 1e                	push   0x1e
c0015d14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d17:	ff d0                	call   eax
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d21:	83 c0 24             	add    eax,0x24
c0015d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d26:	6a 00                	push   0x0
c0015d28:	68 cd ca 01 c0       	push   0xc001cacd
c0015d2d:	6a 60                	push   0x60
c0015d2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d32:	ff d0                	call   eax
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3d:	c9                   	leave  
c0015d3e:	c3                   	ret    
c0015d3f:	90                   	nop

c0015d40 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d49:	83 ec 0c             	sub    esp,0xc
c0015d4c:	50                   	push   eax
c0015d4d:	e8 a2 e8 ff ff       	call   c00145f4 <Device::getName()>
c0015d52:	83 c4 10             	add    esp,0x10
c0015d55:	8a 00                	mov    al,BYTE PTR [eax]
c0015d57:	3c 41                	cmp    al,0x41
c0015d59:	0f 94 c0             	sete   al
c0015d5c:	84 c0                	test   al,al
c0015d5e:	74 28                	je     c0015d88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d60:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d64:	7f 12                	jg     c0015d78 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d69:	05 80 e0 02 c0       	add    eax,0xc002e080
c0015d6e:	8a 00                	mov    al,BYTE PTR [eax]
c0015d70:	0f b6 c0             	movzx  eax,al
c0015d73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d76:	eb 10                	jmp    c0015d88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	68 a0 b6 02 c0       	push   0xc002b6a0
c0015d80:	e8 0a 4b 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d8b:	c9                   	leave  
c0015d8c:	c3                   	ret    
c0015d8d:	90                   	nop

c0015d8e <startGUI(void*)>:
c0015d8e:	55                   	push   ebp
c0015d8f:	89 e5                	mov    ebp,esp
c0015d91:	53                   	push   ebx
c0015d92:	83 ec 04             	sub    esp,0x4
c0015d95:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015d9a:	48                   	dec    eax
c0015d9b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015da0:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015da5:	85 c0                	test   eax,eax
c0015da7:	75 01                	jne    c0015daa <startGUI(void*)+0x1c>
c0015da9:	fb                   	sti    
c0015daa:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	6a 01                	push   0x1
c0015db5:	68 14 ba 02 c0       	push   0xc002ba14
c0015dba:	e8 e9 7c 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	83 ec 08             	sub    esp,0x8
c0015dc5:	53                   	push   ebx
c0015dc6:	50                   	push   eax
c0015dc7:	e8 07 7f 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015dd5:	83 ec 08             	sub    esp,0x8
c0015dd8:	6a 01                	push   0x1
c0015dda:	68 2e ba 02 c0       	push   0xc002ba2e
c0015ddf:	e8 c4 7c 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	83 ec 08             	sub    esp,0x8
c0015dea:	53                   	push   ebx
c0015deb:	50                   	push   eax
c0015dec:	e8 e2 7e 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	90                   	nop
c0015df5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015df8:	c9                   	leave  
c0015df9:	c3                   	ret    

c0015dfa <startGUIVESA(void*)>:
c0015dfa:	55                   	push   ebp
c0015dfb:	89 e5                	mov    ebp,esp
c0015dfd:	53                   	push   ebx
c0015dfe:	83 ec 04             	sub    esp,0x4
c0015e01:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015e06:	48                   	dec    eax
c0015e07:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015e0c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015e11:	85 c0                	test   eax,eax
c0015e13:	75 01                	jne    c0015e16 <startGUIVESA(void*)+0x1c>
c0015e15:	fb                   	sti    
c0015e16:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015e1c:	83 ec 08             	sub    esp,0x8
c0015e1f:	6a 01                	push   0x1
c0015e21:	68 48 ba 02 c0       	push   0xc002ba48
c0015e26:	e8 7d 7c 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0015e2b:	83 c4 10             	add    esp,0x10
c0015e2e:	83 ec 08             	sub    esp,0x8
c0015e31:	53                   	push   ebx
c0015e32:	50                   	push   eax
c0015e33:	e8 9b 7e 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015e41:	83 ec 08             	sub    esp,0x8
c0015e44:	6a 01                	push   0x1
c0015e46:	68 2e ba 02 c0       	push   0xc002ba2e
c0015e4b:	e8 58 7c 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	83 ec 08             	sub    esp,0x8
c0015e56:	53                   	push   ebx
c0015e57:	50                   	push   eax
c0015e58:	e8 76 7e 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c0015e5d:	83 c4 10             	add    esp,0x10
c0015e60:	90                   	nop
c0015e61:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e64:	c9                   	leave  
c0015e65:	c3                   	ret    

c0015e66 <sendKeyToTerminal(unsigned char)>:
c0015e66:	55                   	push   ebp
c0015e67:	89 e5                	mov    ebp,esp
c0015e69:	83 ec 28             	sub    esp,0x28
c0015e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e72:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0015e77:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e7b:	83 ec 08             	sub    esp,0x8
c0015e7e:	52                   	push   edx
c0015e7f:	50                   	push   eax
c0015e80:	e8 17 b4 ff ff       	call   c001129c <VgaText::receiveKey(unsigned char)>
c0015e85:	83 c4 10             	add    esp,0x10
c0015e88:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e8c:	0f 85 8f 00 00 00    	jne    c0015f21 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e92:	fa                   	cli    
c0015e93:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015e98:	40                   	inc    eax
c0015e99:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015e9e:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015ea3:	40                   	inc    eax
c0015ea4:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015ea9:	a1 e0 ef 02 c0       	mov    eax,ds:0xc002efe0
c0015eae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015eb1:	c7 05 e0 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efe0,0x0
c0015ebb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ebf:	74 1f                	je     c0015ee0 <sendKeyToTerminal(unsigned char)+0x7a>
c0015ec1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ec4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ec7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015eca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ecd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ed6:	e8 6f 8a 00 00       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c0015edb:	83 c4 10             	add    esp,0x10
c0015ede:	eb db                	jmp    c0015ebb <sendKeyToTerminal(unsigned char)+0x55>
c0015ee0:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015ee5:	48                   	dec    eax
c0015ee6:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015eeb:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015ef0:	85 c0                	test   eax,eax
c0015ef2:	75 18                	jne    c0015f0c <sendKeyToTerminal(unsigned char)+0xa6>
c0015ef4:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c0015ef9:	85 c0                	test   eax,eax
c0015efb:	74 0f                	je     c0015f0c <sendKeyToTerminal(unsigned char)+0xa6>
c0015efd:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0015f07:	e8 7a 85 00 00       	call   c001e486 <schedule()>
c0015f0c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015f11:	48                   	dec    eax
c0015f12:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015f17:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015f1c:	85 c0                	test   eax,eax
c0015f1e:	75 01                	jne    c0015f21 <sendKeyToTerminal(unsigned char)+0xbb>
c0015f20:	fb                   	sti    
c0015f21:	90                   	nop
c0015f22:	c9                   	leave  
c0015f23:	c3                   	ret    

c0015f24 <sendKeyboardToken(KeyboardToken)>:
c0015f24:	55                   	push   ebp
c0015f25:	89 e5                	mov    ebp,esp
c0015f27:	83 ec 18             	sub    esp,0x18
c0015f2a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f30:	0f b7 c0             	movzx  eax,ax
c0015f33:	83 f2 01             	xor    edx,0x1
c0015f36:	88 90 00 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd1000],dl
c0015f3c:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0015f41:	85 c0                	test   eax,eax
c0015f43:	74 24                	je     c0015f69 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f45:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c0015f4b:	83 ec 04             	sub    esp,0x4
c0015f4e:	68 00 f0 02 c0       	push   0xc002f000
c0015f53:	83 ec 08             	sub    esp,0x8
c0015f56:	89 e2                	mov    edx,esp
c0015f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5b:	89 02                	mov    DWORD PTR [edx],eax
c0015f5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f60:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f64:	ff d1                	call   ecx
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6c:	66 3d 03 02          	cmp    ax,0x203
c0015f70:	75 07                	jne    c0015f79 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f72:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0015f77:	84 c0                	test   al,al
c0015f79:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f7d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f80:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c0015f85:	38 c2                	cmp    dl,al
c0015f87:	74 1c                	je     c0015fa5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f89:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f8c:	a2 08 f4 02 c0       	mov    ds:0xc002f408,al
c0015f91:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c0015f96:	0f b6 c0             	movzx  eax,al
c0015f99:	83 ec 0c             	sub    esp,0xc
c0015f9c:	50                   	push   eax
c0015f9d:	e8 82 a6 ff ff       	call   c0010624 <setTerminalScrollLock(bool)>
c0015fa2:	83 c4 10             	add    esp,0x10
c0015fa5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fa8:	84 c0                	test   al,al
c0015faa:	0f 84 ae 00 00 00    	je     c001605e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 10 03          	cmp    ax,0x310
c0015fb7:	75 06                	jne    c0015fbf <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fb9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc2:	66 3d 11 03          	cmp    ax,0x311
c0015fc6:	75 06                	jne    c0015fce <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fc8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd1:	66 3d 12 03          	cmp    ax,0x312
c0015fd5:	75 06                	jne    c0015fdd <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fd7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe0:	66 3d 13 03          	cmp    ax,0x313
c0015fe4:	75 06                	jne    c0015fec <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fe6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fef:	66 3d 14 03          	cmp    ax,0x314
c0015ff3:	75 06                	jne    c0015ffb <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ff5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffe:	66 3d 15 03          	cmp    ax,0x315
c0016002:	75 06                	jne    c001600a <sendKeyboardToken(KeyboardToken)+0xe6>
c0016004:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001600a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600d:	66 3d 16 03          	cmp    ax,0x316
c0016011:	75 06                	jne    c0016019 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016013:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601c:	66 3d 17 03          	cmp    ax,0x317
c0016020:	75 06                	jne    c0016028 <sendKeyboardToken(KeyboardToken)+0x104>
c0016022:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602b:	66 3d 18 03          	cmp    ax,0x318
c001602f:	75 06                	jne    c0016037 <sendKeyboardToken(KeyboardToken)+0x113>
c0016031:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603a:	66 3d 19 03          	cmp    ax,0x319
c001603e:	75 06                	jne    c0016046 <sendKeyboardToken(KeyboardToken)+0x122>
c0016040:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016049:	66 3d 1a 03          	cmp    ax,0x31a
c001604d:	0f 85 c9 00 00 00    	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016053:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016059:	e9 be 00 00 00       	jmp    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 10 03          	cmp    ax,0x310
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x14d>
c0016067:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 11 03          	cmp    ax,0x311
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x160>
c001607a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 12 03          	cmp    ax,0x312
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x173>
c001608d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 13 03          	cmp    ax,0x313
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x186>
c00160a0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 14 03          	cmp    ax,0x314
c00160b1:	75 0a                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x199>
c00160b3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 15 03          	cmp    ax,0x315
c00160c4:	75 0a                	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160c6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d3:	66 3d 16 03          	cmp    ax,0x316
c00160d7:	75 0a                	jne    c00160e3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160d9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e6:	66 3d 17 03          	cmp    ax,0x317
c00160ea:	75 0a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160ec:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 18 03          	cmp    ax,0x318
c00160fd:	75 0a                	jne    c0016109 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160ff:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016105:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610c:	66 3d 19 03          	cmp    ax,0x319
c0016110:	75 0a                	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016112:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016118:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001611c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611f:	66 3d 00 02          	cmp    ax,0x200
c0016123:	75 2c                	jne    c0016151 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016125:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c001612a:	83 f0 01             	xor    eax,0x1
c001612d:	84 c0                	test   al,al
c001612f:	74 20                	je     c0016151 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016131:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0016136:	6a 01                	push   0x1
c0016138:	6a 00                	push   0x0
c001613a:	68 8e 5d 01 c0       	push   0xc0015d8e
c001613f:	50                   	push   eax
c0016140:	e8 fd 80 00 00       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c001614f:	eb 33                	jmp    c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c0016151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016154:	66 3d 01 02          	cmp    ax,0x201
c0016158:	75 2a                	jne    c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c001615a:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c001615f:	83 f0 01             	xor    eax,0x1
c0016162:	84 c0                	test   al,al
c0016164:	74 1e                	je     c0016184 <sendKeyboardToken(KeyboardToken)+0x260>
c0016166:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001616b:	6a 01                	push   0x1
c001616d:	6a 00                	push   0x0
c001616f:	68 fa 5d 01 c0       	push   0xc0015dfa
c0016174:	50                   	push   eax
c0016175:	e8 c8 80 00 00       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c0016184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016187:	66 3d 1d 03          	cmp    ax,0x31d
c001618b:	75 06                	jne    c0016193 <sendKeyboardToken(KeyboardToken)+0x26f>
c001618d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016196:	66 3d 1c 03          	cmp    ax,0x31c
c001619a:	75 06                	jne    c00161a2 <sendKeyboardToken(KeyboardToken)+0x27e>
c001619c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a5:	66 3d 1b 03          	cmp    ax,0x31b
c00161a9:	75 06                	jne    c00161b1 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161ab:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	66 3d 1e 03          	cmp    ax,0x31e
c00161b8:	75 06                	jne    c00161c0 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161ba:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c3:	66 3d 1f 03          	cmp    ax,0x31f
c00161c7:	75 06                	jne    c00161cf <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161c9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 3d 1a 03          	cmp    ax,0x31a
c00161d6:	75 06                	jne    c00161de <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161d8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161de:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161e5:	83 f0 01             	xor    eax,0x1
c00161e8:	84 c0                	test   al,al
c00161ea:	74 77                	je     c0016263 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161ec:	a0 01 f1 02 c0       	mov    al,ds:0xc002f101
c00161f1:	84 c0                	test   al,al
c00161f3:	74 41                	je     c0016236 <sendKeyboardToken(KeyboardToken)+0x312>
c00161f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161fd:	74 2b                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x306>
c00161ff:	8b 15 04 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f404
c0016205:	89 d0                	mov    eax,edx
c0016207:	c1 e0 02             	shl    eax,0x2
c001620a:	01 d0                	add    eax,edx
c001620c:	01 c0                	add    eax,eax
c001620e:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c0016213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016216:	0f b7 c0             	movzx  eax,ax
c0016219:	8d 50 d0             	lea    edx,[eax-0x30]
c001621c:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016221:	01 d0                	add    eax,edx
c0016223:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c0016228:	eb 6d                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c001622a:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0016234:	eb 61                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c0016236:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c001623b:	85 c0                	test   eax,eax
c001623d:	74 18                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x333>
c001623f:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016244:	0f b6 c0             	movzx  eax,al
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	50                   	push   eax
c001624b:	e8 16 fc ff ff       	call   c0015e66 <sendKeyToTerminal(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016257:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0016261:	eb 34                	jmp    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c0016263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016266:	66 3d 01 01          	cmp    ax,0x101
c001626a:	75 2b                	jne    c0016297 <sendKeyboardToken(KeyboardToken)+0x373>
c001626c:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016271:	85 c0                	test   eax,eax
c0016273:	74 18                	je     c001628d <sendKeyboardToken(KeyboardToken)+0x369>
c0016275:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c001627a:	0f b6 c0             	movzx  eax,al
c001627d:	83 ec 0c             	sub    esp,0xc
c0016280:	50                   	push   eax
c0016281:	e8 e0 fb ff ff       	call   c0015e66 <sendKeyToTerminal(unsigned char)>
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001628d:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0016297:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001629a:	83 f0 01             	xor    eax,0x1
c001629d:	84 c0                	test   al,al
c001629f:	74 4c                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162a4:	83 f0 01             	xor    eax,0x1
c00162a7:	84 c0                	test   al,al
c00162a9:	74 42                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ab:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c00162b0:	83 f0 01             	xor    eax,0x1
c00162b3:	84 c0                	test   al,al
c00162b5:	74 36                	je     c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ba:	66 83 f8 1f          	cmp    ax,0x1f
c00162be:	76 09                	jbe    c00162c9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	66 83 f8 7e          	cmp    ax,0x7e
c00162c7:	76 12                	jbe    c00162db <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cc:	66 83 f8 0a          	cmp    ax,0xa
c00162d0:	74 09                	je     c00162db <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d5:	66 83 f8 08          	cmp    ax,0x8
c00162d9:	75 12                	jne    c00162ed <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162de:	0f b6 c0             	movzx  eax,al
c00162e1:	83 ec 0c             	sub    esp,0xc
c00162e4:	50                   	push   eax
c00162e5:	e8 7c fb ff ff       	call   c0015e66 <sendKeyToTerminal(unsigned char)>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162f0:	83 f0 01             	xor    eax,0x1
c00162f3:	84 c0                	test   al,al
c00162f5:	74 4f                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c00162f7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162fa:	83 f0 01             	xor    eax,0x1
c00162fd:	84 c0                	test   al,al
c00162ff:	74 45                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c0016301:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0016306:	84 c0                	test   al,al
c0016308:	74 3c                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	66 83 f8 3f          	cmp    ax,0x3f
c0016311:	76 33                	jbe    c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c0016313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016316:	66 83 f8 7f          	cmp    ax,0x7f
c001631a:	77 2a                	ja     c0016346 <sendKeyboardToken(KeyboardToken)+0x422>
c001631c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631f:	88 c2                	mov    dl,al
c0016321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016324:	66 83 f8 5f          	cmp    ax,0x5f
c0016328:	76 04                	jbe    c001632e <sendKeyboardToken(KeyboardToken)+0x40a>
c001632a:	b0 20                	mov    al,0x20
c001632c:	eb 02                	jmp    c0016330 <sendKeyboardToken(KeyboardToken)+0x40c>
c001632e:	b0 00                	mov    al,0x0
c0016330:	29 c2                	sub    edx,eax
c0016332:	88 d0                	mov    al,dl
c0016334:	83 e8 40             	sub    eax,0x40
c0016337:	0f b6 c0             	movzx  eax,al
c001633a:	83 ec 0c             	sub    esp,0xc
c001633d:	50                   	push   eax
c001633e:	e8 23 fb ff ff       	call   c0015e66 <sendKeyToTerminal(unsigned char)>
c0016343:	83 c4 10             	add    esp,0x10
c0016346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016349:	66 3d 00 03          	cmp    ax,0x300
c001634d:	75 0f                	jne    c001635e <sendKeyboardToken(KeyboardToken)+0x43a>
c001634f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016352:	83 f0 01             	xor    eax,0x1
c0016355:	84 c0                	test   al,al
c0016357:	74 05                	je     c001635e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016359:	e8 3e aa ff ff       	call   c0010d9c <doTerminalCycle()>
c001635e:	90                   	nop
c001635f:	c9                   	leave  
c0016360:	c3                   	ret    

c0016361 <clearInternalKeybuffer(VgaText*)>:
c0016361:	55                   	push   ebp
c0016362:	89 e5                	mov    ebp,esp
c0016364:	83 ec 08             	sub    esp,0x8
c0016367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636a:	05 98 01 00 00       	add    eax,0x198
c001636f:	83 ec 0c             	sub    esp,0xc
c0016372:	50                   	push   eax
c0016373:	e8 2c a4 fe ff       	call   c00007a4 <strlen>
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001637e:	81 c2 98 01 00 00    	add    edx,0x198
c0016384:	83 ec 04             	sub    esp,0x4
c0016387:	50                   	push   eax
c0016388:	6a 00                	push   0x0
c001638a:	52                   	push   edx
c001638b:	e8 f8 a3 fe ff       	call   c0000788 <memset>
c0016390:	83 c4 10             	add    esp,0x10
c0016393:	90                   	nop
c0016394:	c9                   	leave  
c0016395:	c3                   	ret    

c0016396 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016396:	55                   	push   ebp
c0016397:	89 e5                	mov    ebp,esp
c0016399:	83 ec 18             	sub    esp,0x18
c001639c:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c00163a1:	85 c0                	test   eax,eax
c00163a3:	74 2a                	je     c00163cf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00163a5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00163ab:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c00163b1:	83 ec 04             	sub    esp,0x4
c00163b4:	68 00 f0 02 c0       	push   0xc002f000
c00163b9:	83 ec 08             	sub    esp,0x8
c00163bc:	89 e2                	mov    edx,esp
c00163be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00163c1:	89 02                	mov    DWORD PTR [edx],eax
c00163c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00163c6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00163ca:	ff d1                	call   ecx
c00163cc:	83 c4 10             	add    esp,0x10
c00163cf:	83 ec 0c             	sub    esp,0xc
c00163d2:	68 63 ba 02 c0       	push   0xc002ba63
c00163d7:	e8 f7 ca ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	fb                   	sti    
c00163e0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163e7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163eb:	0f 84 a1 00 00 00    	je     c0016492 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f4:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163fa:	84 c0                	test   al,al
c00163fc:	75 28                	jne    c0016426 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163fe:	fa                   	cli    
c00163ff:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016404:	40                   	inc    eax
c0016405:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001640a:	e8 77 80 00 00       	call   c001e486 <schedule()>
c001640f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016414:	48                   	dec    eax
c0016415:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001641a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001641f:	85 c0                	test   eax,eax
c0016421:	75 ce                	jne    c00163f1 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016423:	fb                   	sti    
c0016424:	eb cb                	jmp    c00163f1 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016426:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016429:	8d 50 01             	lea    edx,[eax+0x1]
c001642c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001642f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016432:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016438:	88 10                	mov    BYTE PTR [eax],dl
c001643a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001643d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016443:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016449:	05 98 01 00 00       	add    eax,0x198
c001644e:	83 ec 0c             	sub    esp,0xc
c0016451:	50                   	push   eax
c0016452:	e8 4d a3 fe ff       	call   c00007a4 <strlen>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001645d:	81 c2 98 01 00 00    	add    edx,0x198
c0016463:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016466:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016469:	81 c2 98 01 00 00    	add    edx,0x198
c001646f:	83 ec 04             	sub    esp,0x4
c0016472:	50                   	push   eax
c0016473:	51                   	push   ecx
c0016474:	52                   	push   edx
c0016475:	e8 26 a2 fe ff       	call   c00006a0 <memmove>
c001647a:	83 c4 10             	add    esp,0x10
c001647d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016480:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016483:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016487:	0f 85 5a ff ff ff    	jne    c00163e7 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c001648d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016490:	eb 03                	jmp    c0016495 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016495:	c9                   	leave  
c0016496:	c3                   	ret    
c0016497:	90                   	nop

c0016498 <Keyboard::Keyboard(char const*)>:
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a6:	50                   	push   eax
c00164a7:	e8 4c e0 ff ff       	call   c00144f8 <Device::Device(char const*)>
c00164ac:	83 c4 10             	add    esp,0x10
c00164af:	ba 84 ba 02 c0       	mov    edx,0xc002ba84
c00164b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b8:	89 10                	mov    DWORD PTR [eax],edx
c00164ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164be:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164c8:	c6 05 e4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efe4,0x1
c00164cf:	90                   	nop
c00164d0:	83 c4 0c             	add    esp,0xc
c00164d3:	c3                   	ret    

c00164d4 <Keyboard::~Keyboard()>:
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	ba 84 ba 02 c0       	mov    edx,0xc002ba84
c00164dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e0:	89 10                	mov    DWORD PTR [eax],edx
c00164e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	50                   	push   eax
c00164ea:	e8 eb dc ff ff       	call   c00141da <Device::~Device()>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	90                   	nop
c00164f3:	83 c4 0c             	add    esp,0xc
c00164f6:	c3                   	ret    
c00164f7:	90                   	nop

c00164f8 <Keyboard::~Keyboard()>:
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016502:	e8 cd ff ff ff       	call   c00164d4 <Keyboard::~Keyboard()>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	68 5c 01 00 00       	push   0x15c
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 d8 c8 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 c4 0c             	add    esp,0xc
c0016521:	c3                   	ret    

c0016522 <LogicalDisk::close(int, int, void*)>:
c0016522:	83 c8 ff             	or     eax,0xffffffff
c0016525:	c3                   	ret    

c0016526 <LogicalDisk::~LogicalDisk()>:
c0016526:	83 ec 0c             	sub    esp,0xc
c0016529:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c001652e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016532:	89 10                	mov    DWORD PTR [eax],edx
c0016534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016538:	83 ec 0c             	sub    esp,0xc
c001653b:	50                   	push   eax
c001653c:	e8 99 dc ff ff       	call   c00141da <Device::~Device()>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	90                   	nop
c0016545:	83 c4 0c             	add    esp,0xc
c0016548:	c3                   	ret    
c0016549:	90                   	nop

c001654a <LogicalDisk::~LogicalDisk()>:
c001654a:	83 ec 0c             	sub    esp,0xc
c001654d:	83 ec 0c             	sub    esp,0xc
c0016550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016554:	e8 cd ff ff ff       	call   c0016526 <LogicalDisk::~LogicalDisk()>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	83 ec 08             	sub    esp,0x8
c001655f:	68 74 01 00 00       	push   0x174
c0016564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016568:	e8 86 c8 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001656d:	83 c4 10             	add    esp,0x10
c0016570:	83 c4 0c             	add    esp,0xc
c0016573:	c3                   	ret    

c0016574 <LogicalDisk::open(int, int, void*)>:
c0016574:	83 ec 18             	sub    esp,0x18
c0016577:	68 b0 ba 02 c0       	push   0xc002bab0
c001657c:	e8 0e 43 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0016581:	83 c8 ff             	or     eax,0xffffffff
c0016584:	83 c4 1c             	add    esp,0x1c
c0016587:	c3                   	ret    

c0016588 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016588:	53                   	push   ebx
c0016589:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001658d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016591:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016595:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001659b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00165a1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00165a7:	77 10                	ja     c00165b9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00165a9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165af:	89 d3                	mov    ebx,edx
c00165b1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165b7:	72 05                	jb     c00165be <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165b9:	83 c8 ff             	or     eax,0xffffffff
c00165bc:	89 c2                	mov    edx,eax
c00165be:	5b                   	pop    ebx
c00165bf:	c3                   	ret    

c00165c0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165c0:	56                   	push   esi
c00165c1:	83 c8 ff             	or     eax,0xffffffff
c00165c4:	53                   	push   ebx
c00165c5:	89 c2                	mov    edx,eax
c00165c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165d9:	77 27                	ja     c0016602 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165db:	89 d8                	mov    eax,ebx
c00165dd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165e3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165ee:	89 c2                	mov    edx,eax
c00165f0:	73 10                	jae    c0016602 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165f2:	89 c8                	mov    eax,ecx
c00165f4:	89 da                	mov    edx,ebx
c00165f6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165fc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016602:	5b                   	pop    ebx
c0016603:	5e                   	pop    esi
c0016604:	c3                   	ret    
c0016605:	90                   	nop

c0016606 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016606:	83 ec 1c             	sub    esp,0x1c
c0016609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001660d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016615:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016619:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001661d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016620:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016624:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662c:	83 ec 08             	sub    esp,0x8
c001662f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016633:	50                   	push   eax
c0016634:	e8 bf de ff ff       	call   c00144f8 <Device::Device(char const*)>
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c0016641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016645:	89 10                	mov    DWORD PTR [eax],edx
c0016647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016656:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001665d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016661:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001666b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016673:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016677:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001667d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016683:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016687:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001668a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001668e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016694:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001669a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166a2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00166a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166b6:	90                   	nop
c00166b7:	83 c4 1c             	add    esp,0x1c
c00166ba:	c3                   	ret    
c00166bb:	90                   	nop

c00166bc <LogicalDisk::assignDriveLetter()>:
c00166bc:	55                   	push   ebp
c00166bd:	57                   	push   edi
c00166be:	56                   	push   esi
c00166bf:	53                   	push   ebx
c00166c0:	83 ec 14             	sub    esp,0x14
c00166c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166c7:	8b 3d 20 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f420
c00166cd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166d7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166dd:	8b 3d 24 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f424
c00166e3:	3c 01                	cmp    al,0x1
c00166e5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166ed:	19 c0                	sbb    eax,eax
c00166ef:	83 e0 02             	and    eax,0x2
c00166f2:	83 c0 41             	add    eax,0x41
c00166f5:	0f be e8             	movsx  ebp,al
c00166f8:	3c 43                	cmp    al,0x43
c00166fa:	75 10                	jne    c001670c <LogicalDisk::assignDriveLetter()+0x50>
c00166fc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016703:	75 5d                	jne    c0016762 <LogicalDisk::assignDriveLetter()+0xa6>
c0016705:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001670a:	75 56                	jne    c0016762 <LogicalDisk::assignDriveLetter()+0xa6>
c001670c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001670f:	ba 01 00 00 00       	mov    edx,0x1
c0016714:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016718:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001671c:	d3 e2                	shl    edx,cl
c001671e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016722:	89 d7                	mov    edi,edx
c0016724:	89 d6                	mov    esi,edx
c0016726:	c1 ff 1f             	sar    edi,0x1f
c0016729:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001672d:	21 f9                	and    ecx,edi
c001672f:	09 d1                	or     ecx,edx
c0016731:	75 2f                	jne    c0016762 <LogicalDisk::assignDriveLetter()+0xa6>
c0016733:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016737:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001673b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016741:	09 f2                	or     edx,esi
c0016743:	89 15 20 f4 02 c0    	mov    DWORD PTR ds:0xc002f420,edx
c0016749:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001674d:	09 fa                	or     edx,edi
c001674f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016753:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c0016759:	89 1c bd 40 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0bc0],ebx
c0016760:	eb 08                	jmp    c001676a <LogicalDisk::assignDriveLetter()+0xae>
c0016762:	45                   	inc    ebp
c0016763:	40                   	inc    eax
c0016764:	3c 5b                	cmp    al,0x5b
c0016766:	75 90                	jne    c00166f8 <LogicalDisk::assignDriveLetter()+0x3c>
c0016768:	31 c0                	xor    eax,eax
c001676a:	83 c4 14             	add    esp,0x14
c001676d:	5b                   	pop    ebx
c001676e:	5e                   	pop    esi
c001676f:	5f                   	pop    edi
c0016770:	5d                   	pop    ebp
c0016771:	c3                   	ret    

c0016772 <LogicalDisk::mount()>:
c0016772:	56                   	push   esi
c0016773:	53                   	push   ebx
c0016774:	50                   	push   eax
c0016775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016779:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c001677f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016789:	85 db                	test   ebx,ebx
c001678b:	74 50                	je     c00167dd <LogicalDisk::mount()+0x6b>
c001678d:	50                   	push   eax
c001678e:	50                   	push   eax
c001678f:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c0016795:	68 d4 ba 02 c0       	push   0xc002bad4
c001679a:	e8 34 c7 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001679f:	83 c4 0c             	add    esp,0xc
c00167a2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00167a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167ab:	83 e8 41             	sub    eax,0x41
c00167ae:	50                   	push   eax
c00167af:	56                   	push   esi
c00167b0:	53                   	push   ebx
c00167b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167b4:	83 c4 10             	add    esp,0x10
c00167b7:	84 c0                	test   al,al
c00167b9:	74 08                	je     c00167c3 <LogicalDisk::mount()+0x51>
c00167bb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167c1:	eb 1c                	jmp    c00167df <LogicalDisk::mount()+0x6d>
c00167c3:	51                   	push   ecx
c00167c4:	51                   	push   ecx
c00167c5:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c00167cb:	68 ef ba 02 c0       	push   0xc002baef
c00167d0:	e8 fe c6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00167d5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	eb ac                	jmp    c0016789 <LogicalDisk::mount()+0x17>
c00167dd:	31 c0                	xor    eax,eax
c00167df:	5a                   	pop    edx
c00167e0:	5b                   	pop    ebx
c00167e1:	5e                   	pop    esi
c00167e2:	c3                   	ret    
c00167e3:	90                   	nop

c00167e4 <LogicalDisk::unmount()>:
c00167e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167e8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167f2:	c3                   	ret    
c00167f3:	90                   	nop

c00167f4 <LogicalDisk::eject()>:
c00167f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0016800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016804:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016807:	90                   	nop

c0016808 <LogicalDisk::unassignDriveLetter()>:
c0016808:	57                   	push   edi
c0016809:	56                   	push   esi
c001680a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001680e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016815:	84 c9                	test   cl,cl
c0016817:	75 0f                	jne    c0016828 <LogicalDisk::unassignDriveLetter()+0x20>
c0016819:	c7 44 24 0c 0a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb0a
c0016821:	5e                   	pop    esi
c0016822:	5f                   	pop    edi
c0016823:	e9 67 40 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c0016828:	83 e9 41             	sub    ecx,0x41
c001682b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016832:	b8 01 00 00 00       	mov    eax,0x1
c0016837:	c7 04 8d 40 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0bc0],0x0
c0016842:	d3 e0                	shl    eax,cl
c0016844:	89 c7                	mov    edi,eax
c0016846:	f7 d0                	not    eax
c0016848:	c1 ff 1f             	sar    edi,0x1f
c001684b:	21 05 20 f4 02 c0    	and    DWORD PTR ds:0xc002f420,eax
c0016851:	89 fe                	mov    esi,edi
c0016853:	f7 d6                	not    esi
c0016855:	21 35 24 f4 02 c0    	and    DWORD PTR ds:0xc002f424,esi
c001685b:	5e                   	pop    esi
c001685c:	5f                   	pop    edi
c001685d:	c3                   	ret    

c001685e <LogicalDisk::read(unsigned long long, int, void*)>:
c001685e:	57                   	push   edi
c001685f:	56                   	push   esi
c0016860:	53                   	push   ebx
c0016861:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016865:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016869:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001686d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016871:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016877:	77 41                	ja     c00168ba <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016879:	99                   	cdq    
c001687a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016880:	01 c8                	add    eax,ecx
c0016882:	11 da                	adc    edx,ebx
c0016884:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001688a:	19 d7                	sbb    edi,edx
c001688c:	72 33                	jb     c00168c1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001688e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016894:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001689a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001689e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168a2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168b2:	5b                   	pop    ebx
c00168b3:	5e                   	pop    esi
c00168b4:	5f                   	pop    edi
c00168b5:	e9 f8 0a 00 00       	jmp    c00173b2 <VCache::read(unsigned long long, int, void*)>
c00168ba:	b8 05 00 00 00       	mov    eax,0x5
c00168bf:	eb 05                	jmp    c00168c6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168c1:	b8 07 00 00 00       	mov    eax,0x7
c00168c6:	5b                   	pop    ebx
c00168c7:	5e                   	pop    esi
c00168c8:	5f                   	pop    edi
c00168c9:	c3                   	ret    

c00168ca <LogicalDisk::write(unsigned long long, int, void*)>:
c00168ca:	57                   	push   edi
c00168cb:	56                   	push   esi
c00168cc:	53                   	push   ebx
c00168cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168e3:	77 41                	ja     c0016926 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168e5:	99                   	cdq    
c00168e6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168ec:	01 c8                	add    eax,ecx
c00168ee:	11 da                	adc    edx,ebx
c00168f0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168f6:	19 d7                	sbb    edi,edx
c00168f8:	72 33                	jb     c001692d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168fa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016900:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016906:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001690a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001690e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016914:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001691a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001691e:	5b                   	pop    ebx
c001691f:	5e                   	pop    esi
c0016920:	5f                   	pop    edi
c0016921:	e9 96 09 00 00       	jmp    c00172bc <VCache::write(unsigned long long, int, void*)>
c0016926:	b8 05 00 00 00       	mov    eax,0x5
c001692b:	eb 05                	jmp    c0016932 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001692d:	b8 07 00 00 00       	mov    eax,0x7
c0016932:	5b                   	pop    ebx
c0016933:	5e                   	pop    esi
c0016934:	5f                   	pop    edi
c0016935:	c3                   	ret    

c0016936 <Mouse::Mouse(char const*)>:
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001693d:	83 ec 08             	sub    esp,0x8
c0016940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016944:	50                   	push   eax
c0016945:	e8 ae db ff ff       	call   c00144f8 <Device::Device(char const*)>
c001694a:	83 c4 10             	add    esp,0x10
c001694d:	ba 60 bb 02 c0       	mov    edx,0xc002bb60
c0016952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016956:	89 10                	mov    DWORD PTR [eax],edx
c0016958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016966:	90                   	nop
c0016967:	83 c4 0c             	add    esp,0xc
c001696a:	c3                   	ret    
c001696b:	90                   	nop

c001696c <Mouse::~Mouse()>:
c001696c:	83 ec 0c             	sub    esp,0xc
c001696f:	ba 60 bb 02 c0       	mov    edx,0xc002bb60
c0016974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016978:	89 10                	mov    DWORD PTR [eax],edx
c001697a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	50                   	push   eax
c0016982:	e8 53 d8 ff ff       	call   c00141da <Device::~Device()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	90                   	nop
c001698b:	83 c4 0c             	add    esp,0xc
c001698e:	c3                   	ret    
c001698f:	90                   	nop

c0016990 <Mouse::~Mouse()>:
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001699a:	e8 cd ff ff ff       	call   c001696c <Mouse::~Mouse()>
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	83 ec 08             	sub    esp,0x8
c00169a5:	68 58 01 00 00       	push   0x158
c00169aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ae:	e8 40 c4 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	83 c4 0c             	add    esp,0xc
c00169b9:	c3                   	ret    

c00169ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169ba:	55                   	push   ebp
c00169bb:	57                   	push   edi
c00169bc:	56                   	push   esi
c00169bd:	53                   	push   ebx
c00169be:	81 ec 20 01 00 00    	sub    esp,0x120
c00169c4:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00169cb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00169d2:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169d9:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169e0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00169e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00169ec:	56                   	push   esi
c00169ed:	68 84 bb 02 c0       	push   0xc002bb84
c00169f2:	e8 dc c4 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00169f7:	58                   	pop    eax
c00169f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169ff:	e8 f0 db ff ff       	call   c00145f4 <Device::getName()>
c0016a04:	5a                   	pop    edx
c0016a05:	59                   	pop    ecx
c0016a06:	50                   	push   eax
c0016a07:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016a0b:	53                   	push   ebx
c0016a0c:	e8 33 9e fe ff       	call   c0000844 <strcpy>
c0016a11:	5d                   	pop    ebp
c0016a12:	58                   	pop    eax
c0016a13:	68 b5 bb 02 c0       	push   0xc002bbb5
c0016a18:	53                   	push   ebx
c0016a19:	e8 66 9f fe ff       	call   c0000984 <strcat>
c0016a1e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a25:	e8 f2 8e ff ff       	call   c000f91c <malloc>
c0016a2a:	83 c4 0c             	add    esp,0xc
c0016a2d:	89 c5                	mov    ebp,eax
c0016a2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a37:	57                   	push   edi
c0016a38:	56                   	push   esi
c0016a39:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a40:	53                   	push   ebx
c0016a41:	50                   	push   eax
c0016a42:	e8 bf fb ff ff       	call   c0016606 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a47:	83 c4 14             	add    esp,0x14
c0016a4a:	55                   	push   ebp
c0016a4b:	e8 6c fc ff ff       	call   c00166bc <LogicalDisk::assignDriveLetter()>
c0016a50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a53:	0f be d8             	movsx  ebx,al
c0016a56:	e8 17 fd ff ff       	call   c0016772 <LogicalDisk::mount()>
c0016a5b:	58                   	pop    eax
c0016a5c:	5a                   	pop    edx
c0016a5d:	55                   	push   ebp
c0016a5e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a65:	e8 9e d8 ff ff       	call   c0014308 <Device::addChild(Device*)>
c0016a6a:	59                   	pop    ecx
c0016a6b:	5e                   	pop    esi
c0016a6c:	53                   	push   ebx
c0016a6d:	68 c0 bb 02 c0       	push   0xc002bbc0
c0016a72:	e8 5c c4 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0016a77:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a7d:	5b                   	pop    ebx
c0016a7e:	5e                   	pop    esi
c0016a7f:	5f                   	pop    edi
c0016a80:	5d                   	pop    ebp
c0016a81:	c3                   	ret    

c0016a82 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a82:	55                   	push   ebp
c0016a83:	57                   	push   edi
c0016a84:	56                   	push   esi
c0016a85:	53                   	push   ebx
c0016a86:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a8c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a93:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a99:	3d 00 02 00 00       	cmp    eax,0x200
c0016a9e:	74 27                	je     c0016ac7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016aa0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016aa6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016aac:	83 ec 10             	sub    esp,0x10
c0016aaf:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016ab3:	99                   	cdq    
c0016ab4:	c1 e6 0a             	shl    esi,0xa
c0016ab7:	52                   	push   edx
c0016ab8:	89 fd                	mov    ebp,edi
c0016aba:	50                   	push   eax
c0016abb:	55                   	push   ebp
c0016abc:	56                   	push   esi
c0016abd:	e8 e2 06 01 00       	call   c00271a4 <__udivdi3>
c0016ac2:	e9 b1 00 00 00       	jmp    c0016b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ac7:	83 ec 0c             	sub    esp,0xc
c0016aca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016acc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016ad0:	56                   	push   esi
c0016ad1:	6a 01                	push   0x1
c0016ad3:	6a 00                	push   0x0
c0016ad5:	6a 00                	push   0x0
c0016ad7:	53                   	push   ebx
c0016ad8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016adb:	83 c4 20             	add    esp,0x20
c0016ade:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ae6:	75 0a                	jne    c0016af2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016ae8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016af0:	74 2c                	je     c0016b1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016af2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016afe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b04:	83 ec 10             	sub    esp,0x10
c0016b07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b0b:	89 f7                	mov    edi,esi
c0016b0d:	c1 e0 0a             	shl    eax,0xa
c0016b10:	c1 ff 1f             	sar    edi,0x1f
c0016b13:	57                   	push   edi
c0016b14:	56                   	push   esi
c0016b15:	52                   	push   edx
c0016b16:	50                   	push   eax
c0016b17:	e8 88 06 01 00       	call   c00271a4 <__udivdi3>
c0016b1c:	eb 5a                	jmp    c0016b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b2c:	83 e1 7f             	and    ecx,0x7f
c0016b2f:	83 e0 7f             	and    eax,0x7f
c0016b32:	01 c1                	add    ecx,eax
c0016b34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b3b:	83 e0 7f             	and    eax,0x7f
c0016b3e:	01 c1                	add    ecx,eax
c0016b40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b47:	83 e0 7f             	and    eax,0x7f
c0016b4a:	00 c1                	add    cl,al
c0016b4c:	74 41                	je     c0016b8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b60:	83 ec 10             	sub    esp,0x10
c0016b63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b67:	89 f7                	mov    edi,esi
c0016b69:	c1 e0 0a             	shl    eax,0xa
c0016b6c:	c1 ff 1f             	sar    edi,0x1f
c0016b6f:	57                   	push   edi
c0016b70:	56                   	push   esi
c0016b71:	52                   	push   edx
c0016b72:	50                   	push   eax
c0016b73:	e8 2c 06 01 00       	call   c00271a4 <__udivdi3>
c0016b78:	83 c4 14             	add    esp,0x14
c0016b7b:	52                   	push   edx
c0016b7c:	50                   	push   eax
c0016b7d:	6a 00                	push   0x0
c0016b7f:	6a 00                	push   0x0
c0016b81:	53                   	push   ebx
c0016b82:	e8 33 fe ff ff       	call   c00169ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b87:	83 c4 20             	add    esp,0x20
c0016b8a:	e9 79 01 00 00       	jmp    c0016d08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b8f:	89 f0                	mov    eax,esi
c0016b91:	31 f6                	xor    esi,esi
c0016b93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b9a:	75 02                	jne    c0016b9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b9c:	89 f1                	mov    ecx,esi
c0016b9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ba5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016bac:	c1 e2 08             	shl    edx,0x8
c0016baf:	c1 e7 10             	shl    edi,0x10
c0016bb2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016bba:	09 fa                	or     edx,edi
c0016bbc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bc4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bcb:	83 c0 10             	add    eax,0x10
c0016bce:	09 fa                	or     edx,edi
c0016bd0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bd7:	c1 e7 18             	shl    edi,0x18
c0016bda:	09 fa                	or     edx,edi
c0016bdc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016be3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016be7:	c1 e7 10             	shl    edi,0x10
c0016bea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bf1:	c1 e2 08             	shl    edx,0x8
c0016bf4:	09 fa                	or     edx,edi
c0016bf6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016bfd:	09 fa                	or     edx,edi
c0016bff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016c06:	c1 e7 18             	shl    edi,0x18
c0016c09:	09 fa                	or     edx,edi
c0016c0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016c0f:	46                   	inc    esi
c0016c10:	83 fe 04             	cmp    esi,0x4
c0016c13:	0f 85 7a ff ff ff    	jne    c0016b93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1d:	83 f0 01             	xor    eax,0x1
c0016c20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c24:	75 57                	jne    c0016c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c2a:	83 f0 01             	xor    eax,0x1
c0016c2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c31:	75 4a                	jne    c0016c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c33:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c37:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c4d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c53:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c59:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c5d:	89 f7                	mov    edi,esi
c0016c5f:	c1 e0 0a             	shl    eax,0xa
c0016c62:	c1 ff 1f             	sar    edi,0x1f
c0016c65:	57                   	push   edi
c0016c66:	56                   	push   esi
c0016c67:	52                   	push   edx
c0016c68:	50                   	push   eax
c0016c69:	e8 36 05 01 00       	call   c00271a4 <__udivdi3>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c7d:	84 c9                	test   cl,cl
c0016c7f:	74 53                	je     c0016cd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c81:	0f b6 c9             	movzx  ecx,cl
c0016c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c9c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ca0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ca8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016cb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016cbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016cc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cc4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ccc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016cd4:	31 ed                	xor    ebp,ebp
c0016cd6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cde:	89 f8                	mov    eax,edi
c0016ce0:	09 f0                	or     eax,esi
c0016ce2:	74 1e                	je     c0016d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ce4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ce8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cec:	89 d1                	mov    ecx,edx
c0016cee:	09 c1                	or     ecx,eax
c0016cf0:	74 10                	je     c0016d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	57                   	push   edi
c0016cf6:	56                   	push   esi
c0016cf7:	52                   	push   edx
c0016cf8:	50                   	push   eax
c0016cf9:	53                   	push   ebx
c0016cfa:	e8 bb fc ff ff       	call   c00169ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cff:	83 c4 20             	add    esp,0x20
c0016d02:	45                   	inc    ebp
c0016d03:	83 fd 04             	cmp    ebp,0x4
c0016d06:	75 ce                	jne    c0016cd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016d08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016d0e:	5b                   	pop    ebx
c0016d0f:	5e                   	pop    esi
c0016d10:	5f                   	pop    edi
c0016d11:	5d                   	pop    ebp
c0016d12:	c3                   	ret    
c0016d13:	90                   	nop

c0016d14 <Serial::Serial(char const*)>:
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1b:	83 ec 08             	sub    esp,0x8
c0016d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d22:	50                   	push   eax
c0016d23:	e8 d0 d7 ff ff       	call   c00144f8 <Device::Device(char const*)>
c0016d28:	83 c4 10             	add    esp,0x10
c0016d2b:	ba ec bb 02 c0       	mov    edx,0xc002bbec
c0016d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d34:	89 10                	mov    DWORD PTR [eax],edx
c0016d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d44:	90                   	nop
c0016d45:	83 c4 0c             	add    esp,0xc
c0016d48:	c3                   	ret    
c0016d49:	90                   	nop

c0016d4a <Serial::~Serial()>:
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	ba ec bb 02 c0       	mov    edx,0xc002bbec
c0016d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d56:	89 10                	mov    DWORD PTR [eax],edx
c0016d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	50                   	push   eax
c0016d60:	e8 75 d4 ff ff       	call   c00141da <Device::~Device()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	90                   	nop
c0016d69:	83 c4 0c             	add    esp,0xc
c0016d6c:	c3                   	ret    
c0016d6d:	90                   	nop

c0016d6e <Serial::~Serial()>:
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d78:	e8 cd ff ff ff       	call   c0016d4a <Serial::~Serial()>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	83 ec 08             	sub    esp,0x8
c0016d83:	68 58 01 00 00       	push   0x158
c0016d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8c:	e8 62 c0 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	83 c4 0c             	add    esp,0xc
c0016d97:	c3                   	ret    

c0016d98 <Timer::Timer(char const*)>:
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9f:	83 ec 08             	sub    esp,0x8
c0016da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da6:	50                   	push   eax
c0016da7:	e8 4c d7 ff ff       	call   c00144f8 <Device::Device(char const*)>
c0016dac:	83 c4 10             	add    esp,0x10
c0016daf:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c0016db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db8:	89 10                	mov    DWORD PTR [eax],edx
c0016dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbe:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016dc8:	90                   	nop
c0016dc9:	83 c4 0c             	add    esp,0xc
c0016dcc:	c3                   	ret    
c0016dcd:	90                   	nop

c0016dce <Timer::~Timer()>:
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c0016dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dda:	89 10                	mov    DWORD PTR [eax],edx
c0016ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	50                   	push   eax
c0016de4:	e8 f1 d3 ff ff       	call   c00141da <Device::~Device()>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	90                   	nop
c0016ded:	83 c4 0c             	add    esp,0xc
c0016df0:	c3                   	ret    
c0016df1:	90                   	nop

c0016df2 <Timer::~Timer()>:
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	83 ec 0c             	sub    esp,0xc
c0016df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfc:	e8 cd ff ff ff       	call   c0016dce <Timer::~Timer()>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	68 5c 01 00 00       	push   0x15c
c0016e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e10:	e8 de bf ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0016e15:	83 c4 10             	add    esp,0x10
c0016e18:	83 c4 0c             	add    esp,0xc
c0016e1b:	c3                   	ret    

c0016e1c <Timer::read()>:
c0016e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e26:	c3                   	ret    

c0016e27 <timerHandler(unsigned long long)>:
c0016e27:	55                   	push   ebp
c0016e28:	57                   	push   edi
c0016e29:	56                   	push   esi
c0016e2a:	53                   	push   ebx
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e32:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e36:	01 35 b0 f4 02 c0    	add    DWORD PTR ds:0xc002f4b0,esi
c0016e3c:	11 3d b4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4b4,edi
c0016e42:	80 3d 2d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee2d,0x0
c0016e49:	0f 84 42 01 00 00    	je     c0016f91 <timerHandler(unsigned long long)+0x16a>
c0016e4f:	fa                   	cli    
c0016e50:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c0016e5f:	68 78 23 03 c0       	push   0xc0032378
c0016e64:	e8 c1 23 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	84 c0                	test   al,al
c0016e6e:	0f 85 a2 00 00 00    	jne    c0016f16 <timerHandler(unsigned long long)+0xef>
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	68 78 23 03 c0       	push   0xc0032378
c0016e7c:	e8 c5 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	89 c3                	mov    ebx,eax
c0016e86:	83 ec 0c             	sub    esp,0xc
c0016e89:	68 78 23 03 c0       	push   0xc0032378
c0016e8e:	e8 b3 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e93:	c7 04 24 78 23 03 c0 	mov    DWORD PTR [esp],0xc0032378
c0016e9a:	89 c5                	mov    ebp,eax
c0016e9c:	e8 ad 23 01 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ea1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ea4:	83 c4 10             	add    esp,0x10
c0016ea7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016eaa:	39 15 b0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4b0,edx
c0016eb0:	a1 b4 f4 02 c0       	mov    eax,ds:0xc002f4b4
c0016eb5:	19 c8                	sbb    eax,ecx
c0016eb7:	72 21                	jb     c0016eda <timerHandler(unsigned long long)+0xb3>
c0016eb9:	83 ec 0c             	sub    esp,0xc
c0016ebc:	55                   	push   ebp
c0016ebd:	e8 88 7a 00 00       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	39 eb                	cmp    ebx,ebp
c0016ec7:	75 21                	jne    c0016eea <timerHandler(unsigned long long)+0xc3>
c0016ec9:	83 ec 0c             	sub    esp,0xc
c0016ecc:	68 78 23 03 c0       	push   0xc0032378
c0016ed1:	e8 70 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ed6:	89 c3                	mov    ebx,eax
c0016ed8:	eb 0d                	jmp    c0016ee7 <timerHandler(unsigned long long)+0xc0>
c0016eda:	50                   	push   eax
c0016edb:	50                   	push   eax
c0016edc:	55                   	push   ebp
c0016edd:	68 78 23 03 c0       	push   0xc0032378
c0016ee2:	e8 15 24 01 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	83 ec 0c             	sub    esp,0xc
c0016eed:	68 78 23 03 c0       	push   0xc0032378
c0016ef2:	e8 33 23 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	84 c0                	test   al,al
c0016efc:	75 18                	jne    c0016f16 <timerHandler(unsigned long long)+0xef>
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	68 78 23 03 c0       	push   0xc0032378
c0016f06:	e8 3b 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	39 d8                	cmp    eax,ebx
c0016f10:	0f 85 70 ff ff ff    	jne    c0016e86 <timerHandler(unsigned long long)+0x5f>
c0016f16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f1b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016f1f:	74 3d                	je     c0016f5e <timerHandler(unsigned long long)+0x137>
c0016f21:	80 3d 2c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee2c,0x0
c0016f28:	74 34                	je     c0016f5e <timerHandler(unsigned long long)+0x137>
c0016f2a:	fa                   	cli    
c0016f2b:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0016f31:	31 d2                	xor    edx,edx
c0016f33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f38:	89 f9                	mov    ecx,edi
c0016f3a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f42:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f45:	39 c6                	cmp    esi,eax
c0016f47:	19 d1                	sbb    ecx,edx
c0016f49:	72 05                	jb     c0016f50 <timerHandler(unsigned long long)+0x129>
c0016f4b:	e8 36 75 00 00       	call   c001e486 <schedule()>
c0016f50:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016f55:	48                   	dec    eax
c0016f56:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016f5b:	75 01                	jne    c0016f5e <timerHandler(unsigned long long)+0x137>
c0016f5d:	fb                   	sti    
c0016f5e:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0016f63:	48                   	dec    eax
c0016f64:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0016f69:	75 18                	jne    c0016f83 <timerHandler(unsigned long long)+0x15c>
c0016f6b:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c0016f72:	74 0f                	je     c0016f83 <timerHandler(unsigned long long)+0x15c>
c0016f74:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0016f7e:	e8 03 75 00 00       	call   c001e486 <schedule()>
c0016f83:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016f88:	48                   	dec    eax
c0016f89:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016f8e:	75 01                	jne    c0016f91 <timerHandler(unsigned long long)+0x16a>
c0016f90:	fb                   	sti    
c0016f91:	83 c4 0c             	add    esp,0xc
c0016f94:	5b                   	pop    ebx
c0016f95:	5e                   	pop    esi
c0016f96:	5f                   	pop    edi
c0016f97:	5d                   	pop    ebp
c0016f98:	c3                   	ret    

c0016f99 <setupTimer(int)>:
c0016f99:	57                   	push   edi
c0016f9a:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0016f9f:	56                   	push   esi
c0016fa0:	53                   	push   ebx
c0016fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fab:	83 ec 0c             	sub    esp,0xc
c0016fae:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fb4:	e8 3b d6 ff ff       	call   c00145f4 <Device::getName()>
c0016fb9:	83 c4 10             	add    esp,0x10
c0016fbc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fbf:	0f 85 8d 00 00 00    	jne    c0017052 <setupTimer(int)+0xb9>
c0016fc5:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0016fca:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016fd1:	74 7f                	je     c0017052 <setupTimer(int)+0xb9>
c0016fd3:	83 ec 0c             	sub    esp,0xc
c0016fd6:	68 5c 01 00 00       	push   0x15c
c0016fdb:	e8 3c 89 ff ff       	call   c000f91c <malloc>
c0016fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fe3:	89 c3                	mov    ebx,eax
c0016fe5:	e8 90 fd 00 00       	call   c0026d7a <PIT::PIT()>
c0016fea:	59                   	pop    ecx
c0016feb:	5f                   	pop    edi
c0016fec:	53                   	push   ebx
c0016fed:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0016ff3:	e8 10 d3 ff ff       	call   c0014308 <Device::addChild(Device*)>
c0016ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ffa:	6a 00                	push   0x0
c0016ffc:	6a 00                	push   0x0
c0016ffe:	56                   	push   esi
c0016fff:	53                   	push   ebx
c0017000:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017003:	83 c4 14             	add    esp,0x14
c0017006:	68 60 01 00 00       	push   0x160
c001700b:	e8 0c 89 ff ff       	call   c000f91c <malloc>
c0017010:	89 04 24             	mov    DWORD PTR [esp],eax
c0017013:	89 c7                	mov    edi,eax
c0017015:	e8 10 fc 00 00       	call   c0026c2a <APICTimer::APICTimer()>
c001701a:	6a 00                	push   0x0
c001701c:	6a 00                	push   0x0
c001701e:	56                   	push   esi
c001701f:	57                   	push   edi
c0017020:	e8 07 fb 00 00       	call   c0026b2c <APICTimer::open(int, int, void*)>
c0017025:	83 c4 20             	add    esp,0x20
c0017028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001702a:	6a 00                	push   0x0
c001702c:	6a 00                	push   0x0
c001702e:	6a 00                	push   0x0
c0017030:	53                   	push   ebx
c0017031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017034:	58                   	pop    eax
c0017035:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001703a:	5a                   	pop    edx
c001703b:	57                   	push   edi
c001703c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017042:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017048:	e8 bb d2 ff ff       	call   c0014308 <Device::addChild(Device*)>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	eb 33                	jmp    c0017085 <setupTimer(int)+0xec>
c0017052:	83 ec 0c             	sub    esp,0xc
c0017055:	68 5c 01 00 00       	push   0x15c
c001705a:	e8 bd 88 ff ff       	call   c000f91c <malloc>
c001705f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017062:	89 c3                	mov    ebx,eax
c0017064:	e8 11 fd 00 00       	call   c0026d7a <PIT::PIT()>
c0017069:	58                   	pop    eax
c001706a:	5a                   	pop    edx
c001706b:	53                   	push   ebx
c001706c:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0017072:	e8 91 d2 ff ff       	call   c0014308 <Device::addChild(Device*)>
c0017077:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017079:	6a 00                	push   0x0
c001707b:	6a 00                	push   0x0
c001707d:	56                   	push   esi
c001707e:	53                   	push   ebx
c001707f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017082:	83 c4 20             	add    esp,0x20
c0017085:	89 d8                	mov    eax,ebx
c0017087:	5b                   	pop    ebx
c0017088:	5e                   	pop    esi
c0017089:	5f                   	pop    edi
c001708a:	c3                   	ret    
c001708b:	90                   	nop

c001708c <VCache::VCache(PhysicalDisk*)>:
c001708c:	53                   	push   ebx
c001708d:	83 ec 18             	sub    esp,0x18
c0017090:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0017095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017099:	89 10                	mov    DWORD PTR [eax],edx
c001709b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00170a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00170b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00170bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00170ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00170d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00170e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001710a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017116:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001711d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017125:	83 ec 0c             	sub    esp,0xc
c0017128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001712c:	e8 eb 87 ff ff       	call   c000f91c <malloc>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	89 c3                	mov    ebx,eax
c0017136:	83 ec 0c             	sub    esp,0xc
c0017139:	53                   	push   ebx
c001713a:	e8 f1 70 00 00       	call   c001e230 <Mutex::Mutex()>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017146:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017151:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017158:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001715f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017163:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017170:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017174:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001717a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017180:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017184:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017187:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001718a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001718e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017192:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017196:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001719c:	05 00 01 00 00       	add    eax,0x100
c00171a1:	c1 e0 04             	shl    eax,0x4
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	50                   	push   eax
c00171a8:	e8 6f 87 ff ff       	call   c000f91c <malloc>
c00171ad:	83 c4 10             	add    esp,0x10
c00171b0:	89 c2                	mov    edx,eax
c00171b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00171c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00171cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171d6:	c1 e0 07             	shl    eax,0x7
c00171d9:	83 ec 0c             	sub    esp,0xc
c00171dc:	50                   	push   eax
c00171dd:	e8 3a 87 ff ff       	call   c000f91c <malloc>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	89 c2                	mov    edx,eax
c00171e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171eb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171ee:	90                   	nop
c00171ef:	83 c4 18             	add    esp,0x18
c00171f2:	5b                   	pop    ebx
c00171f3:	c3                   	ret    

c00171f4 <VCache::invalidateReadBuffer()>:
c00171f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171f8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <VCache::writeWriteBuffer()>:
c0017204:	53                   	push   ebx
c0017205:	83 ec 14             	sub    esp,0x14
c0017208:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001720c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001720f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017211:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017214:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017217:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001721a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001721d:	50                   	push   eax
c001721e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017221:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017228:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001722f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017233:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001723a:	83 c4 28             	add    esp,0x28
c001723d:	5b                   	pop    ebx
c001723e:	c3                   	ret    
c001723f:	90                   	nop

c0017240 <VCache::~VCache()>:
c0017240:	83 ec 0c             	sub    esp,0xc
c0017243:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0017248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001724c:	89 10                	mov    DWORD PTR [eax],edx
c001724e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017252:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017255:	84 c0                	test   al,al
c0017257:	74 0f                	je     c0017268 <VCache::~VCache()+0x28>
c0017259:	83 ec 0c             	sub    esp,0xc
c001725c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017260:	e8 9f ff ff ff       	call   c0017204 <VCache::writeWriteBuffer()>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001726c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	50                   	push   eax
c0017273:	e8 b4 86 ff ff       	call   c000f92c <free>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001727f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017282:	83 ec 0c             	sub    esp,0xc
c0017285:	50                   	push   eax
c0017286:	e8 a1 86 ff ff       	call   c000f92c <free>
c001728b:	83 c4 10             	add    esp,0x10
c001728e:	90                   	nop
c001728f:	83 c4 0c             	add    esp,0xc
c0017292:	c3                   	ret    
c0017293:	90                   	nop

c0017294 <VCache::~VCache()>:
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	83 ec 0c             	sub    esp,0xc
c001729a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001729e:	e8 9d ff ff ff       	call   c0017240 <VCache::~VCache()>
c00172a3:	83 c4 10             	add    esp,0x10
c00172a6:	83 ec 08             	sub    esp,0x8
c00172a9:	6a 44                	push   0x44
c00172ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172af:	e8 3f bb ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	83 c4 0c             	add    esp,0xc
c00172ba:	c3                   	ret    
c00172bb:	90                   	nop

c00172bc <VCache::write(unsigned long long, int, void*)>:
c00172bc:	55                   	push   ebp
c00172bd:	57                   	push   edi
c00172be:	56                   	push   esi
c00172bf:	53                   	push   ebx
c00172c0:	83 ec 28             	sub    esp,0x28
c00172c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172c7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172cf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00172d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172d6:	e8 e3 74 00 00       	call   c001e7be <Semaphore::acquire()>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172e2:	74 0c                	je     c00172f0 <VCache::write(unsigned long long, int, void*)+0x34>
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	53                   	push   ebx
c00172e8:	e8 07 ff ff ff       	call   c00171f4 <VCache::invalidateReadBuffer()>
c00172ed:	83 c4 10             	add    esp,0x10
c00172f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172f4:	74 66                	je     c001735c <VCache::write(unsigned long long, int, void*)+0xa0>
c00172f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172f9:	99                   	cdq    
c00172fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172fe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017301:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017304:	89 c1                	mov    ecx,eax
c0017306:	89 d0                	mov    eax,edx
c0017308:	31 f1                	xor    ecx,esi
c001730a:	31 f8                	xor    eax,edi
c001730c:	89 ca                	mov    edx,ecx
c001730e:	09 c2                	or     edx,eax
c0017310:	75 3e                	jne    c0017350 <VCache::write(unsigned long long, int, void*)+0x94>
c0017312:	83 fd 01             	cmp    ebp,0x1
c0017315:	75 39                	jne    c0017350 <VCache::write(unsigned long long, int, void*)+0x94>
c0017317:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001731a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017320:	51                   	push   ecx
c0017321:	50                   	push   eax
c0017322:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017326:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001732a:	0f af c8             	imul   ecx,eax
c001732d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017330:	51                   	push   ecx
c0017331:	e8 32 94 fe ff       	call   c0000768 <memcpy>
c0017336:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017339:	83 c4 10             	add    esp,0x10
c001733c:	40                   	inc    eax
c001733d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017340:	83 c0 80             	add    eax,0xffffff80
c0017343:	75 57                	jne    c001739c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017345:	83 ec 0c             	sub    esp,0xc
c0017348:	53                   	push   ebx
c0017349:	e8 b6 fe ff ff       	call   c0017204 <VCache::writeWriteBuffer()>
c001734e:	eb 34                	jmp    c0017384 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017350:	83 ec 0c             	sub    esp,0xc
c0017353:	53                   	push   ebx
c0017354:	e8 ab fe ff ff       	call   c0017204 <VCache::writeWriteBuffer()>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001735f:	83 fd 7f             	cmp    ebp,0x7f
c0017362:	7f 25                	jg     c0017389 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017364:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017367:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001736a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001736d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017371:	52                   	push   edx
c0017372:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017378:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001737c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001737f:	e8 e4 93 fe ff       	call   c0000768 <memcpy>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	eb 13                	jmp    c001739c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017389:	83 ec 0c             	sub    esp,0xc
c001738c:	8b 10                	mov    edx,DWORD PTR [eax]
c001738e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017392:	55                   	push   ebp
c0017393:	57                   	push   edi
c0017394:	56                   	push   esi
c0017395:	50                   	push   eax
c0017396:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017399:	83 c4 20             	add    esp,0x20
c001739c:	83 ec 0c             	sub    esp,0xc
c001739f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173a2:	e8 51 7b 00 00       	call   c001eef8 <Semaphore::release()>
c00173a7:	83 c4 2c             	add    esp,0x2c
c00173aa:	31 c0                	xor    eax,eax
c00173ac:	5b                   	pop    ebx
c00173ad:	5e                   	pop    esi
c00173ae:	5f                   	pop    edi
c00173af:	5d                   	pop    ebp
c00173b0:	c3                   	ret    
c00173b1:	90                   	nop

c00173b2 <VCache::read(unsigned long long, int, void*)>:
c00173b2:	55                   	push   ebp
c00173b3:	57                   	push   edi
c00173b4:	56                   	push   esi
c00173b5:	53                   	push   ebx
c00173b6:	83 ec 28             	sub    esp,0x28
c00173b9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00173cd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00173d1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00173d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173d8:	e8 e1 73 00 00       	call   c001e7be <Semaphore::acquire()>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00173e4:	74 0c                	je     c00173f2 <VCache::read(unsigned long long, int, void*)+0x40>
c00173e6:	83 ec 0c             	sub    esp,0xc
c00173e9:	53                   	push   ebx
c00173ea:	e8 15 fe ff ff       	call   c0017204 <VCache::writeWriteBuffer()>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	83 fe 01             	cmp    esi,0x1
c00173f5:	0f 85 80 00 00 00    	jne    c001747b <VCache::read(unsigned long long, int, void*)+0xc9>
c00173fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173fe:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017405:	75 74                	jne    c001747b <VCache::read(unsigned long long, int, void*)+0xc9>
c0017407:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001740a:	89 d1                	mov    ecx,edx
c001740c:	f7 d9                	neg    ecx
c001740e:	89 cf                	mov    edi,ecx
c0017410:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017414:	c1 ff 1f             	sar    edi,0x1f
c0017417:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001741a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001741e:	89 ce                	mov    esi,ecx
c0017420:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017424:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017428:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001742c:	89 cf                	mov    edi,ecx
c001742e:	74 0a                	je     c001743a <VCache::read(unsigned long long, int, void*)+0x88>
c0017430:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017433:	75 05                	jne    c001743a <VCache::read(unsigned long long, int, void*)+0x88>
c0017435:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017438:	74 1c                	je     c0017456 <VCache::read(unsigned long long, int, void*)+0xa4>
c001743a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001743e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017441:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017444:	83 ec 0c             	sub    esp,0xc
c0017447:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017449:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001744c:	52                   	push   edx
c001744d:	57                   	push   edi
c001744e:	56                   	push   esi
c001744f:	50                   	push   eax
c0017450:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017453:	83 c4 20             	add    esp,0x20
c0017456:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017459:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001745f:	50                   	push   eax
c0017460:	52                   	push   edx
c0017461:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017464:	48                   	dec    eax
c0017465:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017469:	0f af c2             	imul   eax,edx
c001746c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001746f:	50                   	push   eax
c0017470:	55                   	push   ebp
c0017471:	e8 f2 92 fe ff       	call   c0000768 <memcpy>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	eb 21                	jmp    c001749c <VCache::read(unsigned long long, int, void*)+0xea>
c001747b:	83 ec 0c             	sub    esp,0xc
c001747e:	53                   	push   ebx
c001747f:	e8 70 fd ff ff       	call   c00171f4 <VCache::invalidateReadBuffer()>
c0017484:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017487:	8b 10                	mov    edx,DWORD PTR [eax]
c0017489:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001748c:	56                   	push   esi
c001748d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017491:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017495:	50                   	push   eax
c0017496:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017499:	83 c4 20             	add    esp,0x20
c001749c:	83 ec 0c             	sub    esp,0xc
c001749f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00174a2:	e8 51 7a 00 00       	call   c001eef8 <Semaphore::release()>
c00174a7:	83 c4 2c             	add    esp,0x2c
c00174aa:	31 c0                	xor    eax,eax
c00174ac:	5b                   	pop    ebx
c00174ad:	5e                   	pop    esi
c00174ae:	5f                   	pop    edi
c00174af:	5d                   	pop    ebp
c00174b0:	c3                   	ret    
c00174b1:	90                   	nop

c00174b2 <Video::putrect(int, int, int, int, unsigned int)>:
c00174b2:	55                   	push   ebp
c00174b3:	57                   	push   edi
c00174b4:	56                   	push   esi
c00174b5:	53                   	push   ebx
c00174b6:	83 ec 1c             	sub    esp,0x1c
c00174b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00174bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174c1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00174c5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00174c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174d1:	01 df                	add    edi,ebx
c00174d3:	39 fb                	cmp    ebx,edi
c00174d5:	7d 1f                	jge    c00174f6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00174d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174df:	7d 12                	jge    c00174f3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174e1:	8b 16                	mov    edx,DWORD PTR [esi]
c00174e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00174e7:	53                   	push   ebx
c00174e8:	55                   	push   ebp
c00174e9:	45                   	inc    ebp
c00174ea:	56                   	push   esi
c00174eb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	eb e8                	jmp    c00174db <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174f3:	43                   	inc    ebx
c00174f4:	eb dd                	jmp    c00174d3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174f6:	83 c4 1c             	add    esp,0x1c
c00174f9:	5b                   	pop    ebx
c00174fa:	5e                   	pop    esi
c00174fb:	5f                   	pop    edi
c00174fc:	5d                   	pop    ebp
c00174fd:	c3                   	ret    

c00174fe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174fe:	55                   	push   ebp
c00174ff:	57                   	push   edi
c0017500:	31 ff                	xor    edi,edi
c0017502:	56                   	push   esi
c0017503:	53                   	push   ebx
c0017504:	83 ec 1c             	sub    esp,0x1c
c0017507:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001750b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001750f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017516:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001751b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001751f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017523:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017527:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001752a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001752e:	01 f9                	add    ecx,edi
c0017530:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017534:	7d 2f                	jge    c0017565 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017536:	31 f6                	xor    esi,esi
c0017538:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001753c:	01 f2                	add    edx,esi
c001753e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017542:	7d 1a                	jge    c001755e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017544:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017547:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001754a:	46                   	inc    esi
c001754b:	51                   	push   ecx
c001754c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017550:	52                   	push   edx
c0017551:	55                   	push   ebp
c0017552:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001755c:	eb da                	jmp    c0017538 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001755e:	47                   	inc    edi
c001755f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017563:	eb c5                	jmp    c001752a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017565:	83 c4 1c             	add    esp,0x1c
c0017568:	5b                   	pop    ebx
c0017569:	5e                   	pop    esi
c001756a:	5f                   	pop    edi
c001756b:	5d                   	pop    ebp
c001756c:	c3                   	ret    
c001756d:	90                   	nop

c001756e <Video::blit(unsigned int*, int, int, int, int)>:
c001756e:	55                   	push   ebp
c001756f:	57                   	push   edi
c0017570:	56                   	push   esi
c0017571:	53                   	push   ebx
c0017572:	83 ec 1c             	sub    esp,0x1c
c0017575:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001757d:	85 c0                	test   eax,eax
c001757f:	79 02                	jns    c0017583 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017581:	31 c0                	xor    eax,eax
c0017583:	c1 e0 02             	shl    eax,0x2
c0017586:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001758a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001758e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017592:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017596:	39 d8                	cmp    eax,ebx
c0017598:	7e 49                	jle    c00175e3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001759a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175a0:	7c 41                	jl     c00175e3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00175a2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00175a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00175aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00175ae:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00175b2:	39 f9                	cmp    ecx,edi
c00175b4:	7e 22                	jle    c00175d8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00175b6:	83 c5 04             	add    ebp,0x4
c00175b9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175bf:	7c 14                	jl     c00175d5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00175c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175c3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00175c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175ce:	56                   	push   esi
c00175cf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00175d2:	83 c4 10             	add    esp,0x10
c00175d5:	47                   	inc    edi
c00175d6:	eb d2                	jmp    c00175aa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00175d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175dc:	43                   	inc    ebx
c00175dd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175e1:	eb ab                	jmp    c001758e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00175e3:	83 c4 1c             	add    esp,0x1c
c00175e6:	5b                   	pop    ebx
c00175e7:	5e                   	pop    esi
c00175e8:	5f                   	pop    edi
c00175e9:	5d                   	pop    ebp
c00175ea:	c3                   	ret    
c00175eb:	90                   	nop

c00175ec <Video::clearScreen(unsigned int)>:
c00175ec:	57                   	push   edi
c00175ed:	56                   	push   esi
c00175ee:	53                   	push   ebx
c00175ef:	31 db                	xor    ebx,ebx
c00175f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175f5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175fb:	7e 1f                	jle    c001761c <Video::clearScreen(unsigned int)+0x30>
c00175fd:	31 ff                	xor    edi,edi
c00175ff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017605:	7e 12                	jle    c0017619 <Video::clearScreen(unsigned int)+0x2d>
c0017607:	8b 06                	mov    eax,DWORD PTR [esi]
c0017609:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001760d:	53                   	push   ebx
c001760e:	57                   	push   edi
c001760f:	47                   	inc    edi
c0017610:	56                   	push   esi
c0017611:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	eb e6                	jmp    c00175ff <Video::clearScreen(unsigned int)+0x13>
c0017619:	43                   	inc    ebx
c001761a:	eb d9                	jmp    c00175f5 <Video::clearScreen(unsigned int)+0x9>
c001761c:	5b                   	pop    ebx
c001761d:	5e                   	pop    esi
c001761e:	5f                   	pop    edi
c001761f:	c3                   	ret    

c0017620 <Video::putpixel(int, int, unsigned int)>:
c0017620:	c7 44 24 04 68 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc68
c0017628:	e9 62 32 00 00       	jmp    c001a88f <Krnl::panic(char const*)>
c001762d:	90                   	nop

c001762e <Video::Video(char const*)>:
c001762e:	83 ec 0c             	sub    esp,0xc
c0017631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017635:	83 ec 08             	sub    esp,0x8
c0017638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001763c:	50                   	push   eax
c001763d:	e8 b6 ce ff ff       	call   c00144f8 <Device::Device(char const*)>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c001764a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764e:	89 10                	mov    DWORD PTR [eax],edx
c0017650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017654:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001765e:	90                   	nop
c001765f:	83 c4 0c             	add    esp,0xc
c0017662:	c3                   	ret    
c0017663:	90                   	nop

c0017664 <Video::~Video()>:
c0017664:	83 ec 0c             	sub    esp,0xc
c0017667:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c001766c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017670:	89 10                	mov    DWORD PTR [eax],edx
c0017672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017676:	83 ec 0c             	sub    esp,0xc
c0017679:	50                   	push   eax
c001767a:	e8 5b cb ff ff       	call   c00141da <Device::~Device()>
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	90                   	nop
c0017683:	83 c4 0c             	add    esp,0xc
c0017686:	c3                   	ret    
c0017687:	90                   	nop

c0017688 <Video::~Video()>:
c0017688:	83 ec 0c             	sub    esp,0xc
c001768b:	83 ec 0c             	sub    esp,0xc
c001768e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017692:	e8 cd ff ff ff       	call   c0017664 <Video::~Video()>
c0017697:	83 c4 10             	add    esp,0x10
c001769a:	83 ec 08             	sub    esp,0x8
c001769d:	68 64 01 00 00       	push   0x164
c00176a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176a6:	e8 48 b7 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	83 c4 0c             	add    esp,0xc
c00176b1:	c3                   	ret    

c00176b2 <Video::isMonochrome()>:
c00176b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176b6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00176bc:	c3                   	ret    
c00176bd:	90                   	nop

c00176be <Video::getWidth()>:
c00176be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00176c8:	c3                   	ret    
c00176c9:	90                   	nop

c00176ca <Video::getHeight()>:
c00176ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176d4:	c3                   	ret    
c00176d5:	90                   	nop

c00176d6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00176d6:	55                   	push   ebp
c00176d7:	57                   	push   edi
c00176d8:	56                   	push   esi
c00176d9:	53                   	push   ebx
c00176da:	83 ec 2c             	sub    esp,0x2c
c00176dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00176e5:	83 f8 01             	cmp    eax,0x1
c00176e8:	19 c9                	sbb    ecx,ecx
c00176ea:	31 db                	xor    ebx,ebx
c00176ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176f0:	89 cd                	mov    ebp,ecx
c00176f2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176fa:	f7 d5                	not    ebp
c00176fc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017702:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017706:	01 d8                	add    eax,ebx
c0017708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001770c:	56                   	push   esi
c001770d:	e8 b8 ff ff ff       	call   c00176ca <Video::getHeight()>
c0017712:	59                   	pop    ecx
c0017713:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017717:	7e 70                	jle    c0017789 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017719:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001771d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017721:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017724:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017728:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001772c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017733:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017737:	89 f8                	mov    eax,edi
c0017739:	83 c0 20             	add    eax,0x20
c001773c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017740:	56                   	push   esi
c0017741:	e8 78 ff ff ff       	call   c00176be <Video::getWidth()>
c0017746:	5a                   	pop    edx
c0017747:	39 c7                	cmp    edi,eax
c0017749:	7d 34                	jge    c001777f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001774b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017750:	74 05                	je     c0017757 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017752:	8b 06                	mov    eax,DWORD PTR [esi]
c0017754:	55                   	push   ebp
c0017755:	eb 0d                	jmp    c0017764 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017757:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001775c:	74 12                	je     c0017770 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001775e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017760:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017764:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017768:	57                   	push   edi
c0017769:	56                   	push   esi
c001776a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017774:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017778:	47                   	inc    edi
c0017779:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001777d:	75 c1                	jne    c0017740 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001777f:	43                   	inc    ebx
c0017780:	83 fb 20             	cmp    ebx,0x20
c0017783:	0f 85 79 ff ff ff    	jne    c0017702 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017789:	83 c4 2c             	add    esp,0x2c
c001778c:	5b                   	pop    ebx
c001778d:	5e                   	pop    esi
c001778e:	5f                   	pop    edi
c001778f:	5d                   	pop    ebp
c0017790:	c3                   	ret    
c0017791:	90                   	nop

c0017792 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017792:	55                   	push   ebp
c0017793:	57                   	push   edi
c0017794:	56                   	push   esi
c0017795:	53                   	push   ebx
c0017796:	83 ec 28             	sub    esp,0x28
c0017799:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001779d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00177a1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00177a5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00177a9:	c1 e7 08             	shl    edi,0x8
c00177ac:	01 c7                	add    edi,eax
c00177ae:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00177b2:	c1 e0 08             	shl    eax,0x8
c00177b5:	01 d0                	add    eax,edx
c00177b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177bf:	0f af c7             	imul   eax,edi
c00177c2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00177c9:	50                   	push   eax
c00177ca:	e8 4d 81 ff ff       	call   c000f91c <malloc>
c00177cf:	83 c4 10             	add    esp,0x10
c00177d2:	89 c5                	mov    ebp,eax
c00177d4:	85 c0                	test   eax,eax
c00177d6:	75 15                	jne    c00177ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00177d8:	83 ec 0c             	sub    esp,0xc
c00177db:	68 89 bc 02 c0       	push   0xc002bc89
c00177e0:	e8 ee b6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	e9 1c 01 00 00       	jmp    c0017909 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177ed:	be 12 00 00 00       	mov    esi,0x12
c00177f2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177f6:	74 11                	je     c0017809 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177f8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177fc:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017800:	c1 fe 03             	sar    esi,0x3
c0017803:	0f af f0             	imul   esi,eax
c0017806:	83 c6 12             	add    esi,0x12
c0017809:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001780d:	74 04                	je     c0017813 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001780f:	85 ff                	test   edi,edi
c0017811:	75 12                	jne    c0017825 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017813:	83 ec 0c             	sub    esp,0xc
c0017816:	68 a0 bc 02 c0       	push   0xc002bca0
c001781b:	e8 b3 b6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0017820:	e9 ce 00 00 00       	jmp    c00178f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017825:	52                   	push   edx
c0017826:	52                   	push   edx
c0017827:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001782b:	50                   	push   eax
c001782c:	68 b5 bc 02 c0       	push   0xc002bcb5
c0017831:	e8 9d b6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0017836:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001783a:	83 c4 10             	add    esp,0x10
c001783d:	80 fa 02             	cmp    dl,0x2
c0017840:	0f 85 98 00 00 00    	jne    c00178de <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017846:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001784b:	75 10                	jne    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001784d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017851:	75 0a                	jne    c001785d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017853:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017856:	83 e8 18             	sub    eax,0x18
c0017859:	a8 f7                	test   al,0xf7
c001785b:	74 0a                	je     c0017867 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001785d:	83 ec 0c             	sub    esp,0xc
c0017860:	68 c2 bc 02 c0       	push   0xc002bcc2
c0017865:	eb 7f                	jmp    c00178e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017867:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001786f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017877:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001787b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017883:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017887:	75 0c                	jne    c0017895 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017889:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001788e:	c1 e0 18             	shl    eax,0x18
c0017891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017895:	41                   	inc    ecx
c0017896:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001789b:	c1 e2 10             	shl    edx,0x10
c001789e:	89 d0                	mov    eax,edx
c00178a0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00178a5:	c1 e2 08             	shl    edx,0x8
c00178a8:	09 c2                	or     edx,eax
c00178aa:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00178ae:	09 c2                	or     edx,eax
c00178b0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00178b4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00178b8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00178bc:	c1 f8 03             	sar    eax,0x3
c00178bf:	01 c6                	add    esi,eax
c00178c1:	89 c8                	mov    eax,ecx
c00178c3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00178c7:	39 c7                	cmp    edi,eax
c00178c9:	7f b0                	jg     c001787b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00178cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178d3:	39 14 24             	cmp    DWORD PTR [esp],edx
c00178d6:	7e 22                	jle    c00178fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00178d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178dc:	eb 99                	jmp    c0017877 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178de:	50                   	push   eax
c00178df:	50                   	push   eax
c00178e0:	52                   	push   edx
c00178e1:	68 d0 bc 02 c0       	push   0xc002bcd0
c00178e6:	e8 e8 b5 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00178eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178ee:	e8 39 80 ff ff       	call   c000f92c <free>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	31 ed                	xor    ebp,ebp
c00178f8:	eb 0f                	jmp    c0017909 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178fe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017901:	89 38                	mov    DWORD PTR [eax],edi
c0017903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017907:	89 08                	mov    DWORD PTR [eax],ecx
c0017909:	83 c4 1c             	add    esp,0x1c
c001790c:	89 e8                	mov    eax,ebp
c001790e:	5b                   	pop    ebx
c001790f:	5e                   	pop    esi
c0017910:	5f                   	pop    edi
c0017911:	5d                   	pop    ebp
c0017912:	c3                   	ret    
c0017913:	90                   	nop

c0017914 <Video::putTGA(int, int, unsigned char*, int)>:
c0017914:	55                   	push   ebp
c0017915:	57                   	push   edi
c0017916:	56                   	push   esi
c0017917:	53                   	push   ebx
c0017918:	83 ec 28             	sub    esp,0x28
c001791b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001791f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017923:	50                   	push   eax
c0017924:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017928:	50                   	push   eax
c0017929:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001792d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017931:	56                   	push   esi
c0017932:	e8 5b fe ff ff       	call   c0017792 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017937:	83 c4 20             	add    esp,0x20
c001793a:	85 c0                	test   eax,eax
c001793c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017940:	74 35                	je     c0017977 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017942:	89 c7                	mov    edi,eax
c0017944:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017948:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001794c:	39 d8                	cmp    eax,ebx
c001794e:	7e 27                	jle    c0017977 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017950:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017954:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017958:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001795c:	39 e8                	cmp    eax,ebp
c001795e:	7e 14                	jle    c0017974 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017960:	8b 06                	mov    eax,DWORD PTR [esi]
c0017962:	83 c7 04             	add    edi,0x4
c0017965:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017968:	53                   	push   ebx
c0017969:	55                   	push   ebp
c001796a:	45                   	inc    ebp
c001796b:	56                   	push   esi
c001796c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	eb e0                	jmp    c0017954 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017974:	43                   	inc    ebx
c0017975:	eb cd                	jmp    c0017944 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017977:	83 c4 1c             	add    esp,0x1c
c001797a:	5b                   	pop    ebx
c001797b:	5e                   	pop    esi
c001797c:	5f                   	pop    edi
c001797d:	5d                   	pop    ebp
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <ACPI::close(int, int, void*)>:
c0017980:	83 ec 1c             	sub    esp,0x1c
c0017983:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001798b:	74 0a                	je     c0017997 <ACPI::close(int, int, void*)+0x17>
c001798d:	b8 00 00 00 00       	mov    eax,0x0
c0017992:	e9 9a 00 00 00       	jmp    c0017a31 <ACPI::close(int, int, void*)+0xb1>
c0017997:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001799c:	75 37                	jne    c00179d5 <ACPI::close(int, int, void*)+0x55>
c001799e:	83 ec 0c             	sub    esp,0xc
c00179a1:	68 2c bd 02 c0       	push   0xc002bd2c
c00179a6:	e8 28 b5 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c00179b3:	85 c0                	test   eax,eax
c00179b5:	74 07                	je     c00179be <ACPI::close(int, int, void*)+0x3e>
c00179b7:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c00179bc:	ff d0                	call   eax
c00179be:	83 ec 0c             	sub    esp,0xc
c00179c1:	68 a0 be 02 c0       	push   0xc002bea0
c00179c6:	e8 c4 2e 00 00       	call   c001a88f <Krnl::panic(char const*)>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179d3:	eb 5c                	jmp    c0017a31 <ACPI::close(int, int, void*)+0xb1>
c00179d5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00179da:	75 50                	jne    c0017a2c <ACPI::close(int, int, void*)+0xac>
c00179dc:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c00179e1:	85 c0                	test   eax,eax
c00179e3:	74 07                	je     c00179ec <ACPI::close(int, int, void*)+0x6c>
c00179e5:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c00179ea:	ff d0                	call   eax
c00179ec:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179f6:	83 e0 02             	and    eax,0x2
c00179f9:	74 1c                	je     c0017a17 <ACPI::close(int, int, void*)+0x97>
c00179fb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a06:	89 c2                	mov    edx,eax
c0017a08:	ec                   	in     al,dx
c0017a09:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017a0d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017a11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a15:	eb da                	jmp    c00179f1 <ACPI::close(int, int, void*)+0x71>
c0017a17:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017a1e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017a23:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017a27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a2b:	ee                   	out    dx,al
c0017a2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017a31:	83 c4 1c             	add    esp,0x1c
c0017a34:	c3                   	ret    

c0017a35 <findRSDP()>:
c0017a35:	83 ec 1c             	sub    esp,0x1c
c0017a38:	83 ec 0c             	sub    esp,0xc
c0017a3b:	68 39 bd 02 c0       	push   0xc002bd39
c0017a40:	e8 8e b4 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0017a45:	83 c4 10             	add    esp,0x10
c0017a48:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017a4d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a53:	83 e0 04             	and    eax,0x4
c0017a56:	84 c0                	test   al,al
c0017a58:	75 07                	jne    c0017a61 <findRSDP()+0x2c>
c0017a5a:	b8 00 00 00 00       	mov    eax,0x0
c0017a5f:	eb 6a                	jmp    c0017acb <findRSDP()+0x96>
c0017a61:	a1 74 ee 02 c0       	mov    eax,ds:0xc002ee74
c0017a66:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a6b:	7f 1b                	jg     c0017a88 <findRSDP()+0x53>
c0017a6d:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017a72:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a78:	83 e2 fb             	and    edx,0xfffffffb
c0017a7b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a81:	b8 00 00 00 00       	mov    eax,0x0
c0017a86:	eb 43                	jmp    c0017acb <findRSDP()+0x96>
c0017a88:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a90:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a98:	77 2c                	ja     c0017ac6 <findRSDP()+0x91>
c0017a9a:	83 ec 04             	sub    esp,0x4
c0017a9d:	6a 08                	push   0x8
c0017a9f:	68 47 bd 02 c0       	push   0xc002bd47
c0017aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017aa8:	e8 b7 8b fe ff       	call   c0000664 <memcmp>
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	85 c0                	test   eax,eax
c0017ab2:	0f 94 c0             	sete   al
c0017ab5:	84 c0                	test   al,al
c0017ab7:	74 06                	je     c0017abf <findRSDP()+0x8a>
c0017ab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017abd:	eb 0c                	jmp    c0017acb <findRSDP()+0x96>
c0017abf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017ac4:	eb ca                	jmp    c0017a90 <findRSDP()+0x5b>
c0017ac6:	b8 00 00 00 00       	mov    eax,0x0
c0017acb:	83 c4 1c             	add    esp,0x1c
c0017ace:	c3                   	ret    

c0017acf <loadACPITables(unsigned char*)>:
c0017acf:	56                   	push   esi
c0017ad0:	53                   	push   ebx
c0017ad1:	83 ec 44             	sub    esp,0x44
c0017ad4:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017ad9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017adf:	83 e0 04             	and    eax,0x4
c0017ae2:	84 c0                	test   al,al
c0017ae4:	0f 84 03 02 00 00    	je     c0017ced <loadACPITables(unsigned char*)+0x21e>
c0017aea:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c0017aef:	84 c0                	test   al,al
c0017af1:	74 75                	je     c0017b68 <loadACPITables(unsigned char*)+0x99>
c0017af3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017af7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b02:	83 e8 24             	sub    eax,0x24
c0017b05:	c1 e8 03             	shr    eax,0x3
c0017b08:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b0c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b18:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b1c:	0f 8d b2 00 00 00    	jge    c0017bd4 <loadACPITables(unsigned char*)+0x105>
c0017b22:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b26:	83 c0 24             	add    eax,0x24
c0017b29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b39:	c1 e0 03             	shl    eax,0x3
c0017b3c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b49:	89 c1                	mov    ecx,eax
c0017b4b:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017b50:	8d 50 01             	lea    edx,[eax+0x1]
c0017b53:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c0017b59:	89 ca                	mov    edx,ecx
c0017b5b:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017b62:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b66:	eb ac                	jmp    c0017b14 <loadACPITables(unsigned char*)+0x45>
c0017b68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b77:	83 e8 24             	sub    eax,0x24
c0017b7a:	c1 e8 02             	shr    eax,0x2
c0017b7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b81:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b8d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b91:	7d 41                	jge    c0017bd4 <loadACPITables(unsigned char*)+0x105>
c0017b93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b97:	83 c0 24             	add    eax,0x24
c0017b9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ba2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ba6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017baa:	c1 e0 02             	shl    eax,0x2
c0017bad:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017bb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017bb7:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0017bbf:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c0017bc5:	89 ca                	mov    edx,ecx
c0017bc7:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017bce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017bd2:	eb b5                	jmp    c0017b89 <loadACPITables(unsigned char*)+0xba>
c0017bd4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017bdc:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017be1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017be5:	0f 8d 03 01 00 00    	jge    c0017cee <loadACPITables(unsigned char*)+0x21f>
c0017beb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bef:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c0017bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c06:	25 ff 0f 00 00       	and    eax,0xfff
c0017c0b:	89 c6                	mov    esi,eax
c0017c0d:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017c13:	83 ec 0c             	sub    esp,0xc
c0017c16:	6a 01                	push   0x1
c0017c18:	e8 b0 9e ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0017c1d:	83 c4 10             	add    esp,0x10
c0017c20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c2a:	83 ec 0c             	sub    esp,0xc
c0017c2d:	6a 01                	push   0x1
c0017c2f:	6a 01                	push   0x1
c0017c31:	50                   	push   eax
c0017c32:	52                   	push   edx
c0017c33:	53                   	push   ebx
c0017c34:	e8 c1 a9 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c39:	83 c4 20             	add    esp,0x20
c0017c3c:	09 f0                	or     eax,esi
c0017c3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c46:	c1 e0 03             	shl    eax,0x3
c0017c49:	05 00 15 03 c0       	add    eax,0xc0031500
c0017c4e:	83 ec 04             	sub    esp,0x4
c0017c51:	6a 04                	push   0x4
c0017c53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c57:	50                   	push   eax
c0017c58:	e8 0b 8b fe ff       	call   c0000768 <memcpy>
c0017c5d:	83 c4 10             	add    esp,0x10
c0017c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c6f:	05 00 10 00 00       	add    eax,0x1000
c0017c74:	c1 e8 0c             	shr    eax,0xc
c0017c77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c86:	25 ff 0f 00 00       	and    eax,0xfff
c0017c8b:	89 c6                	mov    esi,eax
c0017c8d:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017c93:	83 ec 0c             	sub    esp,0xc
c0017c96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c9a:	e8 2e 9e ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ca6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	6a 01                	push   0x1
c0017cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cb5:	50                   	push   eax
c0017cb6:	52                   	push   edx
c0017cb7:	53                   	push   ebx
c0017cb8:	e8 3d a9 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cbd:	83 c4 20             	add    esp,0x20
c0017cc0:	09 f0                	or     eax,esi
c0017cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cc6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017cc9:	83 ec 0c             	sub    esp,0xc
c0017ccc:	50                   	push   eax
c0017ccd:	e8 bb a2 ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c0017cd2:	83 c4 10             	add    esp,0x10
c0017cd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017cdd:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017ce4:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017ce8:	e9 ef fe ff ff       	jmp    c0017bdc <loadACPITables(unsigned char*)+0x10d>
c0017ced:	90                   	nop
c0017cee:	83 c4 44             	add    esp,0x44
c0017cf1:	5b                   	pop    ebx
c0017cf2:	5e                   	pop    esi
c0017cf3:	c3                   	ret    

c0017cf4 <findRSDT(unsigned char*)>:
c0017cf4:	56                   	push   esi
c0017cf5:	53                   	push   ebx
c0017cf6:	83 ec 44             	sub    esp,0x44
c0017cf9:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017cfe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d04:	83 e0 04             	and    eax,0x4
c0017d07:	84 c0                	test   al,al
c0017d09:	75 0a                	jne    c0017d15 <findRSDT(unsigned char*)+0x21>
c0017d0b:	b8 00 00 00 00       	mov    eax,0x0
c0017d10:	e9 f5 00 00 00       	jmp    c0017e0a <findRSDT(unsigned char*)+0x116>
c0017d15:	83 ec 04             	sub    esp,0x4
c0017d18:	6a 24                	push   0x24
c0017d1a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017d1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d22:	50                   	push   eax
c0017d23:	e8 40 8a fe ff       	call   c0000768 <memcpy>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d2f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017d33:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017d3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d43:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d53:	25 ff 0f 00 00       	and    eax,0xfff
c0017d58:	89 c6                	mov    esi,eax
c0017d5a:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017d60:	83 ec 0c             	sub    esp,0xc
c0017d63:	6a 02                	push   0x2
c0017d65:	e8 63 9d ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0017d6a:	83 c4 10             	add    esp,0x10
c0017d6d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d71:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d77:	83 ec 0c             	sub    esp,0xc
c0017d7a:	6a 01                	push   0x1
c0017d7c:	6a 02                	push   0x2
c0017d7e:	50                   	push   eax
c0017d7f:	52                   	push   edx
c0017d80:	53                   	push   ebx
c0017d81:	e8 74 a8 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d86:	83 c4 20             	add    esp,0x20
c0017d89:	09 f0                	or     eax,esi
c0017d8b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d93:	25 ff 0f 00 00       	and    eax,0xfff
c0017d98:	89 c6                	mov    esi,eax
c0017d9a:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017da0:	83 ec 0c             	sub    esp,0xc
c0017da3:	6a 02                	push   0x2
c0017da5:	e8 23 9d ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017db1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017db7:	83 ec 0c             	sub    esp,0xc
c0017dba:	6a 01                	push   0x1
c0017dbc:	6a 02                	push   0x2
c0017dbe:	50                   	push   eax
c0017dbf:	52                   	push   edx
c0017dc0:	53                   	push   ebx
c0017dc1:	e8 34 a8 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dc6:	83 c4 20             	add    esp,0x20
c0017dc9:	09 f0                	or     eax,esi
c0017dcb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017dcf:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017dd4:	75 11                	jne    c0017de7 <findRSDT(unsigned char*)+0xf3>
c0017dd6:	c6 05 00 17 03 c0 00 	mov    BYTE PTR ds:0xc0031700,0x0
c0017ddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017de1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017de5:	eb 1f                	jmp    c0017e06 <findRSDT(unsigned char*)+0x112>
c0017de7:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017dec:	75 11                	jne    c0017dff <findRSDT(unsigned char*)+0x10b>
c0017dee:	c6 05 00 17 03 c0 01 	mov    BYTE PTR ds:0xc0031700,0x1
c0017df5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017df9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017dfd:	eb 07                	jmp    c0017e06 <findRSDT(unsigned char*)+0x112>
c0017dff:	b8 00 00 00 00       	mov    eax,0x0
c0017e04:	eb 04                	jmp    c0017e0a <findRSDT(unsigned char*)+0x116>
c0017e06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e0a:	83 c4 44             	add    esp,0x44
c0017e0d:	5b                   	pop    ebx
c0017e0e:	5e                   	pop    esi
c0017e0f:	c3                   	ret    

c0017e10 <findDataTable(unsigned char*, char*)>:
c0017e10:	83 ec 1c             	sub    esp,0x1c
c0017e13:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017e18:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e1e:	83 e0 04             	and    eax,0x4
c0017e21:	84 c0                	test   al,al
c0017e23:	75 07                	jne    c0017e2c <findDataTable(unsigned char*, char*)+0x1c>
c0017e25:	b8 00 00 00 00       	mov    eax,0x0
c0017e2a:	eb 7c                	jmp    c0017ea8 <findDataTable(unsigned char*, char*)+0x98>
c0017e2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e34:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017e39:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e3d:	7d 3a                	jge    c0017e79 <findDataTable(unsigned char*, char*)+0x69>
c0017e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e43:	c1 e0 03             	shl    eax,0x3
c0017e46:	05 00 15 03 c0       	add    eax,0xc0031500
c0017e4b:	83 ec 04             	sub    esp,0x4
c0017e4e:	6a 04                	push   0x4
c0017e50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e54:	50                   	push   eax
c0017e55:	e8 0a 88 fe ff       	call   c0000664 <memcmp>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	85 c0                	test   eax,eax
c0017e5f:	0f 94 c0             	sete   al
c0017e62:	84 c0                	test   al,al
c0017e64:	74 0d                	je     c0017e73 <findDataTable(unsigned char*, char*)+0x63>
c0017e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e6a:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c0017e71:	eb 35                	jmp    c0017ea8 <findDataTable(unsigned char*, char*)+0x98>
c0017e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e77:	eb bb                	jmp    c0017e34 <findDataTable(unsigned char*, char*)+0x24>
c0017e79:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c0017e7e:	84 c0                	test   al,al
c0017e80:	74 07                	je     c0017e89 <findDataTable(unsigned char*, char*)+0x79>
c0017e82:	b8 58 00 00 00       	mov    eax,0x58
c0017e87:	eb 05                	jmp    c0017e8e <findDataTable(unsigned char*, char*)+0x7e>
c0017e89:	b8 52 00 00 00       	mov    eax,0x52
c0017e8e:	83 ec 04             	sub    esp,0x4
c0017e91:	50                   	push   eax
c0017e92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e96:	68 c4 be 02 c0       	push   0xc002bec4
c0017e9b:	e8 33 b0 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	b8 00 00 00 00       	mov    eax,0x0
c0017ea8:	83 c4 1c             	add    esp,0x1c
c0017eab:	c3                   	ret    

c0017eac <scanMADT()>:
c0017eac:	53                   	push   ebx
c0017ead:	83 ec 38             	sub    esp,0x38
c0017eb0:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017eb5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ebb:	83 e0 04             	and    eax,0x4
c0017ebe:	84 c0                	test   al,al
c0017ec0:	0f 84 63 04 00 00    	je     c0018329 <scanMADT()+0x47d>
c0017ec6:	e8 6a fb ff ff       	call   c0017a35 <findRSDP()>
c0017ecb:	a3 0c 17 03 c0       	mov    ds:0xc003170c,eax
c0017ed0:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c0017ed5:	85 c0                	test   eax,eax
c0017ed7:	75 19                	jne    c0017ef2 <scanMADT()+0x46>
c0017ed9:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017ede:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ee4:	83 e2 fb             	and    edx,0xfffffffb
c0017ee7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eed:	e9 3b 04 00 00       	jmp    c001832d <scanMADT()+0x481>
c0017ef2:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c0017ef7:	83 ec 0c             	sub    esp,0xc
c0017efa:	50                   	push   eax
c0017efb:	e8 f4 fd ff ff       	call   c0017cf4 <findRSDT(unsigned char*)>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	a3 08 17 03 c0       	mov    ds:0xc0031708,eax
c0017f08:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	75 19                	jne    c0017f2a <scanMADT()+0x7e>
c0017f11:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017f16:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f1c:	83 e2 fb             	and    edx,0xfffffffb
c0017f1f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f25:	e9 03 04 00 00       	jmp    c001832d <scanMADT()+0x481>
c0017f2a:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	50                   	push   eax
c0017f33:	e8 97 fb ff ff       	call   c0017acf <loadACPITables(unsigned char*)>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f40:	83 ec 08             	sub    esp,0x8
c0017f43:	68 50 bd 02 c0       	push   0xc002bd50
c0017f48:	50                   	push   eax
c0017f49:	e8 c2 fe ff ff       	call   c0017e10 <findDataTable(unsigned char*, char*)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f55:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f5a:	75 19                	jne    c0017f75 <scanMADT()+0xc9>
c0017f5c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017f61:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f67:	83 e2 fe             	and    edx,0xfffffffe
c0017f6a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f70:	e9 b8 03 00 00       	jmp    c001832d <scanMADT()+0x481>
c0017f75:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f84:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f88:	0f 87 9f 03 00 00    	ja     c001832d <scanMADT()+0x481>
c0017f8e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f96:	0f 87 91 03 00 00    	ja     c001832d <scanMADT()+0x481>
c0017f9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa8:	8d 50 01             	lea    edx,[eax+0x1]
c0017fab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017faf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbf:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fce:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fd2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fd7:	0f 86 4f 03 00 00    	jbe    c001832c <scanMADT()+0x480>
c0017fdd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fe2:	75 57                	jne    c001803b <scanMADT()+0x18f>
c0017fe4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe8:	8d 50 01             	lea    edx,[eax+0x1]
c0017feb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fef:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c0017ff5:	0f b6 d2             	movzx  edx,dl
c0017ff8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ffc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018000:	88 82 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],al
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	8d 50 01             	lea    edx,[eax+0x1]
c001800d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018011:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c0018017:	8d 4a 01             	lea    ecx,[edx+0x1]
c001801a:	88 0d 00 19 03 c0    	mov    BYTE PTR ds:0xc0031900,cl
c0018020:	0f b6 d2             	movzx  edx,dl
c0018023:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018027:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001802b:	88 82 20 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6e0],al
c0018031:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018036:	e9 da 02 00 00       	jmp    c0018315 <scanMADT()+0x469>
c001803b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018040:	0f 85 14 01 00 00    	jne    c001815a <scanMADT()+0x2ae>
c0018046:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804a:	8d 50 01             	lea    edx,[eax+0x1]
c001804d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018051:	8a 15 c0 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317c0
c0018057:	0f b6 d2             	movzx  edx,dl
c001805a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001805e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018062:	88 82 e0 17 03 c0    	mov    BYTE PTR [edx-0x3ffce820],al
c0018068:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001806c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018074:	01 d0                	add    eax,edx
c0018076:	83 c0 2c             	add    eax,0x2c
c0018079:	8a 00                	mov    al,BYTE PTR [eax]
c001807b:	0f b6 d0             	movzx  edx,al
c001807e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018082:	8d 48 01             	lea    ecx,[eax+0x1]
c0018085:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018089:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001808d:	0f b6 c0             	movzx  eax,al
c0018090:	c1 e0 08             	shl    eax,0x8
c0018093:	89 d1                	mov    ecx,edx
c0018095:	09 c1                	or     ecx,eax
c0018097:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809b:	8d 50 02             	lea    edx,[eax+0x2]
c001809e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a6:	0f b6 c0             	movzx  eax,al
c00180a9:	c1 e0 10             	shl    eax,0x10
c00180ac:	09 c1                	or     ecx,eax
c00180ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b2:	8d 50 03             	lea    edx,[eax+0x3]
c00180b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180bd:	0f b6 c0             	movzx  eax,al
c00180c0:	c1 e0 18             	shl    eax,0x18
c00180c3:	09 c1                	or     ecx,eax
c00180c5:	89 ca                	mov    edx,ecx
c00180c7:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c00180cc:	0f b6 c0             	movzx  eax,al
c00180cf:	89 14 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],edx
c00180d6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e3:	01 d0                	add    eax,edx
c00180e5:	83 c0 2c             	add    eax,0x2c
c00180e8:	8a 00                	mov    al,BYTE PTR [eax]
c00180ea:	0f b6 d0             	movzx  edx,al
c00180ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	c1 e0 08             	shl    eax,0x8
c0018102:	89 d1                	mov    ecx,edx
c0018104:	09 c1                	or     ecx,eax
c0018106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810a:	8d 50 02             	lea    edx,[eax+0x2]
c001810d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018111:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018115:	0f b6 c0             	movzx  eax,al
c0018118:	c1 e0 10             	shl    eax,0x10
c001811b:	09 c1                	or     ecx,eax
c001811d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018121:	8d 50 03             	lea    edx,[eax+0x3]
c0018124:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018128:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001812c:	0f b6 c0             	movzx  eax,al
c001812f:	c1 e0 18             	shl    eax,0x18
c0018132:	09 c1                	or     ecx,eax
c0018134:	89 ca                	mov    edx,ecx
c0018136:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c001813b:	0f b6 c0             	movzx  eax,al
c001813e:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c0018145:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001814a:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c001814f:	40                   	inc    eax
c0018150:	a2 c0 17 03 c0       	mov    ds:0xc00317c0,al
c0018155:	e9 bb 01 00 00       	jmp    c0018315 <scanMADT()+0x469>
c001815a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001815f:	0f 85 e9 00 00 00    	jne    c001824e <scanMADT()+0x3a2>
c0018165:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018169:	8d 50 01             	lea    edx,[eax+0x1]
c001816c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018170:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018174:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018178:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001817c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018180:	8d 50 01             	lea    edx,[eax+0x1]
c0018183:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018187:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001818b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001818f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018193:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018197:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001819b:	01 d0                	add    eax,edx
c001819d:	83 c0 2c             	add    eax,0x2c
c00181a0:	8a 00                	mov    al,BYTE PTR [eax]
c00181a2:	0f b6 d0             	movzx  edx,al
c00181a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00181ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181b4:	0f b6 c0             	movzx  eax,al
c00181b7:	c1 e0 08             	shl    eax,0x8
c00181ba:	89 d1                	mov    ecx,edx
c00181bc:	09 c1                	or     ecx,eax
c00181be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181c2:	8d 50 02             	lea    edx,[eax+0x2]
c00181c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181cd:	0f b6 c0             	movzx  eax,al
c00181d0:	c1 e0 10             	shl    eax,0x10
c00181d3:	09 c1                	or     ecx,eax
c00181d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d9:	8d 50 03             	lea    edx,[eax+0x3]
c00181dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181e4:	0f b6 c0             	movzx  eax,al
c00181e7:	c1 e0 18             	shl    eax,0x18
c00181ea:	09 c8                	or     eax,ecx
c00181ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181f0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181fd:	01 d0                	add    eax,edx
c00181ff:	83 c0 2c             	add    eax,0x2c
c0018202:	8a 00                	mov    al,BYTE PTR [eax]
c0018204:	0f b6 c0             	movzx  eax,al
c0018207:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001820b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001820e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018212:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018216:	0f b6 d2             	movzx  edx,dl
c0018219:	c1 e2 08             	shl    edx,0x8
c001821c:	09 d0                	or     eax,edx
c001821e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018223:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018228:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001822d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018231:	88 90 80 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f80],dl
c0018237:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001823c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018241:	66 89 84 12 a0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce860],ax
c0018249:	e9 c7 00 00 00       	jmp    c0018315 <scanMADT()+0x469>
c001824e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018253:	0f 85 b0 00 00 00    	jne    c0018309 <scanMADT()+0x45d>
c0018259:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001825d:	8d 50 01             	lea    edx,[eax+0x1]
c0018260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018264:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018268:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001826c:	0f b6 c0             	movzx  eax,al
c001826f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018273:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001827b:	01 d0                	add    eax,edx
c001827d:	83 c0 2c             	add    eax,0x2c
c0018280:	8a 00                	mov    al,BYTE PTR [eax]
c0018282:	0f b6 d0             	movzx  edx,al
c0018285:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018289:	8d 48 01             	lea    ecx,[eax+0x1]
c001828c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018290:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018294:	0f b6 c0             	movzx  eax,al
c0018297:	c1 e0 08             	shl    eax,0x8
c001829a:	09 d0                	or     eax,edx
c001829c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00182a0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182a9:	8d 50 01             	lea    edx,[eax+0x1]
c00182ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182b4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182b8:	0f b6 c0             	movzx  eax,al
c00182bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c3:	c1 e0 08             	shl    eax,0x8
c00182c6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182ca:	89 c1                	mov    ecx,eax
c00182cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182d0:	c1 e0 18             	shl    eax,0x18
c00182d3:	89 c3                	mov    ebx,eax
c00182d5:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c00182da:	8d 50 01             	lea    edx,[eax+0x1]
c00182dd:	89 15 10 17 03 c0    	mov    DWORD PTR ds:0xc0031710,edx
c00182e3:	09 d9                	or     ecx,ebx
c00182e5:	89 ca                	mov    edx,ecx
c00182e7:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c00182ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182fa:	68 f4 be 02 c0       	push   0xc002bef4
c00182ff:	e8 cf ab ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	eb 0c                	jmp    c0018315 <scanMADT()+0x469>
c0018309:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001830e:	75 05                	jne    c0018315 <scanMADT()+0x469>
c0018310:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018315:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001831a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001831e:	01 d0                	add    eax,edx
c0018320:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018324:	e9 54 fc ff ff       	jmp    c0017f7d <scanMADT()+0xd1>
c0018329:	90                   	nop
c001832a:	eb 01                	jmp    c001832d <scanMADT()+0x481>
c001832c:	90                   	nop
c001832d:	83 c4 38             	add    esp,0x38
c0018330:	5b                   	pop    ebx
c0018331:	c3                   	ret    

c0018332 <ACPI::ACPI()>:
c0018332:	83 ec 0c             	sub    esp,0xc
c0018335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018339:	83 ec 08             	sub    esp,0x8
c001833c:	68 55 bd 02 c0       	push   0xc002bd55
c0018341:	50                   	push   eax
c0018342:	e8 b1 c1 ff ff       	call   c00144f8 <Device::Device(char const*)>
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c001834f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018353:	89 10                	mov    DWORD PTR [eax],edx
c0018355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018359:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018364:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001836e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018372:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001837c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018380:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001838b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018392:	e8 15 fb ff ff       	call   c0017eac <scanMADT()>
c0018397:	90                   	nop
c0018398:	83 c4 0c             	add    esp,0xc
c001839b:	c3                   	ret    

c001839c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001839c:	83 ec 2c             	sub    esp,0x2c
c001839f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00183a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183ab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183af:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183b4:	88 d0                	mov    al,dl
c00183b6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183cb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183d1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183d5:	0f 8d 97 00 00 00    	jge    c0018472 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e3:	83 c2 2a             	add    edx,0x2a
c00183e6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183ea:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183ef:	75 78                	jne    c0018469 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f9:	83 c2 2a             	add    edx,0x2a
c00183fc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018400:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018404:	75 63                	jne    c0018469 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018406:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001840b:	74 3a                	je     c0018447 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001840d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018411:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018415:	83 c2 2a             	add    edx,0x2a
c0018418:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001841c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018420:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018423:	39 c2                	cmp    edx,eax
c0018425:	74 10                	je     c0018437 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018427:	83 ec 0c             	sub    esp,0xc
c001842a:	68 30 bf 02 c0       	push   0xc002bf30
c001842f:	e8 5b 24 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	83 ec 0c             	sub    esp,0xc
c001843a:	68 5a bd 02 c0       	push   0xc002bd5a
c001843f:	e8 4b 24 00 00       	call   c001a88f <Krnl::panic(char const*)>
c0018444:	83 c4 10             	add    esp,0x10
c0018447:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001844b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001844f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018453:	83 c2 2a             	add    edx,0x2a
c0018456:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001845a:	8b 02                	mov    eax,DWORD PTR [edx]
c001845c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001845f:	89 01                	mov    DWORD PTR [ecx],eax
c0018461:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018464:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018469:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001846d:	e9 55 ff ff ff       	jmp    c00183c7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018472:	90                   	nop
c0018473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018477:	83 c4 2c             	add    esp,0x2c
c001847a:	c2 04 00             	ret    0x4
c001847d:	90                   	nop

c001847e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001847e:	83 ec 1c             	sub    esp,0x1c
c0018481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018485:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018489:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001848d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018492:	88 c8                	mov    al,cl
c0018494:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018498:	88 d0                	mov    al,dl
c001849a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001849e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ac:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184af:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184b3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184bb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184cc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184db:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184df:	8d 48 01             	lea    ecx,[eax+0x1]
c00184e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e6:	83 c2 2a             	add    edx,0x2a
c00184e9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184fb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018502:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018510:	8d 50 01             	lea    edx,[eax+0x1]
c0018513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018517:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001851d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018521:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018527:	3d 00 02 00 00       	cmp    eax,0x200
c001852c:	75 10                	jne    c001853e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001852e:	83 ec 0c             	sub    esp,0xc
c0018531:	68 69 bd 02 c0       	push   0xc002bd69
c0018536:	e8 54 23 00 00       	call   c001a88f <Krnl::panic(char const*)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	90                   	nop
c001853f:	83 c4 1c             	add    esp,0x1c
c0018542:	c3                   	ret    
c0018543:	90                   	nop

c0018544 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018544:	b8 00 00 00 00       	mov    eax,0x0
c0018549:	c3                   	ret    

c001854a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001854a:	83 ec 1c             	sub    esp,0x1c
c001854d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018551:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018554:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018558:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001855d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018562:	83 ec 08             	sub    esp,0x8
c0018565:	52                   	push   edx
c0018566:	50                   	push   eax
c0018567:	e8 c6 69 ff ff       	call   c000ef32 <Computer::readCMOS(unsigned char)>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018573:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0018578:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001857d:	83 ec 04             	sub    esp,0x4
c0018580:	6a 01                	push   0x1
c0018582:	52                   	push   edx
c0018583:	50                   	push   eax
c0018584:	e8 bf 6a ff ff       	call   c000f048 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018589:	83 c4 10             	add    esp,0x10
c001858c:	90                   	nop
c001858d:	83 c4 1c             	add    esp,0x1c
c0018590:	c3                   	ret    
c0018591:	90                   	nop

c0018592 <ACPI::sleep()>:
c0018592:	83 ec 0c             	sub    esp,0xc
c0018595:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001859a:	85 c0                	test   eax,eax
c001859c:	74 07                	je     c00185a5 <ACPI::sleep()+0x13>
c001859e:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c00185a3:	ff d0                	call   eax
c00185a5:	90                   	nop
c00185a6:	83 c4 0c             	add    esp,0xc
c00185a9:	c3                   	ret    

c00185aa <ACPI::open(int, int, void*)>:
c00185aa:	57                   	push   edi
c00185ab:	56                   	push   esi
c00185ac:	53                   	push   ebx
c00185ad:	83 ec 60             	sub    esp,0x60
c00185b0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185b4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185bb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185bf:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185c6:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00185cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185d1:	83 e0 04             	and    eax,0x4
c00185d4:	84 c0                	test   al,al
c00185d6:	74 47                	je     c001861f <ACPI::open(int, int, void*)+0x75>
c00185d8:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c00185dd:	83 ec 08             	sub    esp,0x8
c00185e0:	68 86 bd 02 c0       	push   0xc002bd86
c00185e5:	50                   	push   eax
c00185e6:	e8 25 f8 ff ff       	call   c0017e10 <findDataTable(unsigned char*, char*)>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185f2:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185f7:	74 26                	je     c001861f <ACPI::open(int, int, void*)+0x75>
c00185f9:	83 ec 0c             	sub    esp,0xc
c00185fc:	68 8b bd 02 c0       	push   0xc002bd8b
c0018601:	e8 cd a8 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0018606:	83 c4 10             	add    esp,0x10
c0018609:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001860d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018614:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018618:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001861f:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018627:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001862b:	8a 00                	mov    al,BYTE PTR [eax]
c001862d:	3c 01                	cmp    al,0x1
c001862f:	75 28                	jne    c0018659 <ACPI::open(int, int, void*)+0xaf>
c0018631:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018635:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001863c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018640:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	68 9c bd 02 c0       	push   0xc002bd9c
c001864f:	e8 7f a8 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	eb 25                	jmp    c001867e <ACPI::open(int, int, void*)+0xd4>
c0018659:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001865d:	8a 00                	mov    al,BYTE PTR [eax]
c001865f:	3c 02                	cmp    al,0x2
c0018661:	75 1b                	jne    c001867e <ACPI::open(int, int, void*)+0xd4>
c0018663:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018667:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001866e:	83 ec 0c             	sub    esp,0xc
c0018671:	68 a4 bd 02 c0       	push   0xc002bda4
c0018676:	e8 58 a8 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018682:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018688:	83 f0 01             	xor    eax,0x1
c001868b:	84 c0                	test   al,al
c001868d:	74 6a                	je     c00186f9 <ACPI::open(int, int, void*)+0x14f>
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	68 ac bd 02 c0       	push   0xc002bdac
c0018697:	e8 37 a8 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	e8 ac 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186a4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186a8:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186ad:	75 28                	jne    c00186d7 <ACPI::open(int, int, void*)+0x12d>
c00186af:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186b3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186be:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186c5:	83 ec 0c             	sub    esp,0xc
c00186c8:	68 ba bd 02 c0       	push   0xc002bdba
c00186cd:	e8 01 a8 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	eb 22                	jmp    c00186f9 <ACPI::open(int, int, void*)+0x14f>
c00186d7:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186dc:	75 1b                	jne    c00186f9 <ACPI::open(int, int, void*)+0x14f>
c00186de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186e2:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186e9:	83 ec 0c             	sub    esp,0xc
c00186ec:	68 c4 bd 02 c0       	push   0xc002bdc4
c00186f1:	e8 dd a7 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00186f6:	83 c4 10             	add    esp,0x10
c00186f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186fd:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018703:	84 c0                	test   al,al
c0018705:	74 13                	je     c001871a <ACPI::open(int, int, void*)+0x170>
c0018707:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001870b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018711:	83 f0 01             	xor    eax,0x1
c0018714:	0f b6 c0             	movzx  eax,al
c0018717:	40                   	inc    eax
c0018718:	eb 05                	jmp    c001871f <ACPI::open(int, int, void*)+0x175>
c001871a:	b8 00 00 00 00       	mov    eax,0x0
c001871f:	83 ec 08             	sub    esp,0x8
c0018722:	50                   	push   eax
c0018723:	68 ce bd 02 c0       	push   0xc002bdce
c0018728:	e8 a6 a7 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018734:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001873a:	84 c0                	test   al,al
c001873c:	74 67                	je     c00187a5 <ACPI::open(int, int, void*)+0x1fb>
c001873e:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018746:	83 ec 0c             	sub    esp,0xc
c0018749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001874d:	e8 ca 71 ff ff       	call   c000f91c <malloc>
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	89 c3                	mov    ebx,eax
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	53                   	push   ebx
c001875b:	e8 9c a8 00 00       	call   c0022ffc <PCI::PCI()>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018767:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001876b:	83 ec 08             	sub    esp,0x8
c001876e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018772:	50                   	push   eax
c0018773:	e8 90 bb ff ff       	call   c0014308 <Device::addChild(Device*)>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001877f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018781:	83 c0 08             	add    eax,0x8
c0018784:	8b 00                	mov    eax,DWORD PTR [eax]
c0018786:	6a 00                	push   0x0
c0018788:	6a 00                	push   0x0
c001878a:	6a 00                	push   0x0
c001878c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018790:	ff d0                	call   eax
c0018792:	83 c4 10             	add    esp,0x10
c0018795:	83 ec 0c             	sub    esp,0xc
c0018798:	68 d7 bd 02 c0       	push   0xc002bdd7
c001879d:	e8 31 a7 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00187a2:	83 c4 10             	add    esp,0x10
c00187a5:	83 ec 0c             	sub    esp,0xc
c00187a8:	68 e2 bd 02 c0       	push   0xc002bde2
c00187ad:	e8 7f 48 00 00       	call   c001d031 <Thr::loadKernelSymbolTable(char const*)>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	83 ec 0c             	sub    esp,0xc
c00187b8:	6a 0c                	push   0xc
c00187ba:	e8 4d 95 ff ff       	call   c0011d0c <Virt::setupPageSwapping(int)>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187c6:	83 ec 08             	sub    esp,0x8
c00187c9:	6a 12                	push   0x12
c00187cb:	50                   	push   eax
c00187cc:	e8 a7 be ff ff       	call   c0014678 <getDevicesOfType(DeviceType)>
c00187d1:	83 c4 0c             	add    esp,0xc
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187db:	50                   	push   eax
c00187dc:	e8 3f 0c 01 00       	call   c0029420 <LinkedList<Device>::isEmpty()>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	83 f0 01             	xor    eax,0x1
c00187e7:	84 c0                	test   al,al
c00187e9:	0f 84 fd 00 00 00    	je     c00188ec <ACPI::open(int, int, void*)+0x342>
c00187ef:	83 ec 0c             	sub    esp,0xc
c00187f2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187f6:	50                   	push   eax
c00187f7:	e8 40 0c 01 00       	call   c002943c <LinkedList<Device>::getFirstElement()>
c00187fc:	83 c4 10             	add    esp,0x10
c00187ff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018803:	83 ec 0c             	sub    esp,0xc
c0018806:	8d 44 24 34          	lea    eax,[esp+0x34]
c001880a:	50                   	push   eax
c001880b:	e8 34 0c 01 00       	call   c0029444 <LinkedList<Device>::removeFirst()>
c0018810:	83 c4 10             	add    esp,0x10
c0018813:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018817:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001881b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001881f:	83 ec 0c             	sub    esp,0xc
c0018822:	50                   	push   eax
c0018823:	e8 cc bd ff ff       	call   c00145f4 <Device::getName()>
c0018828:	83 c4 10             	add    esp,0x10
c001882b:	83 ec 08             	sub    esp,0x8
c001882e:	50                   	push   eax
c001882f:	68 60 bf 02 c0       	push   0xc002bf60
c0018834:	e8 9a a6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018840:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018844:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001884a:	ba 09 00 00 00       	mov    edx,0x9
c001884f:	fc                   	cld    
c0018850:	89 c7                	mov    edi,eax
c0018852:	89 de                	mov    esi,ebx
c0018854:	89 d1                	mov    ecx,edx
c0018856:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018858:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001885c:	0f b6 c0             	movzx  eax,al
c001885f:	83 ec 08             	sub    esp,0x8
c0018862:	50                   	push   eax
c0018863:	68 00 be 02 c0       	push   0xc002be00
c0018868:	e8 66 a6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001886d:	83 c4 10             	add    esp,0x10
c0018870:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018874:	0f b6 c0             	movzx  eax,al
c0018877:	83 ec 08             	sub    esp,0x8
c001887a:	50                   	push   eax
c001887b:	68 12 be 02 c0       	push   0xc002be12
c0018880:	e8 4e a6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0018885:	83 c4 10             	add    esp,0x10
c0018888:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c001888d:	0f b7 c0             	movzx  eax,ax
c0018890:	83 ec 08             	sub    esp,0x8
c0018893:	50                   	push   eax
c0018894:	68 24 be 02 c0       	push   0xc002be24
c0018899:	e8 35 a6 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001889e:	83 c4 10             	add    esp,0x10
c00188a1:	83 ec 0c             	sub    esp,0xc
c00188a4:	83 ec 24             	sub    esp,0x24
c00188a7:	89 e0                	mov    eax,esp
c00188a9:	89 c3                	mov    ebx,eax
c00188ab:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188af:	ba 09 00 00 00       	mov    edx,0x9
c00188b4:	89 df                	mov    edi,ebx
c00188b6:	89 c6                	mov    esi,eax
c00188b8:	89 d1                	mov    ecx,edx
c00188ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188bc:	e8 9d aa 00 00       	call   c002335e <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188c1:	83 c4 30             	add    esp,0x30
c00188c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188c8:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188cd:	0f 84 01 ff ff ff    	je     c00187d4 <ACPI::open(int, int, void*)+0x22a>
c00188d3:	83 ec 08             	sub    esp,0x8
c00188d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188da:	68 36 be 02 c0       	push   0xc002be36
c00188df:	e8 ef a5 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00188e4:	83 c4 10             	add    esp,0x10
c00188e7:	e9 e8 fe ff ff       	jmp    c00187d4 <ACPI::open(int, int, void*)+0x22a>
c00188ec:	83 ec 0c             	sub    esp,0xc
c00188ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188f3:	50                   	push   eax
c00188f4:	e8 25 0b 01 00       	call   c002941e <LinkedList<Device>::~LinkedList()>
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0018902:	83 ec 08             	sub    esp,0x8
c0018905:	6a 01                	push   0x1
c0018907:	68 42 be 02 c0       	push   0xc002be42
c001890c:	e8 97 51 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0018911:	83 c4 10             	add    esp,0x10
c0018914:	83 ec 08             	sub    esp,0x8
c0018917:	53                   	push   ebx
c0018918:	50                   	push   eax
c0018919:	e8 b5 53 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c001891e:	83 c4 10             	add    esp,0x10
c0018921:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0018927:	83 ec 08             	sub    esp,0x8
c001892a:	6a 01                	push   0x1
c001892c:	68 5f be 02 c0       	push   0xc002be5f
c0018931:	e8 72 51 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c0018936:	83 c4 10             	add    esp,0x10
c0018939:	83 ec 08             	sub    esp,0x8
c001893c:	53                   	push   ebx
c001893d:	50                   	push   eax
c001893e:	e8 90 53 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001894b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018951:	83 e0 04             	and    eax,0x4
c0018954:	84 c0                	test   al,al
c0018956:	0f 84 d3 00 00 00    	je     c0018a2f <ACPI::open(int, int, void*)+0x485>
c001895c:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018964:	83 ec 0c             	sub    esp,0xc
c0018967:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001896b:	e8 ac 6f ff ff       	call   c000f91c <malloc>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	89 c3                	mov    ebx,eax
c0018975:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001897a:	83 ec 04             	sub    esp,0x4
c001897d:	50                   	push   eax
c001897e:	68 7c be 02 c0       	push   0xc002be7c
c0018983:	53                   	push   ebx
c0018984:	e8 a9 aa ff ff       	call   c0013432 <File::File(char const*, Process*)>
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018990:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018995:	74 17                	je     c00189ae <ACPI::open(int, int, void*)+0x404>
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001899e:	e8 61 ad ff ff       	call   c0013704 <File::exists()>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	84 c0                	test   al,al
c00189a8:	74 04                	je     c00189ae <ACPI::open(int, int, void*)+0x404>
c00189aa:	b0 01                	mov    al,0x1
c00189ac:	eb 02                	jmp    c00189b0 <ACPI::open(int, int, void*)+0x406>
c00189ae:	b0 00                	mov    al,0x0
c00189b0:	84 c0                	test   al,al
c00189b2:	74 22                	je     c00189d6 <ACPI::open(int, int, void*)+0x42c>
c00189b4:	83 ec 08             	sub    esp,0x8
c00189b7:	6a 01                	push   0x1
c00189b9:	68 7c be 02 c0       	push   0xc002be7c
c00189be:	e8 e5 50 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	83 ec 08             	sub    esp,0x8
c00189c9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189cd:	50                   	push   eax
c00189ce:	e8 00 53 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c00189d3:	83 c4 10             	add    esp,0x10
c00189d6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189db:	74 1e                	je     c00189fb <ACPI::open(int, int, void*)+0x451>
c00189dd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189e2:	74 17                	je     c00189fb <ACPI::open(int, int, void*)+0x451>
c00189e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00189ea:	83 c0 08             	add    eax,0x8
c00189ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00189ef:	83 ec 0c             	sub    esp,0xc
c00189f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189f6:	ff d0                	call   eax
c00189f8:	83 c4 10             	add    esp,0x10
c00189fb:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0018a00:	83 ec 08             	sub    esp,0x8
c0018a03:	68 99 be 02 c0       	push   0xc002be99
c0018a08:	50                   	push   eax
c0018a09:	e8 02 f4 ff ff       	call   c0017e10 <findDataTable(unsigned char*, char*)>
c0018a0e:	83 c4 10             	add    esp,0x10
c0018a11:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a15:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a1a:	74 13                	je     c0018a2f <ACPI::open(int, int, void*)+0x485>
c0018a1c:	83 ec 08             	sub    esp,0x8
c0018a1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a23:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a27:	e8 1e fb ff ff       	call   c001854a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a2c:	83 c4 10             	add    esp,0x10
c0018a2f:	b8 00 00 00 00       	mov    eax,0x0
c0018a34:	83 c4 60             	add    esp,0x60
c0018a37:	5b                   	pop    ebx
c0018a38:	5e                   	pop    esi
c0018a39:	5f                   	pop    edi
c0018a3a:	c3                   	ret    
c0018a3b:	90                   	nop

c0018a3c <CPU::close(int, int, void*)>:
c0018a3c:	31 c0                	xor    eax,eax
c0018a3e:	c3                   	ret    
c0018a3f:	90                   	nop

c0018a40 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a40:	55                   	push   ebp
c0018a41:	57                   	push   edi
c0018a42:	56                   	push   esi
c0018a43:	53                   	push   ebx
c0018a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a4c:	89 ce                	mov    esi,ecx
c0018a4e:	89 d5                	mov    ebp,edx
c0018a50:	80 f9 04             	cmp    cl,0x4
c0018a53:	75 28                	jne    c0018a7d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a55:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a58:	3c 03                	cmp    al,0x3
c0018a5a:	0f 86 63 01 00 00    	jbe    c0018bc3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a60:	80 fa 03             	cmp    dl,0x3
c0018a63:	0f 84 5a 01 00 00    	je     c0018bc3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a69:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a6c:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018a71:	89 fb                	mov    ebx,edi
c0018a73:	80 fb 01             	cmp    bl,0x1
c0018a76:	77 4e                	ja     c0018ac6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a78:	e9 52 01 00 00       	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a7d:	80 f9 05             	cmp    cl,0x5
c0018a80:	75 4d                	jne    c0018acf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a82:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018a87:	80 fa 03             	cmp    dl,0x3
c0018a8a:	0f 86 3f 01 00 00    	jbe    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a90:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a93:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018a98:	89 fb                	mov    ebx,edi
c0018a9a:	80 fb 01             	cmp    bl,0x1
c0018a9d:	0f 86 2c 01 00 00    	jbe    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aa3:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018aa8:	80 fa 08             	cmp    dl,0x8
c0018aab:	0f 84 1e 01 00 00    	je     c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ab1:	89 d7                	mov    edi,edx
c0018ab3:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018ab8:	83 e7 fb             	and    edi,0xfffffffb
c0018abb:	89 fb                	mov    ebx,edi
c0018abd:	80 fb 09             	cmp    bl,0x9
c0018ac0:	0f 84 09 01 00 00    	je     c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac6:	31 c0                	xor    eax,eax
c0018ac8:	89 eb                	mov    ebx,ebp
c0018aca:	0f b6 fb             	movzx  edi,bl
c0018acd:	eb 30                	jmp    c0018aff <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018acf:	31 c0                	xor    eax,eax
c0018ad1:	80 f9 06             	cmp    cl,0x6
c0018ad4:	75 f2                	jne    c0018ac8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ad6:	80 fa 0a             	cmp    dl,0xa
c0018ad9:	77 ed                	ja     c0018ac8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018adb:	bf de 05 00 00       	mov    edi,0x5de
c0018ae0:	0f a3 d7             	bt     edi,edx
c0018ae3:	73 e3                	jae    c0018ac8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae5:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018aea:	e9 e0 00 00 00       	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aef:	39 c7                	cmp    edi,eax
c0018af1:	0f 84 d3 00 00 00    	je     c0018bca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018af7:	40                   	inc    eax
c0018af8:	3d d0 00 00 00       	cmp    eax,0xd0
c0018afd:	74 09                	je     c0018b08 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018aff:	89 f3                	mov    ebx,esi
c0018b01:	80 fb 0f             	cmp    bl,0xf
c0018b04:	75 f1                	jne    c0018af7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b06:	eb e7                	jmp    c0018aef <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b08:	80 f9 10             	cmp    cl,0x10
c0018b0b:	75 14                	jne    c0018b21 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b0d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b10:	83 e0 fb             	and    eax,0xfffffffb
c0018b13:	3c 02                	cmp    al,0x2
c0018b15:	76 34                	jbe    c0018b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b17:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b1c:	80 fa 02             	cmp    dl,0x2
c0018b1f:	eb 24                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b21:	80 f9 11             	cmp    cl,0x11
c0018b24:	75 13                	jne    c0018b39 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b26:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b2b:	80 fa 03             	cmp    dl,0x3
c0018b2e:	0f 85 9b 00 00 00    	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b34:	e9 91 00 00 00       	jmp    c0018bca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b39:	80 f9 12             	cmp    cl,0x12
c0018b3c:	75 14                	jne    c0018b52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b3e:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b43:	fe ca                	dec    dl
c0018b45:	0f 85 84 00 00 00    	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4b:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018b50:	eb 7d                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b52:	80 f9 14             	cmp    cl,0x14
c0018b55:	75 12                	jne    c0018b69 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b57:	4a                   	dec    edx
c0018b58:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b5d:	80 fa 01             	cmp    dl,0x1
c0018b60:	77 6d                	ja     c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b62:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018b67:	eb 66                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b69:	80 f9 15             	cmp    cl,0x15
c0018b6c:	75 31                	jne    c0018b9f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b6e:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018b73:	80 fa 01             	cmp    dl,0x1
c0018b76:	74 57                	je     c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b78:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b7d:	80 fa 13             	cmp    dl,0x13
c0018b80:	76 0c                	jbe    c0018b8e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b82:	80 fa 30             	cmp    dl,0x30
c0018b85:	75 48                	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b87:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018b8c:	eb 41                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b8e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b93:	0f a3 d1             	bt     ecx,edx
c0018b96:	73 37                	jae    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b98:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018b9d:	eb 30                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9f:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018ba4:	80 f9 16             	cmp    cl,0x16
c0018ba7:	75 26                	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba9:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018bae:	84 d2                	test   dl,dl
c0018bb0:	74 1d                	je     c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb2:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018bb7:	80 fa 30             	cmp    dl,0x30
c0018bba:	75 13                	jne    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbc:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018bc1:	eb 0c                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc3:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018bc8:	eb 05                	jmp    c0018bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bca:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018bcf:	5b                   	pop    ebx
c0018bd0:	5e                   	pop    esi
c0018bd1:	5f                   	pop    edi
c0018bd2:	5d                   	pop    ebp
c0018bd3:	c3                   	ret    

c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018bd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bdc:	80 f9 04             	cmp    cl,0x4
c0018bdf:	75 6b                	jne    c0018c4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018be1:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0018be6:	80 fa 01             	cmp    dl,0x1
c0018be9:	0f 86 92 02 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bef:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c0018bf4:	80 fa 02             	cmp    dl,0x2
c0018bf7:	0f 84 84 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfd:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018c02:	80 fa 03             	cmp    dl,0x3
c0018c05:	0f 84 76 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0b:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018c10:	80 fa 04             	cmp    dl,0x4
c0018c13:	0f 84 68 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c19:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018c1e:	80 fa 05             	cmp    dl,0x5
c0018c21:	0f 84 5a 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c27:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018c2c:	80 fa 07             	cmp    dl,0x7
c0018c2f:	0f 84 4c 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	83 ea 08             	sub    edx,0x8
c0018c38:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018c3d:	80 fa 01             	cmp    dl,0x1
c0018c40:	0f 87 3b 02 00 00    	ja     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c46:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018c4b:	c3                   	ret    
c0018c4c:	80 f9 05             	cmp    cl,0x5
c0018c4f:	75 45                	jne    c0018c96 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c51:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c54:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c59:	80 f9 02             	cmp    cl,0x2
c0018c5c:	0f 86 1f 02 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c62:	80 fa 04             	cmp    dl,0x4
c0018c65:	0f 84 f3 01 00 00    	je     c0018e5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c6b:	80 fa 07             	cmp    dl,0x7
c0018c6e:	0f 84 0d 02 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c74:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018c79:	80 fa 08             	cmp    dl,0x8
c0018c7c:	0f 84 ff 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c82:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018c87:	80 fa 09             	cmp    dl,0x9
c0018c8a:	0f 85 f1 01 00 00    	jne    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c90:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c95:	c3                   	ret    
c0018c96:	80 f9 06             	cmp    cl,0x6
c0018c99:	0f 85 85 01 00 00    	jne    c0018e24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c9f:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018ca4:	80 fa 01             	cmp    dl,0x1
c0018ca7:	0f 84 d4 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cad:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cb0:	3c 01                	cmp    al,0x1
c0018cb2:	0f 86 ac 01 00 00    	jbe    c0018e64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cb8:	80 fa 03             	cmp    dl,0x3
c0018cbb:	0f 84 a3 01 00 00    	je     c0018e64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cc1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018cc4:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018cc9:	80 f9 01             	cmp    cl,0x1
c0018ccc:	0f 86 af 01 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd2:	80 fa 09             	cmp    dl,0x9
c0018cd5:	0f 84 8f 01 00 00    	je     c0018e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cdb:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cde:	80 f9 01             	cmp    cl,0x1
c0018ce1:	0f 86 9a 01 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce7:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018cec:	80 fa 0d             	cmp    dl,0xd
c0018cef:	0f 84 8c 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf5:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018cfa:	80 fa 0e             	cmp    dl,0xe
c0018cfd:	0f 84 7e 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d03:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d08:	80 fa 0f             	cmp    dl,0xf
c0018d0b:	0f 84 70 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d11:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018d16:	80 fa 15             	cmp    dl,0x15
c0018d19:	0f 84 62 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d22:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d27:	80 f9 01             	cmp    cl,0x1
c0018d2a:	0f 86 51 01 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d30:	80 fa 1a             	cmp    dl,0x1a
c0018d33:	0f 84 37 01 00 00    	je     c0018e70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d39:	80 fa 1c             	cmp    dl,0x1c
c0018d3c:	0f 84 34 01 00 00    	je     c0018e76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d42:	80 fa 1d             	cmp    dl,0x1d
c0018d45:	0f 84 36 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d4b:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d50:	80 fa 25             	cmp    dl,0x25
c0018d53:	0f 84 28 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d59:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d5c:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d61:	80 f9 01             	cmp    cl,0x1
c0018d64:	0f 86 17 01 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d6a:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d6f:	80 fa 2a             	cmp    dl,0x2a
c0018d72:	0f 84 09 01 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d78:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d7d:	80 fa 2c             	cmp    dl,0x2c
c0018d80:	0f 84 fb 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d86:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d8b:	80 fa 2d             	cmp    dl,0x2d
c0018d8e:	0f 84 ed 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d94:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018d99:	80 fa 2e             	cmp    dl,0x2e
c0018d9c:	0f 84 df 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da2:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018da7:	80 fa 2f             	cmp    dl,0x2f
c0018daa:	0f 84 d1 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db0:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018db3:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018db8:	80 f9 01             	cmp    cl,0x1
c0018dbb:	0f 86 c0 00 00 00    	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc1:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018dc6:	80 fa 37             	cmp    dl,0x37
c0018dc9:	0f 84 b2 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcf:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018dd4:	80 fa 3a             	cmp    dl,0x3a
c0018dd7:	0f 84 a4 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddd:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018de2:	80 fa 3c             	cmp    dl,0x3c
c0018de5:	0f 84 96 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018deb:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018df0:	80 fa 3d             	cmp    dl,0x3d
c0018df3:	0f 84 88 00 00 00    	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df9:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018dfe:	80 fa 3e             	cmp    dl,0x3e
c0018e01:	74 7e                	je     c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e03:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e06:	3c 01                	cmp    al,0x1
c0018e08:	76 72                	jbe    c0018e7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e0a:	80 fa 3f             	cmp    dl,0x3f
c0018e0d:	74 6d                	je     c0018e7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e0f:	80 fa 4a             	cmp    dl,0x4a
c0018e12:	74 0a                	je     c0018e1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e14:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e19:	80 fa 4d             	cmp    dl,0x4d
c0018e1c:	75 63                	jne    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1e:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018e23:	c3                   	ret    
c0018e24:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e29:	80 f9 0b             	cmp    cl,0xb
c0018e2c:	75 0a                	jne    c0018e38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e2e:	fe ca                	dec    dl
c0018e30:	75 4f                	jne    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e32:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018e37:	c3                   	ret    
c0018e38:	80 f9 0f             	cmp    cl,0xf
c0018e3b:	75 44                	jne    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3d:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018e42:	80 fa 02             	cmp    dl,0x2
c0018e45:	76 3a                	jbe    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e47:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e4a:	3c 01                	cmp    al,0x1
c0018e4c:	76 0a                	jbe    c0018e58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e4e:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e53:	80 fa 06             	cmp    dl,0x6
c0018e56:	75 29                	jne    c0018e81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e58:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e5d:	c3                   	ret    
c0018e5e:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018e63:	c3                   	ret    
c0018e64:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018e69:	c3                   	ret    
c0018e6a:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018e6f:	c3                   	ret    
c0018e70:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018e75:	c3                   	ret    
c0018e76:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018e7b:	c3                   	ret    
c0018e7c:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018e81:	c3                   	ret    

c0018e82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e82:	60                   	pusha  
c0018e83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e8f:	9c                   	pushf  
c0018e90:	fa                   	cli    
c0018e91:	0f 09                	wbinvd 
c0018e93:	0f 30                	wrmsr  
c0018e95:	9d                   	popf   
c0018e96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e9a:	89 02                	mov    DWORD PTR [edx],eax
c0018e9c:	61                   	popa   
c0018e9d:	c3                   	ret    

c0018e9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e9e:	60                   	pusha  
c0018e9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ea3:	9c                   	pushf  
c0018ea4:	fa                   	cli    
c0018ea5:	0f 09                	wbinvd 
c0018ea7:	31 c0                	xor    eax,eax
c0018ea9:	31 d2                	xor    edx,edx
c0018eab:	0f 32                	rdmsr  
c0018ead:	9d                   	popf   
c0018eae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018eb2:	89 02                	mov    DWORD PTR [edx],eax
c0018eb4:	61                   	popa   
c0018eb5:	c3                   	ret    

c0018eb6 <CPU::AMD_K6_writeback(int, int, int)>:
c0018eb6:	56                   	push   esi
c0018eb7:	53                   	push   ebx
c0018eb8:	83 ec 10             	sub    esp,0x10
c0018ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ebf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ec4:	75 5d                	jne    c0018f23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ec6:	83 f8 08             	cmp    eax,0x8
c0018ec9:	75 09                	jne    c0018ed4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ecb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ed0:	7e 13                	jle    c0018ee5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ed2:	eb 30                	jmp    c0018f04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ed4:	83 f8 06             	cmp    eax,0x6
c0018ed7:	7c 4a                	jl     c0018f23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ed9:	83 f8 07             	cmp    eax,0x7
c0018edc:	7e 07                	jle    c0018ee5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ede:	83 f8 09             	cmp    eax,0x9
c0018ee1:	74 21                	je     c0018f04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ee3:	eb 3e                	jmp    c0018f23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ee5:	89 e6                	mov    esi,esp
c0018ee7:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0018eed:	56                   	push   esi
c0018eee:	c1 eb 15             	shr    ebx,0x15
c0018ef1:	68 82 00 00 c0       	push   0xc0000082
c0018ef6:	83 e3 7e             	and    ebx,0x7e
c0018ef9:	e8 a0 ff ff ff       	call   c0018e9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018efe:	56                   	push   esi
c0018eff:	6a 00                	push   0x0
c0018f01:	53                   	push   ebx
c0018f02:	eb 12                	jmp    c0018f16 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f04:	89 e3                	mov    ebx,esp
c0018f06:	53                   	push   ebx
c0018f07:	68 82 00 00 c0       	push   0xc0000082
c0018f0c:	e8 8d ff ff ff       	call   c0018e9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f11:	53                   	push   ebx
c0018f12:	6a 00                	push   0x0
c0018f14:	6a 00                	push   0x0
c0018f16:	68 82 00 00 c0       	push   0xc0000082
c0018f1b:	e8 62 ff ff ff       	call   c0018e82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f20:	83 c4 18             	add    esp,0x18
c0018f23:	83 c4 10             	add    esp,0x10
c0018f26:	5b                   	pop    ebx
c0018f27:	5e                   	pop    esi
c0018f28:	c3                   	ret    
c0018f29:	90                   	nop

c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f2a:	55                   	push   ebp
c0018f2b:	57                   	push   edi
c0018f2c:	56                   	push   esi
c0018f2d:	53                   	push   ebx
c0018f2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f32:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f3a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f3e:	39 05 40 e3 02 c0    	cmp    DWORD PTR ds:0xc002e340,eax
c0018f44:	75 23                	jne    c0018f69 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f46:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c0018f4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f4f:	89 06                	mov    DWORD PTR [esi],eax
c0018f51:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c0018f56:	89 07                	mov    DWORD PTR [edi],eax
c0018f58:	a1 64 19 03 c0       	mov    eax,ds:0xc0031964
c0018f5d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f60:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c0018f65:	89 02                	mov    DWORD PTR [edx],eax
c0018f67:	eb 3f                	jmp    c0018fa8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f69:	31 c9                	xor    ecx,ecx
c0018f6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f6f:	0f a2                	cpuid  
c0018f71:	89 06                	mov    DWORD PTR [esi],eax
c0018f73:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f79:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f7c:	89 10                	mov    DWORD PTR [eax],edx
c0018f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f82:	a3 40 e3 02 c0       	mov    ds:0xc002e340,eax
c0018f87:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f89:	a3 6c 19 03 c0       	mov    ds:0xc003196c,eax
c0018f8e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f90:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c0018f95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f98:	a3 64 19 03 c0       	mov    ds:0xc0031964,eax
c0018f9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fa3:	a3 60 19 03 c0       	mov    ds:0xc0031960,eax
c0018fa8:	5b                   	pop    ebx
c0018fa9:	5e                   	pop    esi
c0018faa:	5f                   	pop    edi
c0018fab:	5d                   	pop    ebp
c0018fac:	c3                   	ret    
c0018fad:	90                   	nop

c0018fae <CPU::cpuidCheckEDX(unsigned int)>:
c0018fae:	83 ec 10             	sub    esp,0x10
c0018fb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb5:	50                   	push   eax
c0018fb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fba:	50                   	push   eax
c0018fbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fbf:	50                   	push   eax
c0018fc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc4:	50                   	push   eax
c0018fc5:	6a 01                	push   0x1
c0018fc7:	e8 5e ff ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fd4:	0f 95 c0             	setne  al
c0018fd7:	83 c4 24             	add    esp,0x24
c0018fda:	c3                   	ret    
c0018fdb:	90                   	nop

c0018fdc <CPU::cpuidCheckECX(unsigned int)>:
c0018fdc:	83 ec 10             	sub    esp,0x10
c0018fdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe3:	50                   	push   eax
c0018fe4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe8:	50                   	push   eax
c0018fe9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fed:	50                   	push   eax
c0018fee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff2:	50                   	push   eax
c0018ff3:	6a 01                	push   0x1
c0018ff5:	e8 30 ff ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ffa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ffe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019002:	0f 95 c0             	setne  al
c0019005:	83 c4 24             	add    esp,0x24
c0019008:	c3                   	ret    
c0019009:	90                   	nop

c001900a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001900a:	83 ec 10             	sub    esp,0x10
c001900d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019011:	50                   	push   eax
c0019012:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019016:	50                   	push   eax
c0019017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901b:	50                   	push   eax
c001901c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019020:	50                   	push   eax
c0019021:	6a 07                	push   0x7
c0019023:	e8 02 ff ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001902c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019030:	0f 95 c0             	setne  al
c0019033:	83 c4 24             	add    esp,0x24
c0019036:	c3                   	ret    
c0019037:	90                   	nop

c0019038 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019038:	83 ec 10             	sub    esp,0x10
c001903b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001903f:	50                   	push   eax
c0019040:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019044:	50                   	push   eax
c0019045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019049:	50                   	push   eax
c001904a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904e:	50                   	push   eax
c001904f:	6a 07                	push   0x7
c0019051:	e8 d4 fe ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019056:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001905a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001905e:	0f 95 c0             	setne  al
c0019061:	83 c4 24             	add    esp,0x24
c0019064:	c3                   	ret    
c0019065:	90                   	nop

c0019066 <CPU::CPU()>:
c0019066:	83 ec 0c             	sub    esp,0xc
c0019069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001906d:	83 ec 08             	sub    esp,0x8
c0019070:	68 a6 c2 02 c0       	push   0xc002c2a6
c0019075:	50                   	push   eax
c0019076:	e8 7d b4 ff ff       	call   c00144f8 <Device::Device(char const*)>
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	ba 80 c3 02 c0       	mov    edx,0xc002c380
c0019083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019087:	89 10                	mov    DWORD PTR [eax],edx
c0019089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001908d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0019097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909b:	05 78 01 00 00       	add    eax,0x178
c00190a0:	83 ec 0c             	sub    esp,0xc
c00190a3:	50                   	push   eax
c00190a4:	e8 89 60 ff ff       	call   c000f132 <GDT::GDT()>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b0:	05 7c 09 00 00       	add    eax,0x97c
c00190b5:	83 ec 0c             	sub    esp,0xc
c00190b8:	50                   	push   eax
c00190b9:	e8 de 62 ff ff       	call   c000f39c <IDT::IDT()>
c00190be:	83 c4 10             	add    esp,0x10
c00190c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c5:	05 7c 11 00 00       	add    eax,0x117c
c00190ca:	83 ec 0c             	sub    esp,0xc
c00190cd:	50                   	push   eax
c00190ce:	e8 2b 83 ff ff       	call   c00113fe <TSS::TSS()>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190da:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190ef:	90                   	nop
c00190f0:	83 c4 0c             	add    esp,0xc
c00190f3:	c3                   	ret    

c00190f4 <CPU::displayFeatures()>:
c00190f4:	53                   	push   ebx
c00190f5:	83 ec 10             	sub    esp,0x10
c00190f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190fc:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019102:	68 b4 bf 02 c0       	push   0xc002bfb4
c0019107:	e8 c7 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001910c:	59                   	pop    ecx
c001910d:	58                   	pop    eax
c001910e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019114:	50                   	push   eax
c0019115:	68 c5 bf 02 c0       	push   0xc002bfc5
c001911a:	e8 b4 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001911f:	58                   	pop    eax
c0019120:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019126:	5a                   	pop    edx
c0019127:	c1 e8 0e             	shr    eax,0xe
c001912a:	0f b6 c0             	movzx  eax,al
c001912d:	50                   	push   eax
c001912e:	68 d6 bf 02 c0       	push   0xc002bfd6
c0019133:	e8 9b 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019138:	59                   	pop    ecx
c0019139:	58                   	pop    eax
c001913a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019140:	66 c1 e8 06          	shr    ax,0x6
c0019144:	0f b6 c0             	movzx  eax,al
c0019147:	50                   	push   eax
c0019148:	68 e7 bf 02 c0       	push   0xc002bfe7
c001914d:	e8 81 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019152:	c7 04 24 94 c4 02 c0 	mov    DWORD PTR [esp],0xc002c494
c0019159:	e8 75 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019166:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001916d:	74 05                	je     c0019174 <CPU::displayFeatures()+0x80>
c001916f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019174:	52                   	push   edx
c0019175:	52                   	push   edx
c0019176:	50                   	push   eax
c0019177:	68 f8 bf 02 c0       	push   0xc002bff8
c001917c:	e8 52 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019189:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019190:	78 05                	js     c0019197 <CPU::displayFeatures()+0xa3>
c0019192:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019197:	51                   	push   ecx
c0019198:	51                   	push   ecx
c0019199:	50                   	push   eax
c001919a:	68 0f c0 02 c0       	push   0xc002c00f
c001919f:	e8 2f 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191ac:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191b3:	75 05                	jne    c00191ba <CPU::displayFeatures()+0xc6>
c00191b5:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00191ba:	52                   	push   edx
c00191bb:	52                   	push   edx
c00191bc:	50                   	push   eax
c00191bd:	68 26 c0 02 c0       	push   0xc002c026
c00191c2:	e8 0c 9d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191cf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191d6:	75 05                	jne    c00191dd <CPU::displayFeatures()+0xe9>
c00191d8:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00191dd:	51                   	push   ecx
c00191de:	51                   	push   ecx
c00191df:	50                   	push   eax
c00191e0:	68 3d c0 02 c0       	push   0xc002c03d
c00191e5:	e8 e9 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191f2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00191f9:	75 05                	jne    c0019200 <CPU::displayFeatures()+0x10c>
c00191fb:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019200:	52                   	push   edx
c0019201:	52                   	push   edx
c0019202:	50                   	push   eax
c0019203:	68 54 c0 02 c0       	push   0xc002c054
c0019208:	e8 c6 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019215:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001921c:	75 05                	jne    c0019223 <CPU::displayFeatures()+0x12f>
c001921e:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019223:	51                   	push   ecx
c0019224:	51                   	push   ecx
c0019225:	50                   	push   eax
c0019226:	68 6b c0 02 c0       	push   0xc002c06b
c001922b:	e8 a3 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019238:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001923f:	75 05                	jne    c0019246 <CPU::displayFeatures()+0x152>
c0019241:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019246:	52                   	push   edx
c0019247:	52                   	push   edx
c0019248:	50                   	push   eax
c0019249:	68 82 c0 02 c0       	push   0xc002c082
c001924e:	e8 80 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001925b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019262:	75 05                	jne    c0019269 <CPU::displayFeatures()+0x175>
c0019264:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019269:	51                   	push   ecx
c001926a:	51                   	push   ecx
c001926b:	50                   	push   eax
c001926c:	68 99 c0 02 c0       	push   0xc002c099
c0019271:	e8 5d 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001927e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019285:	75 05                	jne    c001928c <CPU::displayFeatures()+0x198>
c0019287:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001928c:	52                   	push   edx
c001928d:	52                   	push   edx
c001928e:	50                   	push   eax
c001928f:	68 b0 c0 02 c0       	push   0xc002c0b0
c0019294:	e8 3a 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00192a1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192a8:	75 05                	jne    c00192af <CPU::displayFeatures()+0x1bb>
c00192aa:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192af:	51                   	push   ecx
c00192b0:	51                   	push   ecx
c00192b1:	50                   	push   eax
c00192b2:	68 c7 c0 02 c0       	push   0xc002c0c7
c00192b7:	e8 17 9c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00192c4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192cb:	75 05                	jne    c00192d2 <CPU::displayFeatures()+0x1de>
c00192cd:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192d2:	52                   	push   edx
c00192d3:	52                   	push   edx
c00192d4:	50                   	push   eax
c00192d5:	68 de c0 02 c0       	push   0xc002c0de
c00192da:	e8 f4 9b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00192df:	83 c4 10             	add    esp,0x10
c00192e2:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00192e7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192ee:	75 05                	jne    c00192f5 <CPU::displayFeatures()+0x201>
c00192f0:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192f5:	51                   	push   ecx
c00192f6:	51                   	push   ecx
c00192f7:	50                   	push   eax
c00192f8:	68 f5 c0 02 c0       	push   0xc002c0f5
c00192fd:	e8 d1 9b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001930a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019311:	75 05                	jne    c0019318 <CPU::displayFeatures()+0x224>
c0019313:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019318:	52                   	push   edx
c0019319:	52                   	push   edx
c001931a:	50                   	push   eax
c001931b:	68 0c c1 02 c0       	push   0xc002c10c
c0019320:	e8 ae 9b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019325:	83 c4 10             	add    esp,0x10
c0019328:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001932d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019334:	78 05                	js     c001933b <CPU::displayFeatures()+0x247>
c0019336:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001933b:	51                   	push   ecx
c001933c:	51                   	push   ecx
c001933d:	50                   	push   eax
c001933e:	68 23 c1 02 c0       	push   0xc002c123
c0019343:	e8 8b 9b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0019348:	83 c4 10             	add    esp,0x10
c001934b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019350:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019357:	75 05                	jne    c001935e <CPU::displayFeatures()+0x26a>
c0019359:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001935e:	52                   	push   edx
c001935f:	52                   	push   edx
c0019360:	50                   	push   eax
c0019361:	68 3a c1 02 c0       	push   0xc002c13a
c0019366:	e8 68 9b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001936b:	83 c4 18             	add    esp,0x18
c001936e:	5b                   	pop    ebx
c001936f:	c3                   	ret    

c0019370 <CPU::detectFeatures()>:
c0019370:	55                   	push   ebp
c0019371:	57                   	push   edi
c0019372:	56                   	push   esi
c0019373:	53                   	push   ebx
c0019374:	83 ec 50             	sub    esp,0x50
c0019377:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001937b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019385:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001938c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019392:	6a 0d                	push   0xd
c0019394:	6a 00                	push   0x0
c0019396:	57                   	push   edi
c0019397:	e8 ec 73 fe ff       	call   c0000788 <memset>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00193a4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193ab:	0f 84 20 09 00 00    	je     c0019cd1 <CPU::detectFeatures()+0x961>
c00193b1:	83 ec 0c             	sub    esp,0xc
c00193b4:	6a 10                	push   0x10
c00193b6:	e8 f3 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c00193bb:	83 e0 01             	and    eax,0x1
c00193be:	8d 14 00             	lea    edx,[eax+eax*1]
c00193c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193c7:	83 e0 fd             	and    eax,0xfffffffd
c00193ca:	09 d0                	or     eax,edx
c00193cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193d9:	e8 d0 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c00193de:	83 e0 01             	and    eax,0x1
c00193e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193ee:	83 e0 fb             	and    eax,0xfffffffb
c00193f1:	09 d0                	or     eax,edx
c00193f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019400:	e8 a9 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c0019405:	83 e0 01             	and    eax,0x1
c0019408:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001940f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019415:	83 e0 f7             	and    eax,0xfffffff7
c0019418:	09 d0                	or     eax,edx
c001941a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019420:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019427:	e8 82 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c001942c:	83 e0 01             	and    eax,0x1
c001942f:	c1 e0 04             	shl    eax,0x4
c0019432:	88 c2                	mov    dl,al
c0019434:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001943a:	83 e0 ef             	and    eax,0xffffffef
c001943d:	09 d0                	or     eax,edx
c001943f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019445:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001944c:	e8 5d fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c0019451:	83 e0 01             	and    eax,0x1
c0019454:	c1 e0 05             	shl    eax,0x5
c0019457:	88 c2                	mov    dl,al
c0019459:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945f:	83 e0 df             	and    eax,0xffffffdf
c0019462:	09 d0                	or     eax,edx
c0019464:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001946a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019471:	e8 38 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c0019476:	83 e0 01             	and    eax,0x1
c0019479:	8d 14 00             	lea    edx,[eax+eax*1]
c001947c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019482:	83 e0 fd             	and    eax,0xfffffffd
c0019485:	09 d0                	or     eax,edx
c0019487:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001948d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019494:	e8 15 fb ff ff       	call   c0018fae <CPU::cpuidCheckEDX(unsigned int)>
c0019499:	83 e0 01             	and    eax,0x1
c001949c:	c1 e0 06             	shl    eax,0x6
c001949f:	88 c2                	mov    dl,al
c00194a1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194a7:	83 e0 bf             	and    eax,0xffffffbf
c00194aa:	09 d0                	or     eax,edx
c00194ac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194b2:	58                   	pop    eax
c00194b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194b7:	56                   	push   esi
c00194b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194bc:	55                   	push   ebp
c00194bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194c1:	50                   	push   eax
c00194c2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00194c6:	52                   	push   edx
c00194c7:	6a 00                	push   0x0
c00194c9:	e8 5c fa ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194ce:	83 c4 1c             	add    esp,0x1c
c00194d1:	6a 04                	push   0x4
c00194d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194d7:	50                   	push   eax
c00194d8:	57                   	push   edi
c00194d9:	e8 8a 72 fe ff       	call   c0000768 <memcpy>
c00194de:	83 c4 0c             	add    esp,0xc
c00194e1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00194e7:	6a 04                	push   0x4
c00194e9:	56                   	push   esi
c00194ea:	50                   	push   eax
c00194eb:	e8 78 72 fe ff       	call   c0000768 <memcpy>
c00194f0:	83 c4 0c             	add    esp,0xc
c00194f3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00194f9:	6a 04                	push   0x4
c00194fb:	55                   	push   ebp
c00194fc:	50                   	push   eax
c00194fd:	e8 66 72 fe ff       	call   c0000768 <memcpy>
c0019502:	58                   	pop    eax
c0019503:	5a                   	pop    edx
c0019504:	68 51 c1 02 c0       	push   0xc002c151
c0019509:	57                   	push   edi
c001950a:	e8 c1 73 fe ff       	call   c00008d0 <strcmp>
c001950f:	83 c4 10             	add    esp,0x10
c0019512:	85 c0                	test   eax,eax
c0019514:	75 0f                	jne    c0019525 <CPU::detectFeatures()+0x1b5>
c0019516:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019520:	e9 22 02 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019525:	50                   	push   eax
c0019526:	50                   	push   eax
c0019527:	68 5e c1 02 c0       	push   0xc002c15e
c001952c:	57                   	push   edi
c001952d:	e8 9e 73 fe ff       	call   c00008d0 <strcmp>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	85 c0                	test   eax,eax
c0019537:	74 dd                	je     c0019516 <CPU::detectFeatures()+0x1a6>
c0019539:	51                   	push   ecx
c001953a:	51                   	push   ecx
c001953b:	68 6b c1 02 c0       	push   0xc002c16b
c0019540:	57                   	push   edi
c0019541:	e8 8a 73 fe ff       	call   c00008d0 <strcmp>
c0019546:	83 c4 10             	add    esp,0x10
c0019549:	85 c0                	test   eax,eax
c001954b:	74 2a                	je     c0019577 <CPU::detectFeatures()+0x207>
c001954d:	52                   	push   edx
c001954e:	52                   	push   edx
c001954f:	68 78 c1 02 c0       	push   0xc002c178
c0019554:	57                   	push   edi
c0019555:	e8 76 73 fe ff       	call   c00008d0 <strcmp>
c001955a:	83 c4 10             	add    esp,0x10
c001955d:	85 c0                	test   eax,eax
c001955f:	74 16                	je     c0019577 <CPU::detectFeatures()+0x207>
c0019561:	50                   	push   eax
c0019562:	50                   	push   eax
c0019563:	68 85 c1 02 c0       	push   0xc002c185
c0019568:	57                   	push   edi
c0019569:	e8 62 73 fe ff       	call   c00008d0 <strcmp>
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	85 c0                	test   eax,eax
c0019573:	74 48                	je     c00195bd <CPU::detectFeatures()+0x24d>
c0019575:	eb 0f                	jmp    c0019586 <CPU::detectFeatures()+0x216>
c0019577:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019581:	e9 c1 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019586:	50                   	push   eax
c0019587:	50                   	push   eax
c0019588:	68 92 c1 02 c0       	push   0xc002c192
c001958d:	57                   	push   edi
c001958e:	e8 3d 73 fe ff       	call   c00008d0 <strcmp>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	85 c0                	test   eax,eax
c0019598:	74 23                	je     c00195bd <CPU::detectFeatures()+0x24d>
c001959a:	50                   	push   eax
c001959b:	50                   	push   eax
c001959c:	68 9f c1 02 c0       	push   0xc002c19f
c00195a1:	57                   	push   edi
c00195a2:	e8 29 73 fe ff       	call   c00008d0 <strcmp>
c00195a7:	83 c4 10             	add    esp,0x10
c00195aa:	85 c0                	test   eax,eax
c00195ac:	75 1e                	jne    c00195cc <CPU::detectFeatures()+0x25c>
c00195ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195b8:	e9 8a 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c00195bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195c7:	e9 7b 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c00195cc:	50                   	push   eax
c00195cd:	50                   	push   eax
c00195ce:	68 ac c1 02 c0       	push   0xc002c1ac
c00195d3:	57                   	push   edi
c00195d4:	e8 f7 72 fe ff       	call   c00008d0 <strcmp>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	85 c0                	test   eax,eax
c00195de:	75 0f                	jne    c00195ef <CPU::detectFeatures()+0x27f>
c00195e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195ea:	e9 58 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c00195ef:	50                   	push   eax
c00195f0:	50                   	push   eax
c00195f1:	68 6b c1 02 c0       	push   0xc002c16b
c00195f6:	57                   	push   edi
c00195f7:	e8 d4 72 fe ff       	call   c00008d0 <strcmp>
c00195fc:	83 c4 10             	add    esp,0x10
c00195ff:	85 c0                	test   eax,eax
c0019601:	75 0f                	jne    c0019612 <CPU::detectFeatures()+0x2a2>
c0019603:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001960d:	e9 35 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019612:	50                   	push   eax
c0019613:	50                   	push   eax
c0019614:	68 b9 c1 02 c0       	push   0xc002c1b9
c0019619:	57                   	push   edi
c001961a:	e8 b1 72 fe ff       	call   c00008d0 <strcmp>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	85 c0                	test   eax,eax
c0019624:	75 0f                	jne    c0019635 <CPU::detectFeatures()+0x2c5>
c0019626:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019630:	e9 12 01 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019635:	51                   	push   ecx
c0019636:	51                   	push   ecx
c0019637:	68 c6 c1 02 c0       	push   0xc002c1c6
c001963c:	57                   	push   edi
c001963d:	e8 8e 72 fe ff       	call   c00008d0 <strcmp>
c0019642:	83 c4 10             	add    esp,0x10
c0019645:	85 c0                	test   eax,eax
c0019647:	75 0f                	jne    c0019658 <CPU::detectFeatures()+0x2e8>
c0019649:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019653:	e9 ef 00 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019658:	52                   	push   edx
c0019659:	52                   	push   edx
c001965a:	68 d3 c1 02 c0       	push   0xc002c1d3
c001965f:	57                   	push   edi
c0019660:	e8 6b 72 fe ff       	call   c00008d0 <strcmp>
c0019665:	83 c4 10             	add    esp,0x10
c0019668:	85 c0                	test   eax,eax
c001966a:	75 0f                	jne    c001967b <CPU::detectFeatures()+0x30b>
c001966c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019676:	e9 cc 00 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c001967b:	50                   	push   eax
c001967c:	50                   	push   eax
c001967d:	68 e0 c1 02 c0       	push   0xc002c1e0
c0019682:	57                   	push   edi
c0019683:	e8 48 72 fe ff       	call   c00008d0 <strcmp>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	85 c0                	test   eax,eax
c001968d:	75 0f                	jne    c001969e <CPU::detectFeatures()+0x32e>
c001968f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019699:	e9 a9 00 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c001969e:	50                   	push   eax
c001969f:	50                   	push   eax
c00196a0:	68 ed c1 02 c0       	push   0xc002c1ed
c00196a5:	57                   	push   edi
c00196a6:	e8 25 72 fe ff       	call   c00008d0 <strcmp>
c00196ab:	83 c4 10             	add    esp,0x10
c00196ae:	85 c0                	test   eax,eax
c00196b0:	75 0f                	jne    c00196c1 <CPU::detectFeatures()+0x351>
c00196b2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196bc:	e9 86 00 00 00       	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c00196c1:	50                   	push   eax
c00196c2:	50                   	push   eax
c00196c3:	68 fa c1 02 c0       	push   0xc002c1fa
c00196c8:	57                   	push   edi
c00196c9:	e8 02 72 fe ff       	call   c00008d0 <strcmp>
c00196ce:	83 c4 10             	add    esp,0x10
c00196d1:	85 c0                	test   eax,eax
c00196d3:	75 0c                	jne    c00196e1 <CPU::detectFeatures()+0x371>
c00196d5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196df:	eb 66                	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c00196e1:	50                   	push   eax
c00196e2:	50                   	push   eax
c00196e3:	68 07 c2 02 c0       	push   0xc002c207
c00196e8:	57                   	push   edi
c00196e9:	e8 e2 71 fe ff       	call   c00008d0 <strcmp>
c00196ee:	83 c4 10             	add    esp,0x10
c00196f1:	85 c0                	test   eax,eax
c00196f3:	75 0c                	jne    c0019701 <CPU::detectFeatures()+0x391>
c00196f5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00196ff:	eb 46                	jmp    c0019747 <CPU::detectFeatures()+0x3d7>
c0019701:	50                   	push   eax
c0019702:	50                   	push   eax
c0019703:	68 14 c2 02 c0       	push   0xc002c214
c0019708:	57                   	push   edi
c0019709:	e8 c2 71 fe ff       	call   c00008d0 <strcmp>
c001970e:	83 c4 10             	add    esp,0x10
c0019711:	85 c0                	test   eax,eax
c0019713:	74 e0                	je     c00196f5 <CPU::detectFeatures()+0x385>
c0019715:	50                   	push   eax
c0019716:	50                   	push   eax
c0019717:	68 21 c2 02 c0       	push   0xc002c221
c001971c:	57                   	push   edi
c001971d:	e8 ae 71 fe ff       	call   c00008d0 <strcmp>
c0019722:	83 c4 10             	add    esp,0x10
c0019725:	85 c0                	test   eax,eax
c0019727:	74 cc                	je     c00196f5 <CPU::detectFeatures()+0x385>
c0019729:	51                   	push   ecx
c001972a:	51                   	push   ecx
c001972b:	68 2e c2 02 c0       	push   0xc002c22e
c0019730:	57                   	push   edi
c0019731:	e8 9a 71 fe ff       	call   c00008d0 <strcmp>
c0019736:	83 c4 10             	add    esp,0x10
c0019739:	85 c0                	test   eax,eax
c001973b:	74 b8                	je     c00196f5 <CPU::detectFeatures()+0x385>
c001973d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019747:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001974c:	0f 86 be 00 00 00    	jbe    c0019810 <CPU::detectFeatures()+0x4a0>
c0019752:	83 ec 0c             	sub    esp,0xc
c0019755:	68 80 00 00 00       	push   0x80
c001975a:	e8 ab f8 ff ff       	call   c001900a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001975f:	83 e0 01             	and    eax,0x1
c0019762:	c1 e0 06             	shl    eax,0x6
c0019765:	88 c2                	mov    dl,al
c0019767:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001976d:	83 e0 bf             	and    eax,0xffffffbf
c0019770:	09 d0                	or     eax,edx
c0019772:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019778:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001977f:	e8 86 f8 ff ff       	call   c001900a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019784:	83 e0 01             	and    eax,0x1
c0019787:	c1 e0 04             	shl    eax,0x4
c001978a:	88 c2                	mov    dl,al
c001978c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019792:	83 e0 ef             	and    eax,0xffffffef
c0019795:	09 d0                	or     eax,edx
c0019797:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001979d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197a4:	e8 61 f8 ff ff       	call   c001900a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197a9:	c1 e0 07             	shl    eax,0x7
c00197ac:	88 c2                	mov    dl,al
c00197ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197b4:	83 e0 7f             	and    eax,0x7f
c00197b7:	09 d0                	or     eax,edx
c00197b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197c6:	e8 6d f8 ff ff       	call   c0019038 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197cb:	83 e0 01             	and    eax,0x1
c00197ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197db:	83 e0 f7             	and    eax,0xfffffff7
c00197de:	09 d0                	or     eax,edx
c00197e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197e6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197ed:	e8 46 f8 ff ff       	call   c0019038 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197f2:	83 c4 10             	add    esp,0x10
c00197f5:	83 e0 01             	and    eax,0x1
c00197f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00197ff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019805:	83 e0 fb             	and    eax,0xfffffffb
c0019808:	09 d0                	or     eax,edx
c001980a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019810:	83 ec 0c             	sub    esp,0xc
c0019813:	56                   	push   esi
c0019814:	55                   	push   ebp
c0019815:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019819:	57                   	push   edi
c001981a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001981e:	50                   	push   eax
c001981f:	6a 01                	push   0x1
c0019821:	e8 04 f7 ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019826:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001982a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019830:	88 ca                	mov    dl,cl
c0019832:	83 e0 f0             	and    eax,0xfffffff0
c0019835:	83 e2 0f             	and    edx,0xf
c0019838:	09 d0                	or     eax,edx
c001983a:	88 ca                	mov    dl,cl
c001983c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019842:	c0 ea 04             	shr    dl,0x4
c0019845:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019849:	0f b6 c2             	movzx  eax,dl
c001984c:	83 c4 20             	add    esp,0x20
c001984f:	c1 e0 06             	shl    eax,0x6
c0019852:	89 c5                	mov    ebp,eax
c0019854:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001985a:	66 25 3f c0          	and    ax,0xc03f
c001985e:	09 e8                	or     eax,ebp
c0019860:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019867:	89 c8                	mov    eax,ecx
c0019869:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001986f:	c1 e8 08             	shr    eax,0x8
c0019872:	83 e2 3f             	and    edx,0x3f
c0019875:	83 e0 0f             	and    eax,0xf
c0019878:	89 c5                	mov    ebp,eax
c001987a:	c1 e5 06             	shl    ebp,0x6
c001987d:	09 d5                	or     ebp,edx
c001987f:	89 ea                	mov    edx,ebp
c0019881:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019887:	88 c2                	mov    dl,al
c0019889:	c0 ea 02             	shr    dl,0x2
c001988c:	89 d5                	mov    ebp,edx
c001988e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019894:	83 e2 c0             	and    edx,0xffffffc0
c0019897:	09 d5                	or     ebp,edx
c0019899:	89 ea                	mov    edx,ebp
c001989b:	89 cd                	mov    ebp,ecx
c001989d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198a3:	c1 ed 0c             	shr    ebp,0xc
c00198a6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00198ac:	83 e5 03             	and    ebp,0x3
c00198af:	83 e2 cf             	and    edx,0xffffffcf
c00198b2:	c1 e5 04             	shl    ebp,0x4
c00198b5:	09 d5                	or     ebp,edx
c00198b7:	3c 06                	cmp    al,0x6
c00198b9:	89 ea                	mov    edx,ebp
c00198bb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198c1:	74 04                	je     c00198c7 <CPU::detectFeatures()+0x557>
c00198c3:	3c 0f                	cmp    al,0xf
c00198c5:	75 5c                	jne    c0019923 <CPU::detectFeatures()+0x5b3>
c00198c7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198cb:	89 cd                	mov    ebp,ecx
c00198cd:	c1 ed 10             	shr    ebp,0x10
c00198d0:	c1 e5 04             	shl    ebp,0x4
c00198d3:	09 ea                	or     edx,ebp
c00198d5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198db:	0f b6 d2             	movzx  edx,dl
c00198de:	66 81 e5 3f c0       	and    bp,0xc03f
c00198e3:	c1 e2 06             	shl    edx,0x6
c00198e6:	09 ea                	or     edx,ebp
c00198e8:	3c 0f                	cmp    al,0xf
c00198ea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198f1:	75 30                	jne    c0019923 <CPU::detectFeatures()+0x5b3>
c00198f3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00198f9:	c1 e9 14             	shr    ecx,0x14
c00198fc:	83 e0 3f             	and    eax,0x3f
c00198ff:	83 c1 0f             	add    ecx,0xf
c0019902:	88 ca                	mov    dl,cl
c0019904:	c0 e9 02             	shr    cl,0x2
c0019907:	c1 e2 06             	shl    edx,0x6
c001990a:	09 d0                	or     eax,edx
c001990c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019912:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019918:	83 e0 c0             	and    eax,0xffffffc0
c001991b:	09 c1                	or     ecx,eax
c001991d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019923:	83 ec 0c             	sub    esp,0xc
c0019926:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001992d:	56                   	push   esi
c001992e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019932:	50                   	push   eax
c0019933:	57                   	push   edi
c0019934:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019938:	55                   	push   ebp
c0019939:	68 00 00 00 80       	push   0x80000000
c001993e:	e8 e7 f5 ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019943:	83 c4 20             	add    esp,0x20
c0019946:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001994e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019952:	76 1e                	jbe    c0019972 <CPU::detectFeatures()+0x602>
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	56                   	push   esi
c0019958:	50                   	push   eax
c0019959:	57                   	push   edi
c001995a:	55                   	push   ebp
c001995b:	68 01 00 00 80       	push   0x80000001
c0019960:	e8 c5 f5 ff ff       	call   c0018f2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019965:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001996f:	83 c4 20             	add    esp,0x20
c0019972:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019978:	83 f8 01             	cmp    eax,0x1
c001997b:	75 6f                	jne    c00199ec <CPU::detectFeatures()+0x67c>
c001997d:	51                   	push   ecx
c001997e:	51                   	push   ecx
c001997f:	68 3a c2 02 c0       	push   0xc002c23a
c0019984:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019988:	56                   	push   esi
c0019989:	e8 b6 6e fe ff       	call   c0000844 <strcpy>
c001998e:	5f                   	pop    edi
c001998f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019995:	5d                   	pop    ebp
c0019996:	66 c1 e8 06          	shr    ax,0x6
c001999a:	0f b6 c0             	movzx  eax,al
c001999d:	50                   	push   eax
c001999e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199a4:	c1 e8 0e             	shr    eax,0xe
c00199a7:	0f b6 c0             	movzx  eax,al
c00199aa:	50                   	push   eax
c00199ab:	e8 24 f2 ff ff       	call   c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199b0:	5a                   	pop    edx
c00199b1:	59                   	pop    ecx
c00199b2:	50                   	push   eax
c00199b3:	56                   	push   esi
c00199b4:	e8 cb 6f fe ff       	call   c0000984 <strcat>
c00199b9:	5f                   	pop    edi
c00199ba:	5d                   	pop    ebp
c00199bb:	56                   	push   esi
c00199bc:	53                   	push   ebx
c00199bd:	e8 28 ab ff ff       	call   c00144ea <Device::setName(char const*)>
c00199c2:	58                   	pop    eax
c00199c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199c9:	5a                   	pop    edx
c00199ca:	68 41 c2 02 c0       	push   0xc002c241
c00199cf:	50                   	push   eax
c00199d0:	e8 fb 6e fe ff       	call   c00008d0 <strcmp>
c00199d5:	83 c4 10             	add    esp,0x10
c00199d8:	85 c0                	test   eax,eax
c00199da:	0f 85 71 03 00 00    	jne    c0019d51 <CPU::detectFeatures()+0x9e1>
c00199e0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199e7:	e9 65 03 00 00       	jmp    c0019d51 <CPU::detectFeatures()+0x9e1>
c00199ec:	83 f8 02             	cmp    eax,0x2
c00199ef:	0f 85 b5 00 00 00    	jne    c0019aaa <CPU::detectFeatures()+0x73a>
c00199f5:	57                   	push   edi
c00199f6:	57                   	push   edi
c00199f7:	68 53 c2 02 c0       	push   0xc002c253
c00199fc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a00:	56                   	push   esi
c0019a01:	e8 3e 6e fe ff       	call   c0000844 <strcpy>
c0019a06:	5d                   	pop    ebp
c0019a07:	58                   	pop    eax
c0019a08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a0e:	66 c1 e8 06          	shr    ax,0x6
c0019a12:	0f b6 c0             	movzx  eax,al
c0019a15:	50                   	push   eax
c0019a16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a1c:	c1 e8 0e             	shr    eax,0xe
c0019a1f:	0f b6 c0             	movzx  eax,al
c0019a22:	50                   	push   eax
c0019a23:	e8 18 f0 ff ff       	call   c0018a40 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a28:	5a                   	pop    edx
c0019a29:	59                   	pop    ecx
c0019a2a:	50                   	push   eax
c0019a2b:	56                   	push   esi
c0019a2c:	e8 53 6f fe ff       	call   c0000984 <strcat>
c0019a31:	5f                   	pop    edi
c0019a32:	5d                   	pop    ebp
c0019a33:	56                   	push   esi
c0019a34:	53                   	push   ebx
c0019a35:	e8 b0 aa ff ff       	call   c00144ea <Device::setName(char const*)>
c0019a3a:	58                   	pop    eax
c0019a3b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a41:	5a                   	pop    edx
c0019a42:	68 58 c2 02 c0       	push   0xc002c258
c0019a47:	50                   	push   eax
c0019a48:	e8 83 6e fe ff       	call   c00008d0 <strcmp>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	85 c0                	test   eax,eax
c0019a52:	75 20                	jne    c0019a74 <CPU::detectFeatures()+0x704>
c0019a54:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c0019a5a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a60:	a8 01                	test   al,0x1
c0019a62:	74 10                	je     c0019a74 <CPU::detectFeatures()+0x704>
c0019a64:	83 e0 fe             	and    eax,0xfffffffe
c0019a67:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a6d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a7a:	c1 e8 0e             	shr    eax,0xe
c0019a7d:	3c 05                	cmp    al,0x5
c0019a7f:	0f 85 cc 02 00 00    	jne    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019a85:	56                   	push   esi
c0019a86:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a8c:	83 e0 0f             	and    eax,0xf
c0019a8f:	50                   	push   eax
c0019a90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a96:	66 c1 e8 06          	shr    ax,0x6
c0019a9a:	0f b6 c0             	movzx  eax,al
c0019a9d:	50                   	push   eax
c0019a9e:	6a 05                	push   0x5
c0019aa0:	e8 11 f4 ff ff       	call   c0018eb6 <CPU::AMD_K6_writeback(int, int, int)>
c0019aa5:	e9 1f 02 00 00       	jmp    c0019cc9 <CPU::detectFeatures()+0x959>
c0019aaa:	8d 50 fd             	lea    edx,[eax-0x3]
c0019aad:	83 fa 01             	cmp    edx,0x1
c0019ab0:	76 09                	jbe    c0019abb <CPU::detectFeatures()+0x74b>
c0019ab2:	83 f8 06             	cmp    eax,0x6
c0019ab5:	0f 85 91 01 00 00    	jne    c0019c4c <CPU::detectFeatures()+0x8dc>
c0019abb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ac1:	c1 ea 0e             	shr    edx,0xe
c0019ac4:	80 fa 05             	cmp    dl,0x5
c0019ac7:	75 7b                	jne    c0019b44 <CPU::detectFeatures()+0x7d4>
c0019ac9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019acf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ad4:	66 81 fa 00 01       	cmp    dx,0x100
c0019ad9:	75 0c                	jne    c0019ae7 <CPU::detectFeatures()+0x777>
c0019adb:	51                   	push   ecx
c0019adc:	51                   	push   ecx
c0019add:	68 5f c2 02 c0       	push   0xc002c25f
c0019ae2:	e9 dc 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019ae7:	66 81 fa 00 02       	cmp    dx,0x200
c0019aec:	75 0c                	jne    c0019afa <CPU::detectFeatures()+0x78a>
c0019aee:	52                   	push   edx
c0019aef:	52                   	push   edx
c0019af0:	68 72 c2 02 c0       	push   0xc002c272
c0019af5:	e9 c9 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019afa:	66 81 fa 40 02       	cmp    dx,0x240
c0019aff:	75 0c                	jne    c0019b0d <CPU::detectFeatures()+0x79d>
c0019b01:	50                   	push   eax
c0019b02:	50                   	push   eax
c0019b03:	68 84 c2 02 c0       	push   0xc002c284
c0019b08:	e9 b6 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b0d:	83 f8 06             	cmp    eax,0x6
c0019b10:	75 0c                	jne    c0019b1e <CPU::detectFeatures()+0x7ae>
c0019b12:	50                   	push   eax
c0019b13:	50                   	push   eax
c0019b14:	68 96 c2 02 c0       	push   0xc002c296
c0019b19:	e9 a5 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b1e:	83 f8 04             	cmp    eax,0x4
c0019b21:	75 0c                	jne    c0019b2f <CPU::detectFeatures()+0x7bf>
c0019b23:	50                   	push   eax
c0019b24:	50                   	push   eax
c0019b25:	68 a2 c2 02 c0       	push   0xc002c2a2
c0019b2a:	e9 94 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b2f:	83 f8 03             	cmp    eax,0x3
c0019b32:	0f 85 19 02 00 00    	jne    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019b38:	50                   	push   eax
c0019b39:	50                   	push   eax
c0019b3a:	68 aa c2 02 c0       	push   0xc002c2aa
c0019b3f:	e9 7f 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b44:	80 fa 06             	cmp    dl,0x6
c0019b47:	0f 85 db 00 00 00    	jne    c0019c28 <CPU::detectFeatures()+0x8b8>
c0019b4d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b53:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b58:	66 81 fa 80 01       	cmp    dx,0x180
c0019b5d:	75 0c                	jne    c0019b6b <CPU::detectFeatures()+0x7fb>
c0019b5f:	50                   	push   eax
c0019b60:	50                   	push   eax
c0019b61:	68 b5 c2 02 c0       	push   0xc002c2b5
c0019b66:	e9 58 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b6b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b71:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b76:	75 0c                	jne    c0019b84 <CPU::detectFeatures()+0x814>
c0019b78:	50                   	push   eax
c0019b79:	50                   	push   eax
c0019b7a:	68 c5 c2 02 c0       	push   0xc002c2c5
c0019b7f:	e9 3f 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b84:	66 81 fa 40 02       	cmp    dx,0x240
c0019b89:	75 0c                	jne    c0019b97 <CPU::detectFeatures()+0x827>
c0019b8b:	55                   	push   ebp
c0019b8c:	55                   	push   ebp
c0019b8d:	68 cc c2 02 c0       	push   0xc002c2cc
c0019b92:	e9 2c 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019b97:	66 81 fa 80 02       	cmp    dx,0x280
c0019b9c:	75 0c                	jne    c0019baa <CPU::detectFeatures()+0x83a>
c0019b9e:	57                   	push   edi
c0019b9f:	57                   	push   edi
c0019ba0:	68 d5 c2 02 c0       	push   0xc002c2d5
c0019ba5:	e9 19 01 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019baa:	66 81 fa 40 03       	cmp    dx,0x340
c0019baf:	74 ed                	je     c0019b9e <CPU::detectFeatures()+0x82e>
c0019bb1:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bb6:	75 0c                	jne    c0019bc4 <CPU::detectFeatures()+0x854>
c0019bb8:	56                   	push   esi
c0019bb9:	56                   	push   esi
c0019bba:	68 dc c2 02 c0       	push   0xc002c2dc
c0019bbf:	e9 ff 00 00 00       	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019bc4:	83 f8 06             	cmp    eax,0x6
c0019bc7:	0f 84 45 ff ff ff    	je     c0019b12 <CPU::detectFeatures()+0x7a2>
c0019bcd:	83 f8 04             	cmp    eax,0x4
c0019bd0:	0f 84 4d ff ff ff    	je     c0019b23 <CPU::detectFeatures()+0x7b3>
c0019bd6:	83 f8 03             	cmp    eax,0x3
c0019bd9:	0f 85 72 01 00 00    	jne    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019bdf:	51                   	push   ecx
c0019be0:	51                   	push   ecx
c0019be1:	68 e5 c2 02 c0       	push   0xc002c2e5
c0019be6:	53                   	push   ebx
c0019be7:	e8 fe a8 ff ff       	call   c00144ea <Device::setName(char const*)>
c0019bec:	b1 c1                	mov    cl,0xc1
c0019bee:	88 c8                	mov    al,cl
c0019bf0:	e6 22                	out    0x22,al
c0019bf2:	e4 23                	in     al,0x23
c0019bf4:	88 c2                	mov    dl,al
c0019bf6:	88 c8                	mov    al,cl
c0019bf8:	e6 22                	out    0x22,al
c0019bfa:	88 d0                	mov    al,dl
c0019bfc:	83 c8 10             	or     eax,0x10
c0019bff:	e6 23                	out    0x23,al
c0019c01:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c0b:	89 d0                	mov    eax,edx
c0019c0d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c13:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c17:	40                   	inc    eax
c0019c18:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c1e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c23:	e9 a1 00 00 00       	jmp    c0019cc9 <CPU::detectFeatures()+0x959>
c0019c28:	83 f8 06             	cmp    eax,0x6
c0019c2b:	0f 84 e1 fe ff ff    	je     c0019b12 <CPU::detectFeatures()+0x7a2>
c0019c31:	83 f8 04             	cmp    eax,0x4
c0019c34:	0f 84 e9 fe ff ff    	je     c0019b23 <CPU::detectFeatures()+0x7b3>
c0019c3a:	83 f8 03             	cmp    eax,0x3
c0019c3d:	0f 85 0e 01 00 00    	jne    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019c43:	52                   	push   edx
c0019c44:	52                   	push   edx
c0019c45:	68 f0 c2 02 c0       	push   0xc002c2f0
c0019c4a:	eb 77                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c4c:	83 f8 07             	cmp    eax,0x7
c0019c4f:	75 09                	jne    c0019c5a <CPU::detectFeatures()+0x8ea>
c0019c51:	50                   	push   eax
c0019c52:	50                   	push   eax
c0019c53:	68 fa c2 02 c0       	push   0xc002c2fa
c0019c58:	eb 69                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c5a:	83 f8 0a             	cmp    eax,0xa
c0019c5d:	75 09                	jne    c0019c68 <CPU::detectFeatures()+0x8f8>
c0019c5f:	50                   	push   eax
c0019c60:	50                   	push   eax
c0019c61:	68 05 c3 02 c0       	push   0xc002c305
c0019c66:	eb 5b                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c68:	83 f8 0b             	cmp    eax,0xb
c0019c6b:	75 09                	jne    c0019c76 <CPU::detectFeatures()+0x906>
c0019c6d:	50                   	push   eax
c0019c6e:	50                   	push   eax
c0019c6f:	68 0d c3 02 c0       	push   0xc002c30d
c0019c74:	eb 4d                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c76:	83 f8 08             	cmp    eax,0x8
c0019c79:	75 09                	jne    c0019c84 <CPU::detectFeatures()+0x914>
c0019c7b:	50                   	push   eax
c0019c7c:	50                   	push   eax
c0019c7d:	68 16 c3 02 c0       	push   0xc002c316
c0019c82:	eb 3f                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c84:	83 f8 09             	cmp    eax,0x9
c0019c87:	75 09                	jne    c0019c92 <CPU::detectFeatures()+0x922>
c0019c89:	50                   	push   eax
c0019c8a:	50                   	push   eax
c0019c8b:	68 1e c3 02 c0       	push   0xc002c31e
c0019c90:	eb 31                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019c92:	83 f8 05             	cmp    eax,0x5
c0019c95:	75 09                	jne    c0019ca0 <CPU::detectFeatures()+0x930>
c0019c97:	50                   	push   eax
c0019c98:	50                   	push   eax
c0019c99:	68 26 c3 02 c0       	push   0xc002c326
c0019c9e:	eb 23                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019ca0:	83 f8 0c             	cmp    eax,0xc
c0019ca3:	75 09                	jne    c0019cae <CPU::detectFeatures()+0x93e>
c0019ca5:	55                   	push   ebp
c0019ca6:	55                   	push   ebp
c0019ca7:	68 34 c3 02 c0       	push   0xc002c334
c0019cac:	eb 15                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019cae:	83 f8 0d             	cmp    eax,0xd
c0019cb1:	75 09                	jne    c0019cbc <CPU::detectFeatures()+0x94c>
c0019cb3:	57                   	push   edi
c0019cb4:	57                   	push   edi
c0019cb5:	68 3f c3 02 c0       	push   0xc002c33f
c0019cba:	eb 07                	jmp    c0019cc3 <CPU::detectFeatures()+0x953>
c0019cbc:	56                   	push   esi
c0019cbd:	56                   	push   esi
c0019cbe:	68 53 c3 02 c0       	push   0xc002c353
c0019cc3:	53                   	push   ebx
c0019cc4:	e8 21 a8 ff ff       	call   c00144ea <Device::setName(char const*)>
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	e9 80 00 00 00       	jmp    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019cd1:	51                   	push   ecx
c0019cd2:	51                   	push   ecx
c0019cd3:	68 9f c1 02 c0       	push   0xc002c19f
c0019cd8:	57                   	push   edi
c0019cd9:	e8 66 6b fe ff       	call   c0000844 <strcpy>
c0019cde:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ce8:	e8 c1 65 fe ff       	call   c00002ae <is486>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	85 c0                	test   eax,eax
c0019cf2:	74 2b                	je     c0019d1f <CPU::detectFeatures()+0x9af>
c0019cf4:	52                   	push   edx
c0019cf5:	52                   	push   edx
c0019cf6:	68 5f c3 02 c0       	push   0xc002c35f
c0019cfb:	53                   	push   ebx
c0019cfc:	e8 e9 a7 ff ff       	call   c00144ea <Device::setName(char const*)>
c0019d01:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d08:	0f 20 c0             	mov    eax,cr0
c0019d0b:	83 e0 14             	and    eax,0x14
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	83 f8 04             	cmp    eax,0x4
c0019d14:	75 1f                	jne    c0019d35 <CPU::detectFeatures()+0x9c5>
c0019d16:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d1d:	eb 32                	jmp    c0019d51 <CPU::detectFeatures()+0x9e1>
c0019d1f:	50                   	push   eax
c0019d20:	50                   	push   eax
c0019d21:	68 6a c3 02 c0       	push   0xc002c36a
c0019d26:	53                   	push   ebx
c0019d27:	e8 be a7 ff ff       	call   c00144ea <Device::setName(char const*)>
c0019d2c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d33:	eb d3                	jmp    c0019d08 <CPU::detectFeatures()+0x998>
c0019d35:	e8 4f 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d3a:	83 e0 01             	and    eax,0x1
c0019d3d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d40:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d46:	83 e0 fd             	and    eax,0xfffffffd
c0019d49:	09 d0                	or     eax,edx
c0019d4b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d51:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d58:	83 c4 4c             	add    esp,0x4c
c0019d5b:	5b                   	pop    ebx
c0019d5c:	5e                   	pop    esi
c0019d5d:	5f                   	pop    edi
c0019d5e:	5d                   	pop    ebp
c0019d5f:	c3                   	ret    

c0019d60 <CPU::setupSMEP()>:
c0019d60:	0f 20 e0             	mov    eax,cr4
c0019d63:	0d 00 00 10 00       	or     eax,0x100000
c0019d68:	0f 22 e0             	mov    cr4,eax
c0019d6b:	c3                   	ret    

c0019d6c <CPU::setupUMIP()>:
c0019d6c:	0f 20 e0             	mov    eax,cr4
c0019d6f:	80 cc 08             	or     ah,0x8
c0019d72:	0f 22 e0             	mov    cr4,eax
c0019d75:	c3                   	ret    

c0019d76 <CPU::setupTSC()>:
c0019d76:	0f 20 e0             	mov    eax,cr4
c0019d79:	83 c8 04             	or     eax,0x4
c0019d7c:	0f 22 e0             	mov    cr4,eax
c0019d7f:	c3                   	ret    

c0019d80 <CPU::setupLargePages()>:
c0019d80:	0f 20 e0             	mov    eax,cr4
c0019d83:	83 c8 10             	or     eax,0x10
c0019d86:	0f 22 e0             	mov    cr4,eax
c0019d89:	c3                   	ret    

c0019d8a <CPU::setupPAT()>:
c0019d8a:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0019d8f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d96:	74 2c                	je     c0019dc4 <CPU::setupPAT()+0x3a>
c0019d98:	53                   	push   ebx
c0019d99:	83 ec 10             	sub    esp,0x10
c0019d9c:	68 77 02 00 00       	push   0x277
c0019da1:	50                   	push   eax
c0019da2:	e8 1b 51 ff ff       	call   c000eec2 <Computer::rdmsr(unsigned int)>
c0019da7:	83 e2 f8             	and    edx,0xfffffff8
c0019daa:	83 ca 01             	or     edx,0x1
c0019dad:	52                   	push   edx
c0019dae:	50                   	push   eax
c0019daf:	68 77 02 00 00       	push   0x277
c0019db4:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0019dba:	e8 2f 51 ff ff       	call   c000eeee <Computer::wrmsr(unsigned int, unsigned long long)>
c0019dbf:	83 c4 28             	add    esp,0x28
c0019dc2:	5b                   	pop    ebx
c0019dc3:	c3                   	ret    
c0019dc4:	c3                   	ret    
c0019dc5:	90                   	nop

c0019dc6 <CPU::setupMTRR()>:
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop

c0019dc8 <CPU::setupGlobalPages()>:
c0019dc8:	0f 20 e0             	mov    eax,cr4
c0019dcb:	0c 80                	or     al,0x80
c0019dcd:	0f 22 e0             	mov    cr4,eax
c0019dd0:	c3                   	ret    
c0019dd1:	90                   	nop

c0019dd2 <CPU::allowUsermodeDataAccess()>:
c0019dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ddd:	74 03                	je     c0019de2 <CPU::allowUsermodeDataAccess()+0x10>
c0019ddf:	0f 01 cb             	stac   
c0019de2:	c3                   	ret    
c0019de3:	90                   	nop

c0019de4 <CPU::prohibitUsermodeDataAccess()>:
c0019de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019def:	74 03                	je     c0019df4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019df1:	0f 01 ca             	clac   
c0019df4:	c3                   	ret    
c0019df5:	90                   	nop

c0019df6 <CPU::setupSMAP()>:
c0019df6:	0f 20 e0             	mov    eax,cr4
c0019df9:	0d 00 00 20 00       	or     eax,0x200000
c0019dfe:	0f 22 e0             	mov    cr4,eax
c0019e01:	eb e1                	jmp    c0019de4 <CPU::prohibitUsermodeDataAccess()>
c0019e03:	90                   	nop

c0019e04 <CPU::setupFeatures()>:
c0019e04:	83 ec 0c             	sub    esp,0xc
c0019e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e0b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e12:	74 07                	je     c0019e1b <CPU::setupFeatures()+0x17>
c0019e14:	52                   	push   edx
c0019e15:	e8 46 ff ff ff       	call   c0019d60 <CPU::setupSMEP()>
c0019e1a:	58                   	pop    eax
c0019e1b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e22:	74 07                	je     c0019e2b <CPU::setupFeatures()+0x27>
c0019e24:	52                   	push   edx
c0019e25:	e8 cc ff ff ff       	call   c0019df6 <CPU::setupSMAP()>
c0019e2a:	58                   	pop    eax
c0019e2b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e32:	74 07                	je     c0019e3b <CPU::setupFeatures()+0x37>
c0019e34:	52                   	push   edx
c0019e35:	e8 32 ff ff ff       	call   c0019d6c <CPU::setupUMIP()>
c0019e3a:	58                   	pop    eax
c0019e3b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e42:	74 07                	je     c0019e4b <CPU::setupFeatures()+0x47>
c0019e44:	52                   	push   edx
c0019e45:	e8 2c ff ff ff       	call   c0019d76 <CPU::setupTSC()>
c0019e4a:	58                   	pop    eax
c0019e4b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e52:	74 07                	je     c0019e5b <CPU::setupFeatures()+0x57>
c0019e54:	52                   	push   edx
c0019e55:	e8 26 ff ff ff       	call   c0019d80 <CPU::setupLargePages()>
c0019e5a:	59                   	pop    ecx
c0019e5b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e62:	74 07                	je     c0019e6b <CPU::setupFeatures()+0x67>
c0019e64:	52                   	push   edx
c0019e65:	e8 5e ff ff ff       	call   c0019dc8 <CPU::setupGlobalPages()>
c0019e6a:	58                   	pop    eax
c0019e6b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e72:	74 0c                	je     c0019e80 <CPU::setupFeatures()+0x7c>
c0019e74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	e9 0a ff ff ff       	jmp    c0019d8a <CPU::setupPAT()>
c0019e80:	83 c4 0c             	add    esp,0xc
c0019e83:	c3                   	ret    

c0019e84 <CPU::open(int, int, void*)>:
c0019e84:	57                   	push   edi
c0019e85:	56                   	push   esi
c0019e86:	53                   	push   ebx
c0019e87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e8f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e95:	83 ec 0c             	sub    esp,0xc
c0019e98:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e9e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ea4:	50                   	push   eax
c0019ea5:	e8 04 53 ff ff       	call   c000f1ae <GDT::setup()>
c0019eaa:	83 c4 0c             	add    esp,0xc
c0019ead:	6a 00                	push   0x0
c0019eaf:	68 ef be ad de       	push   0xdeadbeef
c0019eb4:	57                   	push   edi
c0019eb5:	e8 84 75 ff ff       	call   c001143e <TSS::setup(unsigned long, unsigned long)>
c0019eba:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ebd:	e8 5c 75 ff ff       	call   c001141e <TSS::flush()>
c0019ec2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ec8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ecb:	e8 42 55 ff ff       	call   c000f412 <IDT::setup()>
c0019ed0:	b8 00 04 00 00       	mov    eax,0x400
c0019ed5:	0f 23 f8             	mov    db7,eax
c0019ed8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ee2:	e8 a1 60 ff ff       	call   c000ff88 <Phys::allocatePage()>
c0019ee7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019eed:	89 30                	mov    DWORD PTR [eax],esi
c0019eef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ef5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ef8:	58                   	pop    eax
c0019ef9:	5a                   	pop    edx
c0019efa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f04:	e8 d5 86 ff ff       	call   c00125de <VAS::setCPUSpecific(unsigned long)>
c0019f09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f0c:	e8 5f f4 ff ff       	call   c0019370 <CPU::detectFeatures()>
c0019f11:	e8 2b ba ff ff       	call   c0015941 <setupInterruptController()>
c0019f16:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f1c:	a1 40 ee 02 c0       	mov    eax,ds:0xc002ee40
c0019f21:	83 e0 10             	and    eax,0x10
c0019f24:	83 f8 01             	cmp    eax,0x1
c0019f27:	19 c0                	sbb    eax,eax
c0019f29:	83 e0 46             	and    eax,0x46
c0019f2c:	83 c0 1e             	add    eax,0x1e
c0019f2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f32:	e8 62 d0 ff ff       	call   c0016f99 <setupTimer(int)>
c0019f37:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f40:	e8 bf fe ff ff       	call   c0019e04 <CPU::setupFeatures()>
c0019f45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f48:	e8 a7 f1 ff ff       	call   c00190f4 <CPU::displayFeatures()>
c0019f4d:	83 c4 10             	add    esp,0x10
c0019f50:	31 c0                	xor    eax,eax
c0019f52:	5b                   	pop    ebx
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	c3                   	ret    

c0019f56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f56:	57                   	push   edi
c0019f57:	56                   	push   esi
c0019f58:	53                   	push   ebx
c0019f59:	51                   	push   ecx
c0019f5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f5e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f61:	0f 02 c0             	lar    eax,ax
c0019f64:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f67:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f6b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f6e:	88 ca                	mov    dl,cl
c0019f70:	c0 ea 06             	shr    dl,0x6
c0019f73:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f77:	89 ca                	mov    edx,ecx
c0019f79:	66 c1 ea 03          	shr    dx,0x3
c0019f7d:	83 e2 07             	and    edx,0x7
c0019f80:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f85:	88 17                	mov    BYTE PTR [edi],dl
c0019f87:	0f 84 a6 01 00 00    	je     c001a133 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f8d:	83 e1 07             	and    ecx,0x7
c0019f90:	80 f9 04             	cmp    cl,0x4
c0019f93:	0f 84 98 00 00 00    	je     c001a031 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f99:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f9e:	0f 95 c0             	setne  al
c0019fa1:	80 f9 05             	cmp    cl,0x5
c0019fa4:	0f 95 c2             	setne  dl
c0019fa7:	08 c2                	or     dl,al
c0019fa9:	74 79                	je     c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fab:	84 c9                	test   cl,cl
c0019fad:	75 05                	jne    c0019fb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019faf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fb2:	eb 3c                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb4:	80 f9 01             	cmp    cl,0x1
c0019fb7:	75 05                	jne    c0019fbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fb9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fbc:	eb 32                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fbe:	80 f9 02             	cmp    cl,0x2
c0019fc1:	75 05                	jne    c0019fc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fc3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fc6:	eb 28                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc8:	31 c0                	xor    eax,eax
c0019fca:	80 f9 03             	cmp    cl,0x3
c0019fcd:	75 05                	jne    c0019fd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fcf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fd2:	eb 1c                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd4:	80 f9 05             	cmp    cl,0x5
c0019fd7:	75 05                	jne    c0019fde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fd9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fdc:	eb 12                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fde:	80 f9 06             	cmp    cl,0x6
c0019fe1:	75 05                	jne    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fe3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fe6:	eb 08                	jmp    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe8:	80 f9 07             	cmp    cl,0x7
c0019feb:	75 03                	jne    c0019ff0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ff0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ff5:	75 10                	jne    c001a007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ff7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ffb:	b9 03 00 00 00       	mov    ecx,0x3
c001a000:	01 d0                	add    eax,edx
c001a002:	e9 37 01 00 00       	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a007:	b9 02 00 00 00       	mov    ecx,0x2
c001a00c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a011:	0f 85 27 01 00 00    	jne    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a017:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a01a:	b9 06 00 00 00       	mov    ecx,0x6
c001a01f:	e9 1a 01 00 00       	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a024:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a027:	b9 06 00 00 00       	mov    ecx,0x6
c001a02c:	e9 0f 01 00 00       	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a031:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a034:	88 ca                	mov    dl,cl
c001a036:	c0 ea 06             	shr    dl,0x6
c001a039:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a03d:	89 ca                	mov    edx,ecx
c001a03f:	66 c1 ea 03          	shr    dx,0x3
c001a043:	83 e2 07             	and    edx,0x7
c001a046:	80 e1 07             	and    cl,0x7
c001a049:	75 05                	jne    c001a050 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a04b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a04e:	eb 4c                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a050:	80 f9 01             	cmp    cl,0x1
c001a053:	75 05                	jne    c001a05a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a055:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a058:	eb 42                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a05a:	80 f9 02             	cmp    cl,0x2
c001a05d:	75 05                	jne    c001a064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a05f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a062:	eb 38                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a064:	80 f9 03             	cmp    cl,0x3
c001a067:	75 05                	jne    c001a06e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a069:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a06c:	eb 2e                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a06e:	80 f9 04             	cmp    cl,0x4
c001a071:	75 12                	jne    c001a085 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a073:	f6 c4 60             	test   ah,0x60
c001a076:	75 08                	jne    c001a080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a078:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a07b:	8d 78 14             	lea    edi,[eax+0x14]
c001a07e:	eb 1c                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a080:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a083:	eb 17                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a085:	80 f9 05             	cmp    cl,0x5
c001a088:	75 05                	jne    c001a08f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a08a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a08d:	eb 0d                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a08f:	80 f9 06             	cmp    cl,0x6
c001a092:	75 05                	jne    c001a099 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a094:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a097:	eb 03                	jmp    c001a09c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a099:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a09c:	84 d2                	test   dl,dl
c001a09e:	75 05                	jne    c001a0a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0a0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0a3:	eb 3c                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a5:	80 fa 01             	cmp    dl,0x1
c001a0a8:	75 05                	jne    c001a0af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0aa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0ad:	eb 32                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0af:	80 fa 02             	cmp    dl,0x2
c001a0b2:	75 05                	jne    c001a0b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0b4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0b7:	eb 28                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b9:	80 fa 03             	cmp    dl,0x3
c001a0bc:	75 05                	jne    c001a0c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0be:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0c1:	eb 1e                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c3:	31 c0                	xor    eax,eax
c001a0c5:	80 fa 04             	cmp    dl,0x4
c001a0c8:	74 17                	je     c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ca:	80 fa 05             	cmp    dl,0x5
c001a0cd:	75 05                	jne    c001a0d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0cf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0d2:	eb 0d                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d4:	80 fa 06             	cmp    dl,0x6
c001a0d7:	75 05                	jne    c001a0de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0dc:	eb 03                	jmp    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0e1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0e6:	0f 94 c2             	sete   dl
c001a0e9:	80 f9 05             	cmp    cl,0x5
c001a0ec:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0f0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0f5:	d3 e0                	shl    eax,cl
c001a0f7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0fb:	74 0a                	je     c001a107 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0fd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a100:	b9 07 00 00 00       	mov    ecx,0x7
c001a105:	eb 37                	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a107:	01 f8                	add    eax,edi
c001a109:	b9 03 00 00 00       	mov    ecx,0x3
c001a10e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a113:	74 2b                	je     c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a115:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a11a:	75 0d                	jne    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a11c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a120:	01 c8                	add    eax,ecx
c001a122:	b9 04 00 00 00       	mov    ecx,0x4
c001a127:	eb 17                	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a129:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a12c:	b9 07 00 00 00       	mov    ecx,0x7
c001a131:	eb 0d                	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a133:	b9 02 00 00 00       	mov    ecx,0x2
c001a138:	b2 01                	mov    dl,0x1
c001a13a:	31 c0                	xor    eax,eax
c001a13c:	eb 02                	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a13e:	31 d2                	xor    edx,edx
c001a140:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a144:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a146:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a14a:	88 11                	mov    BYTE PTR [ecx],dl
c001a14c:	5a                   	pop    edx
c001a14d:	5b                   	pop    ebx
c001a14e:	5e                   	pop    esi
c001a14f:	5f                   	pop    edi
c001a150:	c3                   	ret    

c001a151 <Krnl::smpEntry()>:
c001a151:	eb fe                	jmp    c001a151 <Krnl::smpEntry()>

c001a153 <Krnl::startCPU(int)>:
c001a153:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001a158:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a15f:	0f 84 36 01 00 00    	je     c001a29b <Krnl::startCPU(int)+0x148>
c001a165:	53                   	push   ebx
c001a166:	83 ec 10             	sub    esp,0x10
c001a169:	fa                   	cli    
c001a16a:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001a170:	6a 1b                	push   0x1b
c001a172:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001a178:	e8 45 4d ff ff       	call   c000eec2 <Computer::rdmsr(unsigned int)>
c001a17d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a182:	89 c3                	mov    ebx,eax
c001a184:	58                   	pop    eax
c001a185:	5a                   	pop    edx
c001a186:	53                   	push   ebx
c001a187:	68 a4 c3 02 c0       	push   0xc002c3a4
c001a18c:	e8 42 8d ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001a191:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a19b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a19f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1a9:	c1 e0 18             	shl    eax,0x18
c001a1ac:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1b2:	83 c4 10             	add    esp,0x10
c001a1b5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1bb:	09 c2                	or     edx,eax
c001a1bd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1c3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1c9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1cf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1d5:	80 cd c5             	or     ch,0xc5
c001a1d8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1de:	f3 90                	pause  
c001a1e0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1e2:	0f ba e1 0c          	bt     ecx,0xc
c001a1e6:	72 f6                	jb     c001a1de <Krnl::startCPU(int)+0x8b>
c001a1e8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1ee:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1f4:	09 c1                	or     ecx,eax
c001a1f6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1fc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a202:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a208:	80 cd 85             	or     ch,0x85
c001a20b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a211:	f3 90                	pause  
c001a213:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a215:	0f ba e1 0c          	bt     ecx,0xc
c001a219:	72 f6                	jb     c001a211 <Krnl::startCPU(int)+0xbe>
c001a21b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a225:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a22b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a231:	09 c1                	or     ecx,eax
c001a233:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a239:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a23f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a245:	81 c9 02 06 00 00    	or     ecx,0x602
c001a24b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a251:	f3 90                	pause  
c001a253:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a255:	0f ba e1 0c          	bt     ecx,0xc
c001a259:	72 f6                	jb     c001a251 <Krnl::startCPU(int)+0xfe>
c001a25b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a265:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a26b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a271:	09 c8                	or     eax,ecx
c001a273:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a279:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a27f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a284:	0d 02 06 00 00       	or     eax,0x602
c001a289:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a28f:	f3 90                	pause  
c001a291:	8b 02                	mov    eax,DWORD PTR [edx]
c001a293:	0f ba e0 0c          	bt     eax,0xc
c001a297:	72 f6                	jb     c001a28f <Krnl::startCPU(int)+0x13c>
c001a299:	eb fe                	jmp    c001a299 <Krnl::startCPU(int)+0x146>
c001a29b:	c3                   	ret    

c001a29c <Krnl::startCPUs()>:
c001a29c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001a2a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2a7:	88 c2                	mov    dl,al
c001a2a9:	83 e2 0a             	and    edx,0xa
c001a2ac:	80 fa 0a             	cmp    dl,0xa
c001a2af:	75 09                	jne    c001a2ba <Krnl::startCPUs()+0x1e>
c001a2b1:	a8 01                	test   al,0x1
c001a2b3:	74 05                	je     c001a2ba <Krnl::startCPUs()+0x1e>
c001a2b5:	e9 e1 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2ba:	c3                   	ret    
c001a2bb:	90                   	nop

c001a2bc <EnvVarContainer::getEnv(char const*)>:
c001a2bc:	57                   	push   edi
c001a2bd:	56                   	push   esi
c001a2be:	53                   	push   ebx
c001a2bf:	31 db                	xor    ebx,ebx
c001a2c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2c5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2c7:	7e 2b                	jle    c001a2f4 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2c9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2d0:	50                   	push   eax
c001a2d1:	50                   	push   eax
c001a2d2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2dc:	e8 ef 65 fe ff       	call   c00008d0 <strcmp>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	85 c0                	test   eax,eax
c001a2e6:	75 09                	jne    c001a2f1 <EnvVarContainer::getEnv(char const*)+0x35>
c001a2e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2eb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2ef:	eb 05                	jmp    c001a2f6 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2f1:	43                   	inc    ebx
c001a2f2:	eb d1                	jmp    c001a2c5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a2f4:	31 c0                	xor    eax,eax
c001a2f6:	5b                   	pop    ebx
c001a2f7:	5e                   	pop    esi
c001a2f8:	5f                   	pop    edi
c001a2f9:	c3                   	ret    

c001a2fa <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2fa:	57                   	push   edi
c001a2fb:	56                   	push   esi
c001a2fc:	53                   	push   ebx
c001a2fd:	83 ec 1c             	sub    esp,0x1c
c001a300:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a304:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a308:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a30c:	57                   	push   edi
c001a30d:	e8 92 64 fe ff       	call   c00007a4 <strlen>
c001a312:	40                   	inc    eax
c001a313:	89 04 24             	mov    DWORD PTR [esp],eax
c001a316:	e8 01 56 ff ff       	call   c000f91c <malloc>
c001a31b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a31e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a322:	e8 7d 64 fe ff       	call   c00007a4 <strlen>
c001a327:	40                   	inc    eax
c001a328:	89 04 24             	mov    DWORD PTR [esp],eax
c001a32b:	e8 ec 55 ff ff       	call   c000f91c <malloc>
c001a330:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a333:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a337:	e8 68 64 fe ff       	call   c00007a4 <strlen>
c001a33c:	83 c4 0c             	add    esp,0xc
c001a33f:	40                   	inc    eax
c001a340:	50                   	push   eax
c001a341:	6a 00                	push   0x0
c001a343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a347:	e8 3c 64 fe ff       	call   c0000788 <memset>
c001a34c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a34f:	e8 50 64 fe ff       	call   c00007a4 <strlen>
c001a354:	83 c4 0c             	add    esp,0xc
c001a357:	40                   	inc    eax
c001a358:	50                   	push   eax
c001a359:	57                   	push   edi
c001a35a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a35e:	e8 05 64 fe ff       	call   c0000768 <memcpy>
c001a363:	89 34 24             	mov    DWORD PTR [esp],esi
c001a366:	e8 39 64 fe ff       	call   c00007a4 <strlen>
c001a36b:	83 c4 0c             	add    esp,0xc
c001a36e:	40                   	inc    eax
c001a36f:	50                   	push   eax
c001a370:	6a 00                	push   0x0
c001a372:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a376:	e8 0d 64 fe ff       	call   c0000788 <memset>
c001a37b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a37e:	e8 21 64 fe ff       	call   c00007a4 <strlen>
c001a383:	83 c4 0c             	add    esp,0xc
c001a386:	40                   	inc    eax
c001a387:	50                   	push   eax
c001a388:	56                   	push   esi
c001a389:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a38d:	e8 d6 63 fe ff       	call   c0000768 <memcpy>
c001a392:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a394:	40                   	inc    eax
c001a395:	89 03                	mov    DWORD PTR [ebx],eax
c001a397:	c1 e0 03             	shl    eax,0x3
c001a39a:	5a                   	pop    edx
c001a39b:	59                   	pop    ecx
c001a39c:	50                   	push   eax
c001a39d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a3a0:	e8 63 55 ff ff       	call   c000f908 <realloc>
c001a3a5:	83 c4 0c             	add    esp,0xc
c001a3a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3ab:	6a 08                	push   0x8
c001a3ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a3b1:	52                   	push   edx
c001a3b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3b4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3b8:	50                   	push   eax
c001a3b9:	e8 aa 63 fe ff       	call   c0000768 <memcpy>
c001a3be:	83 c4 20             	add    esp,0x20
c001a3c1:	5b                   	pop    ebx
c001a3c2:	5e                   	pop    esi
c001a3c3:	5f                   	pop    edi
c001a3c4:	c3                   	ret    
c001a3c5:	90                   	nop

c001a3c6 <EnvVarContainer::deleteEnv(char const*)>:
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3c8:	55                   	push   ebp
c001a3c9:	57                   	push   edi
c001a3ca:	56                   	push   esi
c001a3cb:	53                   	push   ebx
c001a3cc:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3d2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a3d9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a3e0:	68 14 01 00 00       	push   0x114
c001a3e5:	e8 32 55 ff ff       	call   c000f91c <malloc>
c001a3ea:	83 c4 0c             	add    esp,0xc
c001a3ed:	89 c7                	mov    edi,eax
c001a3ef:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a3f2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3f9:	50                   	push   eax
c001a3fa:	e8 33 90 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001a3ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a402:	e8 fd 92 ff ff       	call   c0013704 <File::exists()>
c001a407:	83 c4 10             	add    esp,0x10
c001a40a:	84 c0                	test   al,al
c001a40c:	75 31                	jne    c001a43f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a40e:	51                   	push   ecx
c001a40f:	51                   	push   ecx
c001a410:	6a 12                	push   0x12
c001a412:	57                   	push   edi
c001a413:	e8 7e 90 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001a418:	8b 07                	mov    eax,DWORD PTR [edi]
c001a41a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a41d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a420:	e8 7f 63 fe ff       	call   c00007a4 <strlen>
c001a425:	5a                   	pop    edx
c001a426:	31 d2                	xor    edx,edx
c001a428:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a42c:	51                   	push   ecx
c001a42d:	55                   	push   ebp
c001a42e:	52                   	push   edx
c001a42f:	50                   	push   eax
c001a430:	57                   	push   edi
c001a431:	ff d3                	call   ebx
c001a433:	83 c4 14             	add    esp,0x14
c001a436:	57                   	push   edi
c001a437:	e8 b8 90 ff ff       	call   c00134f4 <File::close()>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	31 db                	xor    ebx,ebx
c001a441:	50                   	push   eax
c001a442:	31 ed                	xor    ebp,ebp
c001a444:	68 00 01 00 00       	push   0x100
c001a449:	6a 00                	push   0x0
c001a44b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a44f:	50                   	push   eax
c001a450:	e8 33 63 fe ff       	call   c0000788 <memset>
c001a455:	58                   	pop    eax
c001a456:	5a                   	pop    edx
c001a457:	6a 01                	push   0x1
c001a459:	57                   	push   edi
c001a45a:	e8 37 90 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	83 ec 0c             	sub    esp,0xc
c001a465:	8b 07                	mov    eax,DWORD PTR [edi]
c001a467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a46b:	51                   	push   ecx
c001a46c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a470:	52                   	push   edx
c001a471:	6a 00                	push   0x0
c001a473:	6a 01                	push   0x1
c001a475:	57                   	push   edi
c001a476:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a479:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a47d:	83 c4 20             	add    esp,0x20
c001a480:	3c 0d                	cmp    al,0xd
c001a482:	0f 84 12 01 00 00    	je     c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a488:	85 db                	test   ebx,ebx
c001a48a:	0f 84 fd 00 00 00    	je     c001a58d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a490:	3c 0a                	cmp    al,0xa
c001a492:	74 13                	je     c001a4a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a494:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a499:	74 0c                	je     c001a4a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a49b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a4a1:	0f 8e e6 00 00 00    	jle    c001a58d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a4a7:	83 ec 0c             	sub    esp,0xc
c001a4aa:	8d 53 01             	lea    edx,[ebx+0x1]
c001a4ad:	29 dd                	sub    ebp,ebx
c001a4af:	52                   	push   edx
c001a4b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4b4:	e8 63 54 ff ff       	call   c000f91c <malloc>
c001a4b9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a4bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a4c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a4c7:	e8 50 54 ff ff       	call   c000f91c <malloc>
c001a4cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4d0:	83 c4 0c             	add    esp,0xc
c001a4d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4d7:	52                   	push   edx
c001a4d8:	6a 00                	push   0x0
c001a4da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4de:	e8 a5 62 fe ff       	call   c0000788 <memset>
c001a4e3:	83 c4 0c             	add    esp,0xc
c001a4e6:	53                   	push   ebx
c001a4e7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a4eb:	55                   	push   ebp
c001a4ec:	01 eb                	add    ebx,ebp
c001a4ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4f2:	e8 71 62 fe ff       	call   c0000768 <memcpy>
c001a4f7:	83 c4 0c             	add    esp,0xc
c001a4fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4fe:	51                   	push   ecx
c001a4ff:	6a 00                	push   0x0
c001a501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a505:	e8 7e 62 fe ff       	call   c0000788 <memset>
c001a50a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a50d:	e8 92 62 fe ff       	call   c00007a4 <strlen>
c001a512:	83 c4 0c             	add    esp,0xc
c001a515:	50                   	push   eax
c001a516:	53                   	push   ebx
c001a517:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a51b:	e8 48 62 fe ff       	call   c0000768 <memcpy>
c001a520:	5b                   	pop    ebx
c001a521:	58                   	pop    eax
c001a522:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a526:	68 b5 c3 02 c0       	push   0xc002c3b5
c001a52b:	e8 a3 89 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001a530:	8b 06                	mov    eax,DWORD PTR [esi]
c001a532:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a535:	40                   	inc    eax
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	89 06                	mov    DWORD PTR [esi],eax
c001a53b:	85 d2                	test   edx,edx
c001a53d:	75 0c                	jne    c001a54b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a53f:	83 ec 0c             	sub    esp,0xc
c001a542:	6a 08                	push   0x8
c001a544:	e8 d3 53 ff ff       	call   c000f91c <malloc>
c001a549:	eb 0c                	jmp    c001a557 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a54b:	c1 e0 03             	shl    eax,0x3
c001a54e:	51                   	push   ecx
c001a54f:	51                   	push   ecx
c001a550:	50                   	push   eax
c001a551:	52                   	push   edx
c001a552:	e8 b1 53 ff ff       	call   c000f908 <realloc>
c001a557:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	31 db                	xor    ebx,ebx
c001a55f:	52                   	push   edx
c001a560:	6a 08                	push   0x8
c001a562:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a566:	50                   	push   eax
c001a567:	8b 16                	mov    edx,DWORD PTR [esi]
c001a569:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a56c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a570:	50                   	push   eax
c001a571:	e8 f2 61 fe ff       	call   c0000768 <memcpy>
c001a576:	83 c4 0c             	add    esp,0xc
c001a579:	68 00 01 00 00       	push   0x100
c001a57e:	6a 00                	push   0x0
c001a580:	55                   	push   ebp
c001a581:	31 ed                	xor    ebp,ebp
c001a583:	e8 00 62 fe ff       	call   c0000788 <memset>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	eb 0d                	jmp    c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a58d:	3c 3d                	cmp    al,0x3d
c001a58f:	74 07                	je     c001a598 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a591:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a595:	45                   	inc    ebp
c001a596:	eb 02                	jmp    c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a598:	89 eb                	mov    ebx,ebp
c001a59a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a59f:	0f 85 bd fe ff ff    	jne    c001a462 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a5a5:	50                   	push   eax
c001a5a6:	50                   	push   eax
c001a5a7:	ff 36                	push   DWORD PTR [esi]
c001a5a9:	68 c3 c3 02 c0       	push   0xc002c3c3
c001a5ae:	e8 20 89 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001a5b3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5b9:	5b                   	pop    ebx
c001a5ba:	5e                   	pop    esi
c001a5bb:	5f                   	pop    edi
c001a5bc:	5d                   	pop    ebp
c001a5bd:	c3                   	ret    

c001a5be <EnvVarContainer::__loadSystem()>:
c001a5be:	83 ec 10             	sub    esp,0x10
c001a5c1:	68 60 e3 02 c0       	push   0xc002e360
c001a5c6:	68 ee c3 02 c0       	push   0xc002c3ee
c001a5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5cf:	e8 f4 fd ff ff       	call   c001a3c8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5d4:	83 c4 1c             	add    esp,0x1c
c001a5d7:	c3                   	ret    

c001a5d8 <EnvVarContainer::__loadUser()>:
c001a5d8:	c3                   	ret    
c001a5d9:	90                   	nop

c001a5da <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a5fa:	90                   	nop
c001a5fb:	c3                   	ret    

c001a5fc <EnvVarContainer::~EnvVarContainer()>:
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a603:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a606:	85 c0                	test   eax,eax
c001a608:	74 1d                	je     c001a627 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a610:	85 c0                	test   eax,eax
c001a612:	74 13                	je     c001a627 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a61b:	83 ec 0c             	sub    esp,0xc
c001a61e:	50                   	push   eax
c001a61f:	e8 08 53 ff ff       	call   c000f92c <free>
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	90                   	nop
c001a628:	83 c4 0c             	add    esp,0xc
c001a62b:	c3                   	ret    

c001a62c <Krnl::getEnv(Process*, char const*)>:
c001a62c:	53                   	push   ebx
c001a62d:	83 ec 08             	sub    esp,0x8
c001a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a634:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a638:	39 05 90 23 03 c0    	cmp    DWORD PTR ds:0xc0032390,eax
c001a63e:	74 04                	je     c001a644 <Krnl::getEnv(Process*, char const*)+0x18>
c001a640:	85 c0                	test   eax,eax
c001a642:	75 0b                	jne    c001a64f <Krnl::getEnv(Process*, char const*)+0x23>
c001a644:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a649:	85 c0                	test   eax,eax
c001a64b:	75 19                	jne    c001a666 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a64d:	eb 27                	jmp    c001a676 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a64f:	52                   	push   edx
c001a650:	52                   	push   edx
c001a651:	53                   	push   ebx
c001a652:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a658:	e8 5f fc ff ff       	call   c001a2bc <EnvVarContainer::getEnv(char const*)>
c001a65d:	83 c4 10             	add    esp,0x10
c001a660:	85 c0                	test   eax,eax
c001a662:	75 28                	jne    c001a68c <Krnl::getEnv(Process*, char const*)+0x60>
c001a664:	eb de                	jmp    c001a644 <Krnl::getEnv(Process*, char const*)+0x18>
c001a666:	52                   	push   edx
c001a667:	52                   	push   edx
c001a668:	53                   	push   ebx
c001a669:	50                   	push   eax
c001a66a:	e8 4d fc ff ff       	call   c001a2bc <EnvVarContainer::getEnv(char const*)>
c001a66f:	83 c4 10             	add    esp,0x10
c001a672:	85 c0                	test   eax,eax
c001a674:	75 16                	jne    c001a68c <Krnl::getEnv(Process*, char const*)+0x60>
c001a676:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a67a:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a67f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a683:	83 c4 08             	add    esp,0x8
c001a686:	5b                   	pop    ebx
c001a687:	e9 30 fc ff ff       	jmp    c001a2bc <EnvVarContainer::getEnv(char const*)>
c001a68c:	83 c4 08             	add    esp,0x8
c001a68f:	5b                   	pop    ebx
c001a690:	c3                   	ret    

c001a691 <Krnl::setEnvSystem(char const*, char const*)>:
c001a691:	83 ec 10             	sub    esp,0x10
c001a694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a69c:	ff 35 78 19 03 c0    	push   DWORD PTR ds:0xc0031978
c001a6a2:	e8 53 fc ff ff       	call   c001a2fa <EnvVarContainer::setEnv(char const*, char const*)>
c001a6a7:	83 c4 1c             	add    esp,0x1c
c001a6aa:	c3                   	ret    

c001a6ab <Krnl::setEnvUser(char const*, char const*)>:
c001a6ab:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6b0:	85 c0                	test   eax,eax
c001a6b2:	74 15                	je     c001a6c9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6b4:	83 ec 10             	sub    esp,0x10
c001a6b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6bf:	50                   	push   eax
c001a6c0:	e8 35 fc ff ff       	call   c001a2fa <EnvVarContainer::setEnv(char const*, char const*)>
c001a6c5:	83 c4 1c             	add    esp,0x1c
c001a6c8:	c3                   	ret    
c001a6c9:	c3                   	ret    

c001a6ca <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ce:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6d8:	e9 1d fc ff ff       	jmp    c001a2fa <EnvVarContainer::setEnv(char const*, char const*)>

c001a6dd <Krnl::deleteEnvSystem(char const*)>:
c001a6dd:	c3                   	ret    

c001a6de <Krnl::deleteEnvUser(char const*)>:
c001a6de:	c3                   	ret    

c001a6df <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6df:	c3                   	ret    

c001a6e0 <Krnl::newProcessEnv(Process*)>:
c001a6e0:	83 ec 28             	sub    esp,0x28
c001a6e3:	6a 0c                	push   0xc
c001a6e5:	e8 32 52 ff ff       	call   c000f91c <malloc>
c001a6ea:	5a                   	pop    edx
c001a6eb:	59                   	pop    ecx
c001a6ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6f0:	50                   	push   eax
c001a6f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6f5:	e8 e0 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a6fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6fe:	83 c4 2c             	add    esp,0x2c
c001a701:	c3                   	ret    

c001a702 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a702:	56                   	push   esi
c001a703:	53                   	push   ebx
c001a704:	83 ec 10             	sub    esp,0x10
c001a707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a70b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a711:	6a 0c                	push   0xc
c001a713:	e8 04 52 ff ff       	call   c000f91c <malloc>
c001a718:	89 c3                	mov    ebx,eax
c001a71a:	58                   	pop    eax
c001a71b:	5a                   	pop    edx
c001a71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a720:	53                   	push   ebx
c001a721:	e8 b4 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a726:	8b 06                	mov    eax,DWORD PTR [esi]
c001a728:	89 03                	mov    DWORD PTR [ebx],eax
c001a72a:	c1 e0 03             	shl    eax,0x3
c001a72d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a730:	e8 e7 51 ff ff       	call   c000f91c <malloc>
c001a735:	83 c4 0c             	add    esp,0xc
c001a738:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a73b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a73d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a744:	52                   	push   edx
c001a745:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a748:	50                   	push   eax
c001a749:	e8 1a 60 fe ff       	call   c0000768 <memcpy>
c001a74e:	89 d8                	mov    eax,ebx
c001a750:	83 c4 14             	add    esp,0x14
c001a753:	5b                   	pop    ebx
c001a754:	5e                   	pop    esi
c001a755:	c3                   	ret    

c001a756 <Krnl::loadSystemEnv()>:
c001a756:	53                   	push   ebx
c001a757:	83 ec 14             	sub    esp,0x14
c001a75a:	6a 0c                	push   0xc
c001a75c:	e8 bb 51 ff ff       	call   c000f91c <malloc>
c001a761:	89 c3                	mov    ebx,eax
c001a763:	58                   	pop    eax
c001a764:	5a                   	pop    edx
c001a765:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a76b:	53                   	push   ebx
c001a76c:	e8 69 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a771:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a774:	89 1d 78 19 03 c0    	mov    DWORD PTR ds:0xc0031978,ebx
c001a77a:	e8 3f fe ff ff       	call   c001a5be <EnvVarContainer::__loadSystem()>
c001a77f:	83 c4 18             	add    esp,0x18
c001a782:	5b                   	pop    ebx
c001a783:	c3                   	ret    

c001a784 <Krnl::loadUserEnv()>:
c001a784:	53                   	push   ebx
c001a785:	83 ec 14             	sub    esp,0x14
c001a788:	6a 0c                	push   0xc
c001a78a:	e8 8d 51 ff ff       	call   c000f91c <malloc>
c001a78f:	89 c3                	mov    ebx,eax
c001a791:	58                   	pop    eax
c001a792:	5a                   	pop    edx
c001a793:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a799:	53                   	push   ebx
c001a79a:	e8 3b fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a79f:	89 1d 74 19 03 c0    	mov    DWORD PTR ds:0xc0031974,ebx
c001a7a5:	83 c4 18             	add    esp,0x18
c001a7a8:	5b                   	pop    ebx
c001a7a9:	c3                   	ret    

c001a7aa <Krnl::flushEnv()>:
c001a7aa:	c3                   	ret    

c001a7ab <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7af:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a7b5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7bb:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7c2:	03 01                	add    eax,DWORD PTR [ecx]
c001a7c4:	85 d2                	test   edx,edx
c001a7c6:	74 02                	je     c001a7ca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7c8:	03 02                	add    eax,DWORD PTR [edx]
c001a7ca:	c3                   	ret    

c001a7cb <Krnl::getProcessEnvPair(Process*, int)>:
c001a7cb:	57                   	push   edi
c001a7cc:	8b 0d 74 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031974
c001a7d2:	56                   	push   esi
c001a7d3:	85 c9                	test   ecx,ecx
c001a7d5:	53                   	push   ebx
c001a7d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7de:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7e8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7ea:	75 47                	jne    c001a833 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7ec:	39 c3                	cmp    ebx,eax
c001a7ee:	7c 47                	jl     c001a837 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7f0:	8b 15 78 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031978
c001a7f6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7f8:	01 c1                	add    ecx,eax
c001a7fa:	39 d9                	cmp    ecx,ebx
c001a7fc:	7e 6c                	jle    c001a86a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7fe:	51                   	push   ecx
c001a7ff:	89 d9                	mov    ecx,ebx
c001a801:	29 c1                	sub    ecx,eax
c001a803:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a806:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a80a:	53                   	push   ebx
c001a80b:	68 10 c4 02 c0       	push   0xc002c410
c001a810:	e8 be 86 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001a815:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a81b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a81d:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a825:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a829:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a82c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a82f:	89 06                	mov    DWORD PTR [esi],eax
c001a831:	eb 51                	jmp    c001a884 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a833:	39 c3                	cmp    ebx,eax
c001a835:	7d 05                	jge    c001a83c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a837:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a83a:	eb 20                	jmp    c001a85c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a83c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a83e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a841:	39 da                	cmp    edx,ebx
c001a843:	7e 04                	jle    c001a849 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a845:	29 c3                	sub    ebx,eax
c001a847:	eb 10                	jmp    c001a859 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a849:	8b 0d 78 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031978
c001a84f:	03 11                	add    edx,DWORD PTR [ecx]
c001a851:	39 da                	cmp    edx,ebx
c001a853:	7e 15                	jle    c001a86a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a855:	29 c3                	sub    ebx,eax
c001a857:	29 fb                	sub    ebx,edi
c001a859:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a85c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a860:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a863:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a866:	89 06                	mov    DWORD PTR [esi],eax
c001a868:	eb 1d                	jmp    c001a887 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a86a:	83 ec 0c             	sub    esp,0xc
c001a86d:	68 24 c4 02 c0       	push   0xc002c424
c001a872:	e8 18 00 00 00       	call   c001a88f <Krnl::panic(char const*)>
c001a877:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a87d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	89 f0                	mov    eax,esi
c001a889:	5b                   	pop    ebx
c001a88a:	5e                   	pop    esi
c001a88b:	5f                   	pop    edi
c001a88c:	c2 04 00             	ret    0x4

c001a88f <Krnl::panic(char const*)>:
c001a88f:	55                   	push   ebp
c001a890:	89 e5                	mov    ebp,esp
c001a892:	53                   	push   ebx
c001a893:	83 ec 0c             	sub    esp,0xc
c001a896:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a899:	fa                   	cli    
c001a89a:	c6 05 84 19 03 c0 01 	mov    BYTE PTR ds:0xc0031984,0x1
c001a8a1:	53                   	push   ebx
c001a8a2:	c6 05 64 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd64,0x0
c001a8a9:	68 3e c4 02 c0       	push   0xc002c43e
c001a8ae:	e8 20 86 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001a8b3:	58                   	pop    eax
c001a8b4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bf:	e8 32 64 ff ff       	call   c0010cf6 <setActiveTerminal(VgaText*)>
c001a8c4:	83 c4 0c             	add    esp,0xc
c001a8c7:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8cc:	6a 01                	push   0x1
c001a8ce:	6a 0f                	push   0xf
c001a8d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d6:	e8 b9 5e ff ff       	call   c0010794 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8db:	58                   	pop    eax
c001a8dc:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e7:	e8 50 66 ff ff       	call   c0010f3c <VgaText::clearScreen()>
c001a8ec:	58                   	pop    eax
c001a8ed:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8f2:	5a                   	pop    edx
c001a8f3:	68 57 c4 02 c0       	push   0xc002c457
c001a8f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fe:	e8 7f 67 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a903:	59                   	pop    ecx
c001a904:	58                   	pop    eax
c001a905:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a90a:	68 fc c4 02 c0       	push   0xc002c4fc
c001a90f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a915:	e8 68 67 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a91a:	58                   	pop    eax
c001a91b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a920:	5a                   	pop    edx
c001a921:	68 73 c4 02 c0       	push   0xc002c473
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 51 67 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a931:	59                   	pop    ecx
c001a932:	58                   	pop    eax
c001a933:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a938:	53                   	push   ebx
c001a939:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93f:	e8 3e 67 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a944:	58                   	pop    eax
c001a945:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a94a:	5a                   	pop    edx
c001a94b:	68 93 c4 02 c0       	push   0xc002c493
c001a950:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a956:	e8 27 67 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a95b:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	85 c0                	test   eax,eax
c001a965:	74 02                	je     c001a969 <Krnl::panic(char const*)+0xda>
c001a967:	ff d0                	call   eax
c001a969:	83 ec 0c             	sub    esp,0xc
c001a96c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a96f:	e8 e3 30 00 00       	call   c001da57 <Thr::getDriverNameFromAddress(unsigned long)>
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	89 c3                	mov    ebx,eax
c001a979:	85 c0                	test   eax,eax
c001a97b:	0f 84 50 02 00 00    	je     c001abd1 <Krnl::panic(char const*)+0x342>
c001a981:	83 ec 08             	sub    esp,0x8
c001a984:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a98a:	68 38 c5 02 c0       	push   0xc002c538
c001a98f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a995:	e8 e8 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a99a:	58                   	pop    eax
c001a99b:	5a                   	pop    edx
c001a99c:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a9a2:	68 73 c4 02 c0       	push   0xc002c473
c001a9a7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9ad:	e8 d0 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a9b2:	59                   	pop    ecx
c001a9b3:	58                   	pop    eax
c001a9b4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9b9:	53                   	push   ebx
c001a9ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c0:	e8 bd 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a9c5:	83 c4 10             	add    esp,0x10
c001a9c8:	83 ec 08             	sub    esp,0x8
c001a9cb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9d0:	68 92 c4 02 c0       	push   0xc002c492
c001a9d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9db:	e8 a2 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a9e0:	58                   	pop    eax
c001a9e1:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9e6:	5a                   	pop    edx
c001a9e7:	68 90 c5 02 c0       	push   0xc002c590
c001a9ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f2:	e8 8b 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001a9f7:	59                   	pop    ecx
c001a9f8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9fd:	5b                   	pop    ebx
c001a9fe:	68 d0 c5 02 c0       	push   0xc002c5d0
c001aa03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa09:	e8 74 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aa0e:	58                   	pop    eax
c001aa0f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa14:	5a                   	pop    edx
c001aa15:	68 7e c4 02 c0       	push   0xc002c47e
c001aa1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa20:	e8 5d 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aa25:	59                   	pop    ecx
c001aa26:	5b                   	pop    ebx
c001aa27:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa2a:	68 96 c4 02 c0       	push   0xc002c496
c001aa2f:	e8 9f 84 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001aa34:	58                   	pop    eax
c001aa35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa38:	5a                   	pop    edx
c001aa39:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa3c:	68 9f c4 02 c0       	push   0xc002c49f
c001aa41:	e8 8d 84 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001aa46:	59                   	pop    ecx
c001aa47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa4a:	5b                   	pop    ebx
c001aa4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa4d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa50:	68 a8 c4 02 c0       	push   0xc002c4a8
c001aa55:	e8 79 84 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001aa5a:	58                   	pop    eax
c001aa5b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa60:	5a                   	pop    edx
c001aa61:	68 14 c6 02 c0       	push   0xc002c614
c001aa66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa6c:	e8 11 66 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aa71:	59                   	pop    ecx
c001aa72:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa77:	5b                   	pop    ebx
c001aa78:	68 b1 c4 02 c0       	push   0xc002c4b1
c001aa7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa83:	e8 fa 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aa88:	0f 20 c0             	mov    eax,cr0
c001aa8b:	5a                   	pop    edx
c001aa8c:	59                   	pop    ecx
c001aa8d:	50                   	push   eax
c001aa8e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa99:	e8 0a 66 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001aa9e:	5b                   	pop    ebx
c001aa9f:	58                   	pop    eax
c001aaa0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aaa5:	68 bb c4 02 c0       	push   0xc002c4bb
c001aaaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aab0:	e8 cd 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aab5:	0f 20 d0             	mov    eax,cr2
c001aab8:	5a                   	pop    edx
c001aab9:	59                   	pop    ecx
c001aaba:	50                   	push   eax
c001aabb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aac0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aac6:	e8 dd 65 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001aacb:	5b                   	pop    ebx
c001aacc:	58                   	pop    eax
c001aacd:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aad2:	68 c5 c4 02 c0       	push   0xc002c4c5
c001aad7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aadd:	e8 a0 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001aae2:	0f 20 d8             	mov    eax,cr3
c001aae5:	5a                   	pop    edx
c001aae6:	59                   	pop    ecx
c001aae7:	50                   	push   eax
c001aae8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aaed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf3:	e8 b0 65 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001aaf8:	5b                   	pop    ebx
c001aaf9:	58                   	pop    eax
c001aafa:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aaff:	68 d8 c4 02 c0       	push   0xc002c4d8
c001ab04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0a:	e8 73 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001ab0f:	0f 20 e0             	mov    eax,cr4
c001ab12:	5a                   	pop    edx
c001ab13:	59                   	pop    ecx
c001ab14:	50                   	push   eax
c001ab15:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab20:	e8 83 65 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001ab25:	5b                   	pop    ebx
c001ab26:	58                   	pop    eax
c001ab27:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab2c:	68 e2 c4 02 c0       	push   0xc002c4e2
c001ab31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab37:	e8 46 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001ab3c:	5a                   	pop    edx
c001ab3d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab42:	59                   	pop    ecx
c001ab43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab49:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab4c:	50                   	push   eax
c001ab4d:	e8 56 65 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001ab52:	5b                   	pop    ebx
c001ab53:	58                   	pop    eax
c001ab54:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab59:	68 f9 c4 02 c0       	push   0xc002c4f9
c001ab5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab64:	e8 19 65 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001ab69:	5a                   	pop    edx
c001ab6a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab6f:	59                   	pop    ecx
c001ab70:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab76:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab79:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab7c:	50                   	push   eax
c001ab7d:	e8 26 65 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001ab82:	5b                   	pop    ebx
c001ab83:	58                   	pop    eax
c001ab84:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab89:	68 f9 c4 02 c0       	push   0xc002c4f9
c001ab8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab94:	e8 e9 64 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001ab99:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab9e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aba1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aba7:	8b 12                	mov    edx,DWORD PTR [edx]
c001aba9:	59                   	pop    ecx
c001abaa:	5b                   	pop    ebx
c001abab:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abae:	50                   	push   eax
c001abaf:	e8 f4 64 ff ff       	call   c00110a8 <VgaText::putx(unsigned int)>
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	b2 fe                	mov    dl,0xfe
c001abb9:	e4 60                	in     al,0x60
c001abbb:	3c 1c                	cmp    al,0x1c
c001abbd:	74 04                	je     c001abc3 <Krnl::panic(char const*)+0x334>
c001abbf:	3c 5a                	cmp    al,0x5a
c001abc1:	75 f6                	jne    c001abb9 <Krnl::panic(char const*)+0x32a>
c001abc3:	e4 64                	in     al,0x64
c001abc5:	a8 02                	test   al,0x2
c001abc7:	75 fa                	jne    c001abc3 <Krnl::panic(char const*)+0x334>
c001abc9:	88 d0                	mov    al,dl
c001abcb:	e6 64                	out    0x64,al
c001abcd:	fa                   	cli    
c001abce:	f4                   	hlt    
c001abcf:	eb e8                	jmp    c001abb9 <Krnl::panic(char const*)+0x32a>
c001abd1:	50                   	push   eax
c001abd2:	50                   	push   eax
c001abd3:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001abd8:	68 64 c5 02 c0       	push   0xc002c564
c001abdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abe3:	e8 9a 64 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001abe8:	58                   	pop    eax
c001abe9:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001abee:	5a                   	pop    edx
c001abef:	68 73 c4 02 c0       	push   0xc002c473
c001abf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abfa:	e8 83 64 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001abff:	59                   	pop    ecx
c001ac00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac05:	5b                   	pop    ebx
c001ac06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac09:	83 c0 0c             	add    eax,0xc
c001ac0c:	50                   	push   eax
c001ac0d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ac12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac18:	e8 65 64 ff ff       	call   c0011082 <VgaText::puts(char const*)>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	e9 a3 fd ff ff       	jmp    c001a9c8 <Krnl::panic(char const*)+0x139>

c001ac25 <Net::switchEndian16(unsigned short)>:
c001ac25:	83 ec 04             	sub    esp,0x4
c001ac28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac2c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac34:	c1 f8 08             	sar    eax,0x8
c001ac37:	89 c2                	mov    edx,eax
c001ac39:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac3d:	c1 e0 08             	shl    eax,0x8
c001ac40:	09 d0                	or     eax,edx
c001ac42:	83 c4 04             	add    esp,0x4
c001ac45:	c3                   	ret    

c001ac46 <Net::switchEndian32(unsigned int)>:
c001ac46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4a:	c1 e8 18             	shr    eax,0x18
c001ac4d:	89 c2                	mov    edx,eax
c001ac4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac53:	c1 e0 08             	shl    eax,0x8
c001ac56:	25 00 00 ff 00       	and    eax,0xff0000
c001ac5b:	09 c2                	or     edx,eax
c001ac5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac61:	c1 e8 08             	shr    eax,0x8
c001ac64:	25 00 ff 00 00       	and    eax,0xff00
c001ac69:	09 c2                	or     edx,eax
c001ac6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6f:	c1 e0 18             	shl    eax,0x18
c001ac72:	09 d0                	or     eax,edx
c001ac74:	c3                   	ret    

c001ac75 <Net::crc32Calc(unsigned char*, int)>:
c001ac75:	83 ec 10             	sub    esp,0x10
c001ac78:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac7d:	75 07                	jne    c001ac86 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac7f:	b8 00 00 00 00       	mov    eax,0x0
c001ac84:	eb 7c                	jmp    c001ad02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac86:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac8b:	7f 07                	jg     c001ac94 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac8d:	b8 00 00 00 00       	mov    eax,0x0
c001ac92:	eb 6e                	jmp    c001ad02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac94:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aca8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acac:	7d 4e                	jge    c001acfc <Net::crc32Calc(unsigned char*, int)+0x87>
c001acae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb6:	01 d0                	add    eax,edx
c001acb8:	8a 00                	mov    al,BYTE PTR [eax]
c001acba:	0f b6 c0             	movzx  eax,al
c001acbd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001acc1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acc9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acce:	7f 26                	jg     c001acf6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001acd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd4:	83 e0 01             	and    eax,0x1
c001acd7:	74 0d                	je     c001ace6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001acd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acdd:	d1 e8                	shr    eax,1
c001acdf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ace4:	eb 06                	jmp    c001acec <Net::crc32Calc(unsigned char*, int)+0x77>
c001ace6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acea:	d1 e8                	shr    eax,1
c001acec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acf0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acf4:	eb d3                	jmp    c001acc9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001acf6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acfa:	eb a8                	jmp    c001aca4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad00:	f7 d0                	not    eax
c001ad02:	83 c4 10             	add    esp,0x10
c001ad05:	c3                   	ret    

c001ad06 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad06:	83 ec 1c             	sub    esp,0x1c
c001ad09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad19:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ad1e:	7f 14                	jg     c001ad34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ad20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad24:	8d 50 01             	lea    edx,[eax+0x1]
c001ad27:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad2b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad32:	eb e5                	jmp    c001ad19 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad38:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad3f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad42:	83 ec 04             	sub    esp,0x4
c001ad45:	6a 06                	push   0x6
c001ad47:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ad4b:	50                   	push   eax
c001ad4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad50:	e8 13 5a fe ff       	call   c0000768 <memcpy>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad5d:	83 ec 04             	sub    esp,0x4
c001ad60:	6a 06                	push   0x6
c001ad62:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ad66:	50                   	push   eax
c001ad67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad6b:	e8 f8 59 fe ff       	call   c0000768 <memcpy>
c001ad70:	83 c4 10             	add    esp,0x10
c001ad73:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad7c:	0f b7 c0             	movzx  eax,ax
c001ad7f:	c1 f8 08             	sar    eax,0x8
c001ad82:	89 c1                	mov    ecx,eax
c001ad84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad88:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad8f:	88 ca                	mov    dl,cl
c001ad91:	88 10                	mov    BYTE PTR [eax],dl
c001ad93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad9b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ada2:	88 10                	mov    BYTE PTR [eax],dl
c001ada4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ada8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adac:	83 ec 04             	sub    esp,0x4
c001adaf:	52                   	push   edx
c001adb0:	50                   	push   eax
c001adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001adb5:	e8 ae 59 fe ff       	call   c0000768 <memcpy>
c001adba:	83 c4 10             	add    esp,0x10
c001adbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adc1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001adc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adc9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001adcd:	83 ec 08             	sub    esp,0x8
c001add0:	50                   	push   eax
c001add1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001add5:	e8 9b fe ff ff       	call   c001ac75 <Net::crc32Calc(unsigned char*, int)>
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ade1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ade5:	c1 e8 18             	shr    eax,0x18
c001ade8:	89 c1                	mov    ecx,eax
c001adea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adee:	8d 50 01             	lea    edx,[eax+0x1]
c001adf1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001adf5:	88 ca                	mov    dl,cl
c001adf7:	88 10                	mov    BYTE PTR [eax],dl
c001adf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adfd:	c1 e8 10             	shr    eax,0x10
c001ae00:	89 c1                	mov    ecx,eax
c001ae02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae06:	8d 50 01             	lea    edx,[eax+0x1]
c001ae09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae0d:	88 ca                	mov    dl,cl
c001ae0f:	88 10                	mov    BYTE PTR [eax],dl
c001ae11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae15:	c1 e8 08             	shr    eax,0x8
c001ae18:	89 c1                	mov    ecx,eax
c001ae1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ae21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae25:	88 ca                	mov    dl,cl
c001ae27:	88 10                	mov    BYTE PTR [eax],dl
c001ae29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae2d:	8d 50 01             	lea    edx,[eax+0x1]
c001ae30:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae38:	88 10                	mov    BYTE PTR [eax],dl
c001ae3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae3e:	83 c4 1c             	add    esp,0x1c
c001ae41:	c3                   	ret    

c001ae42 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae42:	83 ec 2c             	sub    esp,0x2c
c001ae45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae4d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ae52:	83 ec 04             	sub    esp,0x4
c001ae55:	6a 06                	push   0x6
c001ae57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae5f:	83 c0 0e             	add    eax,0xe
c001ae62:	50                   	push   eax
c001ae63:	e8 00 59 fe ff       	call   c0000768 <memcpy>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae70:	83 ec 04             	sub    esp,0x4
c001ae73:	6a 06                	push   0x6
c001ae75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae7d:	83 c0 08             	add    eax,0x8
c001ae80:	50                   	push   eax
c001ae81:	e8 e2 58 fe ff       	call   c0000768 <memcpy>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae92:	8d 50 01             	lea    edx,[eax+0x1]
c001ae95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae99:	8a 00                	mov    al,BYTE PTR [eax]
c001ae9b:	0f b6 c0             	movzx  eax,al
c001ae9e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aea7:	8d 50 01             	lea    edx,[eax+0x1]
c001aeaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aeae:	8a 00                	mov    al,BYTE PTR [eax]
c001aeb0:	0f b6 c0             	movzx  eax,al
c001aeb3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aeb8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aebd:	c1 e0 08             	shl    eax,0x8
c001aec0:	89 c2                	mov    edx,eax
c001aec2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec6:	09 d0                	or     eax,edx
c001aec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aecc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aed0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aed5:	75 3a                	jne    c001af11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aedb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aede:	66 3d dc 05          	cmp    ax,0x5dc
c001aee2:	77 10                	ja     c001aef4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aee8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aeeb:	0f b7 c0             	movzx  eax,ax
c001aeee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aef2:	eb 1d                	jmp    c001af11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	68 3c c6 02 c0       	push   0xc002c63c
c001aefc:	e8 d2 7f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af08:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af0c:	e9 c0 00 00 00       	jmp    c001afd1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001af11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af19:	8b 00                	mov    eax,DWORD PTR [eax]
c001af1b:	83 ec 04             	sub    esp,0x4
c001af1e:	52                   	push   edx
c001af1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af23:	50                   	push   eax
c001af24:	e8 3f 58 fe ff       	call   c0000768 <memcpy>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001af34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af38:	8d 50 01             	lea    edx,[eax+0x1]
c001af3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af3f:	8a 00                	mov    al,BYTE PTR [eax]
c001af41:	0f b6 c0             	movzx  eax,al
c001af44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af4c:	8d 50 01             	lea    edx,[eax+0x1]
c001af4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af53:	8a 00                	mov    al,BYTE PTR [eax]
c001af55:	0f b6 c0             	movzx  eax,al
c001af58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af60:	8d 50 01             	lea    edx,[eax+0x1]
c001af63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af67:	8a 00                	mov    al,BYTE PTR [eax]
c001af69:	0f b6 c0             	movzx  eax,al
c001af6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af74:	8d 50 01             	lea    edx,[eax+0x1]
c001af77:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af7b:	8a 00                	mov    al,BYTE PTR [eax]
c001af7d:	0f b6 c0             	movzx  eax,al
c001af80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af88:	c1 e0 18             	shl    eax,0x18
c001af8b:	89 c2                	mov    edx,eax
c001af8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af91:	c1 e0 10             	shl    eax,0x10
c001af94:	09 c2                	or     edx,eax
c001af96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9a:	c1 e0 08             	shl    eax,0x8
c001af9d:	09 d0                	or     eax,edx
c001af9f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001afa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afab:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001afaf:	83 e8 04             	sub    eax,0x4
c001afb2:	83 ec 08             	sub    esp,0x8
c001afb5:	50                   	push   eax
c001afb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001afba:	e8 b6 fc ff ff       	call   c001ac75 <Net::crc32Calc(unsigned char*, int)>
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001afc6:	0f 94 c2             	sete   dl
c001afc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afcd:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001afd0:	90                   	nop
c001afd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afd5:	83 c4 2c             	add    esp,0x2c
c001afd8:	c2 04 00             	ret    0x4

c001afdb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001afdb:	55                   	push   ebp
c001afdc:	57                   	push   edi
c001afdd:	56                   	push   esi
c001afde:	53                   	push   ebx
c001afdf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001afe5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001afec:	8a 1e                	mov    bl,BYTE PTR [esi]
c001afee:	8d 6e 01             	lea    ebp,[esi+0x1]
c001aff1:	80 fb 40             	cmp    bl,0x40
c001aff4:	75 1b                	jne    c001b011 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001aff6:	8a 16                	mov    dl,BYTE PTR [esi]
c001aff8:	84 d2                	test   dl,dl
c001affa:	0f 84 f1 00 00 00    	je     c001b0f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b000:	8d 46 01             	lea    eax,[esi+0x1]
c001b003:	80 fa 3a             	cmp    dl,0x3a
c001b006:	74 04                	je     c001b00c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b008:	89 c6                	mov    esi,eax
c001b00a:	eb ea                	jmp    c001aff6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b00c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b00f:	89 c6                	mov    esi,eax
c001b011:	50                   	push   eax
c001b012:	6a 40                	push   0x40
c001b014:	6a 00                	push   0x0
c001b016:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b01a:	50                   	push   eax
c001b01b:	e8 68 57 fe ff       	call   c0000788 <memset>
c001b020:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b027:	31 c0                	xor    eax,eax
c001b029:	83 c4 10             	add    esp,0x10
c001b02c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b02e:	84 c9                	test   cl,cl
c001b030:	0f 84 bb 00 00 00    	je     c001b0f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b036:	3d c7 00 00 00       	cmp    eax,0xc7
c001b03b:	0f 8f b0 00 00 00    	jg     c001b0f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b041:	80 f9 0a             	cmp    cl,0xa
c001b044:	0f 85 98 00 00 00    	jne    c001b0e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b04a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b04f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b053:	a8 df                	test   al,0xdf
c001b055:	0f 94 c1             	sete   cl
c001b058:	3c 23                	cmp    al,0x23
c001b05a:	0f 94 c2             	sete   dl
c001b05d:	08 d1                	or     cl,dl
c001b05f:	75 4a                	jne    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b061:	8d 50 f7             	lea    edx,[eax-0x9]
c001b064:	80 fa 01             	cmp    dl,0x1
c001b067:	76 42                	jbe    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b069:	3c 5b                	cmp    al,0x5b
c001b06b:	75 42                	jne    c001b0af <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b06d:	80 fb 40             	cmp    bl,0x40
c001b070:	75 39                	jne    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b072:	83 ec 0c             	sub    esp,0xc
c001b075:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b079:	52                   	push   edx
c001b07a:	e8 25 57 fe ff       	call   c00007a4 <strlen>
c001b07f:	83 c4 10             	add    esp,0x10
c001b082:	83 f8 3f             	cmp    eax,0x3f
c001b085:	77 6a                	ja     c001b0f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b087:	50                   	push   eax
c001b088:	50                   	push   eax
c001b089:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b08d:	52                   	push   edx
c001b08e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b092:	52                   	push   edx
c001b093:	e8 ac 57 fe ff       	call   c0000844 <strcpy>
c001b098:	58                   	pop    eax
c001b099:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b09d:	52                   	push   edx
c001b09e:	e8 01 57 fe ff       	call   c00007a4 <strlen>
c001b0a3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0a8:	83 c4 10             	add    esp,0x10
c001b0ab:	31 d2                	xor    edx,edx
c001b0ad:	eb 3a                	jmp    c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0af:	80 fb 40             	cmp    bl,0x40
c001b0b2:	74 06                	je     c001b0ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0b4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0b8:	eb 20                	jmp    c001b0da <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0ba:	50                   	push   eax
c001b0bb:	50                   	push   eax
c001b0bc:	55                   	push   ebp
c001b0bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0c1:	50                   	push   eax
c001b0c2:	e8 09 58 fe ff       	call   c00008d0 <strcmp>
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	85 c0                	test   eax,eax
c001b0cc:	75 dd                	jne    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0ce:	eb e4                	jmp    c001b0b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0d0:	8d 50 01             	lea    edx,[eax+0x1]
c001b0d3:	80 f9 3d             	cmp    cl,0x3d
c001b0d6:	74 1d                	je     c001b0f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0d8:	89 d0                	mov    eax,edx
c001b0da:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0dc:	84 c9                	test   cl,cl
c001b0de:	75 f0                	jne    c001b0d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0e0:	eb 0f                	jmp    c001b0f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0e2:	8d 50 01             	lea    edx,[eax+0x1]
c001b0e5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b0e9:	47                   	inc    edi
c001b0ea:	89 d0                	mov    eax,edx
c001b0ec:	e9 3b ff ff ff       	jmp    c001b02c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b0f1:	31 c0                	xor    eax,eax
c001b0f3:	eb 33                	jmp    c001b128 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b0f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0f9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b0fc:	50                   	push   eax
c001b0fd:	50                   	push   eax
c001b0fe:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b102:	50                   	push   eax
c001b103:	56                   	push   esi
c001b104:	e8 c7 57 fe ff       	call   c00008d0 <strcmp>
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	85 c0                	test   eax,eax
c001b10e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b112:	75 97                	jne    c001b0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b114:	51                   	push   ecx
c001b115:	51                   	push   ecx
c001b116:	52                   	push   edx
c001b117:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b11e:	e8 21 57 fe ff       	call   c0000844 <strcpy>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	b0 01                	mov    al,0x1
c001b128:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b12e:	5b                   	pop    ebx
c001b12f:	5e                   	pop    esi
c001b130:	5f                   	pop    edi
c001b131:	5d                   	pop    ebp
c001b132:	c3                   	ret    

c001b133 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b133:	57                   	push   edi
c001b134:	56                   	push   esi
c001b135:	53                   	push   ebx
c001b136:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b13c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b143:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b14a:	53                   	push   ebx
c001b14b:	e8 54 56 fe ff       	call   c00007a4 <strlen>
c001b150:	89 34 24             	mov    DWORD PTR [esp],esi
c001b153:	89 c7                	mov    edi,eax
c001b155:	e8 4a 56 fe ff       	call   c00007a4 <strlen>
c001b15a:	83 c4 10             	add    esp,0x10
c001b15d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b161:	3d ff 00 00 00       	cmp    eax,0xff
c001b166:	0f 87 d3 00 00 00    	ja     c001b23f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b16c:	57                   	push   edi
c001b16d:	57                   	push   edi
c001b16e:	56                   	push   esi
c001b16f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b173:	56                   	push   esi
c001b174:	e8 cb 56 fe ff       	call   c0000844 <strcpy>
c001b179:	58                   	pop    eax
c001b17a:	5a                   	pop    edx
c001b17b:	68 91 cb 02 c0       	push   0xc002cb91
c001b180:	56                   	push   esi
c001b181:	e8 fe 57 fe ff       	call   c0000984 <strcat>
c001b186:	59                   	pop    ecx
c001b187:	5f                   	pop    edi
c001b188:	53                   	push   ebx
c001b189:	56                   	push   esi
c001b18a:	e8 f5 57 fe ff       	call   c0000984 <strcat>
c001b18f:	58                   	pop    eax
c001b190:	5a                   	pop    edx
c001b191:	68 88 c6 02 c0       	push   0xc002c688
c001b196:	56                   	push   esi
c001b197:	e8 e8 57 fe ff       	call   c0000984 <strcat>
c001b19c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b1a3:	e8 74 47 ff ff       	call   c000f91c <malloc>
c001b1a8:	83 c4 0c             	add    esp,0xc
c001b1ab:	89 c3                	mov    ebx,eax
c001b1ad:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001b1b3:	56                   	push   esi
c001b1b4:	50                   	push   eax
c001b1b5:	e8 78 82 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	85 db                	test   ebx,ebx
c001b1bf:	74 7e                	je     c001b23f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1c1:	51                   	push   ecx
c001b1c2:	51                   	push   ecx
c001b1c3:	6a 01                	push   0x1
c001b1c5:	53                   	push   ebx
c001b1c6:	e8 cb 82 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	85 c0                	test   eax,eax
c001b1d0:	74 08                	je     c001b1da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1d7:	53                   	push   ebx
c001b1d8:	eb 5f                	jmp    c001b239 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1da:	52                   	push   edx
c001b1db:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1df:	50                   	push   eax
c001b1e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1e4:	50                   	push   eax
c001b1e5:	53                   	push   ebx
c001b1e6:	e8 57 85 ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001b1eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1ef:	83 c4 10             	add    esp,0x10
c001b1f2:	89 c1                	mov    ecx,eax
c001b1f4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b1f8:	74 31                	je     c001b22b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1fa:	83 ec 0c             	sub    esp,0xc
c001b1fd:	50                   	push   eax
c001b1fe:	e8 19 47 ff ff       	call   c000f91c <malloc>
c001b203:	89 c6                	mov    esi,eax
c001b205:	58                   	pop    eax
c001b206:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b208:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b20c:	52                   	push   edx
c001b20d:	56                   	push   esi
c001b20e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b212:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b216:	53                   	push   ebx
c001b217:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b21a:	83 c4 20             	add    esp,0x20
c001b21d:	85 c0                	test   eax,eax
c001b21f:	75 0a                	jne    c001b22b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b225:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b229:	74 18                	je     c001b243 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b22b:	83 ec 0c             	sub    esp,0xc
c001b22e:	53                   	push   ebx
c001b22f:	e8 c0 82 ff ff       	call   c00134f4 <File::close()>
c001b234:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b239:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b23c:	83 c4 10             	add    esp,0x10
c001b23f:	31 c0                	xor    eax,eax
c001b241:	eb 3b                	jmp    c001b27e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b243:	83 ec 0c             	sub    esp,0xc
c001b246:	53                   	push   ebx
c001b247:	e8 a8 82 ff ff       	call   c00134f4 <File::close()>
c001b24c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b24e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b254:	83 c4 0c             	add    esp,0xc
c001b257:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b25e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b265:	56                   	push   esi
c001b266:	e8 70 fd ff ff       	call   c001afdb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b26b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b26e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b272:	e8 b5 46 ff ff       	call   c000f92c <free>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b27e:	81 c4 20 01 00 00    	add    esp,0x120
c001b284:	5b                   	pop    ebx
c001b285:	5e                   	pop    esi
c001b286:	5f                   	pop    edi
c001b287:	c3                   	ret    

c001b288 <Reg::getLine(char*, char*, char*)>:
c001b288:	57                   	push   edi
c001b289:	56                   	push   esi
c001b28a:	53                   	push   ebx
c001b28b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b28f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b293:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b297:	57                   	push   edi
c001b298:	56                   	push   esi
c001b299:	53                   	push   ebx
c001b29a:	68 8d c6 02 c0       	push   0xc002c68d
c001b29f:	e8 8f fe ff ff       	call   c001b133 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2a4:	83 c4 10             	add    esp,0x10
c001b2a7:	84 c0                	test   al,al
c001b2a9:	75 10                	jne    c001b2bb <Reg::getLine(char*, char*, char*)+0x33>
c001b2ab:	57                   	push   edi
c001b2ac:	56                   	push   esi
c001b2ad:	53                   	push   ebx
c001b2ae:	68 b2 c6 02 c0       	push   0xc002c6b2
c001b2b3:	e8 7b fe ff ff       	call   c001b133 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2b8:	83 c4 10             	add    esp,0x10
c001b2bb:	5b                   	pop    ebx
c001b2bc:	5e                   	pop    esi
c001b2bd:	5f                   	pop    edi
c001b2be:	c3                   	ret    

c001b2bf <Reg::readInt(char*, char*, int*)>:
c001b2bf:	55                   	push   ebp
c001b2c0:	57                   	push   edi
c001b2c1:	56                   	push   esi
c001b2c2:	53                   	push   ebx
c001b2c3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2c9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2cd:	57                   	push   edi
c001b2ce:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2d5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2dc:	e8 a7 ff ff ff       	call   c001b288 <Reg::getLine(char*, char*, char*)>
c001b2e1:	83 c4 10             	add    esp,0x10
c001b2e4:	84 c0                	test   al,al
c001b2e6:	0f 84 b3 00 00 00    	je     c001b39f <Reg::readInt(char*, char*, int*)+0xe0>
c001b2ec:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b2f0:	80 fa 2b             	cmp    dl,0x2b
c001b2f3:	74 0c                	je     c001b301 <Reg::readInt(char*, char*, int*)+0x42>
c001b2f5:	80 fa 2d             	cmp    dl,0x2d
c001b2f8:	75 0e                	jne    c001b308 <Reg::readInt(char*, char*, int*)+0x49>
c001b2fa:	ba 01 00 00 00       	mov    edx,0x1
c001b2ff:	eb 0b                	jmp    c001b30c <Reg::readInt(char*, char*, int*)+0x4d>
c001b301:	ba 01 00 00 00       	mov    edx,0x1
c001b306:	eb 02                	jmp    c001b30a <Reg::readInt(char*, char*, int*)+0x4b>
c001b308:	31 d2                	xor    edx,edx
c001b30a:	31 c0                	xor    eax,eax
c001b30c:	be 0a 00 00 00       	mov    esi,0xa
c001b311:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b316:	75 20                	jne    c001b338 <Reg::readInt(char*, char*, int*)+0x79>
c001b318:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b31c:	80 f9 78             	cmp    cl,0x78
c001b31f:	75 0a                	jne    c001b32b <Reg::readInt(char*, char*, int*)+0x6c>
c001b321:	83 c2 02             	add    edx,0x2
c001b324:	be 10 00 00 00       	mov    esi,0x10
c001b329:	eb 0d                	jmp    c001b338 <Reg::readInt(char*, char*, int*)+0x79>
c001b32b:	80 f9 62             	cmp    cl,0x62
c001b32e:	75 08                	jne    c001b338 <Reg::readInt(char*, char*, int*)+0x79>
c001b330:	83 c2 02             	add    edx,0x2
c001b333:	be 02 00 00 00       	mov    esi,0x2
c001b338:	01 d7                	add    edi,edx
c001b33a:	31 d2                	xor    edx,edx
c001b33c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b33e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b342:	80 fb 0d             	cmp    bl,0xd
c001b345:	0f 94 c3             	sete   bl
c001b348:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b34d:	0f 94 c1             	sete   cl
c001b350:	08 cb                	or     bl,cl
c001b352:	75 3a                	jne    c001b38e <Reg::readInt(char*, char*, int*)+0xcf>
c001b354:	0f af d6             	imul   edx,esi
c001b357:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b35c:	83 fe 10             	cmp    esi,0x10
c001b35f:	75 26                	jne    c001b387 <Reg::readInt(char*, char*, int*)+0xc8>
c001b361:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b365:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b368:	89 e9                	mov    ecx,ebp
c001b36a:	80 f9 05             	cmp    cl,0x5
c001b36d:	77 06                	ja     c001b375 <Reg::readInt(char*, char*, int*)+0xb6>
c001b36f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b373:	eb 16                	jmp    c001b38b <Reg::readInt(char*, char*, int*)+0xcc>
c001b375:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b379:	83 e9 61             	sub    ecx,0x61
c001b37c:	80 f9 05             	cmp    cl,0x5
c001b37f:	77 06                	ja     c001b387 <Reg::readInt(char*, char*, int*)+0xc8>
c001b381:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b385:	eb 04                	jmp    c001b38b <Reg::readInt(char*, char*, int*)+0xcc>
c001b387:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b38b:	47                   	inc    edi
c001b38c:	eb ae                	jmp    c001b33c <Reg::readInt(char*, char*, int*)+0x7d>
c001b38e:	84 c0                	test   al,al
c001b390:	74 02                	je     c001b394 <Reg::readInt(char*, char*, int*)+0xd5>
c001b392:	f7 da                	neg    edx
c001b394:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b39b:	89 10                	mov    DWORD PTR [eax],edx
c001b39d:	88 d8                	mov    al,bl
c001b39f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	5f                   	pop    edi
c001b3a8:	5d                   	pop    ebp
c001b3a9:	c3                   	ret    

c001b3aa <Reg::readString(char*, char*, char*, int)>:
c001b3aa:	57                   	push   edi
c001b3ab:	56                   	push   esi
c001b3ac:	53                   	push   ebx
c001b3ad:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3b3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3ba:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3be:	57                   	push   edi
c001b3bf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3c6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3cd:	e8 b6 fe ff ff       	call   c001b288 <Reg::getLine(char*, char*, char*)>
c001b3d2:	83 c4 10             	add    esp,0x10
c001b3d5:	89 c6                	mov    esi,eax
c001b3d7:	84 c0                	test   al,al
c001b3d9:	74 44                	je     c001b41f <Reg::readString(char*, char*, char*, int)+0x75>
c001b3db:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3e2:	31 c0                	xor    eax,eax
c001b3e4:	4a                   	dec    edx
c001b3e5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b3e8:	84 c9                	test   cl,cl
c001b3ea:	74 0f                	je     c001b3fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b3ec:	39 c2                	cmp    edx,eax
c001b3ee:	7e 0b                	jle    c001b3fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b3f0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b3f3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b3f8:	40                   	inc    eax
c001b3f9:	eb ea                	jmp    c001b3e5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b3fb:	83 ec 0c             	sub    esp,0xc
c001b3fe:	53                   	push   ebx
c001b3ff:	e8 a0 53 fe ff       	call   c00007a4 <strlen>
c001b404:	83 c4 10             	add    esp,0x10
c001b407:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b40c:	75 11                	jne    c001b41f <Reg::readString(char*, char*, char*, int)+0x75>
c001b40e:	83 ec 0c             	sub    esp,0xc
c001b411:	53                   	push   ebx
c001b412:	e8 8d 53 fe ff       	call   c00007a4 <strlen>
c001b417:	83 c4 10             	add    esp,0x10
c001b41a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b41f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b425:	89 f0                	mov    eax,esi
c001b427:	5b                   	pop    ebx
c001b428:	5e                   	pop    esi
c001b429:	5f                   	pop    edi
c001b42a:	c3                   	ret    

c001b42b <Reg::readBool(char*, char*, bool*)>:
c001b42b:	83 ec 20             	sub    esp,0x20
c001b42e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b432:	50                   	push   eax
c001b433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b43b:	e8 7f fe ff ff       	call   c001b2bf <Reg::readInt(char*, char*, int*)>
c001b440:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b445:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b449:	0f 95 02             	setne  BYTE PTR [edx]
c001b44c:	83 c4 2c             	add    esp,0x2c
c001b44f:	c3                   	ret    

c001b450 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b450:	53                   	push   ebx
c001b451:	83 ec 1c             	sub    esp,0x1c
c001b454:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b458:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b45c:	50                   	push   eax
c001b45d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b461:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b465:	e8 c1 ff ff ff       	call   c001b42b <Reg::readBool(char*, char*, bool*)>
c001b46a:	83 c4 10             	add    esp,0x10
c001b46d:	84 c0                	test   al,al
c001b46f:	74 04                	je     c001b475 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b471:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b475:	88 d8                	mov    al,bl
c001b477:	83 c4 18             	add    esp,0x18
c001b47a:	5b                   	pop    ebx
c001b47b:	c3                   	ret    

c001b47c <Reg::readIntWithDefault(char*, char*, int)>:
c001b47c:	53                   	push   ebx
c001b47d:	83 ec 1c             	sub    esp,0x1c
c001b480:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b484:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b488:	50                   	push   eax
c001b489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b491:	e8 29 fe ff ff       	call   c001b2bf <Reg::readInt(char*, char*, int*)>
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	84 c0                	test   al,al
c001b49b:	74 04                	je     c001b4a1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b49d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b4a1:	89 d8                	mov    eax,ebx
c001b4a3:	83 c4 18             	add    esp,0x18
c001b4a6:	5b                   	pop    ebx
c001b4a7:	c3                   	ret    

c001b4a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4a8:	57                   	push   edi
c001b4a9:	56                   	push   esi
c001b4aa:	53                   	push   ebx
c001b4ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4c1:	e8 e4 fe ff ff       	call   c001b3aa <Reg::readString(char*, char*, char*, int)>
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	84 c0                	test   al,al
c001b4cb:	75 1b                	jne    c001b4e8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b4cd:	50                   	push   eax
c001b4ce:	56                   	push   esi
c001b4cf:	4e                   	dec    esi
c001b4d0:	6a 00                	push   0x0
c001b4d2:	53                   	push   ebx
c001b4d3:	e8 b0 52 fe ff       	call   c0000788 <memset>
c001b4d8:	83 c4 0c             	add    esp,0xc
c001b4db:	56                   	push   esi
c001b4dc:	57                   	push   edi
c001b4dd:	53                   	push   ebx
c001b4de:	89 fb                	mov    ebx,edi
c001b4e0:	e8 83 52 fe ff       	call   c0000768 <memcpy>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	89 d8                	mov    eax,ebx
c001b4ea:	5b                   	pop    ebx
c001b4eb:	5e                   	pop    esi
c001b4ec:	5f                   	pop    edi
c001b4ed:	c3                   	ret    

c001b4ee <Sys::eject(regs*)>:
c001b4ee:	83 ec 0c             	sub    esp,0xc
c001b4f1:	83 ca ff             	or     edx,0xffffffff
c001b4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b4fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b500:	83 e9 41             	sub    ecx,0x41
c001b503:	83 f9 19             	cmp    ecx,0x19
c001b506:	77 18                	ja     c001b520 <Sys::eject(regs*)+0x32>
c001b508:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c001b50f:	85 c9                	test   ecx,ecx
c001b511:	74 0d                	je     c001b520 <Sys::eject(regs*)+0x32>
c001b513:	83 ec 0c             	sub    esp,0xc
c001b516:	51                   	push   ecx
c001b517:	e8 d8 b2 ff ff       	call   c00167f4 <LogicalDisk::eject()>
c001b51c:	83 c4 10             	add    esp,0x10
c001b51f:	99                   	cdq    
c001b520:	83 c4 0c             	add    esp,0xc
c001b523:	c3                   	ret    

c001b524 <Sys::exit(regs*)>:
c001b524:	83 ec 18             	sub    esp,0x18
c001b527:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b52b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b52e:	e8 86 38 00 00       	call   c001edb9 <terminateTask(int)>
c001b533:	83 c8 ff             	or     eax,0xffffffff
c001b536:	83 c4 1c             	add    esp,0x1c
c001b539:	89 c2                	mov    edx,eax
c001b53b:	c3                   	ret    

c001b53c <Sys::getCwd(regs*)>:
c001b53c:	83 ec 10             	sub    esp,0x10
c001b53f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b543:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b546:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b549:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b551:	e8 de 7c ff ff       	call   c0013234 <Fs::getcwd(Process*, char*, int)>
c001b556:	83 c4 1c             	add    esp,0x1c
c001b559:	99                   	cdq    
c001b55a:	c3                   	ret    

c001b55b <Sys::getPID(regs*)>:
c001b55b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b560:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b563:	8b 00                	mov    eax,DWORD PTR [eax]
c001b565:	99                   	cdq    
c001b566:	c3                   	ret    

c001b567 <Sys::getRAMData(regs*)>:
c001b567:	8b 0d 74 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee74
c001b56d:	6b 05 70 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee70,0x64
c001b574:	99                   	cdq    
c001b575:	f7 f9                	idiv   ecx
c001b577:	c1 e0 18             	shl    eax,0x18
c001b57a:	09 c8                	or     eax,ecx
c001b57c:	99                   	cdq    
c001b57d:	c3                   	ret    

c001b57e <Sys::getVGAPtr(regs*)>:
c001b57e:	56                   	push   esi
c001b57f:	53                   	push   ebx
c001b580:	83 ec 10             	sub    esp,0x10
c001b583:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b587:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b58a:	e8 0c 33 00 00       	call   c001e89b <Thr::processFromPID(int)>
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	89 c1                	mov    ecx,eax
c001b594:	b8 01 00 00 00       	mov    eax,0x1
c001b599:	85 c9                	test   ecx,ecx
c001b59b:	74 5d                	je     c001b5fa <Sys::getVGAPtr(regs*)+0x7c>
c001b59d:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b5a3:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b5a7:	74 0c                	je     c001b5b5 <Sys::getVGAPtr(regs*)+0x37>
c001b5a9:	83 ec 0c             	sub    esp,0xc
c001b5ac:	53                   	push   ebx
c001b5ad:	e8 44 57 ff ff       	call   c0010cf6 <setActiveTerminal(VgaText*)>
c001b5b2:	83 c4 10             	add    esp,0x10
c001b5b5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5bb:	50                   	push   eax
c001b5bc:	68 a0 0f 00 00       	push   0xfa0
c001b5c1:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b5c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5c7:	e8 9c 51 fe ff       	call   c0000768 <memcpy>
c001b5cc:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b5cf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5d2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5d8:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5db:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5de:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5e4:	58                   	pop    eax
c001b5e5:	5a                   	pop    edx
c001b5e6:	53                   	push   ebx
c001b5e7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5ea:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5ef:	50                   	push   eax
c001b5f0:	e8 4f 52 fe ff       	call   c0000844 <strcpy>
c001b5f5:	83 c4 10             	add    esp,0x10
c001b5f8:	31 c0                	xor    eax,eax
c001b5fa:	59                   	pop    ecx
c001b5fb:	31 d2                	xor    edx,edx
c001b5fd:	5b                   	pop    ebx
c001b5fe:	5e                   	pop    esi
c001b5ff:	c3                   	ret    

c001b600 <Sys::loadDLL(regs*)>:
c001b600:	56                   	push   esi
c001b601:	53                   	push   ebx
c001b602:	31 d2                	xor    edx,edx
c001b604:	51                   	push   ecx
c001b605:	b8 01 00 00 00       	mov    eax,0x1
c001b60a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b60e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b612:	0f 84 8c 00 00 00    	je     c001b6a4 <Sys::loadDLL(regs*)+0xa4>
c001b618:	83 ec 0c             	sub    esp,0xc
c001b61b:	68 14 01 00 00       	push   0x114
c001b620:	e8 f7 42 ff ff       	call   c000f91c <malloc>
c001b625:	83 c4 0c             	add    esp,0xc
c001b628:	89 c3                	mov    ebx,eax
c001b62a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b62f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b632:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b635:	53                   	push   ebx
c001b636:	e8 f7 7d ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	31 d2                	xor    edx,edx
c001b640:	b8 02 00 00 00       	mov    eax,0x2
c001b645:	85 db                	test   ebx,ebx
c001b647:	74 5b                	je     c001b6a4 <Sys::loadDLL(regs*)+0xa4>
c001b649:	83 ec 0c             	sub    esp,0xc
c001b64c:	53                   	push   ebx
c001b64d:	e8 b2 80 ff ff       	call   c0013704 <File::exists()>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	84 c0                	test   al,al
c001b657:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b659:	75 11                	jne    c001b66c <Sys::loadDLL(regs*)+0x6c>
c001b65b:	83 ec 0c             	sub    esp,0xc
c001b65e:	53                   	push   ebx
c001b65f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	b8 03 00 00 00       	mov    eax,0x3
c001b66a:	eb 36                	jmp    c001b6a2 <Sys::loadDLL(regs*)+0xa2>
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	53                   	push   ebx
c001b670:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b673:	58                   	pop    eax
c001b674:	5a                   	pop    edx
c001b675:	6a 00                	push   0x0
c001b677:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b67a:	e8 29 24 00 00       	call   c001daa8 <Thr::loadDLL(char const*, bool)>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	89 c1                	mov    ecx,eax
c001b684:	31 d2                	xor    edx,edx
c001b686:	b8 04 00 00 00       	mov    eax,0x4
c001b68b:	85 c9                	test   ecx,ecx
c001b68d:	74 15                	je     c001b6a4 <Sys::loadDLL(regs*)+0xa4>
c001b68f:	53                   	push   ebx
c001b690:	53                   	push   ebx
c001b691:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001b697:	51                   	push   ecx
c001b698:	e8 36 26 00 00       	call   c001dcd3 <Thr::executeDLL(unsigned long, void*)>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	31 c0                	xor    eax,eax
c001b6a2:	31 d2                	xor    edx,edx
c001b6a4:	59                   	pop    ecx
c001b6a5:	5b                   	pop    ebx
c001b6a6:	5e                   	pop    esi
c001b6a7:	c3                   	ret    

c001b6a8 <Sys::read(regs*)>:
c001b6a8:	57                   	push   edi
c001b6a9:	56                   	push   esi
c001b6aa:	53                   	push   ebx
c001b6ab:	83 ec 10             	sub    esp,0x10
c001b6ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6b5:	83 f8 02             	cmp    eax,0x2
c001b6b8:	77 10                	ja     c001b6ca <Sys::read(regs*)+0x22>
c001b6ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6c2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6c8:	eb 0e                	jmp    c001b6d8 <Sys::read(regs*)+0x30>
c001b6ca:	83 ec 0c             	sub    esp,0xc
c001b6cd:	50                   	push   eax
c001b6ce:	e8 a4 62 ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	89 c1                	mov    ecx,eax
c001b6d8:	83 c8 ff             	or     eax,0xffffffff
c001b6db:	85 c9                	test   ecx,ecx
c001b6dd:	89 c2                	mov    edx,eax
c001b6df:	74 28                	je     c001b709 <Sys::read(regs*)+0x61>
c001b6e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6e9:	31 ff                	xor    edi,edi
c001b6eb:	83 ec 0c             	sub    esp,0xc
c001b6ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6f0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6f4:	52                   	push   edx
c001b6f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6f8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6fb:	57                   	push   edi
c001b6fc:	56                   	push   esi
c001b6fd:	51                   	push   ecx
c001b6fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b701:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b705:	83 c4 20             	add    esp,0x20
c001b708:	99                   	cdq    
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	5b                   	pop    ebx
c001b70d:	5e                   	pop    esi
c001b70e:	5f                   	pop    edi
c001b70f:	c3                   	ret    

c001b710 <Sys::sbrk(regs*)>:
c001b710:	56                   	push   esi
c001b711:	53                   	push   ebx
c001b712:	50                   	push   eax
c001b713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b718:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b71c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b722:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b728:	85 db                	test   ebx,ebx
c001b72a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b72d:	74 02                	je     c001b731 <Sys::sbrk(regs*)+0x21>
c001b72f:	79 06                	jns    c001b737 <Sys::sbrk(regs*)+0x27>
c001b731:	89 f0                	mov    eax,esi
c001b733:	31 d2                	xor    edx,edx
c001b735:	eb 2a                	jmp    c001b761 <Sys::sbrk(regs*)+0x51>
c001b737:	83 c8 ff             	or     eax,0xffffffff
c001b73a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b740:	89 c2                	mov    edx,eax
c001b742:	77 1d                	ja     c001b761 <Sys::sbrk(regs*)+0x51>
c001b744:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b74a:	50                   	push   eax
c001b74b:	c1 ea 0c             	shr    edx,0xc
c001b74e:	68 07 0c 00 00       	push   0xc07
c001b753:	52                   	push   edx
c001b754:	51                   	push   ecx
c001b755:	e8 ac 6c ff ff       	call   c0012406 <VAS::allocatePages(int, int)>
c001b75a:	89 f0                	mov    eax,esi
c001b75c:	31 d2                	xor    edx,edx
c001b75e:	83 c4 10             	add    esp,0x10
c001b761:	59                   	pop    ecx
c001b762:	5b                   	pop    ebx
c001b763:	5e                   	pop    esi
c001b764:	c3                   	ret    

c001b765 <Sys::setCwd(regs*)>:
c001b765:	83 ec 14             	sub    esp,0x14
c001b768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b76c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b774:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b777:	e8 27 80 ff ff       	call   c00137a3 <Fs::setcwd(Process*, char*)>
c001b77c:	83 c4 1c             	add    esp,0x1c
c001b77f:	99                   	cdq    
c001b780:	c3                   	ret    

c001b781 <Sys::setTime(regs*)>:
c001b781:	55                   	push   ebp
c001b782:	31 d2                	xor    edx,edx
c001b784:	57                   	push   edi
c001b785:	bf 18 00 00 00       	mov    edi,0x18
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b791:	83 ec 30             	sub    esp,0x30
c001b794:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b798:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b79b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b79e:	f7 f3                	div    ebx
c001b7a0:	89 d6                	mov    esi,edx
c001b7a2:	31 d2                	xor    edx,edx
c001b7a4:	f7 f3                	div    ebx
c001b7a6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7ad:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	f7 f3                	div    ebx
c001b7b6:	31 d2                	xor    edx,edx
c001b7b8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7bd:	f7 f7                	div    edi
c001b7bf:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7c6:	0f b7 cd             	movzx  ecx,bp
c001b7c9:	56                   	push   esi
c001b7ca:	89 c7                	mov    edi,eax
c001b7cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7d0:	c1 e6 10             	shl    esi,0x10
c001b7d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7d7:	83 e7 1f             	and    edi,0x1f
c001b7da:	51                   	push   ecx
c001b7db:	47                   	inc    edi
c001b7dc:	c1 e8 05             	shr    eax,0x5
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	f7 f3                	div    ebx
c001b7e3:	31 db                	xor    ebx,ebx
c001b7e5:	52                   	push   edx
c001b7e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7ea:	57                   	push   edi
c001b7eb:	68 cd c6 02 c0       	push   0xc002c6cd
c001b7f0:	e8 de 76 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001b7f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7f9:	89 f8                	mov    eax,edi
c001b7fb:	31 c9                	xor    ecx,ecx
c001b7fd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b801:	88 c1                	mov    cl,al
c001b803:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b809:	88 d5                	mov    ch,dl
c001b80b:	c1 e0 10             	shl    eax,0x10
c001b80e:	0f b7 d1             	movzx  edx,cx
c001b811:	09 c2                	or     edx,eax
c001b813:	89 d8                	mov    eax,ebx
c001b815:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b81a:	09 f0                	or     eax,esi
c001b81c:	89 c3                	mov    ebx,eax
c001b81e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b822:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b826:	83 c4 18             	add    esp,0x18
c001b829:	53                   	push   ebx
c001b82a:	52                   	push   edx
c001b82b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b82f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b833:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b837:	e8 89 86 ff ff       	call   c0013ec5 <datetimeToSeconds(datetime_t)>
c001b83c:	83 c4 0c             	add    esp,0xc
c001b83f:	52                   	push   edx
c001b840:	50                   	push   eax
c001b841:	56                   	push   esi
c001b842:	e8 05 88 ff ff       	call   c001404c <secondsToDatetime(unsigned long long)>
c001b847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b84b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b84f:	51                   	push   ecx
c001b850:	89 d6                	mov    esi,edx
c001b852:	51                   	push   ecx
c001b853:	c1 ee 10             	shr    esi,0x10
c001b856:	89 f3                	mov    ebx,esi
c001b858:	0f b6 f3             	movzx  esi,bl
c001b85b:	56                   	push   esi
c001b85c:	0f b6 f6             	movzx  esi,dh
c001b85f:	0f b6 d2             	movzx  edx,dl
c001b862:	56                   	push   esi
c001b863:	52                   	push   edx
c001b864:	89 c2                	mov    edx,eax
c001b866:	c1 ea 10             	shr    edx,0x10
c001b869:	52                   	push   edx
c001b86a:	0f b6 d4             	movzx  edx,ah
c001b86d:	0f b6 c0             	movzx  eax,al
c001b870:	52                   	push   edx
c001b871:	50                   	push   eax
c001b872:	68 e9 c6 02 c0       	push   0xc002c6e9
c001b877:	e8 57 76 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001b87c:	83 c4 2c             	add    esp,0x2c
c001b87f:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001b884:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b888:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b88c:	53                   	push   ebx
c001b88d:	51                   	push   ecx
c001b88e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b894:	e8 53 87 ff ff       	call   c0013fec <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b899:	83 f0 01             	xor    eax,0x1
c001b89c:	31 d2                	xor    edx,edx
c001b89e:	0f b6 c0             	movzx  eax,al
c001b8a1:	83 c4 3c             	add    esp,0x3c
c001b8a4:	5b                   	pop    ebx
c001b8a5:	5e                   	pop    esi
c001b8a6:	5f                   	pop    edi
c001b8a7:	5d                   	pop    ebp
c001b8a8:	c3                   	ret    

c001b8a9 <Sys::timezone(regs*)>:
c001b8a9:	53                   	push   ebx
c001b8aa:	83 ec 08             	sub    esp,0x8
c001b8ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8b1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8b5:	75 17                	jne    c001b8ce <Sys::timezone(regs*)+0x25>
c001b8b7:	83 ec 0c             	sub    esp,0xc
c001b8ba:	68 05 c7 02 c0       	push   0xc002c705
c001b8bf:	e8 0f 76 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001b8c4:	83 c8 ff             	or     eax,0xffffffff
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	89 c2                	mov    edx,eax
c001b8cc:	eb 20                	jmp    c001b8ee <Sys::timezone(regs*)+0x45>
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	68 3d c7 02 c0       	push   0xc002c73d
c001b8d6:	e8 f8 75 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001b8db:	58                   	pop    eax
c001b8dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8df:	e8 6a 84 ff ff       	call   c0013d4e <User::loadClockSettings(int)>
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	b8 01 00 00 00       	mov    eax,0x1
c001b8ec:	31 d2                	xor    edx,edx
c001b8ee:	83 c4 08             	add    esp,0x8
c001b8f1:	5b                   	pop    ebx
c001b8f2:	c3                   	ret    

c001b8f3 <Sys::write(regs*)>:
c001b8f3:	57                   	push   edi
c001b8f4:	56                   	push   esi
c001b8f5:	53                   	push   ebx
c001b8f6:	83 ec 10             	sub    esp,0x10
c001b8f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b900:	83 f8 02             	cmp    eax,0x2
c001b903:	77 10                	ja     c001b915 <Sys::write(regs*)+0x22>
c001b905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b90d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b913:	eb 0e                	jmp    c001b923 <Sys::write(regs*)+0x30>
c001b915:	83 ec 0c             	sub    esp,0xc
c001b918:	50                   	push   eax
c001b919:	e8 59 60 ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	89 c1                	mov    ecx,eax
c001b923:	83 c8 ff             	or     eax,0xffffffff
c001b926:	85 c9                	test   ecx,ecx
c001b928:	89 c2                	mov    edx,eax
c001b92a:	74 28                	je     c001b954 <Sys::write(regs*)+0x61>
c001b92c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b934:	31 ff                	xor    edi,edi
c001b936:	83 ec 0c             	sub    esp,0xc
c001b939:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b93b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b93f:	52                   	push   edx
c001b940:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b943:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b946:	57                   	push   edi
c001b947:	56                   	push   esi
c001b948:	51                   	push   ecx
c001b949:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b94c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b950:	83 c4 20             	add    esp,0x20
c001b953:	99                   	cdq    
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	5b                   	pop    ebx
c001b958:	5e                   	pop    esi
c001b959:	5f                   	pop    edi
c001b95a:	c3                   	ret    

c001b95b <Sys::wsbe(regs*)>:
c001b95b:	57                   	push   edi
c001b95c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b961:	56                   	push   esi
c001b962:	be 7c c7 02 c0       	mov    esi,0xc002c77c
c001b967:	53                   	push   ebx
c001b968:	83 ec 30             	sub    esp,0x30
c001b96b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b96f:	fc                   	cld    
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b975:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b981:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b987:	8b 06                	mov    eax,DWORD PTR [esi]
c001b989:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b98c:	57                   	push   edi
c001b98d:	e8 12 4e fe ff       	call   c00007a4 <strlen>
c001b992:	5a                   	pop    edx
c001b993:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b997:	52                   	push   edx
c001b998:	31 d2                	xor    edx,edx
c001b99a:	57                   	push   edi
c001b99b:	52                   	push   edx
c001b99c:	50                   	push   eax
c001b99d:	56                   	push   esi
c001b99e:	ff d3                	call   ebx
c001b9a0:	83 c4 14             	add    esp,0x14
c001b9a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b9a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9aa:	e8 0a 34 00 00       	call   c001edb9 <terminateTask(int)>
c001b9af:	83 c4 40             	add    esp,0x40
c001b9b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9b7:	5b                   	pop    ebx
c001b9b8:	31 d2                	xor    edx,edx
c001b9ba:	5e                   	pop    esi
c001b9bb:	5f                   	pop    edi
c001b9bc:	c3                   	ret    

c001b9bd <Sys::yield(regs*)>:
c001b9bd:	57                   	push   edi
c001b9be:	56                   	push   esi
c001b9bf:	53                   	push   ebx
c001b9c0:	fa                   	cli    
c001b9c1:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001b9c7:	e8 ba 2a 00 00       	call   c001e486 <schedule()>
c001b9cc:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001b9d1:	48                   	dec    eax
c001b9d2:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001b9d7:	75 01                	jne    c001b9da <Sys::yield(regs*)+0x1d>
c001b9d9:	fb                   	sti    
c001b9da:	8b 35 b0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4b0
c001b9e0:	8b 3d b4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4b4
c001b9e6:	89 f0                	mov    eax,esi
c001b9e8:	89 fb                	mov    ebx,edi
c001b9ea:	89 f1                	mov    ecx,esi
c001b9ec:	c1 e0 07             	shl    eax,0x7
c001b9ef:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b9f3:	25 80 30 0f 00       	and    eax,0xf3080
c001b9f8:	c1 eb 17             	shr    ebx,0x17
c001b9fb:	31 c8                	xor    eax,ecx
c001b9fd:	89 da                	mov    edx,ebx
c001b9ff:	5b                   	pop    ebx
c001ba00:	5e                   	pop    esi
c001ba01:	5f                   	pop    edi
c001ba02:	c3                   	ret    

c001ba03 <sysCallSeekDir(regs*)>:
c001ba03:	31 c0                	xor    eax,eax
c001ba05:	31 d2                	xor    edx,edx
c001ba07:	c3                   	ret    

c001ba08 <sysCallTellDir(regs*)>:
c001ba08:	31 c0                	xor    eax,eax
c001ba0a:	31 d2                	xor    edx,edx
c001ba0c:	c3                   	ret    

c001ba0d <sysCallVerify(regs*)>:
c001ba0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba11:	31 d2                	xor    edx,edx
c001ba13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba16:	c3                   	ret    

c001ba17 <sysFormatDisk(regs*)>:
c001ba17:	56                   	push   esi
c001ba18:	53                   	push   ebx
c001ba19:	53                   	push   ebx
c001ba1a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba1e:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c001ba24:	eb 25                	jmp    c001ba4b <sysFormatDisk(regs*)+0x34>
c001ba26:	83 ec 0c             	sub    esp,0xc
c001ba29:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba2e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba31:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba34:	50                   	push   eax
c001ba35:	ff 34 85 40 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0bc0]
c001ba3c:	53                   	push   ebx
c001ba3d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba40:	83 c4 20             	add    esp,0x20
c001ba43:	83 f8 08             	cmp    eax,0x8
c001ba46:	75 12                	jne    c001ba5a <sysFormatDisk(regs*)+0x43>
c001ba48:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba4b:	85 db                	test   ebx,ebx
c001ba4d:	75 d7                	jne    c001ba26 <sysFormatDisk(regs*)+0xf>
c001ba4f:	59                   	pop    ecx
c001ba50:	b8 03 00 00 00       	mov    eax,0x3
c001ba55:	31 d2                	xor    edx,edx
c001ba57:	5b                   	pop    ebx
c001ba58:	5e                   	pop    esi
c001ba59:	c3                   	ret    
c001ba5a:	85 c0                	test   eax,eax
c001ba5c:	74 1b                	je     c001ba79 <sysFormatDisk(regs*)+0x62>
c001ba5e:	83 f8 09             	cmp    eax,0x9
c001ba61:	74 0b                	je     c001ba6e <sysFormatDisk(regs*)+0x57>
c001ba63:	59                   	pop    ecx
c001ba64:	b8 02 00 00 00       	mov    eax,0x2
c001ba69:	31 d2                	xor    edx,edx
c001ba6b:	5b                   	pop    ebx
c001ba6c:	5e                   	pop    esi
c001ba6d:	c3                   	ret    
c001ba6e:	59                   	pop    ecx
c001ba6f:	b8 01 00 00 00       	mov    eax,0x1
c001ba74:	31 d2                	xor    edx,edx
c001ba76:	5b                   	pop    ebx
c001ba77:	5e                   	pop    esi
c001ba78:	c3                   	ret    
c001ba79:	59                   	pop    ecx
c001ba7a:	31 c0                	xor    eax,eax
c001ba7c:	31 d2                	xor    edx,edx
c001ba7e:	5b                   	pop    ebx
c001ba7f:	5e                   	pop    esi
c001ba80:	c3                   	ret    

c001ba81 <sysSetDiskVolumeLabel(regs*)>:
c001ba81:	56                   	push   esi
c001ba82:	53                   	push   ebx
c001ba83:	53                   	push   ebx
c001ba84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba88:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba8b:	83 f8 19             	cmp    eax,0x19
c001ba8e:	77 29                	ja     c001bab9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba90:	8b 0c 85 40 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0bc0]
c001ba97:	85 c9                	test   ecx,ecx
c001ba99:	74 1e                	je     c001bab9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba9b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ba9e:	85 d2                	test   edx,edx
c001baa0:	74 17                	je     c001bab9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001baa2:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001baa8:	8b 33                	mov    esi,DWORD PTR [ebx]
c001baaa:	52                   	push   edx
c001baab:	50                   	push   eax
c001baac:	51                   	push   ecx
c001baad:	53                   	push   ebx
c001baae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	99                   	cdq    
c001bab5:	59                   	pop    ecx
c001bab6:	5b                   	pop    ebx
c001bab7:	5e                   	pop    esi
c001bab8:	c3                   	ret    
c001bab9:	59                   	pop    ecx
c001baba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001babf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bac4:	5b                   	pop    ebx
c001bac5:	5e                   	pop    esi
c001bac6:	c3                   	ret    

c001bac7 <sysGetDiskVolumeLabel(regs*)>:
c001bac7:	57                   	push   edi
c001bac8:	56                   	push   esi
c001bac9:	53                   	push   ebx
c001baca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bace:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bad1:	83 fa 19             	cmp    edx,0x19
c001bad4:	77 34                	ja     c001bb0a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bad6:	8b 0c 95 40 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0bc0]
c001badd:	85 c9                	test   ecx,ecx
c001badf:	74 29                	je     c001bb0a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bae1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bae4:	85 db                	test   ebx,ebx
c001bae6:	74 22                	je     c001bb0a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bae8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001baeb:	85 c0                	test   eax,eax
c001baed:	74 1b                	je     c001bb0a <sysGetDiskVolumeLabel(regs*)+0x43>
c001baef:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bafa:	50                   	push   eax
c001bafb:	53                   	push   ebx
c001bafc:	52                   	push   edx
c001bafd:	51                   	push   ecx
c001bafe:	56                   	push   esi
c001baff:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb02:	83 c4 20             	add    esp,0x20
c001bb05:	99                   	cdq    
c001bb06:	5b                   	pop    ebx
c001bb07:	5e                   	pop    esi
c001bb08:	5f                   	pop    edi
c001bb09:	c3                   	ret    
c001bb0a:	5b                   	pop    ebx
c001bb0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb10:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb15:	5e                   	pop    esi
c001bb16:	5f                   	pop    edi
c001bb17:	c3                   	ret    

c001bb18 <sysShutdown(regs*)>:
c001bb18:	83 ec 0c             	sub    esp,0xc
c001bb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb22:	85 c0                	test   eax,eax
c001bb24:	74 18                	je     c001bb3e <sysShutdown(regs*)+0x26>
c001bb26:	83 f8 01             	cmp    eax,0x1
c001bb29:	74 38                	je     c001bb63 <sysShutdown(regs*)+0x4b>
c001bb2b:	83 f8 02             	cmp    eax,0x2
c001bb2e:	74 24                	je     c001bb54 <sysShutdown(regs*)+0x3c>
c001bb30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb35:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb3a:	83 c4 0c             	add    esp,0xc
c001bb3d:	c3                   	ret    
c001bb3e:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001bb43:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb45:	6a 00                	push   0x0
c001bb47:	6a 00                	push   0x0
c001bb49:	6a 00                	push   0x0
c001bb4b:	50                   	push   eax
c001bb4c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb4f:	83 c4 10             	add    esp,0x10
c001bb52:	eb dc                	jmp    c001bb30 <sysShutdown(regs*)+0x18>
c001bb54:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001bb59:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb5b:	6a 00                	push   0x0
c001bb5d:	6a 00                	push   0x0
c001bb5f:	6a 01                	push   0x1
c001bb61:	eb e8                	jmp    c001bb4b <sysShutdown(regs*)+0x33>
c001bb63:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001bb68:	85 c0                	test   eax,eax
c001bb6a:	74 02                	je     c001bb6e <sysShutdown(regs*)+0x56>
c001bb6c:	ff d0                	call   eax
c001bb6e:	31 c0                	xor    eax,eax
c001bb70:	31 d2                	xor    edx,edx
c001bb72:	83 c4 0c             	add    esp,0xc
c001bb75:	c3                   	ret    

c001bb76 <sysCallRealpath(regs*)>:
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb80:	85 d2                	test   edx,edx
c001bb82:	74 07                	je     c001bb8b <sysCallRealpath(regs*)+0x15>
c001bb84:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb87:	85 c0                	test   eax,eax
c001bb89:	75 0b                	jne    c001bb96 <sysCallRealpath(regs*)+0x20>
c001bb8b:	b8 01 00 00 00       	mov    eax,0x1
c001bb90:	31 d2                	xor    edx,edx
c001bb92:	83 c4 0c             	add    esp,0xc
c001bb95:	c3                   	ret    
c001bb96:	51                   	push   ecx
c001bb97:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb9d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bba0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bba6:	51                   	push   ecx
c001bba7:	52                   	push   edx
c001bba8:	50                   	push   eax
c001bba9:	e8 da 76 ff ff       	call   c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	31 c0                	xor    eax,eax
c001bbb3:	31 d2                	xor    edx,edx
c001bbb5:	83 c4 0c             	add    esp,0xc
c001bbb8:	c3                   	ret    

c001bbb9 <sysCallGetArgc(regs*)>:
c001bbb9:	83 ec 14             	sub    esp,0x14
c001bbbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbc4:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbca:	68 a8 c7 02 c0       	push   0xc002c7a8
c001bbcf:	e8 ff 72 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bbd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbdc:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbe2:	83 c4 1c             	add    esp,0x1c
c001bbe5:	99                   	cdq    
c001bbe6:	c3                   	ret    

c001bbe7 <sysCallReadDir(regs*)>:
c001bbe7:	53                   	push   ebx
c001bbe8:	83 ec 18             	sub    esp,0x18
c001bbeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbf2:	83 f8 02             	cmp    eax,0x2
c001bbf5:	76 53                	jbe    c001bc4a <sysCallReadDir(regs*)+0x63>
c001bbf7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbfa:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc00:	77 4f                	ja     c001bc51 <sysCallReadDir(regs*)+0x6a>
c001bc02:	83 ec 0c             	sub    esp,0xc
c001bc05:	50                   	push   eax
c001bc06:	e8 6c 5d ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bc0b:	83 c4 10             	add    esp,0x10
c001bc0e:	85 c0                	test   eax,eax
c001bc10:	74 50                	je     c001bc62 <sysCallReadDir(regs*)+0x7b>
c001bc12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc1a:	83 ec 0c             	sub    esp,0xc
c001bc1d:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc1f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc23:	51                   	push   ecx
c001bc24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc27:	6a 00                	push   0x0
c001bc29:	68 10 01 00 00       	push   0x110
c001bc2e:	50                   	push   eax
c001bc2f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc32:	83 c4 20             	add    esp,0x20
c001bc35:	85 c0                	test   eax,eax
c001bc37:	74 38                	je     c001bc71 <sysCallReadDir(regs*)+0x8a>
c001bc39:	83 f8 07             	cmp    eax,0x7
c001bc3c:	74 0c                	je     c001bc4a <sysCallReadDir(regs*)+0x63>
c001bc3e:	b8 02 00 00 00       	mov    eax,0x2
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	83 c4 18             	add    esp,0x18
c001bc48:	5b                   	pop    ebx
c001bc49:	c3                   	ret    
c001bc4a:	b8 01 00 00 00       	mov    eax,0x1
c001bc4f:	eb f2                	jmp    c001bc43 <sysCallReadDir(regs*)+0x5c>
c001bc51:	83 ec 08             	sub    esp,0x8
c001bc54:	52                   	push   edx
c001bc55:	68 cc c8 02 c0       	push   0xc002c8cc
c001bc5a:	e8 74 72 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc67:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc6c:	83 c4 18             	add    esp,0x18
c001bc6f:	5b                   	pop    ebx
c001bc70:	c3                   	ret    
c001bc71:	31 c0                	xor    eax,eax
c001bc73:	eb ce                	jmp    c001bc43 <sysCallReadDir(regs*)+0x5c>

c001bc75 <sysCallIsATTY(regs*)>:
c001bc75:	83 ec 0c             	sub    esp,0xc
c001bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc7f:	83 f8 02             	cmp    eax,0x2
c001bc82:	76 07                	jbe    c001bc8b <sysCallIsATTY(regs*)+0x16>
c001bc84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc89:	75 26                	jne    c001bcb1 <sysCallIsATTY(regs*)+0x3c>
c001bc8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc93:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	74 24                	je     c001bcc1 <sysCallIsATTY(regs*)+0x4c>
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	8b 10                	mov    edx,DWORD PTR [eax]
c001bca2:	50                   	push   eax
c001bca3:	ff 12                	call   DWORD PTR [edx]
c001bca5:	31 d2                	xor    edx,edx
c001bca7:	0f b6 c0             	movzx  eax,al
c001bcaa:	83 c4 10             	add    esp,0x10
c001bcad:	83 c4 0c             	add    esp,0xc
c001bcb0:	c3                   	ret    
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	50                   	push   eax
c001bcb5:	e8 bd 5c ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	85 c0                	test   eax,eax
c001bcbf:	75 dc                	jne    c001bc9d <sysCallIsATTY(regs*)+0x28>
c001bcc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bccb:	83 c4 0c             	add    esp,0xc
c001bcce:	c3                   	ret    

c001bccf <sysCallSeek(regs*)>:
c001bccf:	53                   	push   ebx
c001bcd0:	83 ec 08             	sub    esp,0x8
c001bcd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcda:	83 f8 02             	cmp    eax,0x2
c001bcdd:	76 4a                	jbe    c001bd29 <sysCallSeek(regs*)+0x5a>
c001bcdf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bce4:	77 32                	ja     c001bd18 <sysCallSeek(regs*)+0x49>
c001bce6:	83 ec 0c             	sub    esp,0xc
c001bce9:	50                   	push   eax
c001bcea:	e8 88 5c ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bcef:	83 c4 0c             	add    esp,0xc
c001bcf2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bcf5:	31 db                	xor    ebx,ebx
c001bcf7:	53                   	push   ebx
c001bcf8:	51                   	push   ecx
c001bcf9:	50                   	push   eax
c001bcfa:	e8 55 78 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001bcff:	83 c4 10             	add    esp,0x10
c001bd02:	85 c0                	test   eax,eax
c001bd04:	0f 95 c0             	setne  al
c001bd07:	31 d2                	xor    edx,edx
c001bd09:	0f b6 c0             	movzx  eax,al
c001bd0c:	f7 d8                	neg    eax
c001bd0e:	83 d2 00             	adc    edx,0x0
c001bd11:	83 c4 08             	add    esp,0x8
c001bd14:	f7 da                	neg    edx
c001bd16:	5b                   	pop    ebx
c001bd17:	c3                   	ret    
c001bd18:	83 ec 08             	sub    esp,0x8
c001bd1b:	50                   	push   eax
c001bd1c:	68 b3 c7 02 c0       	push   0xc002c7b3
c001bd21:	e8 ad 71 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bd26:	83 c4 10             	add    esp,0x10
c001bd29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd33:	83 c4 08             	add    esp,0x8
c001bd36:	5b                   	pop    ebx
c001bd37:	c3                   	ret    

c001bd38 <sysCallTell(regs*)>:
c001bd38:	53                   	push   ebx
c001bd39:	83 ec 08             	sub    esp,0x8
c001bd3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd43:	83 f8 02             	cmp    eax,0x2
c001bd46:	76 5e                	jbe    c001bda6 <sysCallTell(regs*)+0x6e>
c001bd48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd4d:	77 2d                	ja     c001bd7c <sysCallTell(regs*)+0x44>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	50                   	push   eax
c001bd53:	e8 1f 5c ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bd58:	5a                   	pop    edx
c001bd59:	59                   	pop    ecx
c001bd5a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd5d:	50                   	push   eax
c001bd5e:	e8 47 78 ff ff       	call   c00135aa <File::tell(unsigned long long*)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	85 c0                	test   eax,eax
c001bd68:	0f 95 c0             	setne  al
c001bd6b:	31 d2                	xor    edx,edx
c001bd6d:	0f b6 c0             	movzx  eax,al
c001bd70:	f7 d8                	neg    eax
c001bd72:	83 d2 00             	adc    edx,0x0
c001bd75:	83 c4 08             	add    esp,0x8
c001bd78:	f7 da                	neg    edx
c001bd7a:	5b                   	pop    ebx
c001bd7b:	c3                   	ret    
c001bd7c:	83 ec 08             	sub    esp,0x8
c001bd7f:	50                   	push   eax
c001bd80:	68 cd c7 02 c0       	push   0xc002c7cd
c001bd85:	e8 49 71 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bd8a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd8d:	83 c4 10             	add    esp,0x10
c001bd90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd9d:	31 d2                	xor    edx,edx
c001bd9f:	31 c0                	xor    eax,eax
c001bda1:	83 c4 08             	add    esp,0x8
c001bda4:	5b                   	pop    ebx
c001bda5:	c3                   	ret    
c001bda6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb0:	83 c4 08             	add    esp,0x8
c001bdb3:	5b                   	pop    ebx
c001bdb4:	c3                   	ret    

c001bdb5 <sysCallSize(regs*)>:
c001bdb5:	53                   	push   ebx
c001bdb6:	83 ec 18             	sub    esp,0x18
c001bdb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdbd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdc0:	83 f8 02             	cmp    eax,0x2
c001bdc3:	76 64                	jbe    c001be29 <sysCallSize(regs*)+0x74>
c001bdc5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdca:	77 33                	ja     c001bdff <sysCallSize(regs*)+0x4a>
c001bdcc:	83 ec 0c             	sub    esp,0xc
c001bdcf:	50                   	push   eax
c001bdd0:	e8 a2 5b ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bdd5:	83 c4 0c             	add    esp,0xc
c001bdd8:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bddc:	52                   	push   edx
c001bddd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bde0:	50                   	push   eax
c001bde1:	e8 5c 79 ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	85 c0                	test   eax,eax
c001bdeb:	0f 95 c0             	setne  al
c001bdee:	31 d2                	xor    edx,edx
c001bdf0:	0f b6 c0             	movzx  eax,al
c001bdf3:	f7 d8                	neg    eax
c001bdf5:	83 d2 00             	adc    edx,0x0
c001bdf8:	83 c4 18             	add    esp,0x18
c001bdfb:	f7 da                	neg    edx
c001bdfd:	5b                   	pop    ebx
c001bdfe:	c3                   	ret    
c001bdff:	83 ec 08             	sub    esp,0x8
c001be02:	50                   	push   eax
c001be03:	68 e7 c7 02 c0       	push   0xc002c7e7
c001be08:	e8 c6 70 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001be0d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be20:	31 d2                	xor    edx,edx
c001be22:	31 c0                	xor    eax,eax
c001be24:	83 c4 18             	add    esp,0x18
c001be27:	5b                   	pop    ebx
c001be28:	c3                   	ret    
c001be29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be33:	83 c4 18             	add    esp,0x18
c001be36:	5b                   	pop    ebx
c001be37:	c3                   	ret    

c001be38 <sysCallSizeFromFilename(regs*)>:
c001be38:	57                   	push   edi
c001be39:	56                   	push   esi
c001be3a:	53                   	push   ebx
c001be3b:	83 ec 20             	sub    esp,0x20
c001be3e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be42:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be45:	83 fb 02             	cmp    ebx,0x2
c001be48:	0f 86 99 00 00 00    	jbe    c001bee7 <sysCallSizeFromFilename(regs*)+0xaf>
c001be4e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be54:	77 65                	ja     c001bebb <sysCallSizeFromFilename(regs*)+0x83>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	68 14 01 00 00       	push   0x114
c001be5e:	e8 b9 3a ff ff       	call   c000f91c <malloc>
c001be63:	83 c4 0c             	add    esp,0xc
c001be66:	89 c6                	mov    esi,eax
c001be68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be70:	53                   	push   ebx
c001be71:	56                   	push   esi
c001be72:	e8 bb 75 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001be77:	83 c4 0c             	add    esp,0xc
c001be7a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be7e:	50                   	push   eax
c001be7f:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be82:	56                   	push   esi
c001be83:	e8 ba 78 ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001be88:	83 c4 10             	add    esp,0x10
c001be8b:	85 f6                	test   esi,esi
c001be8d:	74 14                	je     c001bea3 <sysCallSizeFromFilename(regs*)+0x6b>
c001be8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be93:	8b 16                	mov    edx,DWORD PTR [esi]
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	56                   	push   esi
c001be99:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be9c:	83 c4 10             	add    esp,0x10
c001be9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bea3:	85 c0                	test   eax,eax
c001bea5:	0f 95 c0             	setne  al
c001bea8:	31 d2                	xor    edx,edx
c001beaa:	0f b6 c0             	movzx  eax,al
c001bead:	f7 d8                	neg    eax
c001beaf:	83 d2 00             	adc    edx,0x0
c001beb2:	83 c4 20             	add    esp,0x20
c001beb5:	f7 da                	neg    edx
c001beb7:	5b                   	pop    ebx
c001beb8:	5e                   	pop    esi
c001beb9:	5f                   	pop    edi
c001beba:	c3                   	ret    
c001bebb:	83 ec 08             	sub    esp,0x8
c001bebe:	53                   	push   ebx
c001bebf:	68 e7 c7 02 c0       	push   0xc002c7e7
c001bec4:	e8 0a 70 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bec9:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001becc:	83 c4 10             	add    esp,0x10
c001becf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bed5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bedc:	31 d2                	xor    edx,edx
c001bede:	83 c4 20             	add    esp,0x20
c001bee1:	31 c0                	xor    eax,eax
c001bee3:	5b                   	pop    ebx
c001bee4:	5e                   	pop    esi
c001bee5:	5f                   	pop    edi
c001bee6:	c3                   	ret    
c001bee7:	83 c4 20             	add    esp,0x20
c001beea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beef:	5b                   	pop    ebx
c001bef0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bef5:	5e                   	pop    esi
c001bef6:	5f                   	pop    edi
c001bef7:	c3                   	ret    

c001bef8 <sysCallClose(regs*)>:
c001bef8:	53                   	push   ebx
c001bef9:	83 ec 08             	sub    esp,0x8
c001befc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf03:	83 f8 02             	cmp    eax,0x2
c001bf06:	76 50                	jbe    c001bf58 <sysCallClose(regs*)+0x60>
c001bf08:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf0d:	74 58                	je     c001bf67 <sysCallClose(regs*)+0x6f>
c001bf0f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf14:	74 60                	je     c001bf76 <sysCallClose(regs*)+0x7e>
c001bf16:	77 2f                	ja     c001bf47 <sysCallClose(regs*)+0x4f>
c001bf18:	83 ec 0c             	sub    esp,0xc
c001bf1b:	50                   	push   eax
c001bf1c:	e8 56 5a ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001bf21:	89 c3                	mov    ebx,eax
c001bf23:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf26:	e8 c9 75 ff ff       	call   c00134f4 <File::close()>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	85 db                	test   ebx,ebx
c001bf30:	74 0c                	je     c001bf3e <sysCallClose(regs*)+0x46>
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf37:	53                   	push   ebx
c001bf38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	31 c0                	xor    eax,eax
c001bf40:	31 d2                	xor    edx,edx
c001bf42:	83 c4 08             	add    esp,0x8
c001bf45:	5b                   	pop    ebx
c001bf46:	c3                   	ret    
c001bf47:	83 ec 08             	sub    esp,0x8
c001bf4a:	50                   	push   eax
c001bf4b:	68 f0 c8 02 c0       	push   0xc002c8f0
c001bf50:	e8 7e 6f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf62:	83 c4 08             	add    esp,0x8
c001bf65:	5b                   	pop    ebx
c001bf66:	c3                   	ret    
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	68 02 c8 02 c0       	push   0xc002c802
c001bf6f:	e8 5f 6f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001bf74:	eb c5                	jmp    c001bf3b <sysCallClose(regs*)+0x43>
c001bf76:	83 ec 0c             	sub    esp,0xc
c001bf79:	68 10 c8 02 c0       	push   0xc002c810
c001bf7e:	eb ef                	jmp    c001bf6f <sysCallClose(regs*)+0x77>

c001bf80 <sysCallOpenDir(regs*)>:
c001bf80:	56                   	push   esi
c001bf81:	53                   	push   ebx
c001bf82:	53                   	push   ebx
c001bf83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf87:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf8a:	85 f6                	test   esi,esi
c001bf8c:	74 59                	je     c001bfe7 <sysCallOpenDir(regs*)+0x67>
c001bf8e:	83 ec 0c             	sub    esp,0xc
c001bf91:	68 14 01 00 00       	push   0x114
c001bf96:	e8 81 39 ff ff       	call   c000f91c <malloc>
c001bf9b:	83 c4 0c             	add    esp,0xc
c001bf9e:	89 c6                	mov    esi,eax
c001bfa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfa5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfa8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfab:	56                   	push   esi
c001bfac:	e8 2d 79 ff ff       	call   c00138de <Directory::Directory(char const*, Process*)>
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	85 f6                	test   esi,esi
c001bfb6:	74 2f                	je     c001bfe7 <sysCallOpenDir(regs*)+0x67>
c001bfb8:	83 ec 0c             	sub    esp,0xc
c001bfbb:	56                   	push   esi
c001bfbc:	e8 81 79 ff ff       	call   c0013942 <Directory::open()>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	85 c0                	test   eax,eax
c001bfc6:	75 1f                	jne    c001bfe7 <sysCallOpenDir(regs*)+0x67>
c001bfc8:	83 ec 0c             	sub    esp,0xc
c001bfcb:	56                   	push   esi
c001bfcc:	e8 b1 56 ff ff       	call   c0011682 <UnixFile::getFileDescriptor()>
c001bfd1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfd4:	83 c4 10             	add    esp,0x10
c001bfd7:	89 02                	mov    DWORD PTR [edx],eax
c001bfd9:	c1 f8 1f             	sar    eax,0x1f
c001bfdc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfdf:	31 c0                	xor    eax,eax
c001bfe1:	59                   	pop    ecx
c001bfe2:	31 d2                	xor    edx,edx
c001bfe4:	5b                   	pop    ebx
c001bfe5:	5e                   	pop    esi
c001bfe6:	c3                   	ret    
c001bfe7:	59                   	pop    ecx
c001bfe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfed:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bff2:	5b                   	pop    ebx
c001bff3:	5e                   	pop    esi
c001bff4:	c3                   	ret    

c001bff5 <sysCallCloseDir(regs*)>:
c001bff5:	53                   	push   ebx
c001bff6:	83 ec 08             	sub    esp,0x8
c001bff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c000:	83 f8 02             	cmp    eax,0x2
c001c003:	76 47                	jbe    c001c04c <sysCallCloseDir(regs*)+0x57>
c001c005:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c00a:	77 2f                	ja     c001c03b <sysCallCloseDir(regs*)+0x46>
c001c00c:	83 ec 0c             	sub    esp,0xc
c001c00f:	50                   	push   eax
c001c010:	e8 62 59 ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001c015:	89 c3                	mov    ebx,eax
c001c017:	89 04 24             	mov    DWORD PTR [esp],eax
c001c01a:	e8 7f 79 ff ff       	call   c001399e <Directory::close()>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	85 db                	test   ebx,ebx
c001c024:	74 0c                	je     c001c032 <sysCallCloseDir(regs*)+0x3d>
c001c026:	83 ec 0c             	sub    esp,0xc
c001c029:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c02b:	53                   	push   ebx
c001c02c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	31 c0                	xor    eax,eax
c001c034:	31 d2                	xor    edx,edx
c001c036:	83 c4 08             	add    esp,0x8
c001c039:	5b                   	pop    ebx
c001c03a:	c3                   	ret    
c001c03b:	83 ec 08             	sub    esp,0x8
c001c03e:	50                   	push   eax
c001c03f:	68 18 c9 02 c0       	push   0xc002c918
c001c044:	e8 8a 6e ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c051:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c056:	83 c4 08             	add    esp,0x8
c001c059:	5b                   	pop    ebx
c001c05a:	c3                   	ret    

c001c05b <sysCallMakeDir(regs*)>:
c001c05b:	56                   	push   esi
c001c05c:	53                   	push   ebx
c001c05d:	83 ec 10             	sub    esp,0x10
c001c060:	68 14 01 00 00       	push   0x114
c001c065:	e8 b2 38 ff ff       	call   c000f91c <malloc>
c001c06a:	83 c4 0c             	add    esp,0xc
c001c06d:	89 c3                	mov    ebx,eax
c001c06f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c074:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c077:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c07b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c07e:	53                   	push   ebx
c001c07f:	e8 5a 78 ff ff       	call   c00138de <Directory::Directory(char const*, Process*)>
c001c084:	83 c4 10             	add    esp,0x10
c001c087:	85 db                	test   ebx,ebx
c001c089:	74 32                	je     c001c0bd <sysCallMakeDir(regs*)+0x62>
c001c08b:	83 ec 0c             	sub    esp,0xc
c001c08e:	53                   	push   ebx
c001c08f:	e8 8e 7a ff ff       	call   c0013b22 <Directory::create()>
c001c094:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c097:	89 c6                	mov    esi,eax
c001c099:	e8 00 79 ff ff       	call   c001399e <Directory::close()>
c001c09e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0a6:	83 c4 10             	add    esp,0x10
c001c0a9:	31 c0                	xor    eax,eax
c001c0ab:	59                   	pop    ecx
c001c0ac:	85 f6                	test   esi,esi
c001c0ae:	5b                   	pop    ebx
c001c0af:	0f 95 c0             	setne  al
c001c0b2:	5e                   	pop    esi
c001c0b3:	31 d2                	xor    edx,edx
c001c0b5:	f7 d8                	neg    eax
c001c0b7:	83 d2 00             	adc    edx,0x0
c001c0ba:	f7 da                	neg    edx
c001c0bc:	c3                   	ret    
c001c0bd:	59                   	pop    ecx
c001c0be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0c8:	5b                   	pop    ebx
c001c0c9:	5e                   	pop    esi
c001c0ca:	c3                   	ret    

c001c0cb <sysCallWait(regs*)>:
c001c0cb:	83 ec 10             	sub    esp,0x10
c001c0ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0d2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0d5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0db:	e8 d2 25 00 00       	call   c001e6b2 <waitTask(int, int*, int)>
c001c0e0:	83 c4 1c             	add    esp,0x1c
c001c0e3:	99                   	cdq    
c001c0e4:	c3                   	ret    

c001c0e5 <sysCallNotImpl(regs*)>:
c001c0e5:	83 ec 18             	sub    esp,0x18
c001c0e8:	68 1e c8 02 c0       	push   0xc002c81e
c001c0ed:	e8 9d e7 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001c0f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0fc:	83 c4 1c             	add    esp,0x1c
c001c0ff:	c3                   	ret    

c001c100 <sysPanic(regs*)>:
c001c100:	83 ec 18             	sub    esp,0x18
c001c103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c107:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c10a:	e8 80 e7 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001c10f:	c7 04 24 38 c8 02 c0 	mov    DWORD PTR [esp],0xc002c838
c001c116:	e8 74 e7 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001c11b:	b8 01 00 00 00       	mov    eax,0x1
c001c120:	31 d2                	xor    edx,edx
c001c122:	83 c4 1c             	add    esp,0x1c
c001c125:	c3                   	ret    

c001c126 <sysCallRmdir(regs*)>:
c001c126:	56                   	push   esi
c001c127:	53                   	push   ebx
c001c128:	83 ec 20             	sub    esp,0x20
c001c12b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c12f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c132:	68 14 01 00 00       	push   0x114
c001c137:	e8 e0 37 ff ff       	call   c000f91c <malloc>
c001c13c:	83 c4 0c             	add    esp,0xc
c001c13f:	89 c3                	mov    ebx,eax
c001c141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c146:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c149:	56                   	push   esi
c001c14a:	53                   	push   ebx
c001c14b:	e8 e2 72 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001c150:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c153:	e8 b6 74 ff ff       	call   c001360e <File::unlink()>
c001c158:	83 c4 10             	add    esp,0x10
c001c15b:	85 db                	test   ebx,ebx
c001c15d:	74 14                	je     c001c173 <sysCallRmdir(regs*)+0x4d>
c001c15f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c163:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c165:	83 ec 0c             	sub    esp,0xc
c001c168:	53                   	push   ebx
c001c169:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c173:	85 c0                	test   eax,eax
c001c175:	0f 95 c0             	setne  al
c001c178:	31 d2                	xor    edx,edx
c001c17a:	0f b6 c0             	movzx  eax,al
c001c17d:	f7 d8                	neg    eax
c001c17f:	83 d2 00             	adc    edx,0x0
c001c182:	83 c4 14             	add    esp,0x14
c001c185:	f7 da                	neg    edx
c001c187:	5b                   	pop    ebx
c001c188:	5e                   	pop    esi
c001c189:	c3                   	ret    

c001c18a <sysCallUnlink(regs*)>:
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	83 ec 20             	sub    esp,0x20
c001c18f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c193:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c196:	68 14 01 00 00       	push   0x114
c001c19b:	e8 7c 37 ff ff       	call   c000f91c <malloc>
c001c1a0:	83 c4 0c             	add    esp,0xc
c001c1a3:	89 c3                	mov    ebx,eax
c001c1a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1ad:	56                   	push   esi
c001c1ae:	53                   	push   ebx
c001c1af:	e8 7e 72 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001c1b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1b7:	e8 52 74 ff ff       	call   c001360e <File::unlink()>
c001c1bc:	83 c4 10             	add    esp,0x10
c001c1bf:	85 db                	test   ebx,ebx
c001c1c1:	74 14                	je     c001c1d7 <sysCallUnlink(regs*)+0x4d>
c001c1c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1c9:	83 ec 0c             	sub    esp,0xc
c001c1cc:	53                   	push   ebx
c001c1cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1d7:	85 c0                	test   eax,eax
c001c1d9:	0f 95 c0             	setne  al
c001c1dc:	31 d2                	xor    edx,edx
c001c1de:	0f b6 c0             	movzx  eax,al
c001c1e1:	f7 d8                	neg    eax
c001c1e3:	83 d2 00             	adc    edx,0x0
c001c1e6:	83 c4 14             	add    esp,0x14
c001c1e9:	f7 da                	neg    edx
c001c1eb:	5b                   	pop    ebx
c001c1ec:	5e                   	pop    esi
c001c1ed:	c3                   	ret    

c001c1ee <sysCallGetArgv(regs*)>:
c001c1ee:	83 ec 0c             	sub    esp,0xc
c001c1f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c1f5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c1f8:	85 c0                	test   eax,eax
c001c1fa:	78 2b                	js     c001c227 <sysCallGetArgv(regs*)+0x39>
c001c1fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c202:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c205:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c20b:	7d 1a                	jge    c001c227 <sysCallGetArgv(regs*)+0x39>
c001c20d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c214:	85 c0                	test   eax,eax
c001c216:	74 17                	je     c001c22f <sysCallGetArgv(regs*)+0x41>
c001c218:	83 ec 08             	sub    esp,0x8
c001c21b:	50                   	push   eax
c001c21c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c21f:	e8 20 46 fe ff       	call   c0000844 <strcpy>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	31 c0                	xor    eax,eax
c001c229:	31 d2                	xor    edx,edx
c001c22b:	83 c4 0c             	add    esp,0xc
c001c22e:	c3                   	ret    
c001c22f:	b8 01 00 00 00       	mov    eax,0x1
c001c234:	31 d2                	xor    edx,edx
c001c236:	83 c4 0c             	add    esp,0xc
c001c239:	c3                   	ret    

c001c23a <sysCallTTYName(regs*)>:
c001c23a:	56                   	push   esi
c001c23b:	53                   	push   ebx
c001c23c:	53                   	push   ebx
c001c23d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c241:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c244:	85 c0                	test   eax,eax
c001c246:	74 5f                	je     c001c2a7 <sysCallTTYName(regs*)+0x6d>
c001c248:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c24b:	83 f8 02             	cmp    eax,0x2
c001c24e:	77 3e                	ja     c001c28e <sysCallTTYName(regs*)+0x54>
c001c250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c255:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c258:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c25e:	85 db                	test   ebx,ebx
c001c260:	74 45                	je     c001c2a7 <sysCallTTYName(regs*)+0x6d>
c001c262:	83 ec 0c             	sub    esp,0xc
c001c265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c267:	53                   	push   ebx
c001c268:	ff 10                	call   DWORD PTR [eax]
c001c26a:	83 c4 10             	add    esp,0x10
c001c26d:	84 c0                	test   al,al
c001c26f:	74 41                	je     c001c2b2 <sysCallTTYName(regs*)+0x78>
c001c271:	83 ec 08             	sub    esp,0x8
c001c274:	81 c3 82 00 00 00    	add    ebx,0x82
c001c27a:	53                   	push   ebx
c001c27b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c27e:	e8 c1 45 fe ff       	call   c0000844 <strcpy>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	31 c0                	xor    eax,eax
c001c288:	59                   	pop    ecx
c001c289:	31 d2                	xor    edx,edx
c001c28b:	5b                   	pop    ebx
c001c28c:	5e                   	pop    esi
c001c28d:	c3                   	ret    
c001c28e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c293:	74 bb                	je     c001c250 <sysCallTTYName(regs*)+0x16>
c001c295:	83 ec 0c             	sub    esp,0xc
c001c298:	50                   	push   eax
c001c299:	e8 d9 56 ff ff       	call   c0011977 <getFromFileDescriptor(int)>
c001c29e:	83 c4 10             	add    esp,0x10
c001c2a1:	89 c3                	mov    ebx,eax
c001c2a3:	85 db                	test   ebx,ebx
c001c2a5:	75 bb                	jne    c001c262 <sysCallTTYName(regs*)+0x28>
c001c2a7:	59                   	pop    ecx
c001c2a8:	b8 01 00 00 00       	mov    eax,0x1
c001c2ad:	31 d2                	xor    edx,edx
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	c3                   	ret    
c001c2b2:	59                   	pop    ecx
c001c2b3:	b8 02 00 00 00       	mov    eax,0x2
c001c2b8:	31 d2                	xor    edx,edx
c001c2ba:	5b                   	pop    ebx
c001c2bb:	5e                   	pop    esi
c001c2bc:	c3                   	ret    

c001c2bd <sysCallUSleep(regs*)>:
c001c2bd:	83 ec 14             	sub    esp,0x14
c001c2c0:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2c9:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2d0:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2d3:	01 ca                	add    edx,ecx
c001c2d5:	52                   	push   edx
c001c2d6:	50                   	push   eax
c001c2d7:	e8 ad 24 00 00       	call   c001e789 <nanoSleep(unsigned long long)>
c001c2dc:	31 c0                	xor    eax,eax
c001c2de:	31 d2                	xor    edx,edx
c001c2e0:	83 c4 1c             	add    esp,0x1c
c001c2e3:	c3                   	ret    

c001c2e4 <sysCallSpawn(regs*)>:
c001c2e4:	56                   	push   esi
c001c2e5:	53                   	push   ebx
c001c2e6:	50                   	push   eax
c001c2e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2ee:	85 c0                	test   eax,eax
c001c2f0:	75 08                	jne    c001c2fa <sysCallSpawn(regs*)+0x16>
c001c2f2:	59                   	pop    ecx
c001c2f3:	31 c0                	xor    eax,eax
c001c2f5:	31 d2                	xor    edx,edx
c001c2f7:	5b                   	pop    ebx
c001c2f8:	5e                   	pop    esi
c001c2f9:	c3                   	ret    
c001c2fa:	83 ec 08             	sub    esp,0x8
c001c2fd:	50                   	push   eax
c001c2fe:	68 47 c8 02 c0       	push   0xc002c847
c001c303:	e8 cb 6b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c308:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c30f:	e8 08 36 ff ff       	call   c000f91c <malloc>
c001c314:	83 c4 10             	add    esp,0x10
c001c317:	89 c6                	mov    esi,eax
c001c319:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c31c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c31f:	85 c0                	test   eax,eax
c001c321:	75 32                	jne    c001c355 <sysCallSpawn(regs*)+0x71>
c001c323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c328:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c32b:	52                   	push   edx
c001c32c:	50                   	push   eax
c001c32d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c330:	56                   	push   esi
c001c331:	e8 30 1b 00 00       	call   c001de66 <Process::Process(char const*, Process*, char**)>
c001c336:	83 c4 10             	add    esp,0x10
c001c339:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c340:	75 b0                	jne    c001c2f2 <sysCallSpawn(regs*)+0xe>
c001c342:	83 ec 0c             	sub    esp,0xc
c001c345:	56                   	push   esi
c001c346:	e8 fd 1f 00 00       	call   c001e348 <Process::createUserThread()>
c001c34b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	99                   	cdq    
c001c351:	59                   	pop    ecx
c001c352:	5b                   	pop    ebx
c001c353:	5e                   	pop    esi
c001c354:	c3                   	ret    
c001c355:	31 c0                	xor    eax,eax
c001c357:	eb d2                	jmp    c001c32b <sysCallSpawn(regs*)+0x47>

c001c359 <sysCallGetEnv(regs*)>:
c001c359:	55                   	push   ebp
c001c35a:	57                   	push   edi
c001c35b:	56                   	push   esi
c001c35c:	53                   	push   ebx
c001c35d:	83 ec 28             	sub    esp,0x28
c001c360:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c364:	68 55 c8 02 c0       	push   0xc002c855
c001c369:	e8 65 6b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c36e:	5f                   	pop    edi
c001c36f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c372:	5d                   	pop    ebp
c001c373:	53                   	push   ebx
c001c374:	68 82 cb 02 c0       	push   0xc002cb82
c001c379:	e8 55 6b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c37e:	58                   	pop    eax
c001c37f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c382:	5a                   	pop    edx
c001c383:	57                   	push   edi
c001c384:	68 5e c8 02 c0       	push   0xc002c85e
c001c389:	e8 45 6b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c38e:	59                   	pop    ecx
c001c38f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c394:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c397:	e8 0f e4 ff ff       	call   c001a7ab <Krnl::getProcessTotalEnvCount(Process*)>
c001c39c:	5a                   	pop    edx
c001c39d:	89 c5                	mov    ebp,eax
c001c39f:	59                   	pop    ecx
c001c3a0:	50                   	push   eax
c001c3a1:	68 68 c8 02 c0       	push   0xc002c868
c001c3a6:	e8 28 6b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c3ab:	83 c4 10             	add    esp,0x10
c001c3ae:	39 ef                	cmp    edi,ebp
c001c3b0:	7c 15                	jl     c001c3c7 <sysCallGetEnv(regs*)+0x6e>
c001c3b2:	85 db                	test   ebx,ebx
c001c3b4:	75 0c                	jne    c001c3c2 <sysCallGetEnv(regs*)+0x69>
c001c3b6:	83 c4 1c             	add    esp,0x1c
c001c3b9:	31 c0                	xor    eax,eax
c001c3bb:	5b                   	pop    ebx
c001c3bc:	31 d2                	xor    edx,edx
c001c3be:	5e                   	pop    esi
c001c3bf:	5f                   	pop    edi
c001c3c0:	5d                   	pop    ebp
c001c3c1:	c3                   	ret    
c001c3c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3c5:	eb ef                	jmp    c001c3b6 <sysCallGetEnv(regs*)+0x5d>
c001c3c7:	83 ec 0c             	sub    esp,0xc
c001c3ca:	68 74 c8 02 c0       	push   0xc002c874
c001c3cf:	e8 ff 6a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c3d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3d8:	83 c4 0c             	add    esp,0xc
c001c3db:	57                   	push   edi
c001c3dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3e2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3e5:	50                   	push   eax
c001c3e6:	e8 e0 e3 ff ff       	call   c001a7cb <Krnl::getProcessEnvPair(Process*, int)>
c001c3eb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c3ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c3f3:	68 33 cc 02 c0       	push   0xc002cc33
c001c3f8:	e8 d6 6a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c403:	85 f6                	test   esi,esi
c001c405:	75 47                	jne    c001c44e <sysCallGetEnv(regs*)+0xf5>
c001c407:	83 ec 0c             	sub    esp,0xc
c001c40a:	55                   	push   ebp
c001c40b:	e8 94 43 fe ff       	call   c00007a4 <strlen>
c001c410:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c413:	89 c3                	mov    ebx,eax
c001c415:	e8 8a 43 fe ff       	call   c00007a4 <strlen>
c001c41a:	5a                   	pop    edx
c001c41b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c41f:	59                   	pop    ecx
c001c420:	50                   	push   eax
c001c421:	68 77 c8 02 c0       	push   0xc002c877
c001c426:	e8 a8 6a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c42b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c42e:	e8 71 43 fe ff       	call   c00007a4 <strlen>
c001c433:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c436:	89 c3                	mov    ebx,eax
c001c438:	e8 67 43 fe ff       	call   c00007a4 <strlen>
c001c43d:	83 c4 10             	add    esp,0x10
c001c440:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c444:	83 c4 1c             	add    esp,0x1c
c001c447:	31 d2                	xor    edx,edx
c001c449:	5b                   	pop    ebx
c001c44a:	5e                   	pop    esi
c001c44b:	5f                   	pop    edi
c001c44c:	5d                   	pop    ebp
c001c44d:	c3                   	ret    
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	68 4d cc 02 c0       	push   0xc002cc4d
c001c456:	e8 78 6a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c45b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c45e:	58                   	pop    eax
c001c45f:	5a                   	pop    edx
c001c460:	55                   	push   ebp
c001c461:	53                   	push   ebx
c001c462:	e8 dd 43 fe ff       	call   c0000844 <strcpy>
c001c467:	59                   	pop    ecx
c001c468:	5e                   	pop    esi
c001c469:	68 81 c8 02 c0       	push   0xc002c881
c001c46e:	53                   	push   ebx
c001c46f:	e8 10 45 fe ff       	call   c0000984 <strcat>
c001c474:	5d                   	pop    ebp
c001c475:	58                   	pop    eax
c001c476:	57                   	push   edi
c001c477:	53                   	push   ebx
c001c478:	e8 07 45 fe ff       	call   c0000984 <strcat>
c001c47d:	c7 04 24 67 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc67
c001c484:	e8 4a 6a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c489:	83 c4 10             	add    esp,0x10
c001c48c:	e9 25 ff ff ff       	jmp    c001c3b6 <sysCallGetEnv(regs*)+0x5d>

c001c491 <sysAppSettings(regs*)>:
c001c491:	53                   	push   ebx
c001c492:	83 ec 08             	sub    esp,0x8
c001c495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c499:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c49c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c4a2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c4a7:	66 3d c0 09          	cmp    ax,0x9c0
c001c4ab:	75 2f                	jne    c001c4dc <sysAppSettings(regs*)+0x4b>
c001c4ad:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c4b3:	83 e0 1f             	and    eax,0x1f
c001c4b6:	3c 01                	cmp    al,0x1
c001c4b8:	74 2e                	je     c001c4e8 <sysAppSettings(regs*)+0x57>
c001c4ba:	3c 07                	cmp    al,0x7
c001c4bc:	0f 84 bd 00 00 00    	je     c001c57f <sysAppSettings(regs*)+0xee>
c001c4c2:	84 c0                	test   al,al
c001c4c4:	0f 84 dc 00 00 00    	je     c001c5a6 <sysAppSettings(regs*)+0x115>
c001c4ca:	3c 08                	cmp    al,0x8
c001c4cc:	74 6d                	je     c001c53b <sysAppSettings(regs*)+0xaa>
c001c4ce:	0f b6 c0             	movzx  eax,al
c001c4d1:	83 c4 08             	add    esp,0x8
c001c4d4:	05 e8 03 00 00       	add    eax,0x3e8
c001c4d9:	5b                   	pop    ebx
c001c4da:	99                   	cdq    
c001c4db:	c3                   	ret    
c001c4dc:	b8 01 00 00 00       	mov    eax,0x1
c001c4e1:	31 d2                	xor    edx,edx
c001c4e3:	83 c4 08             	add    esp,0x8
c001c4e6:	5b                   	pop    ebx
c001c4e7:	c3                   	ret    
c001c4e8:	51                   	push   ecx
c001c4e9:	68 00 01 00 00       	push   0x100
c001c4ee:	6a 00                	push   0x0
c001c4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4f8:	83 c0 0c             	add    eax,0xc
c001c4fb:	50                   	push   eax
c001c4fc:	e8 87 42 fe ff       	call   c0000788 <memset>
c001c501:	83 c4 0c             	add    esp,0xc
c001c504:	68 ff 00 00 00       	push   0xff
c001c509:	53                   	push   ebx
c001c50a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c50f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c512:	83 c0 0c             	add    eax,0xc
c001c515:	50                   	push   eax
c001c516:	e8 4d 42 fe ff       	call   c0000768 <memcpy>
c001c51b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c520:	5b                   	pop    ebx
c001c521:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c524:	5a                   	pop    edx
c001c525:	8d 50 0c             	lea    edx,[eax+0xc]
c001c528:	52                   	push   edx
c001c529:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c52f:	e8 6e 46 ff ff       	call   c0010ba2 <VgaText::setTitle(char*)>
c001c534:	83 c4 10             	add    esp,0x10
c001c537:	31 c0                	xor    eax,eax
c001c539:	eb a6                	jmp    c001c4e1 <sysAppSettings(regs*)+0x50>
c001c53b:	83 ec 08             	sub    esp,0x8
c001c53e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c544:	83 e0 0f             	and    eax,0xf
c001c547:	50                   	push   eax
c001c548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c54d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c550:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c556:	e8 39 46 ff ff       	call   c0010b94 <VgaText::setTitleColour(VgaColour)>
c001c55b:	58                   	pop    eax
c001c55c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c562:	5a                   	pop    edx
c001c563:	c1 e8 04             	shr    eax,0x4
c001c566:	83 e0 0f             	and    eax,0xf
c001c569:	50                   	push   eax
c001c56a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c56f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c572:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c578:	e8 09 46 ff ff       	call   c0010b86 <VgaText::setTitleTextColour(VgaColour)>
c001c57d:	eb b5                	jmp    c001c534 <sysAppSettings(regs*)+0xa3>
c001c57f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c584:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c587:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c58d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c593:	c0 e8 06             	shr    al,0x6
c001c596:	83 e0 01             	and    eax,0x1
c001c599:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c59f:	31 c0                	xor    eax,eax
c001c5a1:	e9 3b ff ff ff       	jmp    c001c4e1 <sysAppSettings(regs*)+0x50>
c001c5a6:	b8 02 00 00 00       	mov    eax,0x2
c001c5ab:	e9 31 ff ff ff       	jmp    c001c4e1 <sysAppSettings(regs*)+0x50>

c001c5b0 <sysSetFatAttrib(regs*)>:
c001c5b0:	57                   	push   edi
c001c5b1:	56                   	push   esi
c001c5b2:	53                   	push   ebx
c001c5b3:	83 ec 1c             	sub    esp,0x1c
c001c5b6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5ba:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5bd:	68 14 01 00 00       	push   0x114
c001c5c2:	e8 55 33 ff ff       	call   c000f91c <malloc>
c001c5c7:	83 c4 0c             	add    esp,0xc
c001c5ca:	89 c3                	mov    ebx,eax
c001c5cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5d4:	57                   	push   edi
c001c5d5:	53                   	push   ebx
c001c5d6:	e8 57 6e ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001c5db:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5de:	83 c4 0c             	add    esp,0xc
c001c5e1:	0f b6 d4             	movzx  edx,ah
c001c5e4:	0f b6 c0             	movzx  eax,al
c001c5e7:	52                   	push   edx
c001c5e8:	50                   	push   eax
c001c5e9:	53                   	push   ebx
c001c5ea:	e8 b9 70 ff ff       	call   c00136a8 <File::chfatattr(unsigned char, unsigned char)>
c001c5ef:	83 c4 10             	add    esp,0x10
c001c5f2:	85 db                	test   ebx,ebx
c001c5f4:	74 14                	je     c001c60a <sysSetFatAttrib(regs*)+0x5a>
c001c5f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	53                   	push   ebx
c001c600:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c60a:	85 c0                	test   eax,eax
c001c60c:	0f 95 c0             	setne  al
c001c60f:	31 d2                	xor    edx,edx
c001c611:	0f b6 c0             	movzx  eax,al
c001c614:	f7 d8                	neg    eax
c001c616:	83 d2 00             	adc    edx,0x0
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	f7 da                	neg    edx
c001c61e:	5b                   	pop    ebx
c001c61f:	5e                   	pop    esi
c001c620:	5f                   	pop    edi
c001c621:	c3                   	ret    

c001c622 <sysPipe(regs*)>:
c001c622:	57                   	push   edi
c001c623:	56                   	push   esi
c001c624:	53                   	push   ebx
c001c625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c629:	83 ec 0c             	sub    esp,0xc
c001c62c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c62f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c632:	6a 20                	push   0x20
c001c634:	e8 e3 32 ff ff       	call   c000f91c <malloc>
c001c639:	89 c3                	mov    ebx,eax
c001c63b:	58                   	pop    eax
c001c63c:	5a                   	pop    edx
c001c63d:	68 00 50 00 00       	push   0x5000
c001c642:	53                   	push   ebx
c001c643:	e8 02 3f ff ff       	call   c001054a <Pipe::Pipe(int)>
c001c648:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c64b:	e8 32 50 ff ff       	call   c0011682 <UnixFile::getFileDescriptor()>
c001c650:	89 07                	mov    DWORD PTR [edi],eax
c001c652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c655:	e8 28 50 ff ff       	call   c0011682 <UnixFile::getFileDescriptor()>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	89 06                	mov    DWORD PTR [esi],eax
c001c65f:	31 d2                	xor    edx,edx
c001c661:	5b                   	pop    ebx
c001c662:	31 c0                	xor    eax,eax
c001c664:	5e                   	pop    esi
c001c665:	5f                   	pop    edi
c001c666:	c3                   	ret    

c001c667 <sysGetUnixTime(regs*)>:
c001c667:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001c66c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c672:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c676:	e9 a9 77 ff ff       	jmp    c0013e24 <Clock::timeInSecondsLocal()>

c001c67b <string_ends_with(char const*, char const*)>:
c001c67b:	57                   	push   edi
c001c67c:	56                   	push   esi
c001c67d:	53                   	push   ebx
c001c67e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c682:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	53                   	push   ebx
c001c68a:	e8 15 41 fe ff       	call   c00007a4 <strlen>
c001c68f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c692:	89 c6                	mov    esi,eax
c001c694:	e8 0b 41 fe ff       	call   c00007a4 <strlen>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	39 c6                	cmp    esi,eax
c001c69e:	7d 06                	jge    c001c6a6 <string_ends_with(char const*, char const*)+0x2b>
c001c6a0:	5b                   	pop    ebx
c001c6a1:	31 c0                	xor    eax,eax
c001c6a3:	5e                   	pop    esi
c001c6a4:	5f                   	pop    edi
c001c6a5:	c3                   	ret    
c001c6a6:	83 ec 08             	sub    esp,0x8
c001c6a9:	29 c6                	sub    esi,eax
c001c6ab:	57                   	push   edi
c001c6ac:	01 f3                	add    ebx,esi
c001c6ae:	53                   	push   ebx
c001c6af:	e8 1c 42 fe ff       	call   c00008d0 <strcmp>
c001c6b4:	83 c4 10             	add    esp,0x10
c001c6b7:	85 c0                	test   eax,eax
c001c6b9:	5b                   	pop    ebx
c001c6ba:	0f 94 c0             	sete   al
c001c6bd:	5e                   	pop    esi
c001c6be:	0f b6 c0             	movzx  eax,al
c001c6c1:	5f                   	pop    edi
c001c6c2:	c3                   	ret    

c001c6c3 <sysCallOpen(regs*)>:
c001c6c3:	56                   	push   esi
c001c6c4:	53                   	push   ebx
c001c6c5:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6cb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6d2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6d5:	85 c9                	test   ecx,ecx
c001c6d7:	0f 84 b3 00 00 00    	je     c001c790 <sysCallOpen(regs*)+0xcd>
c001c6dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6e0:	85 c0                	test   eax,eax
c001c6e2:	0f 84 a8 00 00 00    	je     c001c790 <sysCallOpen(regs*)+0xcd>
c001c6e8:	52                   	push   edx
c001c6e9:	68 83 c8 02 c0       	push   0xc002c883
c001c6ee:	50                   	push   eax
c001c6ef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c6f3:	56                   	push   esi
c001c6f4:	e8 8f 6b ff ff       	call   c0013288 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c6f9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6fc:	e8 a3 40 fe ff       	call   c00007a4 <strlen>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	48                   	dec    eax
c001c705:	74 1d                	je     c001c724 <sysCallOpen(regs*)+0x61>
c001c707:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c70a:	eb 0f                	jmp    c001c71b <sysCallOpen(regs*)+0x58>
c001c70c:	80 fa 3a             	cmp    dl,0x3a
c001c70f:	74 0f                	je     c001c720 <sysCallOpen(regs*)+0x5d>
c001c711:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c715:	48                   	dec    eax
c001c716:	74 0c                	je     c001c724 <sysCallOpen(regs*)+0x61>
c001c718:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c71b:	80 fa 2e             	cmp    dl,0x2e
c001c71e:	75 ec                	jne    c001c70c <sysCallOpen(regs*)+0x49>
c001c720:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c724:	83 ec 08             	sub    esp,0x8
c001c727:	68 87 c8 02 c0       	push   0xc002c887
c001c72c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c72f:	e8 47 ff ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c734:	83 c4 10             	add    esp,0x10
c001c737:	85 c0                	test   eax,eax
c001c739:	75 17                	jne    c001c752 <sysCallOpen(regs*)+0x8f>
c001c73b:	83 ec 08             	sub    esp,0x8
c001c73e:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c743:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c746:	e8 30 ff ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	85 c0                	test   eax,eax
c001c750:	74 51                	je     c001c7a3 <sysCallOpen(regs*)+0xe0>
c001c752:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c755:	83 ec 08             	sub    esp,0x8
c001c758:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c75e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c765:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c768:	ff 30                	push   DWORD PTR [eax]
c001c76a:	68 8c c8 02 c0       	push   0xc002c88c
c001c76f:	e8 5f 67 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c774:	c7 04 24 9b c8 02 c0 	mov    DWORD PTR [esp],0xc002c89b
c001c77b:	e8 53 67 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001c780:	83 c4 10             	add    esp,0x10
c001c783:	81 c4 04 01 00 00    	add    esp,0x104
c001c789:	31 c0                	xor    eax,eax
c001c78b:	31 d2                	xor    edx,edx
c001c78d:	5b                   	pop    ebx
c001c78e:	5e                   	pop    esi
c001c78f:	c3                   	ret    
c001c790:	81 c4 04 01 00 00    	add    esp,0x104
c001c796:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c79b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c7a0:	5b                   	pop    ebx
c001c7a1:	5e                   	pop    esi
c001c7a2:	c3                   	ret    
c001c7a3:	83 ec 08             	sub    esp,0x8
c001c7a6:	68 88 c8 02 c0       	push   0xc002c888
c001c7ab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7ae:	e8 1d 41 fe ff       	call   c00008d0 <strcmp>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	85 c0                	test   eax,eax
c001c7b8:	74 98                	je     c001c752 <sysCallOpen(regs*)+0x8f>
c001c7ba:	83 ec 08             	sub    esp,0x8
c001c7bd:	68 87 c8 02 c0       	push   0xc002c887
c001c7c2:	56                   	push   esi
c001c7c3:	e8 b3 fe ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	85 c0                	test   eax,eax
c001c7cd:	75 83                	jne    c001c752 <sysCallOpen(regs*)+0x8f>
c001c7cf:	83 ec 08             	sub    esp,0x8
c001c7d2:	68 ad c8 02 c0       	push   0xc002c8ad
c001c7d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7da:	e8 9c fe ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	85 c0                	test   eax,eax
c001c7e4:	0f 85 d9 00 00 00    	jne    c001c8c3 <sysCallOpen(regs*)+0x200>
c001c7ea:	83 ec 08             	sub    esp,0x8
c001c7ed:	68 b2 c8 02 c0       	push   0xc002c8b2
c001c7f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7f5:	e8 81 fe ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	85 c0                	test   eax,eax
c001c7ff:	0f 85 be 00 00 00    	jne    c001c8c3 <sysCallOpen(regs*)+0x200>
c001c805:	83 ec 08             	sub    esp,0x8
c001c808:	68 ae c8 02 c0       	push   0xc002c8ae
c001c80d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c810:	e8 bb 40 fe ff       	call   c00008d0 <strcmp>
c001c815:	83 c4 10             	add    esp,0x10
c001c818:	85 c0                	test   eax,eax
c001c81a:	0f 84 a3 00 00 00    	je     c001c8c3 <sysCallOpen(regs*)+0x200>
c001c820:	83 ec 08             	sub    esp,0x8
c001c823:	68 ad c8 02 c0       	push   0xc002c8ad
c001c828:	56                   	push   esi
c001c829:	e8 4d fe ff ff       	call   c001c67b <string_ends_with(char const*, char const*)>
c001c82e:	83 c4 10             	add    esp,0x10
c001c831:	85 c0                	test   eax,eax
c001c833:	0f 85 8a 00 00 00    	jne    c001c8c3 <sysCallOpen(regs*)+0x200>
c001c839:	83 ec 0c             	sub    esp,0xc
c001c83c:	68 14 01 00 00       	push   0x114
c001c841:	e8 d6 30 ff ff       	call   c000f91c <malloc>
c001c846:	83 c4 0c             	add    esp,0xc
c001c849:	89 c6                	mov    esi,eax
c001c84b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c850:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c853:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c856:	56                   	push   esi
c001c857:	e8 d6 6b ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001c85c:	83 c4 10             	add    esp,0x10
c001c85f:	85 f6                	test   esi,esi
c001c861:	0f 84 29 ff ff ff    	je     c001c790 <sysCallOpen(regs*)+0xcd>
c001c867:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c86a:	0f b6 c2             	movzx  eax,dl
c001c86d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c870:	89 d0                	mov    eax,edx
c001c872:	83 e0 01             	and    eax,0x1
c001c875:	f6 c2 02             	test   dl,0x2
c001c878:	74 03                	je     c001c87d <sysCallOpen(regs*)+0x1ba>
c001c87a:	83 c8 02             	or     eax,0x2
c001c87d:	f6 c2 04             	test   dl,0x4
c001c880:	74 03                	je     c001c885 <sysCallOpen(regs*)+0x1c2>
c001c882:	83 c8 04             	or     eax,0x4
c001c885:	f6 c2 08             	test   dl,0x8
c001c888:	74 03                	je     c001c88d <sysCallOpen(regs*)+0x1ca>
c001c88a:	83 c8 0a             	or     eax,0xa
c001c88d:	83 e2 10             	and    edx,0x10
c001c890:	74 03                	je     c001c895 <sysCallOpen(regs*)+0x1d2>
c001c892:	83 c8 12             	or     eax,0x12
c001c895:	83 ec 08             	sub    esp,0x8
c001c898:	50                   	push   eax
c001c899:	56                   	push   esi
c001c89a:	e8 f7 6b ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001c89f:	83 c4 10             	add    esp,0x10
c001c8a2:	85 c0                	test   eax,eax
c001c8a4:	0f 85 e6 fe ff ff    	jne    c001c790 <sysCallOpen(regs*)+0xcd>
c001c8aa:	83 ec 0c             	sub    esp,0xc
c001c8ad:	56                   	push   esi
c001c8ae:	e8 cf 4d ff ff       	call   c0011682 <UnixFile::getFileDescriptor()>
c001c8b3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8b6:	89 02                	mov    DWORD PTR [edx],eax
c001c8b8:	c1 f8 1f             	sar    eax,0x1f
c001c8bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8be:	e9 bd fe ff ff       	jmp    c001c780 <sysCallOpen(regs*)+0xbd>
c001c8c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8c6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8d3:	e9 ab fe ff ff       	jmp    c001c783 <sysCallOpen(regs*)+0xc0>

c001c8d8 <Sys::loadSyscalls()>:
c001c8d8:	c7 05 a0 19 03 c0 bd b9 01 c0 	mov    DWORD PTR ds:0xc00319a0,0xc001b9bd
c001c8e2:	c7 05 a4 19 03 c0 24 b5 01 c0 	mov    DWORD PTR ds:0xc00319a4,0xc001b524
c001c8ec:	c7 05 a8 19 03 c0 10 b7 01 c0 	mov    DWORD PTR ds:0xc00319a8,0xc001b710
c001c8f6:	c7 05 ac 19 03 c0 f3 b8 01 c0 	mov    DWORD PTR ds:0xc00319ac,0xc001b8f3
c001c900:	c7 05 b0 19 03 c0 a8 b6 01 c0 	mov    DWORD PTR ds:0xc00319b0,0xc001b6a8
c001c90a:	c7 05 b4 19 03 c0 5b b5 01 c0 	mov    DWORD PTR ds:0xc00319b4,0xc001b55b
c001c914:	c7 05 b8 19 03 c0 3c b5 01 c0 	mov    DWORD PTR ds:0xc00319b8,0xc001b53c
c001c91e:	c7 05 bc 19 03 c0 65 b7 01 c0 	mov    DWORD PTR ds:0xc00319bc,0xc001b765
c001c928:	c7 05 c4 19 03 c0 f8 be 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001bef8
c001c932:	c7 05 c0 19 03 c0 c3 c6 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001c6c3
c001c93c:	c7 05 c8 19 03 c0 80 bf 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001bf80
c001c946:	c7 05 cc 19 03 c0 e7 bb 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001bbe7
c001c950:	c7 05 d0 19 03 c0 03 ba 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001ba03
c001c95a:	c7 05 d4 19 03 c0 08 ba 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001ba08
c001c964:	c7 05 d8 19 03 c0 5b c0 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001c05b
c001c96e:	c7 05 dc 19 03 c0 f5 bf 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001bff5
c001c978:	c7 05 e0 19 03 c0 cf bc 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001bccf
c001c982:	c7 05 e4 19 03 c0 38 bd 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001bd38
c001c98c:	c7 05 e8 19 03 c0 b5 bd 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001bdb5
c001c996:	c7 05 ec 19 03 c0 0d ba 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001ba0d
c001c9a0:	c7 05 f0 19 03 c0 cb c0 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001c0cb
c001c9aa:	c7 05 f4 19 03 c0 e5 c0 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001c0e5
c001c9b4:	c7 05 f8 19 03 c0 e5 c0 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001c0e5
c001c9be:	c7 05 fc 19 03 c0 26 c1 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001c126
c001c9c8:	c7 05 00 1a 03 c0 8a c1 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001c18a
c001c9d2:	c7 05 04 1a 03 c0 b9 bb 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bbb9
c001c9dc:	c7 05 08 1a 03 c0 ee c1 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001c1ee
c001c9e6:	c7 05 0c 1a 03 c0 76 bb 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001bb76
c001c9f0:	c7 05 10 1a 03 c0 3a c2 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001c23a
c001c9fa:	c7 05 14 1a 03 c0 75 bc 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001bc75
c001ca04:	c7 05 18 1a 03 c0 bd c2 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c2bd
c001ca0e:	c7 05 1c 1a 03 c0 38 be 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001be38
c001ca18:	c7 05 20 1a 03 c0 e4 c2 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001c2e4
c001ca22:	c7 05 24 1a 03 c0 59 c3 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001c359
c001ca2c:	c7 05 28 1a 03 c0 91 c4 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001c491
c001ca36:	c7 05 2c 1a 03 c0 17 ba 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001ba17
c001ca40:	c7 05 30 1a 03 c0 81 ba 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001ba81
c001ca4a:	c7 05 34 1a 03 c0 c7 ba 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001bac7
c001ca54:	c7 05 38 1a 03 c0 b0 c5 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c5b0
c001ca5e:	c7 05 3c 1a 03 c0 00 c1 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001c100
c001ca68:	c7 05 40 1a 03 c0 18 bb 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001bb18
c001ca72:	c7 05 44 1a 03 c0 22 c6 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001c622
c001ca7c:	c7 05 48 1a 03 c0 67 c6 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c667
c001ca86:	c7 05 4c 1a 03 c0 00 b6 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001b600
c001ca90:	c7 05 50 1a 03 c0 81 b7 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001b781
c001ca9a:	c7 05 54 1a 03 c0 a9 b8 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001b8a9
c001caa4:	c7 05 58 1a 03 c0 ee b4 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001b4ee
c001caae:	c7 05 5c 1a 03 c0 5b b9 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001b95b
c001cab8:	c7 05 60 1a 03 c0 67 b5 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001b567
c001cac2:	c7 05 64 1a 03 c0 7e b5 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001b57e
c001cacc:	c3                   	ret    

c001cacd <Sys::systemCall(regs*, void*)>:
c001cacd:	53                   	push   ebx
c001cace:	83 ec 08             	sub    esp,0x8
c001cad1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cad5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cad8:	83 f8 7f             	cmp    eax,0x7f
c001cadb:	77 16                	ja     c001caf3 <Sys::systemCall(regs*, void*)+0x26>
c001cadd:	8b 14 85 a0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce660]
c001cae4:	85 d2                	test   edx,edx
c001cae6:	74 0b                	je     c001caf3 <Sys::systemCall(regs*, void*)+0x26>
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	53                   	push   ebx
c001caec:	ff d2                	call   edx
c001caee:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001caf1:	eb 0d                	jmp    c001cb00 <Sys::systemCall(regs*, void*)+0x33>
c001caf3:	52                   	push   edx
c001caf4:	52                   	push   edx
c001caf5:	50                   	push   eax
c001caf6:	68 b7 c8 02 c0       	push   0xc002c8b7
c001cafb:	e8 d3 63 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cb00:	83 c4 10             	add    esp,0x10
c001cb03:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb08:	31 d2                	xor    edx,edx
c001cb0a:	83 c4 08             	add    esp,0x8
c001cb0d:	5b                   	pop    ebx
c001cb0e:	c3                   	ret    

c001cb0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb0f:	55                   	push   ebp
c001cb10:	57                   	push   edi
c001cb11:	56                   	push   esi
c001cb12:	53                   	push   ebx
c001cb13:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb19:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb20:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb27:	85 c0                	test   eax,eax
c001cb29:	0f 95 c1             	setne  cl
c001cb2c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb34:	0f 94 c2             	sete   dl
c001cb37:	84 d1                	test   cl,dl
c001cb39:	74 23                	je     c001cb5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb3b:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb41:	74 1b                	je     c001cb5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb43:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb49:	89 da                	mov    edx,ebx
c001cb4b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb51:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb57:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb5e:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cb65:	05 ff 0f 00 00       	add    eax,0xfff
c001cb6a:	83 ec 0c             	sub    esp,0xc
c001cb6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb71:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cb77:	c1 e8 0c             	shr    eax,0xc
c001cb7a:	89 ef                	mov    edi,ebp
c001cb7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb80:	c1 ef 0c             	shr    edi,0xc
c001cb83:	6a 01                	push   0x1
c001cb85:	e8 43 4f ff ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c001cb8a:	89 c6                	mov    esi,eax
c001cb8c:	58                   	pop    eax
c001cb8d:	5a                   	pop    edx
c001cb8e:	57                   	push   edi
c001cb8f:	68 3b c9 02 c0       	push   0xc002c93b
c001cb94:	e8 3a 63 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cb99:	59                   	pop    ecx
c001cb9a:	58                   	pop    eax
c001cb9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb9f:	68 4d c9 02 c0       	push   0xc002c94d
c001cba4:	e8 2a 63 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbb2:	0f 86 31 01 00 00    	jbe    c001cce9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cbb8:	c1 e7 0c             	shl    edi,0xc
c001cbbb:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cbbe:	89 df                	mov    edi,ebx
c001cbc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbc4:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbcb:	01 dd                	add    ebp,ebx
c001cbcd:	29 fd                	sub    ebp,edi
c001cbcf:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cbd3:	0f 84 0e 01 00 00    	je     c001cce7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cbd9:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cbdf:	76 05                	jbe    c001cbe6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cbe1:	bd 00 10 00 00       	mov    ebp,0x1000
c001cbe6:	83 ec 0c             	sub    esp,0xc
c001cbe9:	31 d2                	xor    edx,edx
c001cbeb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cbf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbf4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cbf8:	50                   	push   eax
c001cbf9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cbfd:	50                   	push   eax
c001cbfe:	52                   	push   edx
c001cbff:	55                   	push   ebp
c001cc00:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc0a:	83 c4 20             	add    esp,0x20
c001cc0d:	85 c0                	test   eax,eax
c001cc0f:	74 0a                	je     c001cc1b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cc11:	53                   	push   ebx
c001cc12:	53                   	push   ebx
c001cc13:	50                   	push   eax
c001cc14:	68 5f c9 02 c0       	push   0xc002c95f
c001cc19:	eb 0f                	jmp    c001cc2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cc1b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc1f:	74 20                	je     c001cc41 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cc21:	51                   	push   ecx
c001cc22:	51                   	push   ecx
c001cc23:	6a 00                	push   0x0
c001cc25:	68 8a c9 02 c0       	push   0xc002c98a
c001cc2a:	e8 a4 62 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cc2f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc32:	e8 56 53 ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	31 c0                	xor    eax,eax
c001cc3c:	e9 6d 01 00 00       	jmp    c001cdae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc41:	fa                   	cli    
c001cc42:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001cc48:	e8 3b 33 ff ff       	call   c000ff88 <Phys::allocatePage()>
c001cc4d:	6a 07                	push   0x7
c001cc4f:	89 c5                	mov    ebp,eax
c001cc51:	56                   	push   esi
c001cc52:	50                   	push   eax
c001cc53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc5b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc61:	e8 9e 56 ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc66:	83 c4 0c             	add    esp,0xc
c001cc69:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc70:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc76:	6a 00                	push   0x0
c001cc78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc80:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc86:	e8 d3 54 ff ff       	call   c001215e <VAS::mapOtherVASIn(bool, VAS*)>
c001cc8b:	58                   	pop    eax
c001cc8c:	5a                   	pop    edx
c001cc8d:	68 07 0c 00 00       	push   0xc07
c001cc92:	57                   	push   edi
c001cc93:	55                   	push   ebp
c001cc94:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cc9b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cca1:	6a 00                	push   0x0
c001cca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cca8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccb1:	e8 0a 5a ff ff       	call   c00126c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccb6:	83 c4 1c             	add    esp,0x1c
c001ccb9:	68 00 10 00 00       	push   0x1000
c001ccbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ccc2:	50                   	push   eax
c001ccc3:	56                   	push   esi
c001ccc4:	e8 9f 3a fe ff       	call   c0000768 <memcpy>
c001ccc9:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ccce:	83 c4 10             	add    esp,0x10
c001ccd1:	48                   	dec    eax
c001ccd2:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ccd7:	85 c0                	test   eax,eax
c001ccd9:	75 01                	jne    c001ccdc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001ccdb:	fb                   	sti    
c001ccdc:	81 c7 00 10 00 00    	add    edi,0x1000
c001cce2:	e9 dd fe ff ff       	jmp    c001cbc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001cce7:	89 fb                	mov    ebx,edi
c001cce9:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ccf1:	0f 86 a9 00 00 00    	jbe    c001cda0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ccf7:	fa                   	cli    
c001ccf8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ccfe:	51                   	push   ecx
c001ccff:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd06:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd0c:	6a 00                	push   0x0
c001cd0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd16:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd1c:	e8 3d 54 ff ff       	call   c001215e <VAS::mapOtherVASIn(bool, VAS*)>
c001cd21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cd25:	c1 e7 0c             	shl    edi,0xc
c001cd28:	01 df                	add    edi,ebx
c001cd2a:	83 c4 10             	add    esp,0x10
c001cd2d:	39 df                	cmp    edi,ebx
c001cd2f:	74 61                	je     c001cd92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cd31:	e8 52 32 ff ff       	call   c000ff88 <Phys::allocatePage()>
c001cd36:	6a 07                	push   0x7
c001cd38:	89 c5                	mov    ebp,eax
c001cd3a:	56                   	push   esi
c001cd3b:	50                   	push   eax
c001cd3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd44:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd4a:	e8 b5 55 ff ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd4f:	58                   	pop    eax
c001cd50:	5a                   	pop    edx
c001cd51:	68 07 0c 00 00       	push   0xc07
c001cd56:	53                   	push   ebx
c001cd57:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd5d:	55                   	push   ebp
c001cd5e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd65:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd6b:	6a 00                	push   0x0
c001cd6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd75:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd7b:	e8 40 59 ff ff       	call   c00126c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd80:	83 c4 1c             	add    esp,0x1c
c001cd83:	68 00 10 00 00       	push   0x1000
c001cd88:	6a 00                	push   0x0
c001cd8a:	56                   	push   esi
c001cd8b:	e8 f8 39 fe ff       	call   c0000788 <memset>
c001cd90:	eb 98                	jmp    c001cd2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cd92:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001cd97:	48                   	dec    eax
c001cd98:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001cd9d:	75 01                	jne    c001cda0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd9f:	fb                   	sti    
c001cda0:	83 ec 0c             	sub    esp,0xc
c001cda3:	56                   	push   esi
c001cda4:	e8 e4 51 ff ff       	call   c0011f8d <Virt::freeKernelVirtualPages(unsigned long)>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	b0 01                	mov    al,0x1
c001cdae:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdb4:	5b                   	pop    ebx
c001cdb5:	5e                   	pop    esi
c001cdb6:	5f                   	pop    edi
c001cdb7:	5d                   	pop    ebp
c001cdb8:	c3                   	ret    

c001cdb9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cdb9:	55                   	push   ebp
c001cdba:	57                   	push   edi
c001cdbb:	56                   	push   esi
c001cdbc:	53                   	push   ebx
c001cdbd:	83 ec 48             	sub    esp,0x48
c001cdc0:	68 14 01 00 00       	push   0x114
c001cdc5:	e8 52 2b ff ff       	call   c000f91c <malloc>
c001cdca:	83 c4 0c             	add    esp,0xc
c001cdcd:	89 c6                	mov    esi,eax
c001cdcf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cdd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cdd7:	50                   	push   eax
c001cdd8:	e8 55 66 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001cddd:	58                   	pop    eax
c001cdde:	5a                   	pop    edx
c001cddf:	6a 01                	push   0x1
c001cde1:	56                   	push   esi
c001cde2:	e8 af 66 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001cde7:	83 c4 10             	add    esp,0x10
c001cdea:	85 c0                	test   eax,eax
c001cdec:	0f 85 47 01 00 00    	jne    c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdf2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	6a 34                	push   0x34
c001cdff:	e8 18 2b ff ff       	call   c000f91c <malloc>
c001ce04:	89 c3                	mov    ebx,eax
c001ce06:	58                   	pop    eax
c001ce07:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce09:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce0d:	57                   	push   edi
c001ce0e:	53                   	push   ebx
c001ce0f:	6a 00                	push   0x0
c001ce11:	6a 34                	push   0x34
c001ce13:	56                   	push   esi
c001ce14:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce17:	83 c4 20             	add    esp,0x20
c001ce1a:	85 c0                	test   eax,eax
c001ce1c:	0f 85 17 01 00 00    	jne    c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce22:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce28:	0f 85 0b 01 00 00    	jne    c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce31:	85 c0                	test   eax,eax
c001ce33:	0f 84 00 01 00 00    	je     c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce39:	31 d2                	xor    edx,edx
c001ce3b:	55                   	push   ebp
c001ce3c:	52                   	push   edx
c001ce3d:	50                   	push   eax
c001ce3e:	56                   	push   esi
c001ce3f:	e8 10 67 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001ce44:	83 c4 10             	add    esp,0x10
c001ce47:	85 c0                	test   eax,eax
c001ce49:	0f 85 ea 00 00 00    	jne    c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce4f:	83 ec 0c             	sub    esp,0xc
c001ce52:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce55:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce5d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce61:	0f af c2             	imul   eax,edx
c001ce64:	50                   	push   eax
c001ce65:	e8 b2 2a ff ff       	call   c000f91c <malloc>
c001ce6a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce70:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce77:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce7b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce7f:	0f af c2             	imul   eax,edx
c001ce82:	99                   	cdq    
c001ce83:	52                   	push   edx
c001ce84:	50                   	push   eax
c001ce85:	56                   	push   esi
c001ce86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce89:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce8c:	83 c4 20             	add    esp,0x20
c001ce8f:	85 c0                	test   eax,eax
c001ce91:	0f 84 a2 00 00 00    	je     c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce97:	31 d2                	xor    edx,edx
c001ce99:	51                   	push   ecx
c001ce9a:	52                   	push   edx
c001ce9b:	50                   	push   eax
c001ce9c:	56                   	push   esi
c001ce9d:	e8 b2 66 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001cea2:	83 c4 10             	add    esp,0x10
c001cea5:	85 c0                	test   eax,eax
c001cea7:	0f 85 8c 00 00 00    	jne    c001cf39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ceb4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ceb8:	31 ed                	xor    ebp,ebp
c001ceba:	0f af c2             	imul   eax,edx
c001cebd:	50                   	push   eax
c001cebe:	e8 59 2a ff ff       	call   c000f91c <malloc>
c001cec3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cec5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cec9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ced4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ced8:	0f af c2             	imul   eax,edx
c001cedb:	99                   	cdq    
c001cedc:	52                   	push   edx
c001cedd:	50                   	push   eax
c001cede:	56                   	push   esi
c001cedf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cee2:	83 c4 20             	add    esp,0x20
c001cee5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ceed:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cef1:	0f 86 80 00 00 00    	jbe    c001cf77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cef7:	0f b7 fd             	movzx  edi,bp
c001cefa:	c1 e7 05             	shl    edi,0x5
c001cefd:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf01:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf04:	75 6b                	jne    c001cf71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf06:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf0d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf14:	52                   	push   edx
c001cf15:	31 d2                	xor    edx,edx
c001cf17:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf1a:	52                   	push   edx
c001cf1b:	50                   	push   eax
c001cf1c:	56                   	push   esi
c001cf1d:	e8 32 66 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001cf22:	83 c4 10             	add    esp,0x10
c001cf25:	85 c0                	test   eax,eax
c001cf27:	74 17                	je     c001cf40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf29:	83 ec 0c             	sub    esp,0xc
c001cf2c:	68 b6 c9 02 c0       	push   0xc002c9b6
c001cf31:	e8 9d 5f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cf36:	83 c4 10             	add    esp,0x10
c001cf39:	31 c0                	xor    eax,eax
c001cf3b:	e9 87 00 00 00       	jmp    c001cfc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf40:	83 ec 0c             	sub    esp,0xc
c001cf43:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf46:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf49:	50                   	push   eax
c001cf4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf52:	56                   	push   esi
c001cf53:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf57:	e8 b3 fb ff ff       	call   c001cb0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf60:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf64:	83 c4 20             	add    esp,0x20
c001cf67:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf6b:	73 04                	jae    c001cf71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf71:	45                   	inc    ebp
c001cf72:	e9 76 ff ff ff       	jmp    c001ceed <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf77:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf83:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf89:	83 ec 0c             	sub    esp,0xc
c001cf8c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf92:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cf97:	05 00 10 00 00       	add    eax,0x1000
c001cf9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cf9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa3:	e8 84 29 ff ff       	call   c000f92c <free>
c001cfa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfab:	e8 7c 29 ff ff       	call   c000f92c <free>
c001cfb0:	58                   	pop    eax
c001cfb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfb5:	e8 72 29 ff ff       	call   c000f92c <free>
c001cfba:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfbd:	e8 32 65 ff ff       	call   c00134f4 <File::close()>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	b0 01                	mov    al,0x1
c001cfc7:	83 c4 3c             	add    esp,0x3c
c001cfca:	5b                   	pop    ebx
c001cfcb:	5e                   	pop    esi
c001cfcc:	5f                   	pop    edi
c001cfcd:	5d                   	pop    ebp
c001cfce:	c3                   	ret    

c001cfcf <Thr::runtimeReferenceHelper()>:
c001cfcf:	83 ec 18             	sub    esp,0x18
c001cfd2:	68 be c9 02 c0       	push   0xc002c9be
c001cfd7:	e8 f7 5e ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001cfdc:	fa                   	cli    
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	eb fe                	jmp    c001cfe0 <Thr::runtimeReferenceHelper()+0x11>

c001cfe2 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cfe2:	57                   	push   edi
c001cfe3:	56                   	push   esi
c001cfe4:	53                   	push   ebx
c001cfe5:	31 db                	xor    ebx,ebx
c001cfe7:	39 1d 40 23 03 c0    	cmp    DWORD PTR ds:0xc0032340,ebx
c001cfed:	7e 3c                	jle    c001d02b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cfef:	8b 34 9d c0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd40]
c001cff6:	31 ff                	xor    edi,edi
c001cff8:	39 3c 9d c0 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde40],edi
c001cfff:	7e 27                	jle    c001d028 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d001:	50                   	push   eax
c001d002:	50                   	push   eax
c001d003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d007:	8b 06                	mov    eax,DWORD PTR [esi]
c001d009:	03 04 9d 40 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcddc0]
c001d010:	50                   	push   eax
c001d011:	e8 ba 38 fe ff       	call   c00008d0 <strcmp>
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	85 c0                	test   eax,eax
c001d01b:	75 05                	jne    c001d022 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d01d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d020:	eb 0b                	jmp    c001d02d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d022:	83 c6 10             	add    esi,0x10
c001d025:	47                   	inc    edi
c001d026:	eb d0                	jmp    c001cff8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d028:	43                   	inc    ebx
c001d029:	eb bc                	jmp    c001cfe7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d02b:	31 c0                	xor    eax,eax
c001d02d:	5b                   	pop    ebx
c001d02e:	5e                   	pop    esi
c001d02f:	5f                   	pop    edi
c001d030:	c3                   	ret    

c001d031 <Thr::loadKernelSymbolTable(char const*)>:
c001d031:	55                   	push   ebp
c001d032:	57                   	push   edi
c001d033:	56                   	push   esi
c001d034:	53                   	push   ebx
c001d035:	83 ec 68             	sub    esp,0x68
c001d038:	8b 35 90 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032390
c001d03e:	68 14 01 00 00       	push   0x114
c001d043:	e8 d4 28 ff ff       	call   c000f91c <malloc>
c001d048:	83 c4 0c             	add    esp,0xc
c001d04b:	89 c3                	mov    ebx,eax
c001d04d:	56                   	push   esi
c001d04e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d052:	50                   	push   eax
c001d053:	e8 da 63 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001d058:	5e                   	pop    esi
c001d059:	5f                   	pop    edi
c001d05a:	6a 01                	push   0x1
c001d05c:	53                   	push   ebx
c001d05d:	e8 34 64 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	85 c0                	test   eax,eax
c001d067:	74 0a                	je     c001d073 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d069:	83 ec 0c             	sub    esp,0xc
c001d06c:	68 e0 c9 02 c0       	push   0xc002c9e0
c001d071:	eb 34                	jmp    c001d0a7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d073:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d07b:	83 ec 0c             	sub    esp,0xc
c001d07e:	6a 34                	push   0x34
c001d080:	e8 97 28 ff ff       	call   c000f91c <malloc>
c001d085:	59                   	pop    ecx
c001d086:	89 c7                	mov    edi,eax
c001d088:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d08c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d08e:	56                   	push   esi
c001d08f:	57                   	push   edi
c001d090:	6a 00                	push   0x0
c001d092:	6a 34                	push   0x34
c001d094:	53                   	push   ebx
c001d095:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d098:	83 c4 20             	add    esp,0x20
c001d09b:	85 c0                	test   eax,eax
c001d09d:	74 17                	je     c001d0b6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d09f:	83 ec 0c             	sub    esp,0xc
c001d0a2:	68 f7 c9 02 c0       	push   0xc002c9f7
c001d0a7:	e8 e3 d7 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	31 c0                	xor    eax,eax
c001d0b1:	e9 31 02 00 00       	jmp    c001d2e7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0b6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0bc:	75 e1                	jne    c001d09f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0be:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0c1:	85 c0                	test   eax,eax
c001d0c3:	74 da                	je     c001d09f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0c5:	52                   	push   edx
c001d0c6:	31 d2                	xor    edx,edx
c001d0c8:	52                   	push   edx
c001d0c9:	50                   	push   eax
c001d0ca:	53                   	push   ebx
c001d0cb:	e8 84 64 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	85 c0                	test   eax,eax
c001d0d5:	75 c8                	jne    c001d09f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0d7:	83 ec 0c             	sub    esp,0xc
c001d0da:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0e2:	31 ed                	xor    ebp,ebp
c001d0e4:	0f af c2             	imul   eax,edx
c001d0e7:	50                   	push   eax
c001d0e8:	e8 2f 28 ff ff       	call   c000f91c <malloc>
c001d0ed:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0fa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0fe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d102:	0f af c2             	imul   eax,edx
c001d105:	99                   	cdq    
c001d106:	52                   	push   edx
c001d107:	50                   	push   eax
c001d108:	53                   	push   ebx
c001d109:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d10c:	83 c4 20             	add    esp,0x20
c001d10f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d117:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d11f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d127:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d12f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d133:	0f 86 aa 00 00 00    	jbe    c001d1e3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d139:	0f b7 f5             	movzx  esi,bp
c001d13c:	6b f6 28             	imul   esi,esi,0x28
c001d13f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d143:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d14a:	50                   	push   eax
c001d14b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d14f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d153:	8b 16                	mov    edx,DWORD PTR [esi]
c001d155:	6b c0 28             	imul   eax,eax,0x28
c001d158:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d15c:	89 d0                	mov    eax,edx
c001d15e:	31 d2                	xor    edx,edx
c001d160:	52                   	push   edx
c001d161:	50                   	push   eax
c001d162:	53                   	push   ebx
c001d163:	e8 ec 63 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d168:	83 c4 0c             	add    esp,0xc
c001d16b:	6a 20                	push   0x20
c001d16d:	6a 00                	push   0x0
c001d16f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d173:	52                   	push   edx
c001d174:	e8 0f 36 fe ff       	call   c0000788 <memset>
c001d179:	58                   	pop    eax
c001d17a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d17c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d180:	51                   	push   ecx
c001d181:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d185:	52                   	push   edx
c001d186:	6a 00                	push   0x0
c001d188:	6a 1f                	push   0x1f
c001d18a:	53                   	push   ebx
c001d18b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d18e:	83 c4 18             	add    esp,0x18
c001d191:	68 0e ca 02 c0       	push   0xc002ca0e
c001d196:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d19a:	52                   	push   edx
c001d19b:	e8 30 37 fe ff       	call   c00008d0 <strcmp>
c001d1a0:	83 c4 10             	add    esp,0x10
c001d1a3:	85 c0                	test   eax,eax
c001d1a5:	75 0f                	jne    c001d1b6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d1a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1b6:	50                   	push   eax
c001d1b7:	50                   	push   eax
c001d1b8:	68 16 ca 02 c0       	push   0xc002ca16
c001d1bd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1c1:	50                   	push   eax
c001d1c2:	e8 09 37 fe ff       	call   c00008d0 <strcmp>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	85 c0                	test   eax,eax
c001d1cc:	75 0f                	jne    c001d1dd <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1dd:	45                   	inc    ebp
c001d1de:	e9 4c ff ff ff       	jmp    c001d12f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1e8:	75 10                	jne    c001d1fa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1ea:	83 ec 0c             	sub    esp,0xc
c001d1ed:	68 1e ca 02 c0       	push   0xc002ca1e
c001d1f2:	e8 98 d6 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d1f7:	83 c4 10             	add    esp,0x10
c001d1fa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d1ff:	75 10                	jne    c001d211 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d201:	83 ec 0c             	sub    esp,0xc
c001d204:	68 1e ca 02 c0       	push   0xc002ca1e
c001d209:	e8 81 d6 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	31 d2                	xor    edx,edx
c001d213:	50                   	push   eax
c001d214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d218:	52                   	push   edx
c001d219:	50                   	push   eax
c001d21a:	53                   	push   ebx
c001d21b:	e8 34 63 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d220:	5a                   	pop    edx
c001d221:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d225:	e8 f2 26 ff ff       	call   c000f91c <malloc>
c001d22a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d22e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d232:	31 c9                	xor    ecx,ecx
c001d234:	5e                   	pop    esi
c001d235:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d237:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d23b:	55                   	push   ebp
c001d23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d240:	51                   	push   ecx
c001d241:	52                   	push   edx
c001d242:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d246:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d24a:	53                   	push   ebx
c001d24b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d24e:	83 c4 14             	add    esp,0x14
c001d251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d255:	e8 c2 26 ff ff       	call   c000f91c <malloc>
c001d25a:	89 c6                	mov    esi,eax
c001d25c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d25e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d261:	56                   	push   esi
c001d262:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d266:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d26a:	51                   	push   ecx
c001d26b:	52                   	push   edx
c001d26c:	53                   	push   ebx
c001d26d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d270:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d274:	8b 15 40 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032340
c001d27a:	83 c4 1c             	add    esp,0x1c
c001d27d:	c1 e8 04             	shr    eax,0x4
c001d280:	89 04 95 c0 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde40],eax
c001d287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d28b:	31 d2                	xor    edx,edx
c001d28d:	52                   	push   edx
c001d28e:	50                   	push   eax
c001d28f:	53                   	push   ebx
c001d290:	e8 bf 62 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d295:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d297:	31 d2                	xor    edx,edx
c001d299:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d29c:	56                   	push   esi
c001d29d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2a1:	52                   	push   edx
c001d2a2:	50                   	push   eax
c001d2a3:	53                   	push   ebx
c001d2a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2a7:	83 c4 14             	add    esp,0x14
c001d2aa:	53                   	push   ebx
c001d2ab:	e8 44 62 ff ff       	call   c00134f4 <File::close()>
c001d2b0:	5d                   	pop    ebp
c001d2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2b5:	e8 72 26 ff ff       	call   c000f92c <free>
c001d2ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2bd:	e8 6a 26 ff ff       	call   c000f92c <free>
c001d2c2:	a1 40 23 03 c0       	mov    eax,ds:0xc0032340
c001d2c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2cb:	8d 50 01             	lea    edx,[eax+0x1]
c001d2ce:	89 0c 85 c0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd40],ecx
c001d2d5:	89 34 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],esi
c001d2dc:	89 15 40 23 03 c0    	mov    DWORD PTR ds:0xc0032340,edx
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	b0 01                	mov    al,0x1
c001d2e7:	83 c4 5c             	add    esp,0x5c
c001d2ea:	5b                   	pop    ebx
c001d2eb:	5e                   	pop    esi
c001d2ec:	5f                   	pop    edi
c001d2ed:	5d                   	pop    ebp
c001d2ee:	c3                   	ret    

c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2ef:	55                   	push   ebp
c001d2f0:	57                   	push   edi
c001d2f1:	56                   	push   esi
c001d2f2:	53                   	push   ebx
c001d2f3:	81 ec 68 03 00 00    	sub    esp,0x368
c001d2f9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d300:	8b 1d 90 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032390
c001d306:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d30a:	68 14 01 00 00       	push   0x114
c001d30f:	e8 08 26 ff ff       	call   c000f91c <malloc>
c001d314:	83 c4 0c             	add    esp,0xc
c001d317:	89 c5                	mov    ebp,eax
c001d319:	53                   	push   ebx
c001d31a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d321:	50                   	push   eax
c001d322:	e8 0b 61 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001d327:	5e                   	pop    esi
c001d328:	5f                   	pop    edi
c001d329:	6a 01                	push   0x1
c001d32b:	55                   	push   ebp
c001d32c:	e8 65 61 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001d331:	83 c4 10             	add    esp,0x10
c001d334:	85 c0                	test   eax,eax
c001d336:	0f 85 a7 06 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d33c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d344:	83 ec 0c             	sub    esp,0xc
c001d347:	6a 34                	push   0x34
c001d349:	e8 ce 25 ff ff       	call   c000f91c <malloc>
c001d34e:	5b                   	pop    ebx
c001d34f:	89 c7                	mov    edi,eax
c001d351:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d355:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d358:	53                   	push   ebx
c001d359:	57                   	push   edi
c001d35a:	6a 00                	push   0x0
c001d35c:	6a 34                	push   0x34
c001d35e:	55                   	push   ebp
c001d35f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d362:	83 c4 20             	add    esp,0x20
c001d365:	85 c0                	test   eax,eax
c001d367:	0f 85 76 06 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d36d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d373:	0f 85 6a 06 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d379:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d37c:	85 c0                	test   eax,eax
c001d37e:	0f 84 5f 06 00 00    	je     c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d384:	31 d2                	xor    edx,edx
c001d386:	51                   	push   ecx
c001d387:	52                   	push   edx
c001d388:	50                   	push   eax
c001d389:	55                   	push   ebp
c001d38a:	e8 c5 61 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d38f:	83 c4 10             	add    esp,0x10
c001d392:	85 c0                	test   eax,eax
c001d394:	0f 85 49 06 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d3a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3a4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3ac:	0f af c2             	imul   eax,edx
c001d3af:	50                   	push   eax
c001d3b0:	e8 67 25 ff ff       	call   c000f91c <malloc>
c001d3b5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3c3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3cb:	0f af c2             	imul   eax,edx
c001d3ce:	99                   	cdq    
c001d3cf:	52                   	push   edx
c001d3d0:	50                   	push   eax
c001d3d1:	55                   	push   ebp
c001d3d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d5:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3d8:	83 c4 20             	add    esp,0x20
c001d3db:	85 c0                	test   eax,eax
c001d3dd:	0f 84 00 06 00 00    	je     c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3e3:	52                   	push   edx
c001d3e4:	31 d2                	xor    edx,edx
c001d3e6:	52                   	push   edx
c001d3e7:	50                   	push   eax
c001d3e8:	55                   	push   ebp
c001d3e9:	e8 66 61 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	85 c0                	test   eax,eax
c001d3f3:	0f 85 ea 05 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d400:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d404:	31 f6                	xor    esi,esi
c001d406:	0f af c2             	imul   eax,edx
c001d409:	50                   	push   eax
c001d40a:	e8 0d 25 ff ff       	call   c000f91c <malloc>
c001d40f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d412:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d419:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d41d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d421:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d425:	0f af c2             	imul   eax,edx
c001d428:	99                   	cdq    
c001d429:	52                   	push   edx
c001d42a:	50                   	push   eax
c001d42b:	55                   	push   ebp
c001d42c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d42f:	83 c4 20             	add    esp,0x20
c001d432:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d436:	0f 86 8a 00 00 00    	jbe    c001d4c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d43c:	0f b7 de             	movzx  ebx,si
c001d43f:	c1 e3 05             	shl    ebx,0x5
c001d442:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d446:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d449:	75 75                	jne    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d44b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d44e:	31 d2                	xor    edx,edx
c001d450:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d454:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d45b:	50                   	push   eax
c001d45c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d45f:	52                   	push   edx
c001d460:	50                   	push   eax
c001d461:	55                   	push   ebp
c001d462:	e8 ed 60 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	85 c0                	test   eax,eax
c001d46c:	0f 85 71 05 00 00    	jne    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d472:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d479:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d47c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d480:	31 d2                	xor    edx,edx
c001d482:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d48d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d494:	50                   	push   eax
c001d495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49d:	52                   	push   edx
c001d49e:	50                   	push   eax
c001d49f:	55                   	push   ebp
c001d4a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4a3:	83 c4 1c             	add    esp,0x1c
c001d4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4a9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4ac:	50                   	push   eax
c001d4ad:	6a 00                	push   0x0
c001d4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4b7:	50                   	push   eax
c001d4b8:	e8 cb 32 fe ff       	call   c0000788 <memset>
c001d4bd:	83 c4 10             	add    esp,0x10
c001d4c0:	46                   	inc    esi
c001d4c1:	e9 6c ff ff ff       	jmp    c001d432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4c6:	53                   	push   ebx
c001d4c7:	31 db                	xor    ebx,ebx
c001d4c9:	68 00 01 00 00       	push   0x100
c001d4ce:	6a 00                	push   0x0
c001d4d0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4d4:	50                   	push   eax
c001d4d5:	e8 ae 32 fe ff       	call   c0000788 <memset>
c001d4da:	83 c4 0c             	add    esp,0xc
c001d4dd:	68 00 01 00 00       	push   0x100
c001d4e2:	6a 00                	push   0x0
c001d4e4:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4eb:	50                   	push   eax
c001d4ec:	e8 97 32 fe ff       	call   c0000788 <memset>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d4fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d504:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d50c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d514:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d51c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d520:	0f 86 30 01 00 00    	jbe    c001d656 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d526:	0f b7 f3             	movzx  esi,bx
c001d529:	6b f6 28             	imul   esi,esi,0x28
c001d52c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d530:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d537:	52                   	push   edx
c001d538:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d53c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d540:	8b 06                	mov    eax,DWORD PTR [esi]
c001d542:	6b d2 28             	imul   edx,edx,0x28
c001d545:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d549:	31 d2                	xor    edx,edx
c001d54b:	52                   	push   edx
c001d54c:	50                   	push   eax
c001d54d:	55                   	push   ebp
c001d54e:	e8 01 60 ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d553:	83 c4 0c             	add    esp,0xc
c001d556:	6a 20                	push   0x20
c001d558:	6a 00                	push   0x0
c001d55a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d561:	51                   	push   ecx
c001d562:	e8 21 32 fe ff       	call   c0000788 <memset>
c001d567:	59                   	pop    ecx
c001d568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d56b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d56f:	52                   	push   edx
c001d570:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d577:	51                   	push   ecx
c001d578:	6a 00                	push   0x0
c001d57a:	6a 1f                	push   0x1f
c001d57c:	55                   	push   ebp
c001d57d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d580:	83 c4 1c             	add    esp,0x1c
c001d583:	6a 09                	push   0x9
c001d585:	68 38 ca 02 c0       	push   0xc002ca38
c001d58a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d591:	51                   	push   ecx
c001d592:	e8 cd 30 fe ff       	call   c0000664 <memcmp>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	85 c0                	test   eax,eax
c001d59c:	75 21                	jne    c001d5bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d59e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5a6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5b1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5b8:	89 d0                	mov    eax,edx
c001d5ba:	40                   	inc    eax
c001d5bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5bf:	50                   	push   eax
c001d5c0:	6a 09                	push   0x9
c001d5c2:	68 42 ca 02 c0       	push   0xc002ca42
c001d5c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5ce:	50                   	push   eax
c001d5cf:	e8 90 30 fe ff       	call   c0000664 <memcmp>
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	85 c0                	test   eax,eax
c001d5d9:	75 21                	jne    c001d5fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5e3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5ee:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5f5:	89 d0                	mov    eax,edx
c001d5f7:	40                   	inc    eax
c001d5f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5fc:	50                   	push   eax
c001d5fd:	50                   	push   eax
c001d5fe:	68 0e ca 02 c0       	push   0xc002ca0e
c001d603:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d60a:	50                   	push   eax
c001d60b:	e8 c0 32 fe ff       	call   c00008d0 <strcmp>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	85 c0                	test   eax,eax
c001d615:	75 0f                	jne    c001d626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d617:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d61a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d61e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d626:	50                   	push   eax
c001d627:	50                   	push   eax
c001d628:	68 16 ca 02 c0       	push   0xc002ca16
c001d62d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d634:	50                   	push   eax
c001d635:	e8 96 32 fe ff       	call   c00008d0 <strcmp>
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	85 c0                	test   eax,eax
c001d63f:	75 0f                	jne    c001d650 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d641:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d644:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d64c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d650:	43                   	inc    ebx
c001d651:	e9 c6 fe ff ff       	jmp    c001d51c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d656:	31 d2                	xor    edx,edx
c001d658:	50                   	push   eax
c001d659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d65d:	52                   	push   edx
c001d65e:	50                   	push   eax
c001d65f:	55                   	push   ebp
c001d660:	e8 ef 5e ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d665:	58                   	pop    eax
c001d666:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d66a:	e8 ad 22 ff ff       	call   c000f91c <malloc>
c001d66f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d672:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d676:	31 d2                	xor    edx,edx
c001d678:	58                   	pop    eax
c001d679:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d67d:	53                   	push   ebx
c001d67e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d682:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d686:	52                   	push   edx
c001d687:	50                   	push   eax
c001d688:	55                   	push   ebp
c001d689:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d68c:	83 c4 14             	add    esp,0x14
c001d68f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d693:	e8 84 22 ff ff       	call   c000f91c <malloc>
c001d698:	31 d2                	xor    edx,edx
c001d69a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d69e:	83 c4 0c             	add    esp,0xc
c001d6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6a5:	52                   	push   edx
c001d6a6:	50                   	push   eax
c001d6a7:	55                   	push   ebp
c001d6a8:	e8 a7 5e ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d6ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6b0:	31 d2                	xor    edx,edx
c001d6b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6bd:	52                   	push   edx
c001d6be:	50                   	push   eax
c001d6bf:	55                   	push   ebp
c001d6c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6c3:	83 c4 20             	add    esp,0x20
c001d6c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6d2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6d6:	0f 84 0b 03 00 00    	je     c001d9e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6dc:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6e3:	31 d2                	xor    edx,edx
c001d6e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e9:	c1 e8 03             	shr    eax,0x3
c001d6ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6f0:	51                   	push   ecx
c001d6f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6f5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d6f9:	52                   	push   edx
c001d6fa:	50                   	push   eax
c001d6fb:	55                   	push   ebp
c001d6fc:	e8 53 5e ff ff       	call   c0013554 <File::seek(unsigned long long)>
c001d701:	5b                   	pop    ebx
c001d702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d706:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d70d:	e8 0a 22 ff ff       	call   c000f91c <malloc>
c001d712:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d715:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d719:	31 d2                	xor    edx,edx
c001d71b:	5e                   	pop    esi
c001d71c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d720:	50                   	push   eax
c001d721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d725:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d729:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d730:	52                   	push   edx
c001d731:	50                   	push   eax
c001d732:	55                   	push   ebp
c001d733:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d736:	83 c4 20             	add    esp,0x20
c001d739:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d741:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d745:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d749:	0f 8d 7c 02 00 00    	jge    c001d9cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d74f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d757:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d75c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d75f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d763:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d767:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d76b:	89 d8                	mov    eax,ebx
c001d76d:	c1 e8 08             	shr    eax,0x8
c001d770:	89 c6                	mov    esi,eax
c001d772:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d776:	c1 e6 04             	shl    esi,0x4
c001d779:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d77d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d780:	85 d2                	test   edx,edx
c001d782:	0f 85 bf 00 00 00    	jne    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d788:	83 ec 0c             	sub    esp,0xc
c001d78b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d78f:	03 06                	add    eax,DWORD PTR [esi]
c001d791:	50                   	push   eax
c001d792:	e8 4b f8 ff ff       	call   c001cfe2 <Thr::getAddressOfKernelSymbol(char const*)>
c001d797:	83 c4 10             	add    esp,0x10
c001d79a:	89 c2                	mov    edx,eax
c001d79c:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d7a1:	85 c0                	test   eax,eax
c001d7a3:	0f 85 9e 00 00 00    	jne    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7a9:	83 ec 0c             	sub    esp,0xc
c001d7ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7b0:	03 06                	add    eax,DWORD PTR [esi]
c001d7b2:	50                   	push   eax
c001d7b3:	e8 17 0e ff ff       	call   c000e5cf <Krnl::resolveCompatibilitySymbol(char*)>
c001d7b8:	83 c4 10             	add    esp,0x10
c001d7bb:	89 c2                	mov    edx,eax
c001d7bd:	85 c0                	test   eax,eax
c001d7bf:	0f 85 82 00 00 00    	jne    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7c5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7c9:	50                   	push   eax
c001d7ca:	50                   	push   eax
c001d7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7cf:	03 06                	add    eax,DWORD PTR [esi]
c001d7d1:	50                   	push   eax
c001d7d2:	68 4c ca 02 c0       	push   0xc002ca4c
c001d7d7:	e8 f7 56 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001d7dc:	58                   	pop    eax
c001d7dd:	5a                   	pop    edx
c001d7de:	68 66 ca 02 c0       	push   0xc002ca66
c001d7e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7ea:	50                   	push   eax
c001d7eb:	e8 54 30 fe ff       	call   c0000844 <strcpy>
c001d7f0:	59                   	pop    ecx
c001d7f1:	58                   	pop    eax
c001d7f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f6:	03 06                	add    eax,DWORD PTR [esi]
c001d7f8:	50                   	push   eax
c001d7f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d800:	50                   	push   eax
c001d801:	e8 7e 31 fe ff       	call   c0000984 <strcat>
c001d806:	58                   	pop    eax
c001d807:	5a                   	pop    edx
c001d808:	68 fc ca 02 c0       	push   0xc002cafc
c001d80d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d814:	50                   	push   eax
c001d815:	e8 6a 31 fe ff       	call   c0000984 <strcat>
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d822:	0f 84 5d 01 00 00    	je     c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d832:	50                   	push   eax
c001d833:	e8 57 d0 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d838:	83 c4 10             	add    esp,0x10
c001d83b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d83f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d843:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d847:	80 fb 01             	cmp    bl,0x1
c001d84a:	0f 85 88 00 00 00    	jne    c001d8d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d850:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d857:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d85b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d85f:	01 ce                	add    esi,ecx
c001d861:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d867:	0f 94 c0             	sete   al
c001d86a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d870:	0f 94 c3             	sete   bl
c001d873:	09 c3                	or     ebx,eax
c001d875:	8b 06                	mov    eax,DWORD PTR [esi]
c001d877:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d87c:	74 41                	je     c001d8bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d87e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d881:	84 db                	test   bl,bl
c001d883:	75 15                	jne    c001d89a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d885:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d889:	66 83 f8 0c          	cmp    ax,0xc
c001d88d:	76 05                	jbe    c001d894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d88f:	b8 0c 00 00 00       	mov    eax,0xc
c001d894:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d898:	76 37                	jbe    c001d8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d89a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d89e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8a3:	0f 84 dc 00 00 00    	je     c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8a9:	83 ec 0c             	sub    esp,0xc
c001d8ac:	68 7d ca 02 c0       	push   0xc002ca7d
c001d8b1:	e8 d9 cf ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8bd:	eb 12                	jmp    c001d8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8bf:	01 c1                	add    ecx,eax
c001d8c1:	84 db                	test   bl,bl
c001d8c3:	75 0c                	jne    c001d8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8c9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8cd:	77 02                	ja     c001d8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8cf:	01 d1                	add    ecx,edx
c001d8d1:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8d3:	e9 ea 00 00 00       	jmp    c001d9c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8d8:	80 fb 02             	cmp    bl,0x2
c001d8db:	75 7c                	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8dd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8e4:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8e8:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8ec:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8f2:	74 20                	je     c001d914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8f4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d8fa:	74 18                	je     c001d914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8fc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d900:	b9 0a 00 00 00       	mov    ecx,0xa
c001d905:	66 83 f8 0e          	cmp    ax,0xe
c001d909:	77 03                	ja     c001d90e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d90b:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d90e:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d912:	76 1f                	jbe    c001d933 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d914:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d918:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d91d:	74 66                	je     c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d91f:	83 ec 0c             	sub    esp,0xc
c001d922:	68 99 ca 02 c0       	push   0xc002ca99
c001d927:	e8 63 cf ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d933:	8b 06                	mov    eax,DWORD PTR [esi]
c001d935:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d93a:	74 13                	je     c001d94f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d93c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d940:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d947:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d94b:	01 c8                	add    eax,ecx
c001d94d:	eb 04                	jmp    c001d953 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d94f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d953:	01 c2                	add    edx,eax
c001d955:	89 16                	mov    DWORD PTR [esi],edx
c001d957:	eb 69                	jmp    c001d9c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d959:	0f b6 db             	movzx  ebx,bl
c001d95c:	50                   	push   eax
c001d95d:	50                   	push   eax
c001d95e:	53                   	push   ebx
c001d95f:	68 b5 ca 02 c0       	push   0xc002cab5
c001d964:	e8 6a 55 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001d969:	83 c4 10             	add    esp,0x10
c001d96c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d971:	74 12                	je     c001d985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d973:	83 ec 0c             	sub    esp,0xc
c001d976:	68 c0 ca 02 c0       	push   0xc002cac0
c001d97b:	e8 0f cf ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001d980:	83 c4 10             	add    esp,0x10
c001d983:	eb 3d                	jmp    c001d9c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d985:	83 ec 0c             	sub    esp,0xc
c001d988:	55                   	push   ebp
c001d989:	e8 66 5b ff ff       	call   c00134f4 <File::close()>
c001d98e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d991:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d994:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d997:	59                   	pop    ecx
c001d998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d99c:	e8 8b 1f ff ff       	call   c000f92c <free>
c001d9a1:	5b                   	pop    ebx
c001d9a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9a6:	e8 81 1f ff ff       	call   c000f92c <free>
c001d9ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9ae:	e8 79 1f ff ff       	call   c000f92c <free>
c001d9b3:	5e                   	pop    esi
c001d9b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9b8:	e8 6f 1f ff ff       	call   c000f92c <free>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	eb 21                	jmp    c001d9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9c2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9c6:	e9 76 fd ff ff       	jmp    c001d741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9cb:	83 ec 0c             	sub    esp,0xc
c001d9ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9d2:	e8 55 1f ff ff       	call   c000f92c <free>
c001d9d7:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9db:	83 c4 10             	add    esp,0x10
c001d9de:	e9 eb fc ff ff       	jmp    c001d6ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9e3:	31 c0                	xor    eax,eax
c001d9e5:	eb 33                	jmp    c001da1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9e7:	83 ec 0c             	sub    esp,0xc
c001d9ea:	55                   	push   ebp
c001d9eb:	e8 04 5b ff ff       	call   c00134f4 <File::close()>
c001d9f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9f9:	58                   	pop    eax
c001d9fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9fe:	e8 29 1f ff ff       	call   c000f92c <free>
c001da03:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da06:	e8 21 1f ff ff       	call   c000f92c <free>
c001da0b:	5a                   	pop    edx
c001da0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da10:	e8 17 1f ff ff       	call   c000f92c <free>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	b0 01                	mov    al,0x1
c001da1a:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da20:	5b                   	pop    ebx
c001da21:	5e                   	pop    esi
c001da22:	5f                   	pop    edi
c001da23:	5d                   	pop    ebp
c001da24:	c3                   	ret    

c001da25 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da25:	56                   	push   esi
c001da26:	31 d2                	xor    edx,edx
c001da28:	53                   	push   ebx
c001da29:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001da2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da33:	39 d3                	cmp    ebx,edx
c001da35:	7e 1b                	jle    c001da52 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da37:	8b 04 95 c0 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce240]
c001da3e:	39 c8                	cmp    eax,ecx
c001da40:	77 0d                	ja     c001da4f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da42:	8b 34 95 c0 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce440]
c001da49:	01 c6                	add    esi,eax
c001da4b:	39 ce                	cmp    esi,ecx
c001da4d:	77 05                	ja     c001da54 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da4f:	42                   	inc    edx
c001da50:	eb e1                	jmp    c001da33 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da52:	31 c0                	xor    eax,eax
c001da54:	5b                   	pop    ebx
c001da55:	5e                   	pop    esi
c001da56:	c3                   	ret    

c001da57 <Thr::getDriverNameFromAddress(unsigned long)>:
c001da57:	53                   	push   ebx
c001da58:	31 c0                	xor    eax,eax
c001da5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da5e:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001da64:	39 c3                	cmp    ebx,eax
c001da66:	7e 22                	jle    c001da8a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da68:	8b 14 85 c0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce240]
c001da6f:	39 ca                	cmp    edx,ecx
c001da71:	77 14                	ja     c001da87 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da73:	03 14 85 c0 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce440]
c001da7a:	39 ca                	cmp    edx,ecx
c001da7c:	76 09                	jbe    c001da87 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da7e:	8b 04 85 c0 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce040]
c001da85:	eb 05                	jmp    c001da8c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da87:	40                   	inc    eax
c001da88:	eb da                	jmp    c001da64 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da8a:	31 c0                	xor    eax,eax
c001da8c:	5b                   	pop    ebx
c001da8d:	c3                   	ret    

c001da8e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da8e:	53                   	push   ebx
c001da8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da93:	53                   	push   ebx
c001da94:	e8 8c ff ff ff       	call   c001da25 <Thr::getDriverBaseFromAddress(unsigned long)>
c001da99:	5a                   	pop    edx
c001da9a:	31 d2                	xor    edx,edx
c001da9c:	85 c0                	test   eax,eax
c001da9e:	74 04                	je     c001daa4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001daa0:	89 da                	mov    edx,ebx
c001daa2:	29 c2                	sub    edx,eax
c001daa4:	89 d0                	mov    eax,edx
c001daa6:	5b                   	pop    ebx
c001daa7:	c3                   	ret    

c001daa8 <Thr::loadDLL(char const*, bool)>:
c001daa8:	55                   	push   ebp
c001daa9:	57                   	push   edi
c001daaa:	56                   	push   esi
c001daab:	53                   	push   ebx
c001daac:	81 ec 34 01 00 00    	sub    esp,0x134
c001dab2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dab9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dac0:	56                   	push   esi
c001dac1:	68 d8 ca 02 c0       	push   0xc002cad8
c001dac6:	e8 08 54 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001dacb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dad2:	e8 45 1e ff ff       	call   c000f91c <malloc>
c001dad7:	83 c4 0c             	add    esp,0xc
c001dada:	89 c3                	mov    ebx,eax
c001dadc:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001dae2:	56                   	push   esi
c001dae3:	50                   	push   eax
c001dae4:	e8 49 59 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001dae9:	83 c4 10             	add    esp,0x10
c001daec:	85 db                	test   ebx,ebx
c001daee:	75 3c                	jne    c001db2c <Thr::loadDLL(char const*, bool)+0x84>
c001daf0:	89 f8                	mov    eax,edi
c001daf2:	84 c0                	test   al,al
c001daf4:	0f 84 cc 01 00 00    	je     c001dcc6 <Thr::loadDLL(char const*, bool)+0x21e>
c001dafa:	55                   	push   ebp
c001dafb:	55                   	push   ebp
c001dafc:	68 e9 ca 02 c0       	push   0xc002cae9
c001db01:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001db05:	55                   	push   ebp
c001db06:	e8 39 2d fe ff       	call   c0000844 <strcpy>
c001db0b:	58                   	pop    eax
c001db0c:	5a                   	pop    edx
c001db0d:	56                   	push   esi
c001db0e:	55                   	push   ebp
c001db0f:	e8 70 2e fe ff       	call   c0000984 <strcat>
c001db14:	59                   	pop    ecx
c001db15:	58                   	pop    eax
c001db16:	68 fc ca 02 c0       	push   0xc002cafc
c001db1b:	55                   	push   ebp
c001db1c:	e8 63 2e fe ff       	call   c0000984 <strcat>
c001db21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db24:	e8 66 cd ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	51                   	push   ecx
c001db2d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db31:	50                   	push   eax
c001db32:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db36:	50                   	push   eax
c001db37:	53                   	push   ebx
c001db38:	e8 05 5c ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	85 db                	test   ebx,ebx
c001db42:	74 0c                	je     c001db50 <Thr::loadDLL(char const*, bool)+0xa8>
c001db44:	83 ec 0c             	sub    esp,0xc
c001db47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db49:	53                   	push   ebx
c001db4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db55:	75 0a                	jne    c001db61 <Thr::loadDLL(char const*, bool)+0xb9>
c001db57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db5b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db5f:	75 3c                	jne    c001db9d <Thr::loadDLL(char const*, bool)+0xf5>
c001db61:	89 f8                	mov    eax,edi
c001db63:	84 c0                	test   al,al
c001db65:	0f 84 43 01 00 00    	je     c001dcae <Thr::loadDLL(char const*, bool)+0x206>
c001db6b:	51                   	push   ecx
c001db6c:	51                   	push   ecx
c001db6d:	68 e9 ca 02 c0       	push   0xc002cae9
c001db72:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db76:	53                   	push   ebx
c001db77:	e8 c8 2c fe ff       	call   c0000844 <strcpy>
c001db7c:	5d                   	pop    ebp
c001db7d:	58                   	pop    eax
c001db7e:	56                   	push   esi
c001db7f:	53                   	push   ebx
c001db80:	e8 ff 2d fe ff       	call   c0000984 <strcat>
c001db85:	58                   	pop    eax
c001db86:	5a                   	pop    edx
c001db87:	68 fc ca 02 c0       	push   0xc002cafc
c001db8c:	53                   	push   ebx
c001db8d:	e8 f2 2d fe ff       	call   c0000984 <strcat>
c001db92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db95:	e8 f5 cc ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001db9a:	83 c4 10             	add    esp,0x10
c001db9d:	52                   	push   edx
c001db9e:	6a 03                	push   0x3
c001dba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dba8:	05 ff 0f 00 00       	add    eax,0xfff
c001dbad:	83 d2 00             	adc    edx,0x0
c001dbb0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dbb4:	50                   	push   eax
c001dbb5:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001dbbb:	e8 46 48 ff ff       	call   c0012406 <VAS::allocatePages(int, int)>
c001dbc0:	59                   	pop    ecx
c001dbc1:	89 c3                	mov    ebx,eax
c001dbc3:	5d                   	pop    ebp
c001dbc4:	50                   	push   eax
c001dbc5:	68 fe ca 02 c0       	push   0xc002cafe
c001dbca:	e8 04 53 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001dbcf:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbd2:	e8 cd 2b fe ff       	call   c00007a4 <strlen>
c001dbd7:	8b 2d a0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031ba0
c001dbdd:	40                   	inc    eax
c001dbde:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbe1:	e8 36 1d ff ff       	call   c000f91c <malloc>
c001dbe6:	89 04 ad c0 1f 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce040],eax
c001dbed:	58                   	pop    eax
c001dbee:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001dbf3:	5a                   	pop    edx
c001dbf4:	56                   	push   esi
c001dbf5:	ff 34 85 c0 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce040]
c001dbfc:	e8 43 2c fe ff       	call   c0000844 <strcpy>
c001dc01:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001dc06:	8d 50 01             	lea    edx,[eax+0x1]
c001dc09:	89 1c 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],ebx
c001dc10:	89 15 a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,edx
c001dc16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc1a:	83 c4 0c             	add    esp,0xc
c001dc1d:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c001dc24:	6a 01                	push   0x1
c001dc26:	53                   	push   ebx
c001dc27:	56                   	push   esi
c001dc28:	e8 c2 f6 ff ff       	call   c001d2ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc2d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc39:	0f 85 83 00 00 00    	jne    c001dcc2 <Thr::loadDLL(char const*, bool)+0x21a>
c001dc3f:	89 f8                	mov    eax,edi
c001dc41:	84 c0                	test   al,al
c001dc43:	74 6d                	je     c001dcb2 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc45:	83 ec 0c             	sub    esp,0xc
c001dc48:	68 0b cb 02 c0       	push   0xc002cb0b
c001dc4d:	e8 3d cc ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001dc52:	83 c4 10             	add    esp,0x10
c001dc55:	eb 5b                	jmp    c001dcb2 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc57:	89 ee                	mov    esi,ebp
c001dc59:	50                   	push   eax
c001dc5a:	c1 e6 0c             	shl    esi,0xc
c001dc5d:	50                   	push   eax
c001dc5e:	01 de                	add    esi,ebx
c001dc60:	56                   	push   esi
c001dc61:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001dc67:	e8 02 43 ff ff       	call   c0011f6e <VAS::getPageTableEntry(unsigned long)>
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc72:	75 0c                	jne    c001dc80 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc74:	83 ec 0c             	sub    esp,0xc
c001dc77:	56                   	push   esi
c001dc78:	e8 81 22 ff ff       	call   c000fefe <Phys::freePage(unsigned long)>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	45                   	inc    ebp
c001dc81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc89:	05 ff 0f 00 00       	add    eax,0xfff
c001dc8e:	bf 00 00 00 00       	mov    edi,0x0
c001dc93:	83 d2 00             	adc    edx,0x0
c001dc96:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc9a:	c1 ea 0c             	shr    edx,0xc
c001dc9d:	39 c5                	cmp    ebp,eax
c001dc9f:	89 d1                	mov    ecx,edx
c001dca1:	89 f8                	mov    eax,edi
c001dca3:	19 c8                	sbb    eax,ecx
c001dca5:	72 b0                	jb     c001dc57 <Thr::loadDLL(char const*, bool)+0x1af>
c001dca7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dcac:	75 18                	jne    c001dcc6 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcae:	31 db                	xor    ebx,ebx
c001dcb0:	eb 14                	jmp    c001dcc6 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcb2:	83 ec 0c             	sub    esp,0xc
c001dcb5:	68 2a cb 02 c0       	push   0xc002cb2a
c001dcba:	e8 d0 cb ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001dcbf:	83 c4 10             	add    esp,0x10
c001dcc2:	31 ed                	xor    ebp,ebp
c001dcc4:	eb bb                	jmp    c001dc81 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dcc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dccc:	89 d8                	mov    eax,ebx
c001dcce:	5b                   	pop    ebx
c001dccf:	5e                   	pop    esi
c001dcd0:	5f                   	pop    edi
c001dcd1:	5d                   	pop    ebp
c001dcd2:	c3                   	ret    

c001dcd3 <Thr::executeDLL(unsigned long, void*)>:
c001dcd3:	56                   	push   esi
c001dcd4:	53                   	push   ebx
c001dcd5:	52                   	push   edx
c001dcd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dcde:	85 db                	test   ebx,ebx
c001dce0:	75 10                	jne    c001dcf2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dce2:	83 ec 0c             	sub    esp,0xc
c001dce5:	68 46 cb 02 c0       	push   0xc002cb46
c001dcea:	e8 a0 cb ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001dcef:	83 c4 10             	add    esp,0x10
c001dcf2:	50                   	push   eax
c001dcf3:	50                   	push   eax
c001dcf4:	53                   	push   ebx
c001dcf5:	68 70 cb 02 c0       	push   0xc002cb70
c001dcfa:	e8 d4 51 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001dcff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd03:	89 d8                	mov    eax,ebx
c001dd05:	83 c4 14             	add    esp,0x14
c001dd08:	5b                   	pop    ebx
c001dd09:	5e                   	pop    esi
c001dd0a:	ff e0                	jmp    eax

c001dd0c <userModeEntryPoint(void*)>:
c001dd0c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001dd11:	48                   	dec    eax
c001dd12:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001dd17:	75 01                	jne    c001dd1a <userModeEntryPoint(void*)+0xe>
c001dd19:	fb                   	sti    
c001dd1a:	fb                   	sti    
c001dd1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd23:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd2d:	e9 f8 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd32 <changeTSS>:
c001dd32:	83 ec 14             	sub    esp,0x14
c001dd35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd3a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd3d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd42:	c1 e2 15             	shl    edx,0x15
c001dd45:	29 d0                	sub    eax,edx
c001dd47:	50                   	push   eax
c001dd48:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001dd4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd53:	05 7c 11 00 00       	add    eax,0x117c
c001dd58:	50                   	push   eax
c001dd59:	e8 ae 36 ff ff       	call   c001140c <TSS::setESP(unsigned long)>
c001dd5e:	83 c4 1c             	add    esp,0x1c
c001dd61:	c3                   	ret    

c001dd62 <switchToThread(ThreadControlBlock*)>:
c001dd62:	57                   	push   edi
c001dd63:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001dd68:	56                   	push   esi
c001dd69:	85 c0                	test   eax,eax
c001dd6b:	53                   	push   ebx
c001dd6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd70:	0f 85 88 00 00 00    	jne    c001ddfe <switchToThread(ThreadControlBlock*)+0x9c>
c001dd76:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd79:	3c ff                	cmp    al,0xff
c001dd7b:	74 7d                	je     c001ddfa <switchToThread(ThreadControlBlock*)+0x98>
c001dd7d:	0f b6 d0             	movzx  edx,al
c001dd80:	b8 84 03 00 00       	mov    eax,0x384
c001dd85:	29 d0                	sub    eax,edx
c001dd87:	c1 e0 10             	shl    eax,0x10
c001dd8a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd8d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd90:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001dd95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd9b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dda2:	74 4a                	je     c001ddee <switchToThread(ThreadControlBlock*)+0x8c>
c001dda4:	0f 31                	rdtsc  
c001dda6:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ddab:	89 c6                	mov    esi,eax
c001ddad:	89 d7                	mov    edi,edx
c001ddaf:	2b 35 98 23 03 c0    	sub    esi,DWORD PTR ds:0xc0032398
c001ddb5:	89 15 ac 23 03 c0    	mov    DWORD PTR ds:0xc00323ac,edx
c001ddbb:	1b 3d 9c 23 03 c0    	sbb    edi,DWORD PTR ds:0xc003239c
c001ddc1:	89 35 a0 23 03 c0    	mov    DWORD PTR ds:0xc00323a0,esi
c001ddc7:	a3 98 23 03 c0       	mov    ds:0xc0032398,eax
c001ddcc:	89 3d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edi
c001ddd2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ddd8:	89 15 9c 23 03 c0    	mov    DWORD PTR ds:0xc003239c,edx
c001ddde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dde1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dde4:	01 c6                	add    esi,eax
c001dde6:	11 d7                	adc    edi,edx
c001dde8:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001ddeb:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001ddee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ddf2:	5b                   	pop    ebx
c001ddf3:	5e                   	pop    esi
c001ddf4:	5f                   	pop    edi
c001ddf5:	e9 68 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddfa:	31 c0                	xor    eax,eax
c001ddfc:	eb 8f                	jmp    c001dd8d <switchToThread(ThreadControlBlock*)+0x2b>
c001ddfe:	5b                   	pop    ebx
c001ddff:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001de09:	5e                   	pop    esi
c001de0a:	5f                   	pop    edi
c001de0b:	c3                   	ret    

c001de0c <Process::addArgs(char**)>:
c001de0c:	57                   	push   edi
c001de0d:	56                   	push   esi
c001de0e:	53                   	push   ebx
c001de0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de13:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de17:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de21:	85 ff                	test   edi,edi
c001de23:	74 3d                	je     c001de62 <Process::addArgs(char**)+0x56>
c001de25:	8b 07                	mov    eax,DWORD PTR [edi]
c001de27:	85 c0                	test   eax,eax
c001de29:	74 37                	je     c001de62 <Process::addArgs(char**)+0x56>
c001de2b:	31 db                	xor    ebx,ebx
c001de2d:	83 ec 0c             	sub    esp,0xc
c001de30:	50                   	push   eax
c001de31:	e8 6e 29 fe ff       	call   c00007a4 <strlen>
c001de36:	40                   	inc    eax
c001de37:	89 04 24             	mov    DWORD PTR [esp],eax
c001de3a:	e8 dd 1a ff ff       	call   c000f91c <malloc>
c001de3f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de46:	5a                   	pop    edx
c001de47:	59                   	pop    ecx
c001de48:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de4b:	43                   	inc    ebx
c001de4c:	50                   	push   eax
c001de4d:	e8 f2 29 fe ff       	call   c0000844 <strcpy>
c001de52:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de58:	83 c4 10             	add    esp,0x10
c001de5b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de5e:	85 c0                	test   eax,eax
c001de60:	75 cb                	jne    c001de2d <Process::addArgs(char**)+0x21>
c001de62:	5b                   	pop    ebx
c001de63:	5e                   	pop    esi
c001de64:	5f                   	pop    edi
c001de65:	c3                   	ret    

c001de66 <Process::Process(char const*, Process*, char**)>:
c001de66:	56                   	push   esi
c001de67:	53                   	push   ebx
c001de68:	83 ec 14             	sub    esp,0x14
c001de6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de6f:	05 0c 02 00 00       	add    eax,0x20c
c001de74:	bb 07 00 00 00       	mov    ebx,0x7
c001de79:	89 c6                	mov    esi,eax
c001de7b:	85 db                	test   ebx,ebx
c001de7d:	78 12                	js     c001de91 <Process::Process(char const*, Process*, char**)+0x2b>
c001de7f:	83 ec 0c             	sub    esp,0xc
c001de82:	56                   	push   esi
c001de83:	e8 ba b6 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	83 c6 63             	add    esi,0x63
c001de8e:	4b                   	dec    ebx
c001de8f:	eb ea                	jmp    c001de7b <Process::Process(char const*, Process*, char**)+0x15>
c001de91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de95:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dea3:	e8 38 c8 ff ff       	call   c001a6e0 <Krnl::newProcessEnv(Process*)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	89 c2                	mov    edx,eax
c001dead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001deb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001debb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dec4:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c001dec9:	8d 50 01             	lea    edx,[eax+0x1]
c001decc:	89 15 b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,edx
c001ded2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ded6:	89 02                	mov    DWORD PTR [edx],eax
c001ded8:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dee0:	83 ec 0c             	sub    esp,0xc
c001dee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dee7:	e8 30 1a ff ff       	call   c000f91c <malloc>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	89 c3                	mov    ebx,eax
c001def1:	83 ec 08             	sub    esp,0x8
c001def4:	6a 00                	push   0x0
c001def6:	53                   	push   ebx
c001def7:	e8 b2 48 ff ff       	call   c00127ae <VAS::VAS(bool)>
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df03:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df0d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df1f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df29:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df2f:	85 c0                	test   eax,eax
c001df31:	74 42                	je     c001df75 <Process::Process(char const*, Process*, char**)+0x10f>
c001df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df3d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df47:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df51:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df57:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df61:	05 0c 01 00 00       	add    eax,0x10c
c001df66:	83 ec 08             	sub    esp,0x8
c001df69:	52                   	push   edx
c001df6a:	50                   	push   eax
c001df6b:	e8 d4 28 fe ff       	call   c0000844 <strcpy>
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	eb 63                	jmp    c001dfd8 <Process::Process(char const*, Process*, char**)+0x172>
c001df75:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df7d:	83 ec 0c             	sub    esp,0xc
c001df80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df84:	e8 93 19 ff ff       	call   c000f91c <malloc>
c001df89:	83 c4 10             	add    esp,0x10
c001df8c:	89 c3                	mov    ebx,eax
c001df8e:	83 ec 08             	sub    esp,0x8
c001df91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df95:	53                   	push   ebx
c001df96:	e8 53 31 ff ff       	call   c00110ee <VgaText::VgaText(char const*)>
c001df9b:	83 c4 10             	add    esp,0x10
c001df9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	50                   	push   eax
c001dfb6:	e8 6a 26 ff ff       	call   c0010625 <addToTerminalCycle(VgaText*)>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfc2:	05 0c 01 00 00       	add    eax,0x10c
c001dfc7:	83 ec 08             	sub    esp,0x8
c001dfca:	68 8f cb 02 c0       	push   0xc002cb8f
c001dfcf:	50                   	push   eax
c001dfd0:	e8 6f 28 fe ff       	call   c0000844 <strcpy>
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfdc:	83 c0 0c             	add    eax,0xc
c001dfdf:	83 ec 08             	sub    esp,0x8
c001dfe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfe6:	50                   	push   eax
c001dfe7:	e8 58 28 fe ff       	call   c0000844 <strcpy>
c001dfec:	83 c4 10             	add    esp,0x10
c001dfef:	83 ec 08             	sub    esp,0x8
c001dff2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dff6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dffa:	e8 0d fe ff ff       	call   c001de0c <Process::addArgs(char**)>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	83 ec 08             	sub    esp,0x8
c001e005:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e009:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e00d:	e8 a7 ed ff ff       	call   c001cdb9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e019:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e01d:	83 f0 01             	xor    eax,0x1
c001e020:	88 c2                	mov    dl,al
c001e022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e026:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e02c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e031:	83 ec 08             	sub    esp,0x8
c001e034:	50                   	push   eax
c001e035:	68 bc cc 02 c0       	push   0xc002ccbc
c001e03a:	e8 94 4e ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e03f:	83 c4 10             	add    esp,0x10
c001e042:	90                   	nop
c001e043:	83 c4 14             	add    esp,0x14
c001e046:	5b                   	pop    ebx
c001e047:	5e                   	pop    esi
c001e048:	c3                   	ret    
c001e049:	90                   	nop

c001e04a <Process::Process(bool, char const*, Process*, char**)>:
c001e04a:	56                   	push   esi
c001e04b:	53                   	push   ebx
c001e04c:	83 ec 24             	sub    esp,0x24
c001e04f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e053:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e05b:	05 0c 02 00 00       	add    eax,0x20c
c001e060:	bb 07 00 00 00       	mov    ebx,0x7
c001e065:	89 c6                	mov    esi,eax
c001e067:	85 db                	test   ebx,ebx
c001e069:	78 12                	js     c001e07d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e06b:	83 ec 0c             	sub    esp,0xc
c001e06e:	56                   	push   esi
c001e06f:	e8 ce b4 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001e074:	83 c4 10             	add    esp,0x10
c001e077:	83 c6 63             	add    esi,0x63
c001e07a:	4b                   	dec    ebx
c001e07b:	eb ea                	jmp    c001e067 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e07d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e081:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e08f:	e8 4c c6 ff ff       	call   c001a6e0 <Krnl::newProcessEnv(Process*)>
c001e094:	83 c4 10             	add    esp,0x10
c001e097:	89 c2                	mov    edx,eax
c001e099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e09d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0a7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0b0:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c001e0b5:	8d 50 01             	lea    edx,[eax+0x1]
c001e0b8:	89 15 b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,edx
c001e0be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0c2:	89 02                	mov    DWORD PTR [edx],eax
c001e0c4:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0d3:	e8 44 18 ff ff       	call   c000f91c <malloc>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	89 c3                	mov    ebx,eax
c001e0dd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0e2:	83 ec 08             	sub    esp,0x8
c001e0e5:	50                   	push   eax
c001e0e6:	53                   	push   ebx
c001e0e7:	e8 c2 46 ff ff       	call   c00127ae <VAS::VAS(bool)>
c001e0ec:	83 c4 10             	add    esp,0x10
c001e0ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0f3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e10f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e119:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e11f:	85 c0                	test   eax,eax
c001e121:	74 42                	je     c001e165 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e127:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e12d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e137:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e13d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e141:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e147:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e14d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e151:	05 0c 01 00 00       	add    eax,0x10c
c001e156:	83 ec 08             	sub    esp,0x8
c001e159:	52                   	push   edx
c001e15a:	50                   	push   eax
c001e15b:	e8 e4 26 fe ff       	call   c0000844 <strcpy>
c001e160:	83 c4 10             	add    esp,0x10
c001e163:	eb 63                	jmp    c001e1c8 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e165:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e16d:	83 ec 0c             	sub    esp,0xc
c001e170:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e174:	e8 a3 17 ff ff       	call   c000f91c <malloc>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	89 c3                	mov    ebx,eax
c001e17e:	83 ec 08             	sub    esp,0x8
c001e181:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e185:	53                   	push   ebx
c001e186:	e8 63 2f ff ff       	call   c00110ee <VgaText::VgaText(char const*)>
c001e18b:	83 c4 10             	add    esp,0x10
c001e18e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e192:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e19c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1a2:	83 ec 0c             	sub    esp,0xc
c001e1a5:	50                   	push   eax
c001e1a6:	e8 7a 24 ff ff       	call   c0010625 <addToTerminalCycle(VgaText*)>
c001e1ab:	83 c4 10             	add    esp,0x10
c001e1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b2:	05 0c 01 00 00       	add    eax,0x10c
c001e1b7:	83 ec 08             	sub    esp,0x8
c001e1ba:	68 8f cb 02 c0       	push   0xc002cb8f
c001e1bf:	50                   	push   eax
c001e1c0:	e8 7f 26 fe ff       	call   c0000844 <strcpy>
c001e1c5:	83 c4 10             	add    esp,0x10
c001e1c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1cc:	83 c0 0c             	add    eax,0xc
c001e1cf:	83 ec 08             	sub    esp,0x8
c001e1d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1d6:	50                   	push   eax
c001e1d7:	e8 68 26 fe ff       	call   c0000844 <strcpy>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1ea:	e8 1d fc ff ff       	call   c001de0c <Process::addArgs(char**)>
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	90                   	nop
c001e1f3:	83 c4 24             	add    esp,0x24
c001e1f6:	5b                   	pop    ebx
c001e1f7:	5e                   	pop    esi
c001e1f8:	c3                   	ret    

c001e1f9 <taskStartupFunction>:
c001e1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1fe:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e201:	c3                   	ret    

c001e202 <Semaphore::Semaphore(int)>:
c001e202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e206:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e20a:	89 10                	mov    DWORD PTR [eax],edx
c001e20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e210:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e217:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e21b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e226:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e22d:	90                   	nop
c001e22e:	c3                   	ret    
c001e22f:	90                   	nop

c001e230 <Mutex::Mutex()>:
c001e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e234:	6a 01                	push   0x1
c001e236:	50                   	push   eax
c001e237:	e8 c6 ff ff ff       	call   c001e202 <Semaphore::Semaphore(int)>
c001e23c:	83 c4 08             	add    esp,0x8
c001e23f:	90                   	nop
c001e240:	c3                   	ret    
c001e241:	90                   	nop

c001e242 <Process::createThread(void (*)(void*), void*, int)>:
c001e242:	55                   	push   ebp
c001e243:	31 c9                	xor    ecx,ecx
c001e245:	57                   	push   edi
c001e246:	56                   	push   esi
c001e247:	53                   	push   ebx
c001e248:	83 ec 1c             	sub    esp,0x1c
c001e24b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e24f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e256:	89 f2                	mov    edx,esi
c001e258:	0f b7 c2             	movzx  eax,dx
c001e25b:	83 e2 01             	and    edx,0x1
c001e25e:	74 16                	je     c001e276 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e260:	d1 f8                	sar    eax,1
c001e262:	41                   	inc    ecx
c001e263:	89 c2                	mov    edx,eax
c001e265:	83 f9 10             	cmp    ecx,0x10
c001e268:	75 ee                	jne    c001e258 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e26a:	83 c4 1c             	add    esp,0x1c
c001e26d:	31 db                	xor    ebx,ebx
c001e26f:	89 d8                	mov    eax,ebx
c001e271:	5b                   	pop    ebx
c001e272:	5e                   	pop    esi
c001e273:	5f                   	pop    edi
c001e274:	5d                   	pop    ebp
c001e275:	c3                   	ret    
c001e276:	b8 01 00 00 00       	mov    eax,0x1
c001e27b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e27e:	d3 e0                	shl    eax,cl
c001e280:	09 c6                	or     esi,eax
c001e282:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e285:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e28c:	89 c6                	mov    esi,eax
c001e28e:	c1 e6 05             	shl    esi,0x5
c001e291:	01 f0                	add    eax,esi
c001e293:	01 d8                	add    eax,ebx
c001e295:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e29c:	75 0a                	jne    c001e2a8 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e29e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2a8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2ae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2b2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2b5:	01 ca                	add    edx,ecx
c001e2b7:	83 ec 08             	sub    esp,0x8
c001e2ba:	89 d0                	mov    eax,edx
c001e2bc:	c1 e0 05             	shl    eax,0x5
c001e2bf:	01 d0                	add    eax,edx
c001e2c1:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2c9:	01 d8                	add    eax,ebx
c001e2cb:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2d1:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e2d7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2dd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2e3:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2e9:	89 cd                	mov    ebp,ecx
c001e2eb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2ef:	f7 dd                	neg    ebp
c001e2f1:	c1 e5 15             	shl    ebp,0x15
c001e2f4:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e2fa:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e300:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e30a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e310:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e31a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e324:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e328:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e32f:	53                   	push   ebx
c001e330:	68 84 23 03 c0       	push   0xc0032384
c001e335:	e8 c2 af 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e33a:	89 d8                	mov    eax,ebx
c001e33c:	83 c4 10             	add    esp,0x10
c001e33f:	83 c4 1c             	add    esp,0x1c
c001e342:	5b                   	pop    ebx
c001e343:	5e                   	pop    esi
c001e344:	5f                   	pop    edi
c001e345:	5d                   	pop    ebp
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <Process::createUserThread()>:
c001e348:	83 ec 0c             	sub    esp,0xc
c001e34b:	68 80 00 00 00       	push   0x80
c001e350:	6a 00                	push   0x0
c001e352:	68 0c dd 01 c0       	push   0xc001dd0c
c001e357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e35b:	e8 e2 fe ff ff       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c001e360:	83 c4 1c             	add    esp,0x1c
c001e363:	c3                   	ret    

c001e364 <setupMultitasking(void (*)())>:
c001e364:	56                   	push   esi
c001e365:	53                   	push   ebx
c001e366:	51                   	push   ecx
c001e367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e36b:	eb 10                	jmp    c001e37d <setupMultitasking(void (*)())+0x19>
c001e36d:	83 ec 0c             	sub    esp,0xc
c001e370:	68 84 23 03 c0       	push   0xc0032384
c001e375:	e8 d4 ae 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e37a:	83 c4 10             	add    esp,0x10
c001e37d:	83 ec 0c             	sub    esp,0xc
c001e380:	68 84 23 03 c0       	push   0xc0032384
c001e385:	e8 a0 ae 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e38a:	83 c4 10             	add    esp,0x10
c001e38d:	84 c0                	test   al,al
c001e38f:	74 dc                	je     c001e36d <setupMultitasking(void (*)())+0x9>
c001e391:	83 ec 0c             	sub    esp,0xc
c001e394:	68 3f 07 00 00       	push   0x73f
c001e399:	e8 7e 15 ff ff       	call   c000f91c <malloc>
c001e39e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3a5:	89 c3                	mov    ebx,eax
c001e3a7:	6a 00                	push   0x0
c001e3a9:	68 93 cb 02 c0       	push   0xc002cb93
c001e3ae:	6a 01                	push   0x1
c001e3b0:	50                   	push   eax
c001e3b1:	e8 94 fc ff ff       	call   c001e04a <Process::Process(bool, char const*, Process*, char**)>
c001e3b6:	83 c4 18             	add    esp,0x18
c001e3b9:	89 1d 90 23 03 c0    	mov    DWORD PTR ds:0xc0032390,ebx
c001e3bf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3c5:	68 e4 cc 02 c0       	push   0xc002cce4
c001e3ca:	e8 04 4b ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e3cf:	58                   	pop    eax
c001e3d0:	5a                   	pop    edx
c001e3d1:	6a 63                	push   0x63
c001e3d3:	68 18 cd 02 c0       	push   0xc002cd18
c001e3d8:	e8 f6 4a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e3dd:	59                   	pop    ecx
c001e3de:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3e4:	e8 0d 29 ff ff       	call   c0010cf6 <setActiveTerminal(VgaText*)>
c001e3e9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3f1:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e3fb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e401:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e404:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e40e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e414:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e41a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e424:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e42e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e438:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e43e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e448:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e44e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e458:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e45e:	58                   	pop    eax
c001e45f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e465:	5a                   	pop    edx
c001e466:	68 8f cb 02 c0       	push   0xc002cb8f
c001e46b:	50                   	push   eax
c001e46c:	e8 d3 23 fe ff       	call   c0000844 <strcpy>
c001e471:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e478:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e47c:	83 c4 14             	add    esp,0x14
c001e47f:	5b                   	pop    ebx
c001e480:	5e                   	pop    esi
c001e481:	e9 ce 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e486 <schedule()>:
c001e486:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e48b:	85 c0                	test   eax,eax
c001e48d:	74 0b                	je     c001e49a <schedule()+0x14>
c001e48f:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001e499:	c3                   	ret    
c001e49a:	53                   	push   ebx
c001e49b:	83 ec 14             	sub    esp,0x14
c001e49e:	68 84 23 03 c0       	push   0xc0032384
c001e4a3:	e8 82 ad 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4a8:	83 c4 10             	add    esp,0x10
c001e4ab:	84 c0                	test   al,al
c001e4ad:	75 38                	jne    c001e4e7 <schedule()+0x61>
c001e4af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4b7:	4a                   	dec    edx
c001e4b8:	74 32                	je     c001e4ec <schedule()+0x66>
c001e4ba:	83 ec 0c             	sub    esp,0xc
c001e4bd:	68 84 23 03 c0       	push   0xc0032384
c001e4c2:	e8 7f ad 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4c7:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e4ce:	89 c3                	mov    ebx,eax
c001e4d0:	e8 79 ad 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4d5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4df:	e8 7e f8 ff ff       	call   c001dd62 <switchToThread(ThreadControlBlock*)>
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	83 c4 08             	add    esp,0x8
c001e4ea:	5b                   	pop    ebx
c001e4eb:	c3                   	ret    
c001e4ec:	83 ec 08             	sub    esp,0x8
c001e4ef:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e4f6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e4fc:	68 84 23 03 c0       	push   0xc0032384
c001e501:	e8 f6 ad 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e506:	83 c4 10             	add    esp,0x10
c001e509:	eb af                	jmp    c001e4ba <schedule()+0x34>
c001e50b:	90                   	nop

c001e50c <Semaphore::tryAcquire()>:
c001e50c:	53                   	push   ebx
c001e50d:	83 ec 08             	sub    esp,0x8
c001e510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e514:	fa                   	cli    
c001e515:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e51a:	8d 50 01             	lea    edx,[eax+0x1]
c001e51d:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001e523:	8b 15 64 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032364
c001e529:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e52c:	89 1d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ebx
c001e532:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e535:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e537:	7c 2a                	jl     c001e563 <Semaphore::tryAcquire()+0x57>
c001e539:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e53f:	85 d2                	test   edx,edx
c001e541:	75 0a                	jne    c001e54d <Semaphore::tryAcquire()+0x41>
c001e543:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c001e549:	85 d2                	test   edx,edx
c001e54b:	75 5b                	jne    c001e5a8 <Semaphore::tryAcquire()+0x9c>
c001e54d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e552:	85 c0                	test   eax,eax
c001e554:	74 07                	je     c001e55d <Semaphore::tryAcquire()+0x51>
c001e556:	31 c0                	xor    eax,eax
c001e558:	83 c4 08             	add    esp,0x8
c001e55b:	5b                   	pop    ebx
c001e55c:	c3                   	ret    
c001e55d:	fb                   	sti    
c001e55e:	83 c4 08             	add    esp,0x8
c001e561:	5b                   	pop    ebx
c001e562:	c3                   	ret    
c001e563:	43                   	inc    ebx
c001e564:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e56a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e56d:	85 d2                	test   edx,edx
c001e56f:	75 1f                	jne    c001e590 <Semaphore::tryAcquire()+0x84>
c001e571:	8b 0d 60 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032360
c001e577:	85 c9                	test   ecx,ecx
c001e579:	74 15                	je     c001e590 <Semaphore::tryAcquire()+0x84>
c001e57b:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e585:	e8 fc fe ff ff       	call   c001e486 <schedule()>
c001e58a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e58f:	48                   	dec    eax
c001e590:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e595:	85 c0                	test   eax,eax
c001e597:	75 08                	jne    c001e5a1 <Semaphore::tryAcquire()+0x95>
c001e599:	fb                   	sti    
c001e59a:	b0 01                	mov    al,0x1
c001e59c:	83 c4 08             	add    esp,0x8
c001e59f:	5b                   	pop    ebx
c001e5a0:	c3                   	ret    
c001e5a1:	b0 01                	mov    al,0x1
c001e5a3:	83 c4 08             	add    esp,0x8
c001e5a6:	5b                   	pop    ebx
c001e5a7:	c3                   	ret    
c001e5a8:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e5b2:	e8 cf fe ff ff       	call   c001e486 <schedule()>
c001e5b7:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e5bc:	48                   	dec    eax
c001e5bd:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e5c2:	85 c0                	test   eax,eax
c001e5c4:	75 90                	jne    c001e556 <Semaphore::tryAcquire()+0x4a>
c001e5c6:	eb 95                	jmp    c001e55d <Semaphore::tryAcquire()+0x51>

c001e5c8 <Semaphore::assertLocked(char const*)>:
c001e5c8:	83 ec 0c             	sub    esp,0xc
c001e5cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5cf:	fa                   	cli    
c001e5d0:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e5d6:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e5db:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5de:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e5e4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5e6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5e9:	7c 24                	jl     c001e60f <Semaphore::assertLocked(char const*)+0x47>
c001e5eb:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e5f0:	85 c0                	test   eax,eax
c001e5f2:	75 09                	jne    c001e5fd <Semaphore::assertLocked(char const*)+0x35>
c001e5f4:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e5f9:	85 c0                	test   eax,eax
c001e5fb:	75 29                	jne    c001e626 <Semaphore::assertLocked(char const*)+0x5e>
c001e5fd:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e602:	48                   	dec    eax
c001e603:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e608:	75 01                	jne    c001e60b <Semaphore::assertLocked(char const*)+0x43>
c001e60a:	fb                   	sti    
c001e60b:	83 c4 0c             	add    esp,0xc
c001e60e:	c3                   	ret    
c001e60f:	83 ec 0c             	sub    esp,0xc
c001e612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e616:	e8 74 c2 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001e61b:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e620:	83 c4 10             	add    esp,0x10
c001e623:	48                   	dec    eax
c001e624:	eb c5                	jmp    c001e5eb <Semaphore::assertLocked(char const*)+0x23>
c001e626:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e630:	e8 51 fe ff ff       	call   c001e486 <schedule()>
c001e635:	eb c6                	jmp    c001e5fd <Semaphore::assertLocked(char const*)+0x35>

c001e637 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e637:	83 ec 14             	sub    esp,0x14
c001e63a:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001e640:	68 3c cd 02 c0       	push   0xc002cd3c
c001e645:	e8 89 48 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e64a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e64f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e653:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e656:	e8 2b fe ff ff       	call   c001e486 <schedule()>
c001e65b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	48                   	dec    eax
c001e664:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e669:	85 c0                	test   eax,eax
c001e66b:	75 06                	jne    c001e673 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e66d:	fb                   	sti    
c001e66e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e673:	83 ec 08             	sub    esp,0x8
c001e676:	50                   	push   eax
c001e677:	68 70 cd 02 c0       	push   0xc002cd70
c001e67c:	e8 52 48 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e681:	83 c4 1c             	add    esp,0x1c
c001e684:	c3                   	ret    

c001e685 <blockTask(TaskState)>:
c001e685:	83 ec 0c             	sub    esp,0xc
c001e688:	fa                   	cli    
c001e689:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e68f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e698:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e69b:	e8 e6 fd ff ff       	call   c001e486 <schedule()>
c001e6a0:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e6a5:	48                   	dec    eax
c001e6a6:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e6ab:	75 01                	jne    c001e6ae <blockTask(TaskState)+0x29>
c001e6ad:	fb                   	sti    
c001e6ae:	83 c4 0c             	add    esp,0xc
c001e6b1:	c3                   	ret    

c001e6b2 <waitTask(int, int*, int)>:
c001e6b2:	83 ec 18             	sub    esp,0x18
c001e6b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6be:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ca:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6cd:	6a 07                	push   0x7
c001e6cf:	e8 b1 ff ff ff       	call   c001e685 <blockTask(TaskState)>
c001e6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6df:	85 d2                	test   edx,edx
c001e6e1:	74 0a                	je     c001e6ed <waitTask(int, int*, int)+0x3b>
c001e6e3:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6e6:	89 02                	mov    DWORD PTR [edx],eax
c001e6e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ed:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6f0:	83 c4 0c             	add    esp,0xc
c001e6f3:	c3                   	ret    

c001e6f4 <nanoSleepUntil(unsigned long long)>:
c001e6f4:	83 ec 0c             	sub    esp,0xc
c001e6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6ff:	3b 05 b0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4b0
c001e705:	89 d1                	mov    ecx,edx
c001e707:	1b 0d b4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4b4
c001e70d:	73 04                	jae    c001e713 <nanoSleepUntil(unsigned long long)+0x1f>
c001e70f:	83 c4 0c             	add    esp,0xc
c001e712:	c3                   	ret    
c001e713:	fa                   	cli    
c001e714:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e71a:	83 ec 08             	sub    esp,0x8
c001e71d:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001e723:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e729:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e72c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e72f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e735:	68 78 23 03 c0       	push   0xc0032378
c001e73a:	e8 bd ab 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e73f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e746:	e8 3a ff ff ff       	call   c001e685 <blockTask(TaskState)>
c001e74b:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e750:	83 c4 10             	add    esp,0x10
c001e753:	48                   	dec    eax
c001e754:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e759:	85 c0                	test   eax,eax
c001e75b:	75 09                	jne    c001e766 <nanoSleepUntil(unsigned long long)+0x72>
c001e75d:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e762:	85 c0                	test   eax,eax
c001e764:	75 12                	jne    c001e778 <nanoSleepUntil(unsigned long long)+0x84>
c001e766:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e76b:	48                   	dec    eax
c001e76c:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e771:	75 9c                	jne    c001e70f <nanoSleepUntil(unsigned long long)+0x1b>
c001e773:	fb                   	sti    
c001e774:	83 c4 0c             	add    esp,0xc
c001e777:	c3                   	ret    
c001e778:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e782:	e8 ff fc ff ff       	call   c001e486 <schedule()>
c001e787:	eb dd                	jmp    c001e766 <nanoSleepUntil(unsigned long long)+0x72>

c001e789 <nanoSleep(unsigned long long)>:
c001e789:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c001e78e:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c001e794:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e798:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e79c:	e9 53 ff ff ff       	jmp    c001e6f4 <nanoSleepUntil(unsigned long long)>

c001e7a1 <sleep(unsigned long long)>:
c001e7a1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7a9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7ae:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7b2:	01 ca                	add    edx,ecx
c001e7b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7b8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7bc:	eb cb                	jmp    c001e789 <nanoSleep(unsigned long long)>

c001e7be <Semaphore::acquire()>:
c001e7be:	83 ec 0c             	sub    esp,0xc
c001e7c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7c5:	fa                   	cli    
c001e7c6:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e7cb:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e7d1:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7d4:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e7da:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7dd:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7df:	7d 28                	jge    c001e809 <Semaphore::acquire()+0x4b>
c001e7e1:	41                   	inc    ecx
c001e7e2:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7e5:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e7ea:	85 c0                	test   eax,eax
c001e7ec:	75 09                	jne    c001e7f7 <Semaphore::acquire()+0x39>
c001e7ee:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e7f3:	85 c0                	test   eax,eax
c001e7f5:	75 4e                	jne    c001e845 <Semaphore::acquire()+0x87>
c001e7f7:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e7fc:	48                   	dec    eax
c001e7fd:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e802:	75 01                	jne    c001e805 <Semaphore::acquire()+0x47>
c001e804:	fb                   	sti    
c001e805:	83 c4 0c             	add    esp,0xc
c001e808:	c3                   	ret    
c001e809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e80e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e815:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e818:	85 c9                	test   ecx,ecx
c001e81a:	74 3a                	je     c001e856 <Semaphore::acquire()+0x98>
c001e81c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e81f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e825:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e828:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e82d:	83 ec 0c             	sub    esp,0xc
c001e830:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e833:	6a 05                	push   0x5
c001e835:	e8 4b fe ff ff       	call   c001e685 <blockTask(TaskState)>
c001e83a:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	48                   	dec    eax
c001e843:	eb a0                	jmp    c001e7e5 <Semaphore::acquire()+0x27>
c001e845:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e84f:	e8 32 fc ff ff       	call   c001e486 <schedule()>
c001e854:	eb a1                	jmp    c001e7f7 <Semaphore::acquire()+0x39>
c001e856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e85b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e85e:	eb c8                	jmp    c001e828 <Semaphore::acquire()+0x6a>

c001e860 <taskReturned>:
c001e860:	83 ec 18             	sub    esp,0x18
c001e863:	68 a4 cd 02 c0       	push   0xc002cda4
c001e868:	e8 22 c0 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	6a 02                	push   0x2
c001e875:	e8 0b fe ff ff       	call   c001e685 <blockTask(TaskState)>
c001e87a:	fa                   	cli    
c001e87b:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e881:	e8 00 fc ff ff       	call   c001e486 <schedule()>
c001e886:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e88b:	83 c4 10             	add    esp,0x10
c001e88e:	48                   	dec    eax
c001e88f:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e894:	85 c0                	test   eax,eax
c001e896:	75 d8                	jne    c001e870 <taskReturned+0x10>
c001e898:	fb                   	sti    
c001e899:	eb d5                	jmp    c001e870 <taskReturned+0x10>

c001e89b <Thr::processFromPID(int)>:
c001e89b:	57                   	push   edi
c001e89c:	56                   	push   esi
c001e89d:	53                   	push   ebx
c001e89e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	68 9a cb 02 c0       	push   0xc002cb9a
c001e8aa:	e8 24 46 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e8af:	fa                   	cli    
c001e8b0:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e8b6:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e8bd:	e8 84 a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8c2:	83 c4 10             	add    esp,0x10
c001e8c5:	89 c7                	mov    edi,eax
c001e8c7:	eb 14                	jmp    c001e8dd <Thr::processFromPID(int)+0x42>
c001e8c9:	83 ec 0c             	sub    esp,0xc
c001e8cc:	68 84 23 03 c0       	push   0xc0032384
c001e8d1:	e8 70 a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8d6:	83 c4 10             	add    esp,0x10
c001e8d9:	39 f8                	cmp    eax,edi
c001e8db:	74 49                	je     c001e926 <Thr::processFromPID(int)+0x8b>
c001e8dd:	83 ec 0c             	sub    esp,0xc
c001e8e0:	68 84 23 03 c0       	push   0xc0032384
c001e8e5:	e8 5c a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ea:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e8f1:	89 c3                	mov    ebx,eax
c001e8f3:	e8 56 a9 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8f8:	58                   	pop    eax
c001e8f9:	5a                   	pop    edx
c001e8fa:	53                   	push   ebx
c001e8fb:	68 84 23 03 c0       	push   0xc0032384
c001e900:	e8 f7 a9 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e905:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	39 30                	cmp    DWORD PTR [eax],esi
c001e90d:	75 ba                	jne    c001e8c9 <Thr::processFromPID(int)+0x2e>
c001e90f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e914:	48                   	dec    eax
c001e915:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e91a:	74 07                	je     c001e923 <Thr::processFromPID(int)+0x88>
c001e91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e91f:	5b                   	pop    ebx
c001e920:	5e                   	pop    esi
c001e921:	5f                   	pop    edi
c001e922:	c3                   	ret    
c001e923:	fb                   	sti    
c001e924:	eb f6                	jmp    c001e91c <Thr::processFromPID(int)+0x81>
c001e926:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e92b:	48                   	dec    eax
c001e92c:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e931:	75 01                	jne    c001e934 <Thr::processFromPID(int)+0x99>
c001e933:	fb                   	sti    
c001e934:	83 ec 0c             	sub    esp,0xc
c001e937:	68 b5 cb 02 c0       	push   0xc002cbb5
c001e93c:	e8 92 45 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	31 c0                	xor    eax,eax
c001e946:	5b                   	pop    ebx
c001e947:	5e                   	pop    esi
c001e948:	5f                   	pop    edi
c001e949:	c3                   	ret    

c001e94a <unblockTask(ThreadControlBlock*)>:
c001e94a:	53                   	push   ebx
c001e94b:	83 ec 08             	sub    esp,0x8
c001e94e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e952:	fa                   	cli    
c001e953:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e959:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e95c:	85 c0                	test   eax,eax
c001e95e:	74 66                	je     c001e9c6 <unblockTask(ThreadControlBlock*)+0x7c>
c001e960:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e963:	48                   	dec    eax
c001e964:	74 31                	je     c001e997 <unblockTask(ThreadControlBlock*)+0x4d>
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	68 84 23 03 c0       	push   0xc0032384
c001e96e:	e8 d3 a8 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	85 c0                	test   eax,eax
c001e978:	75 17                	jne    c001e991 <unblockTask(ThreadControlBlock*)+0x47>
c001e97a:	eb 68                	jmp    c001e9e4 <unblockTask(ThreadControlBlock*)+0x9a>
c001e97c:	83 ec 08             	sub    esp,0x8
c001e97f:	50                   	push   eax
c001e980:	68 84 23 03 c0       	push   0xc0032384
c001e985:	e8 5a ac 00 00       	call   c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e98a:	83 c4 10             	add    esp,0x10
c001e98d:	85 c0                	test   eax,eax
c001e98f:	74 53                	je     c001e9e4 <unblockTask(ThreadControlBlock*)+0x9a>
c001e991:	39 c3                	cmp    ebx,eax
c001e993:	75 e7                	jne    c001e97c <unblockTask(ThreadControlBlock*)+0x32>
c001e995:	eb 1c                	jmp    c001e9b3 <unblockTask(ThreadControlBlock*)+0x69>
c001e997:	83 ec 0c             	sub    esp,0xc
c001e99a:	68 94 ce 02 c0       	push   0xc002ce94
c001e99f:	e8 2f 45 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e9a4:	c7 04 24 20 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce20
c001e9ab:	e8 23 45 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e9b8:	48                   	dec    eax
c001e9b9:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e9be:	75 01                	jne    c001e9c1 <unblockTask(ThreadControlBlock*)+0x77>
c001e9c0:	fb                   	sti    
c001e9c1:	83 c4 08             	add    esp,0x8
c001e9c4:	5b                   	pop    ebx
c001e9c5:	c3                   	ret    
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	68 d8 cd 02 c0       	push   0xc002cdd8
c001e9ce:	e8 00 45 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e9d3:	c7 04 24 20 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce20
c001e9da:	e8 f4 44 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	eb cf                	jmp    c001e9b3 <unblockTask(ThreadControlBlock*)+0x69>
c001e9e4:	83 ec 08             	sub    esp,0x8
c001e9e7:	53                   	push   ebx
c001e9e8:	68 84 23 03 c0       	push   0xc0032384
c001e9ed:	e8 0a a9 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9f2:	83 c4 10             	add    esp,0x10
c001e9f5:	eb bc                	jmp    c001e9b3 <unblockTask(ThreadControlBlock*)+0x69>

c001e9f7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e9f7:	55                   	push   ebp
c001e9f8:	57                   	push   edi
c001e9f9:	56                   	push   esi
c001e9fa:	53                   	push   ebx
c001e9fb:	83 ec 1c             	sub    esp,0x1c
c001e9fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea02:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea05:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea0b:	85 ff                	test   edi,edi
c001ea0d:	7e 20                	jle    c001ea2f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea0f:	31 f6                	xor    esi,esi
c001ea11:	83 ec 0c             	sub    esp,0xc
c001ea14:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea1b:	46                   	inc    esi
c001ea1c:	e8 0b 0f ff ff       	call   c000f92c <free>
c001ea21:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea24:	83 c4 10             	add    esp,0x10
c001ea27:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea2d:	7f e2                	jg     c001ea11 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea2f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea39:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea3e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea41:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea44:	d3 c0                	rol    eax,cl
c001ea46:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea4d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea50:	89 f7                	mov    edi,esi
c001ea52:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea5a:	0f 85 74 01 00 00    	jne    c001ebd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea60:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea66:	85 ed                	test   ebp,ebp
c001ea68:	74 1b                	je     c001ea85 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea6a:	83 ec 0c             	sub    esp,0xc
c001ea6d:	55                   	push   ebp
c001ea6e:	e8 89 bb ff ff       	call   c001a5fc <EnvVarContainer::~EnvVarContainer()>
c001ea73:	59                   	pop    ecx
c001ea74:	5e                   	pop    esi
c001ea75:	6a 0c                	push   0xc
c001ea77:	55                   	push   ebp
c001ea78:	e8 76 43 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001ea7d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea80:	83 c4 10             	add    esp,0x10
c001ea83:	89 f7                	mov    edi,esi
c001ea85:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea8b:	85 c0                	test   eax,eax
c001ea8d:	0f 84 aa 00 00 00    	je     c001eb3d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea93:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ea96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea9a:	31 c9                	xor    ecx,ecx
c001ea9c:	eb 10                	jmp    c001eaae <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ea9e:	41                   	inc    ecx
c001ea9f:	83 f9 10             	cmp    ecx,0x10
c001eaa2:	0f 84 95 00 00 00    	je     c001eb3d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eaa8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eaae:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eab5:	d3 fa                	sar    edx,cl
c001eab7:	83 e2 01             	and    edx,0x1
c001eaba:	74 e2                	je     c001ea9e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eabc:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eabf:	01 ca                	add    edx,ecx
c001eac1:	89 d5                	mov    ebp,edx
c001eac3:	c1 e5 05             	shl    ebp,0x5
c001eac6:	01 ea                	add    edx,ebp
c001eac8:	01 d0                	add    eax,edx
c001eaca:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ead0:	83 fd 07             	cmp    ebp,0x7
c001ead3:	75 c9                	jne    c001ea9e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ead5:	05 40 02 00 00       	add    eax,0x240
c001eada:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eadd:	83 fd ff             	cmp    ebp,0xffffffff
c001eae0:	0f 8c 08 01 00 00    	jl     c001ebee <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eae6:	0f 84 b9 01 00 00    	je     c001eca5 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eaec:	85 ed                	test   ebp,ebp
c001eaee:	0f 84 a0 01 00 00    	je     c001ec94 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eaf4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eaf6:	75 a6                	jne    c001ea9e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eaf8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eafe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb02:	01 d0                	add    eax,edx
c001eb04:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb11:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb14:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb1a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb21:	50                   	push   eax
c001eb22:	e8 23 fe ff ff       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb31:	89 f7                	mov    edi,esi
c001eb33:	41                   	inc    ecx
c001eb34:	83 f9 10             	cmp    ecx,0x10
c001eb37:	0f 85 6b ff ff ff    	jne    c001eaa8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb3d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb43:	85 c0                	test   eax,eax
c001eb45:	74 5d                	je     c001eba4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb47:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb4d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb53:	74 4f                	je     c001eba4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb55:	83 ec 0c             	sub    esp,0xc
c001eb58:	68 84 23 03 c0       	push   0xc0032384
c001eb5d:	e8 e4 a6 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb62:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001eb69:	89 c7                	mov    edi,eax
c001eb6b:	e8 ba a6 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb70:	83 c4 10             	add    esp,0x10
c001eb73:	84 c0                	test   al,al
c001eb75:	0f 84 e4 00 00 00    	je     c001ec5f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb7e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb84:	85 d2                	test   edx,edx
c001eb86:	74 0f                	je     c001eb97 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb8d:	52                   	push   edx
c001eb8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001eba1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eba4:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ebaa:	85 db                	test   ebx,ebx
c001ebac:	74 16                	je     c001ebc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ebae:	83 ec 0c             	sub    esp,0xc
c001ebb1:	53                   	push   ebx
c001ebb2:	e8 d1 35 ff ff       	call   c0012188 <VAS::~VAS()>
c001ebb7:	58                   	pop    eax
c001ebb8:	5a                   	pop    edx
c001ebb9:	6a 14                	push   0x14
c001ebbb:	53                   	push   ebx
c001ebbc:	e8 32 42 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c001ebc1:	83 c4 10             	add    esp,0x10
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	68 cc cb 02 c0       	push   0xc002cbcc
c001ebcc:	e8 02 43 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	83 ec 08             	sub    esp,0x8
c001ebd7:	68 3f 07 00 00       	push   0x73f
c001ebdc:	68 da cb 02 c0       	push   0xc002cbda
c001ebe1:	e8 ed 42 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ebe6:	83 c4 2c             	add    esp,0x2c
c001ebe9:	5b                   	pop    ebx
c001ebea:	5e                   	pop    esi
c001ebeb:	5f                   	pop    edi
c001ebec:	5d                   	pop    ebp
c001ebed:	c3                   	ret    
c001ebee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ebf2:	83 ec 0c             	sub    esp,0xc
c001ebf5:	68 d8 ce 02 c0       	push   0xc002ced8
c001ebfa:	e8 90 bc ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001ebff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec02:	83 c4 10             	add    esp,0x10
c001ec05:	89 f7                	mov    edi,esi
c001ec07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec0b:	e9 8e fe ff ff       	jmp    c001ea9e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec16:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec1c:	75 1c                	jne    c001ec3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	68 40 cf 02 c0       	push   0xc002cf40
c001ec26:	e8 a8 42 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ec2b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec32:	e8 4e fa ff ff       	call   c001e685 <blockTask(TaskState)>
c001ec37:	83 c4 10             	add    esp,0x10
c001ec3a:	83 ec 08             	sub    esp,0x8
c001ec3d:	56                   	push   esi
c001ec3e:	68 84 23 03 c0       	push   0xc0032384
c001ec43:	e8 b4 a6 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec48:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001ec4f:	e8 f2 a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec54:	83 c4 10             	add    esp,0x10
c001ec57:	39 f8                	cmp    eax,edi
c001ec59:	0f 84 1c ff ff ff    	je     c001eb7b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec5f:	83 ec 0c             	sub    esp,0xc
c001ec62:	68 84 23 03 c0       	push   0xc0032384
c001ec67:	e8 da a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec6c:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001ec73:	89 c6                	mov    esi,eax
c001ec75:	e8 d4 a5 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec7a:	83 c4 10             	add    esp,0x10
c001ec7d:	39 f3                	cmp    ebx,esi
c001ec7f:	74 b9                	je     c001ec3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec81:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec84:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec87:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec8d:	75 ab                	jne    c001ec3a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec8f:	e9 7c ff ff ff       	jmp    c001ec10 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec98:	83 ec 0c             	sub    esp,0xc
c001ec9b:	68 0c cf 02 c0       	push   0xc002cf0c
c001eca0:	e9 55 ff ff ff       	jmp    c001ebfa <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001eca5:	8b 36                	mov    esi,DWORD PTR [esi]
c001eca7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecab:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ecae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecb1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ecb7:	01 d7                	add    edi,edx
c001ecb9:	89 f8                	mov    eax,edi
c001ecbb:	e9 44 fe ff ff       	jmp    c001eb04 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecc0 <cleanerTaskFunction(void*)>:
c001ecc0:	53                   	push   ebx
c001ecc1:	83 ec 08             	sub    esp,0x8
c001ecc4:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ecc9:	48                   	dec    eax
c001ecca:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eccf:	75 01                	jne    c001ecd2 <cleanerTaskFunction(void*)+0x12>
c001ecd1:	fb                   	sti    
c001ecd2:	fa                   	cli    
c001ecd3:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ecd8:	80 3d 4c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003234c,0x0
c001ecdf:	8d 50 01             	lea    edx,[eax+0x1]
c001ece2:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001ece8:	0f 84 b9 00 00 00    	je     c001eda7 <cleanerTaskFunction(void*)+0xe7>
c001ecee:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ecf3:	85 c0                	test   eax,eax
c001ecf5:	75 01                	jne    c001ecf8 <cleanerTaskFunction(void*)+0x38>
c001ecf7:	fb                   	sti    
c001ecf8:	c6 05 4c 23 03 c0 00 	mov    BYTE PTR ds:0xc003234c,0x0
c001ecff:	fa                   	cli    
c001ed00:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ed06:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001ed0c:	fa                   	cli    
c001ed0d:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ed13:	eb 3e                	jmp    c001ed53 <cleanerTaskFunction(void*)+0x93>
c001ed15:	83 ec 0c             	sub    esp,0xc
c001ed18:	68 6c 23 03 c0       	push   0xc003236c
c001ed1d:	e8 24 a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed22:	c7 04 24 6c 23 03 c0 	mov    DWORD PTR [esp],0xc003236c
c001ed29:	89 c3                	mov    ebx,eax
c001ed2b:	e8 1e a5 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed30:	c7 04 24 f0 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf0
c001ed37:	e8 97 41 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ed3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed3f:	e8 b3 fc ff ff       	call   c001e9f7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed44:	c7 04 24 09 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc09
c001ed4b:	e8 83 41 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ed50:	83 c4 10             	add    esp,0x10
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	68 6c 23 03 c0       	push   0xc003236c
c001ed5b:	e8 ca a4 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	84 c0                	test   al,al
c001ed65:	74 ae                	je     c001ed15 <cleanerTaskFunction(void*)+0x55>
c001ed67:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ed6c:	48                   	dec    eax
c001ed6d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ed72:	75 01                	jne    c001ed75 <cleanerTaskFunction(void*)+0xb5>
c001ed74:	fb                   	sti    
c001ed75:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ed7a:	48                   	dec    eax
c001ed7b:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ed80:	0f 85 3e ff ff ff    	jne    c001ecc4 <cleanerTaskFunction(void*)+0x4>
c001ed86:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001ed8b:	85 c0                	test   eax,eax
c001ed8d:	0f 84 31 ff ff ff    	je     c001ecc4 <cleanerTaskFunction(void*)+0x4>
c001ed93:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001ed9d:	e8 e4 f6 ff ff       	call   c001e486 <schedule()>
c001eda2:	e9 1d ff ff ff       	jmp    c001ecc4 <cleanerTaskFunction(void*)+0x4>
c001eda7:	83 ec 0c             	sub    esp,0xc
c001edaa:	6a 02                	push   0x2
c001edac:	e8 86 f8 ff ff       	call   c001e637 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	e9 3f ff ff ff       	jmp    c001ecf8 <cleanerTaskFunction(void*)+0x38>

c001edb9 <terminateTask(int)>:
c001edb9:	83 ec 14             	sub    esp,0x14
c001edbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edc4:	83 c0 0c             	add    eax,0xc
c001edc7:	50                   	push   eax
c001edc8:	68 68 cf 02 c0       	push   0xc002cf68
c001edcd:	e8 01 41 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001edd2:	fa                   	cli    
c001edd3:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001edd9:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001eddf:	fa                   	cli    
c001ede0:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ede6:	c7 04 24 1c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc1c
c001eded:	e8 e1 40 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001edf2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001edf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edfb:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001edfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee03:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee06:	5a                   	pop    edx
c001ee07:	59                   	pop    ecx
c001ee08:	50                   	push   eax
c001ee09:	68 6c 23 03 c0       	push   0xc003236c
c001ee0e:	e8 e9 a4 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee18:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee1f:	c7 04 24 36 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc36
c001ee26:	e8 a8 40 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	a1 48 23 03 c0       	mov    eax,ds:0xc0032348
c001ee33:	85 c0                	test   eax,eax
c001ee35:	0f 84 8d 00 00 00    	je     c001eec8 <terminateTask(int)+0x10f>
c001ee3b:	83 ec 0c             	sub    esp,0xc
c001ee3e:	68 50 cc 02 c0       	push   0xc002cc50
c001ee43:	e8 8b 40 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ee48:	58                   	pop    eax
c001ee49:	c6 05 4c 23 03 c0 01 	mov    BYTE PTR ds:0xc003234c,0x1
c001ee50:	ff 35 48 23 03 c0    	push   DWORD PTR ds:0xc0032348
c001ee56:	e8 ef fa ff ff       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c001ee5b:	c7 04 24 6a cc 02 c0 	mov    DWORD PTR [esp],0xc002cc6a
c001ee62:	e8 6c 40 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee6f:	48                   	dec    eax
c001ee70:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ee75:	75 01                	jne    c001ee78 <terminateTask(int)+0xbf>
c001ee77:	fb                   	sti    
c001ee78:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ee7d:	48                   	dec    eax
c001ee7e:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ee83:	75 09                	jne    c001ee8e <terminateTask(int)+0xd5>
c001ee85:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c001ee8c:	75 4c                	jne    c001eeda <terminateTask(int)+0x121>
c001ee8e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee93:	48                   	dec    eax
c001ee94:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ee99:	75 01                	jne    c001ee9c <terminateTask(int)+0xe3>
c001ee9b:	fb                   	sti    
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	68 a2 cc 02 c0       	push   0xc002cca2
c001eea4:	e8 2a 40 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	fa                   	cli    
c001eead:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001eeb3:	e8 ce f5 ff ff       	call   c001e486 <schedule()>
c001eeb8:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001eebd:	48                   	dec    eax
c001eebe:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eec3:	75 e7                	jne    c001eeac <terminateTask(int)+0xf3>
c001eec5:	fb                   	sti    
c001eec6:	eb e4                	jmp    c001eeac <terminateTask(int)+0xf3>
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	68 84 cc 02 c0       	push   0xc002cc84
c001eed0:	e8 fe 3f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001eed5:	83 c4 10             	add    esp,0x10
c001eed8:	eb 90                	jmp    c001ee6a <terminateTask(int)+0xb1>
c001eeda:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001eee4:	e8 9d f5 ff ff       	call   c001e486 <schedule()>
c001eee9:	eb a3                	jmp    c001ee8e <terminateTask(int)+0xd5>

c001eeeb <Thr::terminateFromIRQ(int)>:
c001eeeb:	83 ec 18             	sub    esp,0x18
c001eeee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef2:	e8 c2 fe ff ff       	call   c001edb9 <terminateTask(int)>
c001eef7:	90                   	nop

c001eef8 <Semaphore::release()>:
c001eef8:	83 ec 0c             	sub    esp,0xc
c001eefb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeff:	fa                   	cli    
c001ef00:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ef05:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ef0b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef0e:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001ef14:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef17:	85 c9                	test   ecx,ecx
c001ef19:	74 3c                	je     c001ef57 <Semaphore::release()+0x5f>
c001ef1b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef1e:	83 ec 0c             	sub    esp,0xc
c001ef21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef24:	51                   	push   ecx
c001ef25:	e8 20 fa ff ff       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c001ef2a:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	48                   	dec    eax
c001ef33:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ef38:	85 c0                	test   eax,eax
c001ef3a:	75 09                	jne    c001ef45 <Semaphore::release()+0x4d>
c001ef3c:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001ef41:	85 c0                	test   eax,eax
c001ef43:	75 17                	jne    c001ef5c <Semaphore::release()+0x64>
c001ef45:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ef4a:	48                   	dec    eax
c001ef4b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ef50:	75 01                	jne    c001ef53 <Semaphore::release()+0x5b>
c001ef52:	fb                   	sti    
c001ef53:	83 c4 0c             	add    esp,0xc
c001ef56:	c3                   	ret    
c001ef57:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef5a:	eb d7                	jmp    c001ef33 <Semaphore::release()+0x3b>
c001ef5c:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001ef66:	e8 1b f5 ff ff       	call   c001e486 <schedule()>
c001ef6b:	eb d8                	jmp    c001ef45 <Semaphore::release()+0x4d>

c001ef6d <__static_initialization_and_destruction_0(int, int)>:
c001ef6d:	83 ec 0c             	sub    esp,0xc
c001ef70:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef75:	0f 85 88 00 00 00    	jne    c001f003 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef83:	75 7e                	jne    c001f003 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef85:	83 ec 0c             	sub    esp,0xc
c001ef88:	68 84 23 03 c0       	push   0xc0032384
c001ef8d:	e8 fa a5 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef92:	83 c4 10             	add    esp,0x10
c001ef95:	83 ec 04             	sub    esp,0x4
c001ef98:	68 50 dd 02 c0       	push   0xc002dd50
c001ef9d:	68 84 23 03 c0       	push   0xc0032384
c001efa2:	68 40 95 02 c0       	push   0xc0029540
c001efa7:	e8 c1 3d ff ff       	call   c0012d6d <__cxa_atexit>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	83 ec 0c             	sub    esp,0xc
c001efb2:	68 78 23 03 c0       	push   0xc0032378
c001efb7:	e8 d0 a5 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	83 ec 04             	sub    esp,0x4
c001efc2:	68 50 dd 02 c0       	push   0xc002dd50
c001efc7:	68 78 23 03 c0       	push   0xc0032378
c001efcc:	68 40 95 02 c0       	push   0xc0029540
c001efd1:	e8 97 3d ff ff       	call   c0012d6d <__cxa_atexit>
c001efd6:	83 c4 10             	add    esp,0x10
c001efd9:	83 ec 0c             	sub    esp,0xc
c001efdc:	68 6c 23 03 c0       	push   0xc003236c
c001efe1:	e8 a6 a5 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	83 ec 04             	sub    esp,0x4
c001efec:	68 50 dd 02 c0       	push   0xc002dd50
c001eff1:	68 6c 23 03 c0       	push   0xc003236c
c001eff6:	68 40 95 02 c0       	push   0xc0029540
c001effb:	e8 6d 3d ff ff       	call   c0012d6d <__cxa_atexit>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	90                   	nop
c001f004:	83 c4 0c             	add    esp,0xc
c001f007:	c3                   	ret    

c001f008 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	83 ec 08             	sub    esp,0x8
c001f00e:	68 ff ff 00 00       	push   0xffff
c001f013:	6a 01                	push   0x1
c001f015:	e8 53 ff ff ff       	call   c001ef6d <__static_initialization_and_destruction_0(int, int)>
c001f01a:	83 c4 10             	add    esp,0x10
c001f01d:	83 c4 0c             	add    esp,0xc
c001f020:	c3                   	ret    

c001f021 <Vm::inbv(unsigned short)>:
c001f021:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f025:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f02a:	75 06                	jne    c001f032 <Vm::inbv(unsigned short)+0x11>
c001f02c:	a0 cc 23 03 c0       	mov    al,ds:0xc00323cc
c001f031:	c3                   	ret    
c001f032:	ec                   	in     al,dx
c001f033:	c3                   	ret    

c001f034 <Vm::outbv(unsigned short, unsigned char)>:
c001f034:	53                   	push   ebx
c001f035:	83 ec 08             	sub    esp,0x8
c001f038:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f03c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f040:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f045:	75 38                	jne    c001f07f <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f047:	0f b6 c3             	movzx  eax,bl
c001f04a:	51                   	push   ecx
c001f04b:	51                   	push   ecx
c001f04c:	50                   	push   eax
c001f04d:	68 87 cf 02 c0       	push   0xc002cf87
c001f052:	e8 7c 3e ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f057:	8b 15 cc 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323cc
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	8d 42 01             	lea    eax,[edx+0x1]
c001f063:	88 9a e0 23 03 c0    	mov    BYTE PTR [edx-0x3ffcdc20],bl
c001f069:	a3 cc 23 03 c0       	mov    ds:0xc00323cc,eax
c001f06e:	83 f8 20             	cmp    eax,0x20
c001f071:	75 0f                	jne    c001f082 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f073:	c7 05 cc 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x1f
c001f07d:	eb 03                	jmp    c001f082 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f07f:	88 d8                	mov    al,bl
c001f081:	ee                   	out    dx,al
c001f082:	83 c4 08             	add    esp,0x8
c001f085:	5b                   	pop    ebx
c001f086:	c3                   	ret    

c001f087 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f087:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f08c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f091:	c1 e0 04             	shl    eax,0x4
c001f094:	01 d0                	add    eax,edx
c001f096:	c3                   	ret    

c001f097 <Vm::getSegment(unsigned int)>:
c001f097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f09b:	c1 e8 10             	shr    eax,0x10
c001f09e:	c3                   	ret    

c001f09f <Vm::getOffset(unsigned int)>:
c001f09f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0a3:	c3                   	ret    

c001f0a4 <Vm::mainloop2()>:
c001f0a4:	83 ec 18             	sub    esp,0x18
c001f0a7:	fa                   	cli    
c001f0a8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f0ae:	6a 02                	push   0x2
c001f0b0:	c6 05 c5 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c5,0x1
c001f0b7:	e8 7b f5 ff ff       	call   c001e637 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c1:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0c5:	52                   	push   edx
c001f0c6:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0ca:	52                   	push   edx
c001f0cb:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0cf:	52                   	push   edx
c001f0d0:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f0d4:	50                   	push   eax
c001f0d5:	e8 20 12 fe ff       	call   c00002fa <goToVM86>
c001f0da:	83 c4 2c             	add    esp,0x2c
c001f0dd:	c3                   	ret    

c001f0de <Vm::mainVm8086Loop(void*)>:
c001f0de:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f0e3:	48                   	dec    eax
c001f0e4:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f0e9:	75 01                	jne    c001f0ec <Vm::mainVm8086Loop(void*)+0xe>
c001f0eb:	fb                   	sti    
c001f0ec:	eb b6                	jmp    c001f0a4 <Vm::mainloop2()>

c001f0ee <Vm::mainloop3(unsigned long)>:
c001f0ee:	83 ec 18             	sub    esp,0x18
c001f0f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0f5:	fa                   	cli    
c001f0f6:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f0fc:	6a 02                	push   0x2
c001f0fe:	c6 05 c4 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c4,0x1
c001f105:	a3 c0 23 03 c0       	mov    ds:0xc00323c0,eax
c001f10a:	e8 28 f5 ff ff       	call   c001e637 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f10f:	83 c4 1c             	add    esp,0x1c
c001f112:	eb 90                	jmp    c001f0a4 <Vm::mainloop2()>

c001f114 <Vm::initialise8086()>:
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	68 80 00 00 00       	push   0x80
c001f11c:	6a 00                	push   0x0
c001f11e:	68 de f0 01 c0       	push   0xc001f0de
c001f123:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001f129:	e8 14 f1 ff ff       	call   c001e242 <Process::createThread(void (*)(void*), void*, int)>
c001f12e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f135:	a3 c8 23 03 c0       	mov    ds:0xc00323c8,eax
c001f13a:	68 00 01 00 00       	push   0x100
c001f13f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001f144:	6a 00                	push   0x0
c001f146:	6a 00                	push   0x0
c001f148:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f14e:	e8 a7 34 ff ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f153:	83 c4 2c             	add    esp,0x2c
c001f156:	c3                   	ret    

c001f157 <Vm::finish8086()>:
c001f157:	53                   	push   ebx
c001f158:	83 ec 08             	sub    esp,0x8
c001f15b:	fa                   	cli    
c001f15c:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f162:	80 3d c4 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323c4,0x0
c001f169:	75 15                	jne    c001f180 <Vm::finish8086()+0x29>
c001f16b:	e8 16 f3 ff ff       	call   c001e486 <schedule()>
c001f170:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f175:	48                   	dec    eax
c001f176:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f17b:	75 de                	jne    c001f15b <Vm::finish8086()+0x4>
c001f17d:	fb                   	sti    
c001f17e:	eb db                	jmp    c001f15b <Vm::finish8086()+0x4>
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	8b 1d c0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323c0
c001f189:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001f18f:	c6 05 c4 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c4,0x0
c001f196:	e8 af f7 ff ff       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c001f19b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f1a0:	83 c4 10             	add    esp,0x10
c001f1a3:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1a6:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001f1ac:	85 d2                	test   edx,edx
c001f1ae:	75 01                	jne    c001f1b1 <Vm::finish8086()+0x5a>
c001f1b0:	fb                   	sti    
c001f1b1:	89 d8                	mov    eax,ebx
c001f1b3:	83 c4 08             	add    esp,0x8
c001f1b6:	5b                   	pop    ebx
c001f1b7:	c3                   	ret    

c001f1b8 <Vm::getOutput8086(unsigned char*)>:
c001f1b8:	83 ec 10             	sub    esp,0x10
c001f1bb:	ff 35 cc 23 03 c0    	push   DWORD PTR ds:0xc00323cc
c001f1c1:	68 e0 23 03 c0       	push   0xc00323e0
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 99 15 fe ff       	call   c0000768 <memcpy>
c001f1cf:	a1 cc 23 03 c0       	mov    eax,ds:0xc00323cc
c001f1d4:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001f1de:	83 c4 1c             	add    esp,0x1c
c001f1e1:	c3                   	ret    

c001f1e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f1e2:	55                   	push   ebp
c001f1e3:	57                   	push   edi
c001f1e4:	56                   	push   esi
c001f1e5:	53                   	push   ebx
c001f1e6:	83 ec 2c             	sub    esp,0x2c
c001f1e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1ed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f1f1:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f1f5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f1f9:	fa                   	cli    
c001f1fa:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f200:	0f b6 35 c5 23 03 c0 	movzx  esi,BYTE PTR ds:0xc00323c5
c001f207:	89 f0                	mov    eax,esi
c001f209:	84 c0                	test   al,al
c001f20b:	75 1d                	jne    c001f22a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f20d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f211:	e8 70 f2 ff ff       	call   c001e486 <schedule()>
c001f216:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f21b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f21f:	48                   	dec    eax
c001f220:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f225:	75 d2                	jne    c001f1f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f227:	fb                   	sti    
c001f228:	eb cf                	jmp    c001f1f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f22a:	a1 c8 23 03 c0       	mov    eax,ds:0xc00323c8
c001f22f:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001f239:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f23d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f241:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f245:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f249:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f24d:	50                   	push   eax
c001f24e:	6a 20                	push   0x20
c001f250:	6a 00                	push   0x0
c001f252:	68 e0 23 03 c0       	push   0xc00323e0
c001f257:	e8 2c 15 fe ff       	call   c0000788 <memset>
c001f25c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f263:	e8 b4 06 ff ff       	call   c000f91c <malloc>
c001f268:	83 c4 0c             	add    esp,0xc
c001f26b:	89 c3                	mov    ebx,eax
c001f26d:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001f273:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f277:	50                   	push   eax
c001f278:	e8 b5 41 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c001f27d:	83 c4 10             	add    esp,0x10
c001f280:	85 db                	test   ebx,ebx
c001f282:	75 0a                	jne    c001f28e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f284:	83 ec 0c             	sub    esp,0xc
c001f287:	68 a3 cf 02 c0       	push   0xc002cfa3
c001f28c:	eb 3e                	jmp    c001f2cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f28e:	50                   	push   eax
c001f28f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f293:	50                   	push   eax
c001f294:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f298:	50                   	push   eax
c001f299:	53                   	push   ebx
c001f29a:	e8 a3 44 ff ff       	call   c0013742 <File::stat(unsigned long long*, bool*)>
c001f29f:	83 c4 10             	add    esp,0x10
c001f2a2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f2a7:	74 0a                	je     c001f2b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2a9:	83 ec 0c             	sub    esp,0xc
c001f2ac:	68 b7 cf 02 c0       	push   0xc002cfb7
c001f2b1:	eb 19                	jmp    c001f2cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2b3:	51                   	push   ecx
c001f2b4:	51                   	push   ecx
c001f2b5:	6a 01                	push   0x1
c001f2b7:	53                   	push   ebx
c001f2b8:	e8 d9 41 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	85 c0                	test   eax,eax
c001f2c2:	74 24                	je     c001f2e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2c4:	83 ec 0c             	sub    esp,0xc
c001f2c7:	68 d0 cf 02 c0       	push   0xc002cfd0
c001f2cc:	e8 be b5 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001f2d1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f2d6:	83 c4 10             	add    esp,0x10
c001f2d9:	48                   	dec    eax
c001f2da:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f2df:	85 c0                	test   eax,eax
c001f2e1:	75 01                	jne    c001f2e4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f2e3:	fb                   	sti    
c001f2e4:	31 f6                	xor    esi,esi
c001f2e6:	eb 58                	jmp    c001f340 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f2e8:	0f b7 ed             	movzx  ebp,bp
c001f2eb:	50                   	push   eax
c001f2ec:	0f b7 ff             	movzx  edi,di
c001f2ef:	50                   	push   eax
c001f2f0:	55                   	push   ebp
c001f2f1:	57                   	push   edi
c001f2f2:	e8 90 fd ff ff       	call   c001f087 <Vm::realToLinear(unsigned short, unsigned short)>
c001f2f7:	5a                   	pop    edx
c001f2f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f2fa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f2fe:	51                   	push   ecx
c001f2ff:	50                   	push   eax
c001f300:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f304:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f308:	53                   	push   ebx
c001f309:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f30c:	83 c4 14             	add    esp,0x14
c001f30f:	53                   	push   ebx
c001f310:	e8 df 41 ff ff       	call   c00134f4 <File::close()>
c001f315:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f31a:	83 c4 10             	add    esp,0x10
c001f31d:	48                   	dec    eax
c001f31e:	c6 05 c5 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c5,0x0
c001f325:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f32a:	85 c0                	test   eax,eax
c001f32c:	75 01                	jne    c001f32f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f32e:	fb                   	sti    
c001f32f:	83 ec 0c             	sub    esp,0xc
c001f332:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001f338:	e8 0d f6 ff ff       	call   c001e94a <unblockTask(ThreadControlBlock*)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	83 c4 2c             	add    esp,0x2c
c001f343:	89 f0                	mov    eax,esi
c001f345:	5b                   	pop    ebx
c001f346:	5e                   	pop    esi
c001f347:	5f                   	pop    edi
c001f348:	5d                   	pop    ebp
c001f349:	c3                   	ret    

c001f34a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f34a:	57                   	push   edi
c001f34b:	56                   	push   esi
c001f34c:	53                   	push   ebx
c001f34d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f355:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f359:	83 e8 06             	sub    eax,0x6
c001f35c:	0f b7 c0             	movzx  eax,ax
c001f35f:	50                   	push   eax
c001f360:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f365:	50                   	push   eax
c001f366:	e8 1c fd ff ff       	call   c001f087 <Vm::realToLinear(unsigned short, unsigned short)>
c001f36b:	5a                   	pop    edx
c001f36c:	5e                   	pop    esi
c001f36d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f370:	8d 56 fa             	lea    edx,[esi-0x6]
c001f373:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f379:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f37c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f37f:	83 c2 02             	add    edx,0x2
c001f382:	66 89 10             	mov    WORD PTR [eax],dx
c001f385:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f388:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f38c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f38f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f393:	89 d6                	mov    esi,edx
c001f395:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f39b:	66 81 e6 ff fd       	and    si,0xfdff
c001f3a0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f3a4:	74 07                	je     c001f3ad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f3a6:	89 d6                	mov    esi,edx
c001f3a8:	66 81 ce 00 02       	or     si,0x200
c001f3ad:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3b6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3ba:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3c2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3c5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3cd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3d0:	5b                   	pop    ebx
c001f3d1:	5e                   	pop    esi
c001f3d2:	5f                   	pop    edi
c001f3d3:	c3                   	ret    

c001f3d4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f3d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3de:	c1 e0 04             	shl    eax,0x4
c001f3e1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f3e4:	c3                   	ret    

c001f3e5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f3e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3ef:	c1 e0 04             	shl    eax,0x4
c001f3f2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f3f6:	c3                   	ret    

c001f3f7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f3f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f401:	c1 e0 04             	shl    eax,0x4
c001f404:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f407:	c3                   	ret    

c001f408 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f408:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f40d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f412:	c1 e0 04             	shl    eax,0x4
c001f415:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f419:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f41c:	c3                   	ret    

c001f41d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f41d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f422:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f427:	c1 e0 04             	shl    eax,0x4
c001f42a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f42e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f432:	c3                   	ret    

c001f433 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f433:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f438:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f43d:	c1 e0 04             	shl    eax,0x4
c001f440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f444:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f447:	c3                   	ret    

c001f448 <Vm::faultHandler(regs*)>:
c001f448:	55                   	push   ebp
c001f449:	57                   	push   edi
c001f44a:	56                   	push   esi
c001f44b:	53                   	push   ebx
c001f44c:	83 ec 1c             	sub    esp,0x1c
c001f44f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f453:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f456:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f459:	0f b7 c1             	movzx  eax,cx
c001f45c:	50                   	push   eax
c001f45d:	0f b7 c3             	movzx  eax,bx
c001f460:	c1 e3 04             	shl    ebx,0x4
c001f463:	50                   	push   eax
c001f464:	e8 1e fc ff ff       	call   c001f087 <Vm::realToLinear(unsigned short, unsigned short)>
c001f469:	5a                   	pop    edx
c001f46a:	89 c5                	mov    ebp,eax
c001f46c:	5e                   	pop    esi
c001f46d:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f471:	50                   	push   eax
c001f472:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f476:	50                   	push   eax
c001f477:	e8 0b fc ff ff       	call   c001f087 <Vm::realToLinear(unsigned short, unsigned short)>
c001f47c:	01 cb                	add    ebx,ecx
c001f47e:	89 c6                	mov    esi,eax
c001f480:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f484:	50                   	push   eax
c001f485:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f489:	50                   	push   eax
c001f48a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f48e:	50                   	push   eax
c001f48f:	55                   	push   ebp
c001f490:	53                   	push   ebx
c001f491:	b3 06                	mov    bl,0x6
c001f493:	68 e9 cf 02 c0       	push   0xc002cfe9
c001f498:	e8 36 3a ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f49d:	83 c4 20             	add    esp,0x20
c001f4a0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f4a5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4aa:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4ae:	3c 9d                	cmp    al,0x9d
c001f4b0:	0f 84 d7 02 00 00    	je     c001f78d <Vm::faultHandler(regs*)+0x345>
c001f4b6:	0f 87 a3 00 00 00    	ja     c001f55f <Vm::faultHandler(regs*)+0x117>
c001f4bc:	3c 66                	cmp    al,0x66
c001f4be:	0f 84 15 02 00 00    	je     c001f6d9 <Vm::faultHandler(regs*)+0x291>
c001f4c4:	77 5f                	ja     c001f525 <Vm::faultHandler(regs*)+0xdd>
c001f4c6:	3c 36                	cmp    al,0x36
c001f4c8:	0f 84 f1 01 00 00    	je     c001f6bf <Vm::faultHandler(regs*)+0x277>
c001f4ce:	77 28                	ja     c001f4f8 <Vm::faultHandler(regs*)+0xb0>
c001f4d0:	3c 26                	cmp    al,0x26
c001f4d2:	0f 84 99 01 00 00    	je     c001f671 <Vm::faultHandler(regs*)+0x229>
c001f4d8:	3c 2e                	cmp    al,0x2e
c001f4da:	0f 85 3b 07 00 00    	jne    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	31 db                	xor    ebx,ebx
c001f4e5:	68 fe cf 02 c0       	push   0xc002cffe
c001f4ea:	e8 e4 39 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f4ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4f2:	83 c4 10             	add    esp,0x10
c001f4f5:	45                   	inc    ebp
c001f4f6:	eb b2                	jmp    c001f4aa <Vm::faultHandler(regs*)+0x62>
c001f4f8:	3c 64                	cmp    al,0x64
c001f4fa:	0f 84 8b 01 00 00    	je     c001f68b <Vm::faultHandler(regs*)+0x243>
c001f500:	0f 87 9f 01 00 00    	ja     c001f6a5 <Vm::faultHandler(regs*)+0x25d>
c001f506:	3c 3e                	cmp    al,0x3e
c001f508:	0f 85 0d 07 00 00    	jne    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f50e:	83 ec 0c             	sub    esp,0xc
c001f511:	b3 01                	mov    bl,0x1
c001f513:	68 02 d0 02 c0       	push   0xc002d002
c001f518:	e8 b6 39 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f51d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f520:	83 c4 10             	add    esp,0x10
c001f523:	eb d0                	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f525:	3c 6d                	cmp    al,0x6d
c001f527:	0f 84 af 03 00 00    	je     c001f8dc <Vm::faultHandler(regs*)+0x494>
c001f52d:	77 15                	ja     c001f544 <Vm::faultHandler(regs*)+0xfc>
c001f52f:	3c 67                	cmp    al,0x67
c001f531:	0f 84 bf 01 00 00    	je     c001f6f6 <Vm::faultHandler(regs*)+0x2ae>
c001f537:	3c 6c                	cmp    al,0x6c
c001f539:	0f 84 3f 03 00 00    	je     c001f87e <Vm::faultHandler(regs*)+0x436>
c001f53f:	e9 d7 06 00 00       	jmp    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f544:	3c 6f                	cmp    al,0x6f
c001f546:	0f 84 a4 04 00 00    	je     c001f9f0 <Vm::faultHandler(regs*)+0x5a8>
c001f54c:	0f 82 11 04 00 00    	jb     c001f963 <Vm::faultHandler(regs*)+0x51b>
c001f552:	3c 9c                	cmp    al,0x9c
c001f554:	0f 84 ba 01 00 00    	je     c001f714 <Vm::faultHandler(regs*)+0x2cc>
c001f55a:	e9 bc 06 00 00       	jmp    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f55f:	3c ec                	cmp    al,0xec
c001f561:	0f 84 24 06 00 00    	je     c001fb8b <Vm::faultHandler(regs*)+0x743>
c001f567:	0f 87 93 00 00 00    	ja     c001f600 <Vm::faultHandler(regs*)+0x1b8>
c001f56d:	3c e4                	cmp    al,0xe4
c001f56f:	0f 84 5c 05 00 00    	je     c001fad1 <Vm::faultHandler(regs*)+0x689>
c001f575:	77 6a                	ja     c001f5e1 <Vm::faultHandler(regs*)+0x199>
c001f577:	3c cd                	cmp    al,0xcd
c001f579:	0f 84 7e 02 00 00    	je     c001f7fd <Vm::faultHandler(regs*)+0x3b5>
c001f57f:	3c cf                	cmp    al,0xcf
c001f581:	0f 85 94 06 00 00    	jne    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f587:	83 ec 0c             	sub    esp,0xc
c001f58a:	68 46 d0 02 c0       	push   0xc002d046
c001f58f:	e8 3f 39 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f594:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f597:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f59a:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f59e:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f5a1:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f5a5:	0d 00 02 02 00       	or     eax,0x20200
c001f5aa:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5ad:	56                   	push   esi
c001f5ae:	53                   	push   ebx
c001f5af:	52                   	push   edx
c001f5b0:	68 4c d0 02 c0       	push   0xc002d04c
c001f5b5:	e8 19 39 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f5ba:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5c4:	66 c1 e8 09          	shr    ax,0x9
c001f5c8:	83 e0 01             	and    eax,0x1
c001f5cb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5ce:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5d1:	83 c0 06             	add    eax,0x6
c001f5d4:	25 ff ff 00 00       	and    eax,0xffff
c001f5d9:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f5dc:	e9 95 02 00 00       	jmp    c001f876 <Vm::faultHandler(regs*)+0x42e>
c001f5e1:	3c e6                	cmp    al,0xe6
c001f5e3:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f5e7:	0f 84 4e 05 00 00    	je     c001fb3b <Vm::faultHandler(regs*)+0x6f3>
c001f5ed:	0f 82 0a 05 00 00    	jb     c001fafd <Vm::faultHandler(regs*)+0x6b5>
c001f5f3:	3c e7                	cmp    al,0xe7
c001f5f5:	0f 84 69 05 00 00    	je     c001fb64 <Vm::faultHandler(regs*)+0x71c>
c001f5fb:	e9 1b 06 00 00       	jmp    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f600:	3c ef                	cmp    al,0xef
c001f602:	0f 84 e6 05 00 00    	je     c001fbee <Vm::faultHandler(regs*)+0x7a6>
c001f608:	77 37                	ja     c001f641 <Vm::faultHandler(regs*)+0x1f9>
c001f60a:	3c ed                	cmp    al,0xed
c001f60c:	0f 84 a3 05 00 00    	je     c001fbb5 <Vm::faultHandler(regs*)+0x76d>
c001f612:	3c ee                	cmp    al,0xee
c001f614:	0f 85 01 06 00 00    	jne    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f61a:	52                   	push   edx
c001f61b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f61e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f621:	68 e7 d0 02 c0       	push   0xc002d0e7
c001f626:	e8 a8 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f62b:	59                   	pop    ecx
c001f62c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f630:	5b                   	pop    ebx
c001f631:	50                   	push   eax
c001f632:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f636:	50                   	push   eax
c001f637:	e8 f8 f9 ff ff       	call   c001f034 <Vm::outbv(unsigned short, unsigned char)>
c001f63c:	e9 a5 05 00 00       	jmp    c001fbe6 <Vm::faultHandler(regs*)+0x79e>
c001f641:	3c fa                	cmp    al,0xfa
c001f643:	0f 84 f7 01 00 00    	je     c001f840 <Vm::faultHandler(regs*)+0x3f8>
c001f649:	3c fb                	cmp    al,0xfb
c001f64b:	0f 84 0a 02 00 00    	je     c001f85b <Vm::faultHandler(regs*)+0x413>
c001f651:	3c f3                	cmp    al,0xf3
c001f653:	0f 85 c2 05 00 00    	jne    c001fc1b <Vm::faultHandler(regs*)+0x7d3>
c001f659:	83 ec 0c             	sub    esp,0xc
c001f65c:	68 1f d0 02 c0       	push   0xc002d01f
c001f661:	e8 6d 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f666:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	e9 84 fe ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	b3 02                	mov    bl,0x2
c001f676:	68 fa cf 02 c0       	push   0xc002cffa
c001f67b:	e8 53 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f680:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f683:	83 c4 10             	add    esp,0x10
c001f686:	e9 6a fe ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f68b:	83 ec 0c             	sub    esp,0xc
c001f68e:	b3 03                	mov    bl,0x3
c001f690:	68 06 d0 02 c0       	push   0xc002d006
c001f695:	e8 39 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f69a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f69d:	83 c4 10             	add    esp,0x10
c001f6a0:	e9 50 fe ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f6a5:	83 ec 0c             	sub    esp,0xc
c001f6a8:	b3 04                	mov    bl,0x4
c001f6aa:	68 0a d0 02 c0       	push   0xc002d00a
c001f6af:	e8 1f 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f6b4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	e9 36 fe ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f6bf:	83 ec 0c             	sub    esp,0xc
c001f6c2:	b3 05                	mov    bl,0x5
c001f6c4:	68 0e d0 02 c0       	push   0xc002d00e
c001f6c9:	e8 05 38 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f6ce:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6d1:	83 c4 10             	add    esp,0x10
c001f6d4:	e9 1c fe ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f6d9:	83 ec 0c             	sub    esp,0xc
c001f6dc:	68 12 d0 02 c0       	push   0xc002d012
c001f6e1:	e8 ed 37 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f6e6:	83 c4 10             	add    esp,0x10
c001f6e9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6ec:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6f1:	e9 ff fd ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f6f6:	50                   	push   eax
c001f6f7:	50                   	push   eax
c001f6f8:	6a 01                	push   0x1
c001f6fa:	68 17 d0 02 c0       	push   0xc002d017
c001f6ff:	e8 cf 37 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f704:	83 c4 10             	add    esp,0x10
c001f707:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f70a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f70f:	e9 e1 fd ff ff       	jmp    c001f4f5 <Vm::faultHandler(regs*)+0xad>
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	68 25 d0 02 c0       	push   0xc002d025
c001f71c:	e8 b2 37 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f721:	83 c4 10             	add    esp,0x10
c001f724:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f727:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f72c:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f72f:	74 2f                	je     c001f760 <Vm::faultHandler(regs*)+0x318>
c001f731:	83 ea 04             	sub    edx,0x4
c001f734:	25 ff 0d 00 00       	and    eax,0xdff
c001f739:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f73f:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f742:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f745:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f74b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f74f:	0f 84 bf 04 00 00    	je     c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f755:	80 cc 02             	or     ah,0x2
c001f758:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f75b:	e9 b4 04 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f760:	83 ea 02             	sub    edx,0x2
c001f763:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f769:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f76c:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f770:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f776:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f77a:	74 05                	je     c001f781 <Vm::faultHandler(regs*)+0x339>
c001f77c:	80 cc 02             	or     ah,0x2
c001f77f:	eb 03                	jmp    c001f784 <Vm::faultHandler(regs*)+0x33c>
c001f781:	80 e4 fd             	and    ah,0xfd
c001f784:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f788:	e9 87 04 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f78d:	83 ec 0c             	sub    esp,0xc
c001f790:	68 2c d0 02 c0       	push   0xc002d02c
c001f795:	e8 39 37 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f79a:	83 c4 10             	add    esp,0x10
c001f79d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7a2:	74 28                	je     c001f7cc <Vm::faultHandler(regs*)+0x384>
c001f7a4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7a6:	25 ff 0d 00 00       	and    eax,0xdff
c001f7ab:	0d 00 02 02 00       	or     eax,0x20200
c001f7b0:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7b3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7bb:	c1 e8 09             	shr    eax,0x9
c001f7be:	83 e0 01             	and    eax,0x1
c001f7c1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7c4:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7c7:	83 c0 04             	add    eax,0x4
c001f7ca:	eb 24                	jmp    c001f7f0 <Vm::faultHandler(regs*)+0x3a8>
c001f7cc:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7cf:	0d 00 02 02 00       	or     eax,0x20200
c001f7d4:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7d7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f7da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7e0:	66 c1 e8 09          	shr    ax,0x9
c001f7e4:	83 e0 01             	and    eax,0x1
c001f7e7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7ea:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7ed:	83 c0 02             	add    eax,0x2
c001f7f0:	25 ff ff 00 00       	and    eax,0xffff
c001f7f5:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7f8:	e9 17 04 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f7fd:	53                   	push   ebx
c001f7fe:	53                   	push   ebx
c001f7ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f803:	50                   	push   eax
c001f804:	68 32 d0 02 c0       	push   0xc002d032
c001f809:	e8 c5 36 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f80e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f812:	83 c4 10             	add    esp,0x10
c001f815:	3c ee                	cmp    al,0xee
c001f817:	75 10                	jne    c001f829 <Vm::faultHandler(regs*)+0x3e1>
c001f819:	83 ec 0c             	sub    esp,0xc
c001f81c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f81f:	e8 ca f8 ff ff       	call   c001f0ee <Vm::mainloop3(unsigned long)>
c001f824:	e9 c0 03 00 00       	jmp    c001fbe9 <Vm::faultHandler(regs*)+0x7a1>
c001f829:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f82d:	83 ec 0c             	sub    esp,0xc
c001f830:	53                   	push   ebx
c001f831:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f835:	53                   	push   ebx
c001f836:	55                   	push   ebp
c001f837:	50                   	push   eax
c001f838:	57                   	push   edi
c001f839:	e8 0c fb ff ff       	call   c001f34a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f83e:	eb 36                	jmp    c001f876 <Vm::faultHandler(regs*)+0x42e>
c001f840:	83 ec 0c             	sub    esp,0xc
c001f843:	68 3c d0 02 c0       	push   0xc002d03c
c001f848:	e8 86 36 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f84d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f852:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f856:	e9 8b 03 00 00       	jmp    c001fbe6 <Vm::faultHandler(regs*)+0x79e>
c001f85b:	83 ec 0c             	sub    esp,0xc
c001f85e:	68 41 d0 02 c0       	push   0xc002d041
c001f863:	e8 6b 36 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f86d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f871:	e9 70 03 00 00       	jmp    c001fbe6 <Vm::faultHandler(regs*)+0x79e>
c001f876:	83 c4 20             	add    esp,0x20
c001f879:	e9 99 03 00 00       	jmp    c001fc17 <Vm::faultHandler(regs*)+0x7cf>
c001f87e:	83 ec 0c             	sub    esp,0xc
c001f881:	68 7f d0 02 c0       	push   0xc002d07f
c001f886:	e8 48 36 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f88b:	83 c4 10             	add    esp,0x10
c001f88e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f891:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f896:	74 0d                	je     c001f8a5 <Vm::faultHandler(regs*)+0x45d>
c001f898:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f89f:	0f 87 9e 01 00 00    	ja     c001fa43 <Vm::faultHandler(regs*)+0x5fb>
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8ac:	0f b7 db             	movzx  ebx,bx
c001f8af:	50                   	push   eax
c001f8b0:	e8 6c f7 ff ff       	call   c001f021 <Vm::inbv(unsigned short)>
c001f8b5:	83 c4 0c             	add    esp,0xc
c001f8b8:	0f b6 c0             	movzx  eax,al
c001f8bb:	50                   	push   eax
c001f8bc:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8c0:	50                   	push   eax
c001f8c1:	53                   	push   ebx
c001f8c2:	e8 41 fb ff ff       	call   c001f408 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8cd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8d1:	74 03                	je     c001f8d6 <Vm::faultHandler(regs*)+0x48e>
c001f8d3:	48                   	dec    eax
c001f8d4:	eb 01                	jmp    c001f8d7 <Vm::faultHandler(regs*)+0x48f>
c001f8d6:	40                   	inc    eax
c001f8d7:	0f b7 c0             	movzx  eax,ax
c001f8da:	eb 7f                	jmp    c001f95b <Vm::faultHandler(regs*)+0x513>
c001f8dc:	83 ec 0c             	sub    esp,0xc
c001f8df:	68 b1 d0 02 c0       	push   0xc002d0b1
c001f8e4:	e8 ea 35 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f8e9:	83 c4 10             	add    esp,0x10
c001f8ec:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8f4:	74 0d                	je     c001f903 <Vm::faultHandler(regs*)+0x4bb>
c001f8f6:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8fd:	0f 87 40 01 00 00    	ja     c001fa43 <Vm::faultHandler(regs*)+0x5fb>
c001f903:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f906:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f90a:	0f b7 db             	movzx  ebx,bx
c001f90d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f912:	74 20                	je     c001f934 <Vm::faultHandler(regs*)+0x4ec>
c001f914:	ed                   	in     eax,dx
c001f915:	51                   	push   ecx
c001f916:	50                   	push   eax
c001f917:	56                   	push   esi
c001f918:	53                   	push   ebx
c001f919:	e8 15 fb ff ff       	call   c001f433 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f91e:	83 c4 10             	add    esp,0x10
c001f921:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f924:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f928:	74 05                	je     c001f92f <Vm::faultHandler(regs*)+0x4e7>
c001f92a:	83 e8 04             	sub    eax,0x4
c001f92d:	eb 27                	jmp    c001f956 <Vm::faultHandler(regs*)+0x50e>
c001f92f:	83 c0 04             	add    eax,0x4
c001f932:	eb 22                	jmp    c001f956 <Vm::faultHandler(regs*)+0x50e>
c001f934:	66 ed                	in     ax,dx
c001f936:	0f b7 c0             	movzx  eax,ax
c001f939:	52                   	push   edx
c001f93a:	50                   	push   eax
c001f93b:	56                   	push   esi
c001f93c:	53                   	push   ebx
c001f93d:	e8 db fa ff ff       	call   c001f41d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f948:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f94c:	74 05                	je     c001f953 <Vm::faultHandler(regs*)+0x50b>
c001f94e:	83 e8 02             	sub    eax,0x2
c001f951:	eb 03                	jmp    c001f956 <Vm::faultHandler(regs*)+0x50e>
c001f953:	83 c0 02             	add    eax,0x2
c001f956:	25 ff ff 00 00       	and    eax,0xffff
c001f95b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f95e:	e9 b1 02 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	4b                   	dec    ebx
c001f967:	68 b7 d0 02 c0       	push   0xc002d0b7
c001f96c:	e8 62 35 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f971:	83 c4 10             	add    esp,0x10
c001f974:	80 fb 05             	cmp    bl,0x5
c001f977:	77 0a                	ja     c001f983 <Vm::faultHandler(regs*)+0x53b>
c001f979:	0f b6 db             	movzx  ebx,bl
c001f97c:	ff 24 9d 28 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ed8]
c001f983:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f987:	eb 1b                	jmp    c001f9a4 <Vm::faultHandler(regs*)+0x55c>
c001f989:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f98d:	eb 15                	jmp    c001f9a4 <Vm::faultHandler(regs*)+0x55c>
c001f98f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f993:	eb 0f                	jmp    c001f9a4 <Vm::faultHandler(regs*)+0x55c>
c001f995:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f999:	eb 09                	jmp    c001f9a4 <Vm::faultHandler(regs*)+0x55c>
c001f99b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f99e:	eb 04                	jmp    c001f9a4 <Vm::faultHandler(regs*)+0x55c>
c001f9a0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9a4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9a9:	74 0d                	je     c001f9b8 <Vm::faultHandler(regs*)+0x570>
c001f9ab:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9b2:	0f 87 8b 00 00 00    	ja     c001fa43 <Vm::faultHandler(regs*)+0x5fb>
c001f9b8:	53                   	push   ebx
c001f9b9:	53                   	push   ebx
c001f9ba:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9be:	52                   	push   edx
c001f9bf:	50                   	push   eax
c001f9c0:	e8 0f fa ff ff       	call   c001f3d4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9c5:	5e                   	pop    esi
c001f9c6:	0f b6 c0             	movzx  eax,al
c001f9c9:	5d                   	pop    ebp
c001f9ca:	50                   	push   eax
c001f9cb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9cf:	50                   	push   eax
c001f9d0:	e8 5f f6 ff ff       	call   c001f034 <Vm::outbv(unsigned short, unsigned char)>
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f9db:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9df:	74 03                	je     c001f9e4 <Vm::faultHandler(regs*)+0x59c>
c001f9e1:	48                   	dec    eax
c001f9e2:	eb 01                	jmp    c001f9e5 <Vm::faultHandler(regs*)+0x59d>
c001f9e4:	40                   	inc    eax
c001f9e5:	0f b7 c0             	movzx  eax,ax
c001f9e8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f9eb:	e9 24 02 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001f9f0:	83 ec 0c             	sub    esp,0xc
c001f9f3:	4b                   	dec    ebx
c001f9f4:	68 b7 d0 02 c0       	push   0xc002d0b7
c001f9f9:	e8 d5 34 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001f9fe:	83 c4 10             	add    esp,0x10
c001fa01:	80 fb 05             	cmp    bl,0x5
c001fa04:	77 0a                	ja     c001fa10 <Vm::faultHandler(regs*)+0x5c8>
c001fa06:	0f b6 db             	movzx  ebx,bl
c001fa09:	ff 24 9d 40 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ec0]
c001fa10:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa14:	eb 1b                	jmp    c001fa31 <Vm::faultHandler(regs*)+0x5e9>
c001fa16:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa1a:	eb 15                	jmp    c001fa31 <Vm::faultHandler(regs*)+0x5e9>
c001fa1c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa20:	eb 0f                	jmp    c001fa31 <Vm::faultHandler(regs*)+0x5e9>
c001fa22:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa26:	eb 09                	jmp    c001fa31 <Vm::faultHandler(regs*)+0x5e9>
c001fa28:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa2b:	eb 04                	jmp    c001fa31 <Vm::faultHandler(regs*)+0x5e9>
c001fa2d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa31:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa34:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa39:	74 39                	je     c001fa74 <Vm::faultHandler(regs*)+0x62c>
c001fa3b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa41:	76 31                	jbe    c001fa74 <Vm::faultHandler(regs*)+0x62c>
c001fa43:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa47:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa4b:	51                   	push   ecx
c001fa4c:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa50:	51                   	push   ecx
c001fa51:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa55:	51                   	push   ecx
c001fa56:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa5a:	51                   	push   ecx
c001fa5b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa5f:	52                   	push   edx
c001fa60:	50                   	push   eax
c001fa61:	50                   	push   eax
c001fa62:	68 84 d0 02 c0       	push   0xc002d084
c001fa67:	e8 67 34 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fa6c:	83 c4 20             	add    esp,0x20
c001fa6f:	e9 fb 01 00 00       	jmp    c001fc6f <Vm::faultHandler(regs*)+0x827>
c001fa74:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fa77:	0f b7 d3             	movzx  edx,bx
c001fa7a:	81 e6 00 04 00 00    	and    esi,0x400
c001fa80:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa83:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa88:	74 1d                	je     c001faa7 <Vm::faultHandler(regs*)+0x65f>
c001fa8a:	51                   	push   ecx
c001fa8b:	51                   	push   ecx
c001fa8c:	52                   	push   edx
c001fa8d:	50                   	push   eax
c001fa8e:	e8 64 f9 ff ff       	call   c001f3f7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	89 ea                	mov    edx,ebp
c001fa98:	ef                   	out    dx,eax
c001fa99:	85 f6                	test   esi,esi
c001fa9b:	74 05                	je     c001faa2 <Vm::faultHandler(regs*)+0x65a>
c001fa9d:	83 eb 04             	sub    ebx,0x4
c001faa0:	eb 21                	jmp    c001fac3 <Vm::faultHandler(regs*)+0x67b>
c001faa2:	83 c3 04             	add    ebx,0x4
c001faa5:	eb 1c                	jmp    c001fac3 <Vm::faultHandler(regs*)+0x67b>
c001faa7:	51                   	push   ecx
c001faa8:	51                   	push   ecx
c001faa9:	52                   	push   edx
c001faaa:	50                   	push   eax
c001faab:	e8 35 f9 ff ff       	call   c001f3e5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fab0:	83 c4 10             	add    esp,0x10
c001fab3:	89 ea                	mov    edx,ebp
c001fab5:	66 ef                	out    dx,ax
c001fab7:	85 f6                	test   esi,esi
c001fab9:	74 05                	je     c001fac0 <Vm::faultHandler(regs*)+0x678>
c001fabb:	83 eb 02             	sub    ebx,0x2
c001fabe:	eb 03                	jmp    c001fac3 <Vm::faultHandler(regs*)+0x67b>
c001fac0:	83 c3 02             	add    ebx,0x2
c001fac3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fac9:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001facc:	e9 43 01 00 00       	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001fad1:	53                   	push   ebx
c001fad2:	53                   	push   ebx
c001fad3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad7:	50                   	push   eax
c001fad8:	68 bd d0 02 c0       	push   0xc002d0bd
c001fadd:	e8 f1 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fae2:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fae9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faed:	89 04 24             	mov    DWORD PTR [esp],eax
c001faf0:	e8 2c f5 ff ff       	call   c001f021 <Vm::inbv(unsigned short)>
c001faf5:	0f b6 c0             	movzx  eax,al
c001faf8:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fafb:	eb 5e                	jmp    c001fb5b <Vm::faultHandler(regs*)+0x713>
c001fafd:	51                   	push   ecx
c001fafe:	51                   	push   ecx
c001faff:	53                   	push   ebx
c001fb00:	68 c3 d0 02 c0       	push   0xc002d0c3
c001fb05:	e8 c9 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fb0a:	83 c4 10             	add    esp,0x10
c001fb0d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb12:	74 07                	je     c001fb1b <Vm::faultHandler(regs*)+0x6d3>
c001fb14:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb18:	ed                   	in     eax,dx
c001fb19:	eb 14                	jmp    c001fb2f <Vm::faultHandler(regs*)+0x6e7>
c001fb1b:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb1e:	66 31 db             	xor    bx,bx
c001fb21:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb24:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb28:	66 ed                	in     ax,dx
c001fb2a:	0f b7 c0             	movzx  eax,ax
c001fb2d:	09 d8                	or     eax,ebx
c001fb2f:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb32:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb36:	e9 dc 00 00 00       	jmp    c001fc17 <Vm::faultHandler(regs*)+0x7cf>
c001fb3b:	50                   	push   eax
c001fb3c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb3f:	53                   	push   ebx
c001fb40:	68 c9 d0 02 c0       	push   0xc002d0c9
c001fb45:	e8 89 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fb4a:	58                   	pop    eax
c001fb4b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb4f:	5a                   	pop    edx
c001fb50:	50                   	push   eax
c001fb51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb55:	50                   	push   eax
c001fb56:	e8 d9 f4 ff ff       	call   c001f034 <Vm::outbv(unsigned short, unsigned char)>
c001fb5b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb5f:	e9 85 00 00 00       	jmp    c001fbe9 <Vm::faultHandler(regs*)+0x7a1>
c001fb64:	50                   	push   eax
c001fb65:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb68:	53                   	push   ebx
c001fb69:	68 d2 d0 02 c0       	push   0xc002d0d2
c001fb6e:	e8 60 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fb73:	83 c4 10             	add    esp,0x10
c001fb76:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb7a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb7f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb82:	74 03                	je     c001fb87 <Vm::faultHandler(regs*)+0x73f>
c001fb84:	ef                   	out    dx,eax
c001fb85:	eb ab                	jmp    c001fb32 <Vm::faultHandler(regs*)+0x6ea>
c001fb87:	66 ef                	out    dx,ax
c001fb89:	eb a7                	jmp    c001fb32 <Vm::faultHandler(regs*)+0x6ea>
c001fb8b:	55                   	push   ebp
c001fb8c:	55                   	push   ebp
c001fb8d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb90:	68 db d0 02 c0       	push   0xc002d0db
c001fb95:	e8 39 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fb9a:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fba1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fba5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba8:	e8 74 f4 ff ff       	call   c001f021 <Vm::inbv(unsigned short)>
c001fbad:	0f b6 c0             	movzx  eax,al
c001fbb0:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbb3:	eb 31                	jmp    c001fbe6 <Vm::faultHandler(regs*)+0x79e>
c001fbb5:	56                   	push   esi
c001fbb6:	56                   	push   esi
c001fbb7:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbba:	68 e1 d0 02 c0       	push   0xc002d0e1
c001fbbf:	e8 0f 33 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fbc4:	83 c4 10             	add    esp,0x10
c001fbc7:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbcf:	74 03                	je     c001fbd4 <Vm::faultHandler(regs*)+0x78c>
c001fbd1:	ed                   	in     eax,dx
c001fbd2:	eb 0d                	jmp    c001fbe1 <Vm::faultHandler(regs*)+0x799>
c001fbd4:	66 ed                	in     ax,dx
c001fbd6:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fbd9:	0f b7 c0             	movzx  eax,ax
c001fbdc:	66 31 d2             	xor    dx,dx
c001fbdf:	09 d0                	or     eax,edx
c001fbe1:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbe4:	eb 2e                	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001fbe6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	eb 29                	jmp    c001fc17 <Vm::faultHandler(regs*)+0x7cf>
c001fbee:	50                   	push   eax
c001fbef:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fbf2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbf5:	68 f0 d0 02 c0       	push   0xc002d0f0
c001fbfa:	e8 d4 32 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fbff:	83 c4 10             	add    esp,0x10
c001fc02:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc05:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc0a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc0d:	74 03                	je     c001fc12 <Vm::faultHandler(regs*)+0x7ca>
c001fc0f:	ef                   	out    dx,eax
c001fc10:	eb 02                	jmp    c001fc14 <Vm::faultHandler(regs*)+0x7cc>
c001fc12:	66 ef                	out    dx,ax
c001fc14:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc17:	b0 01                	mov    al,0x1
c001fc19:	eb 56                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x829>
c001fc1b:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc1f:	51                   	push   ecx
c001fc20:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc24:	51                   	push   ecx
c001fc25:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc29:	51                   	push   ecx
c001fc2a:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc2e:	51                   	push   ecx
c001fc2f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc33:	52                   	push   edx
c001fc34:	50                   	push   eax
c001fc35:	50                   	push   eax
c001fc36:	68 f9 d0 02 c0       	push   0xc002d0f9
c001fc3b:	e8 93 32 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c001fc40:	83 c4 20             	add    esp,0x20
c001fc43:	83 ec 0c             	sub    esp,0xc
c001fc46:	6a 60                	push   0x60
c001fc48:	e8 d4 f3 ff ff       	call   c001f021 <Vm::inbv(unsigned short)>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	3c 1c                	cmp    al,0x1c
c001fc52:	74 04                	je     c001fc58 <Vm::faultHandler(regs*)+0x810>
c001fc54:	3c 5a                	cmp    al,0x5a
c001fc56:	75 eb                	jne    c001fc43 <Vm::faultHandler(regs*)+0x7fb>
c001fc58:	3c 1c                	cmp    al,0x1c
c001fc5a:	74 04                	je     c001fc60 <Vm::faultHandler(regs*)+0x818>
c001fc5c:	3c 5a                	cmp    al,0x5a
c001fc5e:	75 0f                	jne    c001fc6f <Vm::faultHandler(regs*)+0x827>
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	6a 60                	push   0x60
c001fc65:	e8 b7 f3 ff ff       	call   c001f021 <Vm::inbv(unsigned short)>
c001fc6a:	83 c4 10             	add    esp,0x10
c001fc6d:	eb e9                	jmp    c001fc58 <Vm::faultHandler(regs*)+0x810>
c001fc6f:	31 c0                	xor    eax,eax
c001fc71:	83 c4 1c             	add    esp,0x1c
c001fc74:	5b                   	pop    ebx
c001fc75:	5e                   	pop    esi
c001fc76:	5f                   	pop    edi
c001fc77:	5d                   	pop    ebp
c001fc78:	c3                   	ret    

c001fc79 <Vm::fpuInternalTo32(unsigned long long)>:
c001fc79:	57                   	push   edi
c001fc7a:	56                   	push   esi
c001fc7b:	53                   	push   ebx
c001fc7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc84:	89 d6                	mov    esi,edx
c001fc86:	89 d7                	mov    edi,edx
c001fc88:	89 c1                	mov    ecx,eax
c001fc8a:	c1 ef 14             	shr    edi,0x14
c001fc8d:	89 d3                	mov    ebx,edx
c001fc8f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fc95:	31 d2                	xor    edx,edx
c001fc97:	89 f8                	mov    eax,edi
c001fc99:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fc9f:	bf ff 00 00 00       	mov    edi,0xff
c001fca4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fca9:	83 d2 ff             	adc    edx,0xffffffff
c001fcac:	39 c7                	cmp    edi,eax
c001fcae:	bf 00 00 00 00       	mov    edi,0x0
c001fcb3:	19 d7                	sbb    edi,edx
c001fcb5:	72 15                	jb     c001fccc <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fcb7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fcbb:	c1 e0 17             	shl    eax,0x17
c001fcbe:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcc4:	09 f1                	or     ecx,esi
c001fcc6:	09 c1                	or     ecx,eax
c001fcc8:	89 cf                	mov    edi,ecx
c001fcca:	eb 02                	jmp    c001fcce <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fccc:	31 ff                	xor    edi,edi
c001fcce:	89 f8                	mov    eax,edi
c001fcd0:	5b                   	pop    ebx
c001fcd1:	5e                   	pop    esi
c001fcd2:	5f                   	pop    edi
c001fcd3:	c3                   	ret    

c001fcd4 <Vm::fpuInternalTo64(unsigned long long)>:
c001fcd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fcdc:	c3                   	ret    

c001fcdd <Vm::fpu32ToInternal(unsigned int)>:
c001fcdd:	57                   	push   edi
c001fcde:	31 ff                	xor    edi,edi
c001fce0:	56                   	push   esi
c001fce1:	53                   	push   ebx
c001fce2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fce6:	89 cb                	mov    ebx,ecx
c001fce8:	89 ce                	mov    esi,ecx
c001fcea:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fcf0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fcf6:	c1 e9 17             	shr    ecx,0x17
c001fcf9:	89 f0                	mov    eax,esi
c001fcfb:	0f b6 d1             	movzx  edx,cl
c001fcfe:	81 c2 80 03 00 00    	add    edx,0x380
c001fd04:	89 d1                	mov    ecx,edx
c001fd06:	89 fa                	mov    edx,edi
c001fd08:	c1 e1 14             	shl    ecx,0x14
c001fd0b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd0f:	c1 e0 1d             	shl    eax,0x1d
c001fd12:	89 d7                	mov    edi,edx
c001fd14:	89 c6                	mov    esi,eax
c001fd16:	89 ca                	mov    edx,ecx
c001fd18:	89 f0                	mov    eax,esi
c001fd1a:	09 fa                	or     edx,edi
c001fd1c:	09 da                	or     edx,ebx
c001fd1e:	5b                   	pop    ebx
c001fd1f:	5e                   	pop    esi
c001fd20:	5f                   	pop    edi
c001fd21:	c3                   	ret    

c001fd22 <Vm::fpu64ToInternal(unsigned long long)>:
c001fd22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd2a:	c3                   	ret    

c001fd2b <Vm::fpuFloatToLong(unsigned long long)>:
c001fd2b:	57                   	push   edi
c001fd2c:	31 c0                	xor    eax,eax
c001fd2e:	56                   	push   esi
c001fd2f:	31 d2                	xor    edx,edx
c001fd31:	53                   	push   ebx
c001fd32:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd3a:	89 d9                	mov    ecx,ebx
c001fd3c:	c1 e9 14             	shr    ecx,0x14
c001fd3f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd45:	89 cf                	mov    edi,ecx
c001fd47:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd4d:	78 33                	js     c001fd82 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd4f:	89 d9                	mov    ecx,ebx
c001fd51:	89 f0                	mov    eax,esi
c001fd53:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd59:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd5f:	89 ca                	mov    edx,ecx
c001fd61:	b9 34 00 00 00       	mov    ecx,0x34
c001fd66:	29 f9                	sub    ecx,edi
c001fd68:	0f ad d0             	shrd   eax,edx,cl
c001fd6b:	d3 fa                	sar    edx,cl
c001fd6d:	f6 c1 20             	test   cl,0x20
c001fd70:	74 05                	je     c001fd77 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd72:	89 d0                	mov    eax,edx
c001fd74:	c1 fa 1f             	sar    edx,0x1f
c001fd77:	85 db                	test   ebx,ebx
c001fd79:	79 07                	jns    c001fd82 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd7b:	f7 d8                	neg    eax
c001fd7d:	83 d2 00             	adc    edx,0x0
c001fd80:	f7 da                	neg    edx
c001fd82:	5b                   	pop    ebx
c001fd83:	5e                   	pop    esi
c001fd84:	5f                   	pop    edi
c001fd85:	c3                   	ret    

c001fd86 <Vm::fpuULongToFloat(unsigned long long)>:
c001fd86:	57                   	push   edi
c001fd87:	31 c9                	xor    ecx,ecx
c001fd89:	56                   	push   esi
c001fd8a:	53                   	push   ebx
c001fd8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd8f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fd93:	0f ba e7 14          	bt     edi,0x14
c001fd97:	72 07                	jb     c001fda0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fd99:	01 f6                	add    esi,esi
c001fd9b:	11 ff                	adc    edi,edi
c001fd9d:	41                   	inc    ecx
c001fd9e:	eb f3                	jmp    c001fd93 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fda0:	89 fa                	mov    edx,edi
c001fda2:	89 f0                	mov    eax,esi
c001fda4:	bb 33 04 00 00       	mov    ebx,0x433
c001fda9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fdaf:	29 cb                	sub    ebx,ecx
c001fdb1:	89 d9                	mov    ecx,ebx
c001fdb3:	5b                   	pop    ebx
c001fdb4:	c1 e1 14             	shl    ecx,0x14
c001fdb7:	5e                   	pop    esi
c001fdb8:	09 ca                	or     edx,ecx
c001fdba:	5f                   	pop    edi
c001fdbb:	c3                   	ret    

c001fdbc <Vm::fpuLongToFloat(long long)>:
c001fdbc:	56                   	push   esi
c001fdbd:	31 c0                	xor    eax,eax
c001fdbf:	53                   	push   ebx
c001fdc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdc8:	39 c8                	cmp    eax,ecx
c001fdca:	19 d8                	sbb    eax,ebx
c001fdcc:	7d 04                	jge    c001fdd2 <Vm::fpuLongToFloat(long long)+0x16>
c001fdce:	31 f6                	xor    esi,esi
c001fdd0:	eb 0c                	jmp    c001fdde <Vm::fpuLongToFloat(long long)+0x22>
c001fdd2:	f7 d9                	neg    ecx
c001fdd4:	be 01 00 00 00       	mov    esi,0x1
c001fdd9:	83 d3 00             	adc    ebx,0x0
c001fddc:	f7 db                	neg    ebx
c001fdde:	31 c0                	xor    eax,eax
c001fde0:	0f ba e3 14          	bt     ebx,0x14
c001fde4:	72 07                	jb     c001fded <Vm::fpuLongToFloat(long long)+0x31>
c001fde6:	01 c9                	add    ecx,ecx
c001fde8:	11 db                	adc    ebx,ebx
c001fdea:	40                   	inc    eax
c001fdeb:	eb f3                	jmp    c001fde0 <Vm::fpuLongToFloat(long long)+0x24>
c001fded:	ba 33 04 00 00       	mov    edx,0x433
c001fdf2:	29 c2                	sub    edx,eax
c001fdf4:	89 c8                	mov    eax,ecx
c001fdf6:	c1 e2 14             	shl    edx,0x14
c001fdf9:	89 d9                	mov    ecx,ebx
c001fdfb:	89 f3                	mov    ebx,esi
c001fdfd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe03:	09 ca                	or     edx,ecx
c001fe05:	84 db                	test   bl,bl
c001fe07:	74 06                	je     c001fe0f <Vm::fpuLongToFloat(long long)+0x53>
c001fe09:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe0f:	5b                   	pop    ebx
c001fe10:	5e                   	pop    esi
c001fe11:	c3                   	ret    

c001fe12 <Vm::fpuGet0()>:
c001fe12:	31 c0                	xor    eax,eax
c001fe14:	31 d2                	xor    edx,edx
c001fe16:	c3                   	ret    

c001fe17 <Vm::fpuGet1()>:
c001fe17:	b8 01 00 00 00       	mov    eax,0x1
c001fe1c:	31 d2                	xor    edx,edx
c001fe1e:	c3                   	ret    

c001fe1f <Vm::fpuGetPi()>:
c001fe1f:	b8 03 00 00 00       	mov    eax,0x3
c001fe24:	31 d2                	xor    edx,edx
c001fe26:	c3                   	ret    

c001fe27 <Vm::fpuGetLog2E()>:
c001fe27:	83 ec 18             	sub    esp,0x18
c001fe2a:	68 58 d1 02 c0       	push   0xc002d158
c001fe2f:	e8 5b aa ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001fe34:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe39:	31 d2                	xor    edx,edx
c001fe3b:	83 c4 1c             	add    esp,0x1c
c001fe3e:	c3                   	ret    

c001fe3f <Vm::fpuGetLogE2()>:
c001fe3f:	83 ec 18             	sub    esp,0x18
c001fe42:	68 64 d1 02 c0       	push   0xc002d164
c001fe47:	e8 43 aa ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001fe4c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe51:	31 d2                	xor    edx,edx
c001fe53:	83 c4 1c             	add    esp,0x1c
c001fe56:	c3                   	ret    

c001fe57 <Vm::fpuGetLog210()>:
c001fe57:	83 ec 18             	sub    esp,0x18
c001fe5a:	68 70 d1 02 c0       	push   0xc002d170
c001fe5f:	e8 2b aa ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001fe64:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe69:	31 d2                	xor    edx,edx
c001fe6b:	83 c4 1c             	add    esp,0x1c
c001fe6e:	c3                   	ret    

c001fe6f <Vm::fpuGetLog102()>:
c001fe6f:	83 ec 18             	sub    esp,0x18
c001fe72:	68 7d d1 02 c0       	push   0xc002d17d
c001fe77:	e8 13 aa ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001fe7c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe81:	31 d2                	xor    edx,edx
c001fe83:	83 c4 1c             	add    esp,0x1c
c001fe86:	c3                   	ret    

c001fe87 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe8b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fe8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe93:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fe97:	0f 92 c0             	setb   al
c001fe9a:	c3                   	ret    

c001fe9b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fe9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fea7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001feab:	09 c2                	or     edx,eax
c001fead:	0f 94 c0             	sete   al
c001feb0:	c3                   	ret    

c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001feb1:	57                   	push   edi
c001feb2:	56                   	push   esi
c001feb3:	53                   	push   ebx
c001feb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001feb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001febc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fec0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fec4:	57                   	push   edi
c001fec5:	56                   	push   esi
c001fec6:	53                   	push   ebx
c001fec7:	51                   	push   ecx
c001fec8:	e8 ce ff ff ff       	call   c001fe9b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	88 c2                	mov    dl,al
c001fed2:	31 c0                	xor    eax,eax
c001fed4:	84 d2                	test   dl,dl
c001fed6:	75 0c                	jne    c001fee4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fed8:	57                   	push   edi
c001fed9:	56                   	push   esi
c001feda:	53                   	push   ebx
c001fedb:	51                   	push   ecx
c001fedc:	e8 a6 ff ff ff       	call   c001fe87 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fee1:	83 c4 10             	add    esp,0x10
c001fee4:	83 e0 01             	and    eax,0x1
c001fee7:	5b                   	pop    ebx
c001fee8:	88 c1                	mov    cl,al
c001feea:	83 e2 01             	and    edx,0x1
c001feed:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fef2:	c1 e2 06             	shl    edx,0x6
c001fef5:	83 e0 ba             	and    eax,0xffffffba
c001fef8:	5e                   	pop    esi
c001fef9:	09 c8                	or     eax,ecx
c001fefb:	5f                   	pop    edi
c001fefc:	09 d0                	or     eax,edx
c001fefe:	a2 01 24 03 c0       	mov    ds:0xc0032401,al
c001ff03:	c3                   	ret    

c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff10:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff14:	c3                   	ret    

c001ff15 <Vm::fpuAbs(unsigned long long)>:
c001ff15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff19:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff1d:	c3                   	ret    

c001ff1e <Vm::fpuChs(unsigned long long)>:
c001ff1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff26:	f7 d8                	neg    eax
c001ff28:	83 d2 00             	adc    edx,0x0
c001ff2b:	f7 da                	neg    edx
c001ff2d:	c3                   	ret    

c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff2e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff32:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff37:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff3b:	eb c7                	jmp    c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff3d:	53                   	push   ebx
c001ff3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff4e:	0f af ca             	imul   ecx,edx
c001ff51:	0f af d8             	imul   ebx,eax
c001ff54:	f7 e2                	mul    edx
c001ff56:	01 d9                	add    ecx,ebx
c001ff58:	5b                   	pop    ebx
c001ff59:	01 ca                	add    edx,ecx
c001ff5b:	c3                   	ret    

c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6f:	e8 30 72 00 00       	call   c00271a4 <__udivdi3>
c001ff74:	83 c4 1c             	add    esp,0x1c
c001ff77:	c3                   	ret    

c001ff78 <Vm::fpuSquare(unsigned long long)>:
c001ff78:	50                   	push   eax
c001ff79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff81:	52                   	push   edx
c001ff82:	50                   	push   eax
c001ff83:	52                   	push   edx
c001ff84:	50                   	push   eax
c001ff85:	e8 b3 ff ff ff       	call   c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff8a:	83 c4 14             	add    esp,0x14
c001ff8d:	c3                   	ret    

c001ff8e <Vm::fpuGetReg(int)>:
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ff96:	76 10                	jbe    c001ffa8 <Vm::fpuGetReg(int)+0x1a>
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	68 8a d1 02 c0       	push   0xc002d18a
c001ffa0:	e8 ea a8 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001ffad:	b9 08 00 00 00       	mov    ecx,0x8
c001ffb2:	c0 e8 03             	shr    al,0x3
c001ffb5:	83 e0 07             	and    eax,0x7
c001ffb8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffbc:	99                   	cdq    
c001ffbd:	f7 f9                	idiv   ecx
c001ffbf:	8b 04 d5 04 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbfc]
c001ffc6:	8b 14 d5 08 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbf8]
c001ffcd:	83 c4 0c             	add    esp,0xc
c001ffd0:	c3                   	ret    

c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>:
c001ffd1:	57                   	push   edi
c001ffd2:	56                   	push   esi
c001ffd3:	52                   	push   edx
c001ffd4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffd8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffdc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffe1:	76 10                	jbe    c001fff3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	68 9d d1 02 c0       	push   0xc002d19d
c001ffeb:	e8 9f a8 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c001fff0:	83 c4 10             	add    esp,0x10
c001fff3:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fff8:	b9 08 00 00 00       	mov    ecx,0x8
c001fffd:	c0 e8 03             	shr    al,0x3
c0020000:	83 e0 07             	and    eax,0x7
c0020003:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020007:	99                   	cdq    
c0020008:	f7 f9                	idiv   ecx
c002000a:	89 34 d5 04 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbfc],esi
c0020011:	89 3c d5 08 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbf8],edi
c0020018:	58                   	pop    eax
c0020019:	5e                   	pop    esi
c002001a:	5f                   	pop    edi
c002001b:	c3                   	ret    

c002001c <Vm::fpuPush(unsigned long long)>:
c002001c:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c0020021:	c0 e8 03             	shr    al,0x3
c0020024:	83 e0 07             	and    eax,0x7
c0020027:	83 c0 07             	add    eax,0x7
c002002a:	88 c2                	mov    dl,al
c002002c:	83 e0 07             	and    eax,0x7
c002002f:	83 e2 07             	and    edx,0x7
c0020032:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020039:	8a 15 01 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032401
c002003f:	83 e2 c7             	and    edx,0xffffffc7
c0020042:	09 ca                	or     edx,ecx
c0020044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020048:	88 15 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,dl
c002004e:	89 0c c5 08 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbf8],ecx
c0020055:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020059:	89 14 c5 04 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbfc],edx
c0020060:	a1 44 24 03 c0       	mov    eax,ds:0xc0032444
c0020065:	83 f8 08             	cmp    eax,0x8
c0020068:	75 08                	jne    c0020072 <Vm::fpuPush(unsigned long long)+0x56>
c002006a:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c0020071:	c3                   	ret    
c0020072:	40                   	inc    eax
c0020073:	a3 44 24 03 c0       	mov    ds:0xc0032444,eax
c0020078:	c3                   	ret    

c0020079 <Vm::fpuPop()>:
c0020079:	8a 0d 01 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032401
c002007f:	53                   	push   ebx
c0020080:	c0 e9 03             	shr    cl,0x3
c0020083:	8a 1d 01 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032401
c0020089:	83 e1 07             	and    ecx,0x7
c002008c:	83 e3 c7             	and    ebx,0xffffffc7
c002008f:	8b 04 cd 04 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbfc]
c0020096:	8b 14 cd 08 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbf8]
c002009d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00200a4:	83 e1 38             	and    ecx,0x38
c00200a7:	09 d9                	or     ecx,ebx
c00200a9:	88 0d 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,cl
c00200af:	8b 0d 44 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032444
c00200b5:	85 c9                	test   ecx,ecx
c00200b7:	74 09                	je     c00200c2 <Vm::fpuPop()+0x49>
c00200b9:	49                   	dec    ecx
c00200ba:	89 0d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,ecx
c00200c0:	eb 07                	jmp    c00200c9 <Vm::fpuPop()+0x50>
c00200c2:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c00200c9:	5b                   	pop    ebx
c00200ca:	c3                   	ret    

c00200cb <Vm::x87Handler(regs*)>:
c00200cb:	55                   	push   ebp
c00200cc:	57                   	push   edi
c00200cd:	56                   	push   esi
c00200ce:	53                   	push   ebx
c00200cf:	83 ec 1c             	sub    esp,0x1c
c00200d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200d6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00200db:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00200de:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00200e6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00200ea:	50                   	push   eax
c00200eb:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00200ef:	50                   	push   eax
c00200f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200f4:	50                   	push   eax
c00200f5:	53                   	push   ebx
c00200f6:	e8 5b 9e ff ff       	call   c0019f56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00200fb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00200fe:	83 c4 10             	add    esp,0x10
c0020101:	89 c6                	mov    esi,eax
c0020103:	80 fa d9             	cmp    dl,0xd9
c0020106:	0f 85 52 01 00 00    	jne    c002025e <Vm::x87Handler(regs*)+0x193>
c002010c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020110:	8d 50 20             	lea    edx,[eax+0x20]
c0020113:	80 fa 0e             	cmp    dl,0xe
c0020116:	0f 87 86 00 00 00    	ja     c00201a2 <Vm::x87Handler(regs*)+0xd7>
c002011c:	0f b6 d2             	movzx  edx,dl
c002011f:	ff 24 95 b0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e50]
c0020126:	e8 e7 fc ff ff       	call   c001fe12 <Vm::fpuGet0()>
c002012b:	eb 05                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c002012d:	e8 e5 fc ff ff       	call   c001fe17 <Vm::fpuGet1()>
c0020132:	57                   	push   edi
c0020133:	57                   	push   edi
c0020134:	52                   	push   edx
c0020135:	50                   	push   eax
c0020136:	e8 e1 fe ff ff       	call   c002001c <Vm::fpuPush(unsigned long long)>
c002013b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	b0 01                	mov    al,0x1
c0020144:	e9 e3 09 00 00       	jmp    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020149:	83 ec 0c             	sub    esp,0xc
c002014c:	6a 00                	push   0x0
c002014e:	e8 3b fe ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020153:	59                   	pop    ecx
c0020154:	5e                   	pop    esi
c0020155:	52                   	push   edx
c0020156:	50                   	push   eax
c0020157:	e8 c2 fd ff ff       	call   c001ff1e <Vm::fpuChs(unsigned long long)>
c002015c:	eb 13                	jmp    c0020171 <Vm::x87Handler(regs*)+0xa6>
c002015e:	83 ec 0c             	sub    esp,0xc
c0020161:	6a 00                	push   0x0
c0020163:	e8 26 fe ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020168:	5f                   	pop    edi
c0020169:	5d                   	pop    ebp
c002016a:	52                   	push   edx
c002016b:	50                   	push   eax
c002016c:	e8 a4 fd ff ff       	call   c001ff15 <Vm::fpuAbs(unsigned long long)>
c0020171:	83 c4 0c             	add    esp,0xc
c0020174:	52                   	push   edx
c0020175:	50                   	push   eax
c0020176:	6a 00                	push   0x0
c0020178:	e8 54 fe ff ff       	call   c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>
c002017d:	eb bc                	jmp    c002013b <Vm::x87Handler(regs*)+0x70>
c002017f:	e8 d3 fc ff ff       	call   c001fe57 <Vm::fpuGetLog210()>
c0020184:	eb ac                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c0020186:	e8 9c fc ff ff       	call   c001fe27 <Vm::fpuGetLog2E()>
c002018b:	eb a5                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c002018d:	e8 8d fc ff ff       	call   c001fe1f <Vm::fpuGetPi()>
c0020192:	eb 9e                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c0020194:	e8 d6 fc ff ff       	call   c001fe6f <Vm::fpuGetLog102()>
c0020199:	eb 97                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c002019b:	e8 9f fc ff ff       	call   c001fe3f <Vm::fpuGetLogE2()>
c00201a0:	eb 90                	jmp    c0020132 <Vm::x87Handler(regs*)+0x67>
c00201a2:	8d 50 40             	lea    edx,[eax+0x40]
c00201a5:	80 fa 07             	cmp    dl,0x7
c00201a8:	77 15                	ja     c00201bf <Vm::x87Handler(regs*)+0xf4>
c00201aa:	83 ec 0c             	sub    esp,0xc
c00201ad:	2d c0 00 00 00       	sub    eax,0xc0
c00201b2:	50                   	push   eax
c00201b3:	e8 d6 fd ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00201b8:	59                   	pop    ecx
c00201b9:	5e                   	pop    esi
c00201ba:	e9 75 ff ff ff       	jmp    c0020134 <Vm::x87Handler(regs*)+0x69>
c00201bf:	8d 50 38             	lea    edx,[eax+0x38]
c00201c2:	80 fa 07             	cmp    dl,0x7
c00201c5:	77 3c                	ja     c0020203 <Vm::x87Handler(regs*)+0x138>
c00201c7:	83 ec 0c             	sub    esp,0xc
c00201ca:	2d c8 00 00 00       	sub    eax,0xc8
c00201cf:	50                   	push   eax
c00201d0:	e8 b9 fd ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00201d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201dc:	89 c6                	mov    esi,eax
c00201de:	89 d7                	mov    edi,edx
c00201e0:	e8 a9 fd ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	52                   	push   edx
c00201e9:	50                   	push   eax
c00201ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ee:	2d c8 00 00 00       	sub    eax,0xc8
c00201f3:	50                   	push   eax
c00201f4:	e8 d8 fd ff ff       	call   c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>
c00201f9:	83 c4 0c             	add    esp,0xc
c00201fc:	57                   	push   edi
c00201fd:	56                   	push   esi
c00201fe:	e9 73 ff ff ff       	jmp    c0020176 <Vm::x87Handler(regs*)+0xab>
c0020203:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020207:	84 d2                	test   dl,dl
c0020209:	75 0f                	jne    c002021a <Vm::x87Handler(regs*)+0x14f>
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 36                	push   DWORD PTR [esi]
c0020210:	e8 c8 fa ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c0020215:	e9 bf 00 00 00       	jmp    c00202d9 <Vm::x87Handler(regs*)+0x20e>
c002021a:	80 fa 03             	cmp    dl,0x3
c002021d:	75 13                	jne    c0020232 <Vm::x87Handler(regs*)+0x167>
c002021f:	e8 55 fe ff ff       	call   c0020079 <Vm::fpuPop()>
c0020224:	55                   	push   ebp
c0020225:	55                   	push   ebp
c0020226:	52                   	push   edx
c0020227:	50                   	push   eax
c0020228:	e8 4c fa ff ff       	call   c001fc79 <Vm::fpuInternalTo32(unsigned long long)>
c002022d:	e9 88 00 00 00       	jmp    c00202ba <Vm::x87Handler(regs*)+0x1ef>
c0020232:	80 fa 05             	cmp    dl,0x5
c0020235:	75 0e                	jne    c0020245 <Vm::x87Handler(regs*)+0x17a>
c0020237:	66 8b 06             	mov    ax,WORD PTR [esi]
c002023a:	66 a3 02 24 03 c0    	mov    ds:0xc0032402,ax
c0020240:	e9 df 00 00 00       	jmp    c0020324 <Vm::x87Handler(regs*)+0x259>
c0020245:	31 c0                	xor    eax,eax
c0020247:	80 fa 07             	cmp    dl,0x7
c002024a:	0f 85 dc 08 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020250:	66 a1 02 24 03 c0    	mov    ax,ds:0xc0032402
c0020256:	66 89 06             	mov    WORD PTR [esi],ax
c0020259:	e9 c6 00 00 00       	jmp    c0020324 <Vm::x87Handler(regs*)+0x259>
c002025e:	80 fa d8             	cmp    dl,0xd8
c0020261:	0f 84 c9 00 00 00    	je     c0020330 <Vm::x87Handler(regs*)+0x265>
c0020267:	80 fa dc             	cmp    dl,0xdc
c002026a:	0f 84 0d 02 00 00    	je     c002047d <Vm::x87Handler(regs*)+0x3b2>
c0020270:	80 fa de             	cmp    dl,0xde
c0020273:	0f 84 cd 02 00 00    	je     c0020546 <Vm::x87Handler(regs*)+0x47b>
c0020279:	80 fa dd             	cmp    dl,0xdd
c002027c:	0f 84 5f 04 00 00    	je     c00206e1 <Vm::x87Handler(regs*)+0x616>
c0020282:	80 fa da             	cmp    dl,0xda
c0020285:	0f 84 24 05 00 00    	je     c00207af <Vm::x87Handler(regs*)+0x6e4>
c002028b:	80 fa df             	cmp    dl,0xdf
c002028e:	0f 84 68 05 00 00    	je     c00207fc <Vm::x87Handler(regs*)+0x731>
c0020294:	31 c0                	xor    eax,eax
c0020296:	80 fa db             	cmp    dl,0xdb
c0020299:	0f 85 8d 08 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c002029f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a3:	80 fa 03             	cmp    dl,0x3
c00202a6:	0f 85 70 06 00 00    	jne    c002091c <Vm::x87Handler(regs*)+0x851>
c00202ac:	e8 c8 fd ff ff       	call   c0020079 <Vm::fpuPop()>
c00202b1:	55                   	push   ebp
c00202b2:	55                   	push   ebp
c00202b3:	52                   	push   edx
c00202b4:	50                   	push   eax
c00202b5:	e8 71 fa ff ff       	call   c001fd2b <Vm::fpuFloatToLong(unsigned long long)>
c00202ba:	83 c4 10             	add    esp,0x10
c00202bd:	89 06                	mov    DWORD PTR [esi],eax
c00202bf:	eb 63                	jmp    c0020324 <Vm::x87Handler(regs*)+0x259>
c00202c1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202c5:	84 d2                	test   dl,dl
c00202c7:	0f 85 e6 05 00 00    	jne    c00208b3 <Vm::x87Handler(regs*)+0x7e8>
c00202cd:	57                   	push   edi
c00202ce:	57                   	push   edi
c00202cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202d2:	ff 36                	push   DWORD PTR [esi]
c00202d4:	e8 49 fa ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c00202d9:	5e                   	pop    esi
c00202da:	5f                   	pop    edi
c00202db:	52                   	push   edx
c00202dc:	50                   	push   eax
c00202dd:	e8 3a fd ff ff       	call   c002001c <Vm::fpuPush(unsigned long long)>
c00202e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202e6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202e9:	e9 51 fe ff ff       	jmp    c002013f <Vm::x87Handler(regs*)+0x74>
c00202ee:	80 fa 03             	cmp    dl,0x3
c00202f1:	0f 85 d7 06 00 00    	jne    c00209ce <Vm::x87Handler(regs*)+0x903>
c00202f7:	57                   	push   edi
c00202f8:	57                   	push   edi
c00202f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fc:	ff 36                	push   DWORD PTR [esi]
c00202fe:	e8 1f fa ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c0020303:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002030a:	89 c6                	mov    esi,eax
c002030c:	89 d7                	mov    edi,edx
c002030e:	e8 7b fc ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020313:	57                   	push   edi
c0020314:	56                   	push   esi
c0020315:	52                   	push   edx
c0020316:	50                   	push   eax
c0020317:	e8 95 fb ff ff       	call   c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002031c:	83 c4 20             	add    esp,0x20
c002031f:	e8 55 fd ff ff       	call   c0020079 <Vm::fpuPop()>
c0020324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020328:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002032b:	e9 12 fe ff ff       	jmp    c0020142 <Vm::x87Handler(regs*)+0x77>
c0020330:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020334:	8d 50 40             	lea    edx,[eax+0x40]
c0020337:	80 fa 07             	cmp    dl,0x7
c002033a:	77 29                	ja     c0020365 <Vm::x87Handler(regs*)+0x29a>
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	2d c0 00 00 00       	sub    eax,0xc0
c0020344:	50                   	push   eax
c0020345:	e8 44 fc ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002034a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020351:	89 c6                	mov    esi,eax
c0020353:	89 d7                	mov    edi,edx
c0020355:	e8 34 fc ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002035a:	57                   	push   edi
c002035b:	56                   	push   esi
c002035c:	52                   	push   edx
c002035d:	50                   	push   eax
c002035e:	e8 a1 fb ff ff       	call   c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020363:	eb 2f                	jmp    c0020394 <Vm::x87Handler(regs*)+0x2c9>
c0020365:	8d 50 38             	lea    edx,[eax+0x38]
c0020368:	80 fa 07             	cmp    dl,0x7
c002036b:	77 2f                	ja     c002039c <Vm::x87Handler(regs*)+0x2d1>
c002036d:	83 ec 0c             	sub    esp,0xc
c0020370:	2d c8 00 00 00       	sub    eax,0xc8
c0020375:	50                   	push   eax
c0020376:	e8 13 fc ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002037b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020382:	89 c6                	mov    esi,eax
c0020384:	89 d7                	mov    edi,edx
c0020386:	e8 03 fc ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002038b:	57                   	push   edi
c002038c:	56                   	push   esi
c002038d:	52                   	push   edx
c002038e:	50                   	push   eax
c002038f:	e8 a9 fb ff ff       	call   c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020394:	83 c4 1c             	add    esp,0x1c
c0020397:	e9 d8 fd ff ff       	jmp    c0020174 <Vm::x87Handler(regs*)+0xa9>
c002039c:	8d 50 30             	lea    edx,[eax+0x30]
c002039f:	80 fa 07             	cmp    dl,0x7
c00203a2:	77 0d                	ja     c00203b1 <Vm::x87Handler(regs*)+0x2e6>
c00203a4:	83 ec 0c             	sub    esp,0xc
c00203a7:	2d d0 00 00 00       	sub    eax,0xd0
c00203ac:	e9 99 03 00 00       	jmp    c002074a <Vm::x87Handler(regs*)+0x67f>
c00203b1:	8d 50 28             	lea    edx,[eax+0x28]
c00203b4:	80 fa 07             	cmp    dl,0x7
c00203b7:	77 0d                	ja     c00203c6 <Vm::x87Handler(regs*)+0x2fb>
c00203b9:	83 ec 0c             	sub    esp,0xc
c00203bc:	2d d8 00 00 00       	sub    eax,0xd8
c00203c1:	e9 c0 03 00 00       	jmp    c0020786 <Vm::x87Handler(regs*)+0x6bb>
c00203c6:	8d 50 20             	lea    edx,[eax+0x20]
c00203c9:	80 fa 07             	cmp    dl,0x7
c00203cc:	77 1b                	ja     c00203e9 <Vm::x87Handler(regs*)+0x31e>
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	2d e0 00 00 00       	sub    eax,0xe0
c00203d6:	50                   	push   eax
c00203d7:	e8 b2 fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00203dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e3:	89 c6                	mov    esi,eax
c00203e5:	89 d7                	mov    edi,edx
c00203e7:	eb 22                	jmp    c002040b <Vm::x87Handler(regs*)+0x340>
c00203e9:	8d 50 18             	lea    edx,[eax+0x18]
c00203ec:	80 fa 07             	cmp    dl,0x7
c00203ef:	77 2d                	ja     c002041e <Vm::x87Handler(regs*)+0x353>
c00203f1:	83 ec 0c             	sub    esp,0xc
c00203f4:	6a 00                	push   0x0
c00203f6:	e8 93 fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00203fb:	89 c6                	mov    esi,eax
c00203fd:	89 d7                	mov    edi,edx
c00203ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020403:	2d e8 00 00 00       	sub    eax,0xe8
c0020408:	89 04 24             	mov    DWORD PTR [esp],eax
c002040b:	e8 7e fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020410:	57                   	push   edi
c0020411:	56                   	push   esi
c0020412:	52                   	push   edx
c0020413:	50                   	push   eax
c0020414:	e8 15 fb ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020419:	e9 76 ff ff ff       	jmp    c0020394 <Vm::x87Handler(regs*)+0x2c9>
c002041e:	8d 50 10             	lea    edx,[eax+0x10]
c0020421:	80 fa 07             	cmp    dl,0x7
c0020424:	77 1b                	ja     c0020441 <Vm::x87Handler(regs*)+0x376>
c0020426:	83 ec 0c             	sub    esp,0xc
c0020429:	2d f0 00 00 00       	sub    eax,0xf0
c002042e:	50                   	push   eax
c002042f:	e8 5a fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020434:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002043b:	89 c6                	mov    esi,eax
c002043d:	89 d7                	mov    edi,edx
c002043f:	eb 22                	jmp    c0020463 <Vm::x87Handler(regs*)+0x398>
c0020441:	3c f7                	cmp    al,0xf7
c0020443:	0f 86 d1 03 00 00    	jbe    c002081a <Vm::x87Handler(regs*)+0x74f>
c0020449:	83 ec 0c             	sub    esp,0xc
c002044c:	6a 00                	push   0x0
c002044e:	e8 3b fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020453:	89 c6                	mov    esi,eax
c0020455:	89 d7                	mov    edi,edx
c0020457:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002045b:	2d f8 00 00 00       	sub    eax,0xf8
c0020460:	89 04 24             	mov    DWORD PTR [esp],eax
c0020463:	e8 26 fb ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020468:	57                   	push   edi
c0020469:	56                   	push   esi
c002046a:	52                   	push   edx
c002046b:	50                   	push   eax
c002046c:	e8 eb fa ff ff       	call   c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020471:	83 c4 1c             	add    esp,0x1c
c0020474:	52                   	push   edx
c0020475:	50                   	push   eax
c0020476:	6a 00                	push   0x0
c0020478:	e9 51 02 00 00       	jmp    c00206ce <Vm::x87Handler(regs*)+0x603>
c002047d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020481:	8d 50 40             	lea    edx,[eax+0x40]
c0020484:	80 fa 07             	cmp    dl,0x7
c0020487:	77 37                	ja     c00204c0 <Vm::x87Handler(regs*)+0x3f5>
c0020489:	83 ec 0c             	sub    esp,0xc
c002048c:	2d c0 00 00 00       	sub    eax,0xc0
c0020491:	50                   	push   eax
c0020492:	e8 f7 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020497:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049e:	89 c6                	mov    esi,eax
c00204a0:	89 d7                	mov    edi,edx
c00204a2:	e8 e7 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00204a7:	57                   	push   edi
c00204a8:	56                   	push   esi
c00204a9:	52                   	push   edx
c00204aa:	50                   	push   eax
c00204ab:	e8 54 fa ff ff       	call   c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204b0:	83 c4 1c             	add    esp,0x1c
c00204b3:	52                   	push   edx
c00204b4:	50                   	push   eax
c00204b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204b9:	2d c0 00 00 00       	sub    eax,0xc0
c00204be:	eb 3d                	jmp    c00204fd <Vm::x87Handler(regs*)+0x432>
c00204c0:	8d 50 38             	lea    edx,[eax+0x38]
c00204c3:	80 fa 07             	cmp    dl,0x7
c00204c6:	77 3b                	ja     c0020503 <Vm::x87Handler(regs*)+0x438>
c00204c8:	83 ec 0c             	sub    esp,0xc
c00204cb:	2d c8 00 00 00       	sub    eax,0xc8
c00204d0:	50                   	push   eax
c00204d1:	e8 b8 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00204d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204dd:	89 c6                	mov    esi,eax
c00204df:	89 d7                	mov    edi,edx
c00204e1:	e8 a8 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00204e6:	57                   	push   edi
c00204e7:	56                   	push   esi
c00204e8:	52                   	push   edx
c00204e9:	50                   	push   eax
c00204ea:	e8 4e fa ff ff       	call   c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204ef:	83 c4 1c             	add    esp,0x1c
c00204f2:	52                   	push   edx
c00204f3:	50                   	push   eax
c00204f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204f8:	2d c8 00 00 00       	sub    eax,0xc8
c00204fd:	50                   	push   eax
c00204fe:	e9 75 fc ff ff       	jmp    c0020178 <Vm::x87Handler(regs*)+0xad>
c0020503:	83 c0 18             	add    eax,0x18
c0020506:	3c 07                	cmp    al,0x7
c0020508:	0f 87 3b 04 00 00    	ja     c0020949 <Vm::x87Handler(regs*)+0x87e>
c002050e:	83 ec 0c             	sub    esp,0xc
c0020511:	6a 00                	push   0x0
c0020513:	e8 76 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020518:	89 c6                	mov    esi,eax
c002051a:	89 d7                	mov    edi,edx
c002051c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020520:	2d e8 00 00 00       	sub    eax,0xe8
c0020525:	89 04 24             	mov    DWORD PTR [esp],eax
c0020528:	e8 61 fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002052d:	57                   	push   edi
c002052e:	56                   	push   esi
c002052f:	52                   	push   edx
c0020530:	50                   	push   eax
c0020531:	e8 f8 f9 ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020536:	83 c4 1c             	add    esp,0x1c
c0020539:	52                   	push   edx
c002053a:	50                   	push   eax
c002053b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002053f:	2d e8 00 00 00       	sub    eax,0xe8
c0020544:	eb b7                	jmp    c00204fd <Vm::x87Handler(regs*)+0x432>
c0020546:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002054a:	8d 50 40             	lea    edx,[eax+0x40]
c002054d:	80 fa 07             	cmp    dl,0x7
c0020550:	77 3a                	ja     c002058c <Vm::x87Handler(regs*)+0x4c1>
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	2d c0 00 00 00       	sub    eax,0xc0
c002055a:	50                   	push   eax
c002055b:	e8 2e fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020560:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020567:	89 c6                	mov    esi,eax
c0020569:	89 d7                	mov    edi,edx
c002056b:	e8 1e fa ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020570:	57                   	push   edi
c0020571:	56                   	push   esi
c0020572:	52                   	push   edx
c0020573:	50                   	push   eax
c0020574:	e8 8b f9 ff ff       	call   c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020579:	83 c4 1c             	add    esp,0x1c
c002057c:	52                   	push   edx
c002057d:	50                   	push   eax
c002057e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020582:	2d c0 00 00 00       	sub    eax,0xc0
c0020587:	e9 9e 01 00 00       	jmp    c002072a <Vm::x87Handler(regs*)+0x65f>
c002058c:	8d 50 20             	lea    edx,[eax+0x20]
c002058f:	80 fa 07             	cmp    dl,0x7
c0020592:	77 3a                	ja     c00205ce <Vm::x87Handler(regs*)+0x503>
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	2d e0 00 00 00       	sub    eax,0xe0
c002059c:	50                   	push   eax
c002059d:	e8 ec f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00205a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205a9:	89 c6                	mov    esi,eax
c00205ab:	89 d7                	mov    edi,edx
c00205ad:	e8 dc f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00205b2:	57                   	push   edi
c00205b3:	56                   	push   esi
c00205b4:	52                   	push   edx
c00205b5:	50                   	push   eax
c00205b6:	e8 73 f9 ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205bb:	83 c4 1c             	add    esp,0x1c
c00205be:	52                   	push   edx
c00205bf:	50                   	push   eax
c00205c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205c4:	2d e0 00 00 00       	sub    eax,0xe0
c00205c9:	e9 5c 01 00 00       	jmp    c002072a <Vm::x87Handler(regs*)+0x65f>
c00205ce:	8d 50 18             	lea    edx,[eax+0x18]
c00205d1:	80 fa 07             	cmp    dl,0x7
c00205d4:	77 3b                	ja     c0020611 <Vm::x87Handler(regs*)+0x546>
c00205d6:	83 ec 0c             	sub    esp,0xc
c00205d9:	6a 00                	push   0x0
c00205db:	e8 ae f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00205e0:	89 c6                	mov    esi,eax
c00205e2:	89 d7                	mov    edi,edx
c00205e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205e8:	2d e8 00 00 00       	sub    eax,0xe8
c00205ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00205f0:	e8 99 f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00205f5:	57                   	push   edi
c00205f6:	56                   	push   esi
c00205f7:	52                   	push   edx
c00205f8:	50                   	push   eax
c00205f9:	e8 30 f9 ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205fe:	83 c4 1c             	add    esp,0x1c
c0020601:	52                   	push   edx
c0020602:	50                   	push   eax
c0020603:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020607:	2d e8 00 00 00       	sub    eax,0xe8
c002060c:	e9 19 01 00 00       	jmp    c002072a <Vm::x87Handler(regs*)+0x65f>
c0020611:	8d 50 38             	lea    edx,[eax+0x38]
c0020614:	80 fa 07             	cmp    dl,0x7
c0020617:	77 37                	ja     c0020650 <Vm::x87Handler(regs*)+0x585>
c0020619:	83 ec 0c             	sub    esp,0xc
c002061c:	2d c8 00 00 00       	sub    eax,0xc8
c0020621:	50                   	push   eax
c0020622:	e8 67 f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020627:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002062e:	89 c6                	mov    esi,eax
c0020630:	89 d7                	mov    edi,edx
c0020632:	e8 57 f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020637:	57                   	push   edi
c0020638:	56                   	push   esi
c0020639:	52                   	push   edx
c002063a:	50                   	push   eax
c002063b:	e8 fd f8 ff ff       	call   c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020640:	83 c4 1c             	add    esp,0x1c
c0020643:	52                   	push   edx
c0020644:	50                   	push   eax
c0020645:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020649:	2d c8 00 00 00       	sub    eax,0xc8
c002064e:	eb 7d                	jmp    c00206cd <Vm::x87Handler(regs*)+0x602>
c0020650:	3c f7                	cmp    al,0xf7
c0020652:	76 38                	jbe    c002068c <Vm::x87Handler(regs*)+0x5c1>
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	6a 00                	push   0x0
c0020659:	e8 30 f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002065e:	89 c6                	mov    esi,eax
c0020660:	89 d7                	mov    edi,edx
c0020662:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020666:	2d f8 00 00 00       	sub    eax,0xf8
c002066b:	89 04 24             	mov    DWORD PTR [esp],eax
c002066e:	e8 1b f9 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020673:	57                   	push   edi
c0020674:	56                   	push   esi
c0020675:	52                   	push   edx
c0020676:	50                   	push   eax
c0020677:	e8 e0 f8 ff ff       	call   c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002067c:	83 c4 1c             	add    esp,0x1c
c002067f:	52                   	push   edx
c0020680:	50                   	push   eax
c0020681:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020685:	2d f8 00 00 00       	sub    eax,0xf8
c002068a:	eb 41                	jmp    c00206cd <Vm::x87Handler(regs*)+0x602>
c002068c:	8d 50 10             	lea    edx,[eax+0x10]
c002068f:	80 fa 07             	cmp    dl,0x7
c0020692:	0f 87 5a 01 00 00    	ja     c00207f2 <Vm::x87Handler(regs*)+0x727>
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	2d f0 00 00 00       	sub    eax,0xf0
c00206a0:	50                   	push   eax
c00206a1:	e8 e8 f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00206a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206ad:	89 c6                	mov    esi,eax
c00206af:	89 d7                	mov    edi,edx
c00206b1:	e8 d8 f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00206b6:	57                   	push   edi
c00206b7:	56                   	push   esi
c00206b8:	52                   	push   edx
c00206b9:	50                   	push   eax
c00206ba:	e8 9d f8 ff ff       	call   c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206bf:	83 c4 1c             	add    esp,0x1c
c00206c2:	52                   	push   edx
c00206c3:	50                   	push   eax
c00206c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206c8:	2d f0 00 00 00       	sub    eax,0xf0
c00206cd:	50                   	push   eax
c00206ce:	e8 fe f8 ff ff       	call   c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>
c00206d3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206d7:	e8 9d f9 ff ff       	call   c0020079 <Vm::fpuPop()>
c00206dc:	e9 5e fa ff ff       	jmp    c002013f <Vm::x87Handler(regs*)+0x74>
c00206e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206e5:	8d 50 30             	lea    edx,[eax+0x30]
c00206e8:	80 fa 07             	cmp    dl,0x7
c00206eb:	77 1d                	ja     c002070a <Vm::x87Handler(regs*)+0x63f>
c00206ed:	83 ec 0c             	sub    esp,0xc
c00206f0:	6a 00                	push   0x0
c00206f2:	e8 97 f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00206f7:	83 c4 0c             	add    esp,0xc
c00206fa:	52                   	push   edx
c00206fb:	50                   	push   eax
c00206fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020700:	2d d0 00 00 00       	sub    eax,0xd0
c0020705:	e9 f3 fd ff ff       	jmp    c00204fd <Vm::x87Handler(regs*)+0x432>
c002070a:	8d 50 28             	lea    edx,[eax+0x28]
c002070d:	80 fa 07             	cmp    dl,0x7
c0020710:	77 28                	ja     c002073a <Vm::x87Handler(regs*)+0x66f>
c0020712:	83 ec 0c             	sub    esp,0xc
c0020715:	6a 00                	push   0x0
c0020717:	e8 72 f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002071c:	83 c4 0c             	add    esp,0xc
c002071f:	52                   	push   edx
c0020720:	50                   	push   eax
c0020721:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020725:	2d d8 00 00 00       	sub    eax,0xd8
c002072a:	50                   	push   eax
c002072b:	e8 a1 f8 ff ff       	call   c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>
c0020730:	e8 44 f9 ff ff       	call   c0020079 <Vm::fpuPop()>
c0020735:	e9 01 fa ff ff       	jmp    c002013b <Vm::x87Handler(regs*)+0x70>
c002073a:	8d 50 20             	lea    edx,[eax+0x20]
c002073d:	80 fa 07             	cmp    dl,0x7
c0020740:	77 30                	ja     c0020772 <Vm::x87Handler(regs*)+0x6a7>
c0020742:	83 ec 0c             	sub    esp,0xc
c0020745:	2d e0 00 00 00       	sub    eax,0xe0
c002074a:	50                   	push   eax
c002074b:	e8 3e f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020757:	89 c6                	mov    esi,eax
c0020759:	89 d7                	mov    edi,edx
c002075b:	e8 2e f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020760:	57                   	push   edi
c0020761:	56                   	push   esi
c0020762:	52                   	push   edx
c0020763:	50                   	push   eax
c0020764:	e8 48 f7 ff ff       	call   c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020769:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002076d:	e9 54 02 00 00       	jmp    c00209c6 <Vm::x87Handler(regs*)+0x8fb>
c0020772:	8d 50 18             	lea    edx,[eax+0x18]
c0020775:	80 fa 07             	cmp    dl,0x7
c0020778:	0f 87 43 fb ff ff    	ja     c00202c1 <Vm::x87Handler(regs*)+0x1f6>
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	2d e8 00 00 00       	sub    eax,0xe8
c0020786:	50                   	push   eax
c0020787:	e8 02 f8 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002078c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020793:	89 c6                	mov    esi,eax
c0020795:	89 d7                	mov    edi,edx
c0020797:	e8 f2 f7 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002079c:	57                   	push   edi
c002079d:	56                   	push   esi
c002079e:	52                   	push   edx
c002079f:	50                   	push   eax
c00207a0:	e8 0c f7 ff ff       	call   c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207a5:	83 c4 20             	add    esp,0x20
c00207a8:	e8 cc f8 ff ff       	call   c0020079 <Vm::fpuPop()>
c00207ad:	eb 62                	jmp    c0020811 <Vm::x87Handler(regs*)+0x746>
c00207af:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207b3:	0f 85 0f 01 00 00    	jne    c00208c8 <Vm::x87Handler(regs*)+0x7fd>
c00207b9:	83 ec 0c             	sub    esp,0xc
c00207bc:	6a 01                	push   0x1
c00207be:	e8 cb f7 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00207c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207ca:	89 c6                	mov    esi,eax
c00207cc:	89 d7                	mov    edi,edx
c00207ce:	e8 bb f7 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00207d3:	57                   	push   edi
c00207d4:	56                   	push   esi
c00207d5:	52                   	push   edx
c00207d6:	50                   	push   eax
c00207d7:	e8 d5 f6 ff ff       	call   c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207dc:	83 c4 20             	add    esp,0x20
c00207df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207e3:	e8 91 f8 ff ff       	call   c0020079 <Vm::fpuPop()>
c00207e8:	e8 8c f8 ff ff       	call   c0020079 <Vm::fpuPop()>
c00207ed:	e9 50 f9 ff ff       	jmp    c0020142 <Vm::x87Handler(regs*)+0x77>
c00207f2:	3c d9                	cmp    al,0xd9
c00207f4:	0f 85 b5 02 00 00    	jne    c0020aaf <Vm::x87Handler(regs*)+0x9e4>
c00207fa:	eb bd                	jmp    c00207b9 <Vm::x87Handler(regs*)+0x6ee>
c00207fc:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020800:	0f 85 ea 02 00 00    	jne    c0020af0 <Vm::x87Handler(regs*)+0xa25>
c0020806:	0f b7 05 00 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032400
c002080d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020811:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020815:	e9 28 f9 ff ff       	jmp    c0020142 <Vm::x87Handler(regs*)+0x77>
c002081a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002081e:	84 d2                	test   dl,dl
c0020820:	75 0f                	jne    c0020831 <Vm::x87Handler(regs*)+0x766>
c0020822:	83 ec 0c             	sub    esp,0xc
c0020825:	ff 36                	push   DWORD PTR [esi]
c0020827:	e8 b1 f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c002082c:	e9 2c 01 00 00       	jmp    c002095d <Vm::x87Handler(regs*)+0x892>
c0020831:	80 fa 01             	cmp    dl,0x1
c0020834:	75 0f                	jne    c0020845 <Vm::x87Handler(regs*)+0x77a>
c0020836:	83 ec 0c             	sub    esp,0xc
c0020839:	ff 36                	push   DWORD PTR [esi]
c002083b:	e8 9d f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c0020840:	e9 81 02 00 00       	jmp    c0020ac6 <Vm::x87Handler(regs*)+0x9fb>
c0020845:	80 fa 04             	cmp    dl,0x4
c0020848:	75 0f                	jne    c0020859 <Vm::x87Handler(regs*)+0x78e>
c002084a:	83 ec 0c             	sub    esp,0xc
c002084d:	ff 36                	push   DWORD PTR [esi]
c002084f:	e8 89 f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c0020854:	e9 86 01 00 00       	jmp    c00209df <Vm::x87Handler(regs*)+0x914>
c0020859:	80 fa 05             	cmp    dl,0x5
c002085c:	75 1b                	jne    c0020879 <Vm::x87Handler(regs*)+0x7ae>
c002085e:	83 ec 0c             	sub    esp,0xc
c0020861:	6a 00                	push   0x0
c0020863:	e8 26 f7 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020868:	89 c7                	mov    edi,eax
c002086a:	89 d5                	mov    ebp,edx
c002086c:	58                   	pop    eax
c002086d:	ff 36                	push   DWORD PTR [esi]
c002086f:	e8 69 f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c0020874:	e9 a3 01 00 00       	jmp    c0020a1c <Vm::x87Handler(regs*)+0x951>
c0020879:	80 fa 06             	cmp    dl,0x6
c002087c:	75 0f                	jne    c002088d <Vm::x87Handler(regs*)+0x7c2>
c002087e:	83 ec 0c             	sub    esp,0xc
c0020881:	ff 36                	push   DWORD PTR [esi]
c0020883:	e8 55 f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c0020888:	e9 ae 01 00 00       	jmp    c0020a3b <Vm::x87Handler(regs*)+0x970>
c002088d:	31 c0                	xor    eax,eax
c002088f:	80 fa 07             	cmp    dl,0x7
c0020892:	0f 85 94 02 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020898:	83 ec 0c             	sub    esp,0xc
c002089b:	6a 00                	push   0x0
c002089d:	e8 ec f6 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00208a2:	89 c7                	mov    edi,eax
c00208a4:	89 d5                	mov    ebp,edx
c00208a6:	58                   	pop    eax
c00208a7:	ff 36                	push   DWORD PTR [esi]
c00208a9:	e8 2f f4 ff ff       	call   c001fcdd <Vm::fpu32ToInternal(unsigned int)>
c00208ae:	e9 cb 01 00 00       	jmp    c0020a7e <Vm::x87Handler(regs*)+0x9b3>
c00208b3:	80 fa 03             	cmp    dl,0x3
c00208b6:	0f 85 d3 01 00 00    	jne    c0020a8f <Vm::x87Handler(regs*)+0x9c4>
c00208bc:	e8 b8 f7 ff ff       	call   c0020079 <Vm::fpuPop()>
c00208c1:	51                   	push   ecx
c00208c2:	51                   	push   ecx
c00208c3:	e9 de 01 00 00       	jmp    c0020aa6 <Vm::x87Handler(regs*)+0x9db>
c00208c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208cc:	80 fa 01             	cmp    dl,0x1
c00208cf:	75 09                	jne    c00208da <Vm::x87Handler(regs*)+0x80f>
c00208d1:	57                   	push   edi
c00208d2:	57                   	push   edi
c00208d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00208d5:	e9 e3 01 00 00       	jmp    c0020abd <Vm::x87Handler(regs*)+0x9f2>
c00208da:	80 fa 04             	cmp    dl,0x4
c00208dd:	75 12                	jne    c00208f1 <Vm::x87Handler(regs*)+0x826>
c00208df:	31 d2                	xor    edx,edx
c00208e1:	51                   	push   ecx
c00208e2:	51                   	push   ecx
c00208e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00208e5:	52                   	push   edx
c00208e6:	50                   	push   eax
c00208e7:	e8 d0 f4 ff ff       	call   c001fdbc <Vm::fpuLongToFloat(long long)>
c00208ec:	e9 ee 00 00 00       	jmp    c00209df <Vm::x87Handler(regs*)+0x914>
c00208f1:	31 c0                	xor    eax,eax
c00208f3:	80 fa 07             	cmp    dl,0x7
c00208f6:	0f 85 30 02 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c00208fc:	83 ec 0c             	sub    esp,0xc
c00208ff:	6a 00                	push   0x0
c0020901:	e8 88 f6 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020906:	89 c7                	mov    edi,eax
c0020908:	89 d5                	mov    ebp,edx
c002090a:	58                   	pop    eax
c002090b:	8b 06                	mov    eax,DWORD PTR [esi]
c002090d:	5a                   	pop    edx
c002090e:	31 d2                	xor    edx,edx
c0020910:	52                   	push   edx
c0020911:	50                   	push   eax
c0020912:	e8 a5 f4 ff ff       	call   c001fdbc <Vm::fpuLongToFloat(long long)>
c0020917:	e9 62 01 00 00       	jmp    c0020a7e <Vm::x87Handler(regs*)+0x9b3>
c002091c:	84 d2                	test   dl,dl
c002091e:	75 0d                	jne    c002092d <Vm::x87Handler(regs*)+0x862>
c0020920:	31 d2                	xor    edx,edx
c0020922:	55                   	push   ebp
c0020923:	55                   	push   ebp
c0020924:	8b 06                	mov    eax,DWORD PTR [esi]
c0020926:	52                   	push   edx
c0020927:	50                   	push   eax
c0020928:	e9 d3 01 00 00       	jmp    c0020b00 <Vm::x87Handler(regs*)+0xa35>
c002092d:	31 c0                	xor    eax,eax
c002092f:	80 fa 02             	cmp    dl,0x2
c0020932:	0f 85 f4 01 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020938:	83 ec 0c             	sub    esp,0xc
c002093b:	6a 00                	push   0x0
c002093d:	e8 4c f6 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020942:	59                   	pop    ecx
c0020943:	5f                   	pop    edi
c0020944:	e9 6a f9 ff ff       	jmp    c00202b3 <Vm::x87Handler(regs*)+0x1e8>
c0020949:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002094d:	84 d2                	test   dl,dl
c002094f:	75 2a                	jne    c002097b <Vm::x87Handler(regs*)+0x8b0>
c0020951:	50                   	push   eax
c0020952:	50                   	push   eax
c0020953:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020956:	ff 36                	push   DWORD PTR [esi]
c0020958:	e8 c5 f3 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c002095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020964:	89 c6                	mov    esi,eax
c0020966:	89 d7                	mov    edi,edx
c0020968:	e8 21 f6 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c002096d:	57                   	push   edi
c002096e:	56                   	push   esi
c002096f:	52                   	push   edx
c0020970:	50                   	push   eax
c0020971:	e8 8e f5 ff ff       	call   c001ff04 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020976:	e9 64 01 00 00       	jmp    c0020adf <Vm::x87Handler(regs*)+0xa14>
c002097b:	80 fa 01             	cmp    dl,0x1
c002097e:	75 11                	jne    c0020991 <Vm::x87Handler(regs*)+0x8c6>
c0020980:	50                   	push   eax
c0020981:	50                   	push   eax
c0020982:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020985:	ff 36                	push   DWORD PTR [esi]
c0020987:	e8 96 f3 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c002098c:	e9 35 01 00 00       	jmp    c0020ac6 <Vm::x87Handler(regs*)+0x9fb>
c0020991:	80 fa 02             	cmp    dl,0x2
c0020994:	0f 85 54 f9 ff ff    	jne    c00202ee <Vm::x87Handler(regs*)+0x223>
c002099a:	55                   	push   ebp
c002099b:	55                   	push   ebp
c002099c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002099f:	ff 36                	push   DWORD PTR [esi]
c00209a1:	e8 7c f3 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c00209a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209ad:	89 c6                	mov    esi,eax
c00209af:	89 d7                	mov    edi,edx
c00209b1:	e8 d8 f5 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00209b6:	57                   	push   edi
c00209b7:	56                   	push   esi
c00209b8:	52                   	push   edx
c00209b9:	50                   	push   eax
c00209ba:	e8 f2 f4 ff ff       	call   c001feb1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209c3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209c6:	83 c4 20             	add    esp,0x20
c00209c9:	e9 74 f7 ff ff       	jmp    c0020142 <Vm::x87Handler(regs*)+0x77>
c00209ce:	80 fa 04             	cmp    dl,0x4
c00209d1:	75 2a                	jne    c00209fd <Vm::x87Handler(regs*)+0x932>
c00209d3:	51                   	push   ecx
c00209d4:	51                   	push   ecx
c00209d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209d8:	ff 36                	push   DWORD PTR [esi]
c00209da:	e8 43 f3 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c00209df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209e6:	89 c6                	mov    esi,eax
c00209e8:	89 d7                	mov    edi,edx
c00209ea:	e8 9f f5 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c00209ef:	57                   	push   edi
c00209f0:	56                   	push   esi
c00209f1:	52                   	push   edx
c00209f2:	50                   	push   eax
c00209f3:	e8 36 f5 ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00209f8:	e9 e2 00 00 00       	jmp    c0020adf <Vm::x87Handler(regs*)+0xa14>
c00209fd:	80 fa 05             	cmp    dl,0x5
c0020a00:	75 28                	jne    c0020a2a <Vm::x87Handler(regs*)+0x95f>
c0020a02:	83 ec 0c             	sub    esp,0xc
c0020a05:	6a 00                	push   0x0
c0020a07:	e8 82 f5 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020a0c:	89 c7                	mov    edi,eax
c0020a0e:	89 d5                	mov    ebp,edx
c0020a10:	58                   	pop    eax
c0020a11:	5a                   	pop    edx
c0020a12:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a15:	ff 36                	push   DWORD PTR [esi]
c0020a17:	e8 06 f3 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c0020a1c:	83 c4 10             	add    esp,0x10
c0020a1f:	55                   	push   ebp
c0020a20:	57                   	push   edi
c0020a21:	52                   	push   edx
c0020a22:	50                   	push   eax
c0020a23:	e8 06 f5 ff ff       	call   c001ff2e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a28:	eb 60                	jmp    c0020a8a <Vm::x87Handler(regs*)+0x9bf>
c0020a2a:	80 fa 06             	cmp    dl,0x6
c0020a2d:	75 2a                	jne    c0020a59 <Vm::x87Handler(regs*)+0x98e>
c0020a2f:	51                   	push   ecx
c0020a30:	51                   	push   ecx
c0020a31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a34:	ff 36                	push   DWORD PTR [esi]
c0020a36:	e8 e7 f2 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c0020a3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a42:	89 c6                	mov    esi,eax
c0020a44:	89 d7                	mov    edi,edx
c0020a46:	e8 43 f5 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020a4b:	57                   	push   edi
c0020a4c:	56                   	push   esi
c0020a4d:	52                   	push   edx
c0020a4e:	50                   	push   eax
c0020a4f:	e8 08 f5 ff ff       	call   c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a54:	e9 86 00 00 00       	jmp    c0020adf <Vm::x87Handler(regs*)+0xa14>
c0020a59:	31 c0                	xor    eax,eax
c0020a5b:	80 fa 07             	cmp    dl,0x7
c0020a5e:	0f 85 c8 00 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020a64:	83 ec 0c             	sub    esp,0xc
c0020a67:	6a 00                	push   0x0
c0020a69:	e8 20 f5 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020a6e:	89 c7                	mov    edi,eax
c0020a70:	89 d5                	mov    ebp,edx
c0020a72:	58                   	pop    eax
c0020a73:	5a                   	pop    edx
c0020a74:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a77:	ff 36                	push   DWORD PTR [esi]
c0020a79:	e8 a4 f2 ff ff       	call   c001fd22 <Vm::fpu64ToInternal(unsigned long long)>
c0020a7e:	83 c4 10             	add    esp,0x10
c0020a81:	55                   	push   ebp
c0020a82:	57                   	push   edi
c0020a83:	52                   	push   edx
c0020a84:	50                   	push   eax
c0020a85:	e8 d2 f4 ff ff       	call   c001ff5c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a8a:	83 c4 0c             	add    esp,0xc
c0020a8d:	eb 53                	jmp    c0020ae2 <Vm::x87Handler(regs*)+0xa17>
c0020a8f:	31 c0                	xor    eax,eax
c0020a91:	80 fa 02             	cmp    dl,0x2
c0020a94:	0f 85 92 00 00 00    	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020a9a:	83 ec 0c             	sub    esp,0xc
c0020a9d:	6a 00                	push   0x0
c0020a9f:	e8 ea f4 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020aa4:	59                   	pop    ecx
c0020aa5:	5f                   	pop    edi
c0020aa6:	52                   	push   edx
c0020aa7:	50                   	push   eax
c0020aa8:	e8 27 f2 ff ff       	call   c001fcd4 <Vm::fpuInternalTo64(unsigned long long)>
c0020aad:	eb 70                	jmp    c0020b1f <Vm::x87Handler(regs*)+0xa54>
c0020aaf:	31 c0                	xor    eax,eax
c0020ab1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020ab6:	75 74                	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020ab8:	50                   	push   eax
c0020ab9:	50                   	push   eax
c0020aba:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020abd:	31 d2                	xor    edx,edx
c0020abf:	52                   	push   edx
c0020ac0:	50                   	push   eax
c0020ac1:	e8 f6 f2 ff ff       	call   c001fdbc <Vm::fpuLongToFloat(long long)>
c0020ac6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020acd:	89 c6                	mov    esi,eax
c0020acf:	89 d7                	mov    edi,edx
c0020ad1:	e8 b8 f4 ff ff       	call   c001ff8e <Vm::fpuGetReg(int)>
c0020ad6:	57                   	push   edi
c0020ad7:	56                   	push   esi
c0020ad8:	52                   	push   edx
c0020ad9:	50                   	push   eax
c0020ada:	e8 5e f4 ff ff       	call   c001ff3d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020adf:	83 c4 1c             	add    esp,0x1c
c0020ae2:	52                   	push   edx
c0020ae3:	50                   	push   eax
c0020ae4:	6a 00                	push   0x0
c0020ae6:	e8 e6 f4 ff ff       	call   c001ffd1 <Vm::fpuSetReg(int, unsigned long long)>
c0020aeb:	e9 f2 f7 ff ff       	jmp    c00202e2 <Vm::x87Handler(regs*)+0x217>
c0020af0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020af4:	80 fa 05             	cmp    dl,0x5
c0020af7:	75 11                	jne    c0020b0a <Vm::x87Handler(regs*)+0xa3f>
c0020af9:	55                   	push   ebp
c0020afa:	55                   	push   ebp
c0020afb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020afe:	ff 36                	push   DWORD PTR [esi]
c0020b00:	e8 81 f2 ff ff       	call   c001fd86 <Vm::fpuULongToFloat(unsigned long long)>
c0020b05:	e9 cf f7 ff ff       	jmp    c00202d9 <Vm::x87Handler(regs*)+0x20e>
c0020b0a:	31 c0                	xor    eax,eax
c0020b0c:	80 fa 07             	cmp    dl,0x7
c0020b0f:	75 1b                	jne    c0020b2c <Vm::x87Handler(regs*)+0xa61>
c0020b11:	e8 63 f5 ff ff       	call   c0020079 <Vm::fpuPop()>
c0020b16:	51                   	push   ecx
c0020b17:	51                   	push   ecx
c0020b18:	52                   	push   edx
c0020b19:	50                   	push   eax
c0020b1a:	e8 0c f2 ff ff       	call   c001fd2b <Vm::fpuFloatToLong(unsigned long long)>
c0020b1f:	83 c4 10             	add    esp,0x10
c0020b22:	89 06                	mov    DWORD PTR [esi],eax
c0020b24:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b27:	e9 f8 f7 ff ff       	jmp    c0020324 <Vm::x87Handler(regs*)+0x259>
c0020b2c:	83 c4 1c             	add    esp,0x1c
c0020b2f:	5b                   	pop    ebx
c0020b30:	5e                   	pop    esi
c0020b31:	5f                   	pop    edi
c0020b32:	5d                   	pop    ebp
c0020b33:	c3                   	ret    

c0020b34 <__static_initialization_and_destruction_0(int, int)>:
c0020b34:	83 ec 0c             	sub    esp,0xc
c0020b37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b3c:	75 1a                	jne    c0020b58 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b3e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b46:	75 10                	jne    c0020b58 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b48:	83 ec 0c             	sub    esp,0xc
c0020b4b:	68 00 24 03 c0       	push   0xc0032400
c0020b50:	e8 97 8a 00 00       	call   c00295ec <Vm::_FPUState::_FPUState()>
c0020b55:	83 c4 10             	add    esp,0x10
c0020b58:	90                   	nop
c0020b59:	83 c4 0c             	add    esp,0xc
c0020b5c:	c3                   	ret    

c0020b5d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b5d:	83 ec 0c             	sub    esp,0xc
c0020b60:	83 ec 08             	sub    esp,0x8
c0020b63:	68 ff ff 00 00       	push   0xffff
c0020b68:	6a 01                	push   0x1
c0020b6a:	e8 c5 ff ff ff       	call   c0020b34 <__static_initialization_and_destruction_0(int, int)>
c0020b6f:	83 c4 10             	add    esp,0x10
c0020b72:	83 c4 0c             	add    esp,0xc
c0020b75:	c3                   	ret    

c0020b76 <FAT::getName()>:
c0020b76:	b8 ec d1 02 c0       	mov    eax,0xc002d1ec
c0020b7b:	c3                   	ret    

c0020b7c <FAT::tell(void*, unsigned long long*)>:
c0020b7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b81:	75 06                	jne    c0020b89 <FAT::tell(void*, unsigned long long*)+0xd>
c0020b83:	b8 04 00 00 00       	mov    eax,0x4
c0020b88:	c3                   	ret    
c0020b89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b8e:	75 06                	jne    c0020b96 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020b90:	b8 04 00 00 00       	mov    eax,0x4
c0020b95:	c3                   	ret    
c0020b96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b9a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020b9d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020ba0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020ba4:	89 01                	mov    DWORD PTR [ecx],eax
c0020ba6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ba9:	b8 00 00 00 00       	mov    eax,0x0
c0020bae:	c3                   	ret    
c0020baf:	90                   	nop

c0020bb0 <FAT::stat(void*, unsigned long long*)>:
c0020bb0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bb5:	75 06                	jne    c0020bbd <FAT::stat(void*, unsigned long long*)+0xd>
c0020bb7:	b8 04 00 00 00       	mov    eax,0x4
c0020bbc:	c3                   	ret    
c0020bbd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bc2:	75 06                	jne    c0020bca <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bc4:	b8 04 00 00 00       	mov    eax,0x4
c0020bc9:	c3                   	ret    
c0020bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020bd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bd8:	89 01                	mov    DWORD PTR [ecx],eax
c0020bda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bdd:	b8 00 00 00 00       	mov    eax,0x0
c0020be2:	c3                   	ret    
c0020be3:	90                   	nop

c0020be4 <FAT::~FAT()>:
c0020be4:	83 ec 0c             	sub    esp,0xc
c0020be7:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0020bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf0:	89 10                	mov    DWORD PTR [eax],edx
c0020bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	50                   	push   eax
c0020bfa:	e8 03 26 ff ff       	call   c0013202 <Filesystem::~Filesystem()>
c0020bff:	83 c4 10             	add    esp,0x10
c0020c02:	90                   	nop
c0020c03:	83 c4 0c             	add    esp,0xc
c0020c06:	c3                   	ret    
c0020c07:	90                   	nop

c0020c08 <FAT::~FAT()>:
c0020c08:	83 ec 0c             	sub    esp,0xc
c0020c0b:	83 ec 0c             	sub    esp,0xc
c0020c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c12:	e8 cd ff ff ff       	call   c0020be4 <FAT::~FAT()>
c0020c17:	83 c4 10             	add    esp,0x10
c0020c1a:	83 ec 08             	sub    esp,0x8
c0020c1d:	6a 08                	push   0x8
c0020c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c23:	e8 cb 21 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0020c28:	83 c4 10             	add    esp,0x10
c0020c2b:	83 c4 0c             	add    esp,0xc
c0020c2e:	c3                   	ret    
c0020c2f:	90                   	nop

c0020c30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c30:	83 ec 1c             	sub    esp,0x1c
c0020c33:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c3a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c43:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020c4a:	83 f8 ff             	cmp    eax,0xffffffff
c0020c4d:	75 34                	jne    c0020c83 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c53:	88 c2                	mov    dl,al
c0020c55:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020c5a:	01 d0                	add    eax,edx
c0020c5c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c60:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020c66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c6a:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020c71:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020c76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c7a:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020c81:	eb 17                	jmp    c0020c9a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c87:	88 c2                	mov    dl,al
c0020c89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c8d:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020c94:	01 d0                	add    eax,edx
c0020c96:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c9a:	83 ec 04             	sub    esp,0x4
c0020c9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ca5:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020ca9:	50                   	push   eax
c0020caa:	e8 99 60 fe ff       	call   c0006d48 <f_getlabel>
c0020caf:	83 c4 10             	add    esp,0x10
c0020cb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cbb:	75 07                	jne    c0020cc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020cbd:	b8 00 00 00 00       	mov    eax,0x0
c0020cc2:	eb 05                	jmp    c0020cc9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cc4:	b8 01 00 00 00       	mov    eax,0x1
c0020cc9:	83 c4 1c             	add    esp,0x1c
c0020ccc:	c3                   	ret    
c0020ccd:	90                   	nop

c0020cce <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020cce:	57                   	push   edi
c0020ccf:	83 ec 58             	sub    esp,0x58
c0020cd2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020cda:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020cde:	b9 0f 00 00 00       	mov    ecx,0xf
c0020ce3:	b8 00 00 00 00       	mov    eax,0x0
c0020ce8:	fc                   	cld    
c0020ce9:	89 d7                	mov    edi,edx
c0020ceb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ced:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020cf1:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020cf8:	83 f8 ff             	cmp    eax,0xffffffff
c0020cfb:	75 34                	jne    c0020d31 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020cfd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d01:	88 c2                	mov    dl,al
c0020d03:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020d08:	01 d0                	add    eax,edx
c0020d0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d0e:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020d14:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d18:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020d1f:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020d24:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d28:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020d2f:	eb 17                	jmp    c0020d48 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d31:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d35:	88 c2                	mov    dl,al
c0020d37:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d3b:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020d42:	01 d0                	add    eax,edx
c0020d44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d48:	83 ec 08             	sub    esp,0x8
c0020d4b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d53:	50                   	push   eax
c0020d54:	e8 2b fc fd ff       	call   c0000984 <strcat>
c0020d59:	83 c4 10             	add    esp,0x10
c0020d5c:	83 ec 0c             	sub    esp,0xc
c0020d5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d63:	50                   	push   eax
c0020d64:	e8 cd 61 fe ff       	call   c0006f36 <f_setlabel>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d70:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020d75:	75 07                	jne    c0020d7e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020d77:	b8 00 00 00 00       	mov    eax,0x0
c0020d7c:	eb 05                	jmp    c0020d83 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	83 c4 58             	add    esp,0x58
c0020d86:	5f                   	pop    edi
c0020d87:	c3                   	ret    

c0020d88 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d88:	83 ec 2c             	sub    esp,0x2c
c0020d8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020d93:	83 ec 08             	sub    esp,0x8
c0020d96:	68 10 d2 02 c0       	push   0xc002d210
c0020d9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d9f:	e8 2c fb fd ff       	call   c00008d0 <strcmp>
c0020da4:	83 c4 10             	add    esp,0x10
c0020da7:	85 c0                	test   eax,eax
c0020da9:	0f 94 c0             	sete   al
c0020dac:	84 c0                	test   al,al
c0020dae:	74 0d                	je     c0020dbd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020db0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020db8:	e9 a6 00 00 00       	jmp    c0020e63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dbd:	83 ec 08             	sub    esp,0x8
c0020dc0:	68 02 d2 02 c0       	push   0xc002d202
c0020dc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dc9:	e8 02 fb fd ff       	call   c00008d0 <strcmp>
c0020dce:	83 c4 10             	add    esp,0x10
c0020dd1:	85 c0                	test   eax,eax
c0020dd3:	0f 94 c0             	sete   al
c0020dd6:	84 c0                	test   al,al
c0020dd8:	74 0a                	je     c0020de4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020dda:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020de2:	eb 7f                	jmp    c0020e63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020de4:	83 ec 08             	sub    esp,0x8
c0020de7:	68 08 d2 02 c0       	push   0xc002d208
c0020dec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020df0:	e8 db fa fd ff       	call   c00008d0 <strcmp>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	85 c0                	test   eax,eax
c0020dfa:	0f 94 c0             	sete   al
c0020dfd:	84 c0                	test   al,al
c0020dff:	74 0a                	je     c0020e0b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e01:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e09:	eb 58                	jmp    c0020e63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e0b:	83 ec 08             	sub    esp,0x8
c0020e0e:	68 4c 9d 02 c0       	push   0xc0029d4c
c0020e13:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e17:	e8 b4 fa fd ff       	call   c00008d0 <strcmp>
c0020e1c:	83 c4 10             	add    esp,0x10
c0020e1f:	85 c0                	test   eax,eax
c0020e21:	0f 94 c0             	sete   al
c0020e24:	84 c0                	test   al,al
c0020e26:	74 0a                	je     c0020e32 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e28:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e30:	eb 31                	jmp    c0020e63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e32:	83 ec 08             	sub    esp,0x8
c0020e35:	68 0e d2 02 c0       	push   0xc002d20e
c0020e3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e3e:	e8 8d fa fd ff       	call   c00008d0 <strcmp>
c0020e43:	83 c4 10             	add    esp,0x10
c0020e46:	85 c0                	test   eax,eax
c0020e48:	0f 94 c0             	sete   al
c0020e4b:	84 c0                	test   al,al
c0020e4d:	74 0a                	je     c0020e59 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e4f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e57:	eb 0a                	jmp    c0020e63 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e59:	b8 08 00 00 00       	mov    eax,0x8
c0020e5e:	e9 04 01 00 00       	jmp    c0020f67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e63:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e6a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e73:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020e7a:	83 f8 ff             	cmp    eax,0xffffffff
c0020e7d:	75 34                	jne    c0020eb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020e7f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e83:	88 c2                	mov    dl,al
c0020e85:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020e8a:	01 d0                	add    eax,edx
c0020e8c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e90:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9a:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020ea1:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020ea6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020eaa:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020eb1:	eb 17                	jmp    c0020eca <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020eb3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020eb7:	88 c2                	mov    dl,al
c0020eb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ebd:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020ec4:	01 d0                	add    eax,edx
c0020ec6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020eca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ece:	88 04 24             	mov    BYTE PTR [esp],al
c0020ed1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020ed5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ed9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020ee1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020ee6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020eee:	83 ec 0c             	sub    esp,0xc
c0020ef1:	68 00 20 00 00       	push   0x2000
c0020ef6:	e8 21 ea fe ff       	call   c000f91c <malloc>
c0020efb:	83 c4 10             	add    esp,0x10
c0020efe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f02:	68 00 20 00 00       	push   0x2000
c0020f07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f0b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f0f:	50                   	push   eax
c0020f10:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f14:	50                   	push   eax
c0020f15:	e8 67 64 fe ff       	call   c0007381 <f_mkfs>
c0020f1a:	83 c4 10             	add    esp,0x10
c0020f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f26:	75 07                	jne    c0020f2f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f28:	b8 00 00 00 00       	mov    eax,0x0
c0020f2d:	eb 38                	jmp    c0020f67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f2f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f34:	75 17                	jne    c0020f4d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f36:	83 ec 0c             	sub    esp,0xc
c0020f39:	68 4c d2 02 c0       	push   0xc002d24c
c0020f3e:	e8 90 1f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0020f43:	83 c4 10             	add    esp,0x10
c0020f46:	b8 09 00 00 00       	mov    eax,0x9
c0020f4b:	eb 1a                	jmp    c0020f67 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f51:	83 ec 08             	sub    esp,0x8
c0020f54:	50                   	push   eax
c0020f55:	68 14 d2 02 c0       	push   0xc002d214
c0020f5a:	e8 74 1f ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0020f5f:	83 c4 10             	add    esp,0x10
c0020f62:	b8 01 00 00 00       	mov    eax,0x1
c0020f67:	83 c4 2c             	add    esp,0x2c
c0020f6a:	c3                   	ret    
c0020f6b:	90                   	nop

c0020f6c <FAT::tryMount(LogicalDisk*, int)>:
c0020f6c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f72:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020f77:	83 f8 14             	cmp    eax,0x14
c0020f7a:	75 17                	jne    c0020f93 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020f7c:	83 ec 0c             	sub    esp,0xc
c0020f7f:	68 26 d2 02 c0       	push   0xc002d226
c0020f84:	e8 06 99 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0020f89:	83 c4 10             	add    esp,0x10
c0020f8c:	b0 00                	mov    al,0x0
c0020f8e:	e9 d7 01 00 00       	jmp    c002116a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f93:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020f9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fa0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fa6:	3d 00 02 00 00       	cmp    eax,0x200
c0020fab:	74 07                	je     c0020fb4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fad:	b0 00                	mov    al,0x0
c0020faf:	e9 b6 01 00 00       	jmp    c002116a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fb4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fbc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fc3:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020fca:	83 f8 ff             	cmp    eax,0xffffffff
c0020fcd:	74 07                	je     c0020fd6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020fcf:	b0 01                	mov    al,0x1
c0020fd1:	e9 94 01 00 00       	jmp    c002116a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fd6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020fe0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020fe8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020fef:	88 c2                	mov    dl,al
c0020ff1:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020ff6:	01 d0                	add    eax,edx
c0020ff8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020fff:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0021005:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002100c:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0021013:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0021018:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002101f:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0021026:	83 ec 0c             	sub    esp,0xc
c0021029:	68 54 02 00 00       	push   0x254
c002102e:	e8 e9 e8 fe ff       	call   c000f91c <malloc>
c0021033:	83 c4 10             	add    esp,0x10
c0021036:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002103d:	83 ec 04             	sub    esp,0x4
c0021040:	6a 00                	push   0x0
c0021042:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021049:	50                   	push   eax
c002104a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021051:	e8 e9 3e fe ff       	call   c0004f3f <f_mount>
c0021056:	83 c4 10             	add    esp,0x10
c0021059:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021060:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021068:	74 19                	je     c0021083 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002106a:	83 ec 0c             	sub    esp,0xc
c002106d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021074:	e8 c3 e8 fe ff       	call   c000f93c <rfree>
c0021079:	83 c4 10             	add    esp,0x10
c002107c:	b0 00                	mov    al,0x0
c002107e:	e9 e7 00 00 00       	jmp    c002116a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021083:	83 ec 04             	sub    esp,0x4
c0021086:	68 00 01 00 00       	push   0x100
c002108b:	6a 00                	push   0x0
c002108d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021094:	50                   	push   eax
c0021095:	e8 ee f6 fd ff       	call   c0000788 <memset>
c002109a:	83 c4 10             	add    esp,0x10
c002109d:	83 ec 08             	sub    esp,0x8
c00210a0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210a7:	50                   	push   eax
c00210a8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210af:	50                   	push   eax
c00210b0:	e8 cf f8 fd ff       	call   c0000984 <strcat>
c00210b5:	83 c4 10             	add    esp,0x10
c00210b8:	83 ec 08             	sub    esp,0x8
c00210bb:	68 34 d2 02 c0       	push   0xc002d234
c00210c0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210c7:	50                   	push   eax
c00210c8:	e8 b7 f8 fd ff       	call   c0000984 <strcat>
c00210cd:	83 c4 10             	add    esp,0x10
c00210d0:	83 ec 04             	sub    esp,0x4
c00210d3:	6a 01                	push   0x1
c00210d5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00210dc:	50                   	push   eax
c00210dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210e1:	50                   	push   eax
c00210e2:	e8 ba 3e fe ff       	call   c0004fa1 <f_open>
c00210e7:	83 c4 10             	add    esp,0x10
c00210ea:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210f1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00210f8:	85 c0                	test   eax,eax
c00210fa:	74 0a                	je     c0021106 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00210fc:	78 2d                	js     c002112b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00210fe:	83 e8 04             	sub    eax,0x4
c0021101:	83 f8 01             	cmp    eax,0x1
c0021104:	77 25                	ja     c002112b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021106:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002110e:	83 ec 0c             	sub    esp,0xc
c0021111:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021115:	50                   	push   eax
c0021116:	e8 d8 49 fe ff       	call   c0005af3 <f_close>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	90                   	nop
c002111f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021127:	74 3a                	je     c0021163 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021129:	eb 2d                	jmp    c0021158 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002112b:	83 ec 0c             	sub    esp,0xc
c002112e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021135:	e8 02 e8 fe ff       	call   c000f93c <rfree>
c002113a:	83 c4 10             	add    esp,0x10
c002113d:	83 ec 04             	sub    esp,0x4
c0021140:	6a 00                	push   0x0
c0021142:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021149:	50                   	push   eax
c002114a:	6a 00                	push   0x0
c002114c:	e8 ee 3d fe ff       	call   c0004f3f <f_mount>
c0021151:	83 c4 10             	add    esp,0x10
c0021154:	b0 00                	mov    al,0x0
c0021156:	eb 12                	jmp    c002116a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021158:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c002115d:	40                   	inc    eax
c002115e:	a3 60 24 03 c0       	mov    ds:0xc0032460,eax
c0021163:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002116a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021170:	c3                   	ret    
c0021171:	90                   	nop

c0021172 <FAT::getFileFirstSector(char const*)>:
c0021172:	53                   	push   ebx
c0021173:	83 ec 28             	sub    esp,0x28
c0021176:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002117e:	83 ec 0c             	sub    esp,0xc
c0021181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021185:	e8 92 e7 fe ff       	call   c000f91c <malloc>
c002118a:	83 c4 10             	add    esp,0x10
c002118d:	89 c3                	mov    ebx,eax
c002118f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0021194:	83 ec 04             	sub    esp,0x4
c0021197:	50                   	push   eax
c0021198:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002119c:	53                   	push   ebx
c002119d:	e8 90 22 ff ff       	call   c0013432 <File::File(char const*, Process*)>
c00211a2:	83 c4 10             	add    esp,0x10
c00211a5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211a9:	83 ec 08             	sub    esp,0x8
c00211ac:	6a 01                	push   0x1
c00211ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211b2:	e8 df 22 ff ff       	call   c0013496 <File::open(FileOpenMode)>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211be:	8b 00                	mov    eax,DWORD PTR [eax]
c00211c0:	83 c0 0c             	add    eax,0xc
c00211c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00211c5:	83 ec 0c             	sub    esp,0xc
c00211c8:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211cc:	52                   	push   edx
c00211cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211d1:	52                   	push   edx
c00211d2:	6a 00                	push   0x0
c00211d4:	6a 04                	push   0x4
c00211d6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00211da:	ff d0                	call   eax
c00211dc:	83 c4 20             	add    esp,0x20
c00211df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211e3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00211e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211f1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00211f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00211f7:	83 ec 04             	sub    esp,0x4
c00211fa:	52                   	push   edx
c00211fb:	50                   	push   eax
c00211fc:	68 3f d2 02 c0       	push   0xc002d23f
c0021201:	e8 cd 1c ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002120d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021210:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021213:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021217:	83 ec 0c             	sub    esp,0xc
c002121a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002121e:	e8 d1 22 ff ff       	call   c00134f4 <File::close()>
c0021223:	83 c4 10             	add    esp,0x10
c0021226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002122a:	ba 00 00 00 00       	mov    edx,0x0
c002122f:	83 c4 28             	add    esp,0x28
c0021232:	5b                   	pop    ebx
c0021233:	c3                   	ret    

c0021234 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021234:	81 ec 3c 02 00 00    	sub    esp,0x23c
c002123a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0021242:	74 0a                	je     c002124e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0021244:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c002124c:	75 0a                	jne    c0021258 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c002124e:	b8 04 00 00 00       	mov    eax,0x4
c0021253:	e9 db 00 00 00       	jmp    c0021333 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021258:	83 ec 08             	sub    esp,0x8
c002125b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021262:	50                   	push   eax
c0021263:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c002126a:	e8 8e 4e fe ff       	call   c00060fd <f_readdir>
c002126f:	83 c4 10             	add    esp,0x10
c0021272:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0021279:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002127f:	83 ec 0c             	sub    esp,0xc
c0021282:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021289:	83 c0 1a             	add    eax,0x1a
c002128c:	50                   	push   eax
c002128d:	e8 12 f5 fd ff       	call   c00007a4 <strlen>
c0021292:	83 c4 10             	add    esp,0x10
c0021295:	ba 00 00 00 00       	mov    edx,0x0
c002129a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002129e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212a2:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00212a9:	0f b6 c0             	movzx  eax,al
c00212ac:	83 e0 10             	and    eax,0x10
c00212af:	74 07                	je     c00212b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00212b1:	b8 02 00 00 00       	mov    eax,0x2
c00212b6:	eb 05                	jmp    c00212bd <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00212b8:	b8 01 00 00 00       	mov    eax,0x1
c00212bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212c1:	83 ec 08             	sub    esp,0x8
c00212c4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212cb:	83 c0 1a             	add    eax,0x1a
c00212ce:	50                   	push   eax
c00212cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212d3:	83 c0 10             	add    eax,0x10
c00212d6:	50                   	push   eax
c00212d7:	e8 68 f5 fd ff       	call   c0000844 <strcpy>
c00212dc:	83 c4 10             	add    esp,0x10
c00212df:	83 ec 04             	sub    esp,0x4
c00212e2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00212e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212ed:	50                   	push   eax
c00212ee:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00212f5:	e8 6e f4 fd ff       	call   c0000768 <memcpy>
c00212fa:	83 c4 10             	add    esp,0x10
c00212fd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0021304:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002130a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0021311:	84 c0                	test   al,al
c0021313:	75 07                	jne    c002131c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0021315:	b8 07 00 00 00       	mov    eax,0x7
c002131a:	eb 17                	jmp    c0021333 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002131c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0021323:	85 c0                	test   eax,eax
c0021325:	75 07                	jne    c002132e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0021327:	b8 00 00 00 00       	mov    eax,0x0
c002132c:	eb 05                	jmp    c0021333 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002132e:	b8 01 00 00 00       	mov    eax,0x1
c0021333:	81 c4 3c 02 00 00    	add    esp,0x23c
c0021339:	c3                   	ret    

c002133a <FAT::read(void*, unsigned long, void*, int*)>:
c002133a:	83 ec 1c             	sub    esp,0x1c
c002133d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021342:	74 07                	je     c002134b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021344:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021349:	75 07                	jne    c0021352 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002134b:	b8 04 00 00 00       	mov    eax,0x4
c0021350:	eb 3d                	jmp    c002138f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021352:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021356:	50                   	push   eax
c0021357:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002135b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002135f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021363:	e8 75 40 fe ff       	call   c00053dd <f_read>
c0021368:	83 c4 10             	add    esp,0x10
c002136b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002136f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021373:	89 c2                	mov    edx,eax
c0021375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021379:	89 10                	mov    DWORD PTR [eax],edx
c002137b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002137f:	85 c0                	test   eax,eax
c0021381:	75 07                	jne    c002138a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021383:	b8 00 00 00 00       	mov    eax,0x0
c0021388:	eb 05                	jmp    c002138f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002138a:	b8 01 00 00 00       	mov    eax,0x1
c002138f:	83 c4 1c             	add    esp,0x1c
c0021392:	c3                   	ret    
c0021393:	90                   	nop

c0021394 <FAT::write(void*, unsigned long, void*, int*)>:
c0021394:	83 ec 1c             	sub    esp,0x1c
c0021397:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002139c:	74 07                	je     c00213a5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002139e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213a3:	75 07                	jne    c00213ac <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00213a5:	b8 04 00 00 00       	mov    eax,0x4
c00213aa:	eb 3d                	jmp    c00213e9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213b0:	50                   	push   eax
c00213b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213bd:	e8 9b 42 fe ff       	call   c000565d <f_write>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213cd:	89 c2                	mov    edx,eax
c00213cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213d3:	89 10                	mov    DWORD PTR [eax],edx
c00213d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213d9:	85 c0                	test   eax,eax
c00213db:	75 07                	jne    c00213e4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00213dd:	b8 00 00 00 00       	mov    eax,0x0
c00213e2:	eb 05                	jmp    c00213e9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213e4:	b8 01 00 00 00       	mov    eax,0x1
c00213e9:	83 c4 1c             	add    esp,0x1c
c00213ec:	c3                   	ret    
c00213ed:	90                   	nop

c00213ee <FAT::close(void*)>:
c00213ee:	83 ec 1c             	sub    esp,0x1c
c00213f1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213f6:	75 07                	jne    c00213ff <FAT::close(void*)+0x11>
c00213f8:	b8 04 00 00 00       	mov    eax,0x4
c00213fd:	eb 36                	jmp    c0021435 <FAT::close(void*)+0x47>
c00213ff:	83 ec 0c             	sub    esp,0xc
c0021402:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021406:	e8 e8 46 fe ff       	call   c0005af3 <f_close>
c002140b:	83 c4 10             	add    esp,0x10
c002140e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021412:	83 ec 0c             	sub    esp,0xc
c0021415:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021419:	e8 0e e5 fe ff       	call   c000f92c <free>
c002141e:	83 c4 10             	add    esp,0x10
c0021421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021425:	85 c0                	test   eax,eax
c0021427:	75 07                	jne    c0021430 <FAT::close(void*)+0x42>
c0021429:	b8 00 00 00 00       	mov    eax,0x0
c002142e:	eb 05                	jmp    c0021435 <FAT::close(void*)+0x47>
c0021430:	b8 01 00 00 00       	mov    eax,0x1
c0021435:	83 c4 1c             	add    esp,0x1c
c0021438:	c3                   	ret    
c0021439:	90                   	nop

c002143a <FAT::closeDir(void*)>:
c002143a:	83 ec 1c             	sub    esp,0x1c
c002143d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021442:	75 07                	jne    c002144b <FAT::closeDir(void*)+0x11>
c0021444:	b8 04 00 00 00       	mov    eax,0x4
c0021449:	eb 36                	jmp    c0021481 <FAT::closeDir(void*)+0x47>
c002144b:	83 ec 0c             	sub    esp,0xc
c002144e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021452:	e8 84 4c fe ff       	call   c00060db <f_closedir>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002145e:	83 ec 0c             	sub    esp,0xc
c0021461:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021465:	e8 c2 e4 fe ff       	call   c000f92c <free>
c002146a:	83 c4 10             	add    esp,0x10
c002146d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021471:	85 c0                	test   eax,eax
c0021473:	75 07                	jne    c002147c <FAT::closeDir(void*)+0x42>
c0021475:	b8 00 00 00 00       	mov    eax,0x0
c002147a:	eb 05                	jmp    c0021481 <FAT::closeDir(void*)+0x47>
c002147c:	b8 01 00 00 00       	mov    eax,0x1
c0021481:	83 c4 1c             	add    esp,0x1c
c0021484:	c3                   	ret    
c0021485:	90                   	nop

c0021486 <FAT::seek(void*, unsigned long long)>:
c0021486:	83 ec 2c             	sub    esp,0x2c
c0021489:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002148d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021491:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021495:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021499:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002149e:	75 07                	jne    c00214a7 <FAT::seek(void*, unsigned long long)+0x21>
c00214a0:	b8 04 00 00 00       	mov    eax,0x4
c00214a5:	eb 2f                	jmp    c00214d6 <FAT::seek(void*, unsigned long long)+0x50>
c00214a7:	83 ec 04             	sub    esp,0x4
c00214aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214b6:	e8 67 46 fe ff       	call   c0005b22 <f_lseek>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214c6:	85 c0                	test   eax,eax
c00214c8:	75 07                	jne    c00214d1 <FAT::seek(void*, unsigned long long)+0x4b>
c00214ca:	b8 00 00 00 00       	mov    eax,0x0
c00214cf:	eb 05                	jmp    c00214d6 <FAT::seek(void*, unsigned long long)+0x50>
c00214d1:	b8 01 00 00 00       	mov    eax,0x1
c00214d6:	83 c4 2c             	add    esp,0x2c
c00214d9:	c3                   	ret    

c00214da <fatWrapperReadDisk>:
c00214da:	83 ec 1c             	sub    esp,0x1c
c00214dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00214e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00214e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00214ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214f9:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0021500:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021504:	83 ec 0c             	sub    esp,0xc
c0021507:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002150b:	52                   	push   edx
c002150c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021510:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021514:	50                   	push   eax
c0021515:	e8 44 53 ff ff       	call   c001685e <LogicalDisk::read(unsigned long long, int, void*)>
c002151a:	83 c4 20             	add    esp,0x20
c002151d:	83 c4 1c             	add    esp,0x1c
c0021520:	c3                   	ret    

c0021521 <fatWrapperWriteDisk>:
c0021521:	83 ec 1c             	sub    esp,0x1c
c0021524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021528:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002152c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021530:	89 04 24             	mov    DWORD PTR [esp],eax
c0021533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002153b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021540:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0021547:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002154b:	83 ec 0c             	sub    esp,0xc
c002154e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021552:	52                   	push   edx
c0021553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002155b:	50                   	push   eax
c002155c:	e8 69 53 ff ff       	call   c00168ca <LogicalDisk::write(unsigned long long, int, void*)>
c0021561:	83 c4 20             	add    esp,0x20
c0021564:	83 c4 1c             	add    esp,0x1c
c0021567:	c3                   	ret    

c0021568 <fatWrapperIoctl>:
c0021568:	53                   	push   ebx
c0021569:	83 ec 28             	sub    esp,0x28
c002156c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021570:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021574:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021578:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002157c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021581:	75 31                	jne    c00215b4 <fatWrapperIoctl+0x4c>
c0021583:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021587:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002158b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021590:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0021597:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002159d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215a7:	66 89 02             	mov    WORD PTR [edx],ax
c00215aa:	b8 00 00 00 00       	mov    eax,0x0
c00215af:	e9 b2 00 00 00       	jmp    c0021666 <fatWrapperIoctl+0xfe>
c00215b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00215b9:	75 6a                	jne    c0021625 <fatWrapperIoctl+0xbd>
c00215bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215c8:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00215cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215d5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00215db:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00215e1:	89 c8                	mov    eax,ecx
c00215e3:	89 da                	mov    edx,ebx
c00215e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00215e9:	c1 e0 0a             	shl    eax,0xa
c00215ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00215f1:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00215f8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00215fe:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021604:	89 cb                	mov    ebx,ecx
c0021606:	c1 fb 1f             	sar    ebx,0x1f
c0021609:	53                   	push   ebx
c002160a:	51                   	push   ecx
c002160b:	52                   	push   edx
c002160c:	50                   	push   eax
c002160d:	e8 92 5b 00 00       	call   c00271a4 <__udivdi3>
c0021612:	83 c4 10             	add    esp,0x10
c0021615:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021619:	89 01                	mov    DWORD PTR [ecx],eax
c002161b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002161e:	b8 00 00 00 00       	mov    eax,0x0
c0021623:	eb 41                	jmp    c0021666 <fatWrapperIoctl+0xfe>
c0021625:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002162a:	75 07                	jne    c0021633 <fatWrapperIoctl+0xcb>
c002162c:	b8 00 00 00 00       	mov    eax,0x0
c0021631:	eb 33                	jmp    c0021666 <fatWrapperIoctl+0xfe>
c0021633:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021638:	75 19                	jne    c0021653 <fatWrapperIoctl+0xeb>
c002163a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002163e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021646:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002164c:	b8 00 00 00 00       	mov    eax,0x0
c0021651:	eb 13                	jmp    c0021666 <fatWrapperIoctl+0xfe>
c0021653:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021658:	75 07                	jne    c0021661 <fatWrapperIoctl+0xf9>
c002165a:	b8 00 00 00 00       	mov    eax,0x0
c002165f:	eb 05                	jmp    c0021666 <fatWrapperIoctl+0xfe>
c0021661:	b8 04 00 00 00       	mov    eax,0x4
c0021666:	83 c4 28             	add    esp,0x28
c0021669:	5b                   	pop    ebx
c002166a:	c3                   	ret    
c002166b:	90                   	nop

c002166c <FAT::FAT()>:
c002166c:	83 ec 1c             	sub    esp,0x1c
c002166f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021673:	83 ec 0c             	sub    esp,0xc
c0021676:	50                   	push   eax
c0021677:	e8 62 1b ff ff       	call   c00131de <Filesystem::Filesystem()>
c002167c:	83 c4 10             	add    esp,0x10
c002167f:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0021684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021688:	89 10                	mov    DWORD PTR [eax],edx
c002168a:	c7 05 60 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032460,0x0
c0021694:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002169c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00216a1:	7f 15                	jg     c00216b8 <FAT::FAT()+0x4c>
c00216a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a7:	c7 04 85 80 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb80],0xffffffff
c00216b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216b6:	eb e4                	jmp    c002169c <FAT::FAT()+0x30>
c00216b8:	90                   	nop
c00216b9:	83 c4 1c             	add    esp,0x1c
c00216bc:	c3                   	ret    
c00216bd:	90                   	nop

c00216be <FAT::fixFilepath(char*)>:
c00216be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216c2:	8a 00                	mov    al,BYTE PTR [eax]
c00216c4:	3c 40                	cmp    al,0x40
c00216c6:	7e 2c                	jle    c00216f4 <FAT::fixFilepath(char*)+0x36>
c00216c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216cc:	8a 00                	mov    al,BYTE PTR [eax]
c00216ce:	83 e8 41             	sub    eax,0x41
c00216d1:	88 c2                	mov    dl,al
c00216d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216d7:	88 10                	mov    BYTE PTR [eax],dl
c00216d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216dd:	8a 00                	mov    al,BYTE PTR [eax]
c00216df:	0f be c0             	movsx  eax,al
c00216e2:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00216e9:	83 c0 30             	add    eax,0x30
c00216ec:	88 c2                	mov    dl,al
c00216ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216f2:	88 10                	mov    BYTE PTR [eax],dl
c00216f4:	90                   	nop
c00216f5:	c3                   	ret    

c00216f6 <FAT::open(char const*, void**, FileOpenMode)>:
c00216f6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216fc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021704:	74 0a                	je     c0021710 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021706:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002170e:	75 0a                	jne    c002171a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021710:	b8 04 00 00 00       	mov    eax,0x4
c0021715:	e9 fd 00 00 00       	jmp    c0021817 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002171a:	83 ec 08             	sub    esp,0x8
c002171d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021724:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021728:	50                   	push   eax
c0021729:	e8 16 f1 fd ff       	call   c0000844 <strcpy>
c002172e:	83 c4 10             	add    esp,0x10
c0021731:	83 ec 08             	sub    esp,0x8
c0021734:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021738:	50                   	push   eax
c0021739:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021740:	e8 79 ff ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021745:	83 c4 10             	add    esp,0x10
c0021748:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021750:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021757:	83 e0 01             	and    eax,0x1
c002175a:	74 08                	je     c0021764 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002175c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021764:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002176b:	83 e0 04             	and    eax,0x4
c002176e:	74 10                	je     c0021780 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021770:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021778:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021780:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021787:	83 e0 02             	and    eax,0x2
c002178a:	74 08                	je     c0021794 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002178c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021794:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002179b:	83 e0 08             	and    eax,0x8
c002179e:	74 08                	je     c00217a8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00217a0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217af:	83 e0 10             	and    eax,0x10
c00217b2:	74 08                	je     c00217bc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00217b4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	68 50 02 00 00       	push   0x250
c00217c4:	e8 53 e1 fe ff       	call   c000f91c <malloc>
c00217c9:	83 c4 10             	add    esp,0x10
c00217cc:	89 c2                	mov    edx,eax
c00217ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217d5:	89 10                	mov    DWORD PTR [eax],edx
c00217d7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00217df:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00217e8:	83 ec 04             	sub    esp,0x4
c00217eb:	52                   	push   edx
c00217ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c00217f0:	52                   	push   edx
c00217f1:	50                   	push   eax
c00217f2:	e8 aa 37 fe ff       	call   c0004fa1 <f_open>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021801:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021809:	74 07                	je     c0021812 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002180b:	b8 01 00 00 00       	mov    eax,0x1
c0021810:	eb 05                	jmp    c0021817 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021812:	b8 00 00 00 00       	mov    eax,0x0
c0021817:	81 c4 1c 01 00 00    	add    esp,0x11c
c002181d:	c3                   	ret    

c002181e <FAT::openDir(char const*, void**)>:
c002181e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021824:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002182c:	74 0a                	je     c0021838 <FAT::openDir(char const*, void**)+0x1a>
c002182e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021836:	75 07                	jne    c002183f <FAT::openDir(char const*, void**)+0x21>
c0021838:	b8 04 00 00 00       	mov    eax,0x4
c002183d:	eb 7d                	jmp    c00218bc <FAT::openDir(char const*, void**)+0x9e>
c002183f:	83 ec 08             	sub    esp,0x8
c0021842:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021849:	8d 44 24 18          	lea    eax,[esp+0x18]
c002184d:	50                   	push   eax
c002184e:	e8 f1 ef fd ff       	call   c0000844 <strcpy>
c0021853:	83 c4 10             	add    esp,0x10
c0021856:	83 ec 08             	sub    esp,0x8
c0021859:	8d 44 24 14          	lea    eax,[esp+0x14]
c002185d:	50                   	push   eax
c002185e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021865:	e8 54 fe ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c002186a:	83 c4 10             	add    esp,0x10
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	6a 4c                	push   0x4c
c0021872:	e8 a5 e0 fe ff       	call   c000f91c <malloc>
c0021877:	83 c4 10             	add    esp,0x10
c002187a:	89 c2                	mov    edx,eax
c002187c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021883:	89 10                	mov    DWORD PTR [eax],edx
c0021885:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002188c:	8b 00                	mov    eax,DWORD PTR [eax]
c002188e:	83 ec 08             	sub    esp,0x8
c0021891:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021895:	52                   	push   edx
c0021896:	50                   	push   eax
c0021897:	e8 3d 47 fe ff       	call   c0005fd9 <f_opendir>
c002189c:	83 c4 10             	add    esp,0x10
c002189f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218a6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00218ae:	74 07                	je     c00218b7 <FAT::openDir(char const*, void**)+0x99>
c00218b0:	b8 01 00 00 00       	mov    eax,0x1
c00218b5:	eb 05                	jmp    c00218bc <FAT::openDir(char const*, void**)+0x9e>
c00218b7:	b8 00 00 00 00       	mov    eax,0x0
c00218bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218c2:	c3                   	ret    
c00218c3:	90                   	nop

c00218c4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00218c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00218ca:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00218d2:	75 0a                	jne    c00218de <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00218d4:	b8 04 00 00 00       	mov    eax,0x4
c00218d9:	e9 c9 00 00 00       	jmp    c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218de:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00218e6:	75 0a                	jne    c00218f2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00218e8:	b8 04 00 00 00       	mov    eax,0x4
c00218ed:	e9 b5 00 00 00       	jmp    c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218f2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00218fa:	75 0a                	jne    c0021906 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00218fc:	b8 04 00 00 00       	mov    eax,0x4
c0021901:	e9 a1 00 00 00       	jmp    c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021906:	83 ec 08             	sub    esp,0x8
c0021909:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021910:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021917:	50                   	push   eax
c0021918:	e8 27 ef fd ff       	call   c0000844 <strcpy>
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	83 ec 08             	sub    esp,0x8
c0021923:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002192a:	50                   	push   eax
c002192b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021932:	e8 87 fd ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	83 ec 08             	sub    esp,0x8
c002193d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021941:	50                   	push   eax
c0021942:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021949:	50                   	push   eax
c002194a:	e8 49 48 fe ff       	call   c0006198 <f_stat>
c002194f:	83 c4 10             	add    esp,0x10
c0021952:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021959:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021960:	85 c0                	test   eax,eax
c0021962:	74 07                	je     c002196b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021964:	83 f8 04             	cmp    eax,0x4
c0021967:	74 32                	je     c002199b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021969:	eb 37                	jmp    c00219a2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002196b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002196f:	0f b6 c0             	movzx  eax,al
c0021972:	83 e0 10             	and    eax,0x10
c0021975:	0f 95 c2             	setne  dl
c0021978:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002197f:	88 10                	mov    BYTE PTR [eax],dl
c0021981:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021984:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021988:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002198f:	89 01                	mov    DWORD PTR [ecx],eax
c0021991:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021994:	b8 00 00 00 00       	mov    eax,0x0
c0021999:	eb 0c                	jmp    c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002199b:	b8 02 00 00 00       	mov    eax,0x2
c00219a0:	eb 05                	jmp    c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219a2:	b8 01 00 00 00       	mov    eax,0x1
c00219a7:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219ad:	c3                   	ret    

c00219ae <FAT::unlink(char const*)>:
c00219ae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219b4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219bc:	75 07                	jne    c00219c5 <FAT::unlink(char const*)+0x17>
c00219be:	b8 04 00 00 00       	mov    eax,0x4
c00219c3:	eb 5c                	jmp    c0021a21 <FAT::unlink(char const*)+0x73>
c00219c5:	83 ec 08             	sub    esp,0x8
c00219c8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219d3:	50                   	push   eax
c00219d4:	e8 6b ee fd ff       	call   c0000844 <strcpy>
c00219d9:	83 c4 10             	add    esp,0x10
c00219dc:	83 ec 08             	sub    esp,0x8
c00219df:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219e3:	50                   	push   eax
c00219e4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219eb:	e8 ce fc ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c00219f0:	83 c4 10             	add    esp,0x10
c00219f3:	83 ec 0c             	sub    esp,0xc
c00219f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219fa:	50                   	push   eax
c00219fb:	e8 ea 4a fe ff       	call   c00064ea <f_unlink>
c0021a00:	83 c4 10             	add    esp,0x10
c0021a03:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a0a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a11:	85 c0                	test   eax,eax
c0021a13:	75 07                	jne    c0021a1c <FAT::unlink(char const*)+0x6e>
c0021a15:	b8 00 00 00 00       	mov    eax,0x0
c0021a1a:	eb 05                	jmp    c0021a21 <FAT::unlink(char const*)+0x73>
c0021a1c:	b8 01 00 00 00       	mov    eax,0x1
c0021a21:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a27:	c3                   	ret    

c0021a28 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a28:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a2e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a35:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a3c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a44:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021a4c:	75 0a                	jne    c0021a58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021a4e:	b8 04 00 00 00       	mov    eax,0x4
c0021a53:	e9 1c 01 00 00       	jmp    c0021b74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a58:	83 ec 08             	sub    esp,0x8
c0021a5b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a66:	50                   	push   eax
c0021a67:	e8 d8 ed fd ff       	call   c0000844 <strcpy>
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	83 ec 08             	sub    esp,0x8
c0021a72:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021a76:	50                   	push   eax
c0021a77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a7e:	e8 3b fc ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021a83:	83 c4 10             	add    esp,0x10
c0021a86:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021a8e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021a96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a9b:	83 e0 01             	and    eax,0x1
c0021a9e:	74 08                	je     c0021aa8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021aa0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021aa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021aad:	83 e0 02             	and    eax,0x2
c0021ab0:	74 08                	je     c0021aba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021ab2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021aba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021abf:	83 e0 04             	and    eax,0x4
c0021ac2:	74 08                	je     c0021acc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021ac4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021acc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ad1:	83 e0 08             	and    eax,0x8
c0021ad4:	74 08                	je     c0021ade <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021ad6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021ade:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021ae3:	83 e0 01             	and    eax,0x1
c0021ae6:	74 08                	je     c0021af0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021ae8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021af0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021af5:	83 e0 02             	and    eax,0x2
c0021af8:	74 08                	je     c0021b02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021afa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b02:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b07:	83 e0 04             	and    eax,0x4
c0021b0a:	74 08                	je     c0021b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b0c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b19:	83 e0 08             	and    eax,0x8
c0021b1c:	74 08                	je     c0021b26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b1e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b2d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b34:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b3c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b44:	83 ec 04             	sub    esp,0x4
c0021b47:	52                   	push   edx
c0021b48:	50                   	push   eax
c0021b49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b4d:	50                   	push   eax
c0021b4e:	e8 39 50 fe ff       	call   c0006b8c <f_chmod>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021b5d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021b64:	85 c0                	test   eax,eax
c0021b66:	75 07                	jne    c0021b6f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021b68:	b8 00 00 00 00       	mov    eax,0x0
c0021b6d:	eb 05                	jmp    c0021b74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b6f:	b8 01 00 00 00       	mov    eax,0x1
c0021b74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021b7a:	c3                   	ret    
c0021b7b:	90                   	nop

c0021b7c <FAT::rename(char const*, char const*)>:
c0021b7c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021b82:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021b8a:	74 0a                	je     c0021b96 <FAT::rename(char const*, char const*)+0x1a>
c0021b8c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021b94:	75 0a                	jne    c0021ba0 <FAT::rename(char const*, char const*)+0x24>
c0021b96:	b8 04 00 00 00       	mov    eax,0x4
c0021b9b:	e9 98 00 00 00       	jmp    c0021c38 <FAT::rename(char const*, char const*)+0xbc>
c0021ba0:	83 ec 08             	sub    esp,0x8
c0021ba3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021baa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021bb1:	50                   	push   eax
c0021bb2:	e8 8d ec fd ff       	call   c0000844 <strcpy>
c0021bb7:	83 c4 10             	add    esp,0x10
c0021bba:	83 ec 08             	sub    esp,0x8
c0021bbd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021bc4:	50                   	push   eax
c0021bc5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bcc:	e8 ed fa ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021bd1:	83 c4 10             	add    esp,0x10
c0021bd4:	83 ec 08             	sub    esp,0x8
c0021bd7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021bde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021be2:	50                   	push   eax
c0021be3:	e8 5c ec fd ff       	call   c0000844 <strcpy>
c0021be8:	83 c4 10             	add    esp,0x10
c0021beb:	83 ec 08             	sub    esp,0x8
c0021bee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021bf2:	50                   	push   eax
c0021bf3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bfa:	e8 bf fa ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021bff:	83 c4 10             	add    esp,0x10
c0021c02:	83 ec 08             	sub    esp,0x8
c0021c05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c09:	50                   	push   eax
c0021c0a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c11:	50                   	push   eax
c0021c12:	e8 82 4c fe ff       	call   c0006899 <f_rename>
c0021c17:	83 c4 10             	add    esp,0x10
c0021c1a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c21:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c28:	85 c0                	test   eax,eax
c0021c2a:	75 07                	jne    c0021c33 <FAT::rename(char const*, char const*)+0xb7>
c0021c2c:	b8 00 00 00 00       	mov    eax,0x0
c0021c31:	eb 05                	jmp    c0021c38 <FAT::rename(char const*, char const*)+0xbc>
c0021c33:	b8 01 00 00 00       	mov    eax,0x1
c0021c38:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c3e:	c3                   	ret    
c0021c3f:	90                   	nop

c0021c40 <FAT::mkdir(char const*)>:
c0021c40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c4e:	75 07                	jne    c0021c57 <FAT::mkdir(char const*)+0x17>
c0021c50:	b8 04 00 00 00       	mov    eax,0x4
c0021c55:	eb 5c                	jmp    c0021cb3 <FAT::mkdir(char const*)+0x73>
c0021c57:	83 ec 08             	sub    esp,0x8
c0021c5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c65:	50                   	push   eax
c0021c66:	e8 d9 eb fd ff       	call   c0000844 <strcpy>
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	83 ec 08             	sub    esp,0x8
c0021c71:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c75:	50                   	push   eax
c0021c76:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c7d:	e8 3c fa ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	83 ec 0c             	sub    esp,0xc
c0021c88:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c8c:	50                   	push   eax
c0021c8d:	e8 db 49 fe ff       	call   c000666d <f_mkdir>
c0021c92:	83 c4 10             	add    esp,0x10
c0021c95:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c9c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ca3:	85 c0                	test   eax,eax
c0021ca5:	75 07                	jne    c0021cae <FAT::mkdir(char const*)+0x6e>
c0021ca7:	b8 00 00 00 00       	mov    eax,0x0
c0021cac:	eb 05                	jmp    c0021cb3 <FAT::mkdir(char const*)+0x73>
c0021cae:	b8 01 00 00 00       	mov    eax,0x1
c0021cb3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021cb9:	c3                   	ret    

c0021cba <FAT::exists(char const*)>:
c0021cba:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021cc0:	83 ec 08             	sub    esp,0x8
c0021cc3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cce:	50                   	push   eax
c0021ccf:	e8 70 eb fd ff       	call   c0000844 <strcpy>
c0021cd4:	83 c4 10             	add    esp,0x10
c0021cd7:	83 ec 08             	sub    esp,0x8
c0021cda:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cde:	50                   	push   eax
c0021cdf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021ce6:	e8 d3 f9 ff ff       	call   c00216be <FAT::fixFilepath(char*)>
c0021ceb:	83 c4 10             	add    esp,0x10
c0021cee:	83 ec 08             	sub    esp,0x8
c0021cf1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021cf8:	50                   	push   eax
c0021cf9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cfd:	50                   	push   eax
c0021cfe:	e8 95 44 fe ff       	call   c0006198 <f_stat>
c0021d03:	83 c4 10             	add    esp,0x10
c0021d06:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d0d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d14:	85 c0                	test   eax,eax
c0021d16:	75 04                	jne    c0021d1c <FAT::exists(char const*)+0x62>
c0021d18:	b0 01                	mov    al,0x1
c0021d1a:	eb 02                	jmp    c0021d1e <FAT::exists(char const*)+0x64>
c0021d1c:	b0 00                	mov    al,0x0
c0021d1e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d24:	c3                   	ret    
c0021d25:	90                   	nop

c0021d26 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d26:	b8 08 00 00 00       	mov    eax,0x8
c0021d2b:	c3                   	ret    

c0021d2c <ISO9660::seek(void*, unsigned long long)>:
c0021d2c:	53                   	push   ebx
c0021d2d:	b8 04 00 00 00       	mov    eax,0x4
c0021d32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d3e:	85 d2                	test   edx,edx
c0021d40:	74 17                	je     c0021d59 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d42:	89 c8                	mov    eax,ecx
c0021d44:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d47:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d4a:	b8 01 00 00 00       	mov    eax,0x1
c0021d4f:	73 08                	jae    c0021d59 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d51:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021d54:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021d57:	31 c0                	xor    eax,eax
c0021d59:	5b                   	pop    ebx
c0021d5a:	c3                   	ret    
c0021d5b:	90                   	nop

c0021d5c <ISO9660::tell(void*, unsigned long long*)>:
c0021d5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d64:	85 d2                	test   edx,edx
c0021d66:	74 12                	je     c0021d7a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d68:	85 c0                	test   eax,eax
c0021d6a:	74 0e                	je     c0021d7a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d6c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021d6f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021d72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d75:	89 10                	mov    DWORD PTR [eax],edx
c0021d77:	31 c0                	xor    eax,eax
c0021d79:	c3                   	ret    
c0021d7a:	b8 04 00 00 00       	mov    eax,0x4
c0021d7f:	c3                   	ret    

c0021d80 <ISO9660::getName()>:
c0021d80:	b8 dc d2 02 c0       	mov    eax,0xc002d2dc
c0021d85:	c3                   	ret    

c0021d86 <ISO9660::stat(void*, unsigned long long*)>:
c0021d86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d8e:	85 d2                	test   edx,edx
c0021d90:	74 12                	je     c0021da4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d92:	85 c0                	test   eax,eax
c0021d94:	74 0e                	je     c0021da4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d96:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021d99:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021d9c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d9f:	89 10                	mov    DWORD PTR [eax],edx
c0021da1:	31 c0                	xor    eax,eax
c0021da3:	c3                   	ret    
c0021da4:	b8 04 00 00 00       	mov    eax,0x4
c0021da9:	c3                   	ret    

c0021daa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021daa:	b8 01 00 00 00       	mov    eax,0x1
c0021daf:	c3                   	ret    

c0021db0 <ISO9660::unlink(char const*)>:
c0021db0:	b8 01 00 00 00       	mov    eax,0x1
c0021db5:	c3                   	ret    

c0021db6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021db6:	b8 01 00 00 00       	mov    eax,0x1
c0021dbb:	c3                   	ret    

c0021dbc <ISO9660::rename(char const*, char const*)>:
c0021dbc:	b8 01 00 00 00       	mov    eax,0x1
c0021dc1:	c3                   	ret    

c0021dc2 <ISO9660::mkdir(char const*)>:
c0021dc2:	b8 01 00 00 00       	mov    eax,0x1
c0021dc7:	c3                   	ret    

c0021dc8 <ISO9660::close(void*)>:
c0021dc8:	83 ec 0c             	sub    esp,0xc
c0021dcb:	b8 04 00 00 00       	mov    eax,0x4
c0021dd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dd4:	85 d2                	test   edx,edx
c0021dd6:	74 0e                	je     c0021de6 <ISO9660::close(void*)+0x1e>
c0021dd8:	83 ec 0c             	sub    esp,0xc
c0021ddb:	52                   	push   edx
c0021ddc:	e8 4b db fe ff       	call   c000f92c <free>
c0021de1:	83 c4 10             	add    esp,0x10
c0021de4:	31 c0                	xor    eax,eax
c0021de6:	83 c4 0c             	add    esp,0xc
c0021de9:	c3                   	ret    

c0021dea <ISO9660::closeDir(void*)>:
c0021dea:	83 ec 0c             	sub    esp,0xc
c0021ded:	b8 04 00 00 00       	mov    eax,0x4
c0021df2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021df6:	85 d2                	test   edx,edx
c0021df8:	74 0e                	je     c0021e08 <ISO9660::closeDir(void*)+0x1e>
c0021dfa:	83 ec 0c             	sub    esp,0xc
c0021dfd:	52                   	push   edx
c0021dfe:	e8 29 db fe ff       	call   c000f92c <free>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	31 c0                	xor    eax,eax
c0021e08:	83 c4 0c             	add    esp,0xc
c0021e0b:	c3                   	ret    

c0021e0c <ISO9660::~ISO9660()>:
c0021e0c:	83 ec 0c             	sub    esp,0xc
c0021e0f:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c0021e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e18:	89 10                	mov    DWORD PTR [eax],edx
c0021e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1e:	83 ec 0c             	sub    esp,0xc
c0021e21:	50                   	push   eax
c0021e22:	e8 db 13 ff ff       	call   c0013202 <Filesystem::~Filesystem()>
c0021e27:	83 c4 10             	add    esp,0x10
c0021e2a:	90                   	nop
c0021e2b:	83 c4 0c             	add    esp,0xc
c0021e2e:	c3                   	ret    
c0021e2f:	90                   	nop

c0021e30 <ISO9660::~ISO9660()>:
c0021e30:	83 ec 0c             	sub    esp,0xc
c0021e33:	83 ec 0c             	sub    esp,0xc
c0021e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e3a:	e8 cd ff ff ff       	call   c0021e0c <ISO9660::~ISO9660()>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	83 ec 08             	sub    esp,0x8
c0021e45:	6a 08                	push   0x8
c0021e47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e4b:	e8 a3 0f ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0021e50:	83 c4 10             	add    esp,0x10
c0021e53:	83 c4 0c             	add    esp,0xc
c0021e56:	c3                   	ret    

c0021e57 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021e57:	55                   	push   ebp
c0021e58:	31 c9                	xor    ecx,ecx
c0021e5a:	57                   	push   edi
c0021e5b:	56                   	push   esi
c0021e5c:	53                   	push   ebx
c0021e5d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021e61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021e65:	89 eb                	mov    ebx,ebp
c0021e67:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021e6b:	39 ce                	cmp    esi,ecx
c0021e6d:	7e 17                	jle    c0021e86 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021e6f:	31 d2                	xor    edx,edx
c0021e71:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021e75:	7d 13                	jge    c0021e8a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021e77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e7b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e7e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021e81:	75 0d                	jne    c0021e90 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021e83:	42                   	inc    edx
c0021e84:	eb eb                	jmp    c0021e71 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021e86:	31 c0                	xor    eax,eax
c0021e88:	eb 0a                	jmp    c0021e94 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e8a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021e8e:	eb 04                	jmp    c0021e94 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e90:	41                   	inc    ecx
c0021e91:	43                   	inc    ebx
c0021e92:	eb d7                	jmp    c0021e6b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021e94:	5b                   	pop    ebx
c0021e95:	5e                   	pop    esi
c0021e96:	5f                   	pop    edi
c0021e97:	5d                   	pop    ebp
c0021e98:	c3                   	ret    

c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021e99:	56                   	push   esi
c0021e9a:	53                   	push   ebx
c0021e9b:	52                   	push   edx
c0021e9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ea0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ea8:	39 0d 60 25 03 c0    	cmp    DWORD PTR ds:0xc0032560,ecx
c0021eae:	75 08                	jne    c0021eb8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021eb0:	38 05 b4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3b4,al
c0021eb6:	74 2b                	je     c0021ee3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021eb8:	83 ec 0c             	sub    esp,0xc
c0021ebb:	a2 b4 e3 02 c0       	mov    ds:0xc002e3b4,al
c0021ec0:	68 80 25 03 c0       	push   0xc0032580
c0021ec5:	0f be c0             	movsx  eax,al
c0021ec8:	6a 01                	push   0x1
c0021eca:	89 0d 60 25 03 c0    	mov    DWORD PTR ds:0xc0032560,ecx
c0021ed0:	31 db                	xor    ebx,ebx
c0021ed2:	53                   	push   ebx
c0021ed3:	51                   	push   ecx
c0021ed4:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0021edb:	e8 7e 49 ff ff       	call   c001685e <LogicalDisk::read(unsigned long long, int, void*)>
c0021ee0:	83 c4 20             	add    esp,0x20
c0021ee3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021eeb:	c7 44 24 14 80 25 03 c0 	mov    DWORD PTR [esp+0x14],0xc0032580
c0021ef3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021ef7:	58                   	pop    eax
c0021ef8:	5b                   	pop    ebx
c0021ef9:	5e                   	pop    esi
c0021efa:	e9 69 e8 fd ff       	jmp    c0000768 <memcpy>
c0021eff:	90                   	nop

c0021f00 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f00:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f06:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f0d:	83 c0 41             	add    eax,0x41
c0021f10:	0f be c0             	movsx  eax,al
c0021f13:	50                   	push   eax
c0021f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f18:	50                   	push   eax
c0021f19:	6a 10                	push   0x10
c0021f1b:	e8 79 ff ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f20:	83 c4 10             	add    esp,0x10
c0021f23:	31 c0                	xor    eax,eax
c0021f25:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f2a:	75 1d                	jne    c0021f49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f2c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f31:	75 16                	jne    c0021f49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f33:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f38:	75 0f                	jne    c0021f49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f3a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f3f:	75 08                	jne    c0021f49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f41:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f46:	0f 94 c0             	sete   al
c0021f49:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f4f:	c3                   	ret    

c0021f50 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f50:	55                   	push   ebp
c0021f51:	57                   	push   edi
c0021f52:	56                   	push   esi
c0021f53:	53                   	push   ebx
c0021f54:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021f5a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021f61:	85 ed                	test   ebp,ebp
c0021f63:	0f 84 d6 01 00 00    	je     c002213f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f69:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021f71:	0f 84 c8 01 00 00    	je     c002213f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f77:	b8 01 00 00 00       	mov    eax,0x1
c0021f7c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021f80:	0f 85 be 01 00 00    	jne    c0022144 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021f86:	31 d2                	xor    edx,edx
c0021f88:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021f8f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f92:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021f95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f99:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f9f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fa3:	01 f0                	add    eax,esi
c0021fa5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021fa8:	11 fa                	adc    edx,edi
c0021faa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021fae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021fb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021fb6:	19 d1                	sbb    ecx,edx
c0021fb8:	72 0a                	jb     c0021fc4 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021fba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fc2:	eb 13                	jmp    c0021fd7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021fc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fcc:	29 f0                	sub    eax,esi
c0021fce:	19 fa                	sbb    edx,edi
c0021fd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fd3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021fda:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021fdd:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021fe1:	51                   	push   ecx
c0021fe2:	c1 e0 0b             	shl    eax,0xb
c0021fe5:	01 c6                	add    esi,eax
c0021fe7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021feb:	11 d7                	adc    edi,edx
c0021fed:	50                   	push   eax
c0021fee:	89 fa                	mov    edx,edi
c0021ff0:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021ff4:	89 f0                	mov    eax,esi
c0021ff6:	53                   	push   ebx
c0021ff7:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021ffb:	50                   	push   eax
c0021ffc:	e8 98 fe ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022001:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022005:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022008:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002200c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022012:	83 c4 10             	add    esp,0x10
c0022015:	b8 00 08 00 00       	mov    eax,0x800
c002201a:	29 d0                	sub    eax,edx
c002201c:	39 c1                	cmp    ecx,eax
c002201e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0022022:	83 d9 00             	sbb    ecx,0x0
c0022025:	7d 1c                	jge    c0022043 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0022027:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002202c:	75 12                	jne    c0022040 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002202e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022035:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002203b:	e9 fb 00 00 00       	jmp    c002213b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0022040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022043:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0022046:	31 d2                	xor    edx,edx
c0022048:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002204c:	39 c2                	cmp    edx,eax
c002204e:	7d 14                	jge    c0022064 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0022050:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022057:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002205b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002205e:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0022061:	42                   	inc    edx
c0022062:	eb e8                	jmp    c002204c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0022064:	89 c3                	mov    ebx,eax
c0022066:	85 c0                	test   eax,eax
c0022068:	79 02                	jns    c002206c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002206a:	31 db                	xor    ebx,ebx
c002206c:	99                   	cdq    
c002206d:	01 c3                	add    ebx,eax
c002206f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0022076:	01 c6                	add    esi,eax
c0022078:	11 d7                	adc    edi,edx
c002207a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002207e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022082:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022085:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022089:	29 c6                	sub    esi,eax
c002208b:	19 d7                	sbb    edi,edx
c002208d:	89 34 24             	mov    DWORD PTR [esp],esi
c0022090:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022094:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022099:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002209c:	b8 00 00 00 00       	mov    eax,0x0
c00220a1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00220a5:	7d 3e                	jge    c00220e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00220a7:	52                   	push   edx
c00220a8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220ac:	50                   	push   eax
c00220ad:	53                   	push   ebx
c00220ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220b6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220ba:	50                   	push   eax
c00220bb:	e8 d9 fd ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220c0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00220c8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00220cd:	81 c3 00 08 00 00    	add    ebx,0x800
c00220d3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00220db:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00220e0:	83 c4 10             	add    esp,0x10
c00220e3:	eb af                	jmp    c0022094 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00220e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00220ec:	74 32                	je     c0022120 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00220ee:	50                   	push   eax
c00220ef:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220f3:	50                   	push   eax
c00220f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00220f8:	50                   	push   eax
c00220f9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00220fd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022101:	0f ac fe 0b          	shrd   esi,edi,0xb
c0022105:	56                   	push   esi
c0022106:	e8 8e fd ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002210b:	83 c4 0c             	add    esp,0xc
c002210e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0022112:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022116:	50                   	push   eax
c0022117:	53                   	push   ebx
c0022118:	e8 4b e6 fd ff       	call   c0000768 <memcpy>
c002211d:	83 c4 10             	add    esp,0x10
c0022120:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022127:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002212b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002212f:	89 38                	mov    DWORD PTR [eax],edi
c0022131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022135:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022138:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002213b:	31 c0                	xor    eax,eax
c002213d:	eb 05                	jmp    c0022144 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002213f:	b8 04 00 00 00       	mov    eax,0x4
c0022144:	81 c4 2c 08 00 00    	add    esp,0x82c
c002214a:	5b                   	pop    ebx
c002214b:	5e                   	pop    esi
c002214c:	5f                   	pop    edi
c002214d:	5d                   	pop    ebp
c002214e:	c3                   	ret    
c002214f:	90                   	nop

c0022150 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022150:	55                   	push   ebp
c0022151:	57                   	push   edi
c0022152:	56                   	push   esi
c0022153:	53                   	push   ebx
c0022154:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002215a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0022161:	85 f6                	test   esi,esi
c0022163:	0f 84 64 02 00 00    	je     c00223cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022169:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022171:	0f 84 56 02 00 00    	je     c00223cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022177:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002217a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002217d:	75 0a                	jne    c0022189 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002217f:	b8 07 00 00 00       	mov    eax,0x7
c0022184:	e9 49 02 00 00       	jmp    c00223d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0022189:	50                   	push   eax
c002218a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002218e:	50                   	push   eax
c002218f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022196:	53                   	push   ebx
c0022197:	8b 06                	mov    eax,DWORD PTR [esi]
c0022199:	c1 e0 0b             	shl    eax,0xb
c002219c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002219f:	c1 e8 0b             	shr    eax,0xb
c00221a2:	50                   	push   eax
c00221a3:	e8 f1 fc ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00221ab:	83 c4 10             	add    esp,0x10
c00221ae:	89 c1                	mov    ecx,eax
c00221b0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00221b3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00221b9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00221bc:	84 db                	test   bl,bl
c00221be:	0f 85 90 00 00 00    	jne    c0022254 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00221c4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00221ca:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00221d0:	29 c7                	sub    edi,eax
c00221d2:	89 fb                	mov    ebx,edi
c00221d4:	c1 fb 1f             	sar    ebx,0x1f
c00221d7:	01 f8                	add    eax,edi
c00221d9:	11 da                	adc    edx,ebx
c00221db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00221e6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00221e9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00221ec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00221ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00221f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221f6:	89 d8                	mov    eax,ebx
c00221f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00221fb:	ba 00 00 00 00       	mov    edx,0x0
c0022200:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022204:	b8 00 00 00 00       	mov    eax,0x0
c0022209:	73 0b                	jae    c0022216 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c002220b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002220e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022212:	29 f8                	sub    eax,edi
c0022214:	19 da                	sbb    edx,ebx
c0022216:	89 d3                	mov    ebx,edx
c0022218:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002221b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002221e:	09 c3                	or     ebx,eax
c0022220:	0f 84 59 ff ff ff    	je     c002217f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022226:	55                   	push   ebp
c0022227:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002222b:	50                   	push   eax
c002222c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022233:	53                   	push   ebx
c0022234:	8b 06                	mov    eax,DWORD PTR [esi]
c0022236:	c1 e0 0b             	shl    eax,0xb
c0022239:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002223d:	c1 e8 0b             	shr    eax,0xb
c0022240:	50                   	push   eax
c0022241:	e8 53 fc ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022246:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022249:	83 c4 10             	add    esp,0x10
c002224c:	25 ff 07 00 00       	and    eax,0x7ff
c0022251:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022254:	57                   	push   edi
c0022255:	6a 28                	push   0x28
c0022257:	6a 00                	push   0x0
c0022259:	8d 44 24 24          	lea    eax,[esp+0x24]
c002225d:	50                   	push   eax
c002225e:	e8 25 e5 fd ff       	call   c0000788 <memset>
c0022263:	31 d2                	xor    edx,edx
c0022265:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022268:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002226e:	89 f8                	mov    eax,edi
c0022270:	83 c0 21             	add    eax,0x21
c0022273:	83 d2 00             	adc    edx,0x0
c0022276:	89 c7                	mov    edi,eax
c0022278:	89 d5                	mov    ebp,edx
c002227a:	83 c4 10             	add    esp,0x10
c002227d:	31 c9                	xor    ecx,ecx
c002227f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0022286:	83 f9 28             	cmp    ecx,0x28
c0022289:	88 04 24             	mov    BYTE PTR [esp],al
c002228c:	0f 94 c2             	sete   dl
c002228f:	88 d0                	mov    al,dl
c0022291:	ba ff 07 00 00       	mov    edx,0x7ff
c0022296:	39 fa                	cmp    edx,edi
c0022298:	ba 00 00 00 00       	mov    edx,0x0
c002229d:	19 ea                	sbb    edx,ebp
c002229f:	0f 92 c2             	setb   dl
c00222a2:	09 c2                	or     edx,eax
c00222a4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222a8:	0f 94 c0             	sete   al
c00222ab:	08 d0                	or     al,dl
c00222ad:	75 16                	jne    c00222c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222af:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222b3:	74 10                	je     c00222c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222b5:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222b8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222bc:	41                   	inc    ecx
c00222bd:	83 c7 01             	add    edi,0x1
c00222c0:	83 d5 00             	adc    ebp,0x0
c00222c3:	eb ba                	jmp    c002227f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00222c5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00222cc:	83 ec 0c             	sub    esp,0xc
c00222cf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00222d3:	57                   	push   edi
c00222d4:	e8 cb e4 fd ff       	call   c00007a4 <strlen>
c00222d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00222e1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00222e5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00222ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00222ef:	5a                   	pop    edx
c00222f0:	25 ff 07 00 00       	and    eax,0x7ff
c00222f5:	01 c8                	add    eax,ecx
c00222f7:	59                   	pop    ecx
c00222f8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00222fe:	83 e0 02             	and    eax,0x2
c0022301:	3c 01                	cmp    al,0x1
c0022303:	19 c0                	sbb    eax,eax
c0022305:	83 c0 02             	add    eax,0x2
c0022308:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002230c:	57                   	push   edi
c002230d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022311:	50                   	push   eax
c0022312:	e8 2d e5 fd ff       	call   c0000844 <strcpy>
c0022317:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002231b:	83 c4 10             	add    esp,0x10
c002231e:	84 c0                	test   al,al
c0022320:	75 21                	jne    c0022343 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0022322:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002232a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022332:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002233a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022341:	eb 28                	jmp    c002236b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0022343:	fe c8                	dec    al
c0022345:	75 24                	jne    c002236b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0022347:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002234f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022357:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002235f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022366:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002236b:	0f b6 fb             	movzx  edi,bl
c002236e:	31 db                	xor    ebx,ebx
c0022370:	50                   	push   eax
c0022371:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0022378:	8d 44 24 48          	lea    eax,[esp+0x48]
c002237c:	50                   	push   eax
c002237d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0022384:	e8 df e3 fd ff       	call   c0000768 <memcpy>
c0022389:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0022390:	89 f9                	mov    ecx,edi
c0022392:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022398:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c002239b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002239e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00223a1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00223a4:	83 c4 10             	add    esp,0x10
c00223a7:	39 c7                	cmp    edi,eax
c00223a9:	89 df                	mov    edi,ebx
c00223ab:	19 d7                	sbb    edi,edx
c00223ad:	72 10                	jb     c00223bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223af:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00223b6:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00223bd:	eb 0a                	jmp    c00223c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00223bf:	29 c8                	sub    eax,ecx
c00223c1:	19 da                	sbb    edx,ebx
c00223c3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00223c6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00223c9:	31 c0                	xor    eax,eax
c00223cb:	eb 05                	jmp    c00223d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00223cd:	b8 04 00 00 00       	mov    eax,0x4
c00223d2:	81 c4 5c 09 00 00    	add    esp,0x95c
c00223d8:	5b                   	pop    ebx
c00223d9:	5e                   	pop    esi
c00223da:	5f                   	pop    edi
c00223db:	5d                   	pop    ebp
c00223dc:	c3                   	ret    

c00223dd <readRoot(unsigned int*, unsigned int*, char)>:
c00223dd:	81 ec 40 08 00 00    	sub    esp,0x840
c00223e3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00223eb:	50                   	push   eax
c00223ec:	8d 44 24 38          	lea    eax,[esp+0x38]
c00223f0:	50                   	push   eax
c00223f1:	6a 10                	push   0x10
c00223f3:	e8 a1 fa ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223f8:	83 c4 0c             	add    esp,0xc
c00223fb:	6a 22                	push   0x22
c00223fd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0022404:	50                   	push   eax
c0022405:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022409:	50                   	push   eax
c002240a:	e8 59 e3 fd ff       	call   c0000768 <memcpy>
c002240f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022416:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002241a:	89 10                	mov    DWORD PTR [eax],edx
c002241c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022423:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022427:	89 10                	mov    DWORD PTR [eax],edx
c0022429:	b0 01                	mov    al,0x1
c002242b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0022431:	c3                   	ret    

c0022432 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022432:	55                   	push   ebp
c0022433:	57                   	push   edi
c0022434:	56                   	push   esi
c0022435:	53                   	push   ebx
c0022436:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002243c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022443:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002244a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002244e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022452:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022456:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002245a:	75 03                	jne    c002245f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002245c:	83 c3 02             	add    ebx,0x2
c002245f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022462:	75 03                	jne    c0022467 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022464:	43                   	inc    ebx
c0022465:	eb f8                	jmp    c002245f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022467:	51                   	push   ecx
c0022468:	68 00 01 00 00       	push   0x100
c002246d:	6a 00                	push   0x0
c002246f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022473:	50                   	push   eax
c0022474:	e8 0f e3 fd ff       	call   c0000788 <memset>
c0022479:	83 c4 10             	add    esp,0x10
c002247c:	31 d2                	xor    edx,edx
c002247e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022481:	84 c0                	test   al,al
c0022483:	74 21                	je     c00224a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022485:	3c 2f                	cmp    al,0x2f
c0022487:	75 0b                	jne    c0022494 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022489:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002248d:	bd 01 00 00 00       	mov    ebp,0x1
c0022492:	eb 14                	jmp    c00224a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022494:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022497:	80 f9 19             	cmp    cl,0x19
c002249a:	77 03                	ja     c002249f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002249c:	83 e8 20             	sub    eax,0x20
c002249f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00224a3:	42                   	inc    edx
c00224a4:	eb d8                	jmp    c002247e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00224a6:	31 ed                	xor    ebp,ebp
c00224a8:	83 ec 0c             	sub    esp,0xc
c00224ab:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224b2:	e8 65 d4 fe ff       	call   c000f91c <malloc>
c00224b7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224be:	89 c6                	mov    esi,eax
c00224c0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224c6:	c1 ef 0b             	shr    edi,0xb
c00224c9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00224d0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00224d4:	83 c4 10             	add    esp,0x10
c00224d7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00224dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224e0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00224e7:	74 28                	je     c0022511 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00224e9:	52                   	push   edx
c00224ea:	57                   	push   edi
c00224eb:	50                   	push   eax
c00224ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224f0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00224f7:	e8 9d f9 ff ff       	call   c0021e99 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022500:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022507:	05 00 08 00 00       	add    eax,0x800
c002250c:	83 c4 10             	add    esp,0x10
c002250f:	eb cb                	jmp    c00224dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022511:	83 ec 0c             	sub    esp,0xc
c0022514:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022518:	57                   	push   edi
c0022519:	e8 86 e2 fd ff       	call   c00007a4 <strlen>
c002251e:	50                   	push   eax
c002251f:	57                   	push   edi
c0022520:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022527:	56                   	push   esi
c0022528:	e8 2a f9 ff ff       	call   c0021e57 <__memmem(unsigned char*, int, unsigned char*, int)>
c002252d:	83 c4 20             	add    esp,0x20
c0022530:	85 c0                	test   eax,eax
c0022532:	75 13                	jne    c0022547 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022534:	83 ec 0c             	sub    esp,0xc
c0022537:	56                   	push   esi
c0022538:	e8 ef d3 fe ff       	call   c000f92c <free>
c002253d:	83 c4 10             	add    esp,0x10
c0022540:	31 c0                	xor    eax,eax
c0022542:	e9 b3 00 00 00       	jmp    c00225fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022547:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002254b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002254f:	c1 e7 08             	shl    edi,0x8
c0022552:	c1 e2 10             	shl    edx,0x10
c0022555:	09 d7                	or     edi,edx
c0022557:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002255b:	09 d7                	or     edi,edx
c002255d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022561:	c1 e2 18             	shl    edx,0x18
c0022564:	09 d7                	or     edi,edx
c0022566:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002256a:	89 d1                	mov    ecx,edx
c002256c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022570:	c1 e1 08             	shl    ecx,0x8
c0022573:	c1 e2 10             	shl    edx,0x10
c0022576:	09 ca                	or     edx,ecx
c0022578:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002257c:	09 ca                	or     edx,ecx
c002257e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022582:	c1 e1 18             	shl    ecx,0x18
c0022585:	09 ca                	or     edx,ecx
c0022587:	89 e9                	mov    ecx,ebp
c0022589:	84 c9                	test   cl,cl
c002258b:	74 3c                	je     c00225c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002258d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022591:	83 ec 0c             	sub    esp,0xc
c0022594:	56                   	push   esi
c0022595:	e8 92 d3 fe ff       	call   c000f92c <free>
c002259a:	83 c4 0c             	add    esp,0xc
c002259d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225a4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225a9:	50                   	push   eax
c00225aa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225b1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225bc:	52                   	push   edx
c00225bd:	57                   	push   edi
c00225be:	53                   	push   ebx
c00225bf:	e8 6e fe ff ff       	call   c0022432 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225c4:	83 c4 20             	add    esp,0x20
c00225c7:	eb 31                	jmp    c00225fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225c9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00225cc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00225d3:	d0 e8                	shr    al,1
c00225d5:	89 3b                	mov    DWORD PTR [ebx],edi
c00225d7:	83 e0 01             	and    eax,0x1
c00225da:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00225e1:	83 ec 0c             	sub    esp,0xc
c00225e4:	89 13                	mov    DWORD PTR [ebx],edx
c00225e6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00225ed:	89 03                	mov    DWORD PTR [ebx],eax
c00225ef:	56                   	push   esi
c00225f0:	e8 37 d3 fe ff       	call   c000f92c <free>
c00225f5:	83 c4 10             	add    esp,0x10
c00225f8:	b0 01                	mov    al,0x1
c00225fa:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022600:	5b                   	pop    ebx
c0022601:	5e                   	pop    esi
c0022602:	5f                   	pop    edi
c0022603:	5d                   	pop    ebp
c0022604:	c3                   	ret    

c0022605 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022605:	55                   	push   ebp
c0022606:	57                   	push   edi
c0022607:	56                   	push   esi
c0022608:	53                   	push   ebx
c0022609:	83 ec 20             	sub    esp,0x20
c002260c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022610:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022614:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022620:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022628:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002262d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022633:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022639:	57                   	push   edi
c002263a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002263e:	50                   	push   eax
c002263f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022643:	50                   	push   eax
c0022644:	e8 94 fd ff ff       	call   c00223dd <readRoot(unsigned int*, unsigned int*, char)>
c0022649:	5a                   	pop    edx
c002264a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002264e:	e8 51 e1 fd ff       	call   c00007a4 <strlen>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 f8 03             	cmp    eax,0x3
c0022659:	77 17                	ja     c0022672 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002265b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002265f:	89 03                	mov    DWORD PTR [ebx],eax
c0022661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022665:	89 06                	mov    DWORD PTR [esi],eax
c0022667:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002266e:	b0 01                	mov    al,0x1
c0022670:	eb 19                	jmp    c002268b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022672:	50                   	push   eax
c0022673:	55                   	push   ebp
c0022674:	57                   	push   edi
c0022675:	56                   	push   esi
c0022676:	53                   	push   ebx
c0022677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002267b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002267f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022683:	e8 aa fd ff ff       	call   c0022432 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022688:	83 c4 20             	add    esp,0x20
c002268b:	83 c4 1c             	add    esp,0x1c
c002268e:	5b                   	pop    ebx
c002268f:	5e                   	pop    esi
c0022690:	5f                   	pop    edi
c0022691:	5d                   	pop    ebp
c0022692:	c3                   	ret    
c0022693:	90                   	nop

c0022694 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022694:	57                   	push   edi
c0022695:	56                   	push   esi
c0022696:	53                   	push   ebx
c0022697:	83 ec 10             	sub    esp,0x10
c002269a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002269e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226a2:	85 ff                	test   edi,edi
c00226a4:	0f 84 9d 00 00 00    	je     c0022747 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226aa:	85 f6                	test   esi,esi
c00226ac:	0f 84 95 00 00 00    	je     c0022747 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226b2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226b7:	74 17                	je     c00226d0 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226b9:	83 ec 0c             	sub    esp,0xc
c00226bc:	68 f7 d2 02 c0       	push   0xc002d2f7
c00226c1:	e8 0d 08 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00226c6:	83 c4 10             	add    esp,0x10
c00226c9:	b8 03 00 00 00       	mov    eax,0x3
c00226ce:	eb 7c                	jmp    c002274c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	6a 1c                	push   0x1c
c00226d5:	e8 42 d2 fe ff       	call   c000f91c <malloc>
c00226da:	89 07                	mov    DWORD PTR [edi],eax
c00226dc:	89 c3                	mov    ebx,eax
c00226de:	58                   	pop    eax
c00226df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00226e3:	50                   	push   eax
c00226e4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00226e7:	50                   	push   eax
c00226e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226ec:	50                   	push   eax
c00226ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226f1:	50                   	push   eax
c00226f2:	56                   	push   esi
c00226f3:	e8 0d ff ff ff       	call   c0022605 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00226f8:	83 c4 20             	add    esp,0x20
c00226fb:	84 c0                	test   al,al
c00226fd:	74 07                	je     c0022706 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00226ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022704:	74 0b                	je     c0022711 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022706:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002270a:	b8 01 00 00 00       	mov    eax,0x1
c002270f:	eb 3b                	jmp    c002274c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022715:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022719:	89 03                	mov    DWORD PTR [ebx],eax
c002271b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022722:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022726:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002272d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022734:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022737:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002273e:	8a 06                	mov    al,BYTE PTR [esi]
c0022740:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022743:	31 c0                	xor    eax,eax
c0022745:	eb 05                	jmp    c002274c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022747:	b8 04 00 00 00       	mov    eax,0x4
c002274c:	83 c4 10             	add    esp,0x10
c002274f:	5b                   	pop    ebx
c0022750:	5e                   	pop    esi
c0022751:	5f                   	pop    edi
c0022752:	c3                   	ret    
c0022753:	90                   	nop

c0022754 <ISO9660::exists(char const*)>:
c0022754:	83 ec 28             	sub    esp,0x28
c0022757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002275b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002275f:	52                   	push   edx
c0022760:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022763:	52                   	push   edx
c0022764:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022768:	52                   	push   edx
c0022769:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002276d:	52                   	push   edx
c002276e:	50                   	push   eax
c002276f:	e8 91 fe ff ff       	call   c0022605 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022774:	83 c4 3c             	add    esp,0x3c
c0022777:	c3                   	ret    

c0022778 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022778:	56                   	push   esi
c0022779:	53                   	push   ebx
c002277a:	83 ec 14             	sub    esp,0x14
c002277d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022781:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022785:	85 db                	test   ebx,ebx
c0022787:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002278b:	0f 94 c2             	sete   dl
c002278e:	85 f6                	test   esi,esi
c0022790:	0f 94 c0             	sete   al
c0022793:	08 c2                	or     dl,al
c0022795:	75 68                	jne    c00227ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022797:	85 c9                	test   ecx,ecx
c0022799:	74 64                	je     c00227ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002279b:	83 ec 0c             	sub    esp,0xc
c002279e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227a5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227b2:	50                   	push   eax
c00227b3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227b6:	50                   	push   eax
c00227b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227bb:	50                   	push   eax
c00227bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227c0:	50                   	push   eax
c00227c1:	51                   	push   ecx
c00227c2:	e8 3e fe ff ff       	call   c0022605 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227c7:	83 c4 20             	add    esp,0x20
c00227ca:	ba 01 00 00 00       	mov    edx,0x1
c00227cf:	84 c0                	test   al,al
c00227d1:	74 31                	je     c0022804 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227de:	89 03                	mov    DWORD PTR [ebx],eax
c00227e0:	ba 00 00 00 00       	mov    edx,0x0
c00227e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227e9:	85 c0                	test   eax,eax
c00227eb:	0f 95 06             	setne  BYTE PTR [esi]
c00227ee:	74 14                	je     c0022804 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227f6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227fd:	eb 05                	jmp    c0022804 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227ff:	ba 04 00 00 00       	mov    edx,0x4
c0022804:	83 c4 14             	add    esp,0x14
c0022807:	89 d0                	mov    eax,edx
c0022809:	5b                   	pop    ebx
c002280a:	5e                   	pop    esi
c002280b:	c3                   	ret    

c002280c <ISO9660::openDir(char const*, void**)>:
c002280c:	57                   	push   edi
c002280d:	56                   	push   esi
c002280e:	53                   	push   ebx
c002280f:	83 ec 10             	sub    esp,0x10
c0022812:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022816:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002281a:	85 ff                	test   edi,edi
c002281c:	0f 84 95 00 00 00    	je     c00228b7 <ISO9660::openDir(char const*, void**)+0xab>
c0022822:	85 f6                	test   esi,esi
c0022824:	0f 84 8d 00 00 00    	je     c00228b7 <ISO9660::openDir(char const*, void**)+0xab>
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	6a 1c                	push   0x1c
c002282f:	e8 e8 d0 fe ff       	call   c000f91c <malloc>
c0022834:	89 07                	mov    DWORD PTR [edi],eax
c0022836:	89 c3                	mov    ebx,eax
c0022838:	59                   	pop    ecx
c0022839:	8d 44 24 18          	lea    eax,[esp+0x18]
c002283d:	50                   	push   eax
c002283e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022841:	50                   	push   eax
c0022842:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022846:	50                   	push   eax
c0022847:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002284b:	50                   	push   eax
c002284c:	56                   	push   esi
c002284d:	e8 b3 fd ff ff       	call   c0022605 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022852:	83 c4 20             	add    esp,0x20
c0022855:	84 c0                	test   al,al
c0022857:	74 07                	je     c0022860 <ISO9660::openDir(char const*, void**)+0x54>
c0022859:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002285e:	75 21                	jne    c0022881 <ISO9660::openDir(char const*, void**)+0x75>
c0022860:	0f b6 c0             	movzx  eax,al
c0022863:	52                   	push   edx
c0022864:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022868:	50                   	push   eax
c0022869:	68 1d d3 02 c0       	push   0xc002d31d
c002286e:	e8 60 06 ff ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0022873:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022877:	83 c4 10             	add    esp,0x10
c002287a:	b8 01 00 00 00       	mov    eax,0x1
c002287f:	eb 3b                	jmp    c00228bc <ISO9660::openDir(char const*, void**)+0xb0>
c0022881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022885:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022889:	89 03                	mov    DWORD PTR [ebx],eax
c002288b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002289d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00228a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228ae:	8a 06                	mov    al,BYTE PTR [esi]
c00228b0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228b3:	31 c0                	xor    eax,eax
c00228b5:	eb 05                	jmp    c00228bc <ISO9660::openDir(char const*, void**)+0xb0>
c00228b7:	b8 04 00 00 00       	mov    eax,0x4
c00228bc:	83 c4 10             	add    esp,0x10
c00228bf:	5b                   	pop    ebx
c00228c0:	5e                   	pop    esi
c00228c1:	5f                   	pop    edi
c00228c2:	c3                   	ret    
c00228c3:	90                   	nop

c00228c4 <ISO9660::ISO9660()>:
c00228c4:	83 ec 0c             	sub    esp,0xc
c00228c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cb:	83 ec 0c             	sub    esp,0xc
c00228ce:	50                   	push   eax
c00228cf:	e8 0a 09 ff ff       	call   c00131de <Filesystem::Filesystem()>
c00228d4:	83 c4 10             	add    esp,0x10
c00228d7:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c00228dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e0:	89 10                	mov    DWORD PTR [eax],edx
c00228e2:	90                   	nop
c00228e3:	83 c4 0c             	add    esp,0xc
c00228e6:	c3                   	ret    
c00228e7:	90                   	nop

c00228e8 <SoundChannel::~SoundChannel()>:
c00228e8:	83 ec 0c             	sub    esp,0xc
c00228eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00228f2:	83 ec 0c             	sub    esp,0xc
c00228f5:	50                   	push   eax
c00228f6:	e8 31 d0 fe ff       	call   c000f92c <free>
c00228fb:	83 c4 10             	add    esp,0x10
c00228fe:	90                   	nop
c00228ff:	83 c4 0c             	add    esp,0xc
c0022902:	c3                   	ret    
c0022903:	90                   	nop

c0022904 <SoundChannel::setSpeed(float)>:
c0022904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002290c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002290f:	c3                   	ret    

c0022910 <SoundChannel::getSpeed()>:
c0022910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022914:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022917:	c3                   	ret    

c0022918 <SoundChannel::setVolume(int)>:
c0022918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002291c:	83 f8 64             	cmp    eax,0x64
c002291f:	7e 05                	jle    c0022926 <SoundChannel::setVolume(int)+0xe>
c0022921:	b8 64 00 00 00       	mov    eax,0x64
c0022926:	85 c0                	test   eax,eax
c0022928:	79 02                	jns    c002292c <SoundChannel::setVolume(int)+0x14>
c002292a:	31 c0                	xor    eax,eax
c002292c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022930:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022933:	c3                   	ret    

c0022934 <SoundChannel::getVolume()>:
c0022934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022938:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002293b:	c3                   	ret    

c002293c <SoundChannel::pause()>:
c002293c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022940:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022944:	c3                   	ret    
c0022945:	90                   	nop

c0022946 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022946:	83 ec 1c             	sub    esp,0x1c
c0022949:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002294d:	e8 ea ff ff ff       	call   c002293c <SoundChannel::pause()>
c0022952:	83 c4 04             	add    esp,0x4
c0022955:	6a 50                	push   0x50
c0022957:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002295b:	e8 b8 ff ff ff       	call   c0022918 <SoundChannel::setVolume(int)>
c0022960:	83 c4 08             	add    esp,0x8
c0022963:	a1 bc d3 02 c0       	mov    eax,ds:0xc002d3bc
c0022968:	50                   	push   eax
c0022969:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002296d:	e8 92 ff ff ff       	call   c0022904 <SoundChannel::setSpeed(float)>
c0022972:	83 c4 08             	add    esp,0x8
c0022975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022979:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002297d:	89 10                	mov    DWORD PTR [eax],edx
c002297f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022983:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022987:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002298a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002298e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022995:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002299a:	75 23                	jne    c00229bf <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002299c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00229a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229a9:	0f af c2             	imul   eax,edx
c00229ac:	85 c0                	test   eax,eax
c00229ae:	79 03                	jns    c00229b3 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229b0:	83 c0 03             	add    eax,0x3
c00229b3:	c1 f8 02             	sar    eax,0x2
c00229b6:	05 a0 0f 00 00       	add    eax,0xfa0
c00229bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ce:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00229d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00229e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00229e7:	c1 e0 02             	shl    eax,0x2
c00229ea:	83 ec 0c             	sub    esp,0xc
c00229ed:	50                   	push   eax
c00229ee:	e8 29 cf fe ff       	call   c000f91c <malloc>
c00229f3:	83 c4 10             	add    esp,0x10
c00229f6:	89 c2                	mov    edx,eax
c00229f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00229ff:	83 ec 04             	sub    esp,0x4
c0022a02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a06:	50                   	push   eax
c0022a07:	6a 01                	push   0x1
c0022a09:	6a 04                	push   0x4
c0022a0b:	e8 9f 61 fe ff       	call   c0008baf <src_new>
c0022a10:	83 c4 10             	add    esp,0x10
c0022a13:	89 c2                	mov    edx,eax
c0022a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a20:	85 c0                	test   eax,eax
c0022a22:	74 10                	je     c0022a34 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a24:	83 ec 0c             	sub    esp,0xc
c0022a27:	68 a0 d3 02 c0       	push   0xc002d3a0
c0022a2c:	e8 5e 7e ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0022a31:	83 c4 10             	add    esp,0x10
c0022a34:	a0 80 31 03 c0       	mov    al,ds:0xc0033180
c0022a39:	83 f0 01             	xor    eax,0x1
c0022a3c:	84 c0                	test   al,al
c0022a3e:	74 57                	je     c0022a97 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a40:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c0022a45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a51:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a59:	7f 35                	jg     c0022a90 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a5b:	83 ec 0c             	sub    esp,0xc
c0022a5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a62:	e8 68 50 00 00       	call   c0027acf <__floatsisf>
c0022a67:	83 c4 10             	add    esp,0x10
c0022a6a:	8b 15 c0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3c0
c0022a70:	83 ec 08             	sub    esp,0x8
c0022a73:	52                   	push   edx
c0022a74:	50                   	push   eax
c0022a75:	e8 67 4c 00 00       	call   c00276e1 <__mulsf3>
c0022a7a:	83 c4 10             	add    esp,0x10
c0022a7d:	89 c2                	mov    edx,eax
c0022a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a83:	89 14 85 80 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd280],edx
c0022a8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022a8e:	eb c1                	jmp    c0022a51 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022a90:	c6 05 80 31 03 c0 01 	mov    BYTE PTR ds:0xc0033180,0x1
c0022a97:	90                   	nop
c0022a98:	83 c4 1c             	add    esp,0x1c
c0022a9b:	c3                   	ret    

c0022a9c <SoundChannel::play()>:
c0022a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aa0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022aa4:	c3                   	ret    
c0022aa5:	90                   	nop

c0022aa6 <SoundChannel::paused()>:
c0022aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aaa:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022aad:	c3                   	ret    

c0022aae <SoundChannel::getSampleRate()>:
c0022aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ab4:	c3                   	ret    
c0022ab5:	90                   	nop

c0022ab6 <SoundChannel::getBits()>:
c0022ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022abd:	c3                   	ret    

c0022abe <SoundChannel::getBufferUsed()>:
c0022abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022ac5:	c3                   	ret    

c0022ac6 <SoundChannel::getBufferSize()>:
c0022ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022acd:	c3                   	ret    

c0022ace <SoundChannel::unbuffer(float*, int, int)>:
c0022ace:	56                   	push   esi
c0022acf:	53                   	push   ebx
c0022ad0:	83 ec 40             	sub    esp,0x40
c0022ad3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022ad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022ada:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022ade:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022ae1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022ae5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022ae9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022aed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022af1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022af5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022af9:	e8 d1 4f 00 00       	call   c0027acf <__floatsisf>
c0022afe:	5a                   	pop    edx
c0022aff:	89 c6                	mov    esi,eax
c0022b01:	ff 33                	push   DWORD PTR [ebx]
c0022b03:	e8 c7 4f 00 00       	call   c0027acf <__floatsisf>
c0022b08:	59                   	pop    ecx
c0022b09:	5a                   	pop    edx
c0022b0a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b0d:	50                   	push   eax
c0022b0e:	e8 ce 4b 00 00       	call   c00276e1 <__mulsf3>
c0022b13:	59                   	pop    ecx
c0022b14:	5a                   	pop    edx
c0022b15:	50                   	push   eax
c0022b16:	56                   	push   esi
c0022b17:	e8 88 4d 00 00       	call   c00278a4 <__divsf3>
c0022b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b1f:	e8 7b 62 00 00       	call   c0028d9f <__extendsfdf2>
c0022b24:	59                   	pop    ecx
c0022b25:	5e                   	pop    esi
c0022b26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b2a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b2e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b3a:	50                   	push   eax
c0022b3b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b3e:	e8 61 5c fe ff       	call   c00087a4 <src_process>
c0022b43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b47:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b4a:	83 c4 0c             	add    esp,0xc
c0022b4d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b50:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b53:	29 d0                	sub    eax,edx
c0022b55:	c1 e0 02             	shl    eax,0x2
c0022b58:	50                   	push   eax
c0022b59:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b5c:	50                   	push   eax
c0022b5d:	51                   	push   ecx
c0022b5e:	e8 3d db fd ff       	call   c00006a0 <memmove>
c0022b63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b67:	83 c4 44             	add    esp,0x44
c0022b6a:	5b                   	pop    ebx
c0022b6b:	5e                   	pop    esi
c0022b6c:	c3                   	ret    
c0022b6d:	90                   	nop

c0022b6e <SoundChannel::buffer8(unsigned char*, int)>:
c0022b6e:	55                   	push   ebp
c0022b6f:	57                   	push   edi
c0022b70:	56                   	push   esi
c0022b71:	53                   	push   ebx
c0022b72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b76:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022b7a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b7d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b81:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b84:	74 7a                	je     c0022c00 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b86:	85 ff                	test   edi,edi
c0022b88:	7e 76                	jle    c0022c00 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b8a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022b8e:	8d 70 01             	lea    esi,[eax+0x1]
c0022b91:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022b94:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022b97:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022b9e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ba1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022ba4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022ba7:	74 5e                	je     c0022c07 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022ba9:	83 ff 01             	cmp    edi,0x1
c0022bac:	74 4b                	je     c0022bf9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022bae:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022bb2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bb5:	8d 70 01             	lea    esi,[eax+0x1]
c0022bb8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bbb:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022bc2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bc5:	b8 02 00 00 00       	mov    eax,0x2
c0022bca:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bcd:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bd0:	75 23                	jne    c0022bf5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022bd2:	eb 27                	jmp    c0022bfb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022bd4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022bd9:	8d 71 01             	lea    esi,[ecx+0x1]
c0022bdc:	40                   	inc    eax
c0022bdd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022be0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022be3:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022bea:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022bed:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bf0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bf3:	74 06                	je     c0022bfb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022bf5:	39 c7                	cmp    edi,eax
c0022bf7:	75 db                	jne    c0022bd4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022bf9:	89 f8                	mov    eax,edi
c0022bfb:	5b                   	pop    ebx
c0022bfc:	5e                   	pop    esi
c0022bfd:	5f                   	pop    edi
c0022bfe:	5d                   	pop    ebp
c0022bff:	c3                   	ret    
c0022c00:	5b                   	pop    ebx
c0022c01:	31 c0                	xor    eax,eax
c0022c03:	5e                   	pop    esi
c0022c04:	5f                   	pop    edi
c0022c05:	5d                   	pop    ebp
c0022c06:	c3                   	ret    
c0022c07:	b8 01 00 00 00       	mov    eax,0x1
c0022c0c:	eb ed                	jmp    c0022bfb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c0e <SoundDevice::SoundDevice(char const*)>:
c0022c0e:	83 ec 1c             	sub    esp,0x1c
c0022c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c15:	83 ec 08             	sub    esp,0x8
c0022c18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c1c:	50                   	push   eax
c0022c1d:	e8 d6 18 ff ff       	call   c00144f8 <Device::Device(char const*)>
c0022c22:	83 c4 10             	add    esp,0x10
c0022c25:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0022c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c2e:	89 10                	mov    DWORD PTR [eax],edx
c0022c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c34:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c42:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c54:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c59:	7f 19                	jg     c0022c74 <SoundDevice::SoundDevice(char const*)+0x66>
c0022c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c63:	83 c2 54             	add    edx,0x54
c0022c66:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022c6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c72:	eb e0                	jmp    c0022c54 <SoundDevice::SoundDevice(char const*)+0x46>
c0022c74:	90                   	nop
c0022c75:	83 c4 1c             	add    esp,0x1c
c0022c78:	c3                   	ret    
c0022c79:	90                   	nop

c0022c7a <SoundDevice::~SoundDevice()>:
c0022c7a:	53                   	push   ebx
c0022c7b:	83 ec 18             	sub    esp,0x18
c0022c7e:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0022c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c87:	89 10                	mov    DWORD PTR [eax],edx
c0022c89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c91:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c96:	7f 46                	jg     c0022cde <SoundDevice::~SoundDevice()+0x64>
c0022c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ca0:	83 c2 54             	add    edx,0x54
c0022ca3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022ca7:	85 c0                	test   eax,eax
c0022ca9:	74 2d                	je     c0022cd8 <SoundDevice::~SoundDevice()+0x5e>
c0022cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cb3:	83 c2 54             	add    edx,0x54
c0022cb6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022cba:	85 db                	test   ebx,ebx
c0022cbc:	74 1a                	je     c0022cd8 <SoundDevice::~SoundDevice()+0x5e>
c0022cbe:	83 ec 0c             	sub    esp,0xc
c0022cc1:	53                   	push   ebx
c0022cc2:	e8 21 fc ff ff       	call   c00228e8 <SoundChannel::~SoundChannel()>
c0022cc7:	83 c4 10             	add    esp,0x10
c0022cca:	83 ec 08             	sub    esp,0x8
c0022ccd:	6a 2c                	push   0x2c
c0022ccf:	53                   	push   ebx
c0022cd0:	e8 1e 01 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cdc:	eb b3                	jmp    c0022c91 <SoundDevice::~SoundDevice()+0x17>
c0022cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ce2:	83 ec 0c             	sub    esp,0xc
c0022ce5:	50                   	push   eax
c0022ce6:	e8 ef 14 ff ff       	call   c00141da <Device::~Device()>
c0022ceb:	83 c4 10             	add    esp,0x10
c0022cee:	90                   	nop
c0022cef:	83 c4 18             	add    esp,0x18
c0022cf2:	5b                   	pop    ebx
c0022cf3:	c3                   	ret    

c0022cf4 <SoundDevice::~SoundDevice()>:
c0022cf4:	83 ec 0c             	sub    esp,0xc
c0022cf7:	83 ec 0c             	sub    esp,0xc
c0022cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cfe:	e8 77 ff ff ff       	call   c0022c7a <SoundDevice::~SoundDevice()>
c0022d03:	83 c4 10             	add    esp,0x10
c0022d06:	83 ec 08             	sub    esp,0x8
c0022d09:	68 e4 01 00 00       	push   0x1e4
c0022d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d12:	e8 dc 00 ff ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0022d17:	83 c4 10             	add    esp,0x10
c0022d1a:	83 c4 0c             	add    esp,0xc
c0022d1d:	c3                   	ret    

c0022d1e <SoundDevice::getFreeChannelNum()>:
c0022d1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d22:	31 c0                	xor    eax,eax
c0022d24:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d2c:	74 09                	je     c0022d37 <SoundDevice::getFreeChannelNum()+0x19>
c0022d2e:	40                   	inc    eax
c0022d2f:	83 f8 20             	cmp    eax,0x20
c0022d32:	75 f0                	jne    c0022d24 <SoundDevice::getFreeChannelNum()+0x6>
c0022d34:	83 c8 ff             	or     eax,0xffffffff
c0022d37:	c3                   	ret    

c0022d38 <SoundDevice::addChannel(SoundChannel*)>:
c0022d38:	56                   	push   esi
c0022d39:	53                   	push   ebx
c0022d3a:	51                   	push   ecx
c0022d3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d43:	53                   	push   ebx
c0022d44:	e8 d5 ff ff ff       	call   c0022d1e <SoundDevice::getFreeChannelNum()>
c0022d49:	5a                   	pop    edx
c0022d4a:	83 f8 ff             	cmp    eax,0xffffffff
c0022d4d:	74 51                	je     c0022da0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d4f:	85 f6                	test   esi,esi
c0022d51:	74 4d                	je     c0022da0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d53:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d5a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d61:	75 30                	jne    c0022d93 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d63:	83 ec 0c             	sub    esp,0xc
c0022d66:	56                   	push   esi
c0022d67:	e8 42 fd ff ff       	call   c0022aae <SoundChannel::getSampleRate()>
c0022d6c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022d72:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d75:	e8 3c fd ff ff       	call   c0022ab6 <SoundChannel::getBits()>
c0022d7a:	83 c4 0c             	add    esp,0xc
c0022d7d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022d83:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d85:	50                   	push   eax
c0022d86:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022d8c:	53                   	push   ebx
c0022d8d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022d90:	83 c4 10             	add    esp,0x10
c0022d93:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022d99:	b8 01 00 00 00       	mov    eax,0x1
c0022d9e:	eb 03                	jmp    c0022da3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022da0:	83 c8 ff             	or     eax,0xffffffff
c0022da3:	5a                   	pop    edx
c0022da4:	5b                   	pop    ebx
c0022da5:	5e                   	pop    esi
c0022da6:	c3                   	ret    
c0022da7:	90                   	nop

c0022da8 <SoundDevice::removeChannel(int)>:
c0022da8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db0:	83 fa 1f             	cmp    edx,0x1f
c0022db3:	77 23                	ja     c0022dd8 <SoundDevice::removeChannel(int)+0x30>
c0022db5:	8d 14 90             	lea    edx,[eax+edx*4]
c0022db8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022dbf:	74 17                	je     c0022dd8 <SoundDevice::removeChannel(int)+0x30>
c0022dc1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022dcb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022dd1:	75 05                	jne    c0022dd8 <SoundDevice::removeChannel(int)+0x30>
c0022dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dd5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022dd8:	c3                   	ret    
c0022dd9:	90                   	nop

c0022dda <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022dda:	57                   	push   edi
c0022ddb:	56                   	push   esi
c0022ddc:	53                   	push   ebx
c0022ddd:	31 db                	xor    ebx,ebx
c0022ddf:	83 ec 10             	sub    esp,0x10
c0022de2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022de6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022dea:	0f 8d cb 00 00 00    	jge    c0022ebb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022df0:	83 ec 0c             	sub    esp,0xc
c0022df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022df7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022dfa:	e8 a0 5f 00 00       	call   c0028d9f <__extendsfdf2>
c0022dff:	83 c4 10             	add    esp,0x10
c0022e02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e0a:	68 00 00 f0 3f       	push   0x3ff00000
c0022e0f:	6a 00                	push   0x0
c0022e11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e19:	e8 0d 4f 00 00       	call   c0027d2b <__adddf3>
c0022e1e:	83 c4 10             	add    esp,0x10
c0022e21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e29:	68 00 00 e0 3f       	push   0x3fe00000
c0022e2e:	6a 00                	push   0x0
c0022e30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e38:	e8 6b 55 00 00       	call   c00283a8 <__muldf3>
c0022e3d:	83 c4 10             	add    esp,0x10
c0022e40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e48:	68 00 00 60 40       	push   0x40600000
c0022e4d:	6a 00                	push   0x0
c0022e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e57:	e8 4c 55 00 00       	call   c00283a8 <__muldf3>
c0022e5c:	59                   	pop    ecx
c0022e5d:	5f                   	pop    edi
c0022e5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e6e:	e8 08 5e 00 00       	call   c0028c7b <__truncdfsf2>
c0022e73:	5a                   	pop    edx
c0022e74:	89 c7                	mov    edi,eax
c0022e76:	59                   	pop    ecx
c0022e77:	68 00 00 fe 42       	push   0x42fe0000
c0022e7c:	50                   	push   eax
c0022e7d:	e8 a3 4e 00 00       	call   c0027d25 <__gesf2>
c0022e82:	83 c4 10             	add    esp,0x10
c0022e85:	85 c0                	test   eax,eax
c0022e87:	78 06                	js     c0022e8f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e89:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e8d:	eb 26                	jmp    c0022eb5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e8f:	50                   	push   eax
c0022e90:	50                   	push   eax
c0022e91:	6a 00                	push   0x0
c0022e93:	57                   	push   edi
c0022e94:	e8 90 4e 00 00       	call   c0027d29 <__lesf2>
c0022e99:	83 c4 10             	add    esp,0x10
c0022e9c:	85 c0                	test   eax,eax
c0022e9e:	7f 06                	jg     c0022ea6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022ea0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022ea4:	eb 0f                	jmp    c0022eb5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	57                   	push   edi
c0022eaa:	e8 8d 5f 00 00       	call   c0028e3c <lrintf>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022eb5:	43                   	inc    ebx
c0022eb6:	e9 2b ff ff ff       	jmp    c0022de6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ebb:	83 c4 10             	add    esp,0x10
c0022ebe:	5b                   	pop    ebx
c0022ebf:	5e                   	pop    esi
c0022ec0:	5f                   	pop    edi
c0022ec1:	c3                   	ret    

c0022ec2 <SoundDevice::getAudio(int, float*, float*)>:
c0022ec2:	55                   	push   ebp
c0022ec3:	57                   	push   edi
c0022ec4:	56                   	push   esi
c0022ec5:	53                   	push   ebx
c0022ec6:	31 db                	xor    ebx,ebx
c0022ec8:	83 ec 20             	sub    esp,0x20
c0022ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022ecf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ed3:	c1 e0 02             	shl    eax,0x2
c0022ed6:	50                   	push   eax
c0022ed7:	6a 00                	push   0x0
c0022ed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022edd:	e8 a6 d8 fd ff       	call   c0000788 <memset>
c0022ee2:	83 c4 10             	add    esp,0x10
c0022ee5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022ee9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022ef0:	85 c0                	test   eax,eax
c0022ef2:	0f 84 d7 00 00 00    	je     c0022fcf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022ef8:	83 ec 0c             	sub    esp,0xc
c0022efb:	50                   	push   eax
c0022efc:	e8 a5 fb ff ff       	call   c0022aa6 <SoundChannel::paused()>
c0022f01:	83 c4 10             	add    esp,0x10
c0022f04:	84 c0                	test   al,al
c0022f06:	0f 85 c3 00 00 00    	jne    c0022fcf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f0c:	83 ec 0c             	sub    esp,0xc
c0022f0f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f16:	e8 19 fa ff ff       	call   c0022934 <SoundChannel::getVolume()>
c0022f1b:	83 c4 10             	add    esp,0x10
c0022f1e:	85 c0                	test   eax,eax
c0022f20:	0f 84 a9 00 00 00    	je     c0022fcf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f26:	83 ec 0c             	sub    esp,0xc
c0022f29:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f30:	e8 ff f9 ff ff       	call   c0022934 <SoundChannel::getVolume()>
c0022f35:	83 ec 0c             	sub    esp,0xc
c0022f38:	50                   	push   eax
c0022f39:	e8 91 4b 00 00       	call   c0027acf <__floatsisf>
c0022f3e:	59                   	pop    ecx
c0022f3f:	5d                   	pop    ebp
c0022f40:	31 ed                	xor    ebp,ebp
c0022f42:	68 00 00 c8 42       	push   0x42c80000
c0022f47:	50                   	push   eax
c0022f48:	e8 57 49 00 00       	call   c00278a4 <__divsf3>
c0022f4d:	83 c4 10             	add    esp,0x10
c0022f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f54:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f58:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f5e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f62:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f69:	e8 60 fb ff ff       	call   c0022ace <SoundChannel::unbuffer(float*, int, int)>
c0022f6e:	83 c4 20             	add    esp,0x20
c0022f71:	89 c1                	mov    ecx,eax
c0022f73:	39 cd                	cmp    ebp,ecx
c0022f75:	7d 52                	jge    c0022fc9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022f77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f7b:	50                   	push   eax
c0022f7c:	50                   	push   eax
c0022f7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022f81:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022f84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f88:	e8 54 47 00 00       	call   c00276e1 <__mulsf3>
c0022f8d:	5a                   	pop    edx
c0022f8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f92:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022f98:	e8 32 4b 00 00       	call   c0027acf <__floatsisf>
c0022f9d:	59                   	pop    ecx
c0022f9e:	5a                   	pop    edx
c0022f9f:	50                   	push   eax
c0022fa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fa4:	e8 fb 48 00 00       	call   c00278a4 <__divsf3>
c0022fa9:	59                   	pop    ecx
c0022faa:	5a                   	pop    edx
c0022fab:	50                   	push   eax
c0022fac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fb0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fb3:	e8 06 44 00 00       	call   c00273be <__addsf3>
c0022fb8:	83 c4 10             	add    esp,0x10
c0022fbb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022fc3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022fc6:	45                   	inc    ebp
c0022fc7:	eb aa                	jmp    c0022f73 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022fc9:	39 cf                	cmp    edi,ecx
c0022fcb:	7e 02                	jle    c0022fcf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fcd:	89 cf                	mov    edi,ecx
c0022fcf:	43                   	inc    ebx
c0022fd0:	83 fb 20             	cmp    ebx,0x20
c0022fd3:	0f 85 10 ff ff ff    	jne    c0022ee9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022fd9:	83 c4 1c             	add    esp,0x1c
c0022fdc:	89 f8                	mov    eax,edi
c0022fde:	5b                   	pop    ebx
c0022fdf:	5e                   	pop    esi
c0022fe0:	5f                   	pop    edi
c0022fe1:	5d                   	pop    ebp
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <PCI::open(int, int, void*)>:
c0022fe4:	83 ec 18             	sub    esp,0x18
c0022fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022feb:	8b 10                	mov    edx,DWORD PTR [eax]
c0022fed:	50                   	push   eax
c0022fee:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022ff1:	31 c0                	xor    eax,eax
c0022ff3:	83 c4 1c             	add    esp,0x1c
c0022ff6:	c3                   	ret    
c0022ff7:	90                   	nop

c0022ff8 <PCI::close(int, int, void*)>:
c0022ff8:	31 c0                	xor    eax,eax
c0022ffa:	c3                   	ret    
c0022ffb:	90                   	nop

c0022ffc <PCI::PCI()>:
c0022ffc:	83 ec 0c             	sub    esp,0xc
c0022fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023003:	83 ec 08             	sub    esp,0x8
c0023006:	68 fc d3 02 c0       	push   0xc002d3fc
c002300b:	50                   	push   eax
c002300c:	e8 63 0b ff ff       	call   c0013b74 <Bus::Bus(char const*)>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c0023019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301d:	89 10                	mov    DWORD PTR [eax],edx
c002301f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023023:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023029:	0f b6 d0             	movzx  edx,al
c002302c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023030:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023041:	0f b6 d0             	movzx  edx,al
c0023044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023048:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002304d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023051:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023057:	8d 50 01             	lea    edx,[eax+0x1]
c002305a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002305e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023064:	0f b6 d0             	movzx  edx,al
c0023067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002306f:	83 c9 c0             	or     ecx,0xffffffc0
c0023072:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023076:	90                   	nop
c0023077:	83 c4 0c             	add    esp,0xc
c002307a:	c3                   	ret    
c002307b:	90                   	nop

c002307c <PCI::readBAR8(unsigned int, int)>:
c002307c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023084:	f6 c2 01             	test   dl,0x1
c0023087:	74 07                	je     c0023090 <PCI::readBAR8(unsigned int, int)+0x14>
c0023089:	83 e2 fc             	and    edx,0xfffffffc
c002308c:	01 c2                	add    edx,eax
c002308e:	ec                   	in     al,dx
c002308f:	c3                   	ret    
c0023090:	83 e2 f0             	and    edx,0xfffffff0
c0023093:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0023096:	c3                   	ret    
c0023097:	90                   	nop

c0023098 <PCI::readBAR16(unsigned int, int)>:
c0023098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002309c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230a0:	f6 c2 01             	test   dl,0x1
c00230a3:	74 08                	je     c00230ad <PCI::readBAR16(unsigned int, int)+0x15>
c00230a5:	83 e2 fc             	and    edx,0xfffffffc
c00230a8:	01 c2                	add    edx,eax
c00230aa:	66 ed                	in     ax,dx
c00230ac:	c3                   	ret    
c00230ad:	83 e2 f0             	and    edx,0xfffffff0
c00230b0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230b4:	c3                   	ret    
c00230b5:	90                   	nop

c00230b6 <PCI::readBAR32(unsigned int, int)>:
c00230b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230be:	f6 c2 01             	test   dl,0x1
c00230c1:	74 07                	je     c00230ca <PCI::readBAR32(unsigned int, int)+0x14>
c00230c3:	83 e2 fc             	and    edx,0xfffffffc
c00230c6:	01 c2                	add    edx,eax
c00230c8:	ed                   	in     eax,dx
c00230c9:	c3                   	ret    
c00230ca:	83 e2 f0             	and    edx,0xfffffff0
c00230cd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00230d0:	c3                   	ret    
c00230d1:	90                   	nop

c00230d2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00230d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230de:	f6 c2 01             	test   dl,0x1
c00230e1:	74 07                	je     c00230ea <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00230e3:	83 e2 fc             	and    edx,0xfffffffc
c00230e6:	01 ca                	add    edx,ecx
c00230e8:	ee                   	out    dx,al
c00230e9:	c3                   	ret    
c00230ea:	83 e2 f0             	and    edx,0xfffffff0
c00230ed:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00230f0:	c3                   	ret    
c00230f1:	90                   	nop

c00230f2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00230f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230fe:	f6 c2 01             	test   dl,0x1
c0023101:	74 08                	je     c002310b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023103:	83 e2 fc             	and    edx,0xfffffffc
c0023106:	01 ca                	add    edx,ecx
c0023108:	66 ef                	out    dx,ax
c002310a:	c3                   	ret    
c002310b:	83 e2 f0             	and    edx,0xfffffff0
c002310e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023112:	c3                   	ret    
c0023113:	90                   	nop

c0023114 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023114:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002311c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023120:	f6 c2 01             	test   dl,0x1
c0023123:	74 07                	je     c002312c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023125:	83 e2 fc             	and    edx,0xfffffffc
c0023128:	01 ca                	add    edx,ecx
c002312a:	ef                   	out    dx,eax
c002312b:	c3                   	ret    
c002312c:	83 e2 f0             	and    edx,0xfffffff0
c002312f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023132:	c3                   	ret    
c0023133:	90                   	nop

c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023134:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023138:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002313d:	89 ca                	mov    edx,ecx
c002313f:	c1 e0 10             	shl    eax,0x10
c0023142:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023148:	09 d0                	or     eax,edx
c002314a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002314f:	c1 e2 08             	shl    edx,0x8
c0023152:	09 d0                	or     eax,edx
c0023154:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023159:	c1 e2 0b             	shl    edx,0xb
c002315c:	09 d0                	or     eax,edx
c002315e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023163:	0d 00 00 00 80       	or     eax,0x80000000
c0023168:	ef                   	out    dx,eax
c0023169:	ba fc 0c 00 00       	mov    edx,0xcfc
c002316e:	ed                   	in     eax,dx
c002316f:	83 e1 02             	and    ecx,0x2
c0023172:	0f b6 c9             	movzx  ecx,cl
c0023175:	c1 e1 03             	shl    ecx,0x3
c0023178:	d3 e8                	shr    eax,cl
c002317a:	c3                   	ret    
c002317b:	90                   	nop

c002317c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002317c:	6a 00                	push   0x0
c002317e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023183:	50                   	push   eax
c0023184:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023189:	50                   	push   eax
c002318a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002318f:	50                   	push   eax
c0023190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023194:	e8 9b ff ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023199:	83 c4 14             	add    esp,0x14
c002319c:	c3                   	ret    
c002319d:	90                   	nop

c002319e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002319e:	6a 0e                	push   0xe
c00231a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231a5:	50                   	push   eax
c00231a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231ab:	50                   	push   eax
c00231ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b1:	50                   	push   eax
c00231b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231b6:	e8 79 ff ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231bb:	83 c4 14             	add    esp,0x14
c00231be:	0f b6 c0             	movzx  eax,al
c00231c1:	c3                   	ret    

c00231c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231c2:	55                   	push   ebp
c00231c3:	57                   	push   edi
c00231c4:	56                   	push   esi
c00231c5:	53                   	push   ebx
c00231c6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00231cb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00231d0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00231d5:	6a 0a                	push   0xa
c00231d7:	56                   	push   esi
c00231d8:	55                   	push   ebp
c00231d9:	57                   	push   edi
c00231da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00231de:	e8 51 ff ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231e3:	6a 0a                	push   0xa
c00231e5:	89 c3                	mov    ebx,eax
c00231e7:	56                   	push   esi
c00231e8:	0f b6 db             	movzx  ebx,bl
c00231eb:	55                   	push   ebp
c00231ec:	57                   	push   edi
c00231ed:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00231f1:	e8 3e ff ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231f6:	83 c4 28             	add    esp,0x28
c00231f9:	25 00 ff 00 00       	and    eax,0xff00
c00231fe:	09 d8                	or     eax,ebx
c0023200:	5b                   	pop    ebx
c0023201:	5e                   	pop    esi
c0023202:	5f                   	pop    edi
c0023203:	5d                   	pop    ebp
c0023204:	c3                   	ret    
c0023205:	90                   	nop

c0023206 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023206:	6a 08                	push   0x8
c0023208:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002320d:	50                   	push   eax
c002320e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023213:	50                   	push   eax
c0023214:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023219:	50                   	push   eax
c002321a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002321e:	e8 11 ff ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023223:	83 c4 14             	add    esp,0x14
c0023226:	0f b6 c4             	movzx  eax,ah
c0023229:	c3                   	ret    

c002322a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002322a:	6a 08                	push   0x8
c002322c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023231:	50                   	push   eax
c0023232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023237:	50                   	push   eax
c0023238:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002323d:	50                   	push   eax
c002323e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023242:	e8 ed fe ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023247:	83 c4 14             	add    esp,0x14
c002324a:	c3                   	ret    
c002324b:	90                   	nop

c002324c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002324c:	6a 3c                	push   0x3c
c002324e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023253:	50                   	push   eax
c0023254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023259:	50                   	push   eax
c002325a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002325f:	50                   	push   eax
c0023260:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023264:	e8 cb fe ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023269:	83 c4 14             	add    esp,0x14
c002326c:	c3                   	ret    
c002326d:	90                   	nop

c002326e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002326e:	6a 18                	push   0x18
c0023270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023275:	50                   	push   eax
c0023276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002327b:	50                   	push   eax
c002327c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023281:	50                   	push   eax
c0023282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023286:	e8 a9 fe ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002328b:	83 c4 14             	add    esp,0x14
c002328e:	0f b6 c4             	movzx  eax,ah
c0023291:	c3                   	ret    

c0023292 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023292:	55                   	push   ebp
c0023293:	57                   	push   edi
c0023294:	56                   	push   esi
c0023295:	53                   	push   ebx
c0023296:	50                   	push   eax
c0023297:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002329b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232a0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232a5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232aa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232b1:	8d 43 12             	lea    eax,[ebx+0x12]
c00232b4:	83 c3 10             	add    ebx,0x10
c00232b7:	0f b6 c0             	movzx  eax,al
c00232ba:	0f b6 db             	movzx  ebx,bl
c00232bd:	50                   	push   eax
c00232be:	51                   	push   ecx
c00232bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232c3:	57                   	push   edi
c00232c4:	55                   	push   ebp
c00232c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00232c9:	e8 66 fe ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232ce:	53                   	push   ebx
c00232cf:	89 c6                	mov    esi,eax
c00232d1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232d5:	c1 e6 10             	shl    esi,0x10
c00232d8:	51                   	push   ecx
c00232d9:	57                   	push   edi
c00232da:	55                   	push   ebp
c00232db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232df:	e8 50 fe ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232e4:	83 c4 2c             	add    esp,0x2c
c00232e7:	0f b7 c0             	movzx  eax,ax
c00232ea:	5b                   	pop    ebx
c00232eb:	09 f0                	or     eax,esi
c00232ed:	5e                   	pop    esi
c00232ee:	5f                   	pop    edi
c00232ef:	5d                   	pop    ebp
c00232f0:	c3                   	ret    
c00232f1:	90                   	nop

c00232f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00232f2:	53                   	push   ebx
c00232f3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00232f8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00232fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023301:	c1 e1 10             	shl    ecx,0x10
c0023304:	25 fc 00 00 00       	and    eax,0xfc
c0023309:	09 c1                	or     ecx,eax
c002330b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023310:	c1 e0 08             	shl    eax,0x8
c0023313:	09 c1                	or     ecx,eax
c0023315:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002331a:	c1 e0 0b             	shl    eax,0xb
c002331d:	09 c1                	or     ecx,eax
c002331f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023325:	89 c8                	mov    eax,ecx
c0023327:	ef                   	out    dx,eax
c0023328:	ba fc 0c 00 00       	mov    edx,0xcfc
c002332d:	ed                   	in     eax,dx
c002332e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023333:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023338:	74 0a                	je     c0023344 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002333a:	0f b7 d8             	movzx  ebx,ax
c002333d:	89 d0                	mov    eax,edx
c002333f:	c1 e0 10             	shl    eax,0x10
c0023342:	eb 05                	jmp    c0023349 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023344:	66 31 c0             	xor    ax,ax
c0023347:	89 d3                	mov    ebx,edx
c0023349:	09 c3                	or     ebx,eax
c002334b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023350:	89 c8                	mov    eax,ecx
c0023352:	ef                   	out    dx,eax
c0023353:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023358:	89 d8                	mov    eax,ebx
c002335a:	ef                   	out    dx,eax
c002335b:	5b                   	pop    ebx
c002335c:	c3                   	ret    
c002335d:	90                   	nop

c002335e <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002335e:	31 c0                	xor    eax,eax
c0023360:	c3                   	ret    
c0023361:	90                   	nop

c0023362 <PCI::checkBus(unsigned char)>:
c0023362:	56                   	push   esi
c0023363:	53                   	push   ebx
c0023364:	31 db                	xor    ebx,ebx
c0023366:	51                   	push   ecx
c0023367:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002336c:	52                   	push   edx
c002336d:	53                   	push   ebx
c002336e:	43                   	inc    ebx
c002336f:	56                   	push   esi
c0023370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023374:	e8 41 03 00 00       	call   c00236ba <PCI::checkDevice(unsigned char, unsigned char)>
c0023379:	83 c4 10             	add    esp,0x10
c002337c:	83 fb 20             	cmp    ebx,0x20
c002337f:	75 eb                	jne    c002336c <PCI::checkBus(unsigned char)+0xa>
c0023381:	58                   	pop    eax
c0023382:	5b                   	pop    ebx
c0023383:	5e                   	pop    esi
c0023384:	c3                   	ret    
c0023385:	90                   	nop

c0023386 <PCI::foundDevice(PCIDeviceInfo)>:
c0023386:	55                   	push   ebp
c0023387:	57                   	push   edi
c0023388:	56                   	push   esi
c0023389:	53                   	push   ebx
c002338a:	83 ec 1c             	sub    esp,0x1c
c002338d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023391:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023397:	0f 84 68 01 00 00    	je     c0023505 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002339d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00233a1:	66 81 f9 06 04       	cmp    cx,0x406
c00233a6:	75 2c                	jne    c00233d4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233a8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233ad:	50                   	push   eax
c00233ae:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233b3:	50                   	push   eax
c00233b4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233b9:	50                   	push   eax
c00233ba:	56                   	push   esi
c00233bb:	e8 ae fe ff ff       	call   c002326e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233c0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233c4:	0f b6 c0             	movzx  eax,al
c00233c7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00233cb:	83 c4 2c             	add    esp,0x2c
c00233ce:	5b                   	pop    ebx
c00233cf:	5e                   	pop    esi
c00233d0:	5f                   	pop    edi
c00233d1:	5d                   	pop    ebp
c00233d2:	eb 8e                	jmp    c0023362 <PCI::checkBus(unsigned char)>
c00233d4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00233d8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00233de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00233e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00233e6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00233ea:	88 d3                	mov    bl,dl
c00233ec:	85 c0                	test   eax,eax
c00233ee:	74 33                	je     c0023423 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00233f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00233f3:	85 d2                	test   edx,edx
c00233f5:	74 28                	je     c002341f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00233f7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00233fd:	31 ef                	xor    edi,ebp
c00233ff:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023405:	75 18                	jne    c002341f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023407:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002340b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023411:	75 0c                	jne    c002341f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023413:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023419:	0f 84 e6 00 00 00    	je     c0023505 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002341f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023421:	eb c9                	jmp    c00233ec <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023423:	66 81 f9 01 06       	cmp    cx,0x601
c0023428:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002342c:	75 19                	jne    c0023447 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002342e:	83 ec 0c             	sub    esp,0xc
c0023431:	68 64 01 00 00       	push   0x164
c0023436:	e8 e1 c4 fe ff       	call   c000f91c <malloc>
c002343b:	89 c5                	mov    ebp,eax
c002343d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023440:	e8 ab 0f 00 00       	call   c00243f0 <SATABus::SATABus()>
c0023445:	eb 1e                	jmp    c0023465 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023447:	66 81 f9 01 01       	cmp    cx,0x101
c002344c:	75 60                	jne    c00234ae <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002344e:	83 ec 0c             	sub    esp,0xc
c0023451:	68 70 02 00 00       	push   0x270
c0023456:	e8 c1 c4 fe ff       	call   c000f91c <malloc>
c002345b:	89 c5                	mov    ebp,eax
c002345d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023460:	e8 19 03 00 00       	call   c002377e <IDE::IDE()>
c0023465:	58                   	pop    eax
c0023466:	5a                   	pop    edx
c0023467:	55                   	push   ebp
c0023468:	56                   	push   esi
c0023469:	e8 9a 0e ff ff       	call   c0014308 <Device::addChild(Device*)>
c002346e:	83 ec 1c             	sub    esp,0x1c
c0023471:	b9 09 00 00 00       	mov    ecx,0x9
c0023476:	fc                   	cld    
c0023477:	89 e7                	mov    edi,esp
c0023479:	89 de                	mov    esi,ebx
c002347b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002347d:	55                   	push   ebp
c002347e:	e8 8f 0d ff ff       	call   c0014212 <Device::preOpenPCI(PCIDeviceInfo)>
c0023483:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023486:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002348a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023492:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002349a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00234a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234a5:	83 c4 4c             	add    esp,0x4c
c00234a8:	5b                   	pop    ebx
c00234a9:	5e                   	pop    esi
c00234aa:	5f                   	pop    edi
c00234ab:	5d                   	pop    ebp
c00234ac:	ff e0                	jmp    eax
c00234ae:	50                   	push   eax
c00234af:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234b4:	50                   	push   eax
c00234b5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234ba:	50                   	push   eax
c00234bb:	68 04 d4 02 c0       	push   0xc002d404
c00234c0:	e8 0e fa fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00234c5:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00234cc:	e8 4b c4 fe ff       	call   c000f91c <malloc>
c00234d1:	5a                   	pop    edx
c00234d2:	89 c5                	mov    ebp,eax
c00234d4:	59                   	pop    ecx
c00234d5:	68 20 d4 02 c0       	push   0xc002d420
c00234da:	50                   	push   eax
c00234db:	e8 1e 11 ff ff       	call   c00145fe <DriverlessDevice::DriverlessDevice(char const*)>
c00234e0:	5f                   	pop    edi
c00234e1:	58                   	pop    eax
c00234e2:	55                   	push   ebp
c00234e3:	56                   	push   esi
c00234e4:	e8 1f 0e ff ff       	call   c0014308 <Device::addChild(Device*)>
c00234e9:	b9 09 00 00 00       	mov    ecx,0x9
c00234ee:	fc                   	cld    
c00234ef:	89 df                	mov    edi,ebx
c00234f1:	89 de                	mov    esi,ebx
c00234f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234f5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00234f9:	83 c4 2c             	add    esp,0x2c
c00234fc:	5b                   	pop    ebx
c00234fd:	5e                   	pop    esi
c00234fe:	5f                   	pop    edi
c00234ff:	5d                   	pop    ebp
c0023500:	e9 0d 0d ff ff       	jmp    c0014212 <Device::preOpenPCI(PCIDeviceInfo)>
c0023505:	83 c4 1c             	add    esp,0x1c
c0023508:	5b                   	pop    ebx
c0023509:	5e                   	pop    esi
c002350a:	5f                   	pop    edi
c002350b:	5d                   	pop    ebp
c002350c:	c3                   	ret    
c002350d:	90                   	nop

c002350e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002350e:	55                   	push   ebp
c002350f:	57                   	push   edi
c0023510:	56                   	push   esi
c0023511:	53                   	push   ebx
c0023512:	83 ec 5c             	sub    esp,0x5c
c0023515:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023519:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002351d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023521:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023526:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002352a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002352e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023533:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023537:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002353c:	6a 0c                	push   0xc
c002353e:	55                   	push   ebp
c002353f:	53                   	push   ebx
c0023540:	57                   	push   edi
c0023541:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023548:	e8 e7 fb ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002354d:	55                   	push   ebp
c002354e:	53                   	push   ebx
c002354f:	57                   	push   edi
c0023550:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023557:	e8 66 fc ff ff       	call   c00231c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002355c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023561:	83 c4 24             	add    esp,0x24
c0023564:	55                   	push   ebp
c0023565:	53                   	push   ebx
c0023566:	57                   	push   edi
c0023567:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002356b:	e8 dc fc ff ff       	call   c002324c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023570:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023574:	6a 3c                	push   0x3c
c0023576:	55                   	push   ebp
c0023577:	53                   	push   ebx
c0023578:	57                   	push   edi
c0023579:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023580:	e8 af fb ff ff       	call   c0023134 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023585:	0f b6 c4             	movzx  eax,ah
c0023588:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002358c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023590:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023594:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0023599:	83 c4 24             	add    esp,0x24
c002359c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235a2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235a9:	74 6c                	je     c0023617 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235ab:	31 f6                	xor    esi,esi
c00235ad:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c00235b3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235b9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235bf:	7e 56                	jle    c0023617 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235c1:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235c4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00235cb:	39 cb                	cmp    ebx,ecx
c00235cd:	75 45                	jne    c0023614 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235cf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00235d6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00235da:	75 38                	jne    c0023614 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235dc:	83 ec 0c             	sub    esp,0xc
c00235df:	68 3a d4 02 c0       	push   0xc002d43a
c00235e4:	e8 ea f8 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00235e9:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c00235ef:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235f5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00235fd:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023601:	52                   	push   edx
c0023602:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023606:	53                   	push   ebx
c0023607:	68 5f d4 02 c0       	push   0xc002d45f
c002360c:	e8 c2 f8 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0023611:	83 c4 20             	add    esp,0x20
c0023614:	46                   	inc    esi
c0023615:	eb 96                	jmp    c00235ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023617:	31 d2                	xor    edx,edx
c0023619:	83 ec 0c             	sub    esp,0xc
c002361c:	55                   	push   ebp
c002361d:	53                   	push   ebx
c002361e:	57                   	push   edi
c002361f:	52                   	push   edx
c0023620:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023624:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002362b:	e8 62 fc ff ff       	call   c0023292 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023630:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023634:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023638:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002363c:	42                   	inc    edx
c002363d:	83 c4 20             	add    esp,0x20
c0023640:	83 fa 06             	cmp    edx,0x6
c0023643:	75 d4                	jne    c0023619 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023645:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023649:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002364d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023651:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023655:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023659:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002365d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023662:	86 e0                	xchg   al,ah
c0023664:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023669:	55                   	push   ebp
c002366a:	53                   	push   ebx
c002366b:	57                   	push   edi
c002366c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023670:	e8 91 fb ff ff       	call   c0023206 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023675:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023679:	55                   	push   ebp
c002367a:	53                   	push   ebx
c002367b:	57                   	push   edi
c002367c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023683:	e8 f4 fa ff ff       	call   c002317c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023688:	83 ec 0c             	sub    esp,0xc
c002368b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023690:	b9 09 00 00 00       	mov    ecx,0x9
c0023695:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023699:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002369d:	fc                   	cld    
c002369e:	89 e7                	mov    edi,esp
c00236a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236a2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236a9:	e8 d8 fc ff ff       	call   c0023386 <PCI::foundDevice(PCIDeviceInfo)>
c00236ae:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236b4:	5b                   	pop    ebx
c00236b5:	5e                   	pop    esi
c00236b6:	5f                   	pop    edi
c00236b7:	5d                   	pop    ebp
c00236b8:	c3                   	ret    
c00236b9:	90                   	nop

c00236ba <PCI::checkDevice(unsigned char, unsigned char)>:
c00236ba:	55                   	push   ebp
c00236bb:	57                   	push   edi
c00236bc:	56                   	push   esi
c00236bd:	53                   	push   ebx
c00236be:	83 ec 0c             	sub    esp,0xc
c00236c1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236c5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00236ca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236cf:	6a 00                	push   0x0
c00236d1:	56                   	push   esi
c00236d2:	57                   	push   edi
c00236d3:	55                   	push   ebp
c00236d4:	e8 a3 fa ff ff       	call   c002317c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236d9:	6a 00                	push   0x0
c00236db:	56                   	push   esi
c00236dc:	57                   	push   edi
c00236dd:	55                   	push   ebp
c00236de:	e8 2b fe ff ff       	call   c002350e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00236e3:	83 c4 20             	add    esp,0x20
c00236e6:	6a 00                	push   0x0
c00236e8:	56                   	push   esi
c00236e9:	57                   	push   edi
c00236ea:	55                   	push   ebp
c00236eb:	e8 ae fa ff ff       	call   c002319e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00236f0:	83 c4 10             	add    esp,0x10
c00236f3:	84 c0                	test   al,al
c00236f5:	79 27                	jns    c002371e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00236f7:	bb 01 00 00 00       	mov    ebx,0x1
c00236fc:	53                   	push   ebx
c00236fd:	56                   	push   esi
c00236fe:	57                   	push   edi
c00236ff:	55                   	push   ebp
c0023700:	e8 77 fa ff ff       	call   c002317c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023705:	83 c4 10             	add    esp,0x10
c0023708:	66 40                	inc    ax
c002370a:	74 0c                	je     c0023718 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002370c:	53                   	push   ebx
c002370d:	56                   	push   esi
c002370e:	57                   	push   edi
c002370f:	55                   	push   ebp
c0023710:	e8 f9 fd ff ff       	call   c002350e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023715:	83 c4 10             	add    esp,0x10
c0023718:	43                   	inc    ebx
c0023719:	83 fb 08             	cmp    ebx,0x8
c002371c:	75 de                	jne    c00236fc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002371e:	83 c4 0c             	add    esp,0xc
c0023721:	5b                   	pop    ebx
c0023722:	5e                   	pop    esi
c0023723:	5f                   	pop    edi
c0023724:	5d                   	pop    ebp
c0023725:	c3                   	ret    

c0023726 <PCI::detect()>:
c0023726:	56                   	push   esi
c0023727:	53                   	push   ebx
c0023728:	53                   	push   ebx
c0023729:	31 db                	xor    ebx,ebx
c002372b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002372f:	6a 00                	push   0x0
c0023731:	6a 00                	push   0x0
c0023733:	6a 00                	push   0x0
c0023735:	56                   	push   esi
c0023736:	e8 63 fa ff ff       	call   c002319e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002373b:	83 c4 10             	add    esp,0x10
c002373e:	a8 80                	test   al,0x80
c0023740:	75 21                	jne    c0023763 <PCI::detect()+0x3d>
c0023742:	51                   	push   ecx
c0023743:	51                   	push   ecx
c0023744:	6a 00                	push   0x0
c0023746:	56                   	push   esi
c0023747:	e8 16 fc ff ff       	call   c0023362 <PCI::checkBus(unsigned char)>
c002374c:	83 c4 10             	add    esp,0x10
c002374f:	eb 24                	jmp    c0023775 <PCI::detect()+0x4f>
c0023751:	52                   	push   edx
c0023752:	52                   	push   edx
c0023753:	53                   	push   ebx
c0023754:	43                   	inc    ebx
c0023755:	56                   	push   esi
c0023756:	e8 07 fc ff ff       	call   c0023362 <PCI::checkBus(unsigned char)>
c002375b:	83 c4 10             	add    esp,0x10
c002375e:	83 fb 08             	cmp    ebx,0x8
c0023761:	74 12                	je     c0023775 <PCI::detect()+0x4f>
c0023763:	53                   	push   ebx
c0023764:	6a 00                	push   0x0
c0023766:	6a 00                	push   0x0
c0023768:	56                   	push   esi
c0023769:	e8 0e fa ff ff       	call   c002317c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002376e:	83 c4 10             	add    esp,0x10
c0023771:	66 40                	inc    ax
c0023773:	74 dc                	je     c0023751 <PCI::detect()+0x2b>
c0023775:	58                   	pop    eax
c0023776:	5b                   	pop    ebx
c0023777:	5e                   	pop    esi
c0023778:	c3                   	ret    
c0023779:	90                   	nop

c002377a <IDE::close(int, int, void*)>:
c002377a:	83 c8 ff             	or     eax,0xffffffff
c002377d:	c3                   	ret    

c002377e <IDE::IDE()>:
c002377e:	83 ec 0c             	sub    esp,0xc
c0023781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023785:	83 ec 08             	sub    esp,0x8
c0023788:	68 a8 d4 02 c0       	push   0xc002d4a8
c002378d:	50                   	push   eax
c002378e:	e8 0f 0f ff ff       	call   c00146a2 <HardDiskController::HardDiskController(char const*)>
c0023793:	83 c4 10             	add    esp,0x10
c0023796:	ba e8 d6 02 c0       	mov    edx,0xc002d6e8
c002379b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002379f:	89 10                	mov    DWORD PTR [eax],edx
c00237a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237ac:	90                   	nop
c00237ad:	83 c4 0c             	add    esp,0xc
c00237b0:	c3                   	ret    
c00237b1:	90                   	nop

c00237b2 <IDE::prepareInterrupt(unsigned char)>:
c00237b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237bb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237c3:	c3                   	ret    

c00237c4 <selectDrive(unsigned char, unsigned char)>:
c00237c4:	c3                   	ret    
c00237c5:	90                   	nop

c00237c6 <IDE::getBase(unsigned char)>:
c00237c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00237cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237cf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00237d7:	c3                   	ret    

c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00237d8:	55                   	push   ebp
c00237d9:	57                   	push   edi
c00237da:	56                   	push   esi
c00237db:	53                   	push   ebx
c00237dc:	83 ec 1c             	sub    esp,0x1c
c00237df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00237e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00237e7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00237ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00237ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00237f2:	80 f9 03             	cmp    cl,0x3
c00237f5:	77 51                	ja     c0023848 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00237f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237fb:	0f b6 f2             	movzx  esi,dl
c00237fe:	0f b6 db             	movzx  ebx,bl
c0023801:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023804:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023808:	83 ca 80             	or     edx,0xffffff80
c002380b:	0f b6 d2             	movzx  edx,dl
c002380e:	52                   	push   edx
c002380f:	6a 0c                	push   0xc
c0023811:	56                   	push   esi
c0023812:	57                   	push   edi
c0023813:	e8 c0 ff ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023818:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002381d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023821:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023825:	ee                   	out    dx,al
c0023826:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002382b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002382f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023833:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023837:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002383f:	83 c4 2c             	add    esp,0x2c
c0023842:	5b                   	pop    ebx
c0023843:	5e                   	pop    esi
c0023844:	5f                   	pop    edi
c0023845:	5d                   	pop    ebp
c0023846:	eb 90                	jmp    c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023848:	80 fb 07             	cmp    bl,0x7
c002384b:	77 12                	ja     c002385f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002384d:	0f b6 d2             	movzx  edx,dl
c0023850:	0f b6 db             	movzx  ebx,bl
c0023853:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002385b:	89 da                	mov    edx,ebx
c002385d:	eb 2f                	jmp    c002388e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002385f:	80 fb 0d             	cmp    bl,0xd
c0023862:	77 13                	ja     c0023877 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023864:	0f b6 d2             	movzx  edx,dl
c0023867:	0f b6 db             	movzx  ebx,bl
c002386a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023871:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023875:	eb 17                	jmp    c002388e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023877:	80 fb 15             	cmp    bl,0x15
c002387a:	77 13                	ja     c002388f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002387c:	0f b6 d2             	movzx  edx,dl
c002387f:	0f b6 db             	movzx  ebx,bl
c0023882:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002388a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002388e:	ee                   	out    dx,al
c002388f:	83 c4 1c             	add    esp,0x1c
c0023892:	5b                   	pop    ebx
c0023893:	5e                   	pop    esi
c0023894:	5f                   	pop    edi
c0023895:	5d                   	pop    ebp
c0023896:	c3                   	ret    
c0023897:	90                   	nop

c0023898 <IDE::read(unsigned char, unsigned char)>:
c0023898:	55                   	push   ebp
c0023899:	57                   	push   edi
c002389a:	56                   	push   esi
c002389b:	53                   	push   ebx
c002389c:	83 ec 1c             	sub    esp,0x1c
c002389f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238a7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238ae:	3c 03                	cmp    al,0x3
c00238b0:	77 43                	ja     c00238f5 <IDE::read(unsigned char, unsigned char)+0x5d>
c00238b2:	0f b6 f2             	movzx  esi,dl
c00238b5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238b8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238bc:	83 c8 80             	or     eax,0xffffff80
c00238bf:	0f b6 c0             	movzx  eax,al
c00238c2:	50                   	push   eax
c00238c3:	6a 0c                	push   0xc
c00238c5:	56                   	push   esi
c00238c6:	57                   	push   edi
c00238c7:	e8 0c ff ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238cc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00238d1:	0f b6 c3             	movzx  eax,bl
c00238d4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00238d8:	ec                   	in     al,dx
c00238d9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238dd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00238e2:	52                   	push   edx
c00238e3:	6a 0c                	push   0xc
c00238e5:	56                   	push   esi
c00238e6:	57                   	push   edi
c00238e7:	e8 ec fe ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ec:	83 c4 20             	add    esp,0x20
c00238ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00238f3:	eb 49                	jmp    c002393e <IDE::read(unsigned char, unsigned char)+0xa6>
c00238f5:	80 fb 07             	cmp    bl,0x7
c00238f8:	77 12                	ja     c002390c <IDE::read(unsigned char, unsigned char)+0x74>
c00238fa:	0f b6 d2             	movzx  edx,dl
c00238fd:	0f b6 c3             	movzx  eax,bl
c0023900:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023908:	89 c2                	mov    edx,eax
c002390a:	eb 31                	jmp    c002393d <IDE::read(unsigned char, unsigned char)+0xa5>
c002390c:	80 fb 0d             	cmp    bl,0xd
c002390f:	77 13                	ja     c0023924 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023911:	0f b6 d2             	movzx  edx,dl
c0023914:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002391b:	0f b6 d3             	movzx  edx,bl
c002391e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023922:	eb 19                	jmp    c002393d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023924:	31 c0                	xor    eax,eax
c0023926:	80 fb 15             	cmp    bl,0x15
c0023929:	77 13                	ja     c002393e <IDE::read(unsigned char, unsigned char)+0xa6>
c002392b:	0f b6 d2             	movzx  edx,dl
c002392e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023936:	0f b6 d3             	movzx  edx,bl
c0023939:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002393d:	ec                   	in     al,dx
c002393e:	83 c4 1c             	add    esp,0x1c
c0023941:	5b                   	pop    ebx
c0023942:	5e                   	pop    esi
c0023943:	5f                   	pop    edi
c0023944:	5d                   	pop    ebp
c0023945:	c3                   	ret    

c0023946 <IDE::waitInterrupt(unsigned char)>:
c0023946:	55                   	push   ebp
c0023947:	57                   	push   edi
c0023948:	56                   	push   esi
c0023949:	53                   	push   ebx
c002394a:	31 db                	xor    ebx,ebx
c002394c:	83 ec 0c             	sub    esp,0xc
c002394f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023953:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023958:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023960:	89 e8                	mov    eax,ebp
c0023962:	84 c0                	test   al,al
c0023964:	75 34                	jne    c002399a <IDE::waitInterrupt(unsigned char)+0x54>
c0023966:	52                   	push   edx
c0023967:	6a 0c                	push   0xc
c0023969:	56                   	push   esi
c002396a:	57                   	push   edi
c002396b:	e8 28 ff ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023970:	83 c4 10             	add    esp,0x10
c0023973:	a8 01                	test   al,0x1
c0023975:	75 2b                	jne    c00239a2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023977:	f6 c3 04             	test   bl,0x4
c002397a:	75 16                	jne    c0023992 <IDE::waitInterrupt(unsigned char)+0x4c>
c002397c:	83 fb 32             	cmp    ebx,0x32
c002397f:	7e 11                	jle    c0023992 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023981:	50                   	push   eax
c0023982:	50                   	push   eax
c0023983:	6a 00                	push   0x0
c0023985:	68 80 96 98 00       	push   0x989680
c002398a:	e8 fa ad ff ff       	call   c001e789 <nanoSleep(unsigned long long)>
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	83 fb 3c             	cmp    ebx,0x3c
c0023995:	74 0b                	je     c00239a2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023997:	43                   	inc    ebx
c0023998:	eb be                	jmp    c0023958 <IDE::waitInterrupt(unsigned char)+0x12>
c002399a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00239a2:	83 c4 0c             	add    esp,0xc
c00239a5:	89 e8                	mov    eax,ebp
c00239a7:	5b                   	pop    ebx
c00239a8:	5e                   	pop    esi
c00239a9:	5f                   	pop    edi
c00239aa:	5d                   	pop    ebp
c00239ab:	c3                   	ret    

c00239ac <ideChannel0IRQHandler(regs*, void*)>:
c00239ac:	83 ec 10             	sub    esp,0x10
c00239af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239b3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239ba:	6a 07                	push   0x7
c00239bc:	6a 00                	push   0x0
c00239be:	50                   	push   eax
c00239bf:	e8 d4 fe ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c00239c4:	83 c4 1c             	add    esp,0x1c
c00239c7:	c3                   	ret    

c00239c8 <ideChannel1IRQHandler(regs*, void*)>:
c00239c8:	83 ec 10             	sub    esp,0x10
c00239cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239cf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00239d6:	6a 07                	push   0x7
c00239d8:	6a 01                	push   0x1
c00239da:	50                   	push   eax
c00239db:	e8 b8 fe ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c00239e0:	83 c4 1c             	add    esp,0x1c
c00239e3:	c3                   	ret    

c00239e4 <IDE::enableIRQs(unsigned char, bool)>:
c00239e4:	57                   	push   edi
c00239e5:	56                   	push   esi
c00239e6:	be 04 00 00 00       	mov    esi,0x4
c00239eb:	53                   	push   ebx
c00239ec:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00239f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239f5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00239fa:	0f 94 c0             	sete   al
c00239fd:	d1 e0                	shl    eax,1
c00239ff:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a06:	0f b6 c0             	movzx  eax,al
c0023a09:	50                   	push   eax
c0023a0a:	6a 0c                	push   0xc
c0023a0c:	57                   	push   edi
c0023a0d:	53                   	push   ebx
c0023a0e:	e8 c5 fd ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a13:	83 c4 10             	add    esp,0x10
c0023a16:	50                   	push   eax
c0023a17:	6a 0c                	push   0xc
c0023a19:	57                   	push   edi
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 78 fe ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023a20:	83 c4 10             	add    esp,0x10
c0023a23:	4e                   	dec    esi
c0023a24:	75 f0                	jne    c0023a16 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a26:	5b                   	pop    ebx
c0023a27:	5e                   	pop    esi
c0023a28:	5f                   	pop    edi
c0023a29:	c3                   	ret    

c0023a2a <IDE::open(int, int, void*)>:
c0023a2a:	55                   	push   ebp
c0023a2b:	57                   	push   edi
c0023a2c:	56                   	push   esi
c0023a2d:	53                   	push   ebx
c0023a2e:	83 ec 1c             	sub    esp,0x1c
c0023a31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a35:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a3e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a47:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a4e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a55:	0f 85 b0 02 00 00    	jne    c0023d0b <IDE::open(int, int, void*)+0x2e1>
c0023a5b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a61:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a65:	83 e0 7f             	and    eax,0x7f
c0023a68:	3c 05                	cmp    al,0x5
c0023a6a:	74 04                	je     c0023a70 <IDE::open(int, int, void*)+0x46>
c0023a6c:	3c 0f                	cmp    al,0xf
c0023a6e:	75 32                	jne    c0023aa2 <IDE::open(int, int, void*)+0x78>
c0023a70:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023a76:	83 e0 fc             	and    eax,0xfffffffc
c0023a79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a80:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023a86:	83 e0 fc             	and    eax,0xfffffffc
c0023a89:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a90:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023a96:	83 e0 fc             	and    eax,0xfffffffc
c0023a99:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023aa0:	eb 14                	jmp    c0023ab6 <IDE::open(int, int, void*)+0x8c>
c0023aa2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023aac:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ab6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023abd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023ac4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ac8:	89 c6                	mov    esi,eax
c0023aca:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023acf:	c1 e6 10             	shl    esi,0x10
c0023ad2:	89 e8                	mov    eax,ebp
c0023ad4:	89 fa                	mov    edx,edi
c0023ad6:	c1 e0 0b             	shl    eax,0xb
c0023ad9:	09 f0                	or     eax,esi
c0023adb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023ae2:	c1 e6 08             	shl    esi,0x8
c0023ae5:	09 c6                	or     esi,eax
c0023ae7:	89 f0                	mov    eax,esi
c0023ae9:	0d 08 00 00 80       	or     eax,0x80000008
c0023aee:	ef                   	out    dx,eax
c0023aef:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023af4:	89 ca                	mov    edx,ecx
c0023af6:	ed                   	in     eax,dx
c0023af7:	c1 e8 10             	shr    eax,0x10
c0023afa:	3d ff ff 00 00       	cmp    eax,0xffff
c0023aff:	0f 84 f5 00 00 00    	je     c0023bfa <IDE::open(int, int, void*)+0x1d0>
c0023b05:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b0b:	89 fa                	mov    edx,edi
c0023b0d:	89 f0                	mov    eax,esi
c0023b0f:	ef                   	out    dx,eax
c0023b10:	b0 fe                	mov    al,0xfe
c0023b12:	89 ca                	mov    edx,ecx
c0023b14:	ee                   	out    dx,al
c0023b15:	89 f0                	mov    eax,esi
c0023b17:	89 fa                	mov    edx,edi
c0023b19:	ef                   	out    dx,eax
c0023b1a:	89 ca                	mov    edx,ecx
c0023b1c:	ed                   	in     eax,dx
c0023b1d:	3c fe                	cmp    al,0xfe
c0023b1f:	0f 85 a9 00 00 00    	jne    c0023bce <IDE::open(int, int, void*)+0x1a4>
c0023b25:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c0023b2b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b32:	74 33                	je     c0023b67 <IDE::open(int, int, void*)+0x13d>
c0023b34:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b3a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b3e:	40                   	inc    eax
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	0f b6 c0             	movzx  eax,al
c0023b45:	50                   	push   eax
c0023b46:	55                   	push   ebp
c0023b47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b4b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b51:	51                   	push   ecx
c0023b52:	e8 45 48 ff ff       	call   c001839c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b57:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b5c:	83 c4 1c             	add    esp,0x1c
c0023b5f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b65:	eb 0a                	jmp    c0023b71 <IDE::open(int, int, void*)+0x147>
c0023b67:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023b71:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023b78:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023b7f:	c1 e1 10             	shl    ecx,0x10
c0023b82:	c1 e0 08             	shl    eax,0x8
c0023b85:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b8a:	09 c1                	or     ecx,eax
c0023b8c:	89 fa                	mov    edx,edi
c0023b8e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023b95:	c1 e0 0b             	shl    eax,0xb
c0023b98:	09 c1                	or     ecx,eax
c0023b9a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023ba0:	89 c8                	mov    eax,ecx
c0023ba2:	ef                   	out    dx,eax
c0023ba3:	be fc 0c 00 00       	mov    esi,0xcfc
c0023ba8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023bae:	89 f2                	mov    edx,esi
c0023bb0:	ee                   	out    dx,al
c0023bb1:	89 c8                	mov    eax,ecx
c0023bb3:	89 fa                	mov    edx,edi
c0023bb5:	ef                   	out    dx,eax
c0023bb6:	89 f2                	mov    edx,esi
c0023bb8:	ed                   	in     eax,dx
c0023bb9:	0f b6 c0             	movzx  eax,al
c0023bbc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023bc2:	74 46                	je     c0023c0a <IDE::open(int, int, void*)+0x1e0>
c0023bc4:	83 ec 0c             	sub    esp,0xc
c0023bc7:	68 c0 d4 02 c0       	push   0xc002d4c0
c0023bcc:	eb 34                	jmp    c0023c02 <IDE::open(int, int, void*)+0x1d8>
c0023bce:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023bd7:	75 17                	jne    c0023bf0 <IDE::open(int, int, void*)+0x1c6>
c0023bd9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023bde:	74 07                	je     c0023be7 <IDE::open(int, int, void*)+0x1bd>
c0023be0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023be5:	75 09                	jne    c0023bf0 <IDE::open(int, int, void*)+0x1c6>
c0023be7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023bee:	eb 1a                	jmp    c0023c0a <IDE::open(int, int, void*)+0x1e0>
c0023bf0:	83 ec 0c             	sub    esp,0xc
c0023bf3:	68 c8 d4 02 c0       	push   0xc002d4c8
c0023bf8:	eb 08                	jmp    c0023c02 <IDE::open(int, int, void*)+0x1d8>
c0023bfa:	83 ec 0c             	sub    esp,0xc
c0023bfd:	68 f9 d4 02 c0       	push   0xc002d4f9
c0023c02:	e8 88 6c ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0023c07:	83 c4 10             	add    esp,0x10
c0023c0a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c11:	79 1a                	jns    c0023c2d <IDE::open(int, int, void*)+0x203>
c0023c13:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c19:	83 e0 fc             	and    eax,0xfffffffc
c0023c1c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c23:	83 c0 08             	add    eax,0x8
c0023c26:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c33:	89 c2                	mov    edx,eax
c0023c35:	83 e2 0f             	and    edx,0xf
c0023c38:	66 83 fa 08          	cmp    dx,0x8
c0023c3c:	75 0a                	jne    c0023c48 <IDE::open(int, int, void*)+0x21e>
c0023c3e:	83 e8 02             	sub    eax,0x2
c0023c41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c48:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c4e:	89 c2                	mov    edx,eax
c0023c50:	83 e2 0f             	and    edx,0xf
c0023c53:	66 83 fa 08          	cmp    dx,0x8
c0023c57:	75 0a                	jne    c0023c63 <IDE::open(int, int, void*)+0x239>
c0023c59:	83 e8 02             	sub    eax,0x2
c0023c5c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c63:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023c6a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023c71:	89 d0                	mov    eax,edx
c0023c73:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c7a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023c7e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023c81:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c86:	0f b6 c9             	movzx  ecx,cl
c0023c89:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023c90:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023c93:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023c97:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023c9b:	8d 50 02             	lea    edx,[eax+0x2]
c0023c9e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ca3:	0f b6 d2             	movzx  edx,dl
c0023ca6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023cac:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023caf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cb3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023cb7:	8d 48 03             	lea    ecx,[eax+0x3]
c0023cba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cbf:	0f b6 c9             	movzx  ecx,cl
c0023cc2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023cc8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023ccb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023ccf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023cd3:	8d 50 04             	lea    edx,[eax+0x4]
c0023cd6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023cdc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ce1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023ce8:	66 85 f6             	test   si,si
c0023ceb:	74 3e                	je     c0023d2b <IDE::open(int, int, void*)+0x301>
c0023ced:	0f b6 d2             	movzx  edx,dl
c0023cf0:	83 c0 05             	add    eax,0x5
c0023cf3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023cf6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cfa:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023cfe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d04:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d09:	eb 20                	jmp    c0023d2b <IDE::open(int, int, void*)+0x301>
c0023d0b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d15:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d1f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d26:	e9 02 ff ff ff       	jmp    c0023c2d <IDE::open(int, int, void*)+0x203>
c0023d2b:	52                   	push   edx
c0023d2c:	52                   	push   edx
c0023d2d:	6a 00                	push   0x0
c0023d2f:	53                   	push   ebx
c0023d30:	e8 7d fa ff ff       	call   c00237b2 <IDE::prepareInterrupt(unsigned char)>
c0023d35:	59                   	pop    ecx
c0023d36:	5e                   	pop    esi
c0023d37:	6a 01                	push   0x1
c0023d39:	53                   	push   ebx
c0023d3a:	e8 73 fa ff ff       	call   c00237b2 <IDE::prepareInterrupt(unsigned char)>
c0023d3f:	83 c4 0c             	add    esp,0xc
c0023d42:	6a 00                	push   0x0
c0023d44:	6a 00                	push   0x0
c0023d46:	53                   	push   ebx
c0023d47:	e8 98 fc ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0023d4c:	83 c4 0c             	add    esp,0xc
c0023d4f:	6a 00                	push   0x0
c0023d51:	6a 01                	push   0x1
c0023d53:	53                   	push   ebx
c0023d54:	e8 8b fc ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0023d59:	83 c4 10             	add    esp,0x10
c0023d5c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d63:	74 40                	je     c0023da5 <IDE::open(int, int, void*)+0x37b>
c0023d65:	83 ec 0c             	sub    esp,0xc
c0023d68:	68 23 d5 02 c0       	push   0xc002d523
c0023d6d:	e8 61 f1 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0023d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d75:	6a 01                	push   0x1
c0023d77:	68 ac 39 02 c0       	push   0xc00239ac
c0023d7c:	6a 0e                	push   0xe
c0023d7e:	53                   	push   ebx
c0023d7f:	e8 08 05 ff ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d84:	83 c4 14             	add    esp,0x14
c0023d87:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d8d:	53                   	push   ebx
c0023d8e:	6a 01                	push   0x1
c0023d90:	68 c8 39 02 c0       	push   0xc00239c8
c0023d95:	6a 0f                	push   0xf
c0023d97:	53                   	push   ebx
c0023d98:	e8 ef 04 ff ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d9d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023da3:	eb 4a                	jmp    c0023def <IDE::open(int, int, void*)+0x3c5>
c0023da5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023daf:	50                   	push   eax
c0023db0:	6a 0f                	push   0xf
c0023db2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023db8:	68 3f d5 02 c0       	push   0xc002d53f
c0023dbd:	e8 11 f1 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0023dc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dc5:	6a 00                	push   0x0
c0023dc7:	68 ac 39 02 c0       	push   0xc00239ac
c0023dcc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023dd2:	53                   	push   ebx
c0023dd3:	e8 b4 04 ff ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dd8:	83 c4 14             	add    esp,0x14
c0023ddb:	53                   	push   ebx
c0023ddc:	6a 00                	push   0x0
c0023dde:	68 c8 39 02 c0       	push   0xc00239c8
c0023de3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023de9:	53                   	push   ebx
c0023dea:	e8 9d 04 ff ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023def:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023df1:	83 c4 20             	add    esp,0x20
c0023df4:	83 ec 0c             	sub    esp,0xc
c0023df7:	53                   	push   ebx
c0023df8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023dfb:	83 c4 0c             	add    esp,0xc
c0023dfe:	6a 07                	push   0x7
c0023e00:	6a 00                	push   0x0
c0023e02:	53                   	push   ebx
c0023e03:	e8 90 fa ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023e08:	83 c4 0c             	add    esp,0xc
c0023e0b:	6a 07                	push   0x7
c0023e0d:	6a 01                	push   0x1
c0023e0f:	53                   	push   ebx
c0023e10:	e8 83 fa ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023e15:	83 c4 0c             	add    esp,0xc
c0023e18:	6a 01                	push   0x1
c0023e1a:	6a 00                	push   0x0
c0023e1c:	53                   	push   ebx
c0023e1d:	e8 c2 fb ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0023e22:	83 c4 0c             	add    esp,0xc
c0023e25:	6a 01                	push   0x1
c0023e27:	6a 01                	push   0x1
c0023e29:	53                   	push   ebx
c0023e2a:	e8 b5 fb ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0023e2f:	83 c4 2c             	add    esp,0x2c
c0023e32:	31 c0                	xor    eax,eax
c0023e34:	5b                   	pop    ebx
c0023e35:	5e                   	pop    esi
c0023e36:	5f                   	pop    edi
c0023e37:	5d                   	pop    ebp
c0023e38:	c3                   	ret    
c0023e39:	90                   	nop

c0023e3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e3a:	55                   	push   ebp
c0023e3b:	57                   	push   edi
c0023e3c:	56                   	push   esi
c0023e3d:	53                   	push   ebx
c0023e3e:	83 ec 1c             	sub    esp,0x1c
c0023e41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e49:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e50:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e54:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e58:	80 fa 03             	cmp    dl,0x3
c0023e5b:	77 5d                	ja     c0023eba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e5d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e65:	0f b6 db             	movzx  ebx,bl
c0023e68:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023e6b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023e6f:	83 ca 80             	or     edx,0xffffff80
c0023e72:	0f b6 d2             	movzx  edx,dl
c0023e75:	52                   	push   edx
c0023e76:	6a 0c                	push   0xc
c0023e78:	53                   	push   ebx
c0023e79:	56                   	push   esi
c0023e7a:	e8 59 f9 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e7f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023e8c:	0f b6 c0             	movzx  eax,al
c0023e8f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023e93:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023e95:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023e9a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023e9e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023ea2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ea6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023eae:	83 c4 2c             	add    esp,0x2c
c0023eb1:	5b                   	pop    ebx
c0023eb2:	5e                   	pop    esi
c0023eb3:	5f                   	pop    edi
c0023eb4:	5d                   	pop    ebp
c0023eb5:	e9 1e f9 ff ff       	jmp    c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eba:	3c 07                	cmp    al,0x7
c0023ebc:	77 10                	ja     c0023ece <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023ebe:	0f b6 db             	movzx  ebx,bl
c0023ec1:	0f b6 d0             	movzx  edx,al
c0023ec4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023ecc:	eb 2d                	jmp    c0023efb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ece:	3c 0d                	cmp    al,0xd
c0023ed0:	77 13                	ja     c0023ee5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023ed2:	0f b6 db             	movzx  ebx,bl
c0023ed5:	0f b6 c0             	movzx  eax,al
c0023ed8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023edf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023ee3:	eb 16                	jmp    c0023efb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ee5:	3c 15                	cmp    al,0x15
c0023ee7:	77 14                	ja     c0023efd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023ee9:	0f b6 db             	movzx  ebx,bl
c0023eec:	0f b6 c0             	movzx  eax,al
c0023eef:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023ef7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023efb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023efd:	83 c4 1c             	add    esp,0x1c
c0023f00:	5b                   	pop    ebx
c0023f01:	5e                   	pop    esi
c0023f02:	5f                   	pop    edi
c0023f03:	5d                   	pop    ebp
c0023f04:	c3                   	ret    
c0023f05:	90                   	nop

c0023f06 <IDE::detect()>:
c0023f06:	55                   	push   ebp
c0023f07:	57                   	push   edi
c0023f08:	56                   	push   esi
c0023f09:	53                   	push   ebx
c0023f0a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f10:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f17:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f1e:	0f 85 be 02 00 00    	jne    c00241e2 <IDE::detect()+0x2dc>
c0023f24:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f2b:	31 f6                	xor    esi,esi
c0023f2d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f35:	31 ed                	xor    ebp,ebp
c0023f37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f3b:	c1 e0 06             	shl    eax,0x6
c0023f3e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f46:	89 e8                	mov    eax,ebp
c0023f48:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f4c:	c1 e0 04             	shl    eax,0x4
c0023f4f:	83 c8 a0             	or     eax,0xffffffa0
c0023f52:	0f b6 c0             	movzx  eax,al
c0023f55:	50                   	push   eax
c0023f56:	6a 06                	push   0x6
c0023f58:	56                   	push   esi
c0023f59:	53                   	push   ebx
c0023f5a:	e8 79 f8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f5f:	83 c4 0c             	add    esp,0xc
c0023f62:	6a 0c                	push   0xc
c0023f64:	56                   	push   esi
c0023f65:	53                   	push   ebx
c0023f66:	e8 2d f9 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023f6b:	83 c4 0c             	add    esp,0xc
c0023f6e:	6a 0c                	push   0xc
c0023f70:	56                   	push   esi
c0023f71:	53                   	push   ebx
c0023f72:	e8 21 f9 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023f77:	83 c4 0c             	add    esp,0xc
c0023f7a:	6a 0c                	push   0xc
c0023f7c:	56                   	push   esi
c0023f7d:	53                   	push   ebx
c0023f7e:	e8 15 f9 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023f83:	83 c4 0c             	add    esp,0xc
c0023f86:	6a 0c                	push   0xc
c0023f88:	56                   	push   esi
c0023f89:	53                   	push   ebx
c0023f8a:	e8 09 f9 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023f8f:	68 ec 00 00 00       	push   0xec
c0023f94:	6a 07                	push   0x7
c0023f96:	56                   	push   esi
c0023f97:	53                   	push   ebx
c0023f98:	e8 3b f8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f9d:	83 c4 1c             	add    esp,0x1c
c0023fa0:	6a 0c                	push   0xc
c0023fa2:	56                   	push   esi
c0023fa3:	53                   	push   ebx
c0023fa4:	e8 ef f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023fa9:	83 c4 0c             	add    esp,0xc
c0023fac:	6a 0c                	push   0xc
c0023fae:	56                   	push   esi
c0023faf:	53                   	push   ebx
c0023fb0:	e8 e3 f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023fb5:	83 c4 0c             	add    esp,0xc
c0023fb8:	6a 0c                	push   0xc
c0023fba:	56                   	push   esi
c0023fbb:	53                   	push   ebx
c0023fbc:	e8 d7 f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023fc1:	83 c4 0c             	add    esp,0xc
c0023fc4:	6a 0c                	push   0xc
c0023fc6:	56                   	push   esi
c0023fc7:	53                   	push   ebx
c0023fc8:	e8 cb f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023fcd:	83 c4 0c             	add    esp,0xc
c0023fd0:	6a 0c                	push   0xc
c0023fd2:	56                   	push   esi
c0023fd3:	53                   	push   ebx
c0023fd4:	e8 bf f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023fd9:	83 c4 10             	add    esp,0x10
c0023fdc:	84 c0                	test   al,al
c0023fde:	0f 84 8b 01 00 00    	je     c002416f <IDE::detect()+0x269>
c0023fe4:	31 ff                	xor    edi,edi
c0023fe6:	50                   	push   eax
c0023fe7:	6a 0c                	push   0xc
c0023fe9:	56                   	push   esi
c0023fea:	53                   	push   ebx
c0023feb:	e8 a8 f8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0023ff0:	83 c4 10             	add    esp,0x10
c0023ff3:	a8 01                	test   al,0x1
c0023ff5:	0f 85 8e 01 00 00    	jne    c0024189 <IDE::detect()+0x283>
c0023ffb:	84 c0                	test   al,al
c0023ffd:	78 04                	js     c0024003 <IDE::detect()+0xfd>
c0023fff:	a8 08                	test   al,0x8
c0024001:	75 27                	jne    c002402a <IDE::detect()+0x124>
c0024003:	47                   	inc    edi
c0024004:	81 ff 17 01 00 00    	cmp    edi,0x117
c002400a:	7e da                	jle    c0023fe6 <IDE::detect()+0xe0>
c002400c:	50                   	push   eax
c002400d:	50                   	push   eax
c002400e:	6a 00                	push   0x0
c0024010:	68 40 4b 4c 00       	push   0x4c4b40
c0024015:	e8 6f a7 ff ff       	call   c001e789 <nanoSleep(unsigned long long)>
c002401a:	83 c4 10             	add    esp,0x10
c002401d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024023:	75 c1                	jne    c0023fe6 <IDE::detect()+0xe0>
c0024025:	e9 5f 01 00 00       	jmp    c0024189 <IDE::detect()+0x283>
c002402a:	31 c9                	xor    ecx,ecx
c002402c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024030:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024034:	83 ec 0c             	sub    esp,0xc
c0024037:	68 80 00 00 00       	push   0x80
c002403c:	57                   	push   edi
c002403d:	6a 00                	push   0x0
c002403f:	56                   	push   esi
c0024040:	53                   	push   ebx
c0024041:	e8 f4 fd ff ff       	call   c0023e3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024046:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002404b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002404f:	89 d1                	mov    ecx,edx
c0024051:	c1 e0 06             	shl    eax,0x6
c0024054:	01 d8                	add    eax,ebx
c0024056:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002405d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024064:	89 f2                	mov    edx,esi
c0024066:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002406c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024070:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024076:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002407a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024081:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024089:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024090:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024098:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002409e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00240a5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240ab:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240b3:	83 c4 20             	add    esp,0x20
c00240b6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240b9:	83 c0 02             	add    eax,0x2
c00240bc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240c2:	83 c7 02             	add    edi,0x2
c00240c5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00240c8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00240ce:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00240d2:	75 e2                	jne    c00240b6 <IDE::detect()+0x1b0>
c00240d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240d8:	c1 e0 06             	shl    eax,0x6
c00240db:	01 d8                	add    eax,ebx
c00240dd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00240e3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00240ea:	66 c1 ea 09          	shr    dx,0x9
c00240ee:	83 e2 01             	and    edx,0x1
c00240f1:	84 c9                	test   cl,cl
c00240f3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00240f9:	75 2f                	jne    c002412a <IDE::detect()+0x224>
c00240fb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024101:	85 c0                	test   eax,eax
c0024103:	74 66                	je     c002416b <IDE::detect()+0x265>
c0024105:	50                   	push   eax
c0024106:	55                   	push   ebp
c0024107:	56                   	push   esi
c0024108:	68 5b d5 02 c0       	push   0xc002d55b
c002410d:	e8 c1 ed fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024112:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024119:	e8 fe b7 fe ff       	call   c000f91c <malloc>
c002411e:	89 c7                	mov    edi,eax
c0024120:	89 04 24             	mov    DWORD PTR [esp],eax
c0024123:	e8 78 06 00 00       	call   c00247a0 <ATA::ATA()>
c0024128:	eb 28                	jmp    c0024152 <IDE::detect()+0x24c>
c002412a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024130:	55                   	push   ebp
c0024131:	56                   	push   esi
c0024132:	68 8a d5 02 c0       	push   0xc002d58a
c0024137:	e8 97 ed fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002413c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024143:	e8 d4 b7 fe ff       	call   c000f91c <malloc>
c0024148:	89 c7                	mov    edi,eax
c002414a:	89 04 24             	mov    DWORD PTR [esp],eax
c002414d:	e8 8e 0c 00 00       	call   c0024de0 <ATAPI::ATAPI()>
c0024152:	5a                   	pop    edx
c0024153:	59                   	pop    ecx
c0024154:	57                   	push   edi
c0024155:	53                   	push   ebx
c0024156:	e8 ad 01 ff ff       	call   c0014308 <Device::addChild(Device*)>
c002415b:	8b 07                	mov    eax,DWORD PTR [edi]
c002415d:	53                   	push   ebx
c002415e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024162:	6a 00                	push   0x0
c0024164:	57                   	push   edi
c0024165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024168:	83 c4 20             	add    esp,0x20
c002416b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002416f:	4d                   	dec    ebp
c0024170:	74 0a                	je     c002417c <IDE::detect()+0x276>
c0024172:	bd 01 00 00 00       	mov    ebp,0x1
c0024177:	e9 bb fd ff ff       	jmp    c0023f37 <IDE::detect()+0x31>
c002417c:	4e                   	dec    esi
c002417d:	74 63                	je     c00241e2 <IDE::detect()+0x2dc>
c002417f:	be 01 00 00 00       	mov    esi,0x1
c0024184:	e9 ac fd ff ff       	jmp    c0023f35 <IDE::detect()+0x2f>
c0024189:	50                   	push   eax
c002418a:	6a 04                	push   0x4
c002418c:	56                   	push   esi
c002418d:	53                   	push   ebx
c002418e:	e8 05 f7 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0024193:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024197:	83 c4 0c             	add    esp,0xc
c002419a:	6a 05                	push   0x5
c002419c:	56                   	push   esi
c002419d:	53                   	push   ebx
c002419e:	e8 f5 f6 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c00241a3:	83 c4 10             	add    esp,0x10
c00241a6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241aa:	80 fa 14             	cmp    dl,0x14
c00241ad:	75 04                	jne    c00241b3 <IDE::detect()+0x2ad>
c00241af:	3c eb                	cmp    al,0xeb
c00241b1:	eb 07                	jmp    c00241ba <IDE::detect()+0x2b4>
c00241b3:	3c 96                	cmp    al,0x96
c00241b5:	75 b8                	jne    c002416f <IDE::detect()+0x269>
c00241b7:	80 fa 69             	cmp    dl,0x69
c00241ba:	75 b3                	jne    c002416f <IDE::detect()+0x269>
c00241bc:	68 a1 00 00 00       	push   0xa1
c00241c1:	6a 07                	push   0x7
c00241c3:	56                   	push   esi
c00241c4:	53                   	push   ebx
c00241c5:	e8 0e f6 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ca:	5f                   	pop    edi
c00241cb:	58                   	pop    eax
c00241cc:	6a 00                	push   0x0
c00241ce:	68 40 42 0f 00       	push   0xf4240
c00241d3:	e8 b1 a5 ff ff       	call   c001e789 <nanoSleep(unsigned long long)>
c00241d8:	83 c4 10             	add    esp,0x10
c00241db:	b1 01                	mov    cl,0x1
c00241dd:	e9 4a fe ff ff       	jmp    c002402c <IDE::detect()+0x126>
c00241e2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00241e8:	5b                   	pop    ebx
c00241e9:	5e                   	pop    esi
c00241ea:	5f                   	pop    edi
c00241eb:	5d                   	pop    ebp
c00241ec:	c3                   	ret    
c00241ed:	90                   	nop

c00241ee <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00241ee:	55                   	push   ebp
c00241ef:	57                   	push   edi
c00241f0:	56                   	push   esi
c00241f1:	53                   	push   ebx
c00241f2:	83 ec 1c             	sub    esp,0x1c
c00241f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00241f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00241fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024201:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024205:	88 c3                	mov    bl,al
c0024207:	84 c0                	test   al,al
c0024209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002420d:	0f 84 67 01 00 00    	je     c002437a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024213:	83 ec 0c             	sub    esp,0xc
c0024216:	68 bb d5 02 c0       	push   0xc002d5bb
c002421b:	e8 b3 ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024220:	83 c4 10             	add    esp,0x10
c0024223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024227:	3c 01                	cmp    al,0x1
c0024229:	75 17                	jne    c0024242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002422b:	83 ec 0c             	sub    esp,0xc
c002422e:	b3 13                	mov    bl,0x13
c0024230:	68 c7 d5 02 c0       	push   0xc002d5c7
c0024235:	e8 99 ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002423a:	83 c4 10             	add    esp,0x10
c002423d:	e9 25 01 00 00       	jmp    c0024367 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024242:	3c 02                	cmp    al,0x2
c0024244:	0f 85 ef 00 00 00    	jne    c0024339 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002424a:	d1 e6                	shl    esi,1
c002424c:	09 ee                	or     esi,ebp
c002424e:	52                   	push   edx
c002424f:	89 f0                	mov    eax,esi
c0024251:	6a 01                	push   0x1
c0024253:	0f b6 f0             	movzx  esi,al
c0024256:	c1 e6 06             	shl    esi,0x6
c0024259:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024261:	50                   	push   eax
c0024262:	57                   	push   edi
c0024263:	e8 30 f6 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	89 c6                	mov    esi,eax
c002426d:	a8 01                	test   al,0x1
c002426f:	74 12                	je     c0024283 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024271:	83 ec 0c             	sub    esp,0xc
c0024274:	b3 07                	mov    bl,0x7
c0024276:	68 dc d5 02 c0       	push   0xc002d5dc
c002427b:	e8 53 ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024280:	83 c4 10             	add    esp,0x10
c0024283:	f7 c6 02 00 00 00    	test   esi,0x2
c0024289:	74 12                	je     c002429d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002428b:	83 ec 0c             	sub    esp,0xc
c002428e:	b3 03                	mov    bl,0x3
c0024290:	68 fa d5 02 c0       	push   0xc002d5fa
c0024295:	e8 39 ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002429a:	83 c4 10             	add    esp,0x10
c002429d:	f7 c6 04 00 00 00    	test   esi,0x4
c00242a3:	74 12                	je     c00242b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00242a5:	83 ec 0c             	sub    esp,0xc
c00242a8:	b3 14                	mov    bl,0x14
c00242aa:	68 1a d6 02 c0       	push   0xc002d61a
c00242af:	e8 1f ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00242b4:	83 c4 10             	add    esp,0x10
c00242b7:	f7 c6 08 00 00 00    	test   esi,0x8
c00242bd:	74 12                	je     c00242d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242bf:	83 ec 0c             	sub    esp,0xc
c00242c2:	b3 03                	mov    bl,0x3
c00242c4:	68 fa d5 02 c0       	push   0xc002d5fa
c00242c9:	e8 05 ec fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00242ce:	83 c4 10             	add    esp,0x10
c00242d1:	f7 c6 10 00 00 00    	test   esi,0x10
c00242d7:	74 12                	je     c00242eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00242d9:	83 ec 0c             	sub    esp,0xc
c00242dc:	b3 15                	mov    bl,0x15
c00242de:	68 32 d6 02 c0       	push   0xc002d632
c00242e3:	e8 eb eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00242e8:	83 c4 10             	add    esp,0x10
c00242eb:	f7 c6 20 00 00 00    	test   esi,0x20
c00242f1:	74 12                	je     c0024305 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00242f3:	83 ec 0c             	sub    esp,0xc
c00242f6:	b3 03                	mov    bl,0x3
c00242f8:	68 fa d5 02 c0       	push   0xc002d5fa
c00242fd:	e8 d1 eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024302:	83 c4 10             	add    esp,0x10
c0024305:	f7 c6 40 00 00 00    	test   esi,0x40
c002430b:	74 12                	je     c002431f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002430d:	83 ec 0c             	sub    esp,0xc
c0024310:	b3 16                	mov    bl,0x16
c0024312:	68 4c d6 02 c0       	push   0xc002d64c
c0024317:	e8 b7 eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002431c:	83 c4 10             	add    esp,0x10
c002431f:	89 f0                	mov    eax,esi
c0024321:	84 c0                	test   al,al
c0024323:	79 42                	jns    c0024367 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024325:	83 ec 0c             	sub    esp,0xc
c0024328:	b3 0d                	mov    bl,0xd
c002432a:	68 6d d6 02 c0       	push   0xc002d66d
c002432f:	e8 9f eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024334:	83 c4 10             	add    esp,0x10
c0024337:	eb 2e                	jmp    c0024367 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024339:	3c 03                	cmp    al,0x3
c002433b:	75 14                	jne    c0024351 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002433d:	83 ec 0c             	sub    esp,0xc
c0024340:	b3 17                	mov    bl,0x17
c0024342:	68 81 d6 02 c0       	push   0xc002d681
c0024347:	e8 87 eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002434c:	83 c4 10             	add    esp,0x10
c002434f:	eb 16                	jmp    c0024367 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024351:	3c 04                	cmp    al,0x4
c0024353:	75 12                	jne    c0024367 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024355:	83 ec 0c             	sub    esp,0xc
c0024358:	b3 08                	mov    bl,0x8
c002435a:	68 97 d6 02 c0       	push   0xc002d697
c002435f:	e8 6f eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024364:	83 c4 10             	add    esp,0x10
c0024367:	50                   	push   eax
c0024368:	50                   	push   eax
c0024369:	0f b6 c3             	movzx  eax,bl
c002436c:	50                   	push   eax
c002436d:	68 af d6 02 c0       	push   0xc002d6af
c0024372:	e8 5c eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024377:	83 c4 10             	add    esp,0x10
c002437a:	83 c4 1c             	add    esp,0x1c
c002437d:	88 d8                	mov    al,bl
c002437f:	5b                   	pop    ebx
c0024380:	5e                   	pop    esi
c0024381:	5f                   	pop    edi
c0024382:	5d                   	pop    ebp
c0024383:	c3                   	ret    

c0024384 <IDE::polling(unsigned char, unsigned int)>:
c0024384:	57                   	push   edi
c0024385:	56                   	push   esi
c0024386:	53                   	push   ebx
c0024387:	bb 04 00 00 00       	mov    ebx,0x4
c002438c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024390:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024395:	52                   	push   edx
c0024396:	6a 0c                	push   0xc
c0024398:	56                   	push   esi
c0024399:	57                   	push   edi
c002439a:	e8 f9 f4 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c002439f:	83 c4 10             	add    esp,0x10
c00243a2:	4b                   	dec    ebx
c00243a3:	75 f0                	jne    c0024395 <IDE::polling(unsigned char, unsigned int)+0x11>
c00243a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243aa:	50                   	push   eax
c00243ab:	6a 0c                	push   0xc
c00243ad:	56                   	push   esi
c00243ae:	57                   	push   edi
c00243af:	e8 e4 f4 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c00243b4:	83 c4 10             	add    esp,0x10
c00243b7:	a8 01                	test   al,0x1
c00243b9:	74 12                	je     c00243cd <IDE::polling(unsigned char, unsigned int)+0x49>
c00243bb:	83 ec 0c             	sub    esp,0xc
c00243be:	68 c9 d6 02 c0       	push   0xc002d6c9
c00243c3:	e8 0b eb fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00243c8:	83 c4 10             	add    esp,0x10
c00243cb:	eb 17                	jmp    c00243e4 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243cd:	a8 20                	test   al,0x20
c00243cf:	75 0f                	jne    c00243e0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00243d1:	4b                   	dec    ebx
c00243d2:	74 10                	je     c00243e4 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243d4:	84 c0                	test   al,al
c00243d6:	78 d2                	js     c00243aa <IDE::polling(unsigned char, unsigned int)+0x26>
c00243d8:	a8 08                	test   al,0x8
c00243da:	74 ce                	je     c00243aa <IDE::polling(unsigned char, unsigned int)+0x26>
c00243dc:	31 c0                	xor    eax,eax
c00243de:	eb 06                	jmp    c00243e6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00243e0:	b0 01                	mov    al,0x1
c00243e2:	eb 02                	jmp    c00243e6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00243e4:	b0 02                	mov    al,0x2
c00243e6:	5b                   	pop    ebx
c00243e7:	5e                   	pop    esi
c00243e8:	5f                   	pop    edi
c00243e9:	c3                   	ret    

c00243ea <SATABus::close(int, int, void*)>:
c00243ea:	31 c0                	xor    eax,eax
c00243ec:	c3                   	ret    
c00243ed:	90                   	nop

c00243ee <SATABus::detect()>:
c00243ee:	c3                   	ret    
c00243ef:	90                   	nop

c00243f0 <SATABus::SATABus()>:
c00243f0:	83 ec 0c             	sub    esp,0xc
c00243f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f7:	83 ec 08             	sub    esp,0x8
c00243fa:	68 0c d7 02 c0       	push   0xc002d70c
c00243ff:	50                   	push   eax
c0024400:	e8 9d 02 ff ff       	call   c00146a2 <HardDiskController::HardDiskController(char const*)>
c0024405:	83 c4 10             	add    esp,0x10
c0024408:	ba c8 d7 02 c0       	mov    edx,0xc002d7c8
c002440d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024411:	89 10                	mov    DWORD PTR [eax],edx
c0024413:	83 ec 0c             	sub    esp,0xc
c0024416:	6a 50                	push   0x50
c0024418:	e8 50 bc fe ff       	call   c001006d <Phys::allocateContiguousPages(int)>
c002441d:	83 c4 10             	add    esp,0x10
c0024420:	89 c2                	mov    edx,eax
c0024422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024426:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002442c:	83 ec 0c             	sub    esp,0xc
c002442f:	6a 50                	push   0x50
c0024431:	e8 97 d6 fe ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	89 c2                	mov    edx,eax
c002443b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002443f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024445:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c002444a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002444e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024458:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002445e:	83 ec 0c             	sub    esp,0xc
c0024461:	6a 03                	push   0x3
c0024463:	6a 50                	push   0x50
c0024465:	51                   	push   ecx
c0024466:	52                   	push   edx
c0024467:	50                   	push   eax
c0024468:	e8 8d e1 fe ff       	call   c00125fa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002446d:	83 c4 20             	add    esp,0x20
c0024470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024474:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002447a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002447e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024484:	83 ec 04             	sub    esp,0x4
c0024487:	52                   	push   edx
c0024488:	50                   	push   eax
c0024489:	68 30 d7 02 c0       	push   0xc002d730
c002448e:	e8 40 ea fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024493:	83 c4 10             	add    esp,0x10
c0024496:	90                   	nop
c0024497:	83 c4 0c             	add    esp,0xc
c002449a:	c3                   	ret    
c002449b:	90                   	nop

c002449c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002449c:	83 ec 0c             	sub    esp,0xc
c002449f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244a3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00244a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244a9:	09 c2                	or     edx,eax
c00244ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244b7:	31 c0                	xor    eax,eax
c00244b9:	c1 e9 08             	shr    ecx,0x8
c00244bc:	83 e1 0f             	and    ecx,0xf
c00244bf:	39 c8                	cmp    eax,ecx
c00244c1:	74 0a                	je     c00244cd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244c3:	f6 c2 01             	test   dl,0x1
c00244c6:	74 18                	je     c00244e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00244c8:	d1 ea                	shr    edx,1
c00244ca:	40                   	inc    eax
c00244cb:	eb f2                	jmp    c00244bf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00244cd:	83 ec 0c             	sub    esp,0xc
c00244d0:	68 54 d7 02 c0       	push   0xc002d754
c00244d5:	e8 b5 63 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00244da:	83 c4 10             	add    esp,0x10
c00244dd:	83 c8 ff             	or     eax,0xffffffff
c00244e0:	83 c4 0c             	add    esp,0xc
c00244e3:	c3                   	ret    

c00244e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00244e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244e8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00244eb:	89 c2                	mov    edx,eax
c00244ed:	c1 ea 08             	shr    edx,0x8
c00244f0:	83 e2 0f             	and    edx,0xf
c00244f3:	fe ca                	dec    dl
c00244f5:	75 31                	jne    c0024528 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00244f7:	83 e0 0f             	and    eax,0xf
c00244fa:	3c 03                	cmp    al,0x3
c00244fc:	75 2a                	jne    c0024528 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00244fe:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024501:	b8 02 00 00 00       	mov    eax,0x2
c0024506:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002450c:	74 1c                	je     c002452a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002450e:	b8 04 00 00 00       	mov    eax,0x4
c0024513:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024519:	74 0f                	je     c002452a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002451b:	31 c0                	xor    eax,eax
c002451d:	83 fa 03             	cmp    edx,0x3
c0024520:	0f 94 c0             	sete   al
c0024523:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024527:	c3                   	ret    
c0024528:	31 c0                	xor    eax,eax
c002452a:	c3                   	ret    
c002452b:	90                   	nop

c002452c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002452c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024530:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024533:	0f ba e2 0f          	bt     edx,0xf
c0024537:	72 f7                	jb     c0024530 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024539:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002453c:	83 ca 10             	or     edx,0x10
c002453f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024542:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024545:	83 ca 01             	or     edx,0x1
c0024548:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002454b:	c3                   	ret    

c002454c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002454c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024550:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024553:	83 e2 fe             	and    edx,0xfffffffe
c0024556:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024559:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002455c:	83 e2 ef             	and    edx,0xffffffef
c002455f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024562:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024565:	0f ba e2 0e          	bt     edx,0xe
c0024569:	72 f7                	jb     c0024562 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002456b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002456e:	0f ba e2 0f          	bt     edx,0xf
c0024572:	72 ee                	jb     c0024562 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024574:	c3                   	ret    
c0024575:	90                   	nop

c0024576 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024576:	55                   	push   ebp
c0024577:	57                   	push   edi
c0024578:	56                   	push   esi
c0024579:	53                   	push   ebx
c002457a:	83 ec 1c             	sub    esp,0x1c
c002457d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024581:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024585:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024589:	53                   	push   ebx
c002458a:	89 fd                	mov    ebp,edi
c002458c:	56                   	push   esi
c002458d:	c1 e5 0a             	shl    ebp,0xa
c0024590:	e8 b7 ff ff ff       	call   c002454c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024595:	83 ec 0c             	sub    esp,0xc
c0024598:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002459e:	01 e8                	add    eax,ebp
c00245a0:	89 03                	mov    DWORD PTR [ebx],eax
c00245a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245a4:	68 00 04 00 00       	push   0x400
c00245a9:	6a 00                	push   0x0
c00245ab:	50                   	push   eax
c00245ac:	e8 d7 c1 fd ff       	call   c0000788 <memset>
c00245b1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245b7:	89 fa                	mov    edx,edi
c00245b9:	01 e8                	add    eax,ebp
c00245bb:	c1 e7 0d             	shl    edi,0xd
c00245be:	89 03                	mov    DWORD PTR [ebx],eax
c00245c0:	c1 e2 08             	shl    edx,0x8
c00245c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00245ca:	81 c2 00 80 00 00    	add    edx,0x8000
c00245d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00245d4:	89 d0                	mov    eax,edx
c00245d6:	83 c4 1c             	add    esp,0x1c
c00245d9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00245df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00245e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00245e5:	68 00 01 00 00       	push   0x100
c00245ea:	6a 00                	push   0x0
c00245ec:	50                   	push   eax
c00245ed:	e8 96 c1 fd ff       	call   c0000788 <memset>
c00245f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245f6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00245fc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024602:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024606:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024609:	83 c4 10             	add    esp,0x10
c002460c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024613:	31 ff                	xor    edi,edi
c0024615:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002461b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024625:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002462b:	83 c5 20             	add    ebp,0x20
c002462e:	01 f8                	add    eax,edi
c0024630:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024633:	52                   	push   edx
c0024634:	68 00 01 00 00       	push   0x100
c0024639:	6a 00                	push   0x0
c002463b:	50                   	push   eax
c002463c:	e8 47 c1 fd ff       	call   c0000788 <memset>
c0024641:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024645:	83 c4 10             	add    esp,0x10
c0024648:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002464e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024655:	01 f8                	add    eax,edi
c0024657:	81 c7 00 01 00 00    	add    edi,0x100
c002465d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024660:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024666:	75 b3                	jne    c002461b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024668:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002466c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024670:	83 c4 1c             	add    esp,0x1c
c0024673:	5b                   	pop    ebx
c0024674:	5e                   	pop    esi
c0024675:	5f                   	pop    edi
c0024676:	5d                   	pop    ebp
c0024677:	e9 b0 fe ff ff       	jmp    c002452c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002467c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002467c:	55                   	push   ebp
c002467d:	57                   	push   edi
c002467e:	56                   	push   esi
c002467f:	53                   	push   ebx
c0024680:	31 db                	xor    ebx,ebx
c0024682:	83 ec 0c             	sub    esp,0xc
c0024685:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024689:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002468d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024690:	f7 c7 01 00 00 00    	test   edi,0x1
c0024696:	0f 84 aa 00 00 00    	je     c0024746 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002469c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246a0:	89 d8                	mov    eax,ebx
c00246a2:	c1 e0 07             	shl    eax,0x7
c00246a5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246ac:	55                   	push   ebp
c00246ad:	56                   	push   esi
c00246ae:	e8 31 fe ff ff       	call   c00244e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246b3:	5a                   	pop    edx
c00246b4:	83 f8 01             	cmp    eax,0x1
c00246b7:	59                   	pop    ecx
c00246b8:	75 30                	jne    c00246ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246ba:	50                   	push   eax
c00246bb:	50                   	push   eax
c00246bc:	53                   	push   ebx
c00246bd:	68 79 d7 02 c0       	push   0xc002d779
c00246c2:	e8 0c e8 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00246c7:	83 c4 0c             	add    esp,0xc
c00246ca:	53                   	push   ebx
c00246cb:	55                   	push   ebp
c00246cc:	56                   	push   esi
c00246cd:	e8 a4 fe ff ff       	call   c0024576 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246d2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00246d9:	e8 3e b2 fe ff       	call   c000f91c <malloc>
c00246de:	89 c5                	mov    ebp,eax
c00246e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00246e3:	e8 5c 0d 00 00       	call   c0025444 <SATA::SATA()>
c00246e8:	eb 33                	jmp    c002471d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00246ea:	83 f8 04             	cmp    eax,0x4
c00246ed:	75 47                	jne    c0024736 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00246ef:	50                   	push   eax
c00246f0:	50                   	push   eax
c00246f1:	53                   	push   ebx
c00246f2:	68 90 d7 02 c0       	push   0xc002d790
c00246f7:	e8 d7 e7 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00246fc:	83 c4 0c             	add    esp,0xc
c00246ff:	53                   	push   ebx
c0024700:	55                   	push   ebp
c0024701:	56                   	push   esi
c0024702:	e8 6f fe ff ff       	call   c0024576 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024707:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002470e:	e8 09 b2 fe ff       	call   c000f91c <malloc>
c0024713:	89 c5                	mov    ebp,eax
c0024715:	89 04 24             	mov    DWORD PTR [esp],eax
c0024718:	e8 d3 10 00 00       	call   c00257f0 <SATAPI::SATAPI()>
c002471d:	5a                   	pop    edx
c002471e:	59                   	pop    ecx
c002471f:	55                   	push   ebp
c0024720:	56                   	push   esi
c0024721:	e8 e2 fb fe ff       	call   c0014308 <Device::addChild(Device*)>
c0024726:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024729:	56                   	push   esi
c002472a:	6a 00                	push   0x0
c002472c:	53                   	push   ebx
c002472d:	55                   	push   ebp
c002472e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024731:	83 c4 20             	add    esp,0x20
c0024734:	eb 10                	jmp    c0024746 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024736:	50                   	push   eax
c0024737:	50                   	push   eax
c0024738:	53                   	push   ebx
c0024739:	68 a9 d7 02 c0       	push   0xc002d7a9
c002473e:	e8 90 e7 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024743:	83 c4 10             	add    esp,0x10
c0024746:	d1 ef                	shr    edi,1
c0024748:	43                   	inc    ebx
c0024749:	83 fb 20             	cmp    ebx,0x20
c002474c:	0f 85 3e ff ff ff    	jne    c0024690 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024752:	83 c4 0c             	add    esp,0xc
c0024755:	5b                   	pop    ebx
c0024756:	5e                   	pop    esi
c0024757:	5f                   	pop    edi
c0024758:	5d                   	pop    ebp
c0024759:	c3                   	ret    

c002475a <SATABus::open(int, int, void*)>:
c002475a:	83 ec 14             	sub    esp,0x14
c002475d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024761:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024767:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002476d:	52                   	push   edx
c002476e:	50                   	push   eax
c002476f:	e8 08 ff ff ff       	call   c002467c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024774:	31 c0                	xor    eax,eax
c0024776:	83 c4 1c             	add    esp,0x1c
c0024779:	c3                   	ret    

c002477a <ATA::close(int, int, void*)>:
c002477a:	83 ec 0c             	sub    esp,0xc
c002477d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024781:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024787:	85 c0                	test   eax,eax
c0024789:	74 0c                	je     c0024797 <ATA::close(int, int, void*)+0x1d>
c002478b:	83 ec 0c             	sub    esp,0xc
c002478e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024790:	50                   	push   eax
c0024791:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024794:	83 c4 10             	add    esp,0x10
c0024797:	31 c0                	xor    eax,eax
c0024799:	83 c4 0c             	add    esp,0xc
c002479c:	c3                   	ret    
c002479d:	90                   	nop

c002479e <ATA::powerSaving(PowerSavingLevel)>:
c002479e:	c3                   	ret    
c002479f:	90                   	nop

c00247a0 <ATA::ATA()>:
c00247a0:	83 ec 0c             	sub    esp,0xc
c00247a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247a7:	83 ec 04             	sub    esp,0x4
c00247aa:	68 00 02 00 00       	push   0x200
c00247af:	68 91 d8 02 c0       	push   0xc002d891
c00247b4:	50                   	push   eax
c00247b5:	e8 80 ff fe ff       	call   c001473a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247ba:	83 c4 10             	add    esp,0x10
c00247bd:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00247c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c6:	89 10                	mov    DWORD PTR [eax],edx
c00247c8:	90                   	nop
c00247c9:	83 c4 0c             	add    esp,0xc
c00247cc:	c3                   	ret    
c00247cd:	90                   	nop

c00247ce <ATA::flush(bool)>:
c00247ce:	53                   	push   ebx
c00247cf:	83 ec 08             	sub    esp,0x8
c00247d2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00247d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247db:	19 c0                	sbb    eax,eax
c00247dd:	83 e0 fd             	and    eax,0xfffffffd
c00247e0:	05 ea 00 00 00       	add    eax,0xea
c00247e5:	50                   	push   eax
c00247e6:	6a 07                	push   0x7
c00247e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247ef:	50                   	push   eax
c00247f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247f6:	e8 dd ef ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247fb:	83 c4 0c             	add    esp,0xc
c00247fe:	6a 00                	push   0x0
c0024800:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024807:	50                   	push   eax
c0024808:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002480e:	e8 71 fb ff ff       	call   c0024384 <IDE::polling(unsigned char, unsigned int)>
c0024813:	83 c4 18             	add    esp,0x18
c0024816:	5b                   	pop    ebx
c0024817:	c3                   	ret    

c0024818 <ATA::readyForCommand()>:
c0024818:	56                   	push   esi
c0024819:	53                   	push   ebx
c002481a:	31 db                	xor    ebx,ebx
c002481c:	50                   	push   eax
c002481d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024821:	50                   	push   eax
c0024822:	6a 0c                	push   0xc
c0024824:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002482b:	50                   	push   eax
c002482c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024832:	e8 61 f0 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0024837:	83 c4 10             	add    esp,0x10
c002483a:	a8 88                	test   al,0x88
c002483c:	74 23                	je     c0024861 <ATA::readyForCommand()+0x49>
c002483e:	43                   	inc    ebx
c002483f:	83 fb 63             	cmp    ebx,0x63
c0024842:	7e dd                	jle    c0024821 <ATA::readyForCommand()+0x9>
c0024844:	51                   	push   ecx
c0024845:	51                   	push   ecx
c0024846:	6a 00                	push   0x0
c0024848:	68 40 42 0f 00       	push   0xf4240
c002484d:	e8 37 9f ff ff       	call   c001e789 <nanoSleep(unsigned long long)>
c0024852:	83 c4 10             	add    esp,0x10
c0024855:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002485b:	75 c4                	jne    c0024821 <ATA::readyForCommand()+0x9>
c002485d:	31 c0                	xor    eax,eax
c002485f:	eb 02                	jmp    c0024863 <ATA::readyForCommand()+0x4b>
c0024861:	b0 01                	mov    al,0x1
c0024863:	5a                   	pop    edx
c0024864:	5b                   	pop    ebx
c0024865:	5e                   	pop    esi
c0024866:	c3                   	ret    
c0024867:	90                   	nop

c0024868 <ATA::access(unsigned long long, int, void*, bool)>:
c0024868:	55                   	push   ebp
c0024869:	57                   	push   edi
c002486a:	56                   	push   esi
c002486b:	53                   	push   ebx
c002486c:	83 ec 2c             	sub    esp,0x2c
c002486f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024873:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024877:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002487b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002487f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024883:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024887:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002488b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024895:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002489b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002489f:	c1 e0 06             	shl    eax,0x6
c00248a2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248aa:	74 5d                	je     c0024909 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248ac:	89 fa                	mov    edx,edi
c00248ae:	89 f0                	mov    eax,esi
c00248b0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248b4:	c1 ea 1c             	shr    edx,0x1c
c00248b7:	89 d1                	mov    ecx,edx
c00248b9:	09 c1                	or     ecx,eax
c00248bb:	74 25                	je     c00248e2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248bd:	31 ed                	xor    ebp,ebp
c00248bf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248c6:	89 fa                	mov    edx,edi
c00248c8:	89 f0                	mov    eax,esi
c00248ca:	0f ad d0             	shrd   eax,edx,cl
c00248cd:	d3 ea                	shr    edx,cl
c00248cf:	f6 c1 20             	test   cl,0x20
c00248d2:	74 02                	je     c00248d6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00248d4:	89 d0                	mov    eax,edx
c00248d6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00248da:	45                   	inc    ebp
c00248db:	83 fd 06             	cmp    ebp,0x6
c00248de:	75 df                	jne    c00248bf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00248e0:	eb 76                	jmp    c0024958 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00248e2:	89 f0                	mov    eax,esi
c00248e4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00248e9:	89 fa                	mov    edx,edi
c00248eb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00248f2:	0f ac d0 10          	shrd   eax,edx,0x10
c00248f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00248fb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00248ff:	c1 ee 18             	shr    esi,0x18
c0024902:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024907:	eb 56                	jmp    c002495f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024909:	6a 00                	push   0x0
c002490b:	6a 3f                	push   0x3f
c002490d:	57                   	push   edi
c002490e:	56                   	push   esi
c002490f:	e8 90 29 00 00       	call   c00272a4 <__umoddi3>
c0024914:	83 c4 10             	add    esp,0x10
c0024917:	40                   	inc    eax
c0024918:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002491c:	6a 00                	push   0x0
c002491e:	68 f0 03 00 00       	push   0x3f0
c0024923:	57                   	push   edi
c0024924:	56                   	push   esi
c0024925:	e8 7a 28 00 00       	call   c00271a4 <__udivdi3>
c002492a:	83 c4 10             	add    esp,0x10
c002492d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024932:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024939:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002493e:	6a 00                	push   0x0
c0024940:	6a 3f                	push   0x3f
c0024942:	57                   	push   edi
c0024943:	56                   	push   esi
c0024944:	e8 5b 28 00 00       	call   c00271a4 <__udivdi3>
c0024949:	83 c4 10             	add    esp,0x10
c002494c:	89 c6                	mov    esi,eax
c002494e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024953:	83 e6 0f             	and    esi,0xf
c0024956:	eb 07                	jmp    c002495f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024958:	31 f6                	xor    esi,esi
c002495a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002495f:	bf 01 00 00 00       	mov    edi,0x1
c0024964:	50                   	push   eax
c0024965:	6a 00                	push   0x0
c0024967:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002496e:	50                   	push   eax
c002496f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024973:	e8 6c f0 ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0024978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002497b:	e8 98 fe ff ff       	call   c0024818 <ATA::readyForCommand()>
c0024980:	83 c4 10             	add    esp,0x10
c0024983:	84 c0                	test   al,al
c0024985:	0f 84 5a 02 00 00    	je     c0024be5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002498b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024991:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024997:	c1 e0 04             	shl    eax,0x4
c002499a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00249a1:	09 c6                	or     esi,eax
c00249a3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249a8:	75 05                	jne    c00249af <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249aa:	83 ce a0             	or     esi,0xffffffa0
c00249ad:	eb 03                	jmp    c00249b2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249af:	83 ce e0             	or     esi,0xffffffe0
c00249b2:	89 f0                	mov    eax,esi
c00249b4:	0f b6 f0             	movzx  esi,al
c00249b7:	56                   	push   esi
c00249b8:	6a 06                	push   0x6
c00249ba:	51                   	push   ecx
c00249bb:	52                   	push   edx
c00249bc:	e8 17 ee ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249c1:	83 c4 10             	add    esp,0x10
c00249c4:	6a 00                	push   0x0
c00249c6:	6a 01                	push   0x1
c00249c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249cf:	50                   	push   eax
c00249d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249d6:	e8 fd ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249db:	83 c4 10             	add    esp,0x10
c00249de:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00249e3:	75 6e                	jne    c0024a53 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00249e5:	6a 00                	push   0x0
c00249e7:	6a 08                	push   0x8
c00249e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249f0:	50                   	push   eax
c00249f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249f7:	e8 dc ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249fc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a01:	50                   	push   eax
c0024a02:	6a 09                	push   0x9
c0024a04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a0b:	50                   	push   eax
c0024a0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a12:	e8 c1 ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a17:	83 c4 20             	add    esp,0x20
c0024a1a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a1f:	50                   	push   eax
c0024a20:	6a 0a                	push   0xa
c0024a22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a29:	50                   	push   eax
c0024a2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a30:	e8 a3 ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a35:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a3a:	50                   	push   eax
c0024a3b:	6a 0b                	push   0xb
c0024a3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a44:	50                   	push   eax
c0024a45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a4b:	e8 88 ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a50:	83 c4 20             	add    esp,0x20
c0024a53:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a58:	50                   	push   eax
c0024a59:	6a 02                	push   0x2
c0024a5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a62:	50                   	push   eax
c0024a63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a69:	e8 6a ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a6e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024a73:	50                   	push   eax
c0024a74:	6a 03                	push   0x3
c0024a76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a7d:	50                   	push   eax
c0024a7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a84:	e8 4f ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a89:	83 c4 20             	add    esp,0x20
c0024a8c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024a91:	50                   	push   eax
c0024a92:	6a 04                	push   0x4
c0024a94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a9b:	50                   	push   eax
c0024a9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa2:	e8 31 ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024aac:	50                   	push   eax
c0024aad:	6a 05                	push   0x5
c0024aaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab6:	50                   	push   eax
c0024ab7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abd:	e8 16 ed ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac2:	83 c4 20             	add    esp,0x20
c0024ac5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024aca:	0f 94 c0             	sete   al
c0024acd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024ad2:	74 09                	je     c0024add <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024ad4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024adb:	eb 07                	jmp    c0024ae4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024add:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024ae4:	0f b6 c0             	movzx  eax,al
c0024ae7:	50                   	push   eax
c0024ae8:	6a 07                	push   0x7
c0024aea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af1:	50                   	push   eax
c0024af2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af8:	e8 db ec ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024afd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b01:	83 c4 10             	add    esp,0x10
c0024b04:	85 f6                	test   esi,esi
c0024b06:	0f 84 ba 00 00 00    	je     c0024bc6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b0c:	50                   	push   eax
c0024b0d:	6a 01                	push   0x1
c0024b0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b16:	50                   	push   eax
c0024b17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b1d:	e8 62 f8 ff ff       	call   c0024384 <IDE::polling(unsigned char, unsigned int)>
c0024b22:	83 c4 10             	add    esp,0x10
c0024b25:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b2b:	84 c0                	test   al,al
c0024b2d:	74 2c                	je     c0024b5b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b2f:	0f b6 f8             	movzx  edi,al
c0024b32:	0f b6 d2             	movzx  edx,dl
c0024b35:	57                   	push   edi
c0024b36:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b3d:	50                   	push   eax
c0024b3e:	52                   	push   edx
c0024b3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b45:	e8 a4 f6 ff ff       	call   c00241ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b4a:	c7 04 24 ec d7 02 c0 	mov    DWORD PTR [esp],0xc002d7ec
c0024b51:	e8 7d e3 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0024b56:	e9 87 00 00 00       	jmp    c0024be2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b5b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b60:	74 33                	je     c0024b95 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b62:	31 ed                	xor    ebp,ebp
c0024b64:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024b68:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024b6c:	50                   	push   eax
c0024b6d:	50                   	push   eax
c0024b6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b75:	50                   	push   eax
c0024b76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b7c:	e8 45 ec ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c0024b81:	89 c2                	mov    edx,eax
c0024b83:	89 f8                	mov    eax,edi
c0024b85:	66 ef                	out    dx,ax
c0024b87:	45                   	inc    ebp
c0024b88:	83 c4 10             	add    esp,0x10
c0024b8b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024b91:	75 d1                	jne    c0024b64 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024b93:	eb 23                	jmp    c0024bb8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024b95:	0f b6 d2             	movzx  edx,dl
c0024b98:	51                   	push   ecx
c0024b99:	51                   	push   ecx
c0024b9a:	52                   	push   edx
c0024b9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba1:	e8 20 ec ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c0024ba6:	b9 00 01 00 00       	mov    ecx,0x100
c0024bab:	89 c2                	mov    edx,eax
c0024bad:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024bb1:	fc                   	cld    
c0024bb2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024bb5:	83 c4 10             	add    esp,0x10
c0024bb8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bc0:	4e                   	dec    esi
c0024bc1:	e9 3e ff ff ff       	jmp    c0024b04 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024bc6:	31 ff                	xor    edi,edi
c0024bc8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bcd:	74 16                	je     c0024be5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024bcf:	50                   	push   eax
c0024bd0:	50                   	push   eax
c0024bd1:	31 c0                	xor    eax,eax
c0024bd3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024bd8:	0f 94 c0             	sete   al
c0024bdb:	50                   	push   eax
c0024bdc:	53                   	push   ebx
c0024bdd:	e8 ec fb ff ff       	call   c00247ce <ATA::flush(bool)>
c0024be2:	83 c4 10             	add    esp,0x10
c0024be5:	83 c4 2c             	add    esp,0x2c
c0024be8:	89 f8                	mov    eax,edi
c0024bea:	5b                   	pop    ebx
c0024beb:	5e                   	pop    esi
c0024bec:	5f                   	pop    edi
c0024bed:	5d                   	pop    ebp
c0024bee:	c3                   	ret    
c0024bef:	90                   	nop

c0024bf0 <ATA::read(unsigned long long, int, void*)>:
c0024bf0:	57                   	push   edi
c0024bf1:	b8 04 00 00 00       	mov    eax,0x4
c0024bf6:	56                   	push   esi
c0024bf7:	53                   	push   ebx
c0024bf8:	83 ec 10             	sub    esp,0x10
c0024bfb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c03:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c06:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c0a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c0e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c14:	77 3b                	ja     c0024c51 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c16:	b8 06 00 00 00       	mov    eax,0x6
c0024c1b:	85 d2                	test   edx,edx
c0024c1d:	74 32                	je     c0024c51 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c1f:	50                   	push   eax
c0024c20:	50                   	push   eax
c0024c21:	6a 00                	push   0x0
c0024c23:	52                   	push   edx
c0024c24:	53                   	push   ebx
c0024c25:	57                   	push   edi
c0024c26:	56                   	push   esi
c0024c27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c2b:	e8 38 fc ff ff       	call   c0024868 <ATA::access(unsigned long long, int, void*, bool)>
c0024c30:	83 c4 20             	add    esp,0x20
c0024c33:	85 c0                	test   eax,eax
c0024c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c39:	75 11                	jne    c0024c4c <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c3b:	01 1d 88 31 03 c0    	add    DWORD PTR ds:0xc0033188,ebx
c0024c41:	e8 92 bd fe ff       	call   c00109d8 <VgaText::updateDiskUsage()>
c0024c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c4a:	eb 05                	jmp    c0024c51 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c4c:	b8 01 00 00 00       	mov    eax,0x1
c0024c51:	83 c4 10             	add    esp,0x10
c0024c54:	5b                   	pop    ebx
c0024c55:	5e                   	pop    esi
c0024c56:	5f                   	pop    edi
c0024c57:	c3                   	ret    

c0024c58 <ATA::write(unsigned long long, int, void*)>:
c0024c58:	57                   	push   edi
c0024c59:	b8 04 00 00 00       	mov    eax,0x4
c0024c5e:	56                   	push   esi
c0024c5f:	53                   	push   ebx
c0024c60:	83 ec 10             	sub    esp,0x10
c0024c63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c67:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c6b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c6e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c76:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c7c:	77 3b                	ja     c0024cb9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c7e:	b8 06 00 00 00       	mov    eax,0x6
c0024c83:	85 d2                	test   edx,edx
c0024c85:	74 32                	je     c0024cb9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c87:	50                   	push   eax
c0024c88:	50                   	push   eax
c0024c89:	6a 01                	push   0x1
c0024c8b:	52                   	push   edx
c0024c8c:	53                   	push   ebx
c0024c8d:	57                   	push   edi
c0024c8e:	56                   	push   esi
c0024c8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c93:	e8 d0 fb ff ff       	call   c0024868 <ATA::access(unsigned long long, int, void*, bool)>
c0024c98:	83 c4 20             	add    esp,0x20
c0024c9b:	85 c0                	test   eax,eax
c0024c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ca1:	75 11                	jne    c0024cb4 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024ca3:	01 1d 84 31 03 c0    	add    DWORD PTR ds:0xc0033184,ebx
c0024ca9:	e8 2a bd fe ff       	call   c00109d8 <VgaText::updateDiskUsage()>
c0024cae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cb2:	eb 05                	jmp    c0024cb9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cb4:	b8 01 00 00 00       	mov    eax,0x1
c0024cb9:	83 c4 10             	add    esp,0x10
c0024cbc:	5b                   	pop    ebx
c0024cbd:	5e                   	pop    esi
c0024cbe:	5f                   	pop    edi
c0024cbf:	c3                   	ret    

c0024cc0 <ATA::detectCHS()>:
c0024cc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cc4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024cca:	c1 e0 06             	shl    eax,0x6
c0024ccd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024cd3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024cdd:	c7 44 24 04 f7 d7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d7f7
c0024ce5:	e9 a5 5b ff ff       	jmp    c001a88f <Krnl::panic(char const*)>

c0024cea <ATA::open(int, int, void*)>:
c0024cea:	53                   	push   ebx
c0024ceb:	83 ec 08             	sub    esp,0x8
c0024cee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024cfa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d00:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d06:	c1 e0 06             	shl    eax,0x6
c0024d09:	01 d0                	add    eax,edx
c0024d0b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d12:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d18:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d1f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d29:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d2f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d36:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d3d:	75 0c                	jne    c0024d4b <ATA::open(int, int, void*)+0x61>
c0024d3f:	83 ec 0c             	sub    esp,0xc
c0024d42:	53                   	push   ebx
c0024d43:	e8 78 ff ff ff       	call   c0024cc0 <ATA::detectCHS()>
c0024d48:	83 c4 10             	add    esp,0x10
c0024d4b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d51:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d57:	c1 e0 06             	shl    eax,0x6
c0024d5a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d61:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d6b:	d1 e8                	shr    eax,1
c0024d6d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024d73:	6a 04                	push   0x4
c0024d75:	6a 0c                	push   0xc
c0024d77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d7e:	50                   	push   eax
c0024d7f:	52                   	push   edx
c0024d80:	e8 53 ea ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d85:	90                   	nop
c0024d86:	90                   	nop
c0024d87:	6a 00                	push   0x0
c0024d89:	6a 0c                	push   0xc
c0024d8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d92:	50                   	push   eax
c0024d93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d99:	e8 3a ea ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d9e:	83 c4 14             	add    esp,0x14
c0024da1:	53                   	push   ebx
c0024da2:	e8 fb f9 fe ff       	call   c00147a2 <PhysicalDisk::startCache()>
c0024da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024daa:	e8 d3 1c ff ff       	call   c0016a82 <createPartitionsForDisk(PhysicalDisk*)>
c0024daf:	31 c0                	xor    eax,eax
c0024db1:	83 c4 18             	add    esp,0x18
c0024db4:	5b                   	pop    ebx
c0024db5:	c3                   	ret    

c0024db6 <ATAPI::write(unsigned long long, int, void*)>:
c0024db6:	b8 03 00 00 00       	mov    eax,0x3
c0024dbb:	c3                   	ret    

c0024dbc <ATAPI::close(int, int, void*)>:
c0024dbc:	83 ec 0c             	sub    esp,0xc
c0024dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024dc9:	85 c0                	test   eax,eax
c0024dcb:	74 0c                	je     c0024dd9 <ATAPI::close(int, int, void*)+0x1d>
c0024dcd:	83 ec 0c             	sub    esp,0xc
c0024dd0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024dd2:	50                   	push   eax
c0024dd3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024dd6:	83 c4 10             	add    esp,0x10
c0024dd9:	31 c0                	xor    eax,eax
c0024ddb:	83 c4 0c             	add    esp,0xc
c0024dde:	c3                   	ret    
c0024ddf:	90                   	nop

c0024de0 <ATAPI::ATAPI()>:
c0024de0:	83 ec 0c             	sub    esp,0xc
c0024de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024de7:	83 ec 04             	sub    esp,0x4
c0024dea:	68 00 08 00 00       	push   0x800
c0024def:	68 31 d9 02 c0       	push   0xc002d931
c0024df4:	50                   	push   eax
c0024df5:	e8 40 f9 fe ff       	call   c001473a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024dfa:	83 c4 10             	add    esp,0x10
c0024dfd:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c0024e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e06:	89 10                	mov    DWORD PTR [eax],edx
c0024e08:	90                   	nop
c0024e09:	83 c4 0c             	add    esp,0xc
c0024e0c:	c3                   	ret    
c0024e0d:	90                   	nop

c0024e0e <ATAPI::readyForCommand()>:
c0024e0e:	56                   	push   esi
c0024e0f:	53                   	push   ebx
c0024e10:	31 db                	xor    ebx,ebx
c0024e12:	50                   	push   eax
c0024e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e17:	50                   	push   eax
c0024e18:	6a 0c                	push   0xc
c0024e1a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e21:	50                   	push   eax
c0024e22:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e28:	e8 6b ea ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0024e2d:	83 c4 10             	add    esp,0x10
c0024e30:	a8 88                	test   al,0x88
c0024e32:	74 23                	je     c0024e57 <ATAPI::readyForCommand()+0x49>
c0024e34:	43                   	inc    ebx
c0024e35:	83 fb 63             	cmp    ebx,0x63
c0024e38:	7e dd                	jle    c0024e17 <ATAPI::readyForCommand()+0x9>
c0024e3a:	51                   	push   ecx
c0024e3b:	51                   	push   ecx
c0024e3c:	6a 00                	push   0x0
c0024e3e:	68 40 42 0f 00       	push   0xf4240
c0024e43:	e8 41 99 ff ff       	call   c001e789 <nanoSleep(unsigned long long)>
c0024e48:	83 c4 10             	add    esp,0x10
c0024e4b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e51:	75 c4                	jne    c0024e17 <ATAPI::readyForCommand()+0x9>
c0024e53:	31 c0                	xor    eax,eax
c0024e55:	eb 02                	jmp    c0024e59 <ATAPI::readyForCommand()+0x4b>
c0024e57:	b0 01                	mov    al,0x1
c0024e59:	5a                   	pop    edx
c0024e5a:	5b                   	pop    ebx
c0024e5b:	5e                   	pop    esi
c0024e5c:	c3                   	ret    
c0024e5d:	90                   	nop

c0024e5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e5e:	55                   	push   ebp
c0024e5f:	57                   	push   edi
c0024e60:	56                   	push   esi
c0024e61:	53                   	push   ebx
c0024e62:	83 ec 20             	sub    esp,0x20
c0024e65:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e69:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024e6d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024e71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024e75:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024e79:	6a 01                	push   0x1
c0024e7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e82:	50                   	push   eax
c0024e83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e89:	e8 56 eb ff ff       	call   c00239e4 <IDE::enableIRQs(unsigned char, bool)>
c0024e8e:	5e                   	pop    esi
c0024e8f:	58                   	pop    eax
c0024e90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e97:	50                   	push   eax
c0024e98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e9e:	e8 0f e9 ff ff       	call   c00237b2 <IDE::prepareInterrupt(unsigned char)>
c0024ea3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024ea6:	e8 63 ff ff ff       	call   c0024e0e <ATAPI::readyForCommand()>
c0024eab:	83 c4 10             	add    esp,0x10
c0024eae:	84 c0                	test   al,al
c0024eb0:	75 0a                	jne    c0024ebc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024eb2:	bb 01 00 00 00       	mov    ebx,0x1
c0024eb7:	e9 57 02 00 00       	jmp    c0025113 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ebc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ec2:	c1 e0 04             	shl    eax,0x4
c0024ec5:	0f b6 c0             	movzx  eax,al
c0024ec8:	50                   	push   eax
c0024ec9:	6a 06                	push   0x6
c0024ecb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ed2:	50                   	push   eax
c0024ed3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ed9:	e8 fa e8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ede:	6a 00                	push   0x0
c0024ee0:	6a 01                	push   0x1
c0024ee2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ee9:	50                   	push   eax
c0024eea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ef0:	e8 e3 e8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ef5:	83 c4 20             	add    esp,0x20
c0024ef8:	0f b6 c3             	movzx  eax,bl
c0024efb:	0f b6 df             	movzx  ebx,bh
c0024efe:	50                   	push   eax
c0024eff:	6a 04                	push   0x4
c0024f01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f08:	50                   	push   eax
c0024f09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f0f:	e8 c4 e8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f14:	53                   	push   ebx
c0024f15:	6a 05                	push   0x5
c0024f17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f1e:	50                   	push   eax
c0024f1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f25:	e8 ae e8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f2a:	83 c4 20             	add    esp,0x20
c0024f2d:	68 a0 00 00 00       	push   0xa0
c0024f32:	6a 07                	push   0x7
c0024f34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f3b:	50                   	push   eax
c0024f3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f42:	e8 91 e8 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f47:	83 c4 0c             	add    esp,0xc
c0024f4a:	6a 01                	push   0x1
c0024f4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f53:	50                   	push   eax
c0024f54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f5a:	e8 25 f4 ff ff       	call   c0024384 <IDE::polling(unsigned char, unsigned int)>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f68:	84 c0                	test   al,al
c0024f6a:	74 23                	je     c0024f8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024f6c:	0f b6 d8             	movzx  ebx,al
c0024f6f:	0f b6 d2             	movzx  edx,dl
c0024f72:	53                   	push   ebx
c0024f73:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024f7a:	50                   	push   eax
c0024f7b:	52                   	push   edx
c0024f7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f82:	e8 67 f2 ff ff       	call   c00241ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f87:	83 c4 10             	add    esp,0x10
c0024f8a:	e9 84 01 00 00       	jmp    c0025113 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f8f:	0f b6 d2             	movzx  edx,dl
c0024f92:	53                   	push   ebx
c0024f93:	53                   	push   ebx
c0024f94:	52                   	push   edx
c0024f95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f9b:	e8 26 e8 ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c0024fa0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fa4:	b9 06 00 00 00       	mov    ecx,0x6
c0024fa9:	89 c2                	mov    edx,eax
c0024fab:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fae:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fb2:	83 c4 10             	add    esp,0x10
c0024fb5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fbb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fc2:	85 db                	test   ebx,ebx
c0024fc4:	0f 84 ec 00 00 00    	je     c00250b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024fca:	51                   	push   ecx
c0024fcb:	51                   	push   ecx
c0024fcc:	52                   	push   edx
c0024fcd:	50                   	push   eax
c0024fce:	e8 73 e9 ff ff       	call   c0023946 <IDE::waitInterrupt(unsigned char)>
c0024fd3:	83 c4 10             	add    esp,0x10
c0024fd6:	84 c0                	test   al,al
c0024fd8:	0f 84 d4 fe ff ff    	je     c0024eb2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024fde:	56                   	push   esi
c0024fdf:	56                   	push   esi
c0024fe0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fe7:	50                   	push   eax
c0024fe8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fee:	e8 bf e7 ff ff       	call   c00237b2 <IDE::prepareInterrupt(unsigned char)>
c0024ff3:	83 c4 0c             	add    esp,0xc
c0024ff6:	6a 04                	push   0x4
c0024ff8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fff:	50                   	push   eax
c0025000:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025006:	e8 8d e8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c002500b:	83 c4 0c             	add    esp,0xc
c002500e:	89 c6                	mov    esi,eax
c0025010:	6a 05                	push   0x5
c0025012:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025019:	50                   	push   eax
c002501a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025020:	e8 73 e8 ff ff       	call   c0023898 <IDE::read(unsigned char, unsigned char)>
c0025025:	89 f1                	mov    ecx,esi
c0025027:	0f b6 c0             	movzx  eax,al
c002502a:	0f b6 f1             	movzx  esi,cl
c002502d:	c1 e0 08             	shl    eax,0x8
c0025030:	09 c6                	or     esi,eax
c0025032:	d1 fe                	sar    esi,1
c0025034:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025038:	83 c4 10             	add    esp,0x10
c002503b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025040:	74 41                	je     c0025083 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025042:	31 c9                	xor    ecx,ecx
c0025044:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002504a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025051:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025055:	75 0a                	jne    c0025061 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025057:	01 c9                	add    ecx,ecx
c0025059:	01 cd                	add    ebp,ecx
c002505b:	4b                   	dec    ebx
c002505c:	e9 54 ff ff ff       	jmp    c0024fb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025061:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025066:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002506a:	51                   	push   ecx
c002506b:	51                   	push   ecx
c002506c:	52                   	push   edx
c002506d:	50                   	push   eax
c002506e:	e8 53 e7 ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c0025073:	89 c2                	mov    edx,eax
c0025075:	89 f0                	mov    eax,esi
c0025077:	66 ef                	out    dx,ax
c0025079:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002507d:	83 c4 10             	add    esp,0x10
c0025080:	41                   	inc    ecx
c0025081:	eb c1                	jmp    c0025044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025083:	31 f6                	xor    esi,esi
c0025085:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002508b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025092:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025096:	75 06                	jne    c002509e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025098:	01 f6                	add    esi,esi
c002509a:	01 f5                	add    ebp,esi
c002509c:	eb bd                	jmp    c002505b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002509e:	51                   	push   ecx
c002509f:	51                   	push   ecx
c00250a0:	52                   	push   edx
c00250a1:	50                   	push   eax
c00250a2:	e8 1f e7 ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c00250a7:	89 c2                	mov    edx,eax
c00250a9:	66 ed                	in     ax,dx
c00250ab:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250b0:	83 c4 10             	add    esp,0x10
c00250b3:	46                   	inc    esi
c00250b4:	eb cf                	jmp    c0025085 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250b6:	51                   	push   ecx
c00250b7:	51                   	push   ecx
c00250b8:	52                   	push   edx
c00250b9:	50                   	push   eax
c00250ba:	e8 87 e8 ff ff       	call   c0023946 <IDE::waitInterrupt(unsigned char)>
c00250bf:	83 c4 10             	add    esp,0x10
c00250c2:	84 c0                	test   al,al
c00250c4:	0f 84 e8 fd ff ff    	je     c0024eb2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250ca:	bb a0 86 01 00       	mov    ebx,0x186a0
c00250cf:	52                   	push   edx
c00250d0:	52                   	push   edx
c00250d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250d8:	50                   	push   eax
c00250d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250df:	e8 ce e6 ff ff       	call   c00237b2 <IDE::prepareInterrupt(unsigned char)>
c00250e4:	83 c4 10             	add    esp,0x10
c00250e7:	50                   	push   eax
c00250e8:	50                   	push   eax
c00250e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250f0:	50                   	push   eax
c00250f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250f7:	e8 ca e6 ff ff       	call   c00237c6 <IDE::getBase(unsigned char)>
c00250fc:	8d 50 07             	lea    edx,[eax+0x7]
c00250ff:	ec                   	in     al,dx
c0025100:	83 c4 10             	add    esp,0x10
c0025103:	a8 88                	test   al,0x88
c0025105:	74 0a                	je     c0025111 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025107:	4b                   	dec    ebx
c0025108:	75 dd                	jne    c00250e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002510a:	bb 02 00 00 00       	mov    ebx,0x2
c002510f:	eb 02                	jmp    c0025113 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025111:	31 db                	xor    ebx,ebx
c0025113:	83 c4 1c             	add    esp,0x1c
c0025116:	89 d8                	mov    eax,ebx
c0025118:	5b                   	pop    ebx
c0025119:	5e                   	pop    esi
c002511a:	5f                   	pop    edi
c002511b:	5d                   	pop    ebp
c002511c:	c3                   	ret    
c002511d:	90                   	nop

c002511e <ATAPI::diskRemoved()>:
c002511e:	83 ec 18             	sub    esp,0x18
c0025121:	68 3d d9 02 c0       	push   0xc002d93d
c0025126:	e8 a8 dd fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002512b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002512f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025136:	83 c4 1c             	add    esp,0x1c
c0025139:	c3                   	ret    

c002513a <ATAPI::eject()>:
c002513a:	57                   	push   edi
c002513b:	b9 03 00 00 00       	mov    ecx,0x3
c0025140:	53                   	push   ebx
c0025141:	83 ec 14             	sub    esp,0x14
c0025144:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025148:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002514c:	fc                   	cld    
c002514d:	31 c0                	xor    eax,eax
c002514f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025151:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025156:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002515b:	50                   	push   eax
c002515c:	50                   	push   eax
c002515d:	6a 00                	push   0x0
c002515f:	6a 00                	push   0x0
c0025161:	6a 00                	push   0x0
c0025163:	6a 02                	push   0x2
c0025165:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025169:	50                   	push   eax
c002516a:	53                   	push   ebx
c002516b:	e8 ee fc ff ff       	call   c0024e5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025170:	83 c4 14             	add    esp,0x14
c0025173:	53                   	push   ebx
c0025174:	e8 a5 ff ff ff       	call   c002511e <ATAPI::diskRemoved()>
c0025179:	83 c4 24             	add    esp,0x24
c002517c:	31 c0                	xor    eax,eax
c002517e:	5b                   	pop    ebx
c002517f:	5f                   	pop    edi
c0025180:	c3                   	ret    
c0025181:	90                   	nop

c0025182 <ATAPI::diskInserted()>:
c0025182:	53                   	push   ebx
c0025183:	83 ec 14             	sub    esp,0x14
c0025186:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002518a:	68 54 d9 02 c0       	push   0xc002d954
c002518f:	e8 3f dd fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0025194:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002519b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002519e:	e8 ff f5 fe ff       	call   c00147a2 <PhysicalDisk::startCache()>
c00251a3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251a7:	83 c4 18             	add    esp,0x18
c00251aa:	5b                   	pop    ebx
c00251ab:	e9 d2 18 ff ff       	jmp    c0016a82 <createPartitionsForDisk(PhysicalDisk*)>

c00251b0 <ATAPI::detectMedia()>:
c00251b0:	56                   	push   esi
c00251b1:	53                   	push   ebx
c00251b2:	83 ec 28             	sub    esp,0x28
c00251b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251b9:	6a 0c                	push   0xc
c00251bb:	6a 00                	push   0x0
c00251bd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251c1:	56                   	push   esi
c00251c2:	e8 c1 b5 fd ff       	call   c0000788 <memset>
c00251c7:	58                   	pop    eax
c00251c8:	5a                   	pop    edx
c00251c9:	6a 00                	push   0x0
c00251cb:	6a 00                	push   0x0
c00251cd:	6a 00                	push   0x0
c00251cf:	6a 00                	push   0x0
c00251d1:	56                   	push   esi
c00251d2:	53                   	push   ebx
c00251d3:	e8 86 fc ff ff       	call   c0024e5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251d8:	83 c4 1c             	add    esp,0x1c
c00251db:	6a 0c                	push   0xc
c00251dd:	6a 00                	push   0x0
c00251df:	56                   	push   esi
c00251e0:	e8 a3 b5 fd ff       	call   c0000788 <memset>
c00251e5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251ea:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251ef:	59                   	pop    ecx
c00251f0:	58                   	pop    eax
c00251f1:	6a 01                	push   0x1
c00251f3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00251f7:	50                   	push   eax
c00251f8:	6a 00                	push   0x0
c00251fa:	6a 12                	push   0x12
c00251fc:	56                   	push   esi
c00251fd:	53                   	push   ebx
c00251fe:	e8 5b fc ff ff       	call   c0024e5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025203:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025207:	83 c4 20             	add    esp,0x20
c002520a:	83 e0 7f             	and    eax,0x7f
c002520d:	3c 70                	cmp    al,0x70
c002520f:	74 15                	je     c0025226 <ATAPI::detectMedia()+0x76>
c0025211:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025218:	75 0c                	jne    c0025226 <ATAPI::detectMedia()+0x76>
c002521a:	83 ec 0c             	sub    esp,0xc
c002521d:	53                   	push   ebx
c002521e:	e8 5f ff ff ff       	call   c0025182 <ATAPI::diskInserted()>
c0025223:	83 c4 10             	add    esp,0x10
c0025226:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002522a:	83 e0 0f             	and    eax,0xf
c002522d:	3c 02                	cmp    al,0x2
c002522f:	75 1b                	jne    c002524c <ATAPI::detectMedia()+0x9c>
c0025231:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025236:	75 2d                	jne    c0025265 <ATAPI::detectMedia()+0xb5>
c0025238:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002523f:	74 24                	je     c0025265 <ATAPI::detectMedia()+0xb5>
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	53                   	push   ebx
c0025245:	e8 d4 fe ff ff       	call   c002511e <ATAPI::diskRemoved()>
c002524a:	eb 16                	jmp    c0025262 <ATAPI::detectMedia()+0xb2>
c002524c:	84 c0                	test   al,al
c002524e:	75 15                	jne    c0025265 <ATAPI::detectMedia()+0xb5>
c0025250:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025257:	75 0c                	jne    c0025265 <ATAPI::detectMedia()+0xb5>
c0025259:	83 ec 0c             	sub    esp,0xc
c002525c:	53                   	push   ebx
c002525d:	e8 20 ff ff ff       	call   c0025182 <ATAPI::diskInserted()>
c0025262:	83 c4 10             	add    esp,0x10
c0025265:	83 c4 24             	add    esp,0x24
c0025268:	5b                   	pop    ebx
c0025269:	5e                   	pop    esi
c002526a:	c3                   	ret    
c002526b:	90                   	nop

c002526c <ATAPI::open(int, int, void*)>:
c002526c:	53                   	push   ebx
c002526d:	83 ec 08             	sub    esp,0x8
c0025270:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002527c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025282:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025288:	c1 e0 06             	shl    eax,0x6
c002528b:	01 d0                	add    eax,edx
c002528d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025294:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002529a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252a1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252ab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252b1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252b8:	6a 04                	push   0x4
c00252ba:	6a 0c                	push   0xc
c00252bc:	51                   	push   ecx
c00252bd:	52                   	push   edx
c00252be:	e8 15 e5 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252c3:	90                   	nop
c00252c4:	90                   	nop
c00252c5:	6a 00                	push   0x0
c00252c7:	6a 0c                	push   0xc
c00252c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252d0:	50                   	push   eax
c00252d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252d7:	e8 fc e4 ff ff       	call   c00237d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252dc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00252e3:	83 c4 14             	add    esp,0x14
c00252e6:	53                   	push   ebx
c00252e7:	e8 c4 fe ff ff       	call   c00251b0 <ATAPI::detectMedia()>
c00252ec:	31 c0                	xor    eax,eax
c00252ee:	83 c4 18             	add    esp,0x18
c00252f1:	5b                   	pop    ebx
c00252f2:	c3                   	ret    
c00252f3:	90                   	nop

c00252f4 <ATAPI::read(unsigned long long, int, void*)>:
c00252f4:	55                   	push   ebp
c00252f5:	57                   	push   edi
c00252f6:	56                   	push   esi
c00252f7:	53                   	push   ebx
c00252f8:	83 ec 1c             	sub    esp,0x1c
c00252fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00252ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025303:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025307:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002530e:	74 41                	je     c0025351 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025310:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025314:	b9 03 00 00 00       	mov    ecx,0x3
c0025319:	fc                   	cld    
c002531a:	31 c0                	xor    eax,eax
c002531c:	86 fb                	xchg   bl,bh
c002531e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025320:	c1 c3 10             	rol    ebx,0x10
c0025323:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025328:	89 e8                	mov    eax,ebp
c002532a:	86 fb                	xchg   bl,bh
c002532c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025330:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025334:	50                   	push   eax
c0025335:	50                   	push   eax
c0025336:	55                   	push   ebp
c0025337:	c1 e5 0b             	shl    ebp,0xb
c002533a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002533e:	6a 00                	push   0x0
c0025340:	55                   	push   ebp
c0025341:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025345:	50                   	push   eax
c0025346:	56                   	push   esi
c0025347:	e8 12 fb ff ff       	call   c0024e5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002534c:	83 c4 20             	add    esp,0x20
c002534f:	eb 1a                	jmp    c002536b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025351:	83 ec 0c             	sub    esp,0xc
c0025354:	56                   	push   esi
c0025355:	e8 56 fe ff ff       	call   c00251b0 <ATAPI::detectMedia()>
c002535a:	83 c4 10             	add    esp,0x10
c002535d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025364:	75 aa                	jne    c0025310 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025366:	b8 02 00 00 00       	mov    eax,0x2
c002536b:	83 c4 1c             	add    esp,0x1c
c002536e:	5b                   	pop    ebx
c002536f:	5e                   	pop    esi
c0025370:	5f                   	pop    edi
c0025371:	5d                   	pop    ebp
c0025372:	c3                   	ret    
c0025373:	90                   	nop

c0025374 <SATA::close(int, int, void*)>:
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025381:	85 c0                	test   eax,eax
c0025383:	74 0c                	je     c0025391 <SATA::close(int, int, void*)+0x1d>
c0025385:	83 ec 0c             	sub    esp,0xc
c0025388:	8b 10                	mov    edx,DWORD PTR [eax]
c002538a:	50                   	push   eax
c002538b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002538e:	83 c4 10             	add    esp,0x10
c0025391:	31 c0                	xor    eax,eax
c0025393:	83 c4 0c             	add    esp,0xc
c0025396:	c3                   	ret    
c0025397:	90                   	nop

c0025398 <SATA::powerSaving(PowerSavingLevel)>:
c0025398:	c3                   	ret    
c0025399:	90                   	nop

c002539a <SATA::open(int, int, void*)>:
c002539a:	56                   	push   esi
c002539b:	53                   	push   ebx
c002539c:	50                   	push   eax
c002539d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253af:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253b5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253d3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00253da:	e8 a9 ab fe ff       	call   c000ff88 <Phys::allocatePage()>
c00253df:	89 c6                	mov    esi,eax
c00253e1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00253e7:	81 c6 00 10 00 00    	add    esi,0x1000
c00253ed:	e8 96 ab fe ff       	call   c000ff88 <Phys::allocatePage()>
c00253f2:	39 c6                	cmp    esi,eax
c00253f4:	74 10                	je     c0025406 <SATA::open(int, int, void*)+0x6c>
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	68 7c d8 02 c0       	push   0xc002d87c
c00253fe:	e8 8c 54 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0025403:	83 c4 10             	add    esp,0x10
c0025406:	83 ec 0c             	sub    esp,0xc
c0025409:	6a 02                	push   0x2
c002540b:	e8 bd c6 fe ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0025410:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025416:	6a 03                	push   0x3
c0025418:	50                   	push   eax
c0025419:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002541f:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0025425:	e8 da ce fe ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c002542a:	83 c4 14             	add    esp,0x14
c002542d:	53                   	push   ebx
c002542e:	e8 6f f3 fe ff       	call   c00147a2 <PhysicalDisk::startCache()>
c0025433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025436:	e8 47 16 ff ff       	call   c0016a82 <createPartitionsForDisk(PhysicalDisk*)>
c002543b:	83 c4 14             	add    esp,0x14
c002543e:	31 c0                	xor    eax,eax
c0025440:	5b                   	pop    ebx
c0025441:	5e                   	pop    esi
c0025442:	c3                   	ret    
c0025443:	90                   	nop

c0025444 <SATA::SATA()>:
c0025444:	83 ec 0c             	sub    esp,0xc
c0025447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544b:	83 ec 04             	sub    esp,0x4
c002544e:	68 00 02 00 00       	push   0x200
c0025453:	68 90 d8 02 c0       	push   0xc002d890
c0025458:	50                   	push   eax
c0025459:	e8 dc f2 fe ff       	call   c001473a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002545e:	83 c4 10             	add    esp,0x10
c0025461:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c0025466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546a:	89 10                	mov    DWORD PTR [eax],edx
c002546c:	90                   	nop
c002546d:	83 c4 0c             	add    esp,0xc
c0025470:	c3                   	ret    
c0025471:	90                   	nop

c0025472 <SATA::access(unsigned long long, int, void*, bool)>:
c0025472:	55                   	push   ebp
c0025473:	57                   	push   edi
c0025474:	56                   	push   esi
c0025475:	53                   	push   ebx
c0025476:	83 ec 2c             	sub    esp,0x2c
c0025479:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002547d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025485:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025489:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002548d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025496:	7e 10                	jle    c00254a8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025498:	83 ec 0c             	sub    esp,0xc
c002549b:	68 a0 d8 02 c0       	push   0xc002d8a0
c00254a0:	e8 ea 53 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00254a5:	83 c4 10             	add    esp,0x10
c00254a8:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00254ae:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254be:	89 f0                	mov    eax,esi
c00254c0:	c1 e0 07             	shl    eax,0x7
c00254c3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00254c7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254d1:	53                   	push   ebx
c00254d2:	8d 46 02             	lea    eax,[esi+0x2]
c00254d5:	53                   	push   ebx
c00254d6:	c1 e0 07             	shl    eax,0x7
c00254d9:	bb 01 00 00 00       	mov    ebx,0x1
c00254de:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00254e2:	50                   	push   eax
c00254e3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254e9:	e8 ae ef ff ff       	call   c002449c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00254fa:	0f 84 ce 01 00 00    	je     c00256ce <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025500:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025504:	c1 e0 09             	shl    eax,0x9
c0025507:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002550c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025510:	74 17                	je     c0025529 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0025512:	51                   	push   ecx
c0025513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025517:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002551b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025521:	e8 42 b2 fd ff       	call   c0000768 <memcpy>
c0025526:	83 c4 10             	add    esp,0x10
c0025529:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002552f:	8d 46 02             	lea    eax,[esi+0x2]
c0025532:	c1 e0 07             	shl    eax,0x7
c0025535:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025539:	8b 00                	mov    eax,DWORD PTR [eax]
c002553b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025541:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025547:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002554b:	c1 e1 05             	shl    ecx,0x5
c002554e:	01 c8                	add    eax,ecx
c0025550:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025554:	8a 18                	mov    bl,BYTE PTR [eax]
c0025556:	83 e1 01             	and    ecx,0x1
c0025559:	83 e3 bf             	and    ebx,0xffffffbf
c002555c:	c1 e1 06             	shl    ecx,0x6
c002555f:	09 d9                	or     ecx,ebx
c0025561:	88 08                	mov    BYTE PTR [eax],cl
c0025563:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025565:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002556b:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025571:	89 08                	mov    DWORD PTR [eax],ecx
c0025573:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025579:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002557f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025585:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025588:	52                   	push   edx
c0025589:	68 90 00 00 00       	push   0x90
c002558e:	6a 00                	push   0x0
c0025590:	53                   	push   ebx
c0025591:	e8 f2 b1 fd ff       	call   c0000788 <memset>
c0025596:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002559c:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00255a0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00255a6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00255aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255ae:	83 c4 10             	add    esp,0x10
c00255b1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00255b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00255ba:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00255c0:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255c5:	09 c8                	or     eax,ecx
c00255c7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255cd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255d0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255d7:	66 25 00 7f          	and    ax,0x7f00
c00255db:	66 0d 27 80          	or     ax,0x8027
c00255df:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00255e4:	66 89 03             	mov    WORD PTR [ebx],ax
c00255e7:	19 c0                	sbb    eax,eax
c00255e9:	83 e0 f0             	and    eax,0xfffffff0
c00255ec:	83 c0 35             	add    eax,0x35
c00255ef:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c00255f2:	89 f8                	mov    eax,edi
c00255f4:	c1 e8 10             	shr    eax,0x10
c00255f7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00255fa:	89 f8                	mov    eax,edi
c00255fc:	c1 e8 18             	shr    eax,0x18
c00255ff:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025602:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025606:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025609:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002560d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025610:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025614:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025618:	89 f3                	mov    ebx,esi
c002561a:	31 c0                	xor    eax,eax
c002561c:	c1 e3 07             	shl    ebx,0x7
c002561f:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0025623:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0025629:	80 e1 88             	and    cl,0x88
c002562c:	74 0a                	je     c0025638 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c002562e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025633:	74 0a                	je     c002563f <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0025635:	40                   	inc    eax
c0025636:	eb eb                	jmp    c0025623 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0025638:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002563d:	75 0a                	jne    c0025649 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c002563f:	83 ec 0c             	sub    esp,0xc
c0025642:	68 d9 d8 02 c0       	push   0xc002d8d9
c0025647:	eb 56                	jmp    c002569f <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0025649:	b8 01 00 00 00       	mov    eax,0x1
c002564e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0025652:	c1 e6 07             	shl    esi,0x7
c0025655:	d3 e0                	shl    eax,cl
c0025657:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c002565b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0025661:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0025667:	85 c8                	test   eax,ecx
c0025669:	74 20                	je     c002568b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c002566b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0025671:	0f ba e1 1e          	bt     ecx,0x1e
c0025675:	73 ea                	jae    c0025661 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0025677:	83 ec 0c             	sub    esp,0xc
c002567a:	31 db                	xor    ebx,ebx
c002567c:	68 e7 d8 02 c0       	push   0xc002d8e7
c0025681:	e8 09 52 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0025686:	83 c4 10             	add    esp,0x10
c0025689:	eb 43                	jmp    c00256ce <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002568b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025691:	0f ba e0 1e          	bt     eax,0x1e
c0025695:	73 17                	jae    c00256ae <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0025697:	83 ec 0c             	sub    esp,0xc
c002569a:	68 e7 d8 02 c0       	push   0xc002d8e7
c002569f:	e8 eb 51 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00256a4:	bb 01 00 00 00       	mov    ebx,0x1
c00256a9:	83 c4 10             	add    esp,0x10
c00256ac:	eb 20                	jmp    c00256ce <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256ae:	31 db                	xor    ebx,ebx
c00256b0:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00256b5:	75 17                	jne    c00256ce <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256b7:	50                   	push   eax
c00256b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256bc:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00256c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00256c6:	e8 9d b0 fd ff       	call   c0000768 <memcpy>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	83 c4 2c             	add    esp,0x2c
c00256d1:	89 d8                	mov    eax,ebx
c00256d3:	5b                   	pop    ebx
c00256d4:	5e                   	pop    esi
c00256d5:	5f                   	pop    edi
c00256d6:	5d                   	pop    ebp
c00256d7:	c3                   	ret    

c00256d8 <SATA::read(unsigned long long, int, void*)>:
c00256d8:	57                   	push   edi
c00256d9:	b8 04 00 00 00       	mov    eax,0x4
c00256de:	56                   	push   esi
c00256df:	53                   	push   ebx
c00256e0:	83 ec 10             	sub    esp,0x10
c00256e3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00256e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00256eb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00256ee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00256f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00256f6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00256fc:	77 3b                	ja     c0025739 <SATA::read(unsigned long long, int, void*)+0x61>
c00256fe:	b8 06 00 00 00       	mov    eax,0x6
c0025703:	85 d2                	test   edx,edx
c0025705:	74 32                	je     c0025739 <SATA::read(unsigned long long, int, void*)+0x61>
c0025707:	50                   	push   eax
c0025708:	50                   	push   eax
c0025709:	6a 00                	push   0x0
c002570b:	52                   	push   edx
c002570c:	53                   	push   ebx
c002570d:	57                   	push   edi
c002570e:	56                   	push   esi
c002570f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025713:	e8 5a fd ff ff       	call   c0025472 <SATA::access(unsigned long long, int, void*, bool)>
c0025718:	83 c4 20             	add    esp,0x20
c002571b:	85 c0                	test   eax,eax
c002571d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025721:	75 11                	jne    c0025734 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025723:	01 1d 88 31 03 c0    	add    DWORD PTR ds:0xc0033188,ebx
c0025729:	e8 aa b2 fe ff       	call   c00109d8 <VgaText::updateDiskUsage()>
c002572e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025732:	eb 05                	jmp    c0025739 <SATA::read(unsigned long long, int, void*)+0x61>
c0025734:	b8 01 00 00 00       	mov    eax,0x1
c0025739:	83 c4 10             	add    esp,0x10
c002573c:	5b                   	pop    ebx
c002573d:	5e                   	pop    esi
c002573e:	5f                   	pop    edi
c002573f:	c3                   	ret    

c0025740 <SATA::write(unsigned long long, int, void*)>:
c0025740:	55                   	push   ebp
c0025741:	b8 04 00 00 00       	mov    eax,0x4
c0025746:	57                   	push   edi
c0025747:	56                   	push   esi
c0025748:	53                   	push   ebx
c0025749:	83 ec 1c             	sub    esp,0x1c
c002574c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025750:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025754:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025757:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002575b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002575f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025765:	77 56                	ja     c00257bd <SATA::write(unsigned long long, int, void*)+0x7d>
c0025767:	b8 06 00 00 00       	mov    eax,0x6
c002576c:	85 ff                	test   edi,edi
c002576e:	74 4d                	je     c00257bd <SATA::write(unsigned long long, int, void*)+0x7d>
c0025770:	89 ee                	mov    esi,ebp
c0025772:	c1 e6 09             	shl    esi,0x9
c0025775:	01 fe                	add    esi,edi
c0025777:	89 c8                	mov    eax,ecx
c0025779:	89 da                	mov    edx,ebx
c002577b:	83 c0 01             	add    eax,0x1
c002577e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025782:	83 d2 00             	adc    edx,0x0
c0025785:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025789:	50                   	push   eax
c002578a:	50                   	push   eax
c002578b:	6a 01                	push   0x1
c002578d:	57                   	push   edi
c002578e:	81 c7 00 02 00 00    	add    edi,0x200
c0025794:	6a 01                	push   0x1
c0025796:	53                   	push   ebx
c0025797:	51                   	push   ecx
c0025798:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002579c:	e8 d1 fc ff ff       	call   c0025472 <SATA::access(unsigned long long, int, void*, bool)>
c00257a1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257a9:	83 c4 20             	add    esp,0x20
c00257ac:	39 f7                	cmp    edi,esi
c00257ae:	75 c7                	jne    c0025777 <SATA::write(unsigned long long, int, void*)+0x37>
c00257b0:	01 2d 84 31 03 c0    	add    DWORD PTR ds:0xc0033184,ebp
c00257b6:	e8 1d b2 fe ff       	call   c00109d8 <VgaText::updateDiskUsage()>
c00257bb:	31 c0                	xor    eax,eax
c00257bd:	83 c4 1c             	add    esp,0x1c
c00257c0:	5b                   	pop    ebx
c00257c1:	5e                   	pop    esi
c00257c2:	5f                   	pop    edi
c00257c3:	5d                   	pop    ebp
c00257c4:	c3                   	ret    
c00257c5:	90                   	nop

c00257c6 <SATAPI::write(unsigned long long, int, void*)>:
c00257c6:	b8 03 00 00 00       	mov    eax,0x3
c00257cb:	c3                   	ret    

c00257cc <SATAPI::close(int, int, void*)>:
c00257cc:	83 ec 0c             	sub    esp,0xc
c00257cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257d9:	85 c0                	test   eax,eax
c00257db:	74 0c                	je     c00257e9 <SATAPI::close(int, int, void*)+0x1d>
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00257e2:	50                   	push   eax
c00257e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257e6:	83 c4 10             	add    esp,0x10
c00257e9:	31 c0                	xor    eax,eax
c00257eb:	83 c4 0c             	add    esp,0xc
c00257ee:	c3                   	ret    
c00257ef:	90                   	nop

c00257f0 <SATAPI::SATAPI()>:
c00257f0:	83 ec 0c             	sub    esp,0xc
c00257f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f7:	83 ec 04             	sub    esp,0x4
c00257fa:	68 00 08 00 00       	push   0x800
c00257ff:	68 30 d9 02 c0       	push   0xc002d930
c0025804:	50                   	push   eax
c0025805:	e8 30 ef fe ff       	call   c001473a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002580a:	83 c4 10             	add    esp,0x10
c002580d:	ba dc d9 02 c0       	mov    edx,0xc002d9dc
c0025812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025816:	89 10                	mov    DWORD PTR [eax],edx
c0025818:	90                   	nop
c0025819:	83 c4 0c             	add    esp,0xc
c002581c:	c3                   	ret    
c002581d:	90                   	nop

c002581e <SATAPI::diskRemoved()>:
c002581e:	83 ec 18             	sub    esp,0x18
c0025821:	68 3c d9 02 c0       	push   0xc002d93c
c0025826:	e8 a8 d6 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002582b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002582f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025836:	83 c4 1c             	add    esp,0x1c
c0025839:	c3                   	ret    

c002583a <SATAPI::diskInserted()>:
c002583a:	53                   	push   ebx
c002583b:	83 ec 14             	sub    esp,0x14
c002583e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025842:	68 53 d9 02 c0       	push   0xc002d953
c0025847:	e8 87 d6 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c002584c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025853:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025856:	e8 47 ef fe ff       	call   c00147a2 <PhysicalDisk::startCache()>
c002585b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002585f:	83 c4 18             	add    esp,0x18
c0025862:	5b                   	pop    ebx
c0025863:	e9 1a 12 ff ff       	jmp    c0016a82 <createPartitionsForDisk(PhysicalDisk*)>

c0025868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025868:	55                   	push   ebp
c0025869:	57                   	push   edi
c002586a:	56                   	push   esi
c002586b:	53                   	push   ebx
c002586c:	83 ec 24             	sub    esp,0x24
c002586f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025873:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025877:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002587d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025881:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025885:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002588b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002588e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025894:	c1 e3 07             	shl    ebx,0x7
c0025897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002589b:	89 f8                	mov    eax,edi
c002589d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00258a1:	c1 e0 07             	shl    eax,0x7
c00258a4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00258a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258ac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258b6:	53                   	push   ebx
c00258b7:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00258bd:	e8 da eb ff ff       	call   c002449c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258c6:	83 c4 10             	add    esp,0x10
c00258c9:	b8 01 00 00 00       	mov    eax,0x1
c00258ce:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00258d3:	0f 84 8a 01 00 00    	je     c0025a63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00258d9:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00258df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00258e1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00258e7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00258ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00258f1:	c1 e1 05             	shl    ecx,0x5
c00258f4:	01 c8                	add    eax,ecx
c00258f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00258f8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00258fe:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025904:	89 08                	mov    DWORD PTR [eax],ecx
c0025906:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002590c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025912:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025918:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002591b:	52                   	push   edx
c002591c:	68 90 00 00 00       	push   0x90
c0025921:	6a 00                	push   0x0
c0025923:	53                   	push   ebx
c0025924:	e8 5f ae fd ff       	call   c0000788 <memset>
c0025929:	83 c4 0c             	add    esp,0xc
c002592c:	8d 43 40             	lea    eax,[ebx+0x40]
c002592f:	6a 0c                	push   0xc
c0025931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025935:	50                   	push   eax
c0025936:	e8 2d ae fd ff       	call   c0000768 <memcpy>
c002593b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025941:	89 ea                	mov    edx,ebp
c0025943:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025949:	c1 ea 18             	shr    edx,0x18
c002594c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025950:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025953:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025956:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002595a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025960:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025966:	25 00 00 c0 ff       	and    eax,0xffc00000
c002596b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002596f:	09 c8                	or     eax,ecx
c0025971:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025975:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002597b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002597e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025985:	66 25 00 7f          	and    ax,0x7f00
c0025989:	66 0d 27 80          	or     ax,0x8027
c002598d:	66 89 03             	mov    WORD PTR [ebx],ax
c0025990:	89 e8                	mov    eax,ebp
c0025992:	c1 e8 10             	shr    eax,0x10
c0025995:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025998:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002599c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002599f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259a3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259a6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259aa:	83 c4 10             	add    esp,0x10
c00259ad:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259b5:	31 c0                	xor    eax,eax
c00259b7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00259bd:	80 e1 88             	and    cl,0x88
c00259c0:	74 0a                	je     c00259cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00259c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259c7:	74 0a                	je     c00259d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259c9:	40                   	inc    eax
c00259ca:	eb eb                	jmp    c00259b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00259cc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259d1:	75 0f                	jne    c00259e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00259d3:	83 ec 0c             	sub    esp,0xc
c00259d6:	68 d9 d8 02 c0       	push   0xc002d8d9
c00259db:	e8 af 4e ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00259e0:	eb 3a                	jmp    c0025a1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00259e2:	b8 01 00 00 00       	mov    eax,0x1
c00259e7:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00259eb:	c1 e7 07             	shl    edi,0x7
c00259ee:	d3 e0                	shl    eax,cl
c00259f0:	03 3c 24             	add    edi,DWORD PTR [esp]
c00259f3:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00259f9:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00259ff:	85 d0                	test   eax,edx
c0025a01:	74 23                	je     c0025a26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025a03:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025a09:	0f ba e2 1e          	bt     edx,0x1e
c0025a0d:	73 ea                	jae    c00259f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025a0f:	83 ec 0c             	sub    esp,0xc
c0025a12:	68 6b d9 02 c0       	push   0xc002d96b
c0025a17:	e8 b7 d4 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	b8 01 00 00 00       	mov    eax,0x1
c0025a24:	eb 3d                	jmp    c0025a63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025a26:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025a2c:	0f ba e0 1e          	bt     eax,0x1e
c0025a30:	73 0a                	jae    c0025a3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025a32:	83 ec 0c             	sub    esp,0xc
c0025a35:	68 7e d9 02 c0       	push   0xc002d97e
c0025a3a:	eb db                	jmp    c0025a17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025a3c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025a41:	74 1e                	je     c0025a61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a43:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025a48:	74 17                	je     c0025a61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a4a:	50                   	push   eax
c0025a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025a4f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025a55:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025a59:	e8 0a ad fd ff       	call   c0000768 <memcpy>
c0025a5e:	83 c4 10             	add    esp,0x10
c0025a61:	31 c0                	xor    eax,eax
c0025a63:	83 c4 1c             	add    esp,0x1c
c0025a66:	5b                   	pop    ebx
c0025a67:	5e                   	pop    esi
c0025a68:	5f                   	pop    edi
c0025a69:	5d                   	pop    ebp
c0025a6a:	c3                   	ret    
c0025a6b:	90                   	nop

c0025a6c <SATAPI::eject()>:
c0025a6c:	57                   	push   edi
c0025a6d:	b9 03 00 00 00       	mov    ecx,0x3
c0025a72:	53                   	push   ebx
c0025a73:	83 ec 14             	sub    esp,0x14
c0025a76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025a7a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a7e:	fc                   	cld    
c0025a7f:	31 c0                	xor    eax,eax
c0025a81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a83:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025a88:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025a8d:	50                   	push   eax
c0025a8e:	6a 00                	push   0x0
c0025a90:	6a 00                	push   0x0
c0025a92:	6a 00                	push   0x0
c0025a94:	6a 00                	push   0x0
c0025a96:	6a 02                	push   0x2
c0025a98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025a9c:	50                   	push   eax
c0025a9d:	53                   	push   ebx
c0025a9e:	e8 c5 fd ff ff       	call   c0025868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025aa3:	83 c4 14             	add    esp,0x14
c0025aa6:	53                   	push   ebx
c0025aa7:	e8 72 fd ff ff       	call   c002581e <SATAPI::diskRemoved()>
c0025aac:	83 c4 24             	add    esp,0x24
c0025aaf:	31 c0                	xor    eax,eax
c0025ab1:	5b                   	pop    ebx
c0025ab2:	5f                   	pop    edi
c0025ab3:	c3                   	ret    

c0025ab4 <SATAPI::detectMedia()>:
c0025ab4:	56                   	push   esi
c0025ab5:	53                   	push   ebx
c0025ab6:	83 ec 28             	sub    esp,0x28
c0025ab9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025abd:	6a 0c                	push   0xc
c0025abf:	6a 00                	push   0x0
c0025ac1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025ac5:	56                   	push   esi
c0025ac6:	e8 bd ac fd ff       	call   c0000788 <memset>
c0025acb:	83 c4 0c             	add    esp,0xc
c0025ace:	6a 00                	push   0x0
c0025ad0:	6a 00                	push   0x0
c0025ad2:	6a 00                	push   0x0
c0025ad4:	6a 00                	push   0x0
c0025ad6:	6a 00                	push   0x0
c0025ad8:	56                   	push   esi
c0025ad9:	53                   	push   ebx
c0025ada:	e8 89 fd ff ff       	call   c0025868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025adf:	83 c4 1c             	add    esp,0x1c
c0025ae2:	6a 0c                	push   0xc
c0025ae4:	6a 00                	push   0x0
c0025ae6:	56                   	push   esi
c0025ae7:	e8 9c ac fd ff       	call   c0000788 <memset>
c0025aec:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025af1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025af6:	83 c4 0c             	add    esp,0xc
c0025af9:	6a 01                	push   0x1
c0025afb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025aff:	50                   	push   eax
c0025b00:	6a 00                	push   0x0
c0025b02:	6a 00                	push   0x0
c0025b04:	6a 12                	push   0x12
c0025b06:	56                   	push   esi
c0025b07:	53                   	push   ebx
c0025b08:	e8 5b fd ff ff       	call   c0025868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b0d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b11:	83 c4 20             	add    esp,0x20
c0025b14:	83 e0 7f             	and    eax,0x7f
c0025b17:	3c 70                	cmp    al,0x70
c0025b19:	74 15                	je     c0025b30 <SATAPI::detectMedia()+0x7c>
c0025b1b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b22:	75 0c                	jne    c0025b30 <SATAPI::detectMedia()+0x7c>
c0025b24:	83 ec 0c             	sub    esp,0xc
c0025b27:	53                   	push   ebx
c0025b28:	e8 0d fd ff ff       	call   c002583a <SATAPI::diskInserted()>
c0025b2d:	83 c4 10             	add    esp,0x10
c0025b30:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b34:	83 e0 0f             	and    eax,0xf
c0025b37:	3c 02                	cmp    al,0x2
c0025b39:	75 1b                	jne    c0025b56 <SATAPI::detectMedia()+0xa2>
c0025b3b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b40:	75 2d                	jne    c0025b6f <SATAPI::detectMedia()+0xbb>
c0025b42:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b49:	74 24                	je     c0025b6f <SATAPI::detectMedia()+0xbb>
c0025b4b:	83 ec 0c             	sub    esp,0xc
c0025b4e:	53                   	push   ebx
c0025b4f:	e8 ca fc ff ff       	call   c002581e <SATAPI::diskRemoved()>
c0025b54:	eb 16                	jmp    c0025b6c <SATAPI::detectMedia()+0xb8>
c0025b56:	84 c0                	test   al,al
c0025b58:	75 15                	jne    c0025b6f <SATAPI::detectMedia()+0xbb>
c0025b5a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b61:	75 0c                	jne    c0025b6f <SATAPI::detectMedia()+0xbb>
c0025b63:	83 ec 0c             	sub    esp,0xc
c0025b66:	53                   	push   ebx
c0025b67:	e8 ce fc ff ff       	call   c002583a <SATAPI::diskInserted()>
c0025b6c:	83 c4 10             	add    esp,0x10
c0025b6f:	83 c4 24             	add    esp,0x24
c0025b72:	5b                   	pop    ebx
c0025b73:	5e                   	pop    esi
c0025b74:	c3                   	ret    
c0025b75:	90                   	nop

c0025b76 <SATAPI::open(int, int, void*)>:
c0025b76:	56                   	push   esi
c0025b77:	53                   	push   ebx
c0025b78:	50                   	push   eax
c0025b79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b81:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025b8b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025b91:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025b9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b9f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025ba9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025baf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bb6:	e8 cd a3 fe ff       	call   c000ff88 <Phys::allocatePage()>
c0025bbb:	89 c6                	mov    esi,eax
c0025bbd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bc3:	81 c6 00 10 00 00    	add    esi,0x1000
c0025bc9:	e8 ba a3 fe ff       	call   c000ff88 <Phys::allocatePage()>
c0025bce:	39 c6                	cmp    esi,eax
c0025bd0:	74 10                	je     c0025be2 <SATAPI::open(int, int, void*)+0x6c>
c0025bd2:	83 ec 0c             	sub    esp,0xc
c0025bd5:	68 93 d9 02 c0       	push   0xc002d993
c0025bda:	e8 b0 4c ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0025bdf:	83 c4 10             	add    esp,0x10
c0025be2:	83 ec 0c             	sub    esp,0xc
c0025be5:	6a 02                	push   0x2
c0025be7:	e8 e1 be fe ff       	call   c0011acd <Virt::allocateKernelVirtualPages(int)>
c0025bec:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025bf2:	6a 03                	push   0x3
c0025bf4:	50                   	push   eax
c0025bf5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025bfb:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0025c01:	e8 fe c6 fe ff       	call   c0012304 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c06:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c0d:	83 c4 14             	add    esp,0x14
c0025c10:	53                   	push   ebx
c0025c11:	e8 9e fe ff ff       	call   c0025ab4 <SATAPI::detectMedia()>
c0025c16:	83 c4 14             	add    esp,0x14
c0025c19:	31 c0                	xor    eax,eax
c0025c1b:	5b                   	pop    ebx
c0025c1c:	5e                   	pop    esi
c0025c1d:	c3                   	ret    

c0025c1e <SATAPI::read(unsigned long long, int, void*)>:
c0025c1e:	55                   	push   ebp
c0025c1f:	57                   	push   edi
c0025c20:	56                   	push   esi
c0025c21:	53                   	push   ebx
c0025c22:	83 ec 1c             	sub    esp,0x1c
c0025c25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c31:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c38:	74 19                	je     c0025c53 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c3a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c3f:	7e 2e                	jle    c0025c6f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c41:	83 ec 0c             	sub    esp,0xc
c0025c44:	68 a9 d9 02 c0       	push   0xc002d9a9
c0025c49:	e8 41 4c ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0025c4e:	83 c4 10             	add    esp,0x10
c0025c51:	eb 1c                	jmp    c0025c6f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c53:	83 ec 0c             	sub    esp,0xc
c0025c56:	55                   	push   ebp
c0025c57:	e8 58 fe ff ff       	call   c0025ab4 <SATAPI::detectMedia()>
c0025c5c:	83 c4 10             	add    esp,0x10
c0025c5f:	b8 02 00 00 00       	mov    eax,0x2
c0025c64:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c6b:	75 cd                	jne    c0025c3a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025c6d:	eb 49                	jmp    c0025cb8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025c6f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c73:	b9 03 00 00 00       	mov    ecx,0x3
c0025c78:	fc                   	cld    
c0025c79:	31 c0                	xor    eax,eax
c0025c7b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c7d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025c82:	89 d8                	mov    eax,ebx
c0025c84:	86 e0                	xchg   al,ah
c0025c86:	c1 c0 10             	rol    eax,0x10
c0025c89:	86 e0                	xchg   al,ah
c0025c8b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025c8f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025c93:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025c97:	50                   	push   eax
c0025c98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025c9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025ca0:	56                   	push   esi
c0025ca1:	53                   	push   ebx
c0025ca2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025ca6:	c1 e0 0b             	shl    eax,0xb
c0025ca9:	50                   	push   eax
c0025caa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cae:	50                   	push   eax
c0025caf:	55                   	push   ebp
c0025cb0:	e8 b3 fb ff ff       	call   c0025868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cb5:	83 c4 20             	add    esp,0x20
c0025cb8:	83 c4 1c             	add    esp,0x1c
c0025cbb:	5b                   	pop    ebx
c0025cbc:	5e                   	pop    esi
c0025cbd:	5f                   	pop    edi
c0025cbe:	5d                   	pop    ebp
c0025cbf:	c3                   	ret    

c0025cc0 <AVX::open(int, int, void*)>:
c0025cc0:	83 ec 0c             	sub    esp,0xc
c0025cc3:	e8 40 11 00 00       	call   c0026e08 <avxInit>
c0025cc8:	b8 00 00 00 00       	mov    eax,0x0
c0025ccd:	83 c4 0c             	add    esp,0xc
c0025cd0:	c3                   	ret    
c0025cd1:	90                   	nop

c0025cd2 <AVX::close(int, int, void*)>:
c0025cd2:	83 ec 0c             	sub    esp,0xc
c0025cd5:	e8 2f 11 00 00       	call   c0026e09 <avxClose>
c0025cda:	b8 00 00 00 00       	mov    eax,0x0
c0025cdf:	83 c4 0c             	add    esp,0xc
c0025ce2:	c3                   	ret    
c0025ce3:	90                   	nop

c0025ce4 <AVX::available()>:
c0025ce4:	83 ec 0c             	sub    esp,0xc
c0025ce7:	e8 14 11 00 00       	call   c0026e00 <avxDetect>
c0025cec:	85 c0                	test   eax,eax
c0025cee:	0f 95 c0             	setne  al
c0025cf1:	83 c4 0c             	add    esp,0xc
c0025cf4:	c3                   	ret    
c0025cf5:	90                   	nop

c0025cf6 <AVX::save(void*)>:
c0025cf6:	83 ec 0c             	sub    esp,0xc
c0025cf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cfd:	83 ec 0c             	sub    esp,0xc
c0025d00:	50                   	push   eax
c0025d01:	e8 00 11 00 00       	call   c0026e06 <avxSave>
c0025d06:	83 c4 10             	add    esp,0x10
c0025d09:	90                   	nop
c0025d0a:	83 c4 0c             	add    esp,0xc
c0025d0d:	c3                   	ret    

c0025d0e <AVX::load(void*)>:
c0025d0e:	83 ec 0c             	sub    esp,0xc
c0025d11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d15:	83 ec 0c             	sub    esp,0xc
c0025d18:	50                   	push   eax
c0025d19:	e8 e9 10 00 00       	call   c0026e07 <avxLoad>
c0025d1e:	83 c4 10             	add    esp,0x10
c0025d21:	90                   	nop
c0025d22:	83 c4 0c             	add    esp,0xc
c0025d25:	c3                   	ret    

c0025d26 <AVX::AVX()>:
c0025d26:	83 ec 0c             	sub    esp,0xc
c0025d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d2d:	83 ec 08             	sub    esp,0x8
c0025d30:	68 0c da 02 c0       	push   0xc002da0c
c0025d35:	50                   	push   eax
c0025d36:	e8 dd ea fe ff       	call   c0014818 <FPU::FPU(char const*)>
c0025d3b:	83 c4 10             	add    esp,0x10
c0025d3e:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0025d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d47:	89 10                	mov    DWORD PTR [eax],edx
c0025d49:	90                   	nop
c0025d4a:	83 c4 0c             	add    esp,0xc
c0025d4d:	c3                   	ret    

c0025d4e <MMX::available()>:
c0025d4e:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025d53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d59:	83 e0 20             	and    eax,0x20
c0025d5c:	84 c0                	test   al,al
c0025d5e:	0f 95 c0             	setne  al
c0025d61:	c3                   	ret    

c0025d62 <MMX::open(int, int, void*)>:
c0025d62:	83 ec 0c             	sub    esp,0xc
c0025d65:	e8 28 11 00 00       	call   c0026e92 <x87Init>
c0025d6a:	b8 00 00 00 00       	mov    eax,0x0
c0025d6f:	83 c4 0c             	add    esp,0xc
c0025d72:	c3                   	ret    
c0025d73:	90                   	nop

c0025d74 <MMX::close(int, int, void*)>:
c0025d74:	83 ec 0c             	sub    esp,0xc
c0025d77:	e8 30 11 00 00       	call   c0026eac <x87Close>
c0025d7c:	b8 00 00 00 00       	mov    eax,0x0
c0025d81:	83 c4 0c             	add    esp,0xc
c0025d84:	c3                   	ret    
c0025d85:	90                   	nop

c0025d86 <MMX::save(void*)>:
c0025d86:	83 ec 0c             	sub    esp,0xc
c0025d89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d8d:	83 ec 0c             	sub    esp,0xc
c0025d90:	50                   	push   eax
c0025d91:	e8 eb 10 00 00       	call   c0026e81 <x87Save>
c0025d96:	83 c4 10             	add    esp,0x10
c0025d99:	90                   	nop
c0025d9a:	83 c4 0c             	add    esp,0xc
c0025d9d:	c3                   	ret    

c0025d9e <MMX::load(void*)>:
c0025d9e:	83 ec 0c             	sub    esp,0xc
c0025da1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025da5:	83 ec 0c             	sub    esp,0xc
c0025da8:	50                   	push   eax
c0025da9:	e8 dc 10 00 00       	call   c0026e8a <x87Load>
c0025dae:	83 c4 10             	add    esp,0x10
c0025db1:	90                   	nop
c0025db2:	83 c4 0c             	add    esp,0xc
c0025db5:	c3                   	ret    

c0025db6 <MMX::MMX()>:
c0025db6:	83 ec 0c             	sub    esp,0xc
c0025db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbd:	83 ec 08             	sub    esp,0x8
c0025dc0:	68 4c da 02 c0       	push   0xc002da4c
c0025dc5:	50                   	push   eax
c0025dc6:	e8 4d ea fe ff       	call   c0014818 <FPU::FPU(char const*)>
c0025dcb:	83 c4 10             	add    esp,0x10
c0025dce:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0025dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd7:	89 10                	mov    DWORD PTR [eax],edx
c0025dd9:	90                   	nop
c0025dda:	83 c4 0c             	add    esp,0xc
c0025ddd:	c3                   	ret    

c0025dde <SSE::open(int, int, void*)>:
c0025dde:	83 ec 0c             	sub    esp,0xc
c0025de1:	e8 5e 10 00 00       	call   c0026e44 <sseInit>
c0025de6:	b8 00 00 00 00       	mov    eax,0x0
c0025deb:	83 c4 0c             	add    esp,0xc
c0025dee:	c3                   	ret    
c0025def:	90                   	nop

c0025df0 <SSE::close(int, int, void*)>:
c0025df0:	83 ec 0c             	sub    esp,0xc
c0025df3:	e8 5c 10 00 00       	call   c0026e54 <sseClose>
c0025df8:	b8 00 00 00 00       	mov    eax,0x0
c0025dfd:	83 c4 0c             	add    esp,0xc
c0025e00:	c3                   	ret    
c0025e01:	90                   	nop

c0025e02 <SSE::available()>:
c0025e02:	83 ec 1c             	sub    esp,0x1c
c0025e05:	e8 16 10 00 00       	call   c0026e20 <absolutelyNoChanceInHell>
c0025e0a:	85 c0                	test   eax,eax
c0025e0c:	0f 95 c0             	setne  al
c0025e0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e17:	83 c4 1c             	add    esp,0x1c
c0025e1a:	c3                   	ret    
c0025e1b:	90                   	nop

c0025e1c <SSE::save(void*)>:
c0025e1c:	83 ec 0c             	sub    esp,0xc
c0025e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e23:	83 ec 0c             	sub    esp,0xc
c0025e26:	50                   	push   eax
c0025e27:	e8 0c 10 00 00       	call   c0026e38 <sseSave>
c0025e2c:	83 c4 10             	add    esp,0x10
c0025e2f:	90                   	nop
c0025e30:	83 c4 0c             	add    esp,0xc
c0025e33:	c3                   	ret    

c0025e34 <SSE::load(void*)>:
c0025e34:	83 ec 0c             	sub    esp,0xc
c0025e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e3b:	83 ec 0c             	sub    esp,0xc
c0025e3e:	50                   	push   eax
c0025e3f:	e8 fa 0f 00 00       	call   c0026e3e <sseLoad>
c0025e44:	83 c4 10             	add    esp,0x10
c0025e47:	90                   	nop
c0025e48:	83 c4 0c             	add    esp,0xc
c0025e4b:	c3                   	ret    

c0025e4c <SSE::SSE()>:
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e53:	83 ec 08             	sub    esp,0x8
c0025e56:	68 8c da 02 c0       	push   0xc002da8c
c0025e5b:	50                   	push   eax
c0025e5c:	e8 b7 e9 fe ff       	call   c0014818 <FPU::FPU(char const*)>
c0025e61:	83 c4 10             	add    esp,0x10
c0025e64:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0025e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6d:	89 10                	mov    DWORD PTR [eax],edx
c0025e6f:	90                   	nop
c0025e70:	83 c4 0c             	add    esp,0xc
c0025e73:	c3                   	ret    

c0025e74 <x87::open(int, int, void*)>:
c0025e74:	83 ec 0c             	sub    esp,0xc
c0025e77:	e8 16 10 00 00       	call   c0026e92 <x87Init>
c0025e7c:	b8 00 00 00 00       	mov    eax,0x0
c0025e81:	83 c4 0c             	add    esp,0xc
c0025e84:	c3                   	ret    
c0025e85:	90                   	nop

c0025e86 <x87::close(int, int, void*)>:
c0025e86:	83 ec 0c             	sub    esp,0xc
c0025e89:	e8 1e 10 00 00       	call   c0026eac <x87Close>
c0025e8e:	b8 00 00 00 00       	mov    eax,0x0
c0025e93:	83 c4 0c             	add    esp,0xc
c0025e96:	c3                   	ret    
c0025e97:	90                   	nop

c0025e98 <x87::available()>:
c0025e98:	83 ec 0c             	sub    esp,0xc
c0025e9b:	e8 c6 0f 00 00       	call   c0026e66 <x87Detect>
c0025ea0:	85 c0                	test   eax,eax
c0025ea2:	0f 95 c0             	setne  al
c0025ea5:	83 c4 0c             	add    esp,0xc
c0025ea8:	c3                   	ret    
c0025ea9:	90                   	nop

c0025eaa <x87::save(void*)>:
c0025eaa:	83 ec 0c             	sub    esp,0xc
c0025ead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eb1:	83 ec 0c             	sub    esp,0xc
c0025eb4:	50                   	push   eax
c0025eb5:	e8 c7 0f 00 00       	call   c0026e81 <x87Save>
c0025eba:	83 c4 10             	add    esp,0x10
c0025ebd:	90                   	nop
c0025ebe:	83 c4 0c             	add    esp,0xc
c0025ec1:	c3                   	ret    

c0025ec2 <x87::load(void*)>:
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ec9:	83 ec 0c             	sub    esp,0xc
c0025ecc:	50                   	push   eax
c0025ecd:	e8 b8 0f 00 00       	call   c0026e8a <x87Load>
c0025ed2:	83 c4 10             	add    esp,0x10
c0025ed5:	90                   	nop
c0025ed6:	83 c4 0c             	add    esp,0xc
c0025ed9:	c3                   	ret    

c0025eda <x87::x87()>:
c0025eda:	83 ec 0c             	sub    esp,0xc
c0025edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee1:	83 ec 08             	sub    esp,0x8
c0025ee4:	68 cc da 02 c0       	push   0xc002dacc
c0025ee9:	50                   	push   eax
c0025eea:	e8 29 e9 fe ff       	call   c0014818 <FPU::FPU(char const*)>
c0025eef:	83 c4 10             	add    esp,0x10
c0025ef2:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0025ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efb:	89 10                	mov    DWORD PTR [eax],edx
c0025efd:	90                   	nop
c0025efe:	83 c4 0c             	add    esp,0xc
c0025f01:	c3                   	ret    

c0025f02 <APIC::disable()>:
c0025f02:	90                   	nop
c0025f03:	c3                   	ret    

c0025f04 <APIC::close(int, int, void*)>:
c0025f04:	55                   	push   ebp
c0025f05:	89 e5                	mov    ebp,esp
c0025f07:	83 ec 08             	sub    esp,0x8
c0025f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f0f:	83 c0 3c             	add    eax,0x3c
c0025f12:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f14:	83 ec 0c             	sub    esp,0xc
c0025f17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f1a:	ff d0                	call   eax
c0025f1c:	83 c4 10             	add    esp,0x10
c0025f1f:	b8 00 00 00 00       	mov    eax,0x0
c0025f24:	c9                   	leave  
c0025f25:	c3                   	ret    

c0025f26 <IOAPIC::close(int, int, void*)>:
c0025f26:	b8 00 00 00 00       	mov    eax,0x0
c0025f2b:	c3                   	ret    

c0025f2c <APIC::io_wait()>:
c0025f2c:	eb 00                	jmp    c0025f2e <APIC::io_wait()+0x2>
c0025f2e:	eb 00                	jmp    c0025f30 <APIC::io_wait()+0x4>
c0025f30:	90                   	nop
c0025f31:	c3                   	ret    

c0025f32 <APIC::getBase()>:
c0025f32:	55                   	push   ebp
c0025f33:	89 e5                	mov    ebp,esp
c0025f35:	83 ec 18             	sub    esp,0x18
c0025f38:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025f3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f43:	83 e0 08             	and    eax,0x8
c0025f46:	84 c0                	test   al,al
c0025f48:	75 07                	jne    c0025f51 <APIC::getBase()+0x1f>
c0025f4a:	b8 00 00 00 00       	mov    eax,0x0
c0025f4f:	eb 21                	jmp    c0025f72 <APIC::getBase()+0x40>
c0025f51:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025f56:	83 ec 08             	sub    esp,0x8
c0025f59:	6a 1b                	push   0x1b
c0025f5b:	50                   	push   eax
c0025f5c:	e8 61 8f fe ff       	call   c000eec2 <Computer::rdmsr(unsigned int)>
c0025f61:	83 c4 10             	add    esp,0x10
c0025f64:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f67:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025f72:	c9                   	leave  
c0025f73:	c3                   	ret    

c0025f74 <APIC::eoi(unsigned char)>:
c0025f74:	55                   	push   ebp
c0025f75:	89 e5                	mov    ebp,esp
c0025f77:	83 ec 28             	sub    esp,0x28
c0025f7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f80:	83 ec 0c             	sub    esp,0xc
c0025f83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f86:	e8 a7 ff ff ff       	call   c0025f32 <APIC::getBase()>
c0025f8b:	83 c4 10             	add    esp,0x10
c0025f8e:	05 b0 00 00 00       	add    eax,0xb0
c0025f93:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f99:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025f9f:	90                   	nop
c0025fa0:	c9                   	leave  
c0025fa1:	c3                   	ret    

c0025fa2 <APIC::open(int, int, void*)>:
c0025fa2:	55                   	push   ebp
c0025fa3:	89 e5                	mov    ebp,esp
c0025fa5:	57                   	push   edi
c0025fa6:	56                   	push   esi
c0025fa7:	53                   	push   ebx
c0025fa8:	83 ec 2c             	sub    esp,0x2c
c0025fab:	83 ec 0c             	sub    esp,0xc
c0025fae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb1:	e8 7c ff ff ff       	call   c0025f32 <APIC::getBase()>
c0025fb6:	83 c4 10             	add    esp,0x10
c0025fb9:	89 c2                	mov    edx,eax
c0025fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fbe:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fc4:	0f b6 f8             	movzx  edi,al
c0025fc7:	89 d0                	mov    eax,edx
c0025fc9:	ba 00 00 00 00       	mov    edx,0x0
c0025fce:	89 c1                	mov    ecx,eax
c0025fd0:	80 e5 ff             	and    ch,0xff
c0025fd3:	89 cb                	mov    ebx,ecx
c0025fd5:	0f b6 f2             	movzx  esi,dl
c0025fd8:	89 d8                	mov    eax,ebx
c0025fda:	89 f2                	mov    edx,esi
c0025fdc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025fdf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025fe2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025fe6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025fea:	83 e0 00             	and    eax,0x0
c0025fed:	09 d0                	or     eax,edx
c0025fef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ff6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ffc:	8d 50 01             	lea    edx,[eax+0x1]
c0025fff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026002:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026008:	0f b6 d0             	movzx  edx,al
c002600b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002600e:	83 c2 08             	add    edx,0x8
c0026011:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026015:	0f b6 c9             	movzx  ecx,cl
c0026018:	81 c9 00 00 01 00    	or     ecx,0x10000
c002601e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026022:	83 ec 0c             	sub    esp,0xc
c0026025:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026028:	e8 05 ff ff ff       	call   c0025f32 <APIC::getBase()>
c002602d:	83 c4 10             	add    esp,0x10
c0026030:	05 f0 00 00 00       	add    eax,0xf0
c0026035:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026038:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002603b:	8b 00                	mov    eax,DWORD PTR [eax]
c002603d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026040:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026047:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002604e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026051:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026054:	89 10                	mov    DWORD PTR [eax],edx
c0026056:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002605d:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c0026062:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026065:	7d 7c                	jge    c00260e3 <APIC::open(int, int, void*)+0x141>
c0026067:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002606a:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026071:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026074:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026077:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c002607e:	c1 e8 08             	shr    eax,0x8
c0026081:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026085:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026088:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c002608f:	c1 e8 18             	shr    eax,0x18
c0026092:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026095:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026099:	75 40                	jne    c00260db <APIC::open(int, int, void*)+0x139>
c002609b:	83 ec 0c             	sub    esp,0xc
c002609e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a1:	e8 8c fe ff ff       	call   c0025f32 <APIC::getBase()>
c00260a6:	83 c4 10             	add    esp,0x10
c00260a9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260ad:	75 07                	jne    c00260b6 <APIC::open(int, int, void*)+0x114>
c00260af:	ba 60 03 00 00       	mov    edx,0x360
c00260b4:	eb 05                	jmp    c00260bb <APIC::open(int, int, void*)+0x119>
c00260b6:	ba 50 03 00 00       	mov    edx,0x350
c00260bb:	01 d0                	add    eax,edx
c00260bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00260c5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260c8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00260cf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00260d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260d6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260d9:	89 10                	mov    DWORD PTR [eax],edx
c00260db:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00260de:	e9 7a ff ff ff       	jmp    c002605d <APIC::open(int, int, void*)+0xbb>
c00260e3:	b8 00 00 00 00       	mov    eax,0x0
c00260e8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260eb:	5b                   	pop    ebx
c00260ec:	5e                   	pop    esi
c00260ed:	5f                   	pop    edi
c00260ee:	5d                   	pop    ebp
c00260ef:	c3                   	ret    

c00260f0 <IOAPIC::IOAPIC()>:
c00260f0:	83 ec 0c             	sub    esp,0xc
c00260f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f7:	83 ec 08             	sub    esp,0x8
c00260fa:	68 0c db 02 c0       	push   0xc002db0c
c00260ff:	50                   	push   eax
c0026100:	e8 f3 e3 fe ff       	call   c00144f8 <Device::Device(char const*)>
c0026105:	83 c4 10             	add    esp,0x10
c0026108:	ba 34 dc 02 c0       	mov    edx,0xc002dc34
c002610d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026111:	89 10                	mov    DWORD PTR [eax],edx
c0026113:	90                   	nop
c0026114:	83 c4 0c             	add    esp,0xc
c0026117:	c3                   	ret    

c0026118 <APIC::APIC()>:
c0026118:	53                   	push   ebx
c0026119:	83 ec 18             	sub    esp,0x18
c002611c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026120:	83 ec 08             	sub    esp,0x8
c0026123:	68 14 db 02 c0       	push   0xc002db14
c0026128:	50                   	push   eax
c0026129:	e8 44 eb fe ff       	call   c0014c72 <InterruptController::InterruptController(char const*)>
c002612e:	83 c4 10             	add    esp,0x10
c0026131:	ba ec db 02 c0       	mov    edx,0xc002dbec
c0026136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002613a:	89 10                	mov    DWORD PTR [eax],edx
c002613c:	a0 e0 31 03 c0       	mov    al,ds:0xc00331e0
c0026141:	83 f0 01             	xor    eax,0x1
c0026144:	84 c0                	test   al,al
c0026146:	0f 84 a1 00 00 00    	je     c00261ed <APIC::APIC()+0xd5>
c002614c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026151:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0026156:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002615a:	0f 83 86 00 00 00    	jae    c00261e6 <APIC::APIC()+0xce>
c0026160:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026168:	83 ec 0c             	sub    esp,0xc
c002616b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002616f:	e8 a8 97 fe ff       	call   c000f91c <malloc>
c0026174:	83 c4 10             	add    esp,0x10
c0026177:	89 c3                	mov    ebx,eax
c0026179:	83 ec 0c             	sub    esp,0xc
c002617c:	53                   	push   ebx
c002617d:	e8 6e ff ff ff       	call   c00260f0 <IOAPIC::IOAPIC()>
c0026182:	83 c4 10             	add    esp,0x10
c0026185:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026189:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002618e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026192:	89 14 85 c0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce40],edx
c0026199:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c002619e:	40                   	inc    eax
c002619f:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c00261a4:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00261a9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261af:	83 ec 08             	sub    esp,0x8
c00261b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261b6:	50                   	push   eax
c00261b7:	e8 4c e1 fe ff       	call   c0014308 <Device::addChild(Device*)>
c00261bc:	83 c4 10             	add    esp,0x10
c00261bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00261c5:	83 c0 08             	add    eax,0x8
c00261c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00261cf:	6a 00                	push   0x0
c00261d1:	6a 00                	push   0x0
c00261d3:	52                   	push   edx
c00261d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00261d8:	ff d0                	call   eax
c00261da:	83 c4 10             	add    esp,0x10
c00261dd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00261e1:	e9 6b ff ff ff       	jmp    c0026151 <APIC::APIC()+0x39>
c00261e6:	c6 05 e0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331e0,0x1
c00261ed:	90                   	nop
c00261ee:	83 c4 18             	add    esp,0x18
c00261f1:	5b                   	pop    ebx
c00261f2:	c3                   	ret    
c00261f3:	90                   	nop

c00261f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00261f4:	55                   	push   ebp
c00261f5:	89 e5                	mov    ebp,esp
c00261f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026200:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026203:	72 1d                	jb     c0026222 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026208:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002620e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026211:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026217:	01 d0                	add    eax,edx
c0026219:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002621c:	73 04                	jae    c0026222 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002621e:	b0 01                	mov    al,0x1
c0026220:	eb 02                	jmp    c0026224 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026222:	b0 00                	mov    al,0x0
c0026224:	5d                   	pop    ebp
c0026225:	c3                   	ret    

c0026226 <IOAPIC::read(int)>:
c0026226:	55                   	push   ebp
c0026227:	89 e5                	mov    ebp,esp
c0026229:	83 ec 10             	sub    esp,0x10
c002622c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002622f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026235:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026238:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002623b:	0f b6 d0             	movzx  edx,al
c002623e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026241:	89 10                	mov    DWORD PTR [eax],edx
c0026243:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026246:	83 c0 10             	add    eax,0x10
c0026249:	8b 00                	mov    eax,DWORD PTR [eax]
c002624b:	c9                   	leave  
c002624c:	c3                   	ret    
c002624d:	90                   	nop

c002624e <IOAPIC::open(int, int, void*)>:
c002624e:	55                   	push   ebp
c002624f:	89 e5                	mov    ebp,esp
c0026251:	57                   	push   edi
c0026252:	56                   	push   esi
c0026253:	53                   	push   ebx
c0026254:	83 ec 0c             	sub    esp,0xc
c0026257:	83 ec 0c             	sub    esp,0xc
c002625a:	68 3f db 02 c0       	push   0xc002db3f
c002625f:	e8 6f cc fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0026264:	83 c4 10             	add    esp,0x10
c0026267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002626d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026276:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002627c:	8b 14 85 00 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce800]
c0026283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026286:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002628c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026295:	8b 14 85 80 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce780]
c002629c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002629f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262b7:	0f b6 f8             	movzx  edi,al
c00262ba:	89 d0                	mov    eax,edx
c00262bc:	ba 00 00 00 00       	mov    edx,0x0
c00262c1:	89 c1                	mov    ecx,eax
c00262c3:	80 e5 ff             	and    ch,0xff
c00262c6:	89 cb                	mov    ebx,ecx
c00262c8:	0f b6 f2             	movzx  esi,dl
c00262cb:	89 d8                	mov    eax,ebx
c00262cd:	89 f2                	mov    edx,esi
c00262cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262d2:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262d5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262d9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262dd:	83 e0 00             	and    eax,0x0
c00262e0:	09 d0                	or     eax,edx
c00262e2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262ef:	8d 50 01             	lea    edx,[eax+0x1]
c00262f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262f5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262fb:	0f b6 d0             	movzx  edx,al
c00262fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026301:	83 c2 08             	add    edx,0x8
c0026304:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026308:	0f b6 c9             	movzx  ecx,cl
c002630b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026311:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026315:	83 ec 08             	sub    esp,0x8
c0026318:	6a 01                	push   0x1
c002631a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002631d:	e8 04 ff ff ff       	call   c0026226 <IOAPIC::read(int)>
c0026322:	83 c4 10             	add    esp,0x10
c0026325:	c1 f8 10             	sar    eax,0x10
c0026328:	0f b6 c0             	movzx  eax,al
c002632b:	8d 50 01             	lea    edx,[eax+0x1]
c002632e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026331:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026337:	b8 00 00 00 00       	mov    eax,0x0
c002633c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002633f:	5b                   	pop    ebx
c0026340:	5e                   	pop    esi
c0026341:	5f                   	pop    edi
c0026342:	5d                   	pop    ebp
c0026343:	c3                   	ret    

c0026344 <IOAPIC::write(int, int)>:
c0026344:	55                   	push   ebp
c0026345:	89 e5                	mov    ebp,esp
c0026347:	83 ec 10             	sub    esp,0x10
c002634a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002634d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026353:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026356:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026359:	0f b6 d0             	movzx  edx,al
c002635c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002635f:	89 10                	mov    DWORD PTR [eax],edx
c0026361:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026364:	8d 50 10             	lea    edx,[eax+0x10]
c0026367:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002636a:	89 02                	mov    DWORD PTR [edx],eax
c002636c:	90                   	nop
c002636d:	c9                   	leave  
c002636e:	c3                   	ret    
c002636f:	90                   	nop

c0026370 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026370:	55                   	push   ebp
c0026371:	89 e5                	mov    ebp,esp
c0026373:	53                   	push   ebx
c0026374:	83 ec 2c             	sub    esp,0x2c
c0026377:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002637a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002637d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026380:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026383:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026386:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026389:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002638c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002638f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026392:	88 d8                	mov    al,bl
c0026394:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026397:	88 c8                	mov    al,cl
c0026399:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002639c:	88 d0                	mov    al,dl
c002639e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263a1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263a5:	83 c0 08             	add    eax,0x8
c00263a8:	01 c0                	add    eax,eax
c00263aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263b1:	83 c0 08             	add    eax,0x8
c00263b4:	01 c0                	add    eax,eax
c00263b6:	40                   	inc    eax
c00263b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263bd:	50                   	push   eax
c00263be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263c1:	e8 60 fe ff ff       	call   c0026226 <IOAPIC::read(int)>
c00263c6:	83 c4 08             	add    esp,0x8
c00263c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00263cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00263d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00263d6:	c1 e0 18             	shl    eax,0x18
c00263d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00263dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00263df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263e2:	52                   	push   edx
c00263e3:	50                   	push   eax
c00263e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e7:	e8 58 ff ff ff       	call   c0026344 <IOAPIC::write(int, int)>
c00263ec:	83 c4 0c             	add    esp,0xc
c00263ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263f2:	50                   	push   eax
c00263f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f6:	e8 2b fe ff ff       	call   c0026226 <IOAPIC::read(int)>
c00263fb:	83 c4 08             	add    esp,0x8
c00263fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026401:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026408:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002640f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026416:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002641a:	74 09                	je     c0026425 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002641c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026423:	eb 07                	jmp    c002642c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026425:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002642c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026430:	74 09                	je     c002643b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026432:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026439:	eb 07                	jmp    c0026442 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002643b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026442:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026449:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002644d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026450:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026453:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026456:	52                   	push   edx
c0026457:	50                   	push   eax
c0026458:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002645b:	e8 e4 fe ff ff       	call   c0026344 <IOAPIC::write(int, int)>
c0026460:	83 c4 0c             	add    esp,0xc
c0026463:	90                   	nop
c0026464:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026467:	c9                   	leave  
c0026468:	c3                   	ret    
c0026469:	90                   	nop

c002646a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002646a:	55                   	push   ebp
c002646b:	89 e5                	mov    ebp,esp
c002646d:	57                   	push   edi
c002646e:	56                   	push   esi
c002646f:	53                   	push   ebx
c0026470:	83 ec 2c             	sub    esp,0x2c
c0026473:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026476:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026479:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002647d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026481:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026485:	74 5a                	je     c00264e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026487:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002648b:	7f 44                	jg     c00264d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002648d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026490:	05 80 e0 02 c0       	add    eax,0xc002e080
c0026495:	8a 00                	mov    al,BYTE PTR [eax]
c0026497:	0f b6 c0             	movzx  eax,al
c002649a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002649d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264a0:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264a8:	0f b7 c0             	movzx  eax,ax
c00264ab:	83 e0 02             	and    eax,0x2
c00264ae:	85 c0                	test   eax,eax
c00264b0:	74 04                	je     c00264b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264b2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264b9:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264c1:	0f b7 c0             	movzx  eax,ax
c00264c4:	83 e0 08             	and    eax,0x8
c00264c7:	85 c0                	test   eax,eax
c00264c9:	74 16                	je     c00264e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264cb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264cf:	eb 10                	jmp    c00264e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264d1:	83 ec 0c             	sub    esp,0xc
c00264d4:	68 50 db 02 c0       	push   0xc002db50
c00264d9:	e8 b1 43 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00264de:	83 c4 10             	add    esp,0x10
c00264e1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00264e5:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c00264ea:	83 ec 08             	sub    esp,0x8
c00264ed:	50                   	push   eax
c00264ee:	68 88 db 02 c0       	push   0xc002db88
c00264f3:	e8 db c9 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00264f8:	83 c4 10             	add    esp,0x10
c00264fb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026502:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0026507:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002650a:	7d 67                	jge    c0026573 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002650c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002650f:	8b 04 85 c0 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce40]
c0026516:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026519:	83 ec 08             	sub    esp,0x8
c002651c:	52                   	push   edx
c002651d:	50                   	push   eax
c002651e:	e8 d1 fc ff ff       	call   c00261f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026523:	83 c4 10             	add    esp,0x10
c0026526:	84 c0                	test   al,al
c0026528:	74 44                	je     c002656e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002652a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002652d:	8b 1c 85 c0 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce40]
c0026534:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026538:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002653b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002653f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026542:	83 c0 20             	add    eax,0x20
c0026545:	0f b6 f0             	movzx  esi,al
c0026548:	b8 00 00 00 00       	mov    eax,0x0
c002654d:	99                   	cdq    
c002654e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026551:	0f b6 c9             	movzx  ecx,cl
c0026554:	83 ec 04             	sub    esp,0x4
c0026557:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002655a:	57                   	push   edi
c002655b:	56                   	push   esi
c002655c:	52                   	push   edx
c002655d:	50                   	push   eax
c002655e:	51                   	push   ecx
c002655f:	53                   	push   ebx
c0026560:	e8 0b fe ff ff       	call   c0026370 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026565:	83 c4 20             	add    esp,0x20
c0026568:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002656c:	eb 05                	jmp    c0026573 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002656e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026571:	eb 8f                	jmp    c0026502 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026573:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026576:	83 f0 01             	xor    eax,0x1
c0026579:	84 c0                	test   al,al
c002657b:	74 10                	je     c002658d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002657d:	83 ec 0c             	sub    esp,0xc
c0026580:	68 9f db 02 c0       	push   0xc002db9f
c0026585:	e8 05 43 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c002658a:	83 c4 10             	add    esp,0x10
c002658d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026591:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026598:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002659c:	7f 65                	jg     c0026603 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002659e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265a4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265ab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265ae:	01 ca                	add    edx,ecx
c00265b0:	83 c2 54             	add    edx,0x54
c00265b3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265b7:	85 c0                	test   eax,eax
c00265b9:	75 43                	jne    c00265fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265c8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265cb:	01 ca                	add    edx,ecx
c00265cd:	8d 4a 54             	lea    ecx,[edx+0x54]
c00265d0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00265d3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265dd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265e7:	01 ca                	add    edx,ecx
c00265e9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00265ef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00265f2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265f9:	83 e8 20             	sub    eax,0x20
c00265fc:	eb 1a                	jmp    c0026618 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00265fe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026601:	eb 95                	jmp    c0026598 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026603:	83 ec 0c             	sub    esp,0xc
c0026606:	68 ac db 02 c0       	push   0xc002dbac
c002660b:	e8 7f 42 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0026610:	83 c4 10             	add    esp,0x10
c0026613:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026618:	8d 65 f4             	lea    esp,[ebp-0xc]
c002661b:	5b                   	pop    ebx
c002661c:	5e                   	pop    esi
c002661d:	5f                   	pop    edi
c002661e:	5d                   	pop    ebp
c002661f:	c3                   	ret    

c0026620 <PIC::disable()>:
c0026620:	55                   	push   ebp
c0026621:	89 e5                	mov    ebp,esp
c0026623:	83 ec 10             	sub    esp,0x10
c0026626:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002662c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026630:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026633:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026637:	ee                   	out    dx,al
c0026638:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002663e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026642:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026645:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026649:	ee                   	out    dx,al
c002664a:	90                   	nop
c002664b:	c9                   	leave  
c002664c:	c3                   	ret    
c002664d:	90                   	nop

c002664e <PIC::close(int, int, void*)>:
c002664e:	55                   	push   ebp
c002664f:	89 e5                	mov    ebp,esp
c0026651:	83 ec 08             	sub    esp,0x8
c0026654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026657:	8b 00                	mov    eax,DWORD PTR [eax]
c0026659:	83 c0 3c             	add    eax,0x3c
c002665c:	8b 00                	mov    eax,DWORD PTR [eax]
c002665e:	83 ec 0c             	sub    esp,0xc
c0026661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026664:	ff d0                	call   eax
c0026666:	83 c4 10             	add    esp,0x10
c0026669:	b8 00 00 00 00       	mov    eax,0x0
c002666e:	c9                   	leave  
c002666f:	c3                   	ret    

c0026670 <PIC::PIC()>:
c0026670:	83 ec 0c             	sub    esp,0xc
c0026673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026677:	83 ec 08             	sub    esp,0x8
c002667a:	68 58 dc 02 c0       	push   0xc002dc58
c002667f:	50                   	push   eax
c0026680:	e8 ed e5 fe ff       	call   c0014c72 <InterruptController::InterruptController(char const*)>
c0026685:	83 c4 10             	add    esp,0x10
c0026688:	ba 84 dc 02 c0       	mov    edx,0xc002dc84
c002668d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026691:	89 10                	mov    DWORD PTR [eax],edx
c0026693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026697:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002669d:	0f b6 d0             	movzx  edx,al
c00266a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266b5:	0f b6 d0             	movzx  edx,al
c00266b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266cb:	8d 50 01             	lea    edx,[eax+0x1]
c00266ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266d8:	0f b6 d0             	movzx  edx,al
c00266db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266e3:	83 e1 3f             	and    ecx,0x3f
c00266e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f4:	0f b6 d0             	movzx  edx,al
c00266f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026706:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670c:	0f b6 d0             	movzx  edx,al
c002670f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026713:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026722:	8d 50 01             	lea    edx,[eax+0x1]
c0026725:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026729:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002672f:	0f b6 d0             	movzx  edx,al
c0026732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026736:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002673a:	83 e1 3f             	and    ecx,0x3f
c002673d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026741:	90                   	nop
c0026742:	83 c4 0c             	add    esp,0xc
c0026745:	c3                   	ret    

c0026746 <PIC::ioWait()>:
c0026746:	eb 00                	jmp    c0026748 <PIC::ioWait()+0x2>
c0026748:	eb 00                	jmp    c002674a <PIC::ioWait()+0x4>
c002674a:	90                   	nop
c002674b:	c3                   	ret    

c002674c <PIC::getIRQReg(int)>:
c002674c:	55                   	push   ebp
c002674d:	89 e5                	mov    ebp,esp
c002674f:	83 ec 10             	sub    esp,0x10
c0026752:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026755:	0f b6 c0             	movzx  eax,al
c0026758:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002675e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026761:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026764:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026768:	ee                   	out    dx,al
c0026769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002676c:	0f b6 c0             	movzx  eax,al
c002676f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026775:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026778:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002677b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002677f:	ee                   	out    dx,al
c0026780:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026786:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002678a:	89 c2                	mov    edx,eax
c002678c:	ec                   	in     al,dx
c002678d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026790:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026793:	0f b6 c0             	movzx  eax,al
c0026796:	c1 e0 08             	shl    eax,0x8
c0026799:	89 c1                	mov    ecx,eax
c002679b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267a1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267a5:	89 c2                	mov    edx,eax
c00267a7:	ec                   	in     al,dx
c00267a8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267ab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267ae:	0f b6 c0             	movzx  eax,al
c00267b1:	09 c8                	or     eax,ecx
c00267b3:	c9                   	leave  
c00267b4:	c3                   	ret    
c00267b5:	90                   	nop

c00267b6 <PIC::eoi(unsigned char)>:
c00267b6:	55                   	push   ebp
c00267b7:	89 e5                	mov    ebp,esp
c00267b9:	83 ec 14             	sub    esp,0x14
c00267bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267bf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267c2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267c6:	75 1e                	jne    c00267e6 <PIC::eoi(unsigned char)+0x30>
c00267c8:	6a 0b                	push   0xb
c00267ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267cd:	e8 7a ff ff ff       	call   c002674c <PIC::getIRQReg(int)>
c00267d2:	83 c4 08             	add    esp,0x8
c00267d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00267d9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00267dd:	25 80 00 00 00       	and    eax,0x80
c00267e2:	85 c0                	test   eax,eax
c00267e4:	74 5f                	je     c0026845 <PIC::eoi(unsigned char)+0x8f>
c00267e6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00267ea:	75 2d                	jne    c0026819 <PIC::eoi(unsigned char)+0x63>
c00267ec:	6a 0b                	push   0xb
c00267ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267f1:	e8 56 ff ff ff       	call   c002674c <PIC::getIRQReg(int)>
c00267f6:	83 c4 08             	add    esp,0x8
c00267f9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00267fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026800:	66 85 c0             	test   ax,ax
c0026803:	78 14                	js     c0026819 <PIC::eoi(unsigned char)+0x63>
c0026805:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002680b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002680f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026812:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026816:	ee                   	out    dx,al
c0026817:	eb 2d                	jmp    c0026846 <PIC::eoi(unsigned char)+0x90>
c0026819:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002681d:	76 12                	jbe    c0026831 <PIC::eoi(unsigned char)+0x7b>
c002681f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026825:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026829:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002682c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026830:	ee                   	out    dx,al
c0026831:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026837:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002683b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002683e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026842:	ee                   	out    dx,al
c0026843:	eb 01                	jmp    c0026846 <PIC::eoi(unsigned char)+0x90>
c0026845:	90                   	nop
c0026846:	c9                   	leave  
c0026847:	c3                   	ret    

c0026848 <PIC::remap()>:
c0026848:	55                   	push   ebp
c0026849:	89 e5                	mov    ebp,esp
c002684b:	83 ec 48             	sub    esp,0x48
c002684e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026855:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002685c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026862:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026865:	89 c2                	mov    edx,eax
c0026867:	ec                   	in     al,dx
c0026868:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002686b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002686e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026871:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026877:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002687a:	89 c2                	mov    edx,eax
c002687c:	ec                   	in     al,dx
c002687d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026880:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026883:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026886:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002688c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026890:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026893:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026896:	ee                   	out    dx,al
c0026897:	83 ec 0c             	sub    esp,0xc
c002689a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002689d:	e8 a4 fe ff ff       	call   c0026746 <PIC::ioWait()>
c00268a2:	83 c4 10             	add    esp,0x10
c00268a5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268ab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268af:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268b5:	ee                   	out    dx,al
c00268b6:	83 ec 0c             	sub    esp,0xc
c00268b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268bc:	e8 85 fe ff ff       	call   c0026746 <PIC::ioWait()>
c00268c1:	83 c4 10             	add    esp,0x10
c00268c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268c7:	0f b6 c0             	movzx  eax,al
c00268ca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00268d0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00268d3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00268d6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00268d9:	ee                   	out    dx,al
c00268da:	83 ec 0c             	sub    esp,0xc
c00268dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268e0:	e8 61 fe ff ff       	call   c0026746 <PIC::ioWait()>
c00268e5:	83 c4 10             	add    esp,0x10
c00268e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268eb:	0f b6 c0             	movzx  eax,al
c00268ee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00268f4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00268f7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00268fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00268fd:	ee                   	out    dx,al
c00268fe:	83 ec 0c             	sub    esp,0xc
c0026901:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026904:	e8 3d fe ff ff       	call   c0026746 <PIC::ioWait()>
c0026909:	83 c4 10             	add    esp,0x10
c002690c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026912:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026916:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026919:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002691c:	ee                   	out    dx,al
c002691d:	83 ec 0c             	sub    esp,0xc
c0026920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026923:	e8 1e fe ff ff       	call   c0026746 <PIC::ioWait()>
c0026928:	83 c4 10             	add    esp,0x10
c002692b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026931:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026935:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026938:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002693b:	ee                   	out    dx,al
c002693c:	83 ec 0c             	sub    esp,0xc
c002693f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026942:	e8 ff fd ff ff       	call   c0026746 <PIC::ioWait()>
c0026947:	83 c4 10             	add    esp,0x10
c002694a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026950:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026954:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026957:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002695a:	ee                   	out    dx,al
c002695b:	83 ec 0c             	sub    esp,0xc
c002695e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026961:	e8 e0 fd ff ff       	call   c0026746 <PIC::ioWait()>
c0026966:	83 c4 10             	add    esp,0x10
c0026969:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002696f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026973:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026976:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026979:	ee                   	out    dx,al
c002697a:	83 ec 0c             	sub    esp,0xc
c002697d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026980:	e8 c1 fd ff ff       	call   c0026746 <PIC::ioWait()>
c0026985:	83 c4 10             	add    esp,0x10
c0026988:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002698c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026992:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026995:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026998:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002699b:	ee                   	out    dx,al
c002699c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269a0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269a6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269a9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269ac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269af:	ee                   	out    dx,al
c00269b0:	90                   	nop
c00269b1:	c9                   	leave  
c00269b2:	c3                   	ret    
c00269b3:	90                   	nop

c00269b4 <PIC::open(int, int, void*)>:
c00269b4:	55                   	push   ebp
c00269b5:	89 e5                	mov    ebp,esp
c00269b7:	83 ec 18             	sub    esp,0x18
c00269ba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269c0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269c4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269c7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269cb:	ee                   	out    dx,al
c00269cc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00269d2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00269d6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269d9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00269dd:	ee                   	out    dx,al
c00269de:	83 ec 0c             	sub    esp,0xc
c00269e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269e4:	e8 5f fe ff ff       	call   c0026848 <PIC::remap()>
c00269e9:	83 c4 10             	add    esp,0x10
c00269ec:	b8 00 00 00 00       	mov    eax,0x0
c00269f1:	c9                   	leave  
c00269f2:	c3                   	ret    
c00269f3:	90                   	nop

c00269f4 <APICTimer::close(int, int, void*)>:
c00269f4:	b8 00 00 00 00       	mov    eax,0x0
c00269f9:	c3                   	ret    

c00269fa <apicTimerHandler(regs*, void*)>:
c00269fa:	83 ec 0c             	sub    esp,0xc
c00269fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a03:	99                   	cdq    
c0026a04:	52                   	push   edx
c0026a05:	50                   	push   eax
c0026a06:	6a 00                	push   0x0
c0026a08:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a0d:	e8 92 07 00 00       	call   c00271a4 <__udivdi3>
c0026a12:	83 c4 10             	add    esp,0x10
c0026a15:	83 ec 08             	sub    esp,0x8
c0026a18:	52                   	push   edx
c0026a19:	50                   	push   eax
c0026a1a:	e8 08 04 ff ff       	call   c0016e27 <timerHandler(unsigned long long)>
c0026a1f:	83 c4 10             	add    esp,0x10
c0026a22:	90                   	nop
c0026a23:	83 c4 0c             	add    esp,0xc
c0026a26:	c3                   	ret    
c0026a27:	90                   	nop

c0026a28 <APICTimer::write(int)>:
c0026a28:	53                   	push   ebx
c0026a29:	83 ec 28             	sub    esp,0x28
c0026a2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a34:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a3a:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0026a3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a45:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a4b:	83 ec 0c             	sub    esp,0xc
c0026a4e:	50                   	push   eax
c0026a4f:	e8 de f4 ff ff       	call   c0025f32 <APIC::getBase()>
c0026a54:	83 c4 10             	add    esp,0x10
c0026a57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a5b:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026a60:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026a66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a72:	05 e0 03 00 00       	add    eax,0x3e0
c0026a77:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a81:	05 80 03 00 00       	add    eax,0x380
c0026a86:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026a8c:	fb                   	sti    
c0026a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a95:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026a9a:	83 d2 00             	adc    edx,0x0
c0026a9d:	89 c1                	mov    ecx,eax
c0026a9f:	89 d3                	mov    ebx,edx
c0026aa1:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026aa6:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026aac:	39 c8                	cmp    eax,ecx
c0026aae:	89 d0                	mov    eax,edx
c0026ab0:	19 d8                	sbb    eax,ebx
c0026ab2:	73 02                	jae    c0026ab6 <APICTimer::write(int)+0x8e>
c0026ab4:	eb d7                	jmp    c0026a8d <APICTimer::write(int)+0x65>
c0026ab6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aba:	05 20 03 00 00       	add    eax,0x320
c0026abf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ac9:	05 90 03 00 00       	add    eax,0x390
c0026ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ad0:	f7 d0                	not    eax
c0026ad2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ad6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ade:	ba 00 00 00 00       	mov    edx,0x0
c0026ae3:	f7 f3                	div    ebx
c0026ae5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ae9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026aed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026af3:	0d 00 00 02 00       	or     eax,0x20000
c0026af8:	89 c2                	mov    edx,eax
c0026afa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026afe:	05 20 03 00 00       	add    eax,0x320
c0026b03:	89 10                	mov    DWORD PTR [eax],edx
c0026b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b09:	05 e0 03 00 00       	add    eax,0x3e0
c0026b0e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b18:	05 80 03 00 00       	add    eax,0x380
c0026b1d:	89 c2                	mov    edx,eax
c0026b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b23:	89 02                	mov    DWORD PTR [edx],eax
c0026b25:	90                   	nop
c0026b26:	83 c4 28             	add    esp,0x28
c0026b29:	5b                   	pop    ebx
c0026b2a:	c3                   	ret    
c0026b2b:	90                   	nop

c0026b2c <APICTimer::open(int, int, void*)>:
c0026b2c:	57                   	push   edi
c0026b2d:	56                   	push   esi
c0026b2e:	53                   	push   ebx
c0026b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b35:	83 c0 24             	add    eax,0x24
c0026b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b3a:	83 ec 08             	sub    esp,0x8
c0026b3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b45:	ff d0                	call   eax
c0026b47:	83 c4 10             	add    esp,0x10
c0026b4a:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0026b4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b55:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b5b:	83 ec 0c             	sub    esp,0xc
c0026b5e:	50                   	push   eax
c0026b5f:	e8 ce f3 ff ff       	call   c0025f32 <APIC::getBase()>
c0026b64:	83 c4 10             	add    esp,0x10
c0026b67:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b71:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b77:	0f b6 f8             	movzx  edi,al
c0026b7a:	89 d0                	mov    eax,edx
c0026b7c:	ba 00 00 00 00       	mov    edx,0x0
c0026b81:	89 c1                	mov    ecx,eax
c0026b83:	80 e5 ff             	and    ch,0xff
c0026b86:	89 cb                	mov    ebx,ecx
c0026b88:	0f b6 f2             	movzx  esi,dl
c0026b8b:	89 d8                	mov    eax,ebx
c0026b8d:	89 f2                	mov    edx,esi
c0026b8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b93:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026b96:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026b9a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026b9e:	83 e0 00             	and    eax,0x0
c0026ba1:	09 d0                	or     eax,edx
c0026ba3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bb1:	8d 50 01             	lea    edx,[eax+0x1]
c0026bb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bb8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bbe:	0f b6 d0             	movzx  edx,al
c0026bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc5:	83 c2 08             	add    edx,0x8
c0026bc8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026bcc:	0f b6 c9             	movzx  ecx,cl
c0026bcf:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026bd5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bdd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026be1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026beb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026bf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bf9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026bff:	83 ec 0c             	sub    esp,0xc
c0026c02:	51                   	push   ecx
c0026c03:	6a 01                	push   0x1
c0026c05:	68 fa 69 02 c0       	push   0xc00269fa
c0026c0a:	52                   	push   edx
c0026c0b:	50                   	push   eax
c0026c0c:	e8 7b d6 fe ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c11:	83 c4 20             	add    esp,0x20
c0026c14:	89 c2                	mov    edx,eax
c0026c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c20:	b8 00 00 00 00       	mov    eax,0x0
c0026c25:	5b                   	pop    ebx
c0026c26:	5e                   	pop    esi
c0026c27:	5f                   	pop    edi
c0026c28:	c3                   	ret    
c0026c29:	90                   	nop

c0026c2a <APICTimer::APICTimer()>:
c0026c2a:	83 ec 0c             	sub    esp,0xc
c0026c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c31:	83 ec 08             	sub    esp,0x8
c0026c34:	68 c4 dc 02 c0       	push   0xc002dcc4
c0026c39:	50                   	push   eax
c0026c3a:	e8 59 01 ff ff       	call   c0016d98 <Timer::Timer(char const*)>
c0026c3f:	83 c4 10             	add    esp,0x10
c0026c42:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0026c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c4b:	89 10                	mov    DWORD PTR [eax],edx
c0026c4d:	90                   	nop
c0026c4e:	83 c4 0c             	add    esp,0xc
c0026c51:	c3                   	ret    

c0026c52 <PIT::write(int)>:
c0026c52:	83 ec 10             	sub    esp,0x10
c0026c55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c5d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c67:	a3 e4 31 03 c0       	mov    ds:0xc00331e4,eax
c0026c6c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026c71:	99                   	cdq    
c0026c72:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c7a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026c81:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026c86:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026c8a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026c8f:	ee                   	out    dx,al
c0026c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c94:	0f b6 c0             	movzx  eax,al
c0026c97:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026c9e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026ca2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026ca6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026cab:	ee                   	out    dx,al
c0026cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cb0:	c1 f8 08             	sar    eax,0x8
c0026cb3:	0f b6 c0             	movzx  eax,al
c0026cb6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cbd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026cc1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026cc5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026cca:	ee                   	out    dx,al
c0026ccb:	90                   	nop
c0026ccc:	83 c4 10             	add    esp,0x10
c0026ccf:	c3                   	ret    

c0026cd0 <pitHandler(regs*, void*)>:
c0026cd0:	83 ec 0c             	sub    esp,0xc
c0026cd3:	a1 e4 31 03 c0       	mov    eax,ds:0xc00331e4
c0026cd8:	99                   	cdq    
c0026cd9:	52                   	push   edx
c0026cda:	50                   	push   eax
c0026cdb:	6a 00                	push   0x0
c0026cdd:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ce2:	e8 bd 04 00 00       	call   c00271a4 <__udivdi3>
c0026ce7:	83 c4 10             	add    esp,0x10
c0026cea:	83 ec 08             	sub    esp,0x8
c0026ced:	52                   	push   edx
c0026cee:	50                   	push   eax
c0026cef:	e8 33 01 ff ff       	call   c0016e27 <timerHandler(unsigned long long)>
c0026cf4:	83 c4 10             	add    esp,0x10
c0026cf7:	90                   	nop
c0026cf8:	83 c4 0c             	add    esp,0xc
c0026cfb:	c3                   	ret    

c0026cfc <PIT::open(int, int, void*)>:
c0026cfc:	83 ec 0c             	sub    esp,0xc
c0026cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d05:	83 c0 24             	add    eax,0x24
c0026d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d0a:	83 ec 08             	sub    esp,0x8
c0026d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d15:	ff d0                	call   eax
c0026d17:	83 c4 10             	add    esp,0x10
c0026d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d1e:	83 ec 0c             	sub    esp,0xc
c0026d21:	6a 00                	push   0x0
c0026d23:	6a 01                	push   0x1
c0026d25:	68 d0 6c 02 c0       	push   0xc0026cd0
c0026d2a:	6a 00                	push   0x0
c0026d2c:	50                   	push   eax
c0026d2d:	e8 5a d5 fe ff       	call   c001428c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d32:	83 c4 20             	add    esp,0x20
c0026d35:	89 c2                	mov    edx,eax
c0026d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d41:	b8 00 00 00 00       	mov    eax,0x0
c0026d46:	83 c4 0c             	add    esp,0xc
c0026d49:	c3                   	ret    

c0026d4a <PIT::close(int, int, void*)>:
c0026d4a:	83 ec 0c             	sub    esp,0xc
c0026d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d51:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5f:	6a 01                	push   0x1
c0026d61:	68 d0 6c 02 c0       	push   0xc0026cd0
c0026d66:	6a 00                	push   0x0
c0026d68:	50                   	push   eax
c0026d69:	e8 5c d5 fe ff       	call   c00142ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026d6e:	83 c4 10             	add    esp,0x10
c0026d71:	b8 00 00 00 00       	mov    eax,0x0
c0026d76:	83 c4 0c             	add    esp,0xc
c0026d79:	c3                   	ret    

c0026d7a <PIT::PIT()>:
c0026d7a:	83 ec 0c             	sub    esp,0xc
c0026d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d81:	83 ec 08             	sub    esp,0x8
c0026d84:	68 00 dd 02 c0       	push   0xc002dd00
c0026d89:	50                   	push   eax
c0026d8a:	e8 09 00 ff ff       	call   c0016d98 <Timer::Timer(char const*)>
c0026d8f:	83 c4 10             	add    esp,0x10
c0026d92:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c0026d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d9b:	89 10                	mov    DWORD PTR [eax],edx
c0026d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026da7:	0f b6 d0             	movzx  edx,al
c0026daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dbf:	0f b6 d0             	movzx  edx,al
c0026dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dcf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0026dd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026ddc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026de2:	0f b6 d0             	movzx  edx,al
c0026de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026ded:	83 e1 3f             	and    ecx,0x3f
c0026df0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026df4:	90                   	nop
c0026df5:	83 c4 0c             	add    esp,0xc
c0026df8:	c3                   	ret    
c0026df9:	66 90                	xchg   ax,ax
c0026dfb:	66 90                	xchg   ax,ax
c0026dfd:	66 90                	xchg   ax,ax
c0026dff:	90                   	nop

c0026e00 <avxDetect>:
c0026e00:	b8 00 00 00 00       	mov    eax,0x0
c0026e05:	c3                   	ret    

c0026e06 <avxSave>:
c0026e06:	c3                   	ret    

c0026e07 <avxLoad>:
c0026e07:	c3                   	ret    

c0026e08 <avxInit>:
c0026e08:	c3                   	ret    

c0026e09 <avxClose>:
c0026e09:	c3                   	ret    

c0026e0a <wouldSheSayYes>:
c0026e0a:	c3                   	ret    
c0026e0b:	49                   	dec    ecx
c0026e0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e14:	75 20                	jne    c0026e36 <sseDetect.noSSE+0x1>
c0026e16:	4e                   	dec    esi
c0026e17:	79 61                	jns    c0026e7a <x87Detect+0x14>
c0026e19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e1e:	66 90                	xchg   ax,ax

c0026e20 <absolutelyNoChanceInHell>:
c0026e20:	b8 01 00 00 00       	mov    eax,0x1
c0026e25:	0f a2                	cpuid  
c0026e27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e2d:	74 06                	je     c0026e35 <sseDetect.noSSE>
c0026e2f:	b8 01 00 00 00       	mov    eax,0x1
c0026e34:	c3                   	ret    

c0026e35 <sseDetect.noSSE>:
c0026e35:	31 c0                	xor    eax,eax
c0026e37:	c3                   	ret    

c0026e38 <sseSave>:
c0026e38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e3d:	c3                   	ret    

c0026e3e <sseLoad>:
c0026e3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e43:	c3                   	ret    

c0026e44 <sseInit>:
c0026e44:	e8 49 00 00 00       	call   c0026e92 <x87Init>
c0026e49:	0f 20 e0             	mov    eax,cr4
c0026e4c:	66 0d 00 06          	or     ax,0x600
c0026e50:	0f 22 e0             	mov    cr4,eax
c0026e53:	c3                   	ret    

c0026e54 <sseClose>:
c0026e54:	c3                   	ret    
c0026e55:	66 90                	xchg   ax,ax
c0026e57:	66 90                	xchg   ax,ax
c0026e59:	66 90                	xchg   ax,ax
c0026e5b:	66 90                	xchg   ax,ax
c0026e5d:	66 90                	xchg   ax,ax
c0026e5f:	90                   	nop

c0026e60 <value_37F>:
c0026e60:	7f 03                	jg     c0026e65 <value_37A+0x1>

c0026e62 <value_37E>:
c0026e62:	7e 03                	jle    c0026e67 <x87Detect+0x1>

c0026e64 <value_37A>:
c0026e64:	7a 03                	jp     c0026e69 <x87Detect+0x3>

c0026e66 <x87Detect>:
c0026e66:	b8 01 00 00 00       	mov    eax,0x1
c0026e6b:	0f a2                	cpuid  
c0026e6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e73:	74 06                	je     c0026e7b <x87Detect.nox87>
c0026e75:	b8 01 00 00 00       	mov    eax,0x1
c0026e7a:	c3                   	ret    

c0026e7b <x87Detect.nox87>:
c0026e7b:	b8 00 00 00 00       	mov    eax,0x0
c0026e80:	c3                   	ret    

c0026e81 <x87Save>:
c0026e81:	55                   	push   ebp
c0026e82:	89 e5                	mov    ebp,esp
c0026e84:	9b dd 75 08          	fsave  [ebp+0x8]
c0026e88:	c9                   	leave  
c0026e89:	c3                   	ret    

c0026e8a <x87Load>:
c0026e8a:	55                   	push   ebp
c0026e8b:	89 e5                	mov    ebp,esp
c0026e8d:	dd 65 08             	frstor [ebp+0x8]
c0026e90:	c9                   	leave  
c0026e91:	c3                   	ret    

c0026e92 <x87Init>:
c0026e92:	9b db e3             	finit  
c0026e95:	0f 20 c0             	mov    eax,cr0
c0026e98:	66 25 fb ff          	and    ax,0xfffb
c0026e9c:	66 0d 22 00          	or     ax,0x22
c0026ea0:	0f 22 c0             	mov    cr0,eax
c0026ea3:	0f 06                	clts   
c0026ea5:	d9 2d 64 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e64
c0026eab:	c3                   	ret    

c0026eac <x87Close>:
c0026eac:	c3                   	ret    
c0026ead:	66 90                	xchg   ax,ax
c0026eaf:	90                   	nop

c0026eb0 <__do_global_ctors_aux>:
c0026eb0:	a1 e8 9a 02 c0       	mov    eax,ds:0xc0029ae8
c0026eb5:	83 f8 ff             	cmp    eax,0xffffffff
c0026eb8:	74 1a                	je     c0026ed4 <__do_global_ctors_aux+0x24>
c0026eba:	55                   	push   ebp
c0026ebb:	89 e5                	mov    ebp,esp
c0026ebd:	53                   	push   ebx
c0026ebe:	52                   	push   edx
c0026ebf:	bb e8 9a 02 c0       	mov    ebx,0xc0029ae8
c0026ec4:	ff d0                	call   eax
c0026ec6:	83 eb 04             	sub    ebx,0x4
c0026ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026ecb:	83 f8 ff             	cmp    eax,0xffffffff
c0026ece:	75 f4                	jne    c0026ec4 <__do_global_ctors_aux+0x14>
c0026ed0:	58                   	pop    eax
c0026ed1:	5b                   	pop    ebx
c0026ed2:	5d                   	pop    ebp
c0026ed3:	c3                   	ret    
c0026ed4:	c3                   	ret    
c0026ed5:	66 90                	xchg   ax,ax
c0026ed7:	90                   	nop

c0026ed8 <__divdi3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	57                   	push   edi
c0026eda:	56                   	push   esi
c0026edb:	53                   	push   ebx
c0026edc:	83 ec 1c             	sub    esp,0x1c
c0026edf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ee3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ee7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026eea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026eee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026ef2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ef6:	85 db                	test   ebx,ebx
c0026ef8:	0f 88 8e 00 00 00    	js     c0026f8c <__divdi3+0xb4>
c0026efe:	89 dd                	mov    ebp,ebx
c0026f00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f08:	89 d3                	mov    ebx,edx
c0026f0a:	85 d2                	test   edx,edx
c0026f0c:	79 0d                	jns    c0026f1b <__divdi3+0x43>
c0026f0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f12:	f7 d8                	neg    eax
c0026f14:	83 d2 00             	adc    edx,0x0
c0026f17:	f7 da                	neg    edx
c0026f19:	89 d3                	mov    ebx,edx
c0026f1b:	89 c7                	mov    edi,eax
c0026f1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f20:	85 db                	test   ebx,ebx
c0026f22:	75 48                	jne    c0026f6c <__divdi3+0x94>
c0026f24:	39 ef                	cmp    edi,ebp
c0026f26:	76 24                	jbe    c0026f4c <__divdi3+0x74>
c0026f28:	89 ea                	mov    edx,ebp
c0026f2a:	f7 f7                	div    edi
c0026f2c:	89 c1                	mov    ecx,eax
c0026f2e:	31 f6                	xor    esi,esi
c0026f30:	89 c8                	mov    eax,ecx
c0026f32:	89 f2                	mov    edx,esi
c0026f34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f38:	85 c9                	test   ecx,ecx
c0026f3a:	74 07                	je     c0026f43 <__divdi3+0x6b>
c0026f3c:	f7 d8                	neg    eax
c0026f3e:	83 d2 00             	adc    edx,0x0
c0026f41:	f7 da                	neg    edx
c0026f43:	83 c4 1c             	add    esp,0x1c
c0026f46:	5b                   	pop    ebx
c0026f47:	5e                   	pop    esi
c0026f48:	5f                   	pop    edi
c0026f49:	5d                   	pop    ebp
c0026f4a:	c3                   	ret    
c0026f4b:	90                   	nop
c0026f4c:	85 ff                	test   edi,edi
c0026f4e:	75 0b                	jne    c0026f5b <__divdi3+0x83>
c0026f50:	b8 01 00 00 00       	mov    eax,0x1
c0026f55:	31 d2                	xor    edx,edx
c0026f57:	f7 f3                	div    ebx
c0026f59:	89 c7                	mov    edi,eax
c0026f5b:	31 d2                	xor    edx,edx
c0026f5d:	89 e8                	mov    eax,ebp
c0026f5f:	f7 f7                	div    edi
c0026f61:	89 c6                	mov    esi,eax
c0026f63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f66:	f7 f7                	div    edi
c0026f68:	89 c1                	mov    ecx,eax
c0026f6a:	eb c4                	jmp    c0026f30 <__divdi3+0x58>
c0026f6c:	39 eb                	cmp    ebx,ebp
c0026f6e:	77 3c                	ja     c0026fac <__divdi3+0xd4>
c0026f70:	0f bd f3             	bsr    esi,ebx
c0026f73:	83 f6 1f             	xor    esi,0x1f
c0026f76:	75 40                	jne    c0026fb8 <__divdi3+0xe0>
c0026f78:	39 eb                	cmp    ebx,ebp
c0026f7a:	72 09                	jb     c0026f85 <__divdi3+0xad>
c0026f7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f7f:	0f 87 97 00 00 00    	ja     c002701c <__divdi3+0x144>
c0026f85:	b9 01 00 00 00       	mov    ecx,0x1
c0026f8a:	eb a4                	jmp    c0026f30 <__divdi3+0x58>
c0026f8c:	f7 d9                	neg    ecx
c0026f8e:	83 d3 00             	adc    ebx,0x0
c0026f91:	f7 db                	neg    ebx
c0026f93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f9a:	89 dd                	mov    ebp,ebx
c0026f9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fa4:	e9 5f ff ff ff       	jmp    c0026f08 <__divdi3+0x30>
c0026fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fac:	31 f6                	xor    esi,esi
c0026fae:	31 c9                	xor    ecx,ecx
c0026fb0:	e9 7b ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0026fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fb8:	b8 20 00 00 00       	mov    eax,0x20
c0026fbd:	29 f0                	sub    eax,esi
c0026fbf:	89 f1                	mov    ecx,esi
c0026fc1:	d3 e3                	shl    ebx,cl
c0026fc3:	89 fa                	mov    edx,edi
c0026fc5:	88 c1                	mov    cl,al
c0026fc7:	d3 ea                	shr    edx,cl
c0026fc9:	09 da                	or     edx,ebx
c0026fcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fcf:	89 f1                	mov    ecx,esi
c0026fd1:	d3 e7                	shl    edi,cl
c0026fd3:	89 eb                	mov    ebx,ebp
c0026fd5:	88 c1                	mov    cl,al
c0026fd7:	d3 eb                	shr    ebx,cl
c0026fd9:	89 f1                	mov    ecx,esi
c0026fdb:	d3 e5                	shl    ebp,cl
c0026fdd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026fe0:	88 c1                	mov    cl,al
c0026fe2:	d3 ea                	shr    edx,cl
c0026fe4:	09 d5                	or     ebp,edx
c0026fe6:	89 e8                	mov    eax,ebp
c0026fe8:	89 da                	mov    edx,ebx
c0026fea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026fee:	89 d3                	mov    ebx,edx
c0026ff0:	89 c5                	mov    ebp,eax
c0026ff2:	f7 e7                	mul    edi
c0026ff4:	39 d3                	cmp    ebx,edx
c0026ff6:	72 18                	jb     c0027010 <__divdi3+0x138>
c0026ff8:	74 0a                	je     c0027004 <__divdi3+0x12c>
c0026ffa:	89 e9                	mov    ecx,ebp
c0026ffc:	31 f6                	xor    esi,esi
c0026ffe:	e9 2d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027003:	90                   	nop
c0027004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027007:	89 f1                	mov    ecx,esi
c0027009:	d3 e7                	shl    edi,cl
c002700b:	39 c7                	cmp    edi,eax
c002700d:	73 eb                	jae    c0026ffa <__divdi3+0x122>
c002700f:	90                   	nop
c0027010:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027013:	31 f6                	xor    esi,esi
c0027015:	e9 16 ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c002701a:	66 90                	xchg   ax,ax
c002701c:	31 c9                	xor    ecx,ecx
c002701e:	e9 0d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027023:	90                   	nop

c0027024 <__moddi3>:
c0027024:	55                   	push   ebp
c0027025:	57                   	push   edi
c0027026:	56                   	push   esi
c0027027:	53                   	push   ebx
c0027028:	83 ec 2c             	sub    esp,0x2c
c002702b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002702f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027033:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027037:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002703b:	85 db                	test   ebx,ebx
c002703d:	0f 88 85 00 00 00    	js     c00270c8 <__moddi3+0xa4>
c0027043:	89 de                	mov    esi,ebx
c0027045:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002704d:	89 d7                	mov    edi,edx
c002704f:	85 d2                	test   edx,edx
c0027051:	79 09                	jns    c002705c <__moddi3+0x38>
c0027053:	f7 d8                	neg    eax
c0027055:	83 d2 00             	adc    edx,0x0
c0027058:	f7 da                	neg    edx
c002705a:	89 d7                	mov    edi,edx
c002705c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027060:	89 cd                	mov    ebp,ecx
c0027062:	85 ff                	test   edi,edi
c0027064:	75 52                	jne    c00270b8 <__moddi3+0x94>
c0027066:	89 c3                	mov    ebx,eax
c0027068:	39 f0                	cmp    eax,esi
c002706a:	76 24                	jbe    c0027090 <__moddi3+0x6c>
c002706c:	89 c8                	mov    eax,ecx
c002706e:	89 f2                	mov    edx,esi
c0027070:	f7 f3                	div    ebx
c0027072:	89 d6                	mov    esi,edx
c0027074:	89 f0                	mov    eax,esi
c0027076:	31 d2                	xor    edx,edx
c0027078:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002707c:	85 c9                	test   ecx,ecx
c002707e:	74 07                	je     c0027087 <__moddi3+0x63>
c0027080:	f7 d8                	neg    eax
c0027082:	83 d2 00             	adc    edx,0x0
c0027085:	f7 da                	neg    edx
c0027087:	83 c4 2c             	add    esp,0x2c
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5f                   	pop    edi
c002708d:	5d                   	pop    ebp
c002708e:	c3                   	ret    
c002708f:	90                   	nop
c0027090:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027094:	85 db                	test   ebx,ebx
c0027096:	75 0d                	jne    c00270a5 <__moddi3+0x81>
c0027098:	b8 01 00 00 00       	mov    eax,0x1
c002709d:	31 d2                	xor    edx,edx
c002709f:	f7 f7                	div    edi
c00270a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270a5:	89 f0                	mov    eax,esi
c00270a7:	31 d2                	xor    edx,edx
c00270a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270ad:	f7 f7                	div    edi
c00270af:	89 e8                	mov    eax,ebp
c00270b1:	f7 f7                	div    edi
c00270b3:	89 d6                	mov    esi,edx
c00270b5:	eb bd                	jmp    c0027074 <__moddi3+0x50>
c00270b7:	90                   	nop
c00270b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270bc:	39 f7                	cmp    edi,esi
c00270be:	76 20                	jbe    c00270e0 <__moddi3+0xbc>
c00270c0:	89 c8                	mov    eax,ecx
c00270c2:	89 f2                	mov    edx,esi
c00270c4:	eb b2                	jmp    c0027078 <__moddi3+0x54>
c00270c6:	66 90                	xchg   ax,ax
c00270c8:	f7 d9                	neg    ecx
c00270ca:	83 d3 00             	adc    ebx,0x0
c00270cd:	f7 db                	neg    ebx
c00270cf:	89 de                	mov    esi,ebx
c00270d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00270d9:	e9 6f ff ff ff       	jmp    c002704d <__moddi3+0x29>
c00270de:	66 90                	xchg   ax,ax
c00270e0:	0f bd c7             	bsr    eax,edi
c00270e3:	83 f0 1f             	xor    eax,0x1f
c00270e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00270ea:	75 24                	jne    c0027110 <__moddi3+0xec>
c00270ec:	39 f7                	cmp    edi,esi
c00270ee:	72 06                	jb     c00270f6 <__moddi3+0xd2>
c00270f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00270f4:	77 0c                	ja     c0027102 <__moddi3+0xde>
c00270f6:	89 e9                	mov    ecx,ebp
c00270f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00270fc:	19 fe                	sbb    esi,edi
c00270fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027102:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027106:	89 f2                	mov    edx,esi
c0027108:	e9 6b ff ff ff       	jmp    c0027078 <__moddi3+0x54>
c002710d:	8d 76 00             	lea    esi,[esi+0x0]
c0027110:	b8 20 00 00 00       	mov    eax,0x20
c0027115:	89 c2                	mov    edx,eax
c0027117:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002711b:	29 da                	sub    edx,ebx
c002711d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027121:	88 d9                	mov    cl,bl
c0027123:	d3 e7                	shl    edi,cl
c0027125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027129:	88 d1                	mov    cl,dl
c002712b:	d3 e8                	shr    eax,cl
c002712d:	09 c7                	or     edi,eax
c002712f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027133:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027137:	89 d8                	mov    eax,ebx
c0027139:	88 d9                	mov    cl,bl
c002713b:	d3 e7                	shl    edi,cl
c002713d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027141:	89 f3                	mov    ebx,esi
c0027143:	88 d1                	mov    cl,dl
c0027145:	d3 eb                	shr    ebx,cl
c0027147:	89 c7                	mov    edi,eax
c0027149:	88 c1                	mov    cl,al
c002714b:	d3 e6                	shl    esi,cl
c002714d:	89 e8                	mov    eax,ebp
c002714f:	88 d1                	mov    cl,dl
c0027151:	d3 e8                	shr    eax,cl
c0027153:	09 f0                	or     eax,esi
c0027155:	89 f9                	mov    ecx,edi
c0027157:	d3 e5                	shl    ebp,cl
c0027159:	89 da                	mov    edx,ebx
c002715b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002715f:	89 d3                	mov    ebx,edx
c0027161:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027165:	89 c6                	mov    esi,eax
c0027167:	89 d1                	mov    ecx,edx
c0027169:	39 d3                	cmp    ebx,edx
c002716b:	72 27                	jb     c0027194 <__moddi3+0x170>
c002716d:	74 21                	je     c0027190 <__moddi3+0x16c>
c002716f:	29 f5                	sub    ebp,esi
c0027171:	19 cb                	sbb    ebx,ecx
c0027173:	89 de                	mov    esi,ebx
c0027175:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027179:	d3 e6                	shl    esi,cl
c002717b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002717f:	89 f9                	mov    ecx,edi
c0027181:	d3 ed                	shr    ebp,cl
c0027183:	09 ee                	or     esi,ebp
c0027185:	89 f0                	mov    eax,esi
c0027187:	d3 eb                	shr    ebx,cl
c0027189:	89 da                	mov    edx,ebx
c002718b:	e9 e8 fe ff ff       	jmp    c0027078 <__moddi3+0x54>
c0027190:	39 c5                	cmp    ebp,eax
c0027192:	73 db                	jae    c002716f <__moddi3+0x14b>
c0027194:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027198:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002719c:	89 d1                	mov    ecx,edx
c002719e:	89 c6                	mov    esi,eax
c00271a0:	eb cd                	jmp    c002716f <__moddi3+0x14b>
c00271a2:	66 90                	xchg   ax,ax

c00271a4 <__udivdi3>:
c00271a4:	55                   	push   ebp
c00271a5:	57                   	push   edi
c00271a6:	56                   	push   esi
c00271a7:	53                   	push   ebx
c00271a8:	83 ec 1c             	sub    esp,0x1c
c00271ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271bb:	85 d2                	test   edx,edx
c00271bd:	75 41                	jne    c0027200 <__udivdi3+0x5c>
c00271bf:	39 f7                	cmp    edi,esi
c00271c1:	76 15                	jbe    c00271d8 <__udivdi3+0x34>
c00271c3:	89 e8                	mov    eax,ebp
c00271c5:	89 f2                	mov    edx,esi
c00271c7:	f7 f7                	div    edi
c00271c9:	31 db                	xor    ebx,ebx
c00271cb:	89 da                	mov    edx,ebx
c00271cd:	83 c4 1c             	add    esp,0x1c
c00271d0:	5b                   	pop    ebx
c00271d1:	5e                   	pop    esi
c00271d2:	5f                   	pop    edi
c00271d3:	5d                   	pop    ebp
c00271d4:	c3                   	ret    
c00271d5:	8d 76 00             	lea    esi,[esi+0x0]
c00271d8:	89 f9                	mov    ecx,edi
c00271da:	85 ff                	test   edi,edi
c00271dc:	75 0b                	jne    c00271e9 <__udivdi3+0x45>
c00271de:	b8 01 00 00 00       	mov    eax,0x1
c00271e3:	31 d2                	xor    edx,edx
c00271e5:	f7 f7                	div    edi
c00271e7:	89 c1                	mov    ecx,eax
c00271e9:	31 d2                	xor    edx,edx
c00271eb:	89 f0                	mov    eax,esi
c00271ed:	f7 f1                	div    ecx
c00271ef:	89 c3                	mov    ebx,eax
c00271f1:	89 e8                	mov    eax,ebp
c00271f3:	f7 f1                	div    ecx
c00271f5:	89 da                	mov    edx,ebx
c00271f7:	83 c4 1c             	add    esp,0x1c
c00271fa:	5b                   	pop    ebx
c00271fb:	5e                   	pop    esi
c00271fc:	5f                   	pop    edi
c00271fd:	5d                   	pop    ebp
c00271fe:	c3                   	ret    
c00271ff:	90                   	nop
c0027200:	39 f2                	cmp    edx,esi
c0027202:	77 1c                	ja     c0027220 <__udivdi3+0x7c>
c0027204:	0f bd da             	bsr    ebx,edx
c0027207:	83 f3 1f             	xor    ebx,0x1f
c002720a:	75 24                	jne    c0027230 <__udivdi3+0x8c>
c002720c:	39 f2                	cmp    edx,esi
c002720e:	72 08                	jb     c0027218 <__udivdi3+0x74>
c0027210:	39 ef                	cmp    edi,ebp
c0027212:	0f 87 84 00 00 00    	ja     c002729c <__udivdi3+0xf8>
c0027218:	b8 01 00 00 00       	mov    eax,0x1
c002721d:	eb ac                	jmp    c00271cb <__udivdi3+0x27>
c002721f:	90                   	nop
c0027220:	31 db                	xor    ebx,ebx
c0027222:	31 c0                	xor    eax,eax
c0027224:	89 da                	mov    edx,ebx
c0027226:	83 c4 1c             	add    esp,0x1c
c0027229:	5b                   	pop    ebx
c002722a:	5e                   	pop    esi
c002722b:	5f                   	pop    edi
c002722c:	5d                   	pop    ebp
c002722d:	c3                   	ret    
c002722e:	66 90                	xchg   ax,ax
c0027230:	b8 20 00 00 00       	mov    eax,0x20
c0027235:	29 d8                	sub    eax,ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 e2                	shl    edx,cl
c002723b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002723f:	89 fa                	mov    edx,edi
c0027241:	88 c1                	mov    cl,al
c0027243:	d3 ea                	shr    edx,cl
c0027245:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027249:	09 d1                	or     ecx,edx
c002724b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002724f:	88 d9                	mov    cl,bl
c0027251:	d3 e7                	shl    edi,cl
c0027253:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027257:	89 f7                	mov    edi,esi
c0027259:	88 c1                	mov    cl,al
c002725b:	d3 ef                	shr    edi,cl
c002725d:	88 d9                	mov    cl,bl
c002725f:	d3 e6                	shl    esi,cl
c0027261:	89 ea                	mov    edx,ebp
c0027263:	88 c1                	mov    cl,al
c0027265:	d3 ea                	shr    edx,cl
c0027267:	09 d6                	or     esi,edx
c0027269:	89 f0                	mov    eax,esi
c002726b:	89 fa                	mov    edx,edi
c002726d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027271:	89 d7                	mov    edi,edx
c0027273:	89 c6                	mov    esi,eax
c0027275:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027279:	39 d7                	cmp    edi,edx
c002727b:	72 13                	jb     c0027290 <__udivdi3+0xec>
c002727d:	74 09                	je     c0027288 <__udivdi3+0xe4>
c002727f:	89 f0                	mov    eax,esi
c0027281:	31 db                	xor    ebx,ebx
c0027283:	e9 43 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c0027288:	88 d9                	mov    cl,bl
c002728a:	d3 e5                	shl    ebp,cl
c002728c:	39 c5                	cmp    ebp,eax
c002728e:	73 ef                	jae    c002727f <__udivdi3+0xdb>
c0027290:	8d 46 ff             	lea    eax,[esi-0x1]
c0027293:	31 db                	xor    ebx,ebx
c0027295:	e9 31 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c002729a:	66 90                	xchg   ax,ax
c002729c:	31 c0                	xor    eax,eax
c002729e:	e9 28 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c00272a3:	90                   	nop

c00272a4 <__umoddi3>:
c00272a4:	55                   	push   ebp
c00272a5:	57                   	push   edi
c00272a6:	56                   	push   esi
c00272a7:	53                   	push   ebx
c00272a8:	83 ec 1c             	sub    esp,0x1c
c00272ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272bb:	89 da                	mov    edx,ebx
c00272bd:	85 c0                	test   eax,eax
c00272bf:	75 37                	jne    c00272f8 <__umoddi3+0x54>
c00272c1:	39 df                	cmp    edi,ebx
c00272c3:	76 13                	jbe    c00272d8 <__umoddi3+0x34>
c00272c5:	89 f0                	mov    eax,esi
c00272c7:	f7 f7                	div    edi
c00272c9:	89 d0                	mov    eax,edx
c00272cb:	31 d2                	xor    edx,edx
c00272cd:	83 c4 1c             	add    esp,0x1c
c00272d0:	5b                   	pop    ebx
c00272d1:	5e                   	pop    esi
c00272d2:	5f                   	pop    edi
c00272d3:	5d                   	pop    ebp
c00272d4:	c3                   	ret    
c00272d5:	8d 76 00             	lea    esi,[esi+0x0]
c00272d8:	89 fd                	mov    ebp,edi
c00272da:	85 ff                	test   edi,edi
c00272dc:	75 0b                	jne    c00272e9 <__umoddi3+0x45>
c00272de:	b8 01 00 00 00       	mov    eax,0x1
c00272e3:	31 d2                	xor    edx,edx
c00272e5:	f7 f7                	div    edi
c00272e7:	89 c5                	mov    ebp,eax
c00272e9:	89 d8                	mov    eax,ebx
c00272eb:	31 d2                	xor    edx,edx
c00272ed:	f7 f5                	div    ebp
c00272ef:	89 f0                	mov    eax,esi
c00272f1:	f7 f5                	div    ebp
c00272f3:	89 d0                	mov    eax,edx
c00272f5:	eb d4                	jmp    c00272cb <__umoddi3+0x27>
c00272f7:	90                   	nop
c00272f8:	89 f1                	mov    ecx,esi
c00272fa:	39 d8                	cmp    eax,ebx
c00272fc:	76 0a                	jbe    c0027308 <__umoddi3+0x64>
c00272fe:	89 f0                	mov    eax,esi
c0027300:	83 c4 1c             	add    esp,0x1c
c0027303:	5b                   	pop    ebx
c0027304:	5e                   	pop    esi
c0027305:	5f                   	pop    edi
c0027306:	5d                   	pop    ebp
c0027307:	c3                   	ret    
c0027308:	0f bd e8             	bsr    ebp,eax
c002730b:	83 f5 1f             	xor    ebp,0x1f
c002730e:	75 1c                	jne    c002732c <__umoddi3+0x88>
c0027310:	39 d8                	cmp    eax,ebx
c0027312:	72 04                	jb     c0027318 <__umoddi3+0x74>
c0027314:	39 f7                	cmp    edi,esi
c0027316:	77 08                	ja     c0027320 <__umoddi3+0x7c>
c0027318:	89 da                	mov    edx,ebx
c002731a:	29 fe                	sub    esi,edi
c002731c:	19 c2                	sbb    edx,eax
c002731e:	89 f1                	mov    ecx,esi
c0027320:	89 c8                	mov    eax,ecx
c0027322:	83 c4 1c             	add    esp,0x1c
c0027325:	5b                   	pop    ebx
c0027326:	5e                   	pop    esi
c0027327:	5f                   	pop    edi
c0027328:	5d                   	pop    ebp
c0027329:	c3                   	ret    
c002732a:	66 90                	xchg   ax,ax
c002732c:	ba 20 00 00 00       	mov    edx,0x20
c0027331:	29 ea                	sub    edx,ebp
c0027333:	89 e9                	mov    ecx,ebp
c0027335:	d3 e0                	shl    eax,cl
c0027337:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002733b:	89 f8                	mov    eax,edi
c002733d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027341:	88 d1                	mov    cl,dl
c0027343:	d3 e8                	shr    eax,cl
c0027345:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027349:	09 c1                	or     ecx,eax
c002734b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002734f:	89 e9                	mov    ecx,ebp
c0027351:	d3 e7                	shl    edi,cl
c0027353:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027357:	89 d8                	mov    eax,ebx
c0027359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002735d:	88 d1                	mov    cl,dl
c002735f:	d3 e8                	shr    eax,cl
c0027361:	89 c7                	mov    edi,eax
c0027363:	89 e9                	mov    ecx,ebp
c0027365:	d3 e3                	shl    ebx,cl
c0027367:	89 f0                	mov    eax,esi
c0027369:	88 d1                	mov    cl,dl
c002736b:	d3 e8                	shr    eax,cl
c002736d:	09 d8                	or     eax,ebx
c002736f:	89 e9                	mov    ecx,ebp
c0027371:	d3 e6                	shl    esi,cl
c0027373:	89 f3                	mov    ebx,esi
c0027375:	89 fa                	mov    edx,edi
c0027377:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002737b:	89 d1                	mov    ecx,edx
c002737d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027381:	89 c6                	mov    esi,eax
c0027383:	89 d7                	mov    edi,edx
c0027385:	39 d1                	cmp    ecx,edx
c0027387:	72 27                	jb     c00273b0 <__umoddi3+0x10c>
c0027389:	74 21                	je     c00273ac <__umoddi3+0x108>
c002738b:	89 ca                	mov    edx,ecx
c002738d:	29 f3                	sub    ebx,esi
c002738f:	19 fa                	sbb    edx,edi
c0027391:	89 d0                	mov    eax,edx
c0027393:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027397:	d3 e0                	shl    eax,cl
c0027399:	89 e9                	mov    ecx,ebp
c002739b:	d3 eb                	shr    ebx,cl
c002739d:	09 d8                	or     eax,ebx
c002739f:	d3 ea                	shr    edx,cl
c00273a1:	83 c4 1c             	add    esp,0x1c
c00273a4:	5b                   	pop    ebx
c00273a5:	5e                   	pop    esi
c00273a6:	5f                   	pop    edi
c00273a7:	5d                   	pop    ebp
c00273a8:	c3                   	ret    
c00273a9:	8d 76 00             	lea    esi,[esi+0x0]
c00273ac:	39 c3                	cmp    ebx,eax
c00273ae:	73 db                	jae    c002738b <__umoddi3+0xe7>
c00273b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273b8:	89 d7                	mov    edi,edx
c00273ba:	89 c6                	mov    esi,eax
c00273bc:	eb cd                	jmp    c002738b <__umoddi3+0xe7>

c00273be <__addsf3>:
c00273be:	55                   	push   ebp
c00273bf:	89 e5                	mov    ebp,esp
c00273c1:	57                   	push   edi
c00273c2:	56                   	push   esi
c00273c3:	53                   	push   ebx
c00273c4:	83 ec 08             	sub    esp,0x8
c00273c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273ca:	89 fa                	mov    edx,edi
c00273cc:	89 f8                	mov    eax,edi
c00273ce:	c1 f8 17             	sar    eax,0x17
c00273d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273d4:	c1 e2 08             	shl    edx,0x8
c00273d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273e0:	89 de                	mov    esi,ebx
c00273e2:	c1 fe 17             	sar    esi,0x17
c00273e5:	c1 e3 08             	shl    ebx,0x8
c00273e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273ee:	31 f0                	xor    eax,esi
c00273f0:	0f 88 3b 01 00 00    	js     c0027531 <__addsf3+0x173>
c00273f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00273f9:	29 f1                	sub    ecx,esi
c00273fb:	85 c9                	test   ecx,ecx
c00273fd:	7e 54                	jle    c0027453 <__addsf3+0x95>
c00273ff:	89 f0                	mov    eax,esi
c0027401:	84 c0                	test   al,al
c0027403:	75 10                	jne    c0027415 <__addsf3+0x57>
c0027405:	85 db                	test   ebx,ebx
c0027407:	0f 84 aa 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002740d:	49                   	dec    ecx
c002740e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027411:	74 38                	je     c002744b <__addsf3+0x8d>
c0027413:	eb 13                	jmp    c0027428 <__addsf3+0x6a>
c0027415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027418:	f7 d0                	not    eax
c002741a:	84 c0                	test   al,al
c002741c:	0f 84 95 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027422:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027428:	83 f9 1f             	cmp    ecx,0x1f
c002742b:	0f 8f 86 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027431:	89 de                	mov    esi,ebx
c0027433:	d3 ee                	shr    esi,cl
c0027435:	b8 20 00 00 00       	mov    eax,0x20
c002743a:	29 c8                	sub    eax,ecx
c002743c:	89 c1                	mov    ecx,eax
c002743e:	d3 e3                	shl    ebx,cl
c0027440:	31 c0                	xor    eax,eax
c0027442:	85 db                	test   ebx,ebx
c0027444:	0f 95 c0             	setne  al
c0027447:	09 f0                	or     eax,esi
c0027449:	01 d0                	add    eax,edx
c002744b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002744e:	e9 b6 00 00 00       	jmp    c0027509 <__addsf3+0x14b>
c0027453:	74 5c                	je     c00274b1 <__addsf3+0xf3>
c0027455:	89 f1                	mov    ecx,esi
c0027457:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002745a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002745d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027461:	75 14                	jne    c0027477 <__addsf3+0xb9>
c0027463:	85 d2                	test   edx,edx
c0027465:	0f 84 4c 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002746b:	49                   	dec    ecx
c002746c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002746f:	0f 84 94 00 00 00    	je     c0027509 <__addsf3+0x14b>
c0027475:	eb 12                	jmp    c0027489 <__addsf3+0xcb>
c0027477:	89 f0                	mov    eax,esi
c0027479:	f7 d0                	not    eax
c002747b:	84 c0                	test   al,al
c002747d:	0f 84 34 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027483:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027489:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002748c:	83 f9 1f             	cmp    ecx,0x1f
c002748f:	0f 8f 22 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027495:	89 d7                	mov    edi,edx
c0027497:	d3 ef                	shr    edi,cl
c0027499:	b8 20 00 00 00       	mov    eax,0x20
c002749e:	29 c8                	sub    eax,ecx
c00274a0:	89 c1                	mov    ecx,eax
c00274a2:	d3 e2                	shl    edx,cl
c00274a4:	31 c0                	xor    eax,eax
c00274a6:	85 d2                	test   edx,edx
c00274a8:	0f 95 c0             	setne  al
c00274ab:	09 f8                	or     eax,edi
c00274ad:	01 d8                	add    eax,ebx
c00274af:	eb 58                	jmp    c0027509 <__addsf3+0x14b>
c00274b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274b4:	8d 70 01             	lea    esi,[eax+0x1]
c00274b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274bd:	75 32                	jne    c00274f1 <__addsf3+0x133>
c00274bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274c3:	75 1f                	jne    c00274e4 <__addsf3+0x126>
c00274c5:	85 d2                	test   edx,edx
c00274c7:	0f 84 e0 01 00 00    	je     c00276ad <__addsf3+0x2ef>
c00274cd:	85 db                	test   ebx,ebx
c00274cf:	0f 84 e2 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00274d5:	89 d0                	mov    eax,edx
c00274d7:	01 d8                	add    eax,ebx
c00274d9:	0f 89 a9 01 00 00    	jns    c0027688 <__addsf3+0x2ca>
c00274df:	e9 9d 01 00 00       	jmp    c0027681 <__addsf3+0x2c3>
c00274e4:	85 d2                	test   edx,edx
c00274e6:	0f 85 cb 01 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c00274ec:	e9 bc 01 00 00       	jmp    c00276ad <__addsf3+0x2ef>
c00274f1:	31 c0                	xor    eax,eax
c00274f3:	89 f1                	mov    ecx,esi
c00274f5:	f7 d1                	not    ecx
c00274f7:	84 c9                	test   cl,cl
c00274f9:	0f 84 90 01 00 00    	je     c002768f <__addsf3+0x2d1>
c00274ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027502:	d1 e8                	shr    eax,1
c0027504:	e9 86 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027509:	85 c0                	test   eax,eax
c002750b:	0f 89 7e 01 00 00    	jns    c002768f <__addsf3+0x2d1>
c0027511:	46                   	inc    esi
c0027512:	89 f2                	mov    edx,esi
c0027514:	f7 d2                	not    edx
c0027516:	84 d2                	test   dl,dl
c0027518:	0f 84 6f 01 00 00    	je     c002768d <__addsf3+0x2cf>
c002751e:	89 c2                	mov    edx,eax
c0027520:	83 e2 01             	and    edx,0x1
c0027523:	d1 e8                	shr    eax,1
c0027525:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002752a:	09 d0                	or     eax,edx
c002752c:	e9 5e 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027531:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027535:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027538:	89 f0                	mov    eax,esi
c002753a:	0f b6 c0             	movzx  eax,al
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	29 c1                	sub    ecx,eax
c0027542:	85 c9                	test   ecx,ecx
c0027544:	7e 55                	jle    c002759b <__addsf3+0x1dd>
c0027546:	85 c0                	test   eax,eax
c0027548:	75 11                	jne    c002755b <__addsf3+0x19d>
c002754a:	85 db                	test   ebx,ebx
c002754c:	0f 84 65 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027552:	49                   	dec    ecx
c0027553:	75 19                	jne    c002756e <__addsf3+0x1b0>
c0027555:	89 d0                	mov    eax,edx
c0027557:	29 d8                	sub    eax,ebx
c0027559:	eb 38                	jmp    c0027593 <__addsf3+0x1d5>
c002755b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002755e:	f7 d0                	not    eax
c0027560:	84 c0                	test   al,al
c0027562:	0f 84 4f 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027568:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002756e:	83 f9 1f             	cmp    ecx,0x1f
c0027571:	0f 8f 40 01 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027577:	89 de                	mov    esi,ebx
c0027579:	d3 ee                	shr    esi,cl
c002757b:	b8 20 00 00 00       	mov    eax,0x20
c0027580:	29 c8                	sub    eax,ecx
c0027582:	89 c1                	mov    ecx,eax
c0027584:	d3 e3                	shl    ebx,cl
c0027586:	31 c0                	xor    eax,eax
c0027588:	85 db                	test   ebx,ebx
c002758a:	0f 95 c0             	setne  al
c002758d:	09 f0                	or     eax,esi
c002758f:	29 c2                	sub    edx,eax
c0027591:	89 d0                	mov    eax,edx
c0027593:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027596:	e9 af 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c002759b:	74 5c                	je     c00275f9 <__addsf3+0x23b>
c002759d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275a7:	75 14                	jne    c00275bd <__addsf3+0x1ff>
c00275a9:	85 d2                	test   edx,edx
c00275ab:	0f 84 06 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275b1:	48                   	dec    eax
c00275b2:	75 1b                	jne    c00275cf <__addsf3+0x211>
c00275b4:	89 d8                	mov    eax,ebx
c00275b6:	29 d0                	sub    eax,edx
c00275b8:	e9 8d 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c00275bd:	89 f1                	mov    ecx,esi
c00275bf:	f7 d1                	not    ecx
c00275c1:	84 c9                	test   cl,cl
c00275c3:	0f 84 ee 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275d2:	83 f8 1f             	cmp    eax,0x1f
c00275d5:	0f 8f dc 00 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c00275db:	89 d7                	mov    edi,edx
c00275dd:	88 c1                	mov    cl,al
c00275df:	d3 ef                	shr    edi,cl
c00275e1:	b9 20 00 00 00       	mov    ecx,0x20
c00275e6:	29 c1                	sub    ecx,eax
c00275e8:	d3 e2                	shl    edx,cl
c00275ea:	31 c0                	xor    eax,eax
c00275ec:	85 d2                	test   edx,edx
c00275ee:	0f 95 c0             	setne  al
c00275f1:	09 f8                	or     eax,edi
c00275f3:	29 c3                	sub    ebx,eax
c00275f5:	89 d8                	mov    eax,ebx
c00275f7:	eb 51                	jmp    c002764a <__addsf3+0x28c>
c00275f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275fc:	40                   	inc    eax
c00275fd:	a8 fe                	test   al,0xfe
c00275ff:	75 3d                	jne    c002763e <__addsf3+0x280>
c0027601:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027605:	0f 85 a7 00 00 00    	jne    c00276b2 <__addsf3+0x2f4>
c002760b:	85 d2                	test   edx,edx
c002760d:	75 12                	jne    c0027621 <__addsf3+0x263>
c002760f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027612:	85 db                	test   ebx,ebx
c0027614:	0f 85 9d 00 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c002761a:	31 ff                	xor    edi,edi
c002761c:	e9 96 00 00 00       	jmp    c00276b7 <__addsf3+0x2f9>
c0027621:	85 db                	test   ebx,ebx
c0027623:	0f 84 8e 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027629:	89 d0                	mov    eax,edx
c002762b:	29 d8                	sub    eax,ebx
c002762d:	79 06                	jns    c0027635 <__addsf3+0x277>
c002762f:	89 d8                	mov    eax,ebx
c0027631:	29 d0                	sub    eax,edx
c0027633:	eb 5a                	jmp    c002768f <__addsf3+0x2d1>
c0027635:	bf 00 00 00 00       	mov    edi,0x0
c002763a:	74 7b                	je     c00276b7 <__addsf3+0x2f9>
c002763c:	eb 4a                	jmp    c0027688 <__addsf3+0x2ca>
c002763e:	89 d0                	mov    eax,edx
c0027640:	29 d8                	sub    eax,ebx
c0027642:	79 12                	jns    c0027656 <__addsf3+0x298>
c0027644:	89 d8                	mov    eax,ebx
c0027646:	29 d0                	sub    eax,edx
c0027648:	eb 09                	jmp    c0027653 <__addsf3+0x295>
c002764a:	85 c0                	test   eax,eax
c002764c:	79 41                	jns    c002768f <__addsf3+0x2d1>
c002764e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027653:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027656:	31 f6                	xor    esi,esi
c0027658:	85 c0                	test   eax,eax
c002765a:	74 33                	je     c002768f <__addsf3+0x2d1>
c002765c:	0f bd c8             	bsr    ecx,eax
c002765f:	83 f1 1f             	xor    ecx,0x1f
c0027662:	d3 e0                	shl    eax,cl
c0027664:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027668:	39 ca                	cmp    edx,ecx
c002766a:	7f 10                	jg     c002767c <__addsf3+0x2be>
c002766c:	29 d1                	sub    ecx,edx
c002766e:	41                   	inc    ecx
c002766f:	d3 e8                	shr    eax,cl
c0027671:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027674:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002767a:	eb 13                	jmp    c002768f <__addsf3+0x2d1>
c002767c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002767f:	29 ce                	sub    esi,ecx
c0027681:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027686:	eb 07                	jmp    c002768f <__addsf3+0x2d1>
c0027688:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002768b:	eb 02                	jmp    c002768f <__addsf3+0x2d1>
c002768d:	31 c0                	xor    eax,eax
c002768f:	89 c2                	mov    edx,eax
c0027691:	c1 ea 08             	shr    edx,0x8
c0027694:	a8 7f                	test   al,0x7f
c0027696:	0f 95 c1             	setne  cl
c0027699:	09 d1                	or     ecx,edx
c002769b:	83 e1 01             	and    ecx,0x1
c002769e:	c1 e8 07             	shr    eax,0x7
c00276a1:	21 c8                	and    eax,ecx
c00276a3:	c1 e6 17             	shl    esi,0x17
c00276a6:	09 d6                	or     esi,edx
c00276a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276ab:	eb 0a                	jmp    c00276b7 <__addsf3+0x2f9>
c00276ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276b0:	eb 05                	jmp    c00276b7 <__addsf3+0x2f9>
c00276b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276b7:	89 f8                	mov    eax,edi
c00276b9:	5a                   	pop    edx
c00276ba:	59                   	pop    ecx
c00276bb:	5b                   	pop    ebx
c00276bc:	5e                   	pop    esi
c00276bd:	5f                   	pop    edi
c00276be:	5d                   	pop    ebp
c00276bf:	c3                   	ret    

c00276c0 <__subsf3>:
c00276c0:	55                   	push   ebp
c00276c1:	89 e5                	mov    ebp,esp
c00276c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276c6:	05 00 00 00 80       	add    eax,0x80000000
c00276cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276ce:	5d                   	pop    ebp
c00276cf:	e9 ea fc ff ff       	jmp    c00273be <__addsf3>

c00276d4 <__negsf2>:
c00276d4:	55                   	push   ebp
c00276d5:	89 e5                	mov    ebp,esp
c00276d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276da:	05 00 00 00 80       	add    eax,0x80000000
c00276df:	5d                   	pop    ebp
c00276e0:	c3                   	ret    

c00276e1 <__mulsf3>:
c00276e1:	55                   	push   ebp
c00276e2:	89 e5                	mov    ebp,esp
c00276e4:	57                   	push   edi
c00276e5:	56                   	push   esi
c00276e6:	53                   	push   ebx
c00276e7:	83 ec 1c             	sub    esp,0x1c
c00276ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00276ed:	89 f0                	mov    eax,esi
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	c1 f9 17             	sar    ecx,0x17
c00276f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00276f7:	c1 e0 08             	shl    eax,0x8
c00276fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276ff:	89 c1                	mov    ecx,eax
c0027701:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027704:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027707:	89 c7                	mov    edi,eax
c0027709:	c1 ff 17             	sar    edi,0x17
c002770c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027710:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027713:	89 f8                	mov    eax,edi
c0027715:	0f b6 c0             	movzx  eax,al
c0027718:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002771b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002771f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027722:	42                   	inc    edx
c0027723:	80 e2 fe             	and    dl,0xfe
c0027726:	75 7b                	jne    c00277a3 <__mulsf3+0xc2>
c0027728:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002772c:	74 54                	je     c0027782 <__mulsf3+0xa1>
c002772e:	85 c9                	test   ecx,ecx
c0027730:	0f 85 64 01 00 00    	jne    c002789a <__mulsf3+0x1b9>
c0027736:	8d 57 01             	lea    edx,[edi+0x1]
c0027739:	80 e2 fe             	and    dl,0xfe
c002773c:	75 1f                	jne    c002775d <__mulsf3+0x7c>
c002773e:	85 c0                	test   eax,eax
c0027740:	b8 00 00 00 00       	mov    eax,0x0
c0027745:	74 29                	je     c0027770 <__mulsf3+0x8f>
c0027747:	53                   	push   ebx
c0027748:	53                   	push   ebx
c0027749:	50                   	push   eax
c002774a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002774d:	e8 96 05 00 00       	call   c0027ce8 <__nesf2>
c0027752:	83 c4 10             	add    esp,0x10
c0027755:	85 c0                	test   eax,eax
c0027757:	0f 85 3a 01 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c002775d:	85 ff                	test   edi,edi
c002775f:	0f 89 35 01 00 00    	jns    c002789a <__mulsf3+0x1b9>
c0027765:	81 c6 00 00 00 80    	add    esi,0x80000000
c002776b:	e9 2a 01 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c0027770:	51                   	push   ecx
c0027771:	51                   	push   ecx
c0027772:	50                   	push   eax
c0027773:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027776:	e8 6d 05 00 00       	call   c0027ce8 <__nesf2>
c002777b:	83 c4 10             	add    esp,0x10
c002777e:	85 c0                	test   eax,eax
c0027780:	eb 15                	jmp    c0027797 <__mulsf3+0xb6>
c0027782:	85 c9                	test   ecx,ecx
c0027784:	74 0b                	je     c0027791 <__mulsf3+0xb0>
c0027786:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027789:	01 c9                	add    ecx,ecx
c002778b:	78 16                	js     c00277a3 <__mulsf3+0xc2>
c002778d:	89 d3                	mov    ebx,edx
c002778f:	eb f5                	jmp    c0027786 <__mulsf3+0xa5>
c0027791:	89 f8                	mov    eax,edi
c0027793:	f7 d0                	not    eax
c0027795:	84 c0                	test   al,al
c0027797:	75 c4                	jne    c002775d <__mulsf3+0x7c>
c0027799:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002779e:	e9 f7 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277a6:	c1 e6 08             	shl    esi,0x8
c00277a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277af:	8d 57 01             	lea    edx,[edi+0x1]
c00277b2:	80 e2 fe             	and    dl,0xfe
c00277b5:	75 63                	jne    c002781a <__mulsf3+0x139>
c00277b7:	85 c0                	test   eax,eax
c00277b9:	74 2f                	je     c00277ea <__mulsf3+0x109>
c00277bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277bf:	0f 89 d2 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c00277c5:	52                   	push   edx
c00277c6:	52                   	push   edx
c00277c7:	6a 00                	push   0x0
c00277c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277cc:	e8 dc 04 00 00       	call   c0027cad <__eqsf2>
c00277d1:	83 c4 10             	add    esp,0x10
c00277d4:	85 c0                	test   eax,eax
c00277d6:	0f 85 bb 00 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c00277dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00277e5:	e9 b0 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00277ed:	50                   	push   eax
c00277ee:	50                   	push   eax
c00277ef:	6a 00                	push   0x0
c00277f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277f4:	e8 b4 04 00 00       	call   c0027cad <__eqsf2>
c00277f9:	83 c4 10             	add    esp,0x10
c00277fc:	85 c0                	test   eax,eax
c00277fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027801:	75 0c                	jne    c002780f <__mulsf3+0x12e>
c0027803:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027807:	0f 89 8a 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c002780d:	eb cd                	jmp    c00277dc <__mulsf3+0xfb>
c002780f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027812:	01 f6                	add    esi,esi
c0027814:	78 04                	js     c002781a <__mulsf3+0x139>
c0027816:	89 c3                	mov    ebx,eax
c0027818:	eb f5                	jmp    c002780f <__mulsf3+0x12e>
c002781a:	89 c8                	mov    eax,ecx
c002781c:	0d 00 00 00 80       	or     eax,0x80000000
c0027821:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027827:	f7 e6                	mul    esi
c0027829:	85 c0                	test   eax,eax
c002782b:	0f 95 c0             	setne  al
c002782e:	0f b6 c0             	movzx  eax,al
c0027831:	09 c2                	or     edx,eax
c0027833:	78 03                	js     c0027838 <__mulsf3+0x157>
c0027835:	01 d2                	add    edx,edx
c0027837:	4b                   	dec    ebx
c0027838:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002783e:	7f 22                	jg     c0027862 <__mulsf3+0x181>
c0027840:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027846:	85 db                	test   ebx,ebx
c0027848:	7f 23                	jg     c002786d <__mulsf3+0x18c>
c002784a:	83 fb e9             	cmp    ebx,0xffffffe9
c002784d:	7c 1a                	jl     c0027869 <__mulsf3+0x188>
c002784f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027855:	b9 01 00 00 00       	mov    ecx,0x1
c002785a:	29 d9                	sub    ecx,ebx
c002785c:	d3 ea                	shr    edx,cl
c002785e:	31 db                	xor    ebx,ebx
c0027860:	eb 0b                	jmp    c002786d <__mulsf3+0x18c>
c0027862:	bb ff 00 00 00       	mov    ebx,0xff
c0027867:	eb 02                	jmp    c002786b <__mulsf3+0x18a>
c0027869:	31 db                	xor    ebx,ebx
c002786b:	31 d2                	xor    edx,edx
c002786d:	89 d0                	mov    eax,edx
c002786f:	c1 e8 08             	shr    eax,0x8
c0027872:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027875:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002787b:	09 fb                	or     ebx,edi
c002787d:	c1 e3 17             	shl    ebx,0x17
c0027880:	09 c3                	or     ebx,eax
c0027882:	f6 c2 7f             	test   dl,0x7f
c0027885:	0f 95 c1             	setne  cl
c0027888:	09 c8                	or     eax,ecx
c002788a:	83 e0 01             	and    eax,0x1
c002788d:	c1 ea 07             	shr    edx,0x7
c0027890:	21 c2                	and    edx,eax
c0027892:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027895:	eb 03                	jmp    c002789a <__mulsf3+0x1b9>
c0027897:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002789a:	89 f0                	mov    eax,esi
c002789c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002789f:	5b                   	pop    ebx
c00278a0:	5e                   	pop    esi
c00278a1:	5f                   	pop    edi
c00278a2:	5d                   	pop    ebp
c00278a3:	c3                   	ret    

c00278a4 <__divsf3>:
c00278a4:	55                   	push   ebp
c00278a5:	89 e5                	mov    ebp,esp
c00278a7:	57                   	push   edi
c00278a8:	56                   	push   esi
c00278a9:	53                   	push   ebx
c00278aa:	83 ec 1c             	sub    esp,0x1c
c00278ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278b0:	89 d8                	mov    eax,ebx
c00278b2:	89 d9                	mov    ecx,ebx
c00278b4:	c1 f9 17             	sar    ecx,0x17
c00278b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278ba:	c1 e0 08             	shl    eax,0x8
c00278bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278c2:	89 c1                	mov    ecx,eax
c00278c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278ca:	89 c7                	mov    edi,eax
c00278cc:	c1 ff 17             	sar    edi,0x17
c00278cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278d6:	89 f8                	mov    eax,edi
c00278d8:	0f b6 c0             	movzx  eax,al
c00278db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278de:	29 c6                	sub    esi,eax
c00278e0:	83 c6 7f             	add    esi,0x7f
c00278e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00278e6:	42                   	inc    edx
c00278e7:	80 e2 fe             	and    dl,0xfe
c00278ea:	0f 85 9c 00 00 00    	jne    c002798c <__divsf3+0xe8>
c00278f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278f4:	74 33                	je     c0027929 <__divsf3+0x85>
c00278f6:	85 c9                	test   ecx,ecx
c00278f8:	0f 85 c7 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c00278fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027901:	80 e2 fe             	and    dl,0xfe
c0027904:	75 2f                	jne    c0027935 <__divsf3+0x91>
c0027906:	85 c0                	test   eax,eax
c0027908:	74 2b                	je     c0027935 <__divsf3+0x91>
c002790a:	51                   	push   ecx
c002790b:	51                   	push   ecx
c002790c:	6a 00                	push   0x0
c002790e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027911:	e8 d2 03 00 00       	call   c0027ce8 <__nesf2>
c0027916:	83 c4 10             	add    esp,0x10
c0027919:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 85 a1 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c0027924:	e9 92 01 00 00       	jmp    c0027abb <__divsf3+0x217>
c0027929:	85 c9                	test   ecx,ecx
c002792b:	75 1b                	jne    c0027948 <__divsf3+0xa4>
c002792d:	8d 57 01             	lea    edx,[edi+0x1]
c0027930:	80 e2 fe             	and    dl,0xfe
c0027933:	74 1e                	je     c0027953 <__divsf3+0xaf>
c0027935:	85 ff                	test   edi,edi
c0027937:	0f 89 88 01 00 00    	jns    c0027ac5 <__divsf3+0x221>
c002793d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027943:	e9 7d 01 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027948:	8d 56 ff             	lea    edx,[esi-0x1]
c002794b:	01 c9                	add    ecx,ecx
c002794d:	78 3d                	js     c002798c <__divsf3+0xe8>
c002794f:	89 d6                	mov    esi,edx
c0027951:	eb f5                	jmp    c0027948 <__divsf3+0xa4>
c0027953:	85 c0                	test   eax,eax
c0027955:	b8 00 00 00 00       	mov    eax,0x0
c002795a:	74 18                	je     c0027974 <__divsf3+0xd0>
c002795c:	52                   	push   edx
c002795d:	52                   	push   edx
c002795e:	50                   	push   eax
c002795f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027962:	e8 81 03 00 00       	call   c0027ce8 <__nesf2>
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	85 c0                	test   eax,eax
c002796c:	0f 85 50 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c0027972:	eb c1                	jmp    c0027935 <__divsf3+0x91>
c0027974:	56                   	push   esi
c0027975:	56                   	push   esi
c0027976:	50                   	push   eax
c0027977:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002797a:	e8 69 03 00 00       	call   c0027ce8 <__nesf2>
c002797f:	83 c4 10             	add    esp,0x10
c0027982:	85 c0                	test   eax,eax
c0027984:	0f 84 31 01 00 00    	je     c0027abb <__divsf3+0x217>
c002798a:	eb a9                	jmp    c0027935 <__divsf3+0x91>
c002798c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002798f:	c1 e3 08             	shl    ebx,0x8
c0027992:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027998:	8d 57 01             	lea    edx,[edi+0x1]
c002799b:	80 e2 fe             	and    dl,0xfe
c002799e:	75 71                	jne    c0027a11 <__divsf3+0x16d>
c00279a0:	85 c0                	test   eax,eax
c00279a2:	ba 00 00 00 00       	mov    edx,0x0
c00279a7:	74 2f                	je     c00279d8 <__divsf3+0x134>
c00279a9:	51                   	push   ecx
c00279aa:	51                   	push   ecx
c00279ab:	52                   	push   edx
c00279ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279af:	e8 f9 02 00 00       	call   c0027cad <__eqsf2>
c00279b4:	83 c4 10             	add    esp,0x10
c00279b7:	85 c0                	test   eax,eax
c00279b9:	0f 85 03 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c00279bf:	31 d2                	xor    edx,edx
c00279c1:	89 d3                	mov    ebx,edx
c00279c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c6:	31 f8                	xor    eax,edi
c00279c8:	0f 89 f7 00 00 00    	jns    c0027ac5 <__divsf3+0x221>
c00279ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00279d3:	e9 ed 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c00279d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279db:	50                   	push   eax
c00279dc:	50                   	push   eax
c00279dd:	52                   	push   edx
c00279de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279e1:	e8 c7 02 00 00       	call   c0027cad <__eqsf2>
c00279e6:	83 c4 10             	add    esp,0x10
c00279e9:	85 c0                	test   eax,eax
c00279eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ee:	75 16                	jne    c0027a06 <__divsf3+0x162>
c00279f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279f3:	31 fb                	xor    ebx,edi
c00279f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00279fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a01:	e9 bf 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027a06:	8d 46 01             	lea    eax,[esi+0x1]
c0027a09:	01 db                	add    ebx,ebx
c0027a0b:	78 04                	js     c0027a11 <__divsf3+0x16d>
c0027a0d:	89 c6                	mov    esi,eax
c0027a0f:	eb f5                	jmp    c0027a06 <__divsf3+0x162>
c0027a11:	89 c8                	mov    eax,ecx
c0027a13:	0d 00 00 00 80       	or     eax,0x80000000
c0027a18:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a1e:	31 d2                	xor    edx,edx
c0027a20:	39 d8                	cmp    eax,ebx
c0027a22:	72 07                	jb     c0027a2b <__divsf3+0x187>
c0027a24:	29 d8                	sub    eax,ebx
c0027a26:	ba 01 00 00 00       	mov    edx,0x1
c0027a2b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a32:	01 d2                	add    edx,edx
c0027a34:	89 c1                	mov    ecx,eax
c0027a36:	01 c0                	add    eax,eax
c0027a38:	85 c9                	test   ecx,ecx
c0027a3a:	78 04                	js     c0027a40 <__divsf3+0x19c>
c0027a3c:	39 c3                	cmp    ebx,eax
c0027a3e:	77 05                	ja     c0027a45 <__divsf3+0x1a1>
c0027a40:	29 d8                	sub    eax,ebx
c0027a42:	83 ca 01             	or     edx,0x1
c0027a45:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a48:	75 e8                	jne    c0027a32 <__divsf3+0x18e>
c0027a4a:	85 c0                	test   eax,eax
c0027a4c:	0f 95 c0             	setne  al
c0027a4f:	0f b6 c0             	movzx  eax,al
c0027a52:	c1 e2 06             	shl    edx,0x6
c0027a55:	09 c2                	or     edx,eax
c0027a57:	78 03                	js     c0027a5c <__divsf3+0x1b8>
c0027a59:	01 d2                	add    edx,edx
c0027a5b:	4e                   	dec    esi
c0027a5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a62:	7f 22                	jg     c0027a86 <__divsf3+0x1e2>
c0027a64:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a6a:	85 f6                	test   esi,esi
c0027a6c:	7f 23                	jg     c0027a91 <__divsf3+0x1ed>
c0027a6e:	83 fe e9             	cmp    esi,0xffffffe9
c0027a71:	7c 1a                	jl     c0027a8d <__divsf3+0x1e9>
c0027a73:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a79:	b9 01 00 00 00       	mov    ecx,0x1
c0027a7e:	29 f1                	sub    ecx,esi
c0027a80:	d3 ea                	shr    edx,cl
c0027a82:	31 f6                	xor    esi,esi
c0027a84:	eb 0b                	jmp    c0027a91 <__divsf3+0x1ed>
c0027a86:	be ff 00 00 00       	mov    esi,0xff
c0027a8b:	eb 02                	jmp    c0027a8f <__divsf3+0x1eb>
c0027a8d:	31 f6                	xor    esi,esi
c0027a8f:	31 d2                	xor    edx,edx
c0027a91:	89 d0                	mov    eax,edx
c0027a93:	c1 e8 08             	shr    eax,0x8
c0027a96:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a99:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a9f:	09 fe                	or     esi,edi
c0027aa1:	c1 e6 17             	shl    esi,0x17
c0027aa4:	09 c6                	or     esi,eax
c0027aa6:	f6 c2 7f             	test   dl,0x7f
c0027aa9:	0f 95 c1             	setne  cl
c0027aac:	09 c8                	or     eax,ecx
c0027aae:	83 e0 01             	and    eax,0x1
c0027ab1:	c1 ea 07             	shr    edx,0x7
c0027ab4:	21 c2                	and    edx,eax
c0027ab6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ab9:	eb 0a                	jmp    c0027ac5 <__divsf3+0x221>
c0027abb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027ac0:	eb 03                	jmp    c0027ac5 <__divsf3+0x221>
c0027ac2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027ac5:	89 d8                	mov    eax,ebx
c0027ac7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027aca:	5b                   	pop    ebx
c0027acb:	5e                   	pop    esi
c0027acc:	5f                   	pop    edi
c0027acd:	5d                   	pop    ebp
c0027ace:	c3                   	ret    

c0027acf <__floatsisf>:
c0027acf:	55                   	push   ebp
c0027ad0:	89 e5                	mov    ebp,esp
c0027ad2:	53                   	push   ebx
c0027ad3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ad6:	85 d2                	test   edx,edx
c0027ad8:	7e 2b                	jle    c0027b05 <__floatsisf+0x36>
c0027ada:	0f bd ca             	bsr    ecx,edx
c0027add:	83 f1 1f             	xor    ecx,0x1f
c0027ae0:	d3 e2                	shl    edx,cl
c0027ae2:	89 d0                	mov    eax,edx
c0027ae4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae9:	89 c3                	mov    ebx,eax
c0027aeb:	c1 eb 08             	shr    ebx,0x8
c0027aee:	80 e2 7f             	and    dl,0x7f
c0027af1:	0f 95 c2             	setne  dl
c0027af4:	09 da                	or     edx,ebx
c0027af6:	83 e2 01             	and    edx,0x1
c0027af9:	c1 e8 07             	shr    eax,0x7
c0027afc:	21 c2                	and    edx,eax
c0027afe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b03:	eb 32                	jmp    c0027b37 <__floatsisf+0x68>
c0027b05:	b8 00 00 00 00       	mov    eax,0x0
c0027b0a:	74 34                	je     c0027b40 <__floatsisf+0x71>
c0027b0c:	f7 da                	neg    edx
c0027b0e:	0f bd ca             	bsr    ecx,edx
c0027b11:	83 f1 1f             	xor    ecx,0x1f
c0027b14:	d3 e2                	shl    edx,cl
c0027b16:	89 d0                	mov    eax,edx
c0027b18:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	c1 eb 08             	shr    ebx,0x8
c0027b22:	80 e2 7f             	and    dl,0x7f
c0027b25:	0f 95 c2             	setne  dl
c0027b28:	09 da                	or     edx,ebx
c0027b2a:	83 e2 01             	and    edx,0x1
c0027b2d:	c1 e8 07             	shr    eax,0x7
c0027b30:	21 c2                	and    edx,eax
c0027b32:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b37:	29 c8                	sub    eax,ecx
c0027b39:	c1 e0 17             	shl    eax,0x17
c0027b3c:	09 d8                	or     eax,ebx
c0027b3e:	01 d0                	add    eax,edx
c0027b40:	5b                   	pop    ebx
c0027b41:	5d                   	pop    ebp
c0027b42:	c3                   	ret    

c0027b43 <__floatunsisf>:
c0027b43:	55                   	push   ebp
c0027b44:	89 e5                	mov    ebp,esp
c0027b46:	53                   	push   ebx
c0027b47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b4a:	31 c0                	xor    eax,eax
c0027b4c:	85 d2                	test   edx,edx
c0027b4e:	74 32                	je     c0027b82 <__floatunsisf+0x3f>
c0027b50:	0f bd ca             	bsr    ecx,edx
c0027b53:	83 f1 1f             	xor    ecx,0x1f
c0027b56:	d3 e2                	shl    edx,cl
c0027b58:	89 d0                	mov    eax,edx
c0027b5a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b5f:	89 c3                	mov    ebx,eax
c0027b61:	c1 eb 08             	shr    ebx,0x8
c0027b64:	80 e2 7f             	and    dl,0x7f
c0027b67:	0f 95 c2             	setne  dl
c0027b6a:	09 da                	or     edx,ebx
c0027b6c:	83 e2 01             	and    edx,0x1
c0027b6f:	c1 e8 07             	shr    eax,0x7
c0027b72:	21 c2                	and    edx,eax
c0027b74:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b79:	29 c8                	sub    eax,ecx
c0027b7b:	c1 e0 17             	shl    eax,0x17
c0027b7e:	09 d8                	or     eax,ebx
c0027b80:	01 d0                	add    eax,edx
c0027b82:	5b                   	pop    ebx
c0027b83:	5d                   	pop    ebp
c0027b84:	c3                   	ret    

c0027b85 <__fixsfsi>:
c0027b85:	55                   	push   ebp
c0027b86:	89 e5                	mov    ebp,esp
c0027b88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b8b:	89 d1                	mov    ecx,edx
c0027b8d:	c1 e1 08             	shl    ecx,0x8
c0027b90:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027b96:	c1 fa 17             	sar    edx,0x17
c0027b99:	78 1c                	js     c0027bb7 <__fixsfsi+0x32>
c0027b9b:	83 ea 7f             	sub    edx,0x7f
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fa 1e             	cmp    edx,0x1e
c0027ba3:	77 40                	ja     c0027be5 <__fixsfsi+0x60>
c0027ba5:	89 c8                	mov    eax,ecx
c0027ba7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bac:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bb1:	29 d1                	sub    ecx,edx
c0027bb3:	d3 e8                	shr    eax,cl
c0027bb5:	eb 2e                	jmp    c0027be5 <__fixsfsi+0x60>
c0027bb7:	31 c0                	xor    eax,eax
c0027bb9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bbf:	78 24                	js     c0027be5 <__fixsfsi+0x60>
c0027bc1:	83 fa 1e             	cmp    edx,0x1e
c0027bc4:	7e 09                	jle    c0027bcf <__fixsfsi+0x4a>
c0027bc6:	83 fa 1f             	cmp    edx,0x1f
c0027bc9:	75 18                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcb:	85 c9                	test   ecx,ecx
c0027bcd:	75 14                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcf:	89 c8                	mov    eax,ecx
c0027bd1:	0d 00 00 00 80       	or     eax,0x80000000
c0027bd6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bdb:	29 d1                	sub    ecx,edx
c0027bdd:	d3 e8                	shr    eax,cl
c0027bdf:	f7 d8                	neg    eax
c0027be1:	eb 02                	jmp    c0027be5 <__fixsfsi+0x60>
c0027be3:	31 c0                	xor    eax,eax
c0027be5:	5d                   	pop    ebp
c0027be6:	c3                   	ret    

c0027be7 <__fixunssfsi>:
c0027be7:	55                   	push   ebp
c0027be8:	89 e5                	mov    ebp,esp
c0027bea:	53                   	push   ebx
c0027beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bee:	89 d3                	mov    ebx,edx
c0027bf0:	c1 fb 17             	sar    ebx,0x17
c0027bf3:	83 eb 7f             	sub    ebx,0x7f
c0027bf6:	31 c0                	xor    eax,eax
c0027bf8:	83 fb 1f             	cmp    ebx,0x1f
c0027bfb:	77 18                	ja     c0027c15 <__fixunssfsi+0x2e>
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	c1 e0 08             	shl    eax,0x8
c0027c02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c07:	0d 00 00 00 80       	or     eax,0x80000000
c0027c0c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c11:	29 d9                	sub    ecx,ebx
c0027c13:	d3 e8                	shr    eax,cl
c0027c15:	5b                   	pop    ebx
c0027c16:	5d                   	pop    ebp
c0027c17:	c3                   	ret    

c0027c18 <__cmpsf2>:
c0027c18:	55                   	push   ebp
c0027c19:	89 e5                	mov    ebp,esp
c0027c1b:	57                   	push   edi
c0027c1c:	56                   	push   esi
c0027c1d:	53                   	push   ebx
c0027c1e:	83 ec 24             	sub    esp,0x24
c0027c21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c27:	e8 4f 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c2c:	5a                   	pop    edx
c0027c2d:	59                   	pop    ecx
c0027c2e:	89 c3                	mov    ebx,eax
c0027c30:	c1 e8 17             	shr    eax,0x17
c0027c33:	0f b6 f0             	movzx  esi,al
c0027c36:	89 d8                	mov    eax,ebx
c0027c38:	c1 e8 1f             	shr    eax,0x1f
c0027c3b:	31 c6                	xor    esi,eax
c0027c3d:	c1 e3 08             	shl    ebx,0x8
c0027c40:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c43:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c46:	e8 30 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c4b:	83 c4 10             	add    esp,0x10
c0027c4e:	89 c1                	mov    ecx,eax
c0027c50:	c1 e9 17             	shr    ecx,0x17
c0027c53:	0f b6 c9             	movzx  ecx,cl
c0027c56:	89 c7                	mov    edi,eax
c0027c58:	c1 ef 1f             	shr    edi,0x1f
c0027c5b:	89 ca                	mov    edx,ecx
c0027c5d:	31 fa                	xor    edx,edi
c0027c5f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c62:	c1 e0 08             	shl    eax,0x8
c0027c65:	89 c2                	mov    edx,eax
c0027c67:	89 d8                	mov    eax,ebx
c0027c69:	09 d0                	or     eax,edx
c0027c6b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c70:	09 f0                	or     eax,esi
c0027c72:	75 08                	jne    c0027c7c <__cmpsf2+0x64>
c0027c74:	31 c0                	xor    eax,eax
c0027c76:	39 f9                	cmp    ecx,edi
c0027c78:	75 0c                	jne    c0027c86 <__cmpsf2+0x6e>
c0027c7a:	eb 29                	jmp    c0027ca5 <__cmpsf2+0x8d>
c0027c7c:	b8 01 00 00 00       	mov    eax,0x1
c0027c81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c84:	7f 1f                	jg     c0027ca5 <__cmpsf2+0x8d>
c0027c86:	83 c8 ff             	or     eax,0xffffffff
c0027c89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c8c:	7c 17                	jl     c0027ca5 <__cmpsf2+0x8d>
c0027c8e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c94:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027c9a:	b8 01 00 00 00       	mov    eax,0x1
c0027c9f:	39 d3                	cmp    ebx,edx
c0027ca1:	77 02                	ja     c0027ca5 <__cmpsf2+0x8d>
c0027ca3:	19 c0                	sbb    eax,eax
c0027ca5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027ca8:	5b                   	pop    ebx
c0027ca9:	5e                   	pop    esi
c0027caa:	5f                   	pop    edi
c0027cab:	5d                   	pop    ebp
c0027cac:	c3                   	ret    

c0027cad <__eqsf2>:
c0027cad:	55                   	push   ebp
c0027cae:	89 e5                	mov    ebp,esp
c0027cb0:	83 ec 24             	sub    esp,0x24
c0027cb3:	6a 01                	push   0x1
c0027cb5:	83 ec 0c             	sub    esp,0xc
c0027cb8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cbb:	e8 df 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cc0:	83 c4 10             	add    esp,0x10
c0027cc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cc6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cc9:	52                   	push   edx
c0027cca:	50                   	push   eax
c0027ccb:	50                   	push   eax
c0027ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ccf:	e8 cb 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cd4:	59                   	pop    ecx
c0027cd5:	59                   	pop    ecx
c0027cd6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cd9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cdc:	52                   	push   edx
c0027cdd:	50                   	push   eax
c0027cde:	e8 35 ff ff ff       	call   c0027c18 <__cmpsf2>
c0027ce3:	83 c4 20             	add    esp,0x20
c0027ce6:	c9                   	leave  
c0027ce7:	c3                   	ret    

c0027ce8 <__nesf2>:
c0027ce8:	eb c3                	jmp    c0027cad <__eqsf2>

c0027cea <__gtsf2>:
c0027cea:	55                   	push   ebp
c0027ceb:	89 e5                	mov    ebp,esp
c0027ced:	83 ec 24             	sub    esp,0x24
c0027cf0:	6a ff                	push   0xffffffff
c0027cf2:	83 ec 0c             	sub    esp,0xc
c0027cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cf8:	e8 a2 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cfd:	83 c4 10             	add    esp,0x10
c0027d00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d06:	52                   	push   edx
c0027d07:	50                   	push   eax
c0027d08:	50                   	push   eax
c0027d09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d0c:	e8 8e 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027d11:	59                   	pop    ecx
c0027d12:	59                   	pop    ecx
c0027d13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d19:	52                   	push   edx
c0027d1a:	50                   	push   eax
c0027d1b:	e8 f8 fe ff ff       	call   c0027c18 <__cmpsf2>
c0027d20:	83 c4 20             	add    esp,0x20
c0027d23:	c9                   	leave  
c0027d24:	c3                   	ret    

c0027d25 <__gesf2>:
c0027d25:	eb c3                	jmp    c0027cea <__gtsf2>

c0027d27 <__ltsf2>:
c0027d27:	eb 84                	jmp    c0027cad <__eqsf2>

c0027d29 <__lesf2>:
c0027d29:	eb 82                	jmp    c0027cad <__eqsf2>

c0027d2b <__adddf3>:
c0027d2b:	55                   	push   ebp
c0027d2c:	89 e5                	mov    ebp,esp
c0027d2e:	57                   	push   edi
c0027d2f:	56                   	push   esi
c0027d30:	53                   	push   ebx
c0027d31:	83 ec 24             	sub    esp,0x24
c0027d34:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d37:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d43:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d46:	89 c8                	mov    eax,ecx
c0027d48:	89 ce                	mov    esi,ecx
c0027d4a:	c1 fe 14             	sar    esi,0x14
c0027d4d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d50:	89 fb                	mov    ebx,edi
c0027d52:	89 fa                	mov    edx,edi
c0027d54:	c1 e2 0b             	shl    edx,0xb
c0027d57:	c1 e0 0b             	shl    eax,0xb
c0027d5a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d5f:	c1 eb 15             	shr    ebx,0x15
c0027d62:	09 d8                	or     eax,ebx
c0027d64:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d6a:	c1 fe 14             	sar    esi,0x14
c0027d6d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d70:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d73:	89 f3                	mov    ebx,esi
c0027d75:	c1 e3 0b             	shl    ebx,0xb
c0027d78:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d7b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d7e:	c1 e3 0b             	shl    ebx,0xb
c0027d81:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027d87:	c1 ee 15             	shr    esi,0x15
c0027d8a:	09 f3                	or     ebx,esi
c0027d8c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027d8f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d92:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027d95:	0f 88 5f 02 00 00    	js     c0027ffa <__adddf3+0x2cf>
c0027d9b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d9e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027da1:	85 db                	test   ebx,ebx
c0027da3:	0f 8e c7 00 00 00    	jle    c0027e70 <__adddf3+0x145>
c0027da9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027db0:	75 1a                	jne    c0027dcc <__adddf3+0xa1>
c0027db2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027db8:	0f 84 b2 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027dbe:	4b                   	dec    ebx
c0027dbf:	75 23                	jne    c0027de4 <__adddf3+0xb9>
c0027dc1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027dc4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027dc7:	e9 99 00 00 00       	jmp    c0027e65 <__adddf3+0x13a>
c0027dcc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dcf:	f7 d6                	not    esi
c0027dd1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027dd7:	0f 84 93 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027ddd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027de4:	83 fb 1f             	cmp    ebx,0x1f
c0027de7:	7e 42                	jle    c0027e2b <__adddf3+0x100>
c0027de9:	83 fb 3f             	cmp    ebx,0x3f
c0027dec:	0f 8f 7e 05 00 00    	jg     c0028370 <__adddf3+0x645>
c0027df2:	83 e3 1f             	and    ebx,0x1f
c0027df5:	89 d9                	mov    ecx,ebx
c0027df7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027dfa:	d3 ef                	shr    edi,cl
c0027dfc:	31 db                	xor    ebx,ebx
c0027dfe:	85 c9                	test   ecx,ecx
c0027e00:	74 15                	je     c0027e17 <__adddf3+0xec>
c0027e02:	be 20 00 00 00       	mov    esi,0x20
c0027e07:	29 ce                	sub    esi,ecx
c0027e09:	89 f1                	mov    ecx,esi
c0027e0b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e0e:	d3 e6                	shl    esi,cl
c0027e10:	31 db                	xor    ebx,ebx
c0027e12:	85 f6                	test   esi,esi
c0027e14:	0f 95 c3             	setne  bl
c0027e17:	31 c9                	xor    ecx,ecx
c0027e19:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e1d:	0f 95 c1             	setne  cl
c0027e20:	09 cf                	or     edi,ecx
c0027e22:	09 fb                	or     ebx,edi
c0027e24:	01 da                	add    edx,ebx
c0027e26:	83 d0 00             	adc    eax,0x0
c0027e29:	eb 3a                	jmp    c0027e65 <__adddf3+0x13a>
c0027e2b:	bf 20 00 00 00       	mov    edi,0x20
c0027e30:	29 df                	sub    edi,ebx
c0027e32:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e35:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e38:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e3b:	d3 e6                	shl    esi,cl
c0027e3d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e40:	88 d9                	mov    cl,bl
c0027e42:	d3 ef                	shr    edi,cl
c0027e44:	09 fe                	or     esi,edi
c0027e46:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e49:	88 d9                	mov    cl,bl
c0027e4b:	d3 ef                	shr    edi,cl
c0027e4d:	89 fb                	mov    ebx,edi
c0027e4f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e52:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e55:	d3 e7                	shl    edi,cl
c0027e57:	85 ff                	test   edi,edi
c0027e59:	0f 95 c1             	setne  cl
c0027e5c:	0f b6 c9             	movzx  ecx,cl
c0027e5f:	09 ce                	or     esi,ecx
c0027e61:	01 f2                	add    edx,esi
c0027e63:	11 d8                	adc    eax,ebx
c0027e65:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e6b:	e9 52 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027e70:	0f 84 d5 00 00 00    	je     c0027f4b <__adddf3+0x220>
c0027e76:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e79:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e7c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e7f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e82:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027e89:	75 20                	jne    c0027eab <__adddf3+0x180>
c0027e8b:	89 d6                	mov    esi,edx
c0027e8d:	09 c6                	or     esi,eax
c0027e8f:	0f 84 db 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027e95:	4b                   	dec    ebx
c0027e96:	75 29                	jne    c0027ec1 <__adddf3+0x196>
c0027e98:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e9b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e9e:	01 d1                	add    ecx,edx
c0027ea0:	11 c6                	adc    esi,eax
c0027ea2:	89 f0                	mov    eax,esi
c0027ea4:	89 ca                	mov    edx,ecx
c0027ea6:	e9 17 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027eab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eae:	f7 d6                	not    esi
c0027eb0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027eb6:	0f 84 b4 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027ebc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ec1:	83 fb 1f             	cmp    ebx,0x1f
c0027ec4:	7e 48                	jle    c0027f0e <__adddf3+0x1e3>
c0027ec6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ec9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ecc:	83 fb 3f             	cmp    ebx,0x3f
c0027ecf:	0f 8f 9b 04 00 00    	jg     c0028370 <__adddf3+0x645>
c0027ed5:	83 e3 1f             	and    ebx,0x1f
c0027ed8:	89 d9                	mov    ecx,ebx
c0027eda:	89 c7                	mov    edi,eax
c0027edc:	d3 ef                	shr    edi,cl
c0027ede:	31 db                	xor    ebx,ebx
c0027ee0:	85 c9                	test   ecx,ecx
c0027ee2:	74 12                	je     c0027ef6 <__adddf3+0x1cb>
c0027ee4:	be 20 00 00 00       	mov    esi,0x20
c0027ee9:	29 ce                	sub    esi,ecx
c0027eeb:	89 f1                	mov    ecx,esi
c0027eed:	d3 e0                	shl    eax,cl
c0027eef:	31 db                	xor    ebx,ebx
c0027ef1:	85 c0                	test   eax,eax
c0027ef3:	0f 95 c3             	setne  bl
c0027ef6:	31 c0                	xor    eax,eax
c0027ef8:	85 d2                	test   edx,edx
c0027efa:	0f 95 c0             	setne  al
c0027efd:	09 c7                	or     edi,eax
c0027eff:	09 fb                	or     ebx,edi
c0027f01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f07:	01 da                	add    edx,ebx
c0027f09:	83 d6 00             	adc    esi,0x0
c0027f0c:	eb 39                	jmp    c0027f47 <__adddf3+0x21c>
c0027f0e:	be 20 00 00 00       	mov    esi,0x20
c0027f13:	29 de                	sub    esi,ebx
c0027f15:	89 c7                	mov    edi,eax
c0027f17:	89 f1                	mov    ecx,esi
c0027f19:	d3 e7                	shl    edi,cl
c0027f1b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f1e:	89 d7                	mov    edi,edx
c0027f20:	88 d9                	mov    cl,bl
c0027f22:	d3 ef                	shr    edi,cl
c0027f24:	89 f9                	mov    ecx,edi
c0027f26:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f29:	09 cf                	or     edi,ecx
c0027f2b:	88 d9                	mov    cl,bl
c0027f2d:	d3 e8                	shr    eax,cl
c0027f2f:	89 f1                	mov    ecx,esi
c0027f31:	d3 e2                	shl    edx,cl
c0027f33:	85 d2                	test   edx,edx
c0027f35:	0f 95 c2             	setne  dl
c0027f38:	0f b6 d2             	movzx  edx,dl
c0027f3b:	09 d7                	or     edi,edx
c0027f3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f40:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f43:	01 fa                	add    edx,edi
c0027f45:	11 c6                	adc    esi,eax
c0027f47:	89 f0                	mov    eax,esi
c0027f49:	eb 77                	jmp    c0027fc2 <__adddf3+0x297>
c0027f4b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f4e:	46                   	inc    esi
c0027f4f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f52:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f58:	75 41                	jne    c0027f9b <__adddf3+0x270>
c0027f5a:	89 d3                	mov    ebx,edx
c0027f5c:	09 c3                	or     ebx,eax
c0027f5e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f65:	75 27                	jne    c0027f8e <__adddf3+0x263>
c0027f67:	85 db                	test   ebx,ebx
c0027f69:	0f 84 fb 03 00 00    	je     c002836a <__adddf3+0x63f>
c0027f6f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f72:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f75:	0f 84 f5 03 00 00    	je     c0028370 <__adddf3+0x645>
c0027f7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f81:	85 c0                	test   eax,eax
c0027f83:	0f 89 91 03 00 00    	jns    c002831a <__adddf3+0x5ef>
c0027f89:	e9 85 03 00 00       	jmp    c0028313 <__adddf3+0x5e8>
c0027f8e:	85 db                	test   ebx,ebx
c0027f90:	0f 85 da 03 00 00    	jne    c0028370 <__adddf3+0x645>
c0027f96:	e9 cf 03 00 00       	jmp    c002836a <__adddf3+0x63f>
c0027f9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fa1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa4:	f7 d1                	not    ecx
c0027fa6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fac:	0f 84 70 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fb2:	d1 ea                	shr    edx,1
c0027fb4:	89 c1                	mov    ecx,eax
c0027fb6:	c1 e1 1f             	shl    ecx,0x1f
c0027fb9:	09 ca                	or     edx,ecx
c0027fbb:	d1 e8                	shr    eax,1
c0027fbd:	e9 6f 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027fc2:	85 c0                	test   eax,eax
c0027fc4:	0f 89 67 03 00 00    	jns    c0028331 <__adddf3+0x606>
c0027fca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027fcd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fd0:	f7 d1                	not    ecx
c0027fd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fd8:	0f 84 44 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fde:	89 d1                	mov    ecx,edx
c0027fe0:	d1 e9                	shr    ecx,1
c0027fe2:	83 e2 01             	and    edx,0x1
c0027fe5:	09 ca                	or     edx,ecx
c0027fe7:	89 c1                	mov    ecx,eax
c0027fe9:	c1 e1 1f             	shl    ecx,0x1f
c0027fec:	09 ca                	or     edx,ecx
c0027fee:	d1 e8                	shr    eax,1
c0027ff0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027ff5:	e9 37 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027ffa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ffd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028003:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028006:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028009:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002800f:	29 de                	sub    esi,ebx
c0028011:	85 f6                	test   esi,esi
c0028013:	0f 8e bd 00 00 00    	jle    c00280d6 <__adddf3+0x3ab>
c0028019:	85 db                	test   ebx,ebx
c002801b:	75 17                	jne    c0028034 <__adddf3+0x309>
c002801d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028020:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028023:	0f 84 47 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028029:	4e                   	dec    esi
c002802a:	75 20                	jne    c002804c <__adddf3+0x321>
c002802c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002802f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028032:	eb 5b                	jmp    c002808f <__adddf3+0x364>
c0028034:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028037:	f7 d3                	not    ebx
c0028039:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803f:	0f 84 2b 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028045:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002804c:	83 fe 1f             	cmp    esi,0x1f
c002804f:	7e 49                	jle    c002809a <__adddf3+0x36f>
c0028051:	83 fe 3f             	cmp    esi,0x3f
c0028054:	0f 8f 16 03 00 00    	jg     c0028370 <__adddf3+0x645>
c002805a:	83 e6 1f             	and    esi,0x1f
c002805d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028060:	89 f1                	mov    ecx,esi
c0028062:	d3 ef                	shr    edi,cl
c0028064:	31 db                	xor    ebx,ebx
c0028066:	85 f6                	test   esi,esi
c0028068:	74 13                	je     c002807d <__adddf3+0x352>
c002806a:	b9 20 00 00 00       	mov    ecx,0x20
c002806f:	29 f1                	sub    ecx,esi
c0028071:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028074:	d3 e6                	shl    esi,cl
c0028076:	31 db                	xor    ebx,ebx
c0028078:	85 f6                	test   esi,esi
c002807a:	0f 95 c3             	setne  bl
c002807d:	31 c9                	xor    ecx,ecx
c002807f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028083:	0f 95 c1             	setne  cl
c0028086:	09 cf                	or     edi,ecx
c0028088:	09 fb                	or     ebx,edi
c002808a:	29 da                	sub    edx,ebx
c002808c:	83 d8 00             	sbb    eax,0x0
c002808f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028092:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028095:	e9 aa 01 00 00       	jmp    c0028244 <__adddf3+0x519>
c002809a:	bf 20 00 00 00       	mov    edi,0x20
c002809f:	29 f7                	sub    edi,esi
c00280a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280aa:	d3 e3                	shl    ebx,cl
c00280ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280af:	89 f1                	mov    ecx,esi
c00280b1:	d3 ef                	shr    edi,cl
c00280b3:	09 fb                	or     ebx,edi
c00280b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280b8:	89 f1                	mov    ecx,esi
c00280ba:	d3 ef                	shr    edi,cl
c00280bc:	89 fe                	mov    esi,edi
c00280be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280c4:	d3 e7                	shl    edi,cl
c00280c6:	85 ff                	test   edi,edi
c00280c8:	0f 95 c1             	setne  cl
c00280cb:	0f b6 c9             	movzx  ecx,cl
c00280ce:	09 cb                	or     ebx,ecx
c00280d0:	29 da                	sub    edx,ebx
c00280d2:	19 f0                	sbb    eax,esi
c00280d4:	eb b9                	jmp    c002808f <__adddf3+0x364>
c00280d6:	0f 84 cd 00 00 00    	je     c00281a9 <__adddf3+0x47e>
c00280dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00280df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280e9:	75 1b                	jne    c0028106 <__adddf3+0x3db>
c00280eb:	89 d6                	mov    esi,edx
c00280ed:	09 c6                	or     esi,eax
c00280ef:	0f 84 7b 02 00 00    	je     c0028370 <__adddf3+0x645>
c00280f5:	4b                   	dec    ebx
c00280f6:	75 24                	jne    c002811c <__adddf3+0x3f1>
c00280f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00280fe:	29 d1                	sub    ecx,edx
c0028100:	19 c6                	sbb    esi,eax
c0028102:	89 ca                	mov    edx,ecx
c0028104:	eb 61                	jmp    c0028167 <__adddf3+0x43c>
c0028106:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028109:	f7 d6                	not    esi
c002810b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028111:	0f 84 59 02 00 00    	je     c0028370 <__adddf3+0x645>
c0028117:	0d 00 00 00 80       	or     eax,0x80000000
c002811c:	83 fb 1f             	cmp    ebx,0x1f
c002811f:	7e 4d                	jle    c002816e <__adddf3+0x443>
c0028121:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028124:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028127:	83 fb 3f             	cmp    ebx,0x3f
c002812a:	0f 8f 40 02 00 00    	jg     c0028370 <__adddf3+0x645>
c0028130:	83 e3 1f             	and    ebx,0x1f
c0028133:	89 d9                	mov    ecx,ebx
c0028135:	89 c7                	mov    edi,eax
c0028137:	d3 ef                	shr    edi,cl
c0028139:	31 db                	xor    ebx,ebx
c002813b:	85 c9                	test   ecx,ecx
c002813d:	74 12                	je     c0028151 <__adddf3+0x426>
c002813f:	be 20 00 00 00       	mov    esi,0x20
c0028144:	29 ce                	sub    esi,ecx
c0028146:	89 f1                	mov    ecx,esi
c0028148:	d3 e0                	shl    eax,cl
c002814a:	31 db                	xor    ebx,ebx
c002814c:	85 c0                	test   eax,eax
c002814e:	0f 95 c3             	setne  bl
c0028151:	31 c0                	xor    eax,eax
c0028153:	85 d2                	test   edx,edx
c0028155:	0f 95 c0             	setne  al
c0028158:	09 c7                	or     edi,eax
c002815a:	09 fb                	or     ebx,edi
c002815c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002815f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028162:	29 da                	sub    edx,ebx
c0028164:	83 de 00             	sbb    esi,0x0
c0028167:	89 f0                	mov    eax,esi
c0028169:	e9 d6 00 00 00       	jmp    c0028244 <__adddf3+0x519>
c002816e:	be 20 00 00 00       	mov    esi,0x20
c0028173:	29 de                	sub    esi,ebx
c0028175:	89 c7                	mov    edi,eax
c0028177:	89 f1                	mov    ecx,esi
c0028179:	d3 e7                	shl    edi,cl
c002817b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002817e:	89 d7                	mov    edi,edx
c0028180:	88 d9                	mov    cl,bl
c0028182:	d3 ef                	shr    edi,cl
c0028184:	89 f9                	mov    ecx,edi
c0028186:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028189:	09 cf                	or     edi,ecx
c002818b:	88 d9                	mov    cl,bl
c002818d:	d3 e8                	shr    eax,cl
c002818f:	89 f1                	mov    ecx,esi
c0028191:	d3 e2                	shl    edx,cl
c0028193:	85 d2                	test   edx,edx
c0028195:	0f 95 c2             	setne  dl
c0028198:	0f b6 d2             	movzx  edx,dl
c002819b:	09 d7                	or     edi,edx
c002819d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281a3:	29 fa                	sub    edx,edi
c00281a5:	19 c6                	sbb    esi,eax
c00281a7:	eb be                	jmp    c0028167 <__adddf3+0x43c>
c00281a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281b5:	75 6a                	jne    c0028221 <__adddf3+0x4f6>
c00281b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281bb:	75 58                	jne    c0028215 <__adddf3+0x4ea>
c00281bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281c3:	89 d6                	mov    esi,edx
c00281c5:	09 c6                	or     esi,eax
c00281c7:	75 17                	jne    c00281e0 <__adddf3+0x4b5>
c00281c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281cf:	85 db                	test   ebx,ebx
c00281d1:	0f 85 99 01 00 00    	jne    c0028370 <__adddf3+0x645>
c00281d7:	31 ff                	xor    edi,edi
c00281d9:	31 c9                	xor    ecx,ecx
c00281db:	e9 90 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c00281e0:	85 db                	test   ebx,ebx
c00281e2:	0f 84 88 01 00 00    	je     c0028370 <__adddf3+0x645>
c00281e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00281eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00281ee:	85 c0                	test   eax,eax
c00281f0:	79 10                	jns    c0028202 <__adddf3+0x4d7>
c00281f2:	31 c9                	xor    ecx,ecx
c00281f4:	f7 da                	neg    edx
c00281f6:	0f 95 c1             	setne  cl
c00281f9:	01 c8                	add    eax,ecx
c00281fb:	f7 d8                	neg    eax
c00281fd:	e9 2f 01 00 00       	jmp    c0028331 <__adddf3+0x606>
c0028202:	31 ff                	xor    edi,edi
c0028204:	31 c9                	xor    ecx,ecx
c0028206:	89 c3                	mov    ebx,eax
c0028208:	09 d3                	or     ebx,edx
c002820a:	0f 84 60 01 00 00    	je     c0028370 <__adddf3+0x645>
c0028210:	e9 05 01 00 00       	jmp    c002831a <__adddf3+0x5ef>
c0028215:	31 ff                	xor    edi,edi
c0028217:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002821c:	e9 4f 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c0028221:	89 c1                	mov    ecx,eax
c0028223:	89 d0                	mov    eax,edx
c0028225:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028228:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002822b:	89 ca                	mov    edx,ecx
c002822d:	85 c9                	test   ecx,ecx
c002822f:	79 2c                	jns    c002825d <__adddf3+0x532>
c0028231:	31 c9                	xor    ecx,ecx
c0028233:	f7 d8                	neg    eax
c0028235:	0f 95 c1             	setne  cl
c0028238:	01 ca                	add    edx,ecx
c002823a:	f7 da                	neg    edx
c002823c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002823f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028242:	eb 19                	jmp    c002825d <__adddf3+0x532>
c0028244:	85 c0                	test   eax,eax
c0028246:	0f 89 e5 00 00 00    	jns    c0028331 <__adddf3+0x606>
c002824c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028251:	89 c1                	mov    ecx,eax
c0028253:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028256:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028259:	89 d0                	mov    eax,edx
c002825b:	89 ca                	mov    edx,ecx
c002825d:	85 d2                	test   edx,edx
c002825f:	74 59                	je     c00282ba <__adddf3+0x58f>
c0028261:	0f bd da             	bsr    ebx,edx
c0028264:	83 f3 1f             	xor    ebx,0x1f
c0028267:	88 d9                	mov    cl,bl
c0028269:	d3 e2                	shl    edx,cl
c002826b:	bf 20 00 00 00       	mov    edi,0x20
c0028270:	89 f9                	mov    ecx,edi
c0028272:	29 d9                	sub    ecx,ebx
c0028274:	89 c6                	mov    esi,eax
c0028276:	d3 ee                	shr    esi,cl
c0028278:	09 d6                	or     esi,edx
c002827a:	88 d9                	mov    cl,bl
c002827c:	d3 e0                	shl    eax,cl
c002827e:	89 c2                	mov    edx,eax
c0028280:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028283:	25 ff 07 00 00       	and    eax,0x7ff
c0028288:	39 d8                	cmp    eax,ebx
c002828a:	7f 22                	jg     c00282ae <__adddf3+0x583>
c002828c:	29 c3                	sub    ebx,eax
c002828e:	43                   	inc    ebx
c002828f:	88 d9                	mov    cl,bl
c0028291:	d3 ea                	shr    edx,cl
c0028293:	29 df                	sub    edi,ebx
c0028295:	89 f9                	mov    ecx,edi
c0028297:	89 f0                	mov    eax,esi
c0028299:	d3 e0                	shl    eax,cl
c002829b:	09 c2                	or     edx,eax
c002829d:	89 f0                	mov    eax,esi
c002829f:	88 d9                	mov    cl,bl
c00282a1:	d3 e8                	shr    eax,cl
c00282a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282ac:	eb 6f                	jmp    c002831d <__adddf3+0x5f2>
c00282ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282b1:	29 d8                	sub    eax,ebx
c00282b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282b6:	89 f0                	mov    eax,esi
c00282b8:	eb 59                	jmp    c0028313 <__adddf3+0x5e8>
c00282ba:	85 c0                	test   eax,eax
c00282bc:	74 6a                	je     c0028328 <__adddf3+0x5fd>
c00282be:	0f bd c8             	bsr    ecx,eax
c00282c1:	83 f1 1f             	xor    ecx,0x1f
c00282c4:	d3 e0                	shl    eax,cl
c00282c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282cf:	83 c1 20             	add    ecx,0x20
c00282d2:	39 cb                	cmp    ebx,ecx
c00282d4:	7f 35                	jg     c002830b <__adddf3+0x5e0>
c00282d6:	29 d9                	sub    ecx,ebx
c00282d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00282db:	83 fe 1f             	cmp    esi,0x1f
c00282de:	7e 09                	jle    c00282e9 <__adddf3+0x5be>
c00282e0:	83 e9 1f             	sub    ecx,0x1f
c00282e3:	d3 e8                	shr    eax,cl
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	eb 11                	jmp    c00282fa <__adddf3+0x5cf>
c00282e9:	b9 20 00 00 00       	mov    ecx,0x20
c00282ee:	29 f1                	sub    ecx,esi
c00282f0:	89 c3                	mov    ebx,eax
c00282f2:	d3 e3                	shl    ebx,cl
c00282f4:	89 f1                	mov    ecx,esi
c00282f6:	d3 e8                	shr    eax,cl
c00282f8:	89 c2                	mov    edx,eax
c00282fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028302:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028305:	89 d0                	mov    eax,edx
c0028307:	89 da                	mov    edx,ebx
c0028309:	eb 26                	jmp    c0028331 <__adddf3+0x606>
c002830b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002830e:	29 cf                	sub    edi,ecx
c0028310:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028313:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028318:	eb 17                	jmp    c0028331 <__adddf3+0x606>
c002831a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002831d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028320:	eb 0f                	jmp    c0028331 <__adddf3+0x606>
c0028322:	31 d2                	xor    edx,edx
c0028324:	31 c0                	xor    eax,eax
c0028326:	eb 09                	jmp    c0028331 <__adddf3+0x606>
c0028328:	89 c2                	mov    edx,eax
c002832a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028331:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028334:	c1 e1 14             	shl    ecx,0x14
c0028337:	89 c3                	mov    ebx,eax
c0028339:	c1 eb 0b             	shr    ebx,0xb
c002833c:	09 d9                	or     ecx,ebx
c002833e:	89 d3                	mov    ebx,edx
c0028340:	c1 eb 0b             	shr    ebx,0xb
c0028343:	c1 e0 15             	shl    eax,0x15
c0028346:	09 d8                	or     eax,ebx
c0028348:	89 c7                	mov    edi,eax
c002834a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028350:	0f 95 c0             	setne  al
c0028353:	89 c6                	mov    esi,eax
c0028355:	09 f3                	or     ebx,esi
c0028357:	83 e3 01             	and    ebx,0x1
c002835a:	c1 ea 0a             	shr    edx,0xa
c002835d:	21 da                	and    edx,ebx
c002835f:	89 f8                	mov    eax,edi
c0028361:	01 d0                	add    eax,edx
c0028363:	83 d1 00             	adc    ecx,0x0
c0028366:	89 c7                	mov    edi,eax
c0028368:	eb 06                	jmp    c0028370 <__adddf3+0x645>
c002836a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002836d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028370:	89 f8                	mov    eax,edi
c0028372:	89 ca                	mov    edx,ecx
c0028374:	83 c4 24             	add    esp,0x24
c0028377:	5b                   	pop    ebx
c0028378:	5e                   	pop    esi
c0028379:	5f                   	pop    edi
c002837a:	5d                   	pop    ebp
c002837b:	c3                   	ret    

c002837c <__subdf3>:
c002837c:	55                   	push   ebp
c002837d:	89 e5                	mov    ebp,esp
c002837f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028382:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028385:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002838b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002838e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028391:	5d                   	pop    ebp
c0028392:	e9 94 f9 ff ff       	jmp    c0027d2b <__adddf3>

c0028397 <__negdf2>:
c0028397:	55                   	push   ebp
c0028398:	89 e5                	mov    ebp,esp
c002839a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002839d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283a6:	5d                   	pop    ebp
c00283a7:	c3                   	ret    

c00283a8 <__muldf3>:
c00283a8:	55                   	push   ebp
c00283a9:	89 e5                	mov    ebp,esp
c00283ab:	57                   	push   edi
c00283ac:	56                   	push   esi
c00283ad:	53                   	push   ebx
c00283ae:	83 ec 24             	sub    esp,0x24
c00283b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283c6:	89 c8                	mov    eax,ecx
c00283c8:	c1 f8 14             	sar    eax,0x14
c00283cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283ce:	89 f8                	mov    eax,edi
c00283d0:	89 fb                	mov    ebx,edi
c00283d2:	c1 e3 0b             	shl    ebx,0xb
c00283d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00283d8:	c1 e1 0b             	shl    ecx,0xb
c00283db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e1:	c1 e8 15             	shr    eax,0x15
c00283e4:	09 c1                	or     ecx,eax
c00283e6:	89 d6                	mov    esi,edx
c00283e8:	89 d0                	mov    eax,edx
c00283ea:	c1 f8 14             	sar    eax,0x14
c00283ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00283f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00283f3:	89 c3                	mov    ebx,eax
c00283f5:	c1 e3 0b             	shl    ebx,0xb
c00283f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00283fb:	c1 e6 0b             	shl    esi,0xb
c00283fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028404:	c1 e8 15             	shr    eax,0x15
c0028407:	09 c6                	or     esi,eax
c0028409:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002840c:	25 ff 07 00 00       	and    eax,0x7ff
c0028411:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028414:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028417:	25 ff 07 00 00       	and    eax,0x7ff
c002841c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002841f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028422:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028425:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002842c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002842f:	40                   	inc    eax
c0028430:	a9 fe 07 00 00       	test   eax,0x7fe
c0028435:	0f 85 8d 00 00 00    	jne    c00284c8 <__muldf3+0x120>
c002843b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002843e:	09 c8                	or     eax,ecx
c0028440:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028444:	74 44                	je     c002848a <__muldf3+0xe2>
c0028446:	85 c0                	test   eax,eax
c0028448:	0f 85 31 02 00 00    	jne    c002867f <__muldf3+0x2d7>
c002844e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028451:	40                   	inc    eax
c0028452:	a9 fe 07 00 00       	test   eax,0x7fe
c0028457:	75 13                	jne    c002846c <__muldf3+0xc4>
c0028459:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002845c:	09 f1                	or     ecx,esi
c002845e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028462:	74 22                	je     c0028486 <__muldf3+0xde>
c0028464:	85 c9                	test   ecx,ecx
c0028466:	0f 85 0d 02 00 00    	jne    c0028679 <__muldf3+0x2d1>
c002846c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028470:	0f 89 09 02 00 00    	jns    c002867f <__muldf3+0x2d7>
c0028476:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028479:	05 00 00 00 80       	add    eax,0x80000000
c002847e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028481:	e9 f9 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028486:	85 c9                	test   ecx,ecx
c0028488:	eb 2e                	jmp    c00284b8 <__muldf3+0x110>
c002848a:	85 c0                	test   eax,eax
c002848c:	74 20                	je     c00284ae <__muldf3+0x106>
c002848e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028491:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028494:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028497:	c1 ef 1f             	shr    edi,0x1f
c002849a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002849d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284a6:	09 f9                	or     ecx,edi
c00284a8:	78 1e                	js     c00284c8 <__muldf3+0x120>
c00284aa:	89 c3                	mov    ebx,eax
c00284ac:	eb e0                	jmp    c002848e <__muldf3+0xe6>
c00284ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284b1:	f7 d0                	not    eax
c00284b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284b8:	75 b2                	jne    c002846c <__muldf3+0xc4>
c00284ba:	31 ff                	xor    edi,edi
c00284bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284c3:	e9 b7 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c00284c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284cb:	40                   	inc    eax
c00284cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00284d1:	75 57                	jne    c002852a <__muldf3+0x182>
c00284d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00284d6:	09 f0                	or     eax,esi
c00284d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284dc:	74 23                	je     c0028501 <__muldf3+0x159>
c00284de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00284e2:	0f 89 91 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c00284e8:	85 c0                	test   eax,eax
c00284ea:	0f 85 89 01 00 00    	jne    c0028679 <__muldf3+0x2d1>
c00284f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00284f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00284f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284fc:	e9 7e 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028501:	85 c0                	test   eax,eax
c0028503:	75 0c                	jne    c0028511 <__muldf3+0x169>
c0028505:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028509:	0f 89 6a 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c002850f:	eb df                	jmp    c00284f0 <__muldf3+0x148>
c0028511:	01 f6                	add    esi,esi
c0028513:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028516:	c1 ea 1f             	shr    edx,0x1f
c0028519:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002851c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002851f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028522:	09 d6                	or     esi,edx
c0028524:	78 04                	js     c002852a <__muldf3+0x182>
c0028526:	89 c3                	mov    ebx,eax
c0028528:	eb e7                	jmp    c0028511 <__muldf3+0x169>
c002852a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028530:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028536:	89 c8                	mov    eax,ecx
c0028538:	f7 e6                	mul    esi
c002853a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002853d:	89 c7                	mov    edi,eax
c002853f:	89 c8                	mov    eax,ecx
c0028541:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028544:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028547:	89 c1                	mov    ecx,eax
c0028549:	89 f0                	mov    eax,esi
c002854b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002854e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028551:	89 c6                	mov    esi,eax
c0028553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028556:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028559:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002855c:	31 c0                	xor    eax,eax
c002855e:	01 f1                	add    ecx,esi
c0028560:	0f 92 c0             	setb   al
c0028563:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028566:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028569:	83 d6 00             	adc    esi,0x0
c002856c:	01 c7                	add    edi,eax
c002856e:	83 d6 00             	adc    esi,0x0
c0028571:	01 ca                	add    edx,ecx
c0028573:	0f 92 c1             	setb   cl
c0028576:	0f b6 c9             	movzx  ecx,cl
c0028579:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002857c:	83 d6 00             	adc    esi,0x0
c002857f:	01 cf                	add    edi,ecx
c0028581:	83 d6 00             	adc    esi,0x0
c0028584:	31 c9                	xor    ecx,ecx
c0028586:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028589:	0f 95 c1             	setne  cl
c002858c:	09 cf                	or     edi,ecx
c002858e:	85 f6                	test   esi,esi
c0028590:	78 0c                	js     c002859e <__muldf3+0x1f6>
c0028592:	01 f6                	add    esi,esi
c0028594:	89 f8                	mov    eax,edi
c0028596:	c1 e8 1f             	shr    eax,0x1f
c0028599:	09 c6                	or     esi,eax
c002859b:	01 ff                	add    edi,edi
c002859d:	4b                   	dec    ebx
c002859e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285a4:	0f 8f 85 00 00 00    	jg     c002862f <__muldf3+0x287>
c00285aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285b0:	85 db                	test   ebx,ebx
c00285b2:	0f 8f 84 00 00 00    	jg     c002863c <__muldf3+0x294>
c00285b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285bb:	7c 79                	jl     c0028636 <__muldf3+0x28e>
c00285bd:	ba 01 00 00 00       	mov    edx,0x1
c00285c2:	29 da                	sub    edx,ebx
c00285c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285ca:	83 fa 1f             	cmp    edx,0x1f
c00285cd:	7e 30                	jle    c00285ff <__muldf3+0x257>
c00285cf:	83 fa 20             	cmp    edx,0x20
c00285d2:	75 0b                	jne    c00285df <__muldf3+0x237>
c00285d4:	31 c0                	xor    eax,eax
c00285d6:	85 ff                	test   edi,edi
c00285d8:	0f 95 c0             	setne  al
c00285db:	89 c7                	mov    edi,eax
c00285dd:	eb 1a                	jmp    c00285f9 <__muldf3+0x251>
c00285df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00285e2:	89 f0                	mov    eax,esi
c00285e4:	d3 e0                	shl    eax,cl
c00285e6:	09 f8                	or     eax,edi
c00285e8:	0f 95 c0             	setne  al
c00285eb:	0f b6 c0             	movzx  eax,al
c00285ee:	89 c7                	mov    edi,eax
c00285f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285f5:	29 d9                	sub    ecx,ebx
c00285f7:	d3 ee                	shr    esi,cl
c00285f9:	09 f7                	or     edi,esi
c00285fb:	31 db                	xor    ebx,ebx
c00285fd:	eb 3b                	jmp    c002863a <__muldf3+0x292>
c00285ff:	83 c3 1f             	add    ebx,0x1f
c0028602:	89 f0                	mov    eax,esi
c0028604:	88 d9                	mov    cl,bl
c0028606:	d3 e0                	shl    eax,cl
c0028608:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002860b:	89 f8                	mov    eax,edi
c002860d:	88 d1                	mov    cl,dl
c002860f:	d3 e8                	shr    eax,cl
c0028611:	89 c1                	mov    ecx,eax
c0028613:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028616:	09 c8                	or     eax,ecx
c0028618:	88 d9                	mov    cl,bl
c002861a:	d3 e7                	shl    edi,cl
c002861c:	31 db                	xor    ebx,ebx
c002861e:	85 ff                	test   edi,edi
c0028620:	0f 95 c3             	setne  bl
c0028623:	89 df                	mov    edi,ebx
c0028625:	09 c7                	or     edi,eax
c0028627:	88 d1                	mov    cl,dl
c0028629:	d3 ee                	shr    esi,cl
c002862b:	31 db                	xor    ebx,ebx
c002862d:	eb 0d                	jmp    c002863c <__muldf3+0x294>
c002862f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028634:	eb 02                	jmp    c0028638 <__muldf3+0x290>
c0028636:	31 db                	xor    ebx,ebx
c0028638:	31 ff                	xor    edi,edi
c002863a:	31 f6                	xor    esi,esi
c002863c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002863f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028642:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028647:	09 c3                	or     ebx,eax
c0028649:	c1 e3 14             	shl    ebx,0x14
c002864c:	89 f0                	mov    eax,esi
c002864e:	c1 e8 0b             	shr    eax,0xb
c0028651:	09 c3                	or     ebx,eax
c0028653:	89 f8                	mov    eax,edi
c0028655:	c1 e8 0b             	shr    eax,0xb
c0028658:	c1 e6 15             	shl    esi,0x15
c002865b:	09 c6                	or     esi,eax
c002865d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028663:	0f 95 c1             	setne  cl
c0028666:	09 c8                	or     eax,ecx
c0028668:	83 e0 01             	and    eax,0x1
c002866b:	c1 ef 0a             	shr    edi,0xa
c002866e:	21 c7                	and    edi,eax
c0028670:	01 f7                	add    edi,esi
c0028672:	83 d3 00             	adc    ebx,0x0
c0028675:	89 da                	mov    edx,ebx
c0028677:	eb 03                	jmp    c002867c <__muldf3+0x2d4>
c0028679:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002867c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002867f:	89 f8                	mov    eax,edi
c0028681:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028684:	83 c4 24             	add    esp,0x24
c0028687:	5b                   	pop    ebx
c0028688:	5e                   	pop    esi
c0028689:	5f                   	pop    edi
c002868a:	5d                   	pop    ebp
c002868b:	c3                   	ret    

c002868c <__divdf3>:
c002868c:	55                   	push   ebp
c002868d:	89 e5                	mov    ebp,esp
c002868f:	57                   	push   edi
c0028690:	56                   	push   esi
c0028691:	53                   	push   ebx
c0028692:	83 ec 2c             	sub    esp,0x2c
c0028695:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028698:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002869b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002869e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286a7:	89 ce                	mov    esi,ecx
c00286a9:	89 c8                	mov    eax,ecx
c00286ab:	c1 f8 14             	sar    eax,0x14
c00286ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286b1:	89 f8                	mov    eax,edi
c00286b3:	89 fb                	mov    ebx,edi
c00286b5:	c1 e3 0b             	shl    ebx,0xb
c00286b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286bb:	c1 e6 0b             	shl    esi,0xb
c00286be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286c4:	c1 e8 15             	shr    eax,0x15
c00286c7:	09 c6                	or     esi,eax
c00286c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286cf:	89 c2                	mov    edx,eax
c00286d1:	c1 fa 14             	sar    edx,0x14
c00286d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00286d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286da:	89 de                	mov    esi,ebx
c00286dc:	c1 e6 0b             	shl    esi,0xb
c00286df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00286e2:	c1 e0 0b             	shl    eax,0xb
c00286e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00286ea:	c1 eb 15             	shr    ebx,0x15
c00286ed:	09 d8                	or     eax,ebx
c00286ef:	89 c2                	mov    edx,eax
c00286f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286f4:	25 ff 07 00 00       	and    eax,0x7ff
c00286f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00286fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00286ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028705:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028708:	29 d8                	sub    eax,ebx
c002870a:	05 ff 03 00 00       	add    eax,0x3ff
c002870f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028712:	46                   	inc    esi
c0028713:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028719:	0f 85 a5 00 00 00    	jne    c00287c4 <__divdf3+0x138>
c002871f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028722:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028725:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028729:	74 2a                	je     c0028755 <__divdf3+0xc9>
c002872b:	85 f6                	test   esi,esi
c002872d:	0f 85 cc 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028733:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028736:	40                   	inc    eax
c0028737:	a9 fe 07 00 00       	test   eax,0x7fe
c002873c:	75 26                	jne    c0028764 <__divdf3+0xd8>
c002873e:	85 db                	test   ebx,ebx
c0028740:	74 22                	je     c0028764 <__divdf3+0xd8>
c0028742:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028745:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028748:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002874b:	09 d0                	or     eax,edx
c002874d:	0f 85 ac 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028753:	eb 63                	jmp    c00287b8 <__divdf3+0x12c>
c0028755:	85 f6                	test   esi,esi
c0028757:	75 22                	jne    c002877b <__divdf3+0xef>
c0028759:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002875c:	40                   	inc    eax
c002875d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028762:	74 36                	je     c002879a <__divdf3+0x10e>
c0028764:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028768:	0f 89 91 02 00 00    	jns    c00289ff <__divdf3+0x373>
c002876e:	89 f8                	mov    eax,edi
c0028770:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028776:	e9 80 02 00 00       	jmp    c00289fb <__divdf3+0x36f>
c002877b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002877e:	01 f6                	add    esi,esi
c0028780:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028783:	c1 ef 1f             	shr    edi,0x1f
c0028786:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028789:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002878c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002878f:	09 f7                	or     edi,esi
c0028791:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028794:	78 2e                	js     c00287c4 <__divdf3+0x138>
c0028796:	89 c8                	mov    eax,ecx
c0028798:	eb e1                	jmp    c002877b <__divdf3+0xef>
c002879a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879d:	09 d0                	or     eax,edx
c002879f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287a3:	74 0f                	je     c00287b4 <__divdf3+0x128>
c00287a5:	85 c0                	test   eax,eax
c00287a7:	74 bb                	je     c0028764 <__divdf3+0xd8>
c00287a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287af:	e9 4b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287b4:	85 c0                	test   eax,eax
c00287b6:	75 ac                	jne    c0028764 <__divdf3+0xd8>
c00287b8:	31 ff                	xor    edi,edi
c00287ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287bf:	e9 3b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00287d0:	75 6b                	jne    c002883d <__divdf3+0x1b1>
c00287d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287d5:	09 d6                	or     esi,edx
c00287d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287db:	74 28                	je     c0028805 <__divdf3+0x179>
c00287dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287e3:	85 f6                	test   esi,esi
c00287e5:	0f 85 14 02 00 00    	jne    c00289ff <__divdf3+0x373>
c00287eb:	31 ff                	xor    edi,edi
c00287ed:	31 c9                	xor    ecx,ecx
c00287ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00287f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00287f5:	0f 89 04 02 00 00    	jns    c00289ff <__divdf3+0x373>
c00287fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028800:	e9 fa 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028805:	85 f6                	test   esi,esi
c0028807:	75 1b                	jne    c0028824 <__divdf3+0x198>
c0028809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002880c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002880f:	25 00 00 00 80       	and    eax,0x80000000
c0028814:	31 c9                	xor    ecx,ecx
c0028816:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002881b:	89 cf                	mov    edi,ecx
c002881d:	89 c1                	mov    ecx,eax
c002881f:	e9 db 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028824:	01 d2                	add    edx,edx
c0028826:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028829:	c1 eb 1f             	shr    ebx,0x1f
c002882c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002882f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028832:	8d 48 01             	lea    ecx,[eax+0x1]
c0028835:	09 da                	or     edx,ebx
c0028837:	78 04                	js     c002883d <__divdf3+0x1b1>
c0028839:	89 c8                	mov    eax,ecx
c002883b:	eb e7                	jmp    c0028824 <__divdf3+0x198>
c002883d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028840:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028846:	81 ca 00 00 00 80    	or     edx,0x80000000
c002884c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002884f:	39 d6                	cmp    esi,edx
c0028851:	77 0d                	ja     c0028860 <__divdf3+0x1d4>
c0028853:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028856:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028859:	72 1b                	jb     c0028876 <__divdf3+0x1ea>
c002885b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002885e:	75 16                	jne    c0028876 <__divdf3+0x1ea>
c0028860:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028863:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028866:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028869:	83 de 00             	sbb    esi,0x0
c002886c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002886f:	ba 01 00 00 00       	mov    edx,0x1
c0028874:	eb 02                	jmp    c0028878 <__divdf3+0x1ec>
c0028876:	31 d2                	xor    edx,edx
c0028878:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002887f:	31 ff                	xor    edi,edi
c0028881:	01 ff                	add    edi,edi
c0028883:	89 d1                	mov    ecx,edx
c0028885:	c1 e9 1f             	shr    ecx,0x1f
c0028888:	09 cf                	or     edi,ecx
c002888a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002888d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028890:	89 da                	mov    edx,ebx
c0028892:	89 f3                	mov    ebx,esi
c0028894:	8d 34 36             	lea    esi,[esi+esi*1]
c0028897:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002889a:	c1 e9 1f             	shr    ecx,0x1f
c002889d:	09 ce                	or     esi,ecx
c002889f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288a2:	01 c9                	add    ecx,ecx
c00288a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288aa:	85 db                	test   ebx,ebx
c00288ac:	78 29                	js     c00288d7 <__divdf3+0x24b>
c00288ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288b1:	72 07                	jb     c00288ba <__divdf3+0x22e>
c00288b3:	75 3c                	jne    c00288f1 <__divdf3+0x265>
c00288b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288b8:	77 37                	ja     c00288f1 <__divdf3+0x265>
c00288ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288c0:	31 d2                	xor    edx,edx
c00288c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288c5:	0f 97 c2             	seta   dl
c00288c8:	29 d6                	sub    esi,edx
c00288ca:	89 d9                	mov    ecx,ebx
c00288cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00288d5:	eb 17                	jmp    c00288ee <__divdf3+0x262>
c00288d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288e0:	0f 97 c1             	seta   cl
c00288e3:	0f b6 c9             	movzx  ecx,cl
c00288e6:	29 ce                	sub    esi,ecx
c00288e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00288eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00288ee:	83 ca 01             	or     edx,0x1
c00288f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00288f4:	75 8b                	jne    c0028881 <__divdf3+0x1f5>
c00288f6:	c1 e7 09             	shl    edi,0x9
c00288f9:	89 d1                	mov    ecx,edx
c00288fb:	c1 e9 17             	shr    ecx,0x17
c00288fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028901:	09 f3                	or     ebx,esi
c0028903:	0f 95 c3             	setne  bl
c0028906:	0f b6 db             	movzx  ebx,bl
c0028909:	c1 e2 09             	shl    edx,0x9
c002890c:	09 d3                	or     ebx,edx
c002890e:	89 ca                	mov    edx,ecx
c0028910:	09 fa                	or     edx,edi
c0028912:	78 0c                	js     c0028920 <__divdf3+0x294>
c0028914:	01 d2                	add    edx,edx
c0028916:	89 d9                	mov    ecx,ebx
c0028918:	c1 e9 1f             	shr    ecx,0x1f
c002891b:	09 ca                	or     edx,ecx
c002891d:	01 db                	add    ebx,ebx
c002891f:	48                   	dec    eax
c0028920:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028925:	0f 8f 83 00 00 00    	jg     c00289ae <__divdf3+0x322>
c002892b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028931:	85 c0                	test   eax,eax
c0028933:	0f 8f 82 00 00 00    	jg     c00289bb <__divdf3+0x32f>
c0028939:	83 f8 cc             	cmp    eax,0xffffffcc
c002893c:	7c 77                	jl     c00289b5 <__divdf3+0x329>
c002893e:	be 01 00 00 00       	mov    esi,0x1
c0028943:	29 c6                	sub    esi,eax
c0028945:	81 ca 00 00 00 80    	or     edx,0x80000000
c002894b:	83 fe 1f             	cmp    esi,0x1f
c002894e:	7e 2f                	jle    c002897f <__divdf3+0x2f3>
c0028950:	83 fe 20             	cmp    esi,0x20
c0028953:	75 0a                	jne    c002895f <__divdf3+0x2d3>
c0028955:	85 db                	test   ebx,ebx
c0028957:	0f 95 c3             	setne  bl
c002895a:	0f b6 db             	movzx  ebx,bl
c002895d:	eb 1a                	jmp    c0028979 <__divdf3+0x2ed>
c002895f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028962:	89 d7                	mov    edi,edx
c0028964:	d3 e7                	shl    edi,cl
c0028966:	89 f9                	mov    ecx,edi
c0028968:	09 d9                	or     ecx,ebx
c002896a:	0f 95 c3             	setne  bl
c002896d:	0f b6 db             	movzx  ebx,bl
c0028970:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028975:	29 c1                	sub    ecx,eax
c0028977:	d3 ea                	shr    edx,cl
c0028979:	09 d3                	or     ebx,edx
c002897b:	31 c0                	xor    eax,eax
c002897d:	eb 3a                	jmp    c00289b9 <__divdf3+0x32d>
c002897f:	83 c0 1f             	add    eax,0x1f
c0028982:	89 d7                	mov    edi,edx
c0028984:	88 c1                	mov    cl,al
c0028986:	d3 e7                	shl    edi,cl
c0028988:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002898b:	89 df                	mov    edi,ebx
c002898d:	89 f1                	mov    ecx,esi
c002898f:	d3 ef                	shr    edi,cl
c0028991:	89 f9                	mov    ecx,edi
c0028993:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028996:	09 cf                	or     edi,ecx
c0028998:	88 c1                	mov    cl,al
c002899a:	d3 e3                	shl    ebx,cl
c002899c:	85 db                	test   ebx,ebx
c002899e:	0f 95 c3             	setne  bl
c00289a1:	0f b6 db             	movzx  ebx,bl
c00289a4:	09 fb                	or     ebx,edi
c00289a6:	89 f1                	mov    ecx,esi
c00289a8:	d3 ea                	shr    edx,cl
c00289aa:	31 c0                	xor    eax,eax
c00289ac:	eb 0d                	jmp    c00289bb <__divdf3+0x32f>
c00289ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289b3:	eb 02                	jmp    c00289b7 <__divdf3+0x32b>
c00289b5:	31 c0                	xor    eax,eax
c00289b7:	31 db                	xor    ebx,ebx
c00289b9:	31 d2                	xor    edx,edx
c00289bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289c7:	09 c8                	or     eax,ecx
c00289c9:	c1 e0 14             	shl    eax,0x14
c00289cc:	89 d1                	mov    ecx,edx
c00289ce:	c1 e9 0b             	shr    ecx,0xb
c00289d1:	09 c8                	or     eax,ecx
c00289d3:	89 c6                	mov    esi,eax
c00289d5:	89 d9                	mov    ecx,ebx
c00289d7:	c1 e9 0b             	shr    ecx,0xb
c00289da:	c1 e2 15             	shl    edx,0x15
c00289dd:	09 ca                	or     edx,ecx
c00289df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00289e5:	0f 95 c0             	setne  al
c00289e8:	09 c1                	or     ecx,eax
c00289ea:	83 e1 01             	and    ecx,0x1
c00289ed:	c1 eb 0a             	shr    ebx,0xa
c00289f0:	21 cb                	and    ebx,ecx
c00289f2:	01 d3                	add    ebx,edx
c00289f4:	89 d8                	mov    eax,ebx
c00289f6:	83 d6 00             	adc    esi,0x0
c00289f9:	89 f2                	mov    edx,esi
c00289fb:	89 c7                	mov    edi,eax
c00289fd:	89 d1                	mov    ecx,edx
c00289ff:	89 f8                	mov    eax,edi
c0028a01:	89 ca                	mov    edx,ecx
c0028a03:	83 c4 2c             	add    esp,0x2c
c0028a06:	5b                   	pop    ebx
c0028a07:	5e                   	pop    esi
c0028a08:	5f                   	pop    edi
c0028a09:	5d                   	pop    ebp
c0028a0a:	c3                   	ret    

c0028a0b <__floatsidf>:
c0028a0b:	55                   	push   ebp
c0028a0c:	89 e5                	mov    ebp,esp
c0028a0e:	56                   	push   esi
c0028a0f:	53                   	push   ebx
c0028a10:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a13:	85 db                	test   ebx,ebx
c0028a15:	7e 15                	jle    c0028a2c <__floatsidf+0x21>
c0028a17:	0f bd cb             	bsr    ecx,ebx
c0028a1a:	83 f1 1f             	xor    ecx,0x1f
c0028a1d:	d3 e3                	shl    ebx,cl
c0028a1f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a25:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a2a:	eb 21                	jmp    c0028a4d <__floatsidf+0x42>
c0028a2c:	b8 00 00 00 00       	mov    eax,0x0
c0028a31:	ba 00 00 00 00       	mov    edx,0x0
c0028a36:	74 2a                	je     c0028a62 <__floatsidf+0x57>
c0028a38:	f7 db                	neg    ebx
c0028a3a:	0f bd cb             	bsr    ecx,ebx
c0028a3d:	83 f1 1f             	xor    ecx,0x1f
c0028a40:	d3 e3                	shl    ebx,cl
c0028a42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a48:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a4d:	29 c8                	sub    eax,ecx
c0028a4f:	c1 e0 14             	shl    eax,0x14
c0028a52:	89 c1                	mov    ecx,eax
c0028a54:	89 de                	mov    esi,ebx
c0028a56:	c1 ee 0b             	shr    esi,0xb
c0028a59:	09 f1                	or     ecx,esi
c0028a5b:	89 ca                	mov    edx,ecx
c0028a5d:	c1 e3 15             	shl    ebx,0x15
c0028a60:	89 d8                	mov    eax,ebx
c0028a62:	5b                   	pop    ebx
c0028a63:	5e                   	pop    esi
c0028a64:	5d                   	pop    ebp
c0028a65:	c3                   	ret    

c0028a66 <__floatunsidf>:
c0028a66:	55                   	push   ebp
c0028a67:	89 e5                	mov    ebp,esp
c0028a69:	56                   	push   esi
c0028a6a:	53                   	push   ebx
c0028a6b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a6e:	85 db                	test   ebx,ebx
c0028a70:	74 2a                	je     c0028a9c <__floatunsidf+0x36>
c0028a72:	0f bd cb             	bsr    ecx,ebx
c0028a75:	83 f1 1f             	xor    ecx,0x1f
c0028a78:	d3 e3                	shl    ebx,cl
c0028a7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a80:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a85:	29 c8                	sub    eax,ecx
c0028a87:	c1 e0 14             	shl    eax,0x14
c0028a8a:	89 c1                	mov    ecx,eax
c0028a8c:	89 de                	mov    esi,ebx
c0028a8e:	c1 ee 0b             	shr    esi,0xb
c0028a91:	09 f1                	or     ecx,esi
c0028a93:	89 ca                	mov    edx,ecx
c0028a95:	c1 e3 15             	shl    ebx,0x15
c0028a98:	89 d8                	mov    eax,ebx
c0028a9a:	eb 04                	jmp    c0028aa0 <__floatunsidf+0x3a>
c0028a9c:	31 c0                	xor    eax,eax
c0028a9e:	31 d2                	xor    edx,edx
c0028aa0:	5b                   	pop    ebx
c0028aa1:	5e                   	pop    esi
c0028aa2:	5d                   	pop    ebp
c0028aa3:	c3                   	ret    

c0028aa4 <__fixdfsi>:
c0028aa4:	55                   	push   ebp
c0028aa5:	89 e5                	mov    ebp,esp
c0028aa7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aaa:	89 d1                	mov    ecx,edx
c0028aac:	c1 e1 0b             	shl    ecx,0xb
c0028aaf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ab8:	c1 e8 15             	shr    eax,0x15
c0028abb:	09 c1                	or     ecx,eax
c0028abd:	c1 fa 14             	sar    edx,0x14
c0028ac0:	78 1f                	js     c0028ae1 <__fixdfsi+0x3d>
c0028ac2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028ac8:	31 c0                	xor    eax,eax
c0028aca:	83 fa 1e             	cmp    edx,0x1e
c0028acd:	77 40                	ja     c0028b0f <__fixdfsi+0x6b>
c0028acf:	89 c8                	mov    eax,ecx
c0028ad1:	0d 00 00 00 80       	or     eax,0x80000000
c0028ad6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028adb:	29 d1                	sub    ecx,edx
c0028add:	d3 e8                	shr    eax,cl
c0028adf:	eb 2e                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028ae1:	31 c0                	xor    eax,eax
c0028ae3:	81 c2 01 04 00 00    	add    edx,0x401
c0028ae9:	78 24                	js     c0028b0f <__fixdfsi+0x6b>
c0028aeb:	83 fa 1e             	cmp    edx,0x1e
c0028aee:	7e 09                	jle    c0028af9 <__fixdfsi+0x55>
c0028af0:	83 fa 1f             	cmp    edx,0x1f
c0028af3:	75 18                	jne    c0028b0d <__fixdfsi+0x69>
c0028af5:	85 c9                	test   ecx,ecx
c0028af7:	75 14                	jne    c0028b0d <__fixdfsi+0x69>
c0028af9:	89 c8                	mov    eax,ecx
c0028afb:	0d 00 00 00 80       	or     eax,0x80000000
c0028b00:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b05:	29 d1                	sub    ecx,edx
c0028b07:	d3 e8                	shr    eax,cl
c0028b09:	f7 d8                	neg    eax
c0028b0b:	eb 02                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028b0d:	31 c0                	xor    eax,eax
c0028b0f:	5d                   	pop    ebp
c0028b10:	c3                   	ret    

c0028b11 <__fixunsdfsi>:
c0028b11:	55                   	push   ebp
c0028b12:	89 e5                	mov    ebp,esp
c0028b14:	53                   	push   ebx
c0028b15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b1b:	89 d3                	mov    ebx,edx
c0028b1d:	c1 fb 14             	sar    ebx,0x14
c0028b20:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b26:	31 c0                	xor    eax,eax
c0028b28:	83 fb 1f             	cmp    ebx,0x1f
c0028b2b:	77 1d                	ja     c0028b4a <__fixunsdfsi+0x39>
c0028b2d:	89 d0                	mov    eax,edx
c0028b2f:	c1 e0 0b             	shl    eax,0xb
c0028b32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b37:	c1 e9 15             	shr    ecx,0x15
c0028b3a:	09 c8                	or     eax,ecx
c0028b3c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b41:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b46:	29 d9                	sub    ecx,ebx
c0028b48:	d3 e8                	shr    eax,cl
c0028b4a:	5b                   	pop    ebx
c0028b4b:	5d                   	pop    ebp
c0028b4c:	c3                   	ret    

c0028b4d <__cmpdf2>:
c0028b4d:	55                   	push   ebp
c0028b4e:	89 e5                	mov    ebp,esp
c0028b50:	57                   	push   edi
c0028b51:	56                   	push   esi
c0028b52:	53                   	push   ebx
c0028b53:	83 ec 0c             	sub    esp,0xc
c0028b56:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b5c:	89 ca                	mov    edx,ecx
c0028b5e:	c1 ea 14             	shr    edx,0x14
c0028b61:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b67:	89 cb                	mov    ebx,ecx
c0028b69:	c1 fb 1f             	sar    ebx,0x1f
c0028b6c:	31 da                	xor    edx,ebx
c0028b6e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b71:	89 df                	mov    edi,ebx
c0028b73:	c1 e7 0b             	shl    edi,0xb
c0028b76:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b79:	c1 e1 0b             	shl    ecx,0xb
c0028b7c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b82:	c1 eb 15             	shr    ebx,0x15
c0028b85:	09 d9                	or     ecx,ebx
c0028b87:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028b8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028b8d:	89 ce                	mov    esi,ecx
c0028b8f:	c1 ee 14             	shr    esi,0x14
c0028b92:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028b98:	89 cb                	mov    ebx,ecx
c0028b9a:	c1 fb 1f             	sar    ebx,0x1f
c0028b9d:	31 de                	xor    esi,ebx
c0028b9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028ba2:	89 df                	mov    edi,ebx
c0028ba4:	c1 e7 0b             	shl    edi,0xb
c0028ba7:	c1 e1 0b             	shl    ecx,0xb
c0028baa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bb0:	c1 eb 15             	shr    ebx,0x15
c0028bb3:	09 d9                	or     ecx,ebx
c0028bb5:	89 d3                	mov    ebx,edx
c0028bb7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bbd:	43                   	inc    ebx
c0028bbe:	83 fb 01             	cmp    ebx,0x1
c0028bc1:	77 08                	ja     c0028bcb <__cmpdf2+0x7e>
c0028bc3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bc6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028bc9:	75 68                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bcb:	89 f3                	mov    ebx,esi
c0028bcd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bd3:	43                   	inc    ebx
c0028bd4:	83 fb 01             	cmp    ebx,0x1
c0028bd7:	77 06                	ja     c0028bdf <__cmpdf2+0x92>
c0028bd9:	89 fb                	mov    ebx,edi
c0028bdb:	09 cb                	or     ebx,ecx
c0028bdd:	75 54                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bdf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028be2:	09 f8                	or     eax,edi
c0028be4:	09 c8                	or     eax,ecx
c0028be6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028be9:	75 12                	jne    c0028bfd <__cmpdf2+0xb0>
c0028beb:	8d 42 01             	lea    eax,[edx+0x1]
c0028bee:	83 f8 01             	cmp    eax,0x1
c0028bf1:	77 0a                	ja     c0028bfd <__cmpdf2+0xb0>
c0028bf3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028bf6:	31 c0                	xor    eax,eax
c0028bf8:	83 fb 01             	cmp    ebx,0x1
c0028bfb:	76 36                	jbe    c0028c33 <__cmpdf2+0xe6>
c0028bfd:	b8 01 00 00 00       	mov    eax,0x1
c0028c02:	39 f2                	cmp    edx,esi
c0028c04:	7f 2d                	jg     c0028c33 <__cmpdf2+0xe6>
c0028c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c0b:	7c 26                	jl     c0028c33 <__cmpdf2+0xe6>
c0028c0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c10:	77 07                	ja     c0028c19 <__cmpdf2+0xcc>
c0028c12:	72 16                	jb     c0028c2a <__cmpdf2+0xdd>
c0028c14:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c17:	76 0a                	jbe    c0028c23 <__cmpdf2+0xd6>
c0028c19:	89 d0                	mov    eax,edx
c0028c1b:	c1 f8 1f             	sar    eax,0x1f
c0028c1e:	83 c8 01             	or     eax,0x1
c0028c21:	eb 10                	jmp    c0028c33 <__cmpdf2+0xe6>
c0028c23:	b8 00 00 00 00       	mov    eax,0x0
c0028c28:	73 09                	jae    c0028c33 <__cmpdf2+0xe6>
c0028c2a:	89 d0                	mov    eax,edx
c0028c2c:	c1 f8 1f             	sar    eax,0x1f
c0028c2f:	83 e0 02             	and    eax,0x2
c0028c32:	48                   	dec    eax
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	5b                   	pop    ebx
c0028c37:	5e                   	pop    esi
c0028c38:	5f                   	pop    edi
c0028c39:	5d                   	pop    ebp
c0028c3a:	c3                   	ret    

c0028c3b <__eqdf2>:
c0028c3b:	55                   	push   ebp
c0028c3c:	89 e5                	mov    ebp,esp
c0028c3e:	50                   	push   eax
c0028c3f:	6a 01                	push   0x1
c0028c41:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c44:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c4d:	e8 fb fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c52:	83 c4 18             	add    esp,0x18
c0028c55:	c9                   	leave  
c0028c56:	c3                   	ret    

c0028c57 <__nedf2>:
c0028c57:	eb e2                	jmp    c0028c3b <__eqdf2>

c0028c59 <__gtdf2>:
c0028c59:	55                   	push   ebp
c0028c5a:	89 e5                	mov    ebp,esp
c0028c5c:	50                   	push   eax
c0028c5d:	6a ff                	push   0xffffffff
c0028c5f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c6b:	e8 dd fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c70:	83 c4 18             	add    esp,0x18
c0028c73:	c9                   	leave  
c0028c74:	c3                   	ret    

c0028c75 <__gedf2>:
c0028c75:	eb e2                	jmp    c0028c59 <__gtdf2>

c0028c77 <__ltdf2>:
c0028c77:	eb c2                	jmp    c0028c3b <__eqdf2>

c0028c79 <__ledf2>:
c0028c79:	eb c0                	jmp    c0028c3b <__eqdf2>

c0028c7b <__truncdfsf2>:
c0028c7b:	55                   	push   ebp
c0028c7c:	89 e5                	mov    ebp,esp
c0028c7e:	57                   	push   edi
c0028c7f:	56                   	push   esi
c0028c80:	53                   	push   ebx
c0028c81:	83 ec 0c             	sub    esp,0xc
c0028c84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c87:	89 d1                	mov    ecx,edx
c0028c89:	c1 f9 14             	sar    ecx,0x14
c0028c8c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c8f:	89 df                	mov    edi,ebx
c0028c91:	c1 e7 0b             	shl    edi,0xb
c0028c94:	89 d0                	mov    eax,edx
c0028c96:	c1 e0 0b             	shl    eax,0xb
c0028c99:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c9e:	c1 eb 15             	shr    ebx,0x15
c0028ca1:	09 d8                	or     eax,ebx
c0028ca3:	89 cb                	mov    ebx,ecx
c0028ca5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cb1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cb7:	0f 86 9e 00 00 00    	jbe    c0028d5b <__truncdfsf2+0xe0>
c0028cbd:	85 db                	test   ebx,ebx
c0028cbf:	75 0a                	jne    c0028ccb <__truncdfsf2+0x50>
c0028cc1:	c1 fa 17             	sar    edx,0x17
c0028cc4:	30 d2                	xor    dl,dl
c0028cc6:	e9 84 00 00 00       	jmp    c0028d4f <__truncdfsf2+0xd4>
c0028ccb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028cd1:	83 fe 83             	cmp    esi,0xffffff83
c0028cd4:	7d 4b                	jge    c0028d21 <__truncdfsf2+0xa6>
c0028cd6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028cdb:	29 f1                	sub    ecx,esi
c0028cdd:	83 f9 1f             	cmp    ecx,0x1f
c0028ce0:	7f 6b                	jg     c0028d4d <__truncdfsf2+0xd2>
c0028ce2:	0d 00 00 00 80       	or     eax,0x80000000
c0028ce7:	89 c3                	mov    ebx,eax
c0028ce9:	d3 eb                	shr    ebx,cl
c0028ceb:	be 01 00 00 00       	mov    esi,0x1
c0028cf0:	d3 e6                	shl    esi,cl
c0028cf2:	4e                   	dec    esi
c0028cf3:	21 f0                	and    eax,esi
c0028cf5:	09 f8                	or     eax,edi
c0028cf7:	0f 95 c0             	setne  al
c0028cfa:	0f b6 c0             	movzx  eax,al
c0028cfd:	09 c3                	or     ebx,eax
c0028cff:	89 d9                	mov    ecx,ebx
c0028d01:	c1 e9 08             	shr    ecx,0x8
c0028d04:	f6 c3 7f             	test   bl,0x7f
c0028d07:	0f 95 c0             	setne  al
c0028d0a:	09 c8                	or     eax,ecx
c0028d0c:	83 e0 01             	and    eax,0x1
c0028d0f:	c1 eb 07             	shr    ebx,0x7
c0028d12:	21 c3                	and    ebx,eax
c0028d14:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d1a:	09 d1                	or     ecx,edx
c0028d1c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d1f:	eb 76                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d21:	83 c6 80             	add    esi,0xffffff80
c0028d24:	7e 1d                	jle    c0028d43 <__truncdfsf2+0xc8>
c0028d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d2c:	75 0b                	jne    c0028d39 <__truncdfsf2+0xbe>
c0028d2e:	09 f8                	or     eax,edi
c0028d30:	74 09                	je     c0028d3b <__truncdfsf2+0xc0>
c0028d32:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d37:	eb 02                	jmp    c0028d3b <__truncdfsf2+0xc0>
c0028d39:	31 c0                	xor    eax,eax
c0028d3b:	c1 fa 17             	sar    edx,0x17
c0028d3e:	80 ca ff             	or     dl,0xff
c0028d41:	eb 0e                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d43:	c1 fa 1f             	sar    edx,0x1f
c0028d46:	c1 e2 08             	shl    edx,0x8
c0028d49:	09 ca                	or     edx,ecx
c0028d4b:	eb 04                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d4d:	31 d2                	xor    edx,edx
c0028d4f:	31 c0                	xor    eax,eax
c0028d51:	c1 e2 17             	shl    edx,0x17
c0028d54:	c1 e8 08             	shr    eax,0x8
c0028d57:	09 d0                	or     eax,edx
c0028d59:	eb 3c                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d5b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d61:	89 ca                	mov    edx,ecx
c0028d63:	c1 fa 0b             	sar    edx,0xb
c0028d66:	c1 e2 08             	shl    edx,0x8
c0028d69:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d6c:	31 db                	xor    ebx,ebx
c0028d6e:	85 ff                	test   edi,edi
c0028d70:	0f 95 c3             	setne  bl
c0028d73:	09 d8                	or     eax,ebx
c0028d75:	89 c3                	mov    ebx,eax
c0028d77:	c1 eb 08             	shr    ebx,0x8
c0028d7a:	a8 7f                	test   al,0x7f
c0028d7c:	0f 95 c2             	setne  dl
c0028d7f:	89 d6                	mov    esi,edx
c0028d81:	09 de                	or     esi,ebx
c0028d83:	83 e6 01             	and    esi,0x1
c0028d86:	c1 e8 07             	shr    eax,0x7
c0028d89:	21 f0                	and    eax,esi
c0028d8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d8e:	09 ca                	or     edx,ecx
c0028d90:	c1 e2 17             	shl    edx,0x17
c0028d93:	09 da                	or     edx,ebx
c0028d95:	01 d0                	add    eax,edx
c0028d97:	83 c4 0c             	add    esp,0xc
c0028d9a:	5b                   	pop    ebx
c0028d9b:	5e                   	pop    esi
c0028d9c:	5f                   	pop    edi
c0028d9d:	5d                   	pop    ebp
c0028d9e:	c3                   	ret    

c0028d9f <__extendsfdf2>:
c0028d9f:	55                   	push   ebp
c0028da0:	89 e5                	mov    ebp,esp
c0028da2:	57                   	push   edi
c0028da3:	56                   	push   esi
c0028da4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028da7:	89 d1                	mov    ecx,edx
c0028da9:	c1 f9 17             	sar    ecx,0x17
c0028dac:	c1 e2 08             	shl    edx,0x8
c0028daf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028db5:	89 c8                	mov    eax,ecx
c0028db7:	80 e4 f8             	and    ah,0xf8
c0028dba:	8d 71 01             	lea    esi,[ecx+0x1]
c0028dbd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028dc3:	75 27                	jne    c0028dec <__extendsfdf2+0x4d>
c0028dc5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028dcb:	75 18                	jne    c0028de5 <__extendsfdf2+0x46>
c0028dcd:	85 d2                	test   edx,edx
c0028dcf:	74 20                	je     c0028df1 <__extendsfdf2+0x52>
c0028dd1:	41                   	inc    ecx
c0028dd2:	01 d2                	add    edx,edx
c0028dd4:	79 fb                	jns    c0028dd1 <__extendsfdf2+0x32>
c0028dd6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028ddc:	29 c8                	sub    eax,ecx
c0028dde:	05 81 03 00 00       	add    eax,0x381
c0028de3:	eb 0c                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028de5:	05 00 07 00 00       	add    eax,0x700
c0028dea:	eb 05                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028dec:	05 80 03 00 00       	add    eax,0x380
c0028df1:	c1 e0 14             	shl    eax,0x14
c0028df4:	89 c1                	mov    ecx,eax
c0028df6:	89 d0                	mov    eax,edx
c0028df8:	c1 e8 0b             	shr    eax,0xb
c0028dfb:	09 c1                	or     ecx,eax
c0028dfd:	c1 e2 15             	shl    edx,0x15
c0028e00:	89 d0                	mov    eax,edx
c0028e02:	89 ca                	mov    edx,ecx
c0028e04:	5e                   	pop    esi
c0028e05:	5f                   	pop    edi
c0028e06:	5d                   	pop    ebp
c0028e07:	c3                   	ret    
c0028e08:	66 90                	xchg   ax,ax
c0028e0a:	66 90                	xchg   ax,ax
c0028e0c:	66 90                	xchg   ax,ax
c0028e0e:	66 90                	xchg   ax,ax

c0028e10 <fabs>:
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e17:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e1e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e27:	dd 04 24             	fld    QWORD PTR [esp]
c0028e2a:	83 c4 0c             	add    esp,0xc
c0028e2d:	c3                   	ret    
c0028e2e:	66 90                	xchg   ax,ax

c0028e30 <lrint>:
c0028e30:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e34:	83 ec 04             	sub    esp,0x4
c0028e37:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e3a:	58                   	pop    eax
c0028e3b:	c3                   	ret    

c0028e3c <lrintf>:
c0028e3c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e40:	83 ec 04             	sub    esp,0x4
c0028e43:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e46:	58                   	pop    eax
c0028e47:	c3                   	ret    

Disassembly of section .init:

c0028e48 <_init>:
c0028e48:	55                   	push   ebp
c0028e49:	89 e5                	mov    ebp,esp
c0028e4b:	e8 c8 72 fd ff       	call   c0000118 <frame_dummy>
c0028e50:	e8 5b e0 ff ff       	call   c0026eb0 <__do_global_ctors_aux>
c0028e55:	5d                   	pop    ebp
c0028e56:	c3                   	ret    

Disassembly of section .fini:

c0028e57 <_fini>:
c0028e57:	55                   	push   ebp
c0028e58:	89 e5                	mov    ebp,esp
c0028e5a:	e8 49 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e5f:	5d                   	pop    ebp
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e62 <Computer::~Computer()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	89 10                	mov    DWORD PTR [eax],edx
c0028e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e74:	83 ec 0c             	sub    esp,0xc
c0028e77:	50                   	push   eax
c0028e78:	e8 5d b3 fe ff       	call   c00141da <Device::~Device()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	90                   	nop
c0028e81:	83 c4 0c             	add    esp,0xc
c0028e84:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028e86 <Computer::~Computer()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	83 ec 0c             	sub    esp,0xc
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 cd ff ff ff       	call   c0028e62 <Computer::~Computer()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 ec 08             	sub    esp,0x8
c0028e9b:	68 ec 01 00 00       	push   0x1ec
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 4a 9f fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 c4 0c             	add    esp,0xc
c0028eaf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028eb0 <idleCommon()>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	fa                   	cli    
c0028eb4:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0028eba:	e8 c7 55 ff ff       	call   c001e486 <schedule()>
c0028ebf:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0028ec4:	48                   	dec    eax
c0028ec5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0028eca:	75 01                	jne    c0028ecd <idleCommon()+0x1d>
c0028ecc:	fb                   	sti    
c0028ecd:	83 c4 0c             	add    esp,0xc
c0028ed0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ed2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ed2:	90                   	nop
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ed4 <LinkedList<UnixFile>::LinkedList()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	68 46 ad 02 c0       	push   0xc002ad46
c0028f1f:	e8 af 9f fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0028f24:	83 c4 10             	add    esp,0x10
c0028f27:	90                   	nop
c0028f28:	83 c4 0c             	add    esp,0xc
c0028f2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f34:	75 10                	jne    c0028f46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	68 60 ad 02 c0       	push   0xc002ad60
c0028f3e:	e8 4c 19 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f4c:	85 c0                	test   eax,eax
c0028f4e:	74 34                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f57:	85 c0                	test   eax,eax
c0028f59:	74 29                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f82:	eb 65                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f8a:	85 c0                	test   eax,eax
c0028f8c:	75 4b                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f95:	85 c0                	test   eax,eax
c0028f97:	75 40                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fa1:	89 10                	mov    DWORD PTR [eax],edx
c0028fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc3:	85 c0                	test   eax,eax
c0028fc5:	74 22                	je     c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fc7:	83 ec 0c             	sub    esp,0xc
c0028fca:	68 82 ad 02 c0       	push   0xc002ad82
c0028fcf:	e8 bb 18 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0028fd4:	83 c4 10             	add    esp,0x10
c0028fd7:	eb 10                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	68 8c ad 02 c0       	push   0xc002ad8c
c0028fe1:	e8 a9 18 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0028fe6:	83 c4 10             	add    esp,0x10
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ff0:	8d 50 01             	lea    edx,[eax+0x1]
c0028ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029000 <LinkedList<UnixFile>::getFirstElement()>:
c0029000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029004:	8b 00                	mov    eax,DWORD PTR [eax]
c0029006:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029008 <LinkedList<UnixFile>::removeFirst()>:
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029011:	85 c0                	test   eax,eax
c0029013:	75 12                	jne    c0029027 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029015:	83 ec 0c             	sub    esp,0xc
c0029018:	68 98 ad 02 c0       	push   0xc002ad98
c002901d:	e8 6d 18 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029022:	83 c4 10             	add    esp,0x10
c0029025:	eb 7e                	jmp    c00290a5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002902e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029031:	85 c0                	test   eax,eax
c0029033:	74 10                	je     c0029045 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029035:	83 ec 0c             	sub    esp,0xc
c0029038:	68 e3 ad 02 c0       	push   0xc002ade3
c002903d:	e8 4d 18 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029042:	83 c4 10             	add    esp,0x10
c0029045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029049:	8b 00                	mov    eax,DWORD PTR [eax]
c002904b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002904e:	85 c0                	test   eax,eax
c0029050:	75 33                	jne    c0029085 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002906e:	83 f8 01             	cmp    eax,0x1
c0029071:	74 21                	je     c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029073:	83 ec 0c             	sub    esp,0xc
c0029076:	68 bc ad 02 c0       	push   0xc002adbc
c002907b:	e8 0f 18 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029080:	83 c4 10             	add    esp,0x10
c0029083:	eb 0f                	jmp    c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029089:	8b 00                	mov    eax,DWORD PTR [eax]
c002908b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909b:	8d 50 ff             	lea    edx,[eax-0x1]
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290b2 <DriverlessDevice::~DriverlessDevice()>:
c00290b2:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c00290b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290bb:	89 10                	mov    DWORD PTR [eax],edx
c00290bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290c1:	50                   	push   eax
c00290c2:	e8 13 b1 fe ff       	call   c00141da <Device::~Device()>
c00290c7:	83 c4 04             	add    esp,0x4
c00290ca:	90                   	nop
c00290cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290cc <DriverlessDevice::~DriverlessDevice()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 d7 ff ff ff       	call   c00290b2 <DriverlessDevice::~DriverlessDevice()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 58 01 00 00       	push   0x158
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 04 9d fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00290f6 <LinkedList<Device>::addElement(Device*)>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00290fe:	75 10                	jne    c0029110 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	68 60 ad 02 c0       	push   0xc002ad60
c0029108:	e8 82 17 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029114:	8b 00                	mov    eax,DWORD PTR [eax]
c0029116:	85 c0                	test   eax,eax
c0029118:	74 3a                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029121:	85 c0                	test   eax,eax
c0029123:	74 2f                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002912c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029130:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002913e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029145:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029148:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029152:	eb 68                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 00                	mov    eax,DWORD PTR [eax]
c002915a:	85 c0                	test   eax,eax
c002915c:	75 4e                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029165:	85 c0                	test   eax,eax
c0029167:	75 43                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c0029169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029171:	89 10                	mov    DWORD PTR [eax],edx
c0029173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029177:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002918f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029193:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029196:	85 c0                	test   eax,eax
c0029198:	74 22                	je     c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	68 82 ad 02 c0       	push   0xc002ad82
c00291a2:	e8 e8 16 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00291a7:	83 c4 10             	add    esp,0x10
c00291aa:	eb 10                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	68 8c ad 02 c0       	push   0xc002ad8c
c00291b4:	e8 d6 16 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c3:	8d 50 01             	lea    edx,[eax+0x1]
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291cd:	90                   	nop
c00291ce:	83 c4 0c             	add    esp,0xc
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00291d2 <LinkedList<Device>::LinkedList()>:
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029203:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029215:	83 ec 0c             	sub    esp,0xc
c0029218:	68 46 ad 02 c0       	push   0xc002ad46
c002921d:	e8 b1 9c fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c0029222:	83 c4 10             	add    esp,0x10
c0029225:	90                   	nop
c0029226:	83 c4 0c             	add    esp,0xc
c0029229:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002922a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002922e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029230:	85 c0                	test   eax,eax
c0029232:	75 0e                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002923b:	85 c0                	test   eax,eax
c002923d:	75 03                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002923f:	b0 01                	mov    al,0x1
c0029241:	c3                   	ret    
c0029242:	b0 00                	mov    al,0x0
c0029244:	90                   	nop
c0029245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002924a:	8b 00                	mov    eax,DWORD PTR [eax]
c002924c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002924e:	83 ec 0c             	sub    esp,0xc
c0029251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029255:	8b 00                	mov    eax,DWORD PTR [eax]
c0029257:	85 c0                	test   eax,eax
c0029259:	75 15                	jne    c0029270 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002925b:	83 ec 0c             	sub    esp,0xc
c002925e:	68 98 ad 02 c0       	push   0xc002ad98
c0029263:	e8 27 16 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029268:	83 c4 10             	add    esp,0x10
c002926b:	e9 88 00 00 00       	jmp    c00292f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029277:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002927a:	85 c0                	test   eax,eax
c002927c:	0f 95 c0             	setne  al
c002927f:	84 c0                	test   al,al
c0029281:	74 10                	je     c0029293 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029283:	83 ec 0c             	sub    esp,0xc
c0029286:	68 e3 ad 02 c0       	push   0xc002ade3
c002928b:	e8 ff 15 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029290:	83 c4 10             	add    esp,0x10
c0029293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029297:	8b 00                	mov    eax,DWORD PTR [eax]
c0029299:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002929c:	85 c0                	test   eax,eax
c002929e:	0f 94 c0             	sete   al
c00292a1:	84 c0                	test   al,al
c00292a3:	74 33                	je     c00292d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c1:	83 f8 01             	cmp    eax,0x1
c00292c4:	74 21                	je     c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292c6:	83 ec 0c             	sub    esp,0xc
c00292c9:	68 bc ad 02 c0       	push   0xc002adbc
c00292ce:	e8 bc 15 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00292d3:	83 c4 10             	add    esp,0x10
c00292d6:	eb 0f                	jmp    c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00292de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00292e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e5:	89 10                	mov    DWORD PTR [eax],edx
c00292e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292ee:	8d 50 ff             	lea    edx,[eax-0x1]
c00292f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292f8:	83 c4 0c             	add    esp,0xc
c00292fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00292fc:	83 ec 0c             	sub    esp,0xc
c00292ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029304:	75 10                	jne    c0029316 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	68 60 ad 02 c0       	push   0xc002ad60
c002930e:	e8 7c 15 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029313:	83 c4 10             	add    esp,0x10
c0029316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931a:	8b 00                	mov    eax,DWORD PTR [eax]
c002931c:	85 c0                	test   eax,eax
c002931e:	74 34                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029327:	85 c0                	test   eax,eax
c0029329:	74 29                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002932b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029332:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029336:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029341:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002934b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029352:	eb 65                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029358:	8b 00                	mov    eax,DWORD PTR [eax]
c002935a:	85 c0                	test   eax,eax
c002935c:	75 4b                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029365:	85 c0                	test   eax,eax
c0029367:	75 40                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029371:	89 10                	mov    DWORD PTR [eax],edx
c0029373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029377:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002937b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029385:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029393:	85 c0                	test   eax,eax
c0029395:	74 22                	je     c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029397:	83 ec 0c             	sub    esp,0xc
c002939a:	68 82 ad 02 c0       	push   0xc002ad82
c002939f:	e8 eb 14 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00293a4:	83 c4 10             	add    esp,0x10
c00293a7:	eb 10                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a9:	83 ec 0c             	sub    esp,0xc
c00293ac:	68 8c ad 02 c0       	push   0xc002ad8c
c00293b1:	e8 d9 14 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00293b6:	83 c4 10             	add    esp,0x10
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293c0:	8d 50 01             	lea    edx,[eax+0x1]
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293ca:	90                   	nop
c00293cb:	83 c4 0c             	add    esp,0xc
c00293ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00293d0 <ACPI::~ACPI()>:
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c00293d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dc:	89 10                	mov    DWORD PTR [eax],edx
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	83 ec 0c             	sub    esp,0xc
c00293e5:	50                   	push   eax
c00293e6:	e8 ef ad fe ff       	call   c00141da <Device::~Device()>
c00293eb:	83 c4 10             	add    esp,0x10
c00293ee:	90                   	nop
c00293ef:	83 c4 0c             	add    esp,0xc
c00293f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00293f4 <ACPI::~ACPI()>:
c00293f4:	83 ec 0c             	sub    esp,0xc
c00293f7:	83 ec 0c             	sub    esp,0xc
c00293fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fe:	e8 cd ff ff ff       	call   c00293d0 <ACPI::~ACPI()>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	83 ec 08             	sub    esp,0x8
c0029409:	68 68 12 00 00       	push   0x1268
c002940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029412:	e8 dc 99 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029417:	83 c4 10             	add    esp,0x10
c002941a:	83 c4 0c             	add    esp,0xc
c002941d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002941e <LinkedList<Device>::~LinkedList()>:
c002941e:	90                   	nop
c002941f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029420 <LinkedList<Device>::isEmpty()>:
c0029420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029424:	8b 00                	mov    eax,DWORD PTR [eax]
c0029426:	85 c0                	test   eax,eax
c0029428:	75 0e                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c002942a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002942e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029431:	85 c0                	test   eax,eax
c0029433:	75 03                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c0029435:	b0 01                	mov    al,0x1
c0029437:	c3                   	ret    
c0029438:	b0 00                	mov    al,0x0
c002943a:	90                   	nop
c002943b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002943c <LinkedList<Device>::getFirstElement()>:
c002943c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029440:	8b 00                	mov    eax,DWORD PTR [eax]
c0029442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029444 <LinkedList<Device>::removeFirst()>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944b:	8b 00                	mov    eax,DWORD PTR [eax]
c002944d:	85 c0                	test   eax,eax
c002944f:	75 15                	jne    c0029466 <LinkedList<Device>::removeFirst()+0x22>
c0029451:	83 ec 0c             	sub    esp,0xc
c0029454:	68 98 ad 02 c0       	push   0xc002ad98
c0029459:	e8 31 14 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c002945e:	83 c4 10             	add    esp,0x10
c0029461:	e9 87 00 00 00       	jmp    c00294ed <LinkedList<Device>::removeFirst()+0xa9>
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002946d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029473:	85 c0                	test   eax,eax
c0029475:	74 10                	je     c0029487 <LinkedList<Device>::removeFirst()+0x43>
c0029477:	83 ec 0c             	sub    esp,0xc
c002947a:	68 e3 ad 02 c0       	push   0xc002ade3
c002947f:	e8 0b 14 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c0029484:	83 c4 10             	add    esp,0x10
c0029487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948b:	8b 00                	mov    eax,DWORD PTR [eax]
c002948d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029493:	85 c0                	test   eax,eax
c0029495:	75 33                	jne    c00294ca <LinkedList<Device>::removeFirst()+0x86>
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b3:	83 f8 01             	cmp    eax,0x1
c00294b6:	74 24                	je     c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294b8:	83 ec 0c             	sub    esp,0xc
c00294bb:	68 bc ad 02 c0       	push   0xc002adbc
c00294c0:	e8 ca 13 ff ff       	call   c001a88f <Krnl::panic(char const*)>
c00294c5:	83 c4 10             	add    esp,0x10
c00294c8:	eb 12                	jmp    c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00294d0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00294d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294da:	89 10                	mov    DWORD PTR [eax],edx
c00294dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294e3:	8d 50 ff             	lea    edx,[eax-0x1]
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294ed:	83 c4 0c             	add    esp,0xc
c00294f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00294f2 <CPU::~CPU()>:
c00294f2:	83 ec 0c             	sub    esp,0xc
c00294f5:	ba 80 c3 02 c0       	mov    edx,0xc002c380
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	89 10                	mov    DWORD PTR [eax],edx
c0029500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	50                   	push   eax
c0029508:	e8 cd ac fe ff       	call   c00141da <Device::~Device()>
c002950d:	83 c4 10             	add    esp,0x10
c0029510:	90                   	nop
c0029511:	83 c4 0c             	add    esp,0xc
c0029514:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029516 <CPU::~CPU()>:
c0029516:	83 ec 0c             	sub    esp,0xc
c0029519:	83 ec 0c             	sub    esp,0xc
c002951c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029520:	e8 cd ff ff ff       	call   c00294f2 <CPU::~CPU()>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	83 ec 08             	sub    esp,0x8
c002952b:	68 98 11 00 00       	push   0x1198
c0029530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029534:	e8 ba 98 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029539:	83 c4 10             	add    esp,0x10
c002953c:	83 c4 0c             	add    esp,0xc
c002953f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029540 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029540:	90                   	nop
c0029541:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029542 <ThreadControlBlock::ThreadControlBlock()>:
c0029542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029546:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002954d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029551:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002955c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029567:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002956e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029572:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029585:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029589:	90                   	nop
c002958a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002958c:	83 ec 0c             	sub    esp,0xc
c002958f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029593:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295cf:	83 ec 0c             	sub    esp,0xc
c00295d2:	68 46 ad 02 c0       	push   0xc002ad46
c00295d7:	e8 f7 98 fe ff       	call   c0012ed3 <Dbg::kprintf(char const*, ...)>
c00295dc:	83 c4 10             	add    esp,0x10
c00295df:	90                   	nop
c00295e0:	83 c4 0c             	add    esp,0xc
c00295e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00295e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00295e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00295eb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00295ec <Vm::_FPUState::_FPUState()>:
c00295ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00295f7:	90                   	nop
c00295f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00295fa <PCI::~PCI()>:
c00295fa:	83 ec 0c             	sub    esp,0xc
c00295fd:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c0029602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029606:	89 10                	mov    DWORD PTR [eax],edx
c0029608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960c:	83 ec 0c             	sub    esp,0xc
c002960f:	50                   	push   eax
c0029610:	e8 95 a5 fe ff       	call   c0013baa <Bus::~Bus()>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	90                   	nop
c0029619:	83 c4 0c             	add    esp,0xc
c002961c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002961e <PCI::~PCI()>:
c002961e:	83 ec 0c             	sub    esp,0xc
c0029621:	83 ec 0c             	sub    esp,0xc
c0029624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029628:	e8 cd ff ff ff       	call   c00295fa <PCI::~PCI()>
c002962d:	83 c4 10             	add    esp,0x10
c0029630:	83 ec 08             	sub    esp,0x8
c0029633:	68 58 01 00 00       	push   0x158
c0029638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002963c:	e8 b2 97 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029641:	83 c4 10             	add    esp,0x10
c0029644:	83 c4 0c             	add    esp,0xc
c0029647:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029648 <IDE::~IDE()>:
c0029648:	83 ec 0c             	sub    esp,0xc
c002964b:	ba e8 d6 02 c0       	mov    edx,0xc002d6e8
c0029650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029654:	89 10                	mov    DWORD PTR [eax],edx
c0029656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965a:	83 ec 0c             	sub    esp,0xc
c002965d:	50                   	push   eax
c002965e:	e8 75 b0 fe ff       	call   c00146d8 <HardDiskController::~HardDiskController()>
c0029663:	83 c4 10             	add    esp,0x10
c0029666:	90                   	nop
c0029667:	83 c4 0c             	add    esp,0xc
c002966a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002966c <IDE::~IDE()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	83 ec 0c             	sub    esp,0xc
c0029672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029676:	e8 cd ff ff ff       	call   c0029648 <IDE::~IDE()>
c002967b:	83 c4 10             	add    esp,0x10
c002967e:	83 ec 08             	sub    esp,0x8
c0029681:	68 70 02 00 00       	push   0x270
c0029686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968a:	e8 64 97 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c002968f:	83 c4 10             	add    esp,0x10
c0029692:	83 c4 0c             	add    esp,0xc
c0029695:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029696 <SATABus::~SATABus()>:
c0029696:	83 ec 0c             	sub    esp,0xc
c0029699:	ba c8 d7 02 c0       	mov    edx,0xc002d7c8
c002969e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a2:	89 10                	mov    DWORD PTR [eax],edx
c00296a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	50                   	push   eax
c00296ac:	e8 27 b0 fe ff       	call   c00146d8 <HardDiskController::~HardDiskController()>
c00296b1:	83 c4 10             	add    esp,0x10
c00296b4:	90                   	nop
c00296b5:	83 c4 0c             	add    esp,0xc
c00296b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296ba <SATABus::~SATABus()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	83 ec 0c             	sub    esp,0xc
c00296c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c4:	e8 cd ff ff ff       	call   c0029696 <SATABus::~SATABus()>
c00296c9:	83 c4 10             	add    esp,0x10
c00296cc:	83 ec 08             	sub    esp,0x8
c00296cf:	68 64 01 00 00       	push   0x164
c00296d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d8:	e8 16 97 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00296dd:	83 c4 10             	add    esp,0x10
c00296e0:	83 c4 0c             	add    esp,0xc
c00296e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00296e4 <ATA::~ATA()>:
c00296e4:	83 ec 0c             	sub    esp,0xc
c00296e7:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00296ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f0:	89 10                	mov    DWORD PTR [eax],edx
c00296f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f6:	83 ec 0c             	sub    esp,0xc
c00296f9:	50                   	push   eax
c00296fa:	e8 cb b0 fe ff       	call   c00147ca <PhysicalDisk::~PhysicalDisk()>
c00296ff:	83 c4 10             	add    esp,0x10
c0029702:	90                   	nop
c0029703:	83 c4 0c             	add    esp,0xc
c0029706:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029708 <ATA::~ATA()>:
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	83 ec 0c             	sub    esp,0xc
c002970e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029712:	e8 cd ff ff ff       	call   c00296e4 <ATA::~ATA()>
c0029717:	83 c4 10             	add    esp,0x10
c002971a:	83 ec 08             	sub    esp,0x8
c002971d:	68 7c 01 00 00       	push   0x17c
c0029722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029726:	e8 c8 96 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c002972b:	83 c4 10             	add    esp,0x10
c002972e:	83 c4 0c             	add    esp,0xc
c0029731:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029732 <ATAPI::~ATAPI()>:
c0029732:	83 ec 0c             	sub    esp,0xc
c0029735:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c002973a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973e:	89 10                	mov    DWORD PTR [eax],edx
c0029740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029744:	83 ec 0c             	sub    esp,0xc
c0029747:	50                   	push   eax
c0029748:	e8 7d b0 fe ff       	call   c00147ca <PhysicalDisk::~PhysicalDisk()>
c002974d:	83 c4 10             	add    esp,0x10
c0029750:	90                   	nop
c0029751:	83 c4 0c             	add    esp,0xc
c0029754:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029756 <ATAPI::~ATAPI()>:
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	83 ec 0c             	sub    esp,0xc
c002975c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029760:	e8 cd ff ff ff       	call   c0029732 <ATAPI::~ATAPI()>
c0029765:	83 c4 10             	add    esp,0x10
c0029768:	83 ec 08             	sub    esp,0x8
c002976b:	68 80 01 00 00       	push   0x180
c0029770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029774:	e8 7a 96 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	83 c4 0c             	add    esp,0xc
c002977f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029780 <SATA::~SATA()>:
c0029780:	83 ec 0c             	sub    esp,0xc
c0029783:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c0029788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978c:	89 10                	mov    DWORD PTR [eax],edx
c002978e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029792:	83 ec 0c             	sub    esp,0xc
c0029795:	50                   	push   eax
c0029796:	e8 2f b0 fe ff       	call   c00147ca <PhysicalDisk::~PhysicalDisk()>
c002979b:	83 c4 10             	add    esp,0x10
c002979e:	90                   	nop
c002979f:	83 c4 0c             	add    esp,0xc
c00297a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297a4 <SATA::~SATA()>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	83 ec 0c             	sub    esp,0xc
c00297aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ae:	e8 cd ff ff ff       	call   c0029780 <SATA::~SATA()>
c00297b3:	83 c4 10             	add    esp,0x10
c00297b6:	83 ec 08             	sub    esp,0x8
c00297b9:	68 7c 01 00 00       	push   0x17c
c00297be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c2:	e8 2c 96 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00297c7:	83 c4 10             	add    esp,0x10
c00297ca:	83 c4 0c             	add    esp,0xc
c00297cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297ce <SATAPI::~SATAPI()>:
c00297ce:	83 ec 0c             	sub    esp,0xc
c00297d1:	ba dc d9 02 c0       	mov    edx,0xc002d9dc
c00297d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297da:	89 10                	mov    DWORD PTR [eax],edx
c00297dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e0:	83 ec 0c             	sub    esp,0xc
c00297e3:	50                   	push   eax
c00297e4:	e8 e1 af fe ff       	call   c00147ca <PhysicalDisk::~PhysicalDisk()>
c00297e9:	83 c4 10             	add    esp,0x10
c00297ec:	90                   	nop
c00297ed:	83 c4 0c             	add    esp,0xc
c00297f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00297f2 <SATAPI::~SATAPI()>:
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	83 ec 0c             	sub    esp,0xc
c00297f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297fc:	e8 cd ff ff ff       	call   c00297ce <SATAPI::~SATAPI()>
c0029801:	83 c4 10             	add    esp,0x10
c0029804:	83 ec 08             	sub    esp,0x8
c0029807:	68 80 01 00 00       	push   0x180
c002980c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029810:	e8 de 95 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	83 c4 0c             	add    esp,0xc
c002981b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002981c <AVX::~AVX()>:
c002981c:	83 ec 0c             	sub    esp,0xc
c002981f:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0029824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029828:	89 10                	mov    DWORD PTR [eax],edx
c002982a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982e:	83 ec 0c             	sub    esp,0xc
c0029831:	50                   	push   eax
c0029832:	e8 17 b0 fe ff       	call   c001484e <FPU::~FPU()>
c0029837:	83 c4 10             	add    esp,0x10
c002983a:	90                   	nop
c002983b:	83 c4 0c             	add    esp,0xc
c002983e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029840 <AVX::~AVX()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	83 ec 0c             	sub    esp,0xc
c0029846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984a:	e8 cd ff ff ff       	call   c002981c <AVX::~AVX()>
c002984f:	83 c4 10             	add    esp,0x10
c0029852:	83 ec 08             	sub    esp,0x8
c0029855:	68 58 01 00 00       	push   0x158
c002985a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985e:	e8 90 95 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	83 c4 0c             	add    esp,0xc
c0029869:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002986a <MMX::~MMX()>:
c002986a:	83 ec 0c             	sub    esp,0xc
c002986d:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029876:	89 10                	mov    DWORD PTR [eax],edx
c0029878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987c:	83 ec 0c             	sub    esp,0xc
c002987f:	50                   	push   eax
c0029880:	e8 c9 af fe ff       	call   c001484e <FPU::~FPU()>
c0029885:	83 c4 10             	add    esp,0x10
c0029888:	90                   	nop
c0029889:	83 c4 0c             	add    esp,0xc
c002988c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002988e <MMX::~MMX()>:
c002988e:	83 ec 0c             	sub    esp,0xc
c0029891:	83 ec 0c             	sub    esp,0xc
c0029894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029898:	e8 cd ff ff ff       	call   c002986a <MMX::~MMX()>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	83 ec 08             	sub    esp,0x8
c00298a3:	68 58 01 00 00       	push   0x158
c00298a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ac:	e8 42 95 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00298b1:	83 c4 10             	add    esp,0x10
c00298b4:	83 c4 0c             	add    esp,0xc
c00298b7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298b8 <SSE::~SSE()>:
c00298b8:	83 ec 0c             	sub    esp,0xc
c00298bb:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c00298c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c4:	89 10                	mov    DWORD PTR [eax],edx
c00298c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	50                   	push   eax
c00298ce:	e8 7b af fe ff       	call   c001484e <FPU::~FPU()>
c00298d3:	83 c4 10             	add    esp,0x10
c00298d6:	90                   	nop
c00298d7:	83 c4 0c             	add    esp,0xc
c00298da:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00298dc <SSE::~SSE()>:
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	83 ec 0c             	sub    esp,0xc
c00298e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e6:	e8 cd ff ff ff       	call   c00298b8 <SSE::~SSE()>
c00298eb:	83 c4 10             	add    esp,0x10
c00298ee:	83 ec 08             	sub    esp,0x8
c00298f1:	68 58 01 00 00       	push   0x158
c00298f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fa:	e8 f4 94 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00298ff:	83 c4 10             	add    esp,0x10
c0029902:	83 c4 0c             	add    esp,0xc
c0029905:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029906 <x87::~x87()>:
c0029906:	83 ec 0c             	sub    esp,0xc
c0029909:	ba dc da 02 c0       	mov    edx,0xc002dadc
c002990e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029912:	89 10                	mov    DWORD PTR [eax],edx
c0029914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	50                   	push   eax
c002991c:	e8 2d af fe ff       	call   c001484e <FPU::~FPU()>
c0029921:	83 c4 10             	add    esp,0x10
c0029924:	90                   	nop
c0029925:	83 c4 0c             	add    esp,0xc
c0029928:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002992a <x87::~x87()>:
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	83 ec 0c             	sub    esp,0xc
c0029930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029934:	e8 cd ff ff ff       	call   c0029906 <x87::~x87()>
c0029939:	83 c4 10             	add    esp,0x10
c002993c:	83 ec 08             	sub    esp,0x8
c002993f:	68 58 01 00 00       	push   0x158
c0029944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029948:	e8 a6 94 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c002994d:	83 c4 10             	add    esp,0x10
c0029950:	83 c4 0c             	add    esp,0xc
c0029953:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029954 <IOAPIC::~IOAPIC()>:
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	ba 34 dc 02 c0       	mov    edx,0xc002dc34
c002995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029960:	89 10                	mov    DWORD PTR [eax],edx
c0029962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	50                   	push   eax
c002996a:	e8 6b a8 fe ff       	call   c00141da <Device::~Device()>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	90                   	nop
c0029973:	83 c4 0c             	add    esp,0xc
c0029976:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029978 <IOAPIC::~IOAPIC()>:
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	83 ec 0c             	sub    esp,0xc
c002997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029982:	e8 cd ff ff ff       	call   c0029954 <IOAPIC::~IOAPIC()>
c0029987:	83 c4 10             	add    esp,0x10
c002998a:	83 ec 08             	sub    esp,0x8
c002998d:	68 68 01 00 00       	push   0x168
c0029992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029996:	e8 58 94 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c002999b:	83 c4 10             	add    esp,0x10
c002999e:	83 c4 0c             	add    esp,0xc
c00299a1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299a2 <APIC::~APIC()>:
c00299a2:	83 ec 0c             	sub    esp,0xc
c00299a5:	ba ec db 02 c0       	mov    edx,0xc002dbec
c00299aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ae:	89 10                	mov    DWORD PTR [eax],edx
c00299b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	50                   	push   eax
c00299b8:	e8 5b b3 fe ff       	call   c0014d18 <InterruptController::~InterruptController()>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	90                   	nop
c00299c1:	83 c4 0c             	add    esp,0xc
c00299c4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299c6 <APIC::~APIC()>:
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	83 ec 0c             	sub    esp,0xc
c00299cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d0:	e8 cd ff ff ff       	call   c00299a2 <APIC::~APIC()>
c00299d5:	83 c4 10             	add    esp,0x10
c00299d8:	83 ec 08             	sub    esp,0x8
c00299db:	68 58 21 00 00       	push   0x2158
c00299e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e4:	e8 0a 94 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	83 c4 0c             	add    esp,0xc
c00299ef:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00299f0 <PIC::~PIC()>:
c00299f0:	83 ec 0c             	sub    esp,0xc
c00299f3:	ba 84 dc 02 c0       	mov    edx,0xc002dc84
c00299f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fc:	89 10                	mov    DWORD PTR [eax],edx
c00299fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	50                   	push   eax
c0029a06:	e8 0d b3 fe ff       	call   c0014d18 <InterruptController::~InterruptController()>
c0029a0b:	83 c4 10             	add    esp,0x10
c0029a0e:	90                   	nop
c0029a0f:	83 c4 0c             	add    esp,0xc
c0029a12:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a14 <PIC::~PIC()>:
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	83 ec 0c             	sub    esp,0xc
c0029a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a1e:	e8 cd ff ff ff       	call   c00299f0 <PIC::~PIC()>
c0029a23:	83 c4 10             	add    esp,0x10
c0029a26:	83 ec 08             	sub    esp,0x8
c0029a29:	68 58 21 00 00       	push   0x2158
c0029a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a32:	e8 bc 93 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029a37:	83 c4 10             	add    esp,0x10
c0029a3a:	83 c4 0c             	add    esp,0xc
c0029a3d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a3e <APICTimer::~APICTimer()>:
c0029a3e:	83 ec 0c             	sub    esp,0xc
c0029a41:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0029a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4a:	89 10                	mov    DWORD PTR [eax],edx
c0029a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	50                   	push   eax
c0029a54:	e8 75 d3 fe ff       	call   c0016dce <Timer::~Timer()>
c0029a59:	83 c4 10             	add    esp,0x10
c0029a5c:	90                   	nop
c0029a5d:	83 c4 0c             	add    esp,0xc
c0029a60:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a62 <APICTimer::~APICTimer()>:
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	83 ec 0c             	sub    esp,0xc
c0029a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6c:	e8 cd ff ff ff       	call   c0029a3e <APICTimer::~APICTimer()>
c0029a71:	83 c4 10             	add    esp,0x10
c0029a74:	83 ec 08             	sub    esp,0x8
c0029a77:	68 60 01 00 00       	push   0x160
c0029a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a80:	e8 6e 93 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	83 c4 0c             	add    esp,0xc
c0029a8b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a8c <PIT::~PIT()>:
c0029a8c:	83 ec 0c             	sub    esp,0xc
c0029a8f:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c0029a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a98:	89 10                	mov    DWORD PTR [eax],edx
c0029a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	50                   	push   eax
c0029aa2:	e8 27 d3 fe ff       	call   c0016dce <Timer::~Timer()>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	90                   	nop
c0029aab:	83 c4 0c             	add    esp,0xc
c0029aae:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ab0 <PIT::~PIT()>:
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	83 ec 0c             	sub    esp,0xc
c0029ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aba:	e8 cd ff ff ff       	call   c0029a8c <PIT::~PIT()>
c0029abf:	83 c4 10             	add    esp,0x10
c0029ac2:	83 ec 08             	sub    esp,0x8
c0029ac5:	68 5c 01 00 00       	push   0x15c
c0029aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ace:	e8 20 93 fe ff       	call   c0012df3 <operator delete(void*, unsigned long)>
c0029ad3:	83 c4 10             	add    esp,0x10
c0029ad6:	83 c4 0c             	add    esp,0xc
c0029ad9:	c3                   	ret    
