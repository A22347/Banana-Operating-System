
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8d 9e 00 00       	call   c0009ead <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 05 32 02 00       	call   c002322a <_init>
c0000025:	c3                   	ret    
c0000026:	bb ae 3e 02 c0       	mov    ebx,0xc0023eae
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 3e 02 c0    	cmp    ebx,0xc0023ebc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 86 02 c0       	mov    eax,0xc0028678
c0000049:	3d 78 86 02 c0       	cmp    eax,0xc0028678
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 86 02 c0       	push   0xc0028678
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 86 02 c0       	mov    eax,0xc0028678
c0000075:	2d 78 86 02 c0       	sub    eax,0xc0028678
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 86 02 c0       	push   0xc0028678
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 00 88 02 c0 00 	cmp    BYTE PTR ds:0xc0028800,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 3e 02 c0       	mov    ebx,0xc0023ec4
c00000bb:	81 eb c0 3e 02 c0    	sub    ebx,0xc0023ec0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 3e 02 c0       	mov    esi,0xc0023ec0
c00000ca:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 04 88 02 c0       	mov    ds:0xc0028804,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 86 02 c0       	push   0xc0028678
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 00 88 02 c0 01 	mov    BYTE PTR ds:0xc0028800,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 08 88 02 c0       	push   0xc0028808
c000012c:	68 78 86 02 c0       	push   0xc0028678
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 48 85 01 00       	call   c0018830 <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 b6 cb 00 00       	call   c000ceb6 <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 26 85 01 00       	call   c0018830 <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 ef 89 01 00       	call   c0018d18 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 32 90 01 00       	call   c0019364 <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 50 8c 02 c0 	lgdtd  ds:0xc0028c50
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 86 ea 00 00       	call   c000efad <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 20 88 02 c0       	mov    ds:0xc0028820,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 20 88 02 c0    	mov    DWORD PTR ds:0xc0028820,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d 20 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028820
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 e0 3e 02 c0 02 	test   BYTE PTR [edx-0x3ffdc120],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 e0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc120],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 e0 3e 02 c0 08 	test   BYTE PTR [edx-0x3ffdc120],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 e0 3e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc120],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 e0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc120],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d 40 88 02 c0    	mov    ecx,DWORD PTR ds:0xc0028840
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 44 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77bc]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 44 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77bc],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 6c 88 02 c0    	cmp    DWORD PTR ds:0xc002886c,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d 7c 88 02 c0    	mov    ecx,DWORD PTR ds:0xc002887c
c0000d7c:	c7 42 0c 74 88 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028874
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 7c 88 02 c0    	mov    DWORD PTR ds:0xc002887c,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 6c 88 02 c0    	mov    DWORD PTR ds:0xc002886c,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 40 88 02 c0 02 	test   BYTE PTR ds:0xc0028840,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 53 8e 00 00       	call   c0009cb0 <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 95 8d 00 00       	call   c0009cb0 <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 7f 8d 00 00       	call   c0009cb0 <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 5b 8d 00 00       	call   c0009cb0 <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d 40 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028840
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 44 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77bc]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 44 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd77bc],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 74 88 02 c0 	lea    edx,[eax*8-0x3ffd778c]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 40 88 02 c0       	mov    eax,0xc0028840
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d 80 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028880
c00010fe:	81 fb 74 88 02 c0    	cmp    ebx,0xc0028874
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d 74 88 02 c0       	cmp    eax,0xc0028874
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d 70 88 02 c0    	cmp    DWORD PTR ds:0xc0028870,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 7c 88 02 c0       	mov    ds:0xc002887c,eax
c000113a:	a3 80 88 02 c0       	mov    ds:0xc0028880,eax
c000113f:	a3 70 88 02 c0       	mov    ds:0xc0028870,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 74 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028874
c000114d:	c7 40 0c 74 88 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028874
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 80 88 02 c0       	mov    ds:0xc0028880,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 74 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028874
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 38 88 02 c0 	lea    ebp,[edx*4-0x3ffd77c8]
c000119e:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 40 88 02 c0 	lea    ecx,[edx*4-0x3ffd77c0]
c00011b9:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd 74 8b 02 c0 	or     DWORD PTR [edi*4-0x3ffd748c],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 74 88 02 c0 	lea    eax,[eax*8-0x3ffd778c]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d 7c 88 02 c0    	mov    DWORD PTR ds:0xc002887c,ecx
c0001273:	89 0d 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,ecx
c0001279:	c7 41 08 74 88 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028874
c0001280:	c7 41 0c 74 88 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028874
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd 6c 88 02 c0 	lea    edx,[ecx*8-0x3ffd7794]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d 74 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd748c]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d 74 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd748c]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 6c 88 02 c0 	lea    edx,[eax*4-0x3ffd7794]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d 74 8b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd748c],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d 7c 88 02 c0    	mov    DWORD PTR ds:0xc002887c,edi
c0001346:	89 3d 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,edi
c000134c:	c7 47 08 74 88 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028874
c0001353:	c7 47 0c 74 88 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028874
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d 70 88 02 c0    	mov    DWORD PTR ds:0xc0028870,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 6c 88 02 c0       	mov    eax,ds:0xc002886c
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d 6c 88 02 c0    	mov    DWORD PTR ds:0xc002886c,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba 40 88 02 c0       	mov    edx,0xc0028840
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d 40 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028840,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 40 88 02 c0       	mov    eax,0xc0028840
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d 94 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b94
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 94 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b94,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d 94 8b 02 c0    	mov    DWORD PTR ds:0xc0028b94,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 6c 88 02 c0    	cmp    DWORD PTR ds:0xc002886c,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d 6c 88 02 c0    	mov    DWORD PTR ds:0xc002886c,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d 40 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028840,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 9c 8b 02 c0    	push   DWORD PTR ds:0xc0028b9c
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d 40 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028840,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 40 88 02 c0       	mov    eax,0xc0028840
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 9c 8b 02 c0       	mov    eax,ds:0xc0028b9c
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d 6c 88 02 c0 00 	cmp    DWORD PTR ds:0xc002886c,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 40 88 02 c0       	mov    eax,0xc0028840
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 6c 88 02 c0       	mov    eax,ds:0xc002886c
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 44 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77bc]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 74 88 02 c0       	mov    eax,0xc0028874
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d 6c 8b 02 c0       	cmp    eax,0xc0028b6c
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 a8 8b 02 c0       	mov    eax,ds:0xc0028ba8
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 90 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b90
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 a4 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028ba4
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 b4 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bb4
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 e4 3f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc01c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 40 88 02 c0       	mov    eax,ds:0xc0028840
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 40 88 02 c0       	mov    ds:0xc0028840,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d 84 8b 02 c0    	mov    DWORD PTR ds:0xc0028b84,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d 88 8b 02 c0    	mov    DWORD PTR ds:0xc0028b88,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d 8c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b8c,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 94 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b94,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 00 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d00]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 ea a5 01 00       	jmp    c001c120 <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 00 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d00]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 1c a6 01 00       	jmp    c001c168 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 00 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d00]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 45 a6 01 00       	jmp    c001c1b0 <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 c2 11 02 00       	call   c0023010 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 00 41 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbf00]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 00 41 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbf00]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba 00 40 02 c0       	mov    edx,0xc0024000
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba 20 41 02 c0       	mov    edx,0xc0024120
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba 34 70 02 c0       	mov    edx,0xc0027034
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba 10 41 02 c0       	mov    edx,0xc0024110
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 e0 8b 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7420]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 c0 8b 02 c0    	mov    ax,ds:0xc0028bc0
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 c0 8b 02 c0    	mov    ds:0xc0028bc0,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 bf ff 01 00       	call   c0023010 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 32 41 02 c0       	mov    eax,0xc0024132
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 80 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdbf80]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 3b 41 02 c0       	mov    eax,0xc002413b
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 00 41 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbf00]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 8a e9 01 00       	call   c0023010 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba 10 41 02 c0       	mov    edx,0xc0024110
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba 00 40 02 c0       	mov    edx,0xc0024000
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba 10 40 02 c0       	mov    edx,0xc0024010
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 e0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7420]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 e0 8b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7420],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 51 d3 01 00       	call   c0023010 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 37 d3 01 00       	call   c0023010 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 57 40 02 c0       	mov    eax,0xc0024057
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 d0 be 01 00       	call   c0023010 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 e0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7420]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be 40 40 02 c0       	mov    esi,0xc0024040
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 44 b8 01 00       	call   c0023010 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba 20 41 02 c0       	mov    edx,0xc0024120
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba 20 40 02 c0       	mov    edx,0xc0024020
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba 30 40 02 c0       	mov    edx,0xc0024030
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba 42 41 02 c0       	mov    edx,0xc0024142
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba 4e 41 02 c0       	mov    edx,0xc002414e
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba 62 41 02 c0       	mov    edx,0xc0024162
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 04 18 00 00       	call   c0009de7 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 fc 17 00 00       	call   c0009df7 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 80 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024480
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 80 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024480
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 80 42 02 c0       	mov    eax,0xc0024280
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 80 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe80]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 5e 15 00 00       	jmp    c0009de7 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 79 15 00 00       	jmp    c0009e07 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000889b:	48                   	dec    eax
c000889c:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00088b2:	48                   	dec    eax
c00088b3:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00088c3:	ff 05 64 a1 02 c0    	inc    DWORD PTR ds:0xc002a164
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c00088d2:	48                   	dec    eax
c00088d3:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d 60 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a160,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c00088ed:	e8 92 06 01 00       	call   c0018f84 <schedule()>
c00088f2:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00088f7:	48                   	dec    eax
c00088f8:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 74 8d 02 c0       	mov    eax,ds:0xc0028d74
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 80 45 02 c0       	push   0xc0024580
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 48 8c 02 c0       	mov    eax,0xc0028c48
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 89 45 02 c0       	push   0xc0024589
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 10 30 02 c0       	mov    eax,0xc0023010
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 93 45 02 c0       	push   0xc0024593
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 44 2d 02 c0       	mov    eax,0xc0022d44
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 9c 45 02 c0       	push   0xc002459c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 10 31 02 c0       	mov    eax,0xc0023110
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 a6 45 02 c0       	push   0xc00245a6
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 90 2e 02 c0       	mov    eax,0xc0022e90
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 af 45 02 c0       	push   0xc00245af
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 4c 8c 02 c0       	mov    eax,0xc0028c4c
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 bc 45 02 c0       	push   0xc00245bc
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 4d 8c 02 c0       	mov    eax,0xc0028c4d
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 ef 5d 00 00       	call   c000e844 <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 c9 45 02 c0       	push   0xc00245c9
c0008a85:	e8 b7 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 e0 45 02 c0 	mov    DWORD PTR [esp],0xc00245e0
c0008a92:	e8 aa 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 44 13 00 00       	call   c0009de7 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0008ab2:	68 f9 45 02 c0       	push   0xc00245f9
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 a1 00 01 00       	call   c0018b60 <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 df 97 00 c0       	push   0xc00097df
c0008ace:	53                   	push   ebx
c0008acf:	e8 94 02 01 00       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 ac 97 01 c0       	push   0xc00197ac
c0008add:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0008ae3:	e8 80 02 01 00       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 48 a1 02 c0       	mov    ds:0xc002a148,eax
c0008af0:	68 ec 48 02 c0       	push   0xc00248ec
c0008af5:	c6 05 4d 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c4d,0x1
c0008afc:	e8 40 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b01:	e8 81 10 01 00       	call   c0019b87 <Vm::initialise8086()>
c0008b06:	e8 d5 49 00 00       	call   c000d4e0 <Fs::initVFS()>
c0008b0b:	c7 04 24 06 46 02 c0 	mov    DWORD PTR [esp],0xc0024606
c0008b12:	e8 2a 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b17:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 ec 48 02 c0       	push   0xc00248ec
c0008b36:	e8 06 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 8e e8 00 00       	call   c00173ce <Sys::loadSyscalls()>
c0008b40:	e8 db c5 00 00       	call   c0015120 <Krnl::loadSystemEnv()>
c0008b45:	e8 42 ca 00 00       	call   c001558c <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 20 46 02 c0       	push   0xc0024620
c0008b54:	68 29 46 02 c0       	push   0xc0024629
c0008b59:	e8 33 d6 00 00       	call   c0016191 <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 96 55 00 00       	call   c000e0fc <User::loadClockSettings(int)>
c0008b66:	c7 04 24 10 49 02 c0 	mov    DWORD PTR [esp],0xc0024910
c0008b6d:	e8 cf 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 81 5c 00 00       	call   c000e804 <Device::loadDriversForAll()>
c0008b83:	c7 04 24 31 46 02 c0 	mov    DWORD PTR [esp],0xc0024631
c0008b8a:	e8 b2 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 f4 c0 00 00       	call   c0014c88 <Krnl::startCPUs()>
c0008b94:	c7 04 24 4b 46 02 c0 	mov    DWORD PTR [esp],0xc002464b
c0008b9b:	e8 a1 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 5c 46 02 c0       	push   0xc002465c
c0008baf:	e8 ea f9 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 12 fc 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 b2 05 01 00       	call   c001917c <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 78 46 02 c0       	push   0xc0024678
c0008bdf:	50                   	push   eax
c0008be0:	e8 d9 5c 00 00       	call   c000e8be <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 61 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c61,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 5d 9f 01 00       	call   c0022cd6 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 9a aa 00 00       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 73 aa 00 00       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 51 aa 00 00       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 2f aa 00 00       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 60 8c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028c60,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 3d a9 00 00       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 18 a9 00 00       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 c7 9d 01 00       	call   c0022c90 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 14 9d 01 00       	call   c0022c00 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 34 a9 00 00       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 88 46 02 c0       	push   0xc0024688
c0008f45:	e8 ff 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 9b 46 02 c0       	push   0xc002469b
c0008f68:	e8 dc 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 ac 46 02 c0       	push   0xc00246ac
c0008f8b:	e8 b9 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 bd 46 02 c0       	push   0xc00246bd
c0008fae:	e8 96 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 ce 46 02 c0       	push   0xc00246ce
c0008fd1:	e8 73 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 df 46 02 c0       	push   0xc00246df
c0008ff4:	e8 50 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 85 46 02 c0       	mov    eax,0xc0024685
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 f0 46 02 c0       	push   0xc00246f0
c0009017:	e8 2d 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 01 47 02 c0       	push   0xc0024701
c000903a:	e8 0a 41 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 12 47 02 c0       	push   0xc0024712
c000905d:	e8 e7 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 23 47 02 c0       	push   0xc0024723
c0009080:	e8 c4 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 85 46 02 c0       	mov    eax,0xc0024685
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 34 47 02 c0       	push   0xc0024734
c00090a3:	e8 a1 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 85 46 02 c0       	mov    eax,0xc0024685
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 45 47 02 c0       	push   0xc0024745
c00090c6:	e8 7e 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 85 46 02 c0       	mov    eax,0xc0024685
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 56 47 02 c0       	push   0xc0024756
c00090e9:	e8 5b 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 67 47 02 c0       	push   0xc0024767
c000910c:	e8 38 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 78 47 02 c0       	push   0xc0024778
c000912f:	e8 15 40 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 89 47 02 c0       	push   0xc0024789
c0009152:	e8 f2 3f 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 85 46 02 c0       	mov    eax,0xc0024685
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 9a 47 02 c0       	push   0xc002479a
c0009175:	e8 cf 3f 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 85 46 02 c0       	mov    eax,0xc0024685
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 ab 47 02 c0       	push   0xc00247ab
c0009198:	e8 ac 3f 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 85 46 02 c0       	mov    eax,0xc0024685
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 bc 47 02 c0       	push   0xc00247bc
c00091b7:	e8 8d 3f 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 bb 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc00267bb
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 7c 3f 00 00       	jmp    c000d149 <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 81 46 02 c0       	mov    eax,0xc0024681
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 81 46 02 c0       	mov    eax,0xc0024681
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 81 46 02 c0       	mov    eax,0xc0024681
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 81 46 02 c0       	mov    eax,0xc0024681
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 81 46 02 c0       	mov    eax,0xc0024681
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 81 46 02 c0       	mov    eax,0xc0024681
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 81 46 02 c0       	mov    eax,0xc0024681
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 81 46 02 c0       	mov    eax,0xc0024681
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 81 46 02 c0       	mov    eax,0xc0024681
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 cd 47 02 c0       	push   0xc00247cd
c00092a0:	e8 84 bf 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 d3 47 02 c0       	push   0xc00247d3
c00092d8:	e8 4c bf 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 f7 9a 00 00       	jmp    c0012e1c <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 30 49 02 c0       	push   0xc0024930
c0009372:	e8 ca 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 60 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c60,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 20 80 02 c0 	sete   BYTE PTR ds:0xc0028020
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 d9 47 02 c0       	push   0xc00247d9
c0009391:	e8 b3 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 ef 47 02 c0       	push   0xc00247ef
c00093a2:	e8 a2 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 03 48 02 c0       	push   0xc0024803
c00093b0:	e8 94 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 16 48 02 c0       	push   0xc0024816
c00093c1:	e8 83 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 2d 48 02 c0       	push   0xc002482d
c00093cf:	e8 75 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 43 48 02 c0 	mov    DWORD PTR [esp],0xc0024843
c00093db:	e8 69 3d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 55 48 02 c0 	mov    DWORD PTR [esp],0xc0024855
c00093e7:	e8 55 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 ef 09 00 00       	call   c0009de7 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 d2 92 00 00       	call   c00126d4 <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 6f 48 02 c0 	mov    DWORD PTR [esp],0xc002486f
c000940f:	e8 2d 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 98 52 00 00       	call   c000e6ba <Device::addChild(Device*)>
c0009422:	c7 04 24 54 49 02 c0 	mov    DWORD PTR [esp],0xc0024954
c0009429:	e8 13 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 74 49 02 c0 	mov    DWORD PTR [esp],0xc0024974
c000943d:	e8 ff 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 89 48 02 c0 	mov    DWORD PTR [esp],0xc0024889
c0009451:	e8 eb 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 31 46 02 c0 	mov    DWORD PTR [esp],0xc0024631
c0009467:	e8 d5 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 6f 09 00 00       	call   c0009de7 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 84 a4 00 00       	call   c0013906 <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 29 52 00 00       	call   c000e6ba <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 68 c1 00 00       	call   c0015615 <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 94 49 02 c0       	push   0xc0024994
c00094b5:	e8 87 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094ba:	e8 97 57 00 00       	call   c000ec56 <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 e4 51 00 00       	call   c000e6ba <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 9a 48 02 c0       	push   0xc002489a
c00094f3:	e8 49 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 78 f9 00 00       	call   c0018e7c <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 b5 48 02 c0       	push   0xc00248b5
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 f6 3b 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 c6 48 02 c0       	push   0xc00248c6
c0009570:	e8 b4 bc 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 d3 48 02 c0       	push   0xc00248d3
c0009585:	e8 9f bc 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 dd 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248dd
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 88 bc 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 52 8c 02 c0       	mov    ds:0xc0028c52,eax
c000965d:	66 89 15 50 8c 02 c0 	mov    WORD PTR ds:0xc0028c50,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	57                   	push   edi
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	83 ec 40             	sub    esp,0x40
c0009670:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009674:	6a 00                	push   0x0
c0009676:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000967a:	56                   	push   esi
c000967b:	e8 4e ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009680:	6a 00                	push   0x0
c0009682:	56                   	push   esi
c0009683:	e8 62 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009688:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009690:	6a 00                	push   0x0
c0009692:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009696:	56                   	push   esi
c0009697:	e8 32 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969c:	68 ff ff ff 00       	push   0xffffff
c00096a1:	56                   	push   esi
c00096a2:	e8 43 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00096ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00096c2:	56                   	push   esi
c00096c3:	e8 06 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c8:	68 ff ff ff 00       	push   0xffffff
c00096cd:	56                   	push   esi
c00096ce:	e8 17 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00096d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00096db:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00096df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ec:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00096f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00096f9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00096fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009709:	89 fa                	mov    edx,edi
c000970b:	80 cc 60             	or     ah,0x60
c000970e:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000971c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009724:	80 cc 60             	or     ah,0x60
c0009727:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000972b:	89 f8                	mov    eax,edi
c000972d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009732:	09 d0                	or     eax,edx
c0009734:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009738:	89 c7                	mov    edi,eax
c000973a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000973e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000974a:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009754:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009759:	09 d0                	or     eax,edx
c000975b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000975f:	83 c4 0c             	add    esp,0xc
c0009762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000976a:	53                   	push   ebx
c000976b:	e8 ae fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009770:	83 c4 0c             	add    esp,0xc
c0009773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009777:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000977b:	53                   	push   ebx
c000977c:	e8 9d fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009781:	83 c4 0c             	add    esp,0xc
c0009784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000978c:	53                   	push   ebx
c000978d:	e8 8c fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009792:	83 c4 0c             	add    esp,0xc
c0009795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009799:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000979d:	53                   	push   ebx
c000979e:	e8 7b fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097a3:	83 c4 0c             	add    esp,0xc
c00097a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ae:	53                   	push   ebx
c00097af:	e8 6a fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097b4:	83 c4 0c             	add    esp,0xc
c00097b7:	57                   	push   edi
c00097b8:	56                   	push   esi
c00097b9:	53                   	push   ebx
c00097ba:	e8 5f fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097bf:	83 c4 0c             	add    esp,0xc
c00097c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097ca:	53                   	push   ebx
c00097cb:	e8 4e fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097d3:	e8 70 fe ff ff       	call   c0009648 <GDT::flush()>
c00097d8:	83 c4 50             	add    esp,0x50
c00097db:	5b                   	pop    ebx
c00097dc:	5e                   	pop    esi
c00097dd:	5f                   	pop    edi
c00097de:	c3                   	ret    

c00097df <idleFunction(void*)>:
c00097df:	53                   	push   ebx
c00097e0:	83 ec 08             	sub    esp,0x8
c00097e3:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00097e8:	48                   	dec    eax
c00097e9:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00097ee:	75 01                	jne    c00097f1 <idleFunction(void*)+0x12>
c00097f0:	fb                   	sti    
c00097f1:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00097f6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00097fc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009803:	74 3c                	je     c0009841 <idleFunction(void*)+0x62>
c0009805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000980c:	74 33                	je     c0009841 <idleFunction(void*)+0x62>
c000980e:	31 db                	xor    ebx,ebx
c0009810:	52                   	push   edx
c0009811:	52                   	push   edx
c0009812:	68 e1 00 00 00       	push   0xe1
c0009817:	50                   	push   eax
c0009818:	e8 61 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c000981d:	53                   	push   ebx
c000981e:	83 e0 02             	and    eax,0x2
c0009821:	50                   	push   eax
c0009822:	68 e1 00 00 00       	push   0xe1
c0009827:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c000982d:	e8 78 fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0009832:	83 c4 20             	add    esp,0x20
c0009835:	e8 7a 69 ff ff       	call   c00001b4 <doTPAUSE>
c000983a:	e8 53 9a 01 00       	call   c0023292 <idleCommon()>
c000983f:	eb f4                	jmp    c0009835 <idleFunction(void*)+0x56>
c0009841:	fb                   	sti    
c0009842:	f4                   	hlt    
c0009843:	e8 4a 9a 01 00       	call   c0023292 <idleCommon()>
c0009848:	eb f7                	jmp    c0009841 <idleFunction(void*)+0x62>
c000984a:	66 90                	xchg   ax,ax

c000984c <IDTEntry::IDTEntry(bool)>:
c000984c:	83 ec 04             	sub    esp,0x4
c000984f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009853:	88 04 24             	mov    BYTE PTR [esp],al
c0009856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000985a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009864:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000986f:	83 e2 f0             	and    edx,0xfffffff0
c0009872:	83 ca 0e             	or     edx,0xe
c0009875:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000987f:	83 e2 ef             	and    edx,0xffffffef
c0009882:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009885:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009889:	74 05                	je     c0009890 <IDTEntry::IDTEntry(bool)+0x44>
c000988b:	b2 03                	mov    dl,0x3
c000988d:	eb 05                	jmp    c0009894 <IDTEntry::IDTEntry(bool)+0x48>
c000988f:	90                   	nop
c0009890:	b2 00                	mov    dl,0x0
c0009892:	66 90                	xchg   ax,ax
c0009894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009898:	83 e2 03             	and    edx,0x3
c000989b:	88 d1                	mov    cl,dl
c000989d:	c1 e1 05             	shl    ecx,0x5
c00098a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098a3:	83 e2 9f             	and    edx,0xffffff9f
c00098a6:	09 ca                	or     edx,ecx
c00098a8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098af:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098b2:	83 ca 80             	or     edx,0xffffff80
c00098b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098b8:	90                   	nop
c00098b9:	83 c4 04             	add    esp,0x4
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <IDTEntry::setOffset(unsigned int)>:
c00098be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	66 89 02             	mov    WORD PTR [edx],ax
c00098c9:	c1 e8 10             	shr    eax,0x10
c00098cc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop
c00098d2:	66 90                	xchg   ax,ax

c00098d4 <IDT::IDT()>:
c00098d4:	90                   	nop
c00098d5:	c3                   	ret    

c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00098d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098da:	83 c0 30             	add    eax,0x30
c00098dd:	c3                   	ret    

c00098de <IDT::addEntry(IDTEntry, int)>:
c00098de:	53                   	push   ebx
c00098df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00098eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00098f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00098f6:	5b                   	pop    ebx
c00098f7:	c3                   	ret    

c00098f8 <IDT::addEntry(int, void (*)(), bool)>:
c00098f8:	53                   	push   ebx
c00098f9:	83 ec 10             	sub    esp,0x10
c00098fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009901:	50                   	push   eax
c0009902:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009906:	53                   	push   ebx
c0009907:	e8 40 ff ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c000990c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009910:	53                   	push   ebx
c0009911:	e8 a8 ff ff ff       	call   c00098be <IDTEntry::setOffset(unsigned int)>
c0009916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000991a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000991e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009926:	e8 b3 ff ff ff       	call   c00098de <IDT::addEntry(IDTEntry, int)>
c000992b:	83 c4 30             	add    esp,0x30
c000992e:	5b                   	pop    ebx
c000992f:	c3                   	ret    

c0009930 <IDT::flush()>:
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	66 c7 05 58 8c 02 c0 ff 07 	mov    WORD PTR ds:0xc0028c58,0x7ff
c000993d:	a3 5a 8c 02 c0       	mov    ds:0xc0028c5a,eax
c0009942:	0f 01 1d 58 8c 02 c0 	lidtd  ds:0xc0028c58
c0009949:	c3                   	ret    

c000994a <IDT::setup()>:
c000994a:	57                   	push   edi
c000994b:	56                   	push   esi
c000994c:	53                   	push   ebx
c000994d:	83 ec 10             	sub    esp,0x10
c0009950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009954:	6a 00                	push   0x0
c0009956:	68 b5 03 00 c0       	push   0xc00003b5
c000995b:	6a 00                	push   0x0
c000995d:	53                   	push   ebx
c000995e:	e8 95 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009963:	6a 00                	push   0x0
c0009965:	68 c5 03 00 c0       	push   0xc00003c5
c000996a:	6a 01                	push   0x1
c000996c:	53                   	push   ebx
c000996d:	e8 86 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009972:	83 c4 20             	add    esp,0x20
c0009975:	6a 00                	push   0x0
c0009977:	68 cf 03 00 c0       	push   0xc00003cf
c000997c:	6a 02                	push   0x2
c000997e:	53                   	push   ebx
c000997f:	e8 74 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009984:	6a 00                	push   0x0
c0009986:	68 d9 03 00 c0       	push   0xc00003d9
c000998b:	6a 03                	push   0x3
c000998d:	53                   	push   ebx
c000998e:	e8 65 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009993:	83 c4 20             	add    esp,0x20
c0009996:	6a 00                	push   0x0
c0009998:	68 e3 03 00 c0       	push   0xc00003e3
c000999d:	6a 04                	push   0x4
c000999f:	53                   	push   ebx
c00099a0:	e8 53 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099a5:	6a 00                	push   0x0
c00099a7:	68 ed 03 00 c0       	push   0xc00003ed
c00099ac:	6a 05                	push   0x5
c00099ae:	53                   	push   ebx
c00099af:	e8 44 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099b4:	83 c4 20             	add    esp,0x20
c00099b7:	6a 00                	push   0x0
c00099b9:	68 f7 03 00 c0       	push   0xc00003f7
c00099be:	6a 06                	push   0x6
c00099c0:	53                   	push   ebx
c00099c1:	e8 32 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099c6:	6a 00                	push   0x0
c00099c8:	68 01 04 00 c0       	push   0xc0000401
c00099cd:	6a 07                	push   0x7
c00099cf:	53                   	push   ebx
c00099d0:	e8 23 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099d5:	83 c4 20             	add    esp,0x20
c00099d8:	6a 00                	push   0x0
c00099da:	68 0b 04 00 c0       	push   0xc000040b
c00099df:	6a 08                	push   0x8
c00099e1:	53                   	push   ebx
c00099e2:	e8 11 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099e7:	6a 00                	push   0x0
c00099e9:	68 13 04 00 c0       	push   0xc0000413
c00099ee:	6a 09                	push   0x9
c00099f0:	53                   	push   ebx
c00099f1:	e8 02 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099f6:	83 c4 20             	add    esp,0x20
c00099f9:	6a 00                	push   0x0
c00099fb:	68 1d 04 00 c0       	push   0xc000041d
c0009a00:	6a 0a                	push   0xa
c0009a02:	53                   	push   ebx
c0009a03:	e8 f0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a08:	6a 00                	push   0x0
c0009a0a:	68 25 04 00 c0       	push   0xc0000425
c0009a0f:	6a 0b                	push   0xb
c0009a11:	53                   	push   ebx
c0009a12:	e8 e1 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a17:	83 c4 20             	add    esp,0x20
c0009a1a:	6a 00                	push   0x0
c0009a1c:	68 2d 04 00 c0       	push   0xc000042d
c0009a21:	6a 0c                	push   0xc
c0009a23:	53                   	push   ebx
c0009a24:	e8 cf fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a29:	6a 00                	push   0x0
c0009a2b:	68 35 04 00 c0       	push   0xc0000435
c0009a30:	6a 0d                	push   0xd
c0009a32:	53                   	push   ebx
c0009a33:	e8 c0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a38:	83 c4 20             	add    esp,0x20
c0009a3b:	6a 00                	push   0x0
c0009a3d:	68 3d 04 00 c0       	push   0xc000043d
c0009a42:	6a 0e                	push   0xe
c0009a44:	53                   	push   ebx
c0009a45:	e8 ae fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a4a:	6a 00                	push   0x0
c0009a4c:	68 45 04 00 c0       	push   0xc0000445
c0009a51:	6a 0f                	push   0xf
c0009a53:	53                   	push   ebx
c0009a54:	e8 9f fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a59:	83 c4 20             	add    esp,0x20
c0009a5c:	6a 00                	push   0x0
c0009a5e:	68 4f 04 00 c0       	push   0xc000044f
c0009a63:	6a 10                	push   0x10
c0009a65:	53                   	push   ebx
c0009a66:	e8 8d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a6b:	6a 00                	push   0x0
c0009a6d:	68 59 04 00 c0       	push   0xc0000459
c0009a72:	6a 11                	push   0x11
c0009a74:	53                   	push   ebx
c0009a75:	e8 7e fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a7a:	83 c4 20             	add    esp,0x20
c0009a7d:	6a 00                	push   0x0
c0009a7f:	68 63 04 00 c0       	push   0xc0000463
c0009a84:	6a 12                	push   0x12
c0009a86:	53                   	push   ebx
c0009a87:	e8 6c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a8c:	6a 01                	push   0x1
c0009a8e:	68 fd 04 00 c0       	push   0xc00004fd
c0009a93:	6a 60                	push   0x60
c0009a95:	53                   	push   ebx
c0009a96:	e8 5d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a9b:	83 c4 20             	add    esp,0x20
c0009a9e:	6a 00                	push   0x0
c0009aa0:	68 04 05 00 c0       	push   0xc0000504
c0009aa5:	6a 20                	push   0x20
c0009aa7:	53                   	push   ebx
c0009aa8:	e8 4b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aad:	6a 00                	push   0x0
c0009aaf:	68 ef 04 00 c0       	push   0xc00004ef
c0009ab4:	6a 21                	push   0x21
c0009ab6:	53                   	push   ebx
c0009ab7:	e8 3c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009abc:	83 c4 20             	add    esp,0x20
c0009abf:	6a 00                	push   0x0
c0009ac1:	68 f6 04 00 c0       	push   0xc00004f6
c0009ac6:	6a 22                	push   0x22
c0009ac8:	53                   	push   ebx
c0009ac9:	e8 2a fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ace:	6a 00                	push   0x0
c0009ad0:	68 6d 04 00 c0       	push   0xc000046d
c0009ad5:	6a 23                	push   0x23
c0009ad7:	53                   	push   ebx
c0009ad8:	e8 1b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009add:	83 c4 20             	add    esp,0x20
c0009ae0:	6a 00                	push   0x0
c0009ae2:	68 77 04 00 c0       	push   0xc0000477
c0009ae7:	6a 24                	push   0x24
c0009ae9:	53                   	push   ebx
c0009aea:	e8 09 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aef:	6a 00                	push   0x0
c0009af1:	68 81 04 00 c0       	push   0xc0000481
c0009af6:	6a 25                	push   0x25
c0009af8:	53                   	push   ebx
c0009af9:	e8 fa fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009afe:	83 c4 20             	add    esp,0x20
c0009b01:	6a 00                	push   0x0
c0009b03:	68 8b 04 00 c0       	push   0xc000048b
c0009b08:	6a 26                	push   0x26
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 e8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b10:	6a 00                	push   0x0
c0009b12:	68 95 04 00 c0       	push   0xc0000495
c0009b17:	6a 27                	push   0x27
c0009b19:	53                   	push   ebx
c0009b1a:	e8 d9 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b1f:	83 c4 20             	add    esp,0x20
c0009b22:	6a 00                	push   0x0
c0009b24:	68 9f 04 00 c0       	push   0xc000049f
c0009b29:	6a 28                	push   0x28
c0009b2b:	53                   	push   ebx
c0009b2c:	e8 c7 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b31:	6a 00                	push   0x0
c0009b33:	68 a9 04 00 c0       	push   0xc00004a9
c0009b38:	6a 29                	push   0x29
c0009b3a:	53                   	push   ebx
c0009b3b:	e8 b8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b40:	83 c4 20             	add    esp,0x20
c0009b43:	6a 00                	push   0x0
c0009b45:	68 b3 04 00 c0       	push   0xc00004b3
c0009b4a:	6a 2a                	push   0x2a
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 a6 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b52:	6a 00                	push   0x0
c0009b54:	68 bd 04 00 c0       	push   0xc00004bd
c0009b59:	6a 2b                	push   0x2b
c0009b5b:	53                   	push   ebx
c0009b5c:	e8 97 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b61:	83 c4 20             	add    esp,0x20
c0009b64:	6a 00                	push   0x0
c0009b66:	68 c7 04 00 c0       	push   0xc00004c7
c0009b6b:	6a 2c                	push   0x2c
c0009b6d:	53                   	push   ebx
c0009b6e:	e8 85 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b73:	6a 00                	push   0x0
c0009b75:	68 d1 04 00 c0       	push   0xc00004d1
c0009b7a:	6a 2d                	push   0x2d
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 76 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b82:	83 c4 20             	add    esp,0x20
c0009b85:	6a 00                	push   0x0
c0009b87:	68 db 04 00 c0       	push   0xc00004db
c0009b8c:	6a 2e                	push   0x2e
c0009b8e:	53                   	push   ebx
c0009b8f:	e8 64 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b94:	6a 00                	push   0x0
c0009b96:	68 e5 04 00 c0       	push   0xc00004e5
c0009b9b:	6a 2f                	push   0x2f
c0009b9d:	53                   	push   ebx
c0009b9e:	e8 55 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ba3:	83 c4 20             	add    esp,0x20
c0009ba6:	6a 00                	push   0x0
c0009ba8:	68 3b 05 00 c0       	push   0xc000053b
c0009bad:	6a 30                	push   0x30
c0009baf:	53                   	push   ebx
c0009bb0:	e8 43 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bb5:	6a 00                	push   0x0
c0009bb7:	68 45 05 00 c0       	push   0xc0000545
c0009bbc:	6a 31                	push   0x31
c0009bbe:	53                   	push   ebx
c0009bbf:	e8 34 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bc4:	83 c4 20             	add    esp,0x20
c0009bc7:	6a 00                	push   0x0
c0009bc9:	68 4f 05 00 c0       	push   0xc000054f
c0009bce:	6a 32                	push   0x32
c0009bd0:	53                   	push   ebx
c0009bd1:	e8 22 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bd6:	6a 00                	push   0x0
c0009bd8:	68 59 05 00 c0       	push   0xc0000559
c0009bdd:	6a 33                	push   0x33
c0009bdf:	53                   	push   ebx
c0009be0:	e8 13 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009be5:	83 c4 20             	add    esp,0x20
c0009be8:	6a 00                	push   0x0
c0009bea:	68 63 05 00 c0       	push   0xc0000563
c0009bef:	6a 34                	push   0x34
c0009bf1:	53                   	push   ebx
c0009bf2:	e8 01 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bf7:	6a 00                	push   0x0
c0009bf9:	68 6d 05 00 c0       	push   0xc000056d
c0009bfe:	6a 35                	push   0x35
c0009c00:	53                   	push   ebx
c0009c01:	e8 f2 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c06:	83 c4 20             	add    esp,0x20
c0009c09:	6a 00                	push   0x0
c0009c0b:	68 77 05 00 c0       	push   0xc0000577
c0009c10:	6a 36                	push   0x36
c0009c12:	53                   	push   ebx
c0009c13:	e8 e0 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c18:	6a 00                	push   0x0
c0009c1a:	68 81 05 00 c0       	push   0xc0000581
c0009c1f:	6a 37                	push   0x37
c0009c21:	53                   	push   ebx
c0009c22:	e8 d1 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c27:	83 c4 1c             	add    esp,0x1c
c0009c2a:	6a 03                	push   0x3
c0009c2c:	6a 02                	push   0x2
c0009c2e:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c0009c34:	e8 d5 28 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009c39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c40:	89 c6                	mov    esi,eax
c0009c42:	e8 a0 01 00 00       	call   c0009de7 <malloc>
c0009c47:	81 c6 00 20 00 00    	add    esi,0x2000
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	89 c7                	mov    edi,eax
c0009c52:	e8 8d 1a 00 00       	call   c000b6e4 <TSS::TSS()>
c0009c57:	83 c4 0c             	add    esp,0xc
c0009c5a:	68 0b 04 00 c0       	push   0xc000040b
c0009c5f:	56                   	push   esi
c0009c60:	57                   	push   edi
c0009c61:	e8 c2 1a 00 00       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c0009c66:	89 c6                	mov    esi,eax
c0009c68:	58                   	pop    eax
c0009c69:	5a                   	pop    edx
c0009c6a:	6a 00                	push   0x0
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 d6 fb ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c0009c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c7f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c86:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c90:	80 ce 05             	or     dh,0x5
c0009c93:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c9e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ca4:	e8 87 fc ff ff       	call   c0009930 <IDT::flush()>
c0009ca9:	83 c4 20             	add    esp,0x20
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	c3                   	ret    

c0009cb0 <sbrk>:
c0009cb0:	55                   	push   ebp
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	53                   	push   ebx
c0009cb4:	83 ec 24             	sub    esp,0x24
c0009cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cbb:	53                   	push   ebx
c0009cbc:	68 e4 49 02 c0       	push   0xc00249e4
c0009cc1:	e8 83 34 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	74 5f                	je     c0009d2c <sbrk+0x7c>
c0009ccd:	78 64                	js     c0009d33 <sbrk+0x83>
c0009ccf:	a1 bc 7e 02 c0       	mov    eax,ds:0xc0027ebc
c0009cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009cde:	89 dd                	mov    ebp,ebx
c0009ce0:	78 69                	js     c0009d4b <sbrk+0x9b>
c0009ce2:	c1 fd 0c             	sar    ebp,0xc
c0009ce5:	bb 00 00 00 00       	mov    ebx,0x0
c0009cea:	8b 35 74 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d74
c0009cf0:	8b 3d bc 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027ebc
c0009cf6:	e8 a3 07 00 00       	call   c000a49e <Phys::allocatePage()>
c0009cfb:	68 01 04 00 00       	push   0x401
c0009d00:	57                   	push   edi
c0009d01:	50                   	push   eax
c0009d02:	56                   	push   esi
c0009d03:	e8 04 27 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d08:	81 05 bc 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027ebc,0x1000
c0009d12:	43                   	inc    ebx
c0009d13:	83 c4 10             	add    esp,0x10
c0009d16:	39 dd                	cmp    ebp,ebx
c0009d18:	75 d0                	jne    c0009cea <sbrk+0x3a>
c0009d1a:	0f 20 d8             	mov    eax,cr3
c0009d1d:	0f 22 d8             	mov    cr3,eax
c0009d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d24:	83 c4 1c             	add    esp,0x1c
c0009d27:	5b                   	pop    ebx
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	5d                   	pop    ebp
c0009d2b:	c3                   	ret    
c0009d2c:	a1 bc 7e 02 c0       	mov    eax,ds:0xc0027ebc
c0009d31:	eb f1                	jmp    c0009d24 <sbrk+0x74>
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	53                   	push   ebx
c0009d37:	68 10 4a 02 c0       	push   0xc0024a10
c0009d3c:	e8 08 34 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009d49:	eb d9                	jmp    c0009d24 <sbrk+0x74>
c0009d4b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009d51:	eb 8f                	jmp    c0009ce2 <sbrk+0x32>

c0009d53 <mmap>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	68 02 4a 02 c0       	push   0xc0024a02
c0009d5b:	e8 c9 b4 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0009d60:	b8 00 00 00 00       	mov    eax,0x0
c0009d65:	83 c4 1c             	add    esp,0x1c
c0009d68:	c3                   	ret    

c0009d69 <munmap>:
c0009d69:	83 ec 18             	sub    esp,0x18
c0009d6c:	68 07 4a 02 c0       	push   0xc0024a07
c0009d71:	e8 b3 b4 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0009d76:	b8 00 00 00 00       	mov    eax,0x0
c0009d7b:	83 c4 1c             	add    esp,0x1c
c0009d7e:	c3                   	ret    

c0009d7f <liballoc_lock()>:
c0009d7f:	fa                   	cli    
c0009d80:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0009d86:	b8 00 00 00 00       	mov    eax,0x0
c0009d8b:	c3                   	ret    

c0009d8c <liballoc_unlock()>:
c0009d8c:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0009d91:	48                   	dec    eax
c0009d92:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0009d97:	75 01                	jne    c0009d9a <liballoc_unlock()+0xe>
c0009d99:	fb                   	sti    
c0009d9a:	b8 00 00 00 00       	mov    eax,0x0
c0009d9f:	c3                   	ret    

c0009da0 <liballoc_alloc(int)>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	6a 01                	push   0x1
c0009da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009da9:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c0009daf:	e8 5a 27 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	c3                   	ret    

c0009db8 <liballoc_free(void*, int)>:
c0009db8:	83 ec 14             	sub    esp,0x14
c0009dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dbf:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c0009dc5:	e8 ee 23 00 00       	call   c000c1b8 <VAS::freeAllocatedPages(unsigned long)>
c0009dca:	b8 00 00 00 00       	mov    eax,0x0
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	c3                   	ret    

c0009dd3 <realloc>:
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 8d 77 ff ff       	call   c0001570 <dlrealloc>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	c3                   	ret    

c0009de7 <malloc>:
c0009de7:	83 ec 18             	sub    esp,0x18
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 40 72 ff ff       	call   c0001033 <dlmalloc>
c0009df3:	83 c4 1c             	add    esp,0x1c
c0009df6:	c3                   	ret    

c0009df7 <free>:
c0009df7:	83 ec 18             	sub    esp,0x18
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 d5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e03:	83 c4 1c             	add    esp,0x1c
c0009e06:	c3                   	ret    

c0009e07 <rfree>:
c0009e07:	83 ec 18             	sub    esp,0x18
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 c5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e13:	83 c4 1c             	add    esp,0x1c
c0009e16:	c3                   	ret    

c0009e17 <calloc>:
c0009e17:	56                   	push   esi
c0009e18:	53                   	push   ebx
c0009e19:	83 ec 10             	sub    esp,0x10
c0009e1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009e20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009e25:	53                   	push   ebx
c0009e26:	e8 bc ff ff ff       	call   c0009de7 <malloc>
c0009e2b:	89 c6                	mov    esi,eax
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	53                   	push   ebx
c0009e31:	6a 00                	push   0x0
c0009e33:	50                   	push   eax
c0009e34:	e8 5b 68 ff ff       	call   c0000694 <memset>
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	83 c4 14             	add    esp,0x14
c0009e3e:	5b                   	pop    ebx
c0009e3f:	5e                   	pop    esi
c0009e40:	c3                   	ret    

c0009e41 <Krnl::setBootMessage(char const*)>:
c0009e41:	57                   	push   edi
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009e4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009e51:	68 9e 00 00 00       	push   0x9e
c0009e56:	6a 00                	push   0x0
c0009e58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009e5c:	56                   	push   esi
c0009e5d:	e8 32 68 ff ff       	call   c0000694 <memset>
c0009e62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009e65:	e8 46 68 ff ff       	call   c00006b0 <strlen>
c0009e6a:	ba 50 00 00 00       	mov    edx,0x50
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	29 c2                	sub    edx,eax
c0009e74:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e78:	d1 ea                	shr    edx,1
c0009e7a:	84 c0                	test   al,al
c0009e7c:	74 19                	je     c0009e97 <Krnl::setBootMessage(char const*)+0x56>
c0009e7e:	01 d2                	add    edx,edx
c0009e80:	43                   	inc    ebx
c0009e81:	01 f2                	add    edx,esi
c0009e83:	80 cc 0f             	or     ah,0xf
c0009e86:	83 c2 02             	add    edx,0x2
c0009e89:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e8d:	43                   	inc    ebx
c0009e8e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e93:	84 c0                	test   al,al
c0009e95:	75 ec                	jne    c0009e83 <Krnl::setBootMessage(char const*)+0x42>
c0009e97:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e9c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ea3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ea9:	5b                   	pop    ebx
c0009eaa:	5e                   	pop    esi
c0009eab:	5f                   	pop    edi
c0009eac:	c3                   	ret    

c0009ead <kernel_main>:
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 20             	sub    esp,0x20
c0009eb3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009eb8:	a3 60 8c 02 c0       	mov    ds:0xc0028c60,eax
c0009ebd:	f6 c4 08             	test   ah,0x8
c0009ec0:	0f 85 7a 03 00 00    	jne    c000a240 <kernel_main+0x393>
c0009ec6:	31 f6                	xor    esi,esi
c0009ec8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ecd:	89 f0                	mov    eax,esi
c0009ecf:	89 fa                	mov    edx,edi
c0009ed1:	ee                   	out    dx,al
c0009ed2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ed7:	b0 80                	mov    al,0x80
c0009ed9:	89 da                	mov    edx,ebx
c0009edb:	ee                   	out    dx,al
c0009edc:	b1 03                	mov    cl,0x3
c0009ede:	ba f8 03 00 00       	mov    edx,0x3f8
c0009ee3:	88 c8                	mov    al,cl
c0009ee5:	ee                   	out    dx,al
c0009ee6:	89 f0                	mov    eax,esi
c0009ee8:	89 fa                	mov    edx,edi
c0009eea:	ee                   	out    dx,al
c0009eeb:	88 c8                	mov    al,cl
c0009eed:	89 da                	mov    edx,ebx
c0009eef:	ee                   	out    dx,al
c0009ef0:	b0 c7                	mov    al,0xc7
c0009ef2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ef7:	ee                   	out    dx,al
c0009ef8:	b0 0b                	mov    al,0xb
c0009efa:	ba fc 03 00 00       	mov    edx,0x3fc
c0009eff:	ee                   	out    dx,al
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 40 4a 02 c0       	push   0xc0024a40
c0009f08:	e8 3c 32 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0009f17:	0f 85 eb 02 00 00    	jne    c000a208 <kernel_main+0x35b>
c0009f1d:	e8 c6 0c 00 00       	call   c000abe8 <installVgaTextImplementation()>
c0009f22:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0009f29:	0f 85 94 02 00 00    	jne    c000a1c3 <kernel_main+0x316>
c0009f2f:	0f b6 05 c0 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ec0
c0009f36:	84 c0                	test   al,al
c0009f38:	74 7b                	je     c0009fb5 <kernel_main+0x108>
c0009f3a:	31 db                	xor    ebx,ebx
c0009f3c:	bf 0a 00 00 00       	mov    edi,0xa
c0009f41:	be 05 00 00 00       	mov    esi,0x5
c0009f46:	31 c9                	xor    ecx,ecx
c0009f48:	eb 2a                	jmp    c0009f74 <kernel_main+0xc7>
c0009f4a:	3c 0d                	cmp    al,0xd
c0009f4c:	74 1a                	je     c0009f68 <kernel_main+0xbb>
c0009f4e:	3c 0a                	cmp    al,0xa
c0009f50:	74 40                	je     c0009f92 <kernel_main+0xe5>
c0009f52:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009f55:	80 cc 0e             	or     ah,0xe
c0009f58:	c1 e2 04             	shl    edx,0x4
c0009f5b:	01 ca                	add    edx,ecx
c0009f5d:	41                   	inc    ecx
c0009f5e:	01 fa                	add    edx,edi
c0009f60:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009f68:	43                   	inc    ebx
c0009f69:	0f b6 83 c0 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8140]
c0009f70:	84 c0                	test   al,al
c0009f72:	74 32                	je     c0009fa6 <kernel_main+0xf9>
c0009f74:	80 b9 f6 7e 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd810a],0xdb
c0009f7b:	75 cd                	jne    c0009f4a <kernel_main+0x9d>
c0009f7d:	0f b6 91 f5 7e 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd810b]
c0009f84:	83 e2 fe             	and    edx,0xfffffffe
c0009f87:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f8d:	75 bb                	jne    c0009f4a <kernel_main+0x9d>
c0009f8f:	47                   	inc    edi
c0009f90:	eb b8                	jmp    c0009f4a <kernel_main+0x9d>
c0009f92:	43                   	inc    ebx
c0009f93:	46                   	inc    esi
c0009f94:	31 c9                	xor    ecx,ecx
c0009f96:	0f b6 83 c0 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8140]
c0009f9d:	bf 0a 00 00 00       	mov    edi,0xa
c0009fa2:	84 c0                	test   al,al
c0009fa4:	75 ce                	jne    c0009f74 <kernel_main+0xc7>
c0009fa6:	8b 15 60 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c60
c0009fac:	80 e6 08             	and    dh,0x8
c0009faf:	0f 85 bf 00 00 00    	jne    c000a074 <kernel_main+0x1c7>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	68 dc 4a 02 c0       	push   0xc0024adc
c0009fbd:	e8 7f fe ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009fc2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009fc7:	05 ff 0f 00 00       	add    eax,0xfff
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 44 06 00 00       	call   c000a61d <Phys::physicalMemorySetup(unsigned int)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0009fe3:	0f 85 a2 01 00 00    	jne    c000a18b <kernel_main+0x2de>
c0009fe9:	e8 72 1f 00 00       	call   c000bf60 <Virt::virtualMemorySetup()>
c0009fee:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0009ff5:	0f 85 58 01 00 00    	jne    c000a153 <kernel_main+0x2a6>
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a002:	56                   	push   esi
c000a003:	e8 2e 2b 00 00       	call   c000cb36 <VAS::VAS()>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 35 74 8d 02 c0    	mov    DWORD PTR ds:0xc0028d74,esi
c000a011:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c000a018:	0f 85 fd 00 00 00    	jne    c000a11b <kernel_main+0x26e>
c000a01e:	e8 fd 5f ff ff       	call   c0000020 <callGlobalConstructors>
c000a023:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c000a02a:	0f 85 b3 00 00 00    	jne    c000a0e3 <kernel_main+0x236>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	68 ec 01 00 00       	push   0x1ec
c000a038:	e8 aa fd ff ff       	call   c0009de7 <malloc>
c000a03d:	89 c3                	mov    ebx,eax
c000a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a042:	e8 89 eb ff ff       	call   c0008bd0 <Computer::Computer()>
c000a047:	83 c4 10             	add    esp,0x10
c000a04a:	89 1d 48 8c 02 c0    	mov    DWORD PTR ds:0xc0028c48,ebx
c000a050:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c000a057:	75 53                	jne    c000a0ac <kernel_main+0x1ff>
c000a059:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a05b:	6a 00                	push   0x0
c000a05d:	6a 00                	push   0x0
c000a05f:	6a 00                	push   0x0
c000a061:	53                   	push   ebx
c000a062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a065:	89 34 24             	mov    DWORD PTR [esp],esi
c000a068:	e8 23 22 00 00       	call   c000c290 <VAS::~VAS()>
c000a06d:	83 c4 30             	add    esp,0x30
c000a070:	5b                   	pop    ebx
c000a071:	5e                   	pop    esi
c000a072:	5f                   	pop    edi
c000a073:	c3                   	ret    
c000a074:	83 ec 0c             	sub    esp,0xc
c000a077:	68 8b 4a 02 c0       	push   0xc0024a8b
c000a07c:	e8 c0 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a08b:	0f 85 24 ff ff ff    	jne    c0009fb5 <kernel_main+0x108>
c000a091:	eb 04                	jmp    c000a097 <kernel_main+0x1ea>
c000a093:	3c 1c                	cmp    al,0x1c
c000a095:	74 06                	je     c000a09d <kernel_main+0x1f0>
c000a097:	e4 60                	in     al,0x60
c000a099:	3c 5a                	cmp    al,0x5a
c000a09b:	75 f6                	jne    c000a093 <kernel_main+0x1e6>
c000a09d:	e4 60                	in     al,0x60
c000a09f:	3c 5a                	cmp    al,0x5a
c000a0a1:	74 fa                	je     c000a09d <kernel_main+0x1f0>
c000a0a3:	3c 1c                	cmp    al,0x1c
c000a0a5:	74 f6                	je     c000a09d <kernel_main+0x1f0>
c000a0a7:	e9 09 ff ff ff       	jmp    c0009fb5 <kernel_main+0x108>
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	68 ca 4a 02 c0       	push   0xc0024aca
c000a0b4:	e8 88 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a0c3:	74 0c                	je     c000a0d1 <kernel_main+0x224>
c000a0c5:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c000a0cb:	eb 8c                	jmp    c000a059 <kernel_main+0x1ac>
c000a0cd:	3c 1c                	cmp    al,0x1c
c000a0cf:	74 06                	je     c000a0d7 <kernel_main+0x22a>
c000a0d1:	e4 60                	in     al,0x60
c000a0d3:	3c 5a                	cmp    al,0x5a
c000a0d5:	75 f6                	jne    c000a0cd <kernel_main+0x220>
c000a0d7:	e4 60                	in     al,0x60
c000a0d9:	3c 5a                	cmp    al,0x5a
c000a0db:	74 fa                	je     c000a0d7 <kernel_main+0x22a>
c000a0dd:	3c 1c                	cmp    al,0x1c
c000a0df:	74 f6                	je     c000a0d7 <kernel_main+0x22a>
c000a0e1:	eb e2                	jmp    c000a0c5 <kernel_main+0x218>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 b7 4a 02 c0       	push   0xc0024ab7
c000a0eb:	e8 51 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a0fa:	0f 85 30 ff ff ff    	jne    c000a030 <kernel_main+0x183>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x259>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x25f>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x255>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x25f>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x25f>
c000a116:	e9 15 ff ff ff       	jmp    c000a030 <kernel_main+0x183>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 ad 4a 02 c0       	push   0xc0024aad
c000a123:	e8 19 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a132:	0f 85 e6 fe ff ff    	jne    c000a01e <kernel_main+0x171>
c000a138:	eb 04                	jmp    c000a13e <kernel_main+0x291>
c000a13a:	3c 1c                	cmp    al,0x1c
c000a13c:	74 06                	je     c000a144 <kernel_main+0x297>
c000a13e:	e4 60                	in     al,0x60
c000a140:	3c 5a                	cmp    al,0x5a
c000a142:	75 f6                	jne    c000a13a <kernel_main+0x28d>
c000a144:	e4 60                	in     al,0x60
c000a146:	3c 5a                	cmp    al,0x5a
c000a148:	74 fa                	je     c000a144 <kernel_main+0x297>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 f6                	je     c000a144 <kernel_main+0x297>
c000a14e:	e9 cb fe ff ff       	jmp    c000a01e <kernel_main+0x171>
c000a153:	83 ec 0c             	sub    esp,0xc
c000a156:	68 a2 4a 02 c0       	push   0xc0024aa2
c000a15b:	e8 e1 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a16a:	0f 85 8b fe ff ff    	jne    c0009ffb <kernel_main+0x14e>
c000a170:	eb 04                	jmp    c000a176 <kernel_main+0x2c9>
c000a172:	3c 1c                	cmp    al,0x1c
c000a174:	74 06                	je     c000a17c <kernel_main+0x2cf>
c000a176:	e4 60                	in     al,0x60
c000a178:	3c 5a                	cmp    al,0x5a
c000a17a:	75 f6                	jne    c000a172 <kernel_main+0x2c5>
c000a17c:	e4 60                	in     al,0x60
c000a17e:	3c 5a                	cmp    al,0x5a
c000a180:	74 fa                	je     c000a17c <kernel_main+0x2cf>
c000a182:	3c 1c                	cmp    al,0x1c
c000a184:	74 f6                	je     c000a17c <kernel_main+0x2cf>
c000a186:	e9 70 fe ff ff       	jmp    c0009ffb <kernel_main+0x14e>
c000a18b:	83 ec 0c             	sub    esp,0xc
c000a18e:	68 97 4a 02 c0       	push   0xc0024a97
c000a193:	e8 a9 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a1a2:	0f 85 41 fe ff ff    	jne    c0009fe9 <kernel_main+0x13c>
c000a1a8:	eb 04                	jmp    c000a1ae <kernel_main+0x301>
c000a1aa:	3c 1c                	cmp    al,0x1c
c000a1ac:	74 06                	je     c000a1b4 <kernel_main+0x307>
c000a1ae:	e4 60                	in     al,0x60
c000a1b0:	3c 5a                	cmp    al,0x5a
c000a1b2:	75 f6                	jne    c000a1aa <kernel_main+0x2fd>
c000a1b4:	e4 60                	in     al,0x60
c000a1b6:	3c 5a                	cmp    al,0x5a
c000a1b8:	74 fa                	je     c000a1b4 <kernel_main+0x307>
c000a1ba:	3c 1c                	cmp    al,0x1c
c000a1bc:	74 f6                	je     c000a1b4 <kernel_main+0x307>
c000a1be:	e9 26 fe ff ff       	jmp    c0009fe9 <kernel_main+0x13c>
c000a1c3:	83 ec 0c             	sub    esp,0xc
c000a1c6:	68 79 4a 02 c0       	push   0xc0024a79
c000a1cb:	e8 71 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a1d0:	8b 15 60 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c60
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	f6 c2 80             	test   dl,0x80
c000a1dc:	74 18                	je     c000a1f6 <kernel_main+0x349>
c000a1de:	0f b6 05 c0 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ec0
c000a1e5:	84 c0                	test   al,al
c000a1e7:	0f 85 4d fd ff ff    	jne    c0009f3a <kernel_main+0x8d>
c000a1ed:	e9 ba fd ff ff       	jmp    c0009fac <kernel_main+0xff>
c000a1f2:	3c 1c                	cmp    al,0x1c
c000a1f4:	74 06                	je     c000a1fc <kernel_main+0x34f>
c000a1f6:	e4 60                	in     al,0x60
c000a1f8:	3c 5a                	cmp    al,0x5a
c000a1fa:	75 f6                	jne    c000a1f2 <kernel_main+0x345>
c000a1fc:	e4 60                	in     al,0x60
c000a1fe:	3c 5a                	cmp    al,0x5a
c000a200:	74 fa                	je     c000a1fc <kernel_main+0x34f>
c000a202:	3c 1c                	cmp    al,0x1c
c000a204:	74 f6                	je     c000a1fc <kernel_main+0x34f>
c000a206:	eb d6                	jmp    c000a1de <kernel_main+0x331>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	68 6a 4a 02 c0       	push   0xc0024a6a
c000a210:	e8 2c fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a21f:	0f 85 f8 fc ff ff    	jne    c0009f1d <kernel_main+0x70>
c000a225:	eb 04                	jmp    c000a22b <kernel_main+0x37e>
c000a227:	3c 1c                	cmp    al,0x1c
c000a229:	74 06                	je     c000a231 <kernel_main+0x384>
c000a22b:	e4 60                	in     al,0x60
c000a22d:	3c 5a                	cmp    al,0x5a
c000a22f:	75 f6                	jne    c000a227 <kernel_main+0x37a>
c000a231:	e4 60                	in     al,0x60
c000a233:	3c 5a                	cmp    al,0x5a
c000a235:	74 fa                	je     c000a231 <kernel_main+0x384>
c000a237:	3c 1c                	cmp    al,0x1c
c000a239:	74 f6                	je     c000a231 <kernel_main+0x384>
c000a23b:	e9 dd fc ff ff       	jmp    c0009f1d <kernel_main+0x70>
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	68 57 4a 02 c0       	push   0xc0024a57
c000a248:	e8 f4 fb ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c000a257:	0f 85 69 fc ff ff    	jne    c0009ec6 <kernel_main+0x19>
c000a25d:	eb 04                	jmp    c000a263 <kernel_main+0x3b6>
c000a25f:	3c 1c                	cmp    al,0x1c
c000a261:	74 06                	je     c000a269 <kernel_main+0x3bc>
c000a263:	e4 60                	in     al,0x60
c000a265:	3c 5a                	cmp    al,0x5a
c000a267:	75 f6                	jne    c000a25f <kernel_main+0x3b2>
c000a269:	e4 60                	in     al,0x60
c000a26b:	3c 5a                	cmp    al,0x5a
c000a26d:	74 fa                	je     c000a269 <kernel_main+0x3bc>
c000a26f:	3c 1c                	cmp    al,0x1c
c000a271:	74 f6                	je     c000a269 <kernel_main+0x3bc>
c000a273:	e9 4e fc ff ff       	jmp    c0009ec6 <kernel_main+0x19>

c000a278 <Phys::allocateDMA(unsigned long)>:
c000a278:	55                   	push   ebp
c000a279:	31 ed                	xor    ebp,ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	31 db                	xor    ebx,ebx
c000a280:	83 ec 28             	sub    esp,0x28
c000a283:	68 fb 4a 02 c0       	push   0xc0024afb
c000a288:	e8 bc 2e 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a28d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a2a2:	c1 ef 0c             	shr    edi,0xc
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	eb 19                	jmp    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2a9:	85 c0                	test   eax,eax
c000a2ab:	75 06                	jne    c000a2b3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a2ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2b1:	89 dd                	mov    ebp,ebx
c000a2b3:	8d 70 01             	lea    esi,[eax+0x1]
c000a2b6:	39 f7                	cmp    edi,esi
c000a2b8:	74 3f                	je     c000a2f9 <Phys::allocateDMA(unsigned long)+0x81>
c000a2ba:	89 f0                	mov    eax,esi
c000a2bc:	43                   	inc    ebx
c000a2bd:	83 fb 0f             	cmp    ebx,0xf
c000a2c0:	7f 11                	jg     c000a2d3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a2c2:	80 bb 7c 8c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7384],0x0
c000a2c9:	74 de                	je     c000a2a9 <Phys::allocateDMA(unsigned long)+0x31>
c000a2cb:	31 c0                	xor    eax,eax
c000a2cd:	43                   	inc    ebx
c000a2ce:	83 fb 0f             	cmp    ebx,0xf
c000a2d1:	7e ef                	jle    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2d3:	83 ec 0c             	sub    esp,0xc
c000a2d6:	68 2b 4b 02 c0       	push   0xc0024b2b
c000a2db:	e8 69 2e 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a2e0:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c000a2e7:	e8 3d af 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	31 c0                	xor    eax,eax
c000a2f1:	83 c4 1c             	add    esp,0x1c
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	5d                   	pop    ebp
c000a2f8:	c3                   	ret    
c000a2f9:	89 e9                	mov    ecx,ebp
c000a2fb:	c1 f9 04             	sar    ecx,0x4
c000a2fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a302:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a306:	89 ca                	mov    edx,ecx
c000a308:	4a                   	dec    edx
c000a309:	79 03                	jns    c000a30e <Phys::allocateDMA(unsigned long)+0x96>
c000a30b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a30e:	c1 fa 04             	sar    edx,0x4
c000a311:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a315:	74 08                	je     c000a31f <Phys::allocateDMA(unsigned long)+0xa7>
c000a317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a31b:	31 c0                	xor    eax,eax
c000a31d:	eb ae                	jmp    c000a2cd <Phys::allocateDMA(unsigned long)+0x55>
c000a31f:	85 f6                	test   esi,esi
c000a321:	74 15                	je     c000a338 <Phys::allocateDMA(unsigned long)+0xc0>
c000a323:	8d 95 7c 8c 02 c0    	lea    edx,[ebp-0x3ffd7384]
c000a329:	8d 84 05 7d 8c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7383]
c000a330:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a333:	42                   	inc    edx
c000a334:	39 d0                	cmp    eax,edx
c000a336:	75 f8                	jne    c000a330 <Phys::allocateDMA(unsigned long)+0xb8>
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	01 3d 74 8c 02 c0    	add    DWORD PTR ds:0xc0028c74,edi
c000a341:	68 14 4b 02 c0       	push   0xc0024b14
c000a346:	e8 fe 2d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a352:	85 c0                	test   eax,eax
c000a354:	74 23                	je     c000a379 <Phys::allocateDMA(unsigned long)+0x101>
c000a356:	83 ec 0c             	sub    esp,0xc
c000a359:	68 0c 7b 02 c0       	push   0xc0027b0c
c000a35e:	e8 e6 2d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a363:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c000a36a:	e8 ba ae 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	89 f0                	mov    eax,esi
c000a374:	e9 43 ff ff ff       	jmp    c000a2bc <Phys::allocateDMA(unsigned long)+0x44>
c000a379:	c1 e5 0c             	shl    ebp,0xc
c000a37c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a382:	e9 6a ff ff ff       	jmp    c000a2f1 <Phys::allocateDMA(unsigned long)+0x79>

c000a387 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a387:	83 ec 18             	sub    esp,0x18
c000a38a:	68 2f 4b 02 c0       	push   0xc0024b2f
c000a38f:	e8 b5 2d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a398:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3a2:	c1 ea 0c             	shr    edx,0xc
c000a3a5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a3aa:	29 15 74 8c 02 c0    	sub    DWORD PTR ds:0xc0028c74,edx
c000a3b0:	c1 e8 0c             	shr    eax,0xc
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 d2                	test   edx,edx
c000a3b8:	74 0f                	je     c000a3c9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a3ba:	05 7c 8c 02 c0       	add    eax,0xc0028c7c
c000a3bf:	01 c2                	add    edx,eax
c000a3c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a3c4:	40                   	inc    eax
c000a3c5:	39 d0                	cmp    eax,edx
c000a3c7:	75 f8                	jne    c000a3c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a3c9:	83 c4 0c             	add    esp,0xc
c000a3cc:	c3                   	ret    

c000a3cd <Phys::setPageState(unsigned long, bool)>:
c000a3cd:	56                   	push   esi
c000a3ce:	ba 01 00 00 00       	mov    edx,0x1
c000a3d3:	53                   	push   ebx
c000a3d4:	8b 35 04 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028004
c000a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e2:	89 c8                	mov    eax,ecx
c000a3e4:	83 e1 07             	and    ecx,0x7
c000a3e7:	c1 e8 03             	shr    eax,0x3
c000a3ea:	d3 e3                	shl    ebx,cl
c000a3ec:	01 c6                	add    esi,eax
c000a3ee:	d3 e2                	shl    edx,cl
c000a3f0:	f7 d2                	not    edx
c000a3f2:	20 16                	and    BYTE PTR [esi],dl
c000a3f4:	03 05 04 80 02 c0    	add    eax,DWORD PTR ds:0xc0028004
c000a3fa:	08 18                	or     BYTE PTR [eax],bl
c000a3fc:	5b                   	pop    ebx
c000a3fd:	5e                   	pop    esi
c000a3fe:	c3                   	ret    

c000a3ff <Phys::getPageState(unsigned long)>:
c000a3ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a403:	8b 15 04 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028004
c000a409:	89 c8                	mov    eax,ecx
c000a40b:	83 e1 07             	and    ecx,0x7
c000a40e:	c1 e8 03             	shr    eax,0x3
c000a411:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a415:	d3 f8                	sar    eax,cl
c000a417:	83 e0 01             	and    eax,0x1
c000a41a:	c3                   	ret    

c000a41b <Phys::freePage(unsigned long)>:
c000a41b:	53                   	push   ebx
c000a41c:	83 ec 10             	sub    esp,0x10
c000a41f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a423:	53                   	push   ebx
c000a424:	68 45 4b 02 c0       	push   0xc0024b45
c000a429:	e8 1b 2d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a42e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	3d ff ff 00 00       	cmp    eax,0xffff
c000a43c:	76 3d                	jbe    c000a47b <Phys::freePage(unsigned long)+0x60>
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	c1 eb 0c             	shr    ebx,0xc
c000a444:	53                   	push   ebx
c000a445:	e8 b5 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	84 c0                	test   al,al
c000a44f:	74 19                	je     c000a46a <Phys::freePage(unsigned long)+0x4f>
c000a451:	83 ec 08             	sub    esp,0x8
c000a454:	ff 0d 74 8c 02 c0    	dec    DWORD PTR ds:0xc0028c74
c000a45a:	6a 00                	push   0x0
c000a45c:	53                   	push   ebx
c000a45d:	e8 6b ff ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	83 c4 08             	add    esp,0x8
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    
c000a46a:	c7 44 24 10 6f 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b6f
c000a472:	83 c4 08             	add    esp,0x8
c000a475:	5b                   	pop    ebx
c000a476:	e9 ae ad 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c000a47b:	83 ec 08             	sub    esp,0x8
c000a47e:	53                   	push   ebx
c000a47f:	68 58 4b 02 c0       	push   0xc0024b58
c000a484:	e8 c0 2c 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a489:	58                   	pop    eax
c000a48a:	5a                   	pop    edx
c000a48b:	68 00 10 00 00       	push   0x1000
c000a490:	53                   	push   ebx
c000a491:	e8 f1 fe ff ff       	call   c000a387 <Phys::freeDMA(unsigned long, unsigned long)>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	83 c4 08             	add    esp,0x8
c000a49c:	5b                   	pop    ebx
c000a49d:	c3                   	ret    

c000a49e <Phys::allocatePage()>:
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 14             	sub    esp,0x14
c000a4a3:	8b 35 68 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c68
c000a4a9:	89 f3                	mov    ebx,esi
c000a4ab:	eb 0a                	jmp    c000a4b7 <Phys::allocatePage()+0x19>
c000a4ad:	89 1d 68 8c 02 c0    	mov    DWORD PTR ds:0xc0028c68,ebx
c000a4b3:	39 de                	cmp    esi,ebx
c000a4b5:	74 24                	je     c000a4db <Phys::allocatePage()+0x3d>
c000a4b7:	53                   	push   ebx
c000a4b8:	e8 42 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a4bd:	5a                   	pop    edx
c000a4be:	84 c0                	test   al,al
c000a4c0:	74 69                	je     c000a52b <Phys::allocatePage()+0x8d>
c000a4c2:	43                   	inc    ebx
c000a4c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a4c9:	75 e2                	jne    c000a4ad <Phys::allocatePage()+0xf>
c000a4cb:	31 db                	xor    ebx,ebx
c000a4cd:	c7 05 68 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c68,0x0
c000a4d7:	39 de                	cmp    esi,ebx
c000a4d9:	75 dc                	jne    c000a4b7 <Phys::allocatePage()+0x19>
c000a4db:	83 ec 0c             	sub    esp,0xc
c000a4de:	80 35 8c 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028c8c,0x1
c000a4e5:	68 10 4c 02 c0       	push   0xc0024c10
c000a4ea:	e8 5a 2c 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a4ef:	58                   	pop    eax
c000a4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a4f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a4fe:	e8 d5 28 00 00       	call   c000cdd8 <VAS::scanForEviction()>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	85 c0                	test   eax,eax
c000a508:	75 62                	jne    c000a56c <Phys::allocatePage()+0xce>
c000a50a:	83 ec 0c             	sub    esp,0xc
c000a50d:	68 34 4c 02 c0       	push   0xc0024c34
c000a512:	e8 12 ad 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	8b 1d 68 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c68
c000a520:	53                   	push   ebx
c000a521:	e8 d9 fe ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a526:	5a                   	pop    edx
c000a527:	84 c0                	test   al,al
c000a529:	75 97                	jne    c000a4c2 <Phys::allocatePage()+0x24>
c000a52b:	6a 01                	push   0x1
c000a52d:	53                   	push   ebx
c000a52e:	e8 9a fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a533:	5a                   	pop    edx
c000a534:	a1 74 8c 02 c0       	mov    eax,ds:0xc0028c74
c000a539:	59                   	pop    ecx
c000a53a:	40                   	inc    eax
c000a53b:	8b 15 68 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c68
c000a541:	a3 74 8c 02 c0       	mov    ds:0xc0028c74,eax
c000a546:	c1 e2 0c             	shl    edx,0xc
c000a549:	52                   	push   edx
c000a54a:	ff 35 78 8c 02 c0    	push   DWORD PTR ds:0xc0028c78
c000a550:	50                   	push   eax
c000a551:	68 85 4b 02 c0       	push   0xc0024b85
c000a556:	e8 ee 2b 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a55b:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	c1 e0 0c             	shl    eax,0xc
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 c2                	mov    edx,eax
c000a571:	6a 01                	push   0x1
c000a573:	c1 ea 0c             	shr    edx,0xc
c000a576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a57a:	52                   	push   edx
c000a57b:	e8 4d fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a587:	eb dd                	jmp    c000a566 <Phys::allocatePage()+0xc8>

c000a589 <Phys::allocateContiguousPages(int)>:
c000a589:	57                   	push   edi
c000a58a:	56                   	push   esi
c000a58b:	53                   	push   ebx
c000a58c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a590:	fa                   	cli    
c000a591:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c000a597:	31 db                	xor    ebx,ebx
c000a599:	85 db                	test   ebx,ebx
c000a59b:	75 11                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a59d:	e8 fc fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5a2:	83 fe 01             	cmp    esi,0x1
c000a5a5:	89 c7                	mov    edi,eax
c000a5a7:	74 21                	je     c000a5ca <Phys::allocateContiguousPages(int)+0x41>
c000a5a9:	bb 01 00 00 00       	mov    ebx,0x1
c000a5ae:	e8 eb fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5b3:	89 da                	mov    edx,ebx
c000a5b5:	c1 e2 0c             	shl    edx,0xc
c000a5b8:	01 fa                	add    edx,edi
c000a5ba:	39 c2                	cmp    edx,eax
c000a5bc:	74 20                	je     c000a5de <Phys::allocateContiguousPages(int)+0x55>
c000a5be:	bb 01 00 00 00       	mov    ebx,0x1
c000a5c3:	89 c7                	mov    edi,eax
c000a5c5:	83 fe 01             	cmp    esi,0x1
c000a5c8:	75 e4                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a5ca:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000a5cf:	48                   	dec    eax
c000a5d0:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000a5d5:	75 01                	jne    c000a5d8 <Phys::allocateContiguousPages(int)+0x4f>
c000a5d7:	fb                   	sti    
c000a5d8:	89 f8                	mov    eax,edi
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    
c000a5de:	43                   	inc    ebx
c000a5df:	39 f3                	cmp    ebx,esi
c000a5e1:	75 b6                	jne    c000a599 <Phys::allocateContiguousPages(int)+0x10>
c000a5e3:	eb e5                	jmp    c000a5ca <Phys::allocateContiguousPages(int)+0x41>

c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a5e5:	56                   	push   esi
c000a5e6:	53                   	push   ebx
c000a5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5eb:	39 1d 6c 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c6c,ebx
c000a5f1:	73 06                	jae    c000a5f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a5f3:	89 1d 6c 8c 02 c0    	mov    DWORD PTR ds:0xc0028c6c,ebx
c000a5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fd:	c1 eb 0c             	shr    ebx,0xc
c000a600:	c1 e8 0c             	shr    eax,0xc
c000a603:	39 d8                	cmp    eax,ebx
c000a605:	73 13                	jae    c000a61a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a607:	6a 00                	push   0x0
c000a609:	8d 70 01             	lea    esi,[eax+0x1]
c000a60c:	50                   	push   eax
c000a60d:	e8 bb fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a612:	5a                   	pop    edx
c000a613:	89 f0                	mov    eax,esi
c000a615:	59                   	pop    ecx
c000a616:	39 f3                	cmp    ebx,esi
c000a618:	75 ed                	jne    c000a607 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	c3                   	ret    

c000a61d <Phys::physicalMemorySetup(unsigned int)>:
c000a61d:	55                   	push   ebp
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	31 db                	xor    ebx,ebx
c000a623:	83 ec 40             	sub    esp,0x40
c000a626:	6a 10                	push   0x10
c000a628:	6a 00                	push   0x0
c000a62a:	68 7c 8c 02 c0       	push   0xc0028c7c
c000a62f:	e8 60 60 ff ff       	call   c0000694 <memset>
c000a634:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a638:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a63d:	05 00 10 00 00       	add    eax,0x1000
c000a642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a646:	5a                   	pop    edx
c000a647:	59                   	pop    ecx
c000a648:	50                   	push   eax
c000a649:	68 a3 4b 02 c0       	push   0xc0024ba3
c000a64e:	e8 f6 2a 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	6a 01                	push   0x1
c000a65b:	53                   	push   ebx
c000a65c:	43                   	inc    ebx
c000a65d:	e8 6b fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a662:	83 c4 10             	add    esp,0x10
c000a665:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a66b:	75 e9                	jne    c000a656 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a66d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a674:	66 85 c0             	test   ax,ax
c000a677:	0f 84 8e 01 00 00    	je     c000a80b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a67d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a681:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a68d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a696:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a69e:	eb 15                	jmp    c000a6b5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a6a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a6a4:	83 c3 18             	add    ebx,0x18
c000a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ab:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a6af:	0f 84 66 01 00 00    	je     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a6bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a6be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6c6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a6c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a6cb:	01 f0                	add    eax,esi
c000a6cd:	55                   	push   ebp
c000a6ce:	11 fa                	adc    edx,edi
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a6dc:	56                   	push   esi
c000a6dd:	68 64 4c 02 c0       	push   0xc0024c64
c000a6e2:	e8 62 2a 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	09 f8                	or     eax,edi
c000a6f0:	0f 85 25 01 00 00    	jne    c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6f6:	4d                   	dec    ebp
c000a6f7:	75 a7                	jne    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6f9:	ba 00 00 08 00       	mov    edx,0x80000
c000a6fe:	89 c1                	mov    ecx,eax
c000a700:	39 f2                	cmp    edx,esi
c000a702:	19 f9                	sbb    ecx,edi
c000a704:	0f 82 a7 00 00 00    	jb     c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a70a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a70e:	89 c1                	mov    ecx,eax
c000a710:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a714:	0f 83 97 00 00 00    	jae    c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a71a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a71f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a723:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a727:	39 fa                	cmp    edx,edi
c000a729:	19 e8                	sbb    eax,ebp
c000a72b:	0f 82 9a 01 00 00    	jb     c000a8cb <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a735:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a739:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a73f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a744:	83 d5 ff             	adc    ebp,0xffffffff
c000a747:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a74b:	31 c0                	xor    eax,eax
c000a74d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a751:	39 fa                	cmp    edx,edi
c000a753:	89 c1                	mov    ecx,eax
c000a755:	19 e9                	sbb    ecx,ebp
c000a757:	0f 83 43 ff ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a75d:	be 00 00 08 00       	mov    esi,0x80000
c000a762:	51                   	push   ecx
c000a763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a767:	57                   	push   edi
c000a768:	56                   	push   esi
c000a769:	68 88 4c 02 c0       	push   0xc0024c88
c000a76e:	e8 d6 29 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a773:	5d                   	pop    ebp
c000a774:	58                   	pop    eax
c000a775:	57                   	push   edi
c000a776:	56                   	push   esi
c000a777:	e8 69 fe ff ff       	call   c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a77c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a78b:	03 05 78 8c 02 c0    	add    eax,DWORD PTR ds:0xc0028c78
c000a791:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a798:	a3 78 8c 02 c0       	mov    ds:0xc0028c78,eax
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	68 c9 4b 02 c0       	push   0xc0024bc9
c000a7a4:	e8 a0 29 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	e9 ef fe ff ff       	jmp    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7b1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a7b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a7bd:	39 ea                	cmp    edx,ebp
c000a7bf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a7c3:	0f 82 d7 fe ff ff    	jb     c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7c9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a7ce:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a7d2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a7d6:	0f 83 c4 fe ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7dc:	39 ee                	cmp    esi,ebp
c000a7de:	89 f8                	mov    eax,edi
c000a7e0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a7e4:	0f 83 78 ff ff ff    	jae    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a7f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a7fa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a7fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a802:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a806:	e9 57 ff ff ff       	jmp    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	68 bb 4b 02 c0       	push   0xc0024bbb
c000a813:	e8 11 aa 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	83 ec 08             	sub    esp,0x8
c000a81e:	bb 60 00 00 00       	mov    ebx,0x60
c000a823:	6a 00                	push   0x0
c000a825:	6a 06                	push   0x6
c000a827:	e8 a1 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a82c:	58                   	pop    eax
c000a82d:	5a                   	pop    edx
c000a82e:	6a 00                	push   0x0
c000a830:	6a 07                	push   0x7
c000a832:	e8 96 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a837:	83 05 78 8c 02 c0 02 	add    DWORD PTR ds:0xc0028c78,0x2
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	83 ec 08             	sub    esp,0x8
c000a844:	6a 00                	push   0x0
c000a846:	53                   	push   ebx
c000a847:	43                   	inc    ebx
c000a848:	e8 80 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a856:	75 e9                	jne    c000a841 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a858:	a1 78 8c 02 c0       	mov    eax,ds:0xc0028c78
c000a85d:	bb 40 01 00 00       	mov    ebx,0x140
c000a862:	83 c0 20             	add    eax,0x20
c000a865:	a3 78 8c 02 c0       	mov    ds:0xc0028c78,eax
c000a86a:	eb 22                	jmp    c000a88e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a86c:	83 ec 08             	sub    esp,0x8
c000a86f:	6a 00                	push   0x0
c000a871:	53                   	push   ebx
c000a872:	43                   	inc    ebx
c000a873:	e8 55 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a878:	a1 78 8c 02 c0       	mov    eax,ds:0xc0028c78
c000a87d:	83 c4 10             	add    esp,0x10
c000a880:	40                   	inc    eax
c000a881:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a887:	a3 78 8c 02 c0       	mov    ds:0xc0028c78,eax
c000a88c:	74 07                	je     c000a895 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a88e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a893:	7e d7                	jle    c000a86c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a895:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a89a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a89f:	7f 22                	jg     c000a8c3 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	6a 00                	push   0x0
c000a8a6:	53                   	push   ebx
c000a8a7:	43                   	inc    ebx
c000a8a8:	e8 20 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a8ad:	a1 78 8c 02 c0       	mov    eax,ds:0xc0028c78
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	40                   	inc    eax
c000a8b6:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a8bc:	a3 78 8c 02 c0       	mov    ds:0xc0028c78,eax
c000a8c1:	75 d7                	jne    c000a89a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a8c3:	83 c4 3c             	add    esp,0x3c
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	5f                   	pop    edi
c000a8c9:	5d                   	pop    ebp
c000a8ca:	c3                   	ret    
c000a8cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a8db:	e9 51 fe ff ff       	jmp    c000a731 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a8e0 <Pipe::isAtty()>:
c000a8e0:	31 c0                	xor    eax,eax
c000a8e2:	c3                   	ret    
c000a8e3:	90                   	nop

c000a8e4 <Pipe::~Pipe()>:
c000a8e4:	83 ec 0c             	sub    esp,0xc
c000a8e7:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	89 10                	mov    DWORD PTR [eax],edx
c000a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f6:	83 ec 0c             	sub    esp,0xc
c000a8f9:	50                   	push   eax
c000a8fa:	e8 41 12 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	90                   	nop
c000a903:	83 c4 0c             	add    esp,0xc
c000a906:	c3                   	ret    
c000a907:	90                   	nop

c000a908 <Pipe::~Pipe()>:
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	83 ec 0c             	sub    esp,0xc
c000a90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a912:	e8 cd ff ff ff       	call   c000a8e4 <Pipe::~Pipe()>
c000a917:	83 c4 10             	add    esp,0x10
c000a91a:	83 ec 08             	sub    esp,0x8
c000a91d:	6a 20                	push   0x20
c000a91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a923:	e8 40 27 00 00       	call   c000d068 <operator delete(void*, unsigned long)>
c000a928:	83 c4 10             	add    esp,0x10
c000a92b:	83 c4 0c             	add    esp,0xc
c000a92e:	c3                   	ret    
c000a92f:	90                   	nop

c000a930 <Pipe::read(unsigned long long, void*, int*)>:
c000a930:	55                   	push   ebp
c000a931:	57                   	push   edi
c000a932:	56                   	push   esi
c000a933:	53                   	push   ebx
c000a934:	83 ec 1c             	sub    esp,0x1c
c000a937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a946:	89 c8                	mov    eax,ecx
c000a948:	99                   	cdq    
c000a949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a94d:	74 24                	je     c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a94f:	39 f9                	cmp    ecx,edi
c000a951:	89 d1                	mov    ecx,edx
c000a953:	19 f1                	sbb    ecx,esi
c000a955:	73 1c                	jae    c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a957:	fa                   	cli    
c000a958:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c000a95e:	e8 21 e6 00 00       	call   c0018f84 <schedule()>
c000a963:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000a968:	48                   	dec    eax
c000a969:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000a96e:	75 d3                	jne    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a970:	fb                   	sti    
c000a971:	eb d0                	jmp    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a973:	39 f8                	cmp    eax,edi
c000a975:	89 d1                	mov    ecx,edx
c000a977:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a97a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a97e:	19 f1                	sbb    ecx,esi
c000a980:	73 07                	jae    c000a989 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a982:	89 04 24             	mov    DWORD PTR [esp],eax
c000a985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a989:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a98c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a98f:	29 f7                	sub    edi,esi
c000a991:	89 f8                	mov    eax,edi
c000a993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a997:	99                   	cdq    
c000a998:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99f:	19 d0                	sbb    eax,edx
c000a9a1:	73 07                	jae    c000a9aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a9a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a9a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a9ad:	89 ea                	mov    edx,ebp
c000a9af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a9b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a9b8:	74 0d                	je     c000a9c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a9ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a9c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9c7:	85 d2                	test   edx,edx
c000a9c9:	74 11                	je     c000a9dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a9d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a9d6:	89 d1                	mov    ecx,edx
c000a9d8:	89 c7                	mov    edi,eax
c000a9da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a9df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a9e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a9e5:	99                   	cdq    
c000a9e6:	89 f7                	mov    edi,esi
c000a9e8:	03 04 24             	add    eax,DWORD PTR [esp]
c000a9eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a9ef:	c1 ff 1f             	sar    edi,0x1f
c000a9f2:	57                   	push   edi
c000a9f3:	56                   	push   esi
c000a9f4:	52                   	push   edx
c000a9f5:	50                   	push   eax
c000a9f6:	e8 15 87 01 00       	call   c0023110 <__umoddi3>
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa06:	75 10                	jne    c000aa18 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000aa08:	83 ec 0c             	sub    esp,0xc
c000aa0b:	68 b1 4c 02 c0       	push   0xc0024cb1
c000aa10:	e8 14 a8 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa1c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa1f:	89 10                	mov    DWORD PTR [eax],edx
c000aa21:	83 c4 1c             	add    esp,0x1c
c000aa24:	31 c0                	xor    eax,eax
c000aa26:	5b                   	pop    ebx
c000aa27:	5e                   	pop    esi
c000aa28:	5f                   	pop    edi
c000aa29:	5d                   	pop    ebp
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <Pipe::write(unsigned long long, void*, int*)>:
c000aa2c:	55                   	push   ebp
c000aa2d:	57                   	push   edi
c000aa2e:	56                   	push   esi
c000aa2f:	53                   	push   ebx
c000aa30:	83 ec 1c             	sub    esp,0x1c
c000aa33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa3b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000aa3e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	89 d8                	mov    eax,ebx
c000aa4b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000aa4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000aa52:	89 d6                	mov    esi,edx
c000aa54:	89 d7                	mov    edi,edx
c000aa56:	c1 ff 1f             	sar    edi,0x1f
c000aa59:	03 34 24             	add    esi,DWORD PTR [esp]
c000aa5c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000aa60:	c1 f8 1f             	sar    eax,0x1f
c000aa63:	39 f3                	cmp    ebx,esi
c000aa65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6d:	19 f8                	sbb    eax,edi
c000aa6f:	b8 01 00 00 00       	mov    eax,0x1
c000aa74:	72 6e                	jb     c000aae4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa79:	01 d0                	add    eax,edx
c000aa7b:	99                   	cdq    
c000aa7c:	f7 fb                	idiv   ebx
c000aa7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa82:	29 d3                	sub    ebx,edx
c000aa84:	89 d7                	mov    edi,edx
c000aa86:	89 de                	mov    esi,ebx
c000aa88:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa8b:	c1 fb 1f             	sar    ebx,0x1f
c000aa8e:	39 f2                	cmp    edx,esi
c000aa90:	19 d8                	sbb    eax,ebx
c000aa92:	b8 00 00 00 00       	mov    eax,0x0
c000aa97:	72 04                	jb     c000aa9d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa99:	89 d0                	mov    eax,edx
c000aa9b:	29 f0                	sub    eax,esi
c000aa9d:	89 d3                	mov    ebx,edx
c000aa9f:	29 c3                	sub    ebx,eax
c000aaa1:	74 0b                	je     c000aaae <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aaa3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aaa6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aaaa:	89 d9                	mov    ecx,ebx
c000aaac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 0d                	je     c000aabf <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aab2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aab6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aab9:	89 de                	mov    esi,ebx
c000aabb:	89 c1                	mov    ecx,eax
c000aabd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aabf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aac2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aac7:	75 10                	jne    c000aad9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	68 cd 4c 02 c0       	push   0xc0024ccd
c000aad1:	e8 53 a7 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000aad6:	83 c4 10             	add    esp,0x10
c000aad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aadd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aae0:	89 08                	mov    DWORD PTR [eax],ecx
c000aae2:	31 c0                	xor    eax,eax
c000aae4:	83 c4 1c             	add    esp,0x1c
c000aae7:	5b                   	pop    ebx
c000aae8:	5e                   	pop    esi
c000aae9:	5f                   	pop    edi
c000aaea:	5d                   	pop    ebp
c000aaeb:	c3                   	ret    

c000aaec <Pipe::Pipe(int)>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	6a 00                	push   0x0
c000aaf8:	50                   	push   eax
c000aaf9:	e8 60 0e 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c000ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0a:	89 10                	mov    DWORD PTR [eax],edx
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ab2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab31:	83 ec 0c             	sub    esp,0xc
c000ab34:	50                   	push   eax
c000ab35:	e8 ad f2 ff ff       	call   c0009de7 <malloc>
c000ab3a:	83 c4 10             	add    esp,0x10
c000ab3d:	89 c2                	mov    edx,eax
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ab4e:	90                   	nop
c000ab4f:	83 c4 0c             	add    esp,0xc
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <VgaText::isAtty()>:
c000ab54:	b0 01                	mov    al,0x1
c000ab56:	c3                   	ret    
c000ab57:	90                   	nop

c000ab58 <VgaText::~VgaText()>:
c000ab58:	83 ec 0c             	sub    esp,0xc
c000ab5b:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	89 10                	mov    DWORD PTR [eax],edx
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	50                   	push   eax
c000ab6e:	e8 cd 0f 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	90                   	nop
c000ab77:	83 c4 0c             	add    esp,0xc
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <VgaText::~VgaText()>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 0c             	sub    esp,0xc
c000ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab86:	e8 cd ff ff ff       	call   c000ab58 <VgaText::~VgaText()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	68 b4 01 00 00       	push   0x1b4
c000ab96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9a:	e8 c9 24 00 00       	call   c000d068 <operator delete(void*, unsigned long)>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	83 c4 0c             	add    esp,0xc
c000aba5:	c3                   	ret    

c000aba6 <VgaText::read(unsigned long long, void*, int*)>:
c000aba6:	83 ec 10             	sub    esp,0x10
c000aba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	e8 43 5a 00 00       	call   c00105fd <readKeyboard(VgaText*, char*, unsigned long)>
c000abba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abbe:	89 02                	mov    DWORD PTR [edx],eax
c000abc0:	31 c0                	xor    eax,eax
c000abc2:	83 c4 1c             	add    esp,0x1c
c000abc5:	c3                   	ret    

c000abc6 <setTerminalScrollLock(bool)>:
c000abc6:	c3                   	ret    

c000abc7 <addToTerminalCycle(VgaText*)>:
c000abc7:	8b 15 c0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc0
c000abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd1:	85 d2                	test   edx,edx
c000abd3:	75 09                	jne    c000abde <addToTerminalCycle(VgaText*)+0x17>
c000abd5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000abd8:	a3 c0 8c 02 c0       	mov    ds:0xc0028cc0,eax
c000abdd:	c3                   	ret    
c000abde:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000abe1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000abe4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000abe7:	c3                   	ret    

c000abe8 <installVgaTextImplementation()>:
c000abe8:	83 ec 10             	sub    esp,0x10
c000abeb:	6a 20                	push   0x20
c000abed:	6a 00                	push   0x0
c000abef:	68 a0 8c 02 c0       	push   0xc0028ca0
c000abf4:	e8 9b 5a ff ff       	call   c0000694 <memset>
c000abf9:	83 c4 1c             	add    esp,0x1c
c000abfc:	c3                   	ret    

c000abfd <scrollTerminalScrollLock(int)>:
c000abfd:	c3                   	ret    

c000abfe <VgaText::updateTitle()>:
c000abfe:	53                   	push   ebx
c000abff:	31 c0                	xor    eax,eax
c000ac01:	83 ec 58             	sub    esp,0x58
c000ac04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ac08:	89 e1                	mov    ecx,esp
c000ac0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ac0e:	40                   	inc    eax
c000ac0f:	83 f8 50             	cmp    eax,0x50
c000ac12:	75 f6                	jne    c000ac0a <VgaText::updateTitle()+0xc>
c000ac14:	31 c0                	xor    eax,eax
c000ac16:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ac1d:	84 db                	test   bl,bl
c000ac1f:	74 06                	je     c000ac27 <VgaText::updateTitle()+0x29>
c000ac21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ac24:	40                   	inc    eax
c000ac25:	eb ef                	jmp    c000ac16 <VgaText::updateTitle()+0x18>
c000ac27:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ac2a:	85 c0                	test   eax,eax
c000ac2c:	74 09                	je     c000ac37 <VgaText::updateTitle()+0x39>
c000ac2e:	53                   	push   ebx
c000ac2f:	53                   	push   ebx
c000ac30:	51                   	push   ecx
c000ac31:	52                   	push   edx
c000ac32:	ff d0                	call   eax
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 c4 58             	add    esp,0x58
c000ac3a:	5b                   	pop    ebx
c000ac3b:	c3                   	ret    

c000ac3c <VgaText::load()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	31 c0                	xor    eax,eax
c000ac3f:	83 ec 58             	sub    esp,0x58
c000ac42:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ac46:	89 e2                	mov    edx,esp
c000ac48:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ac4c:	40                   	inc    eax
c000ac4d:	83 f8 50             	cmp    eax,0x50
c000ac50:	75 f6                	jne    c000ac48 <VgaText::load()+0xc>
c000ac52:	31 c0                	xor    eax,eax
c000ac54:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ac5b:	84 c9                	test   cl,cl
c000ac5d:	74 06                	je     c000ac65 <VgaText::load()+0x29>
c000ac5f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac62:	40                   	inc    eax
c000ac63:	eb ef                	jmp    c000ac54 <VgaText::load()+0x18>
c000ac65:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac68:	85 c0                	test   eax,eax
c000ac6a:	74 09                	je     c000ac75 <VgaText::load()+0x39>
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	52                   	push   edx
c000ac6f:	53                   	push   ebx
c000ac70:	ff d0                	call   eax
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac78:	85 c0                	test   eax,eax
c000ac7a:	74 09                	je     c000ac85 <VgaText::load()+0x49>
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	53                   	push   ebx
c000ac80:	ff d0                	call   eax
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	83 c4 58             	add    esp,0x58
c000ac88:	5b                   	pop    ebx
c000ac89:	c3                   	ret    

c000ac8a <VgaText::updateCursor()>:
c000ac8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8e:	39 05 c4 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cc4,eax
c000ac94:	75 09                	jne    c000ac9f <VgaText::updateCursor()+0x15>
c000ac96:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 02                	je     c000ac9f <VgaText::updateCursor()+0x15>
c000ac9d:	ff e0                	jmp    eax
c000ac9f:	c3                   	ret    

c000aca0 <VgaText::doANSI_SGR(int)>:
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	85 d2                	test   edx,edx
c000acaa:	75 0b                	jne    c000acb7 <VgaText::doANSI_SGR(int)+0x17>
c000acac:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000acb5:	eb 59                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acb7:	83 fa 07             	cmp    edx,0x7
c000acba:	75 0b                	jne    c000acc7 <VgaText::doANSI_SGR(int)+0x27>
c000acbc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000acbf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000acc2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000acc5:	eb 49                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acc7:	83 fa 1b             	cmp    edx,0x1b
c000acca:	74 e0                	je     c000acac <VgaText::doANSI_SGR(int)+0xc>
c000accc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000accf:	83 f9 07             	cmp    ecx,0x7
c000acd2:	77 09                	ja     c000acdd <VgaText::doANSI_SGR(int)+0x3d>
c000acd4:	8b 14 8d 40 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7fc0]
c000acdb:	eb 20                	jmp    c000acfd <VgaText::doANSI_SGR(int)+0x5d>
c000acdd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ace0:	83 f9 07             	cmp    ecx,0x7
c000ace3:	77 09                	ja     c000acee <VgaText::doANSI_SGR(int)+0x4e>
c000ace5:	8b 14 8d 40 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7fc0]
c000acec:	eb 22                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000acf1:	83 f9 07             	cmp    ecx,0x7
c000acf4:	77 0b                	ja     c000ad01 <VgaText::doANSI_SGR(int)+0x61>
c000acf6:	8b 14 95 f8 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8108]
c000acfd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad00:	c3                   	ret    
c000ad01:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ad04:	83 f9 07             	cmp    ecx,0x7
c000ad07:	77 0a                	ja     c000ad13 <VgaText::doANSI_SGR(int)+0x73>
c000ad09:	8b 14 95 d0 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8130]
c000ad10:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad13:	c3                   	ret    

c000ad14 <VgaText::setDefaultBgColour(VgaColour)>:
c000ad14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ad1f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad22:	c3                   	ret    
c000ad23:	90                   	nop

c000ad24 <VgaText::setDefaultFgColour(VgaColour)>:
c000ad24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ad2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ad34:	53                   	push   ebx
c000ad35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad41:	51                   	push   ecx
c000ad42:	e8 cd ff ff ff       	call   c000ad14 <VgaText::setDefaultBgColour(VgaColour)>
c000ad47:	58                   	pop    eax
c000ad48:	5a                   	pop    edx
c000ad49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ad4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ad51:	5b                   	pop    ebx
c000ad52:	eb d0                	jmp    c000ad24 <VgaText::setDefaultFgColour(VgaColour)>

c000ad54 <VgaText::setTitleTextColour(VgaColour)>:
c000ad54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ad5f:	e9 9a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad64 <VgaText::setTitleColour(VgaColour)>:
c000ad64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad6f:	e9 8a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad74 <VgaText::setTitle(char*)>:
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 10             	sub    esp,0x10
c000ad78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad80:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad86:	50                   	push   eax
c000ad87:	e8 c4 59 ff ff       	call   c0000750 <strcpy>
c000ad8c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad90:	83 c4 18             	add    esp,0x18
c000ad93:	5b                   	pop    ebx
c000ad94:	e9 65 fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>
c000ad99:	90                   	nop

c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad9a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ada3:	83 e0 0f             	and    eax,0xf
c000ada6:	c1 e2 04             	shl    edx,0x4
c000ada9:	09 d0                	or     eax,edx
c000adab:	c3                   	ret    

c000adac <VgaText::scrollScreen()>:
c000adac:	55                   	push   ebp
c000adad:	b9 01 00 00 00       	mov    ecx,0x1
c000adb2:	57                   	push   edi
c000adb3:	56                   	push   esi
c000adb4:	53                   	push   ebx
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000adbc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000adc2:	31 ff                	xor    edi,edi
c000adc4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000adc7:	83 f9 17             	cmp    ecx,0x17
c000adca:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000adcd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000add4:	75 27                	jne    c000adfd <VgaText::scrollScreen()+0x51>
c000add6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000add9:	01 f5                	add    ebp,esi
c000addb:	f7 c7 01 00 00 00    	test   edi,0x1
c000ade1:	74 16                	je     c000adf9 <VgaText::scrollScreen()+0x4d>
c000ade3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ade7:	50                   	push   eax
c000ade8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000adec:	50                   	push   eax
c000aded:	e8 a8 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000adf2:	5a                   	pop    edx
c000adf3:	5a                   	pop    edx
c000adf4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000adf7:	eb 04                	jmp    c000adfd <VgaText::scrollScreen()+0x51>
c000adf9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000adfd:	47                   	inc    edi
c000adfe:	46                   	inc    esi
c000adff:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ae05:	75 bd                	jne    c000adc4 <VgaText::scrollScreen()+0x18>
c000ae07:	41                   	inc    ecx
c000ae08:	83 f9 18             	cmp    ecx,0x18
c000ae0b:	75 af                	jne    c000adbc <VgaText::scrollScreen()+0x10>
c000ae0d:	39 1d c4 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cc4,ebx
c000ae13:	75 1b                	jne    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae15:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae19:	74 05                	je     c000ae20 <VgaText::scrollScreen()+0x74>
c000ae1b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ae1e:	eb 10                	jmp    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae20:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ae23:	85 c0                	test   eax,eax
c000ae25:	74 09                	je     c000ae30 <VgaText::scrollScreen()+0x84>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	53                   	push   ebx
c000ae2b:	ff d0                	call   eax
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ae34:	83 c4 0c             	add    esp,0xc
c000ae37:	5b                   	pop    ebx
c000ae38:	5e                   	pop    esi
c000ae39:	5f                   	pop    edi
c000ae3a:	5d                   	pop    ebp
c000ae3b:	e9 4a fe ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ae40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ae45:	c1 e0 08             	shl    eax,0x8
c000ae48:	89 c2                	mov    edx,eax
c000ae4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ae4f:	09 d0                	or     eax,edx
c000ae51:	c3                   	ret    

c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae5e:	50                   	push   eax
c000ae5f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae64:	50                   	push   eax
c000ae65:	e8 30 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ae6a:	5b                   	pop    ebx
c000ae6b:	0f b6 c0             	movzx  eax,al
c000ae6e:	5e                   	pop    esi
c000ae6f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae74:	50                   	push   eax
c000ae75:	53                   	push   ebx
c000ae76:	e8 c5 ff ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ae7b:	5a                   	pop    edx
c000ae7c:	5e                   	pop    esi
c000ae7d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae80:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae86:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae8a:	0f b7 d2             	movzx  edx,dx
c000ae8d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae91:	39 0d c4 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cc4,ecx
c000ae97:	75 10                	jne    c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae99:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae9c:	85 c0                	test   eax,eax
c000ae9e:	74 09                	je     c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aea0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aea4:	5a                   	pop    edx
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	ff e0                	jmp    eax
c000aea9:	58                   	pop    eax
c000aeaa:	5b                   	pop    ebx
c000aeab:	5e                   	pop    esi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <VgaText::getCursorX()>:
c000aeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aeb5:	c3                   	ret    

c000aeb6 <VgaText::getCursorY()>:
c000aeb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aebd:	c3                   	ret    

c000aebe <VgaText::setCursor(int, int)>:
c000aebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aec6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aecd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aed0:	e9 b5 fd ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000aed5 <setActiveTerminal(VgaText*)>:
c000aed5:	53                   	push   ebx
c000aed6:	83 ec 08             	sub    esp,0x8
c000aed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedd:	85 db                	test   ebx,ebx
c000aedf:	75 11                	jne    c000aef2 <setActiveTerminal(VgaText*)+0x1d>
c000aee1:	c7 44 24 10 08 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d08
c000aee9:	83 c4 08             	add    esp,0x8
c000aeec:	5b                   	pop    ebx
c000aeed:	e9 37 a3 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c000aef2:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c000aef7:	85 c0                	test   eax,eax
c000aef9:	74 0c                	je     c000af07 <setActiveTerminal(VgaText*)+0x32>
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	50                   	push   eax
c000aeff:	e8 86 fd ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000af04:	83 c4 10             	add    esp,0x10
c000af07:	89 1d c4 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc4,ebx
c000af0d:	51                   	push   ecx
c000af0e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af11:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af14:	53                   	push   ebx
c000af15:	e8 a4 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000af21:	75 07                	jne    c000af2a <setActiveTerminal(VgaText*)+0x55>
c000af23:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000af2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af2e:	83 c4 08             	add    esp,0x8
c000af31:	5b                   	pop    ebx
c000af32:	e9 05 fd ff ff       	jmp    c000ac3c <VgaText::load()>

c000af37 <doTerminalCycle()>:
c000af37:	83 ec 18             	sub    esp,0x18
c000af3a:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c000af3f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000af42:	50                   	push   eax
c000af43:	a3 c0 8c 02 c0       	mov    ds:0xc0028cc0,eax
c000af48:	e8 88 ff ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000af4d:	83 c4 1c             	add    esp,0x1c
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <VgaText::setCursorX(int)>:
c000af52:	83 ec 10             	sub    esp,0x10
c000af55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af59:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000af5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af60:	50                   	push   eax
c000af61:	e8 58 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af66:	83 c4 1c             	add    esp,0x1c
c000af69:	c3                   	ret    

c000af6a <VgaText::setCursorY(int)>:
c000af6a:	83 ec 10             	sub    esp,0x10
c000af6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af75:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af78:	50                   	push   eax
c000af79:	e8 40 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af7e:	83 c4 1c             	add    esp,0x1c
c000af81:	c3                   	ret    

c000af82 <VgaText::incrementCursor(bool)>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	51                   	push   ecx
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af90:	40                   	inc    eax
c000af91:	83 f8 50             	cmp    eax,0x50
c000af94:	74 05                	je     c000af9b <VgaText::incrementCursor(bool)+0x19>
c000af96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af99:	eb 24                	jmp    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000af9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afa5:	8d 50 01             	lea    edx,[eax+0x1]
c000afa8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afae:	75 0f                	jne    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afb6:	53                   	push   ebx
c000afb7:	e8 f0 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000afbc:	83 c4 10             	add    esp,0x10
c000afbf:	89 f0                	mov    eax,esi
c000afc1:	84 c0                	test   al,al
c000afc3:	74 0c                	je     c000afd1 <VgaText::incrementCursor(bool)+0x4f>
c000afc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afc9:	5a                   	pop    edx
c000afca:	5b                   	pop    ebx
c000afcb:	5e                   	pop    esi
c000afcc:	e9 b9 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000afd1:	58                   	pop    eax
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop

c000afd6 <VgaText::decrementCursor(bool)>:
c000afd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000afda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afde:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 04                	je     c000afe9 <VgaText::decrementCursor(bool)+0x13>
c000afe5:	48                   	dec    eax
c000afe6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000afe9:	84 c9                	test   cl,cl
c000afeb:	74 09                	je     c000aff6 <VgaText::decrementCursor(bool)+0x20>
c000afed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aff1:	e9 94 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aff8:	53                   	push   ebx
c000aff9:	83 ec 08             	sub    esp,0x8
c000affc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b004:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b008:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b00c:	3c 07                	cmp    al,0x7
c000b00e:	75 2a                	jne    c000b03a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000b010:	a1 7c 8d 02 c0       	mov    eax,ds:0xc0028d7c
c000b015:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b01d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000b025:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000b02d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b031:	83 c4 08             	add    esp,0x8
c000b034:	5b                   	pop    ebx
c000b035:	e9 54 30 00 00       	jmp    c000e08e <Buzzer::beep(int, int, bool)>
c000b03a:	3c 0d                	cmp    al,0xd
c000b03c:	75 09                	jne    c000b047 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000b03e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b045:	eb 2c                	jmp    c000b073 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000b047:	3c 0a                	cmp    al,0xa
c000b049:	75 31                	jne    c000b07c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000b04b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b04e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b055:	8d 50 01             	lea    edx,[eax+0x1]
c000b058:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000b05b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000b05e:	75 0f                	jne    c000b06f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b066:	53                   	push   ebx
c000b067:	e8 40 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b06c:	83 c4 10             	add    esp,0x10
c000b06f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b073:	83 c4 08             	add    esp,0x8
c000b076:	5b                   	pop    ebx
c000b077:	e9 0e fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000b07c:	3c 08                	cmp    al,0x8
c000b07e:	75 25                	jne    c000b0a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	6a 01                	push   0x1
c000b084:	53                   	push   ebx
c000b085:	e8 4c ff ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b08a:	5a                   	pop    edx
c000b08b:	59                   	pop    ecx
c000b08c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b08f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b092:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b095:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b098:	6a 20                	push   0x20
c000b09a:	53                   	push   ebx
c000b09b:	e8 b2 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0a0:	83 c4 28             	add    esp,0x28
c000b0a3:	5b                   	pop    ebx
c000b0a4:	c3                   	ret    
c000b0a5:	83 ec 08             	sub    esp,0x8
c000b0a8:	0f be c0             	movsx  eax,al
c000b0ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b1:	51                   	push   ecx
c000b0b2:	52                   	push   edx
c000b0b3:	50                   	push   eax
c000b0b4:	53                   	push   ebx
c000b0b5:	e8 98 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0ba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b0be:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b0c6:	83 c4 28             	add    esp,0x28
c000b0c9:	5b                   	pop    ebx
c000b0ca:	e9 b3 fe ff ff       	jmp    c000af82 <VgaText::incrementCursor(bool)>
c000b0cf:	90                   	nop

c000b0d0 <VgaText::doUpdate()>:
c000b0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b0d7:	85 c0                	test   eax,eax
c000b0d9:	74 02                	je     c000b0dd <VgaText::doUpdate()+0xd>
c000b0db:	ff e0                	jmp    eax
c000b0dd:	c3                   	ret    

c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b0de:	55                   	push   ebp
c000b0df:	31 ed                	xor    ebp,ebp
c000b0e1:	57                   	push   edi
c000b0e2:	56                   	push   esi
c000b0e3:	53                   	push   ebx
c000b0e4:	83 ec 1c             	sub    esp,0x1c
c000b0e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0eb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b0f7:	50                   	push   eax
c000b0f8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 97 fc ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000b103:	59                   	pop    ecx
c000b104:	0f b6 c0             	movzx  eax,al
c000b107:	5e                   	pop    esi
c000b108:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b10d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b111:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b118:	0f b7 f6             	movzx  esi,si
c000b11b:	01 f6                	add    esi,esi
c000b11d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b120:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b123:	84 c0                	test   al,al
c000b125:	0f 84 fd 00 00 00    	je     c000b228 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b12b:	3c 0d                	cmp    al,0xd
c000b12d:	75 0c                	jne    c000b13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b12f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b136:	e9 e7 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13b:	3c 0a                	cmp    al,0xa
c000b13d:	75 47                	jne    c000b186 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b13f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b149:	8d 48 01             	lea    ecx,[eax+0x1]
c000b14c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b14f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b152:	75 0f                	jne    c000b163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b15a:	53                   	push   ebx
c000b15b:	e8 4c fc ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	31 ed                	xor    ebp,ebp
c000b168:	53                   	push   ebx
c000b169:	e8 1c fb ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b16e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b179:	0f b7 f6             	movzx  esi,si
c000b17c:	01 f6                	add    esi,esi
c000b17e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b181:	e9 9c 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b186:	3c 08                	cmp    al,0x8
c000b188:	75 35                	jne    c000b1bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b18a:	56                   	push   esi
c000b18b:	56                   	push   esi
c000b18c:	6a 01                	push   0x1
c000b18e:	53                   	push   ebx
c000b18f:	e8 42 fe ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b194:	58                   	pop    eax
c000b195:	5a                   	pop    edx
c000b196:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b199:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b19c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b19f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1a2:	6a 20                	push   0x20
c000b1a4:	53                   	push   ebx
c000b1a5:	e8 a8 fc ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1aa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1af:	83 c4 20             	add    esp,0x20
c000b1b2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b1b5:	0f b7 f6             	movzx  esi,si
c000b1b8:	01 f6                	add    esi,esi
c000b1ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1bd:	eb 63                	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b1bf:	51                   	push   ecx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c5:	50                   	push   eax
c000b1c6:	e8 75 fc ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	66 89 06             	mov    WORD PTR [esi],ax
c000b1d1:	39 1d c4 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cc4,ebx
c000b1d7:	75 21                	jne    c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1d9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b1dc:	85 c0                	test   eax,eax
c000b1de:	74 1a                	je     c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1f0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b1f3:	51                   	push   ecx
c000b1f4:	53                   	push   ebx
c000b1f5:	ff d0                	call   eax
c000b1f7:	83 c4 20             	add    esp,0x20
c000b1fa:	83 c6 02             	add    esi,0x2
c000b1fd:	50                   	push   eax
c000b1fe:	50                   	push   eax
c000b1ff:	6a 00                	push   0x0
c000b201:	53                   	push   ebx
c000b202:	e8 7b fd ff ff       	call   c000af82 <VgaText::incrementCursor(bool)>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b20e:	75 0d                	jne    c000b21d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b210:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b215:	0f b7 f6             	movzx  esi,si
c000b218:	01 f6                	add    esi,esi
c000b21a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b21d:	bd 01 00 00 00       	mov    ebp,0x1
c000b222:	47                   	inc    edi
c000b223:	e9 f8 fe ff ff       	jmp    c000b120 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	53                   	push   ebx
c000b22c:	e8 59 fa ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b231:	83 c4 10             	add    esp,0x10
c000b234:	89 e8                	mov    eax,ebp
c000b236:	84 c0                	test   al,al
c000b238:	74 0c                	je     c000b246 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	53                   	push   ebx
c000b23e:	e8 8d fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b24d:	83 c4 1c             	add    esp,0x1c
c000b250:	5b                   	pop    ebx
c000b251:	5e                   	pop    esi
c000b252:	5f                   	pop    edi
c000b253:	5d                   	pop    ebp
c000b254:	c3                   	ret    
c000b255:	90                   	nop

c000b256 <VgaText::clearScreen()>:
c000b256:	57                   	push   edi
c000b257:	56                   	push   esi
c000b258:	31 f6                	xor    esi,esi
c000b25a:	53                   	push   ebx
c000b25b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b25f:	52                   	push   edx
c000b260:	6a 00                	push   0x0
c000b262:	6a 00                	push   0x0
c000b264:	53                   	push   ebx
c000b265:	e8 54 fc ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b26a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b277:	7e 20                	jle    c000b299 <VgaText::clearScreen()+0x43>
c000b279:	31 ff                	xor    edi,edi
c000b27b:	50                   	push   eax
c000b27c:	50                   	push   eax
c000b27d:	56                   	push   esi
c000b27e:	57                   	push   edi
c000b27f:	47                   	inc    edi
c000b280:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b283:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b286:	6a 20                	push   0x20
c000b288:	53                   	push   ebx
c000b289:	e8 c4 fb ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b28e:	83 c4 20             	add    esp,0x20
c000b291:	83 ff 50             	cmp    edi,0x50
c000b294:	75 e5                	jne    c000b27b <VgaText::clearScreen()+0x25>
c000b296:	46                   	inc    esi
c000b297:	eb db                	jmp    c000b274 <VgaText::clearScreen()+0x1e>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 2e fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b2a2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	5f                   	pop    edi
c000b2af:	c3                   	ret    

c000b2b0 <VgaText::putchar(char)>:
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 14             	sub    esp,0x14
c000b2b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2bd:	3c 5b                	cmp    al,0x5b
c000b2bf:	75 18                	jne    c000b2d9 <VgaText::putchar(char)+0x29>
c000b2c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b2c5:	74 1f                	je     c000b2e6 <VgaText::putchar(char)+0x36>
c000b2c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b2cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b2d4:	e9 bd 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2d9:	3c 1b                	cmp    al,0x1b
c000b2db:	75 09                	jne    c000b2e6 <VgaText::putchar(char)+0x36>
c000b2dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b2e1:	e9 b0 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b2e9:	84 c9                	test   cl,cl
c000b2eb:	0f 84 92 00 00 00    	je     c000b383 <VgaText::putchar(char)+0xd3>
c000b2f1:	8d 50 c0             	lea    edx,[eax-0x40]
c000b2f4:	80 fa 3e             	cmp    dl,0x3e
c000b2f7:	77 76                	ja     c000b36f <VgaText::putchar(char)+0xbf>
c000b2f9:	3c 6d                	cmp    al,0x6d
c000b2fb:	75 47                	jne    c000b344 <VgaText::putchar(char)+0x94>
c000b2fd:	31 f6                	xor    esi,esi
c000b2ff:	31 d2                	xor    edx,edx
c000b301:	31 c0                	xor    eax,eax
c000b303:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b306:	7e 2d                	jle    c000b335 <VgaText::putchar(char)+0x85>
c000b308:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b30d:	80 fa 3b             	cmp    dl,0x3b
c000b310:	75 17                	jne    c000b329 <VgaText::putchar(char)+0x79>
c000b312:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b316:	50                   	push   eax
c000b317:	53                   	push   ebx
c000b318:	e8 83 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b31d:	59                   	pop    ecx
c000b31e:	31 d2                	xor    edx,edx
c000b320:	58                   	pop    eax
c000b321:	31 c0                	xor    eax,eax
c000b323:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b327:	eb 09                	jmp    c000b332 <VgaText::putchar(char)+0x82>
c000b329:	6b c0 0a             	imul   eax,eax,0xa
c000b32c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b330:	88 ca                	mov    dl,cl
c000b332:	46                   	inc    esi
c000b333:	eb ce                	jmp    c000b303 <VgaText::putchar(char)+0x53>
c000b335:	84 d2                	test   dl,dl
c000b337:	74 2e                	je     c000b367 <VgaText::putchar(char)+0xb7>
c000b339:	50                   	push   eax
c000b33a:	53                   	push   ebx
c000b33b:	e8 60 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b340:	58                   	pop    eax
c000b341:	5a                   	pop    edx
c000b342:	eb 23                	jmp    c000b367 <VgaText::putchar(char)+0xb7>
c000b344:	3c 4a                	cmp    al,0x4a
c000b346:	75 1f                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b348:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b34c:	75 19                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e8 ff fe ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	6a 00                	push   0x0
c000b35c:	6a 00                	push   0x0
c000b35e:	53                   	push   ebx
c000b35f:	e8 5a fb ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b36d:	eb 27                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b36f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b372:	83 fa 0e             	cmp    edx,0xe
c000b375:	7f 1f                	jg     c000b396 <VgaText::putchar(char)+0xe6>
c000b377:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b37a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b37d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b381:	eb 13                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b383:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b386:	0f be c0             	movsx  eax,al
c000b389:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b38c:	50                   	push   eax
c000b38d:	53                   	push   ebx
c000b38e:	e8 65 fc ff ff       	call   c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 14             	add    esp,0x14
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    

c000b39c <VgaText::putx(unsigned int)>:
c000b39c:	57                   	push   edi
c000b39d:	b9 11 00 00 00       	mov    ecx,0x11
c000b3a2:	56                   	push   esi
c000b3a3:	be 16 4d 02 c0       	mov    esi,0xc0024d16
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 20             	sub    esp,0x20
c000b3ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b3b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b3b4:	fc                   	cld    
c000b3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3b7:	be 08 00 00 00       	mov    esi,0x8
c000b3bc:	50                   	push   eax
c000b3bd:	50                   	push   eax
c000b3be:	89 d8                	mov    eax,ebx
c000b3c0:	c1 e3 04             	shl    ebx,0x4
c000b3c3:	c1 e8 1c             	shr    eax,0x1c
c000b3c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b3cb:	50                   	push   eax
c000b3cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b3d0:	e8 db fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3d5:	83 c4 10             	add    esp,0x10
c000b3d8:	4e                   	dec    esi
c000b3d9:	75 e1                	jne    c000b3bc <VgaText::putx(unsigned int)+0x20>
c000b3db:	83 c4 20             	add    esp,0x20
c000b3de:	5b                   	pop    ebx
c000b3df:	5e                   	pop    esi
c000b3e0:	5f                   	pop    edi
c000b3e1:	c3                   	ret    

c000b3e2 <VgaText::puts(char const*)>:
c000b3e2:	53                   	push   ebx
c000b3e3:	83 ec 08             	sub    esp,0x8
c000b3e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b3ed:	84 c0                	test   al,al
c000b3ef:	74 12                	je     c000b403 <VgaText::puts(char const*)+0x21>
c000b3f1:	43                   	inc    ebx
c000b3f2:	51                   	push   ecx
c000b3f3:	51                   	push   ecx
c000b3f4:	50                   	push   eax
c000b3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f9:	e8 b2 fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	eb e7                	jmp    c000b3ea <VgaText::puts(char const*)+0x8>
c000b403:	83 c4 08             	add    esp,0x8
c000b406:	5b                   	pop    ebx
c000b407:	c3                   	ret    

c000b408 <VgaText::VgaText(char const*)>:
c000b408:	57                   	push   edi
c000b409:	56                   	push   esi
c000b40a:	53                   	push   ebx
c000b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40f:	83 ec 08             	sub    esp,0x8
c000b412:	6a 00                	push   0x0
c000b414:	50                   	push   eax
c000b415:	e8 44 05 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	89 10                	mov    DWORD PTR [eax],edx
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b437:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b473:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47e:	8d 50 60             	lea    edx,[eax+0x60]
c000b481:	bb a0 8c 02 c0       	mov    ebx,0xc0028ca0
c000b486:	b8 08 00 00 00       	mov    eax,0x8
c000b48b:	fc                   	cld    
c000b48c:	89 d7                	mov    edi,edx
c000b48e:	89 de                	mov    esi,ebx
c000b490:	89 c1                	mov    ecx,eax
c000b492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	05 82 00 00 00       	add    eax,0x82
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	50                   	push   eax
c000b4a5:	e8 a6 52 ff ff       	call   c0000750 <strcpy>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	6a 01                	push   0x1
c000b4bd:	e8 df 08 00 00       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	89 c2                	mov    edx,eax
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b4ce:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4db:	89 c6                	mov    esi,eax
c000b4dd:	e8 bc ef ff ff       	call   c000a49e <Phys::allocatePage()>
c000b4e2:	68 05 0c 00 00       	push   0xc05
c000b4e7:	56                   	push   esi
c000b4e8:	50                   	push   eax
c000b4e9:	53                   	push   ebx
c000b4ea:	e8 1d 0f 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f9:	83 ec 04             	sub    esp,0x4
c000b4fc:	68 00 0f 00 00       	push   0xf00
c000b501:	6a 00                	push   0x0
c000b503:	50                   	push   eax
c000b504:	e8 8b 51 ff ff       	call   c0000694 <memset>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	83 ec 04             	sub    esp,0x4
c000b50f:	6a 00                	push   0x0
c000b511:	6a 07                	push   0x7
c000b513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b517:	e8 18 f8 ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	83 ec 04             	sub    esp,0x4
c000b522:	6a 00                	push   0x0
c000b524:	6a 00                	push   0x0
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	e8 8f f9 ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b539:	e8 18 fd ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b545:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54d:	05 02 01 00 00       	add    eax,0x102
c000b552:	83 ec 04             	sub    esp,0x4
c000b555:	6a 30                	push   0x30
c000b557:	6a 00                	push   0x0
c000b559:	50                   	push   eax
c000b55a:	e8 35 51 ff ff       	call   c0000694 <memset>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b566:	05 32 01 00 00       	add    eax,0x132
c000b56b:	83 ec 04             	sub    esp,0x4
c000b56e:	68 80 00 00 00       	push   0x80
c000b573:	6a 00                	push   0x0
c000b575:	50                   	push   eax
c000b576:	e8 19 51 ff ff       	call   c0000694 <memset>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	90                   	nop
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <VgaText::receiveKey(unsigned char)>:
c000b584:	55                   	push   ebp
c000b585:	57                   	push   edi
c000b586:	56                   	push   esi
c000b587:	53                   	push   ebx
c000b588:	83 ec 1c             	sub    esp,0x1c
c000b58b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b58f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b593:	84 db                	test   bl,bl
c000b595:	0f 84 c6 00 00 00    	je     c000b661 <VgaText::receiveKey(unsigned char)+0xdd>
c000b59b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b5a1:	80 fb 08             	cmp    bl,0x8
c000b5a4:	75 2c                	jne    c000b5d2 <VgaText::receiveKey(unsigned char)+0x4e>
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	57                   	push   edi
c000b5aa:	e8 01 51 ff ff       	call   c00006b0 <strlen>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	74 41                	je     c000b5f7 <VgaText::receiveKey(unsigned char)+0x73>
c000b5b6:	50                   	push   eax
c000b5b7:	50                   	push   eax
c000b5b8:	6a 08                	push   0x8
c000b5ba:	56                   	push   esi
c000b5bb:	e8 f0 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5c3:	e8 e8 50 ff ff       	call   c00006b0 <strlen>
c000b5c8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b5d0:	eb 22                	jmp    c000b5f4 <VgaText::receiveKey(unsigned char)+0x70>
c000b5d2:	0f be c3             	movsx  eax,bl
c000b5d5:	52                   	push   edx
c000b5d6:	52                   	push   edx
c000b5d7:	50                   	push   eax
c000b5d8:	56                   	push   esi
c000b5d9:	e8 d2 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5de:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b5e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b5e7:	59                   	pop    ecx
c000b5e8:	5d                   	pop    ebp
c000b5e9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b5ed:	50                   	push   eax
c000b5ee:	57                   	push   edi
c000b5ef:	e8 9c 52 ff ff       	call   c0000890 <strcat>
c000b5f4:	83 c4 10             	add    esp,0x10
c000b5f7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b5fe:	75 05                	jne    c000b605 <VgaText::receiveKey(unsigned char)+0x81>
c000b600:	80 fb 0a             	cmp    bl,0xa
c000b603:	75 50                	jne    c000b655 <VgaText::receiveKey(unsigned char)+0xd1>
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b60e:	53                   	push   ebx
c000b60f:	e8 9c 50 ff ff       	call   c00006b0 <strlen>
c000b614:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b617:	89 c5                	mov    ebp,eax
c000b619:	e8 92 50 ff ff       	call   c00006b0 <strlen>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b625:	3d 80 00 00 00       	cmp    eax,0x80
c000b62a:	76 10                	jbe    c000b63c <VgaText::receiveKey(unsigned char)+0xb8>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	68 27 4d 02 c0       	push   0xc0024d27
c000b634:	e8 f0 9b 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	50                   	push   eax
c000b63d:	50                   	push   eax
c000b63e:	57                   	push   edi
c000b63f:	53                   	push   ebx
c000b640:	e8 4b 52 ff ff       	call   c0000890 <strcat>
c000b645:	83 c4 0c             	add    esp,0xc
c000b648:	6a 30                	push   0x30
c000b64a:	6a 00                	push   0x0
c000b64c:	57                   	push   edi
c000b64d:	e8 42 50 ff ff       	call   c0000694 <memset>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	56                   	push   esi
c000b659:	e8 72 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	83 c4 1c             	add    esp,0x1c
c000b664:	5b                   	pop    ebx
c000b665:	5e                   	pop    esi
c000b666:	5f                   	pop    edi
c000b667:	5d                   	pop    ebp
c000b668:	c3                   	ret    
c000b669:	90                   	nop

c000b66a <VgaText::write(unsigned long long, void*, int*)>:
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b675:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b679:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b67d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b684:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b687:	39 eb                	cmp    ebx,ebp
c000b689:	74 13                	je     c000b69e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b68b:	43                   	inc    ebx
c000b68c:	50                   	push   eax
c000b68d:	50                   	push   eax
c000b68e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b692:	50                   	push   eax
c000b693:	56                   	push   esi
c000b694:	e8 17 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	eb e9                	jmp    c000b687 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b6a8:	56                   	push   esi
c000b6a9:	e8 22 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b6ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6b2:	89 38                	mov    DWORD PTR [eax],edi
c000b6b4:	83 c4 1c             	add    esp,0x1c
c000b6b7:	31 c0                	xor    eax,eax
c000b6b9:	5b                   	pop    ebx
c000b6ba:	5e                   	pop    esi
c000b6bb:	5f                   	pop    edi
c000b6bc:	5d                   	pop    ebp
c000b6bd:	c3                   	ret    

c000b6be <newTerminal(char*)>:
c000b6be:	83 ec 28             	sub    esp,0x28
c000b6c1:	68 b4 01 00 00       	push   0x1b4
c000b6c6:	e8 1c e7 ff ff       	call   c0009de7 <malloc>
c000b6cb:	5a                   	pop    edx
c000b6cc:	59                   	pop    ecx
c000b6cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6d1:	50                   	push   eax
c000b6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6d6:	e8 2d fd ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	83 c4 2c             	add    esp,0x2c
c000b6e2:	c3                   	ret    
c000b6e3:	90                   	nop

c000b6e4 <TSS::TSS()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b6ef:	90                   	nop
c000b6f0:	c3                   	ret    
c000b6f1:	90                   	nop
c000b6f2:	66 90                	xchg   ax,ax

c000b6f4 <TSS::setESP(unsigned long)>:
c000b6f4:	55                   	push   ebp
c000b6f5:	89 e5                	mov    ebp,esp
c000b6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b700:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b703:	90                   	nop
c000b704:	5d                   	pop    ebp
c000b705:	c3                   	ret    
c000b706:	66 90                	xchg   ax,ax

c000b708 <TSS::flush()>:
c000b708:	55                   	push   ebp
c000b709:	89 e5                	mov    ebp,esp
c000b70b:	83 ec 10             	sub    esp,0x10
c000b70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b711:	8b 00                	mov    eax,DWORD PTR [eax]
c000b713:	83 c8 03             	or     eax,0x3
c000b716:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b71a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b71e:	66 89 d0             	mov    ax,dx
c000b721:	0f 00 d8             	ltr    ax
c000b724:	90                   	nop
c000b725:	c9                   	leave  
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <TSS::setup(unsigned long, unsigned long)>:
c000b728:	55                   	push   ebp
c000b729:	89 e5                	mov    ebp,esp
c000b72b:	83 ec 18             	sub    esp,0x18
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	6a 68                	push   0x68
c000b733:	e8 af e6 ff ff       	call   c0009de7 <malloc>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	89 c2                	mov    edx,eax
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	6a 68                	push   0x68
c000b74e:	6a 00                	push   0x0
c000b750:	50                   	push   eax
c000b751:	e8 3e 4f ff ff       	call   c0000694 <memset>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b77a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b783:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b7ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b7da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7f0:	0f 20 da             	mov    edx,cr3
c000b7f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b7f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b7f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b802:	83 ec 08             	sub    esp,0x8
c000b805:	50                   	push   eax
c000b806:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b809:	50                   	push   eax
c000b80a:	e8 bf dd ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 ec 08             	sub    esp,0x8
c000b815:	6a 68                	push   0x68
c000b817:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b81a:	50                   	push   eax
c000b81b:	e8 ca dd ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b820:	83 c4 10             	add    esp,0x10
c000b823:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b827:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b82a:	83 e0 0f             	and    eax,0xf
c000b82d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b830:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b833:	83 c8 40             	or     eax,0x40
c000b836:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b839:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000b83e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b844:	05 78 01 00 00       	add    eax,0x178
c000b849:	83 ec 04             	sub    esp,0x4
c000b84c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b84f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b852:	50                   	push   eax
c000b853:	e8 c6 dd ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	89 c2                	mov    edx,eax
c000b85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b860:	89 10                	mov    DWORD PTR [eax],edx
c000b862:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000b867:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b86d:	05 78 01 00 00       	add    eax,0x178
c000b872:	83 ec 0c             	sub    esp,0xc
c000b875:	50                   	push   eax
c000b876:	e8 cd dd ff ff       	call   c0009648 <GDT::flush()>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	8b 00                	mov    eax,DWORD PTR [eax]
c000b883:	c9                   	leave  
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b891:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b896:	75 08                	jne    c000b8a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b898:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b89e:	eb 38                	jmp    c000b8d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b8a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8a5:	75 17                	jne    c000b8be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b8be:	89 c1                	mov    ecx,eax
c000b8c0:	83 e1 fd             	and    ecx,0xfffffffd
c000b8c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b8c9:	74 cd                	je     c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8d0:	83 e0 ef             	and    eax,0xffffffef
c000b8d3:	83 f8 08             	cmp    eax,0x8
c000b8d6:	76 c0                	jbe    c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8d8:	31 c0                	xor    eax,eax
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <ReservedFilename::isAtty()>:
c000b8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b8e3:	31 c0                	xor    eax,eax
c000b8e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b8eb:	74 09                	je     c000b8f6 <ReservedFilename::isAtty()+0x1a>
c000b8ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b8f3:	0f 94 c0             	sete   al
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b907:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b90c:	75 08                	jne    c000b916 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b90e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b914:	eb 3d                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b916:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b91b:	75 17                	jne    c000b934 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b92b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b931:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b934:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b939:	75 04                	jne    c000b93f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b93b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b93d:	eb 14                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b93f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b944:	74 c8                	je     c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b946:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b94b:	83 e0 ef             	and    eax,0xffffffef
c000b94e:	83 f8 08             	cmp    eax,0x8
c000b951:	76 bb                	jbe    c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b953:	31 c0                	xor    eax,eax
c000b955:	c3                   	ret    

c000b956 <UnixFile::getFileDescriptor()>:
c000b956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b95d:	c3                   	ret    

c000b95e <UnixFile::UnixFile(int)>:
c000b95e:	53                   	push   ebx
c000b95f:	83 ec 28             	sub    esp,0x28
c000b962:	ba 44 4e 02 c0       	mov    edx,0xc0024e44
c000b967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96b:	89 10                	mov    DWORD PTR [eax],edx
c000b96d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b975:	0f 8f 8c 01 00 00    	jg     c000bb07 <UnixFile::UnixFile(int)+0x1a9>
c000b97b:	a1 80 80 02 c0       	mov    eax,ds:0xc0028080
c000b980:	8d 50 01             	lea    edx,[eax+0x1]
c000b983:	89 15 80 80 02 c0    	mov    DWORD PTR ds:0xc0028080,edx
c000b989:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b98d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b990:	83 ec 08             	sub    esp,0x8
c000b993:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b997:	68 58 8d 02 c0       	push   0xc0028d58
c000b99c:	e8 57 79 01 00       	call   c00232f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	a0 54 8d 02 c0       	mov    al,ds:0xc0028d54
c000b9a9:	83 f0 01             	xor    eax,0x1
c000b9ac:	84 c0                	test   al,al
c000b9ae:	0f 84 54 01 00 00    	je     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000b9b4:	c6 05 54 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d54,0x1
c000b9bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ca:	e8 18 e4 ff ff       	call   c0009de7 <malloc>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 c3                	mov    ebx,eax
c000b9d4:	83 ec 08             	sub    esp,0x8
c000b9d7:	68 03 ff ff 0f       	push   0xfffff03
c000b9dc:	53                   	push   ebx
c000b9dd:	e8 2c 01 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000b9e2:	83 c4 10             	add    esp,0x10
c000b9e5:	89 1d 4c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d4c,ebx
c000b9eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 e8 e3 ff ff       	call   c0009de7 <malloc>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	89 c3                	mov    ebx,eax
c000ba04:	83 ec 08             	sub    esp,0x8
c000ba07:	68 01 ff ff 0f       	push   0xfffff01
c000ba0c:	53                   	push   ebx
c000ba0d:	e8 fc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	89 1d 50 8d 02 c0    	mov    DWORD PTR ds:0xc0028d50,ebx
c000ba1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000ba23:	83 ec 0c             	sub    esp,0xc
c000ba26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba2a:	e8 b8 e3 ff ff       	call   c0009de7 <malloc>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 c3                	mov    ebx,eax
c000ba34:	83 ec 08             	sub    esp,0x8
c000ba37:	68 00 ff ff 0f       	push   0xfffff00
c000ba3c:	53                   	push   ebx
c000ba3d:	e8 cc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	89 1d 44 8d 02 c0    	mov    DWORD PTR ds:0xc0028d44,ebx
c000ba4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba5a:	e8 88 e3 ff ff       	call   c0009de7 <malloc>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	89 c3                	mov    ebx,eax
c000ba64:	83 ec 08             	sub    esp,0x8
c000ba67:	68 02 ff ff 0f       	push   0xfffff02
c000ba6c:	53                   	push   ebx
c000ba6d:	e8 9c 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	89 1d 48 8d 02 c0    	mov    DWORD PTR ds:0xc0028d48,ebx
c000ba7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba88:	7f 7e                	jg     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000ba8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba99:	e8 49 e3 ff ff       	call   c0009de7 <malloc>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 c3                	mov    ebx,eax
c000baa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baa7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000baac:	83 ec 08             	sub    esp,0x8
c000baaf:	50                   	push   eax
c000bab0:	53                   	push   ebx
c000bab1:	e8 58 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000babd:	89 1c 85 20 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd72e0],ebx
c000bac4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000bacc:	83 ec 0c             	sub    esp,0xc
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	e8 0f e3 ff ff       	call   c0009de7 <malloc>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 c3                	mov    ebx,eax
c000badd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bae1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000bae6:	83 ec 08             	sub    esp,0x8
c000bae9:	50                   	push   eax
c000baea:	53                   	push   ebx
c000baeb:	e8 1e 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baf7:	89 1c 85 e0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7320],ebx
c000bafe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bb02:	e9 7c ff ff ff       	jmp    c000ba83 <UnixFile::UnixFile(int)+0x125>
c000bb07:	90                   	nop
c000bb08:	83 c4 28             	add    esp,0x28
c000bb0b:	5b                   	pop    ebx
c000bb0c:	c3                   	ret    
c000bb0d:	90                   	nop

c000bb0e <ReservedFilename::ReservedFilename(int)>:
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb15:	83 ec 08             	sub    esp,0x8
c000bb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1c:	50                   	push   eax
c000bb1d:	e8 3c fe ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c000bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2e:	89 10                	mov    DWORD PTR [eax],edx
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bb3b:	90                   	nop
c000bb3c:	83 c4 0c             	add    esp,0xc
c000bb3f:	c3                   	ret    

c000bb40 <UnixFile::~UnixFile()>:
c000bb40:	83 ec 1c             	sub    esp,0x1c
c000bb43:	ba 44 4e 02 c0       	mov    edx,0xc0024e44
c000bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4c:	89 10                	mov    DWORD PTR [eax],edx
c000bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bb5a:	7f 73                	jg     c000bbcf <UnixFile::~UnixFile()+0x8f>
c000bb5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb64:	83 ec 0c             	sub    esp,0xc
c000bb67:	68 58 8d 02 c0       	push   0xc0028d58
c000bb6c:	e8 5b 78 01 00       	call   c00233cc <LinkedList<UnixFile>::getFirstElement()>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	68 58 8d 02 c0       	push   0xc0028d58
c000bb80:	e8 4f 78 01 00       	call   c00233d4 <LinkedList<UnixFile>::removeFirst()>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb90:	74 40                	je     c000bbd2 <UnixFile::~UnixFile()+0x92>
c000bb92:	83 ec 08             	sub    esp,0x8
c000bb95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb99:	68 58 8d 02 c0       	push   0xc0028d58
c000bb9e:	e8 55 77 01 00       	call   c00232f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbaa:	8d 50 01             	lea    edx,[eax+0x1]
c000bbad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbb1:	3d 88 13 00 00       	cmp    eax,0x1388
c000bbb6:	0f 94 c0             	sete   al
c000bbb9:	84 c0                	test   al,al
c000bbbb:	74 a7                	je     c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	68 1c 4e 02 c0       	push   0xc0024e1c
c000bbc5:	e8 5f 96 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	eb 95                	jmp    c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbcf:	90                   	nop
c000bbd0:	eb 01                	jmp    c000bbd3 <UnixFile::~UnixFile()+0x93>
c000bbd2:	90                   	nop
c000bbd3:	90                   	nop
c000bbd4:	83 c4 1c             	add    esp,0x1c
c000bbd7:	c3                   	ret    

c000bbd8 <UnixFile::~UnixFile()>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	83 ec 0c             	sub    esp,0xc
c000bbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe2:	e8 59 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	83 ec 08             	sub    esp,0x8
c000bbed:	6a 0c                	push   0xc
c000bbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf3:	e8 70 14 00 00       	call   c000d068 <operator delete(void*, unsigned long)>
c000bbf8:	83 c4 10             	add    esp,0x10
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    
c000bbff:	90                   	nop

c000bc00 <ReservedFilename::~ReservedFilename()>:
c000bc00:	83 ec 0c             	sub    esp,0xc
c000bc03:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c000bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0c:	89 10                	mov    DWORD PTR [eax],edx
c000bc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc12:	83 ec 0c             	sub    esp,0xc
c000bc15:	50                   	push   eax
c000bc16:	e8 25 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	90                   	nop
c000bc1f:	83 c4 0c             	add    esp,0xc
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <ReservedFilename::~ReservedFilename()>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	83 ec 0c             	sub    esp,0xc
c000bc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2e:	e8 cd ff ff ff       	call   c000bc00 <ReservedFilename::~ReservedFilename()>
c000bc33:	83 c4 10             	add    esp,0x10
c000bc36:	83 ec 08             	sub    esp,0x8
c000bc39:	6a 0c                	push   0xc
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	e8 24 14 00 00       	call   c000d068 <operator delete(void*, unsigned long)>
c000bc44:	83 c4 10             	add    esp,0x10
c000bc47:	83 c4 0c             	add    esp,0xc
c000bc4a:	c3                   	ret    

c000bc4b <getFromFileDescriptor(int)>:
c000bc4b:	53                   	push   ebx
c000bc4c:	83 ec 08             	sub    esp,0x8
c000bc4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc53:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bc59:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bc5f:	7f 2c                	jg     c000bc8d <getFromFileDescriptor(int)+0x42>
c000bc61:	83 ec 0c             	sub    esp,0xc
c000bc64:	68 58 8d 02 c0       	push   0xc0028d58
c000bc69:	e8 5e 77 01 00       	call   c00233cc <LinkedList<UnixFile>::getFirstElement()>
c000bc6e:	83 c4 10             	add    esp,0x10
c000bc71:	85 c0                	test   eax,eax
c000bc73:	75 04                	jne    c000bc79 <getFromFileDescriptor(int)+0x2e>
c000bc75:	31 c0                	xor    eax,eax
c000bc77:	eb 6e                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc79:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc7c:	74 69                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc7e:	52                   	push   edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	68 58 8d 02 c0       	push   0xc0028d58
c000bc86:	e8 eb 77 01 00       	call   c0023476 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc8b:	eb e1                	jmp    c000bc6e <getFromFileDescriptor(int)+0x23>
c000bc8d:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c000bc92:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc98:	74 4d                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc9a:	a1 50 8d 02 c0       	mov    eax,ds:0xc0028d50
c000bc9f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bca5:	74 40                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bca7:	a1 48 8d 02 c0       	mov    eax,ds:0xc0028d48
c000bcac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bcb2:	74 33                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcb4:	a1 44 8d 02 c0       	mov    eax,ds:0xc0028d44
c000bcb9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bcbf:	74 26                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcc1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bcc7:	83 f8 08             	cmp    eax,0x8
c000bcca:	77 09                	ja     c000bcd5 <getFromFileDescriptor(int)+0x8a>
c000bccc:	8b 04 85 20 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd72e0]
c000bcd3:	eb 12                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcd5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bcdb:	83 fb 08             	cmp    ebx,0x8
c000bcde:	77 95                	ja     c000bc75 <getFromFileDescriptor(int)+0x2a>
c000bce0:	8b 04 9d e0 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7320]
c000bce7:	83 c4 08             	add    esp,0x8
c000bcea:	5b                   	pop    ebx
c000bceb:	c3                   	ret    

c000bcec <__static_initialization_and_destruction_0(int, int)>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bcf4:	75 34                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bcf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bcfe:	75 2a                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd00:	83 ec 0c             	sub    esp,0xc
c000bd03:	68 58 8d 02 c0       	push   0xc0028d58
c000bd08:	e8 a9 75 01 00       	call   c00232b6 <LinkedList<UnixFile>::LinkedList()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	83 ec 04             	sub    esp,0x4
c000bd13:	68 b8 7e 02 c0       	push   0xc0027eb8
c000bd18:	68 58 8d 02 c0       	push   0xc0028d58
c000bd1d:	68 b4 32 02 c0       	push   0xc00232b4
c000bd22:	e8 bb 12 00 00       	call   c000cfe2 <__cxa_atexit>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	90                   	nop
c000bd2b:	83 c4 0c             	add    esp,0xc
c000bd2e:	c3                   	ret    

c000bd2f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bd2f:	83 ec 0c             	sub    esp,0xc
c000bd32:	83 ec 08             	sub    esp,0x8
c000bd35:	68 ff ff 00 00       	push   0xffff
c000bd3a:	6a 01                	push   0x1
c000bd3c:	e8 ab ff ff ff       	call   c000bcec <__static_initialization_and_destruction_0(int, int)>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	83 c4 0c             	add    esp,0xc
c000bd47:	c3                   	ret    

c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bd48:	53                   	push   ebx
c000bd49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd51:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bd57:	89 c8                	mov    eax,ecx
c000bd59:	d1 e8                	shr    eax,1
c000bd5b:	03 05 88 80 02 c0    	add    eax,DWORD PTR ds:0xc0028088
c000bd61:	83 e1 01             	and    ecx,0x1
c000bd64:	8a 10                	mov    dl,BYTE PTR [eax]
c000bd66:	75 09                	jne    c000bd71 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd68:	83 e2 f0             	and    edx,0xfffffff0
c000bd6b:	09 da                	or     edx,ebx
c000bd6d:	88 10                	mov    BYTE PTR [eax],dl
c000bd6f:	5b                   	pop    ebx
c000bd70:	c3                   	ret    
c000bd71:	c1 e3 04             	shl    ebx,0x4
c000bd74:	83 e2 0f             	and    edx,0xf
c000bd77:	09 da                	or     edx,ebx
c000bd79:	88 10                	mov    BYTE PTR [eax],dl
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    

c000bd7d <Virt::getPageState(unsigned long)>:
c000bd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd81:	8b 0d 88 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028088
c000bd87:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd8d:	89 d0                	mov    eax,edx
c000bd8f:	d1 e8                	shr    eax,1
c000bd91:	83 e2 01             	and    edx,0x1
c000bd94:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd97:	75 04                	jne    c000bd9d <Virt::getPageState(unsigned long)+0x20>
c000bd99:	83 e0 0f             	and    eax,0xf
c000bd9c:	c3                   	ret    
c000bd9d:	c0 e8 04             	shr    al,0x4
c000bda0:	c3                   	ret    

c000bda1 <Virt::allocateKernelVirtualPages(int)>:
c000bda1:	55                   	push   ebp
c000bda2:	31 ed                	xor    ebp,ebp
c000bda4:	57                   	push   edi
c000bda5:	56                   	push   esi
c000bda6:	53                   	push   ebx
c000bda7:	31 db                	xor    ebx,ebx
c000bda9:	83 ec 1c             	sub    esp,0x1c
c000bdac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdb0:	8b 3d 84 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028084
c000bdb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bdbb:	57                   	push   edi
c000bdbc:	e8 bc ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdc1:	5a                   	pop    edx
c000bdc2:	84 c0                	test   al,al
c000bdc4:	75 3a                	jne    c000be00 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bdc6:	85 db                	test   ebx,ebx
c000bdc8:	75 02                	jne    c000bdcc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bdca:	89 fd                	mov    ebp,edi
c000bdcc:	43                   	inc    ebx
c000bdcd:	39 f3                	cmp    ebx,esi
c000bdcf:	74 5a                	je     c000be2b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bdd1:	47                   	inc    edi
c000bdd2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bdd8:	76 31                	jbe    c000be0b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bdda:	c7 05 84 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028084,0xc8000
c000bde4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bde9:	75 28                	jne    c000be13 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bdeb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bdf0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bdf5:	57                   	push   edi
c000bdf6:	e8 82 ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdfb:	5a                   	pop    edx
c000bdfc:	84 c0                	test   al,al
c000bdfe:	74 c6                	je     c000bdc6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000be00:	31 db                	xor    ebx,ebx
c000be02:	47                   	inc    edi
c000be03:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000be09:	77 cf                	ja     c000bdda <Virt::allocateKernelVirtualPages(int)+0x39>
c000be0b:	89 3d 84 80 02 c0    	mov    DWORD PTR ds:0xc0028084,edi
c000be11:	eb a8                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	68 74 4e 02 c0       	push   0xc0024e74
c000be1b:	e8 09 94 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000be20:	8b 3d 84 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028084
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	eb 90                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be2b:	89 2d 84 80 02 c0    	mov    DWORD PTR ds:0xc0028084,ebp
c000be31:	4b                   	dec    ebx
c000be32:	74 5f                	je     c000be93 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000be34:	85 f6                	test   esi,esi
c000be36:	74 3d                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be38:	89 e8                	mov    eax,ebp
c000be3a:	31 db                	xor    ebx,ebx
c000be3c:	8d 7e ff             	lea    edi,[esi-0x1]
c000be3f:	eb 14                	jmp    c000be55 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000be41:	6a 01                	push   0x1
c000be43:	43                   	inc    ebx
c000be44:	50                   	push   eax
c000be45:	e8 fe fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4a:	58                   	pop    eax
c000be4b:	39 f3                	cmp    ebx,esi
c000be4d:	5a                   	pop    edx
c000be4e:	74 25                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be50:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000be55:	8d 50 01             	lea    edx,[eax+0x1]
c000be58:	85 db                	test   ebx,ebx
c000be5a:	89 15 84 80 02 c0    	mov    DWORD PTR ds:0xc0028084,edx
c000be60:	74 20                	je     c000be82 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000be62:	39 df                	cmp    edi,ebx
c000be64:	75 db                	jne    c000be41 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000be66:	6a 03                	push   0x3
c000be68:	43                   	inc    ebx
c000be69:	50                   	push   eax
c000be6a:	e8 d9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be6f:	59                   	pop    ecx
c000be70:	39 f3                	cmp    ebx,esi
c000be72:	58                   	pop    eax
c000be73:	75 db                	jne    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be75:	83 c4 1c             	add    esp,0x1c
c000be78:	89 e8                	mov    eax,ebp
c000be7a:	5b                   	pop    ebx
c000be7b:	c1 e0 0c             	shl    eax,0xc
c000be7e:	5e                   	pop    esi
c000be7f:	5f                   	pop    edi
c000be80:	5d                   	pop    ebp
c000be81:	c3                   	ret    
c000be82:	6a 02                	push   0x2
c000be84:	bb 01 00 00 00       	mov    ebx,0x1
c000be89:	50                   	push   eax
c000be8a:	e8 b9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be8f:	58                   	pop    eax
c000be90:	5a                   	pop    edx
c000be91:	eb bd                	jmp    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be93:	6a 04                	push   0x4
c000be95:	8d 45 01             	lea    eax,[ebp+0x1]
c000be98:	55                   	push   ebp
c000be99:	a3 84 80 02 c0       	mov    ds:0xc0028084,eax
c000be9e:	e8 a5 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bea3:	59                   	pop    ecx
c000bea4:	89 e8                	mov    eax,ebp
c000bea6:	5b                   	pop    ebx
c000bea7:	c1 e0 0c             	shl    eax,0xc
c000beaa:	83 c4 1c             	add    esp,0x1c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <Virt::freeSwapfilePage(unsigned long)>:
c000beb2:	53                   	push   ebx
c000beb3:	8b 15 70 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d70
c000beb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bebd:	b8 01 00 00 00       	mov    eax,0x1
c000bec2:	89 cb                	mov    ebx,ecx
c000bec4:	d3 e0                	shl    eax,cl
c000bec6:	c1 eb 05             	shr    ebx,0x5
c000bec9:	f7 d0                	not    eax
c000becb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bece:	5b                   	pop    ebx
c000becf:	c3                   	ret    

c000bed0 <Virt::swapIDToSector(unsigned long)>:
c000bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bed4:	0f af 05 8c 80 02 c0 	imul   eax,DWORD PTR ds:0xc002808c
c000bedb:	03 05 94 80 02 c0    	add    eax,DWORD PTR ds:0xc0028094
c000bee1:	c3                   	ret    

c000bee2 <Virt::allocateSwapfilePage()>:
c000bee2:	55                   	push   ebp
c000bee3:	31 d2                	xor    edx,edx
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 0d 8c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002808c
c000bef1:	a1 90 80 02 c0       	mov    eax,ds:0xc0028090
c000bef6:	f7 f1                	div    ecx
c000bef8:	39 0d 90 80 02 c0    	cmp    DWORD PTR ds:0xc0028090,ecx
c000befe:	72 2d                	jb     c000bf2d <Virt::allocateSwapfilePage()+0x4b>
c000bf00:	8b 35 70 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d70
c000bf06:	8b 16                	mov    edx,DWORD PTR [esi]
c000bf08:	f6 c2 01             	test   dl,0x1
c000bf0b:	74 3c                	je     c000bf49 <Virt::allocateSwapfilePage()+0x67>
c000bf0d:	31 c9                	xor    ecx,ecx
c000bf0f:	bf 01 00 00 00       	mov    edi,0x1
c000bf14:	eb 12                	jmp    c000bf28 <Virt::allocateSwapfilePage()+0x46>
c000bf16:	89 fd                	mov    ebp,edi
c000bf18:	89 ca                	mov    edx,ecx
c000bf1a:	d3 e5                	shl    ebp,cl
c000bf1c:	c1 ea 05             	shr    edx,0x5
c000bf1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bf22:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf24:	85 ea                	test   edx,ebp
c000bf26:	74 2a                	je     c000bf52 <Virt::allocateSwapfilePage()+0x70>
c000bf28:	41                   	inc    ecx
c000bf29:	39 c8                	cmp    eax,ecx
c000bf2b:	77 e9                	ja     c000bf16 <Virt::allocateSwapfilePage()+0x34>
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	68 2c 50 02 c0       	push   0xc002502c
c000bf35:	e8 ef 92 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	31 c9                	xor    ecx,ecx
c000bf3f:	83 c4 0c             	add    esp,0xc
c000bf42:	89 c8                	mov    eax,ecx
c000bf44:	5b                   	pop    ebx
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	5d                   	pop    ebp
c000bf48:	c3                   	ret    
c000bf49:	89 f3                	mov    ebx,esi
c000bf4b:	bd 01 00 00 00       	mov    ebp,0x1
c000bf50:	31 c9                	xor    ecx,ecx
c000bf52:	09 ea                	or     edx,ebp
c000bf54:	89 c8                	mov    eax,ecx
c000bf56:	89 13                	mov    DWORD PTR [ebx],edx
c000bf58:	83 c4 0c             	add    esp,0xc
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    

c000bf60 <Virt::virtualMemorySetup()>:
c000bf60:	53                   	push   ebx
c000bf61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf66:	6a 0f                	push   0xf
c000bf68:	53                   	push   ebx
c000bf69:	43                   	inc    ebx
c000bf6a:	e8 d9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf6f:	58                   	pop    eax
c000bf70:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf76:	5a                   	pop    edx
c000bf77:	75 ed                	jne    c000bf66 <Virt::virtualMemorySetup()+0x6>
c000bf79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf7e:	6a 00                	push   0x0
c000bf80:	53                   	push   ebx
c000bf81:	43                   	inc    ebx
c000bf82:	e8 c1 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf87:	59                   	pop    ecx
c000bf88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf8e:	58                   	pop    eax
c000bf8f:	75 ed                	jne    c000bf7e <Virt::virtualMemorySetup()+0x1e>
c000bf91:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf96:	6a 0f                	push   0xf
c000bf98:	53                   	push   ebx
c000bf99:	43                   	inc    ebx
c000bf9a:	e8 a9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf9f:	58                   	pop    eax
c000bfa0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bfa6:	5a                   	pop    edx
c000bfa7:	75 ed                	jne    c000bf96 <Virt::virtualMemorySetup()+0x36>
c000bfa9:	5b                   	pop    ebx
c000bfaa:	c3                   	ret    

c000bfab <Virt::setupPageSwapping(int)>:
c000bfab:	53                   	push   ebx
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfb3:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c000bfb8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfbe:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfc0:	53                   	push   ebx
c000bfc1:	c1 e3 0b             	shl    ebx,0xb
c000bfc4:	68 43 50 02 c0       	push   0xc0025043
c000bfc9:	50                   	push   eax
c000bfca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bfcd:	89 1d 90 80 02 c0    	mov    DWORD PTR ds:0xc0028090,ebx
c000bfd3:	c6 05 98 80 02 c0 43 	mov    BYTE PTR ds:0xc0028098,0x43
c000bfda:	c1 eb 08             	shr    ebx,0x8
c000bfdd:	a3 94 80 02 c0       	mov    ds:0xc0028094,eax
c000bfe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bfe5:	c7 05 8c 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002808c,0x8
c000bfef:	e8 f3 dd ff ff       	call   c0009de7 <malloc>
c000bff4:	83 c4 0c             	add    esp,0xc
c000bff7:	89 c1                	mov    ecx,eax
c000bff9:	a3 70 8d 02 c0       	mov    ds:0xc0028d70,eax
c000bffe:	31 d2                	xor    edx,edx
c000c000:	a1 90 80 02 c0       	mov    eax,ds:0xc0028090
c000c005:	f7 35 8c 80 02 c0    	div    DWORD PTR ds:0xc002808c
c000c00b:	c1 e8 05             	shr    eax,0x5
c000c00e:	50                   	push   eax
c000c00f:	6a 00                	push   0x0
c000c011:	51                   	push   ecx
c000c012:	e8 7d 46 ff ff       	call   c0000694 <memset>
c000c017:	83 c4 18             	add    esp,0x18
c000c01a:	5b                   	pop    ebx
c000c01b:	c3                   	ret    

c000c01c <VAS::VAS(VAS*)>:
c000c01c:	83 ec 0c             	sub    esp,0xc
c000c01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c023:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c035:	83 ec 0c             	sub    esp,0xc
c000c038:	68 94 4e 02 c0       	push   0xc0024e94
c000c03d:	e8 e7 91 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	90                   	nop
c000c046:	83 c4 0c             	add    esp,0xc
c000c049:	c3                   	ret    

c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c04a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c04e:	89 c2                	mov    edx,eax
c000c050:	c1 e8 0a             	shr    eax,0xa
c000c053:	c1 ea 16             	shr    edx,0x16
c000c056:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c05b:	19 c9                	sbb    ecx,ecx
c000c05d:	c1 e2 0c             	shl    edx,0xc
c000c060:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c066:	25 fc 0f 00 00       	and    eax,0xffc
c000c06b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c072:	01 d0                	add    eax,edx
c000c074:	c3                   	ret    
c000c075:	90                   	nop

c000c076 <VAS::getPageTableEntry(unsigned long)>:
c000c076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c07a:	89 ca                	mov    edx,ecx
c000c07c:	c1 e9 0a             	shr    ecx,0xa
c000c07f:	c1 ea 16             	shr    edx,0x16
c000c082:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c088:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c08e:	c1 e0 0c             	shl    eax,0xc
c000c091:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c094:	c3                   	ret    

c000c095 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c095:	57                   	push   edi
c000c096:	56                   	push   esi
c000c097:	be 01 00 00 00       	mov    esi,0x1
c000c09c:	53                   	push   ebx
c000c09d:	83 ec 10             	sub    esp,0x10
c000c0a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0a4:	c1 eb 0c             	shr    ebx,0xc
c000c0a7:	eb 3f                	jmp    c000c0e8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c0a9:	83 ec 08             	sub    esp,0x8
c000c0ac:	57                   	push   edi
c000c0ad:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c000c0b3:	e8 be ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0c1:	f6 c4 04             	test   ah,0x4
c000c0c4:	75 5f                	jne    c000c125 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c0c6:	80 fa 04             	cmp    dl,0x4
c000c0c9:	74 78                	je     c000c143 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c0cb:	80 fa 02             	cmp    dl,0x2
c000c0ce:	0f 84 88 00 00 00    	je     c000c15c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c0d4:	80 fa 03             	cmp    dl,0x3
c000c0d7:	0f 84 ad 00 00 00    	je     c000c18a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c0dd:	fe ca                	dec    dl
c000c0df:	0f 84 92 00 00 00    	je     c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0e5:	43                   	inc    ebx
c000c0e6:	31 f6                	xor    esi,esi
c000c0e8:	53                   	push   ebx
c000c0e9:	89 df                	mov    edi,ebx
c000c0eb:	e8 8d fc ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000c0f0:	c1 e7 0c             	shl    edi,0xc
c000c0f3:	59                   	pop    ecx
c000c0f4:	84 c0                	test   al,al
c000c0f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0fa:	75 ad                	jne    c000c0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0fc:	83 ec 0c             	sub    esp,0xc
c000c0ff:	68 5a 50 02 c0       	push   0xc002505a
c000c104:	e8 20 91 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c109:	58                   	pop    eax
c000c10a:	5a                   	pop    edx
c000c10b:	57                   	push   edi
c000c10c:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c000c112:	e8 5f ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c11c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c120:	f6 c4 04             	test   ah,0x4
c000c123:	74 c0                	je     c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c125:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c129:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	50                   	push   eax
c000c132:	e8 e4 e2 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c13e:	80 fa 04             	cmp    dl,0x4
c000c141:	75 88                	jne    c000c0cb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c143:	89 f0                	mov    eax,esi
c000c145:	84 c0                	test   al,al
c000c147:	75 47                	jne    c000c190 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c149:	c7 44 24 20 b8 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024eb8
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	5b                   	pop    ebx
c000c155:	5e                   	pop    esi
c000c156:	5f                   	pop    edi
c000c157:	e9 cd 90 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c000c15c:	89 f0                	mov    eax,esi
c000c15e:	84 c0                	test   al,al
c000c160:	75 15                	jne    c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c162:	83 ec 0c             	sub    esp,0xc
c000c165:	68 76 50 02 c0       	push   0xc0025076
c000c16a:	e8 ba 90 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	e9 6e ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c177:	83 ec 08             	sub    esp,0x8
c000c17a:	6a 00                	push   0x0
c000c17c:	53                   	push   ebx
c000c17d:	e8 c6 fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	e9 5b ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c18a:	89 f0                	mov    eax,esi
c000c18c:	84 c0                	test   al,al
c000c18e:	75 15                	jne    c000c1a5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	6a 00                	push   0x0
c000c195:	53                   	push   ebx
c000c196:	e8 ad fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	5f                   	pop    edi
c000c1a4:	c3                   	ret    
c000c1a5:	c7 44 24 20 92 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025092
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	5b                   	pop    ebx
c000c1b1:	5e                   	pop    esi
c000c1b2:	5f                   	pop    edi
c000c1b3:	e9 71 90 00 00       	jmp    c0015229 <Krnl::panic(char const*)>

c000c1b8 <VAS::freeAllocatedPages(unsigned long)>:
c000c1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c1c4:	74 09                	je     c000c1cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c1c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1ca:	e9 c6 fe ff ff       	jmp    c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1cf:	c7 44 24 04 dc 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024edc
c000c1d7:	e9 6d 0f 00 00       	jmp    c000d149 <Dbg::kprintf(char const*, ...)>

c000c1dc <VAS::virtualToPhysical(unsigned long)>:
c000c1dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e4:	e8 8d fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c1e9:	5a                   	pop    edx
c000c1ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1ec:	59                   	pop    ecx
c000c1ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1f4:	55                   	push   ebp
c000c1f5:	57                   	push   edi
c000c1f6:	56                   	push   esi
c000c1f7:	53                   	push   ebx
c000c1f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c200:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c204:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c208:	85 db                	test   ebx,ebx
c000c20a:	7e 22                	jle    c000c22e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c20c:	c1 e3 0c             	shl    ebx,0xc
c000c20f:	01 f3                	add    ebx,esi
c000c211:	56                   	push   esi
c000c212:	81 c6 00 10 00 00    	add    esi,0x1000
c000c218:	55                   	push   ebp
c000c219:	e8 58 fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c21e:	5a                   	pop    edx
c000c21f:	59                   	pop    ecx
c000c220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c222:	21 f9                	and    ecx,edi
c000c224:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c228:	39 f3                	cmp    ebx,esi
c000c22a:	89 08                	mov    DWORD PTR [eax],ecx
c000c22c:	75 e3                	jne    c000c211 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c22e:	5b                   	pop    ebx
c000c22f:	5e                   	pop    esi
c000c230:	5f                   	pop    edi
c000c231:	5d                   	pop    ebp
c000c232:	c3                   	ret    
c000c233:	90                   	nop

c000c234 <VAS::setToWriteCombining(unsigned long, int)>:
c000c234:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c239:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c23f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c246:	75 01                	jne    c000c249 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c248:	c3                   	ret    
c000c249:	68 80 00 00 00       	push   0x80
c000c24e:	6a ff                	push   0xffffffff
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c25c:	e8 93 ff ff ff       	call   c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>
c000c261:	83 c4 14             	add    esp,0x14
c000c264:	c3                   	ret    
c000c265:	90                   	nop

c000c266 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c266:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c26f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c276:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c279:	19 c0                	sbb    eax,eax
c000c27b:	83 ca 03             	or     edx,0x3
c000c27e:	83 e0 fc             	and    eax,0xfffffffc
c000c281:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c288:	0f 20 d8             	mov    eax,cr3
c000c28b:	0f 22 d8             	mov    cr3,eax
c000c28e:	c3                   	ret    
c000c28f:	90                   	nop

c000c290 <VAS::~VAS()>:
c000c290:	83 ec 2c             	sub    esp,0x2c
c000c293:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c29b:	fa                   	cli    
c000c29c:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000c2a1:	40                   	inc    eax
c000c2a2:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000c2a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2b1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c2bb:	6a 01                	push   0x1
c000c2bd:	50                   	push   eax
c000c2be:	e8 a3 ff ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c000c2c3:	83 c4 0c             	add    esp,0xc
c000c2c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c2ce:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c2d6:	0f 8f d4 00 00 00    	jg     c000c3b0 <VAS::~VAS()+0x120>
c000c2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2e7:	c1 e2 02             	shl    edx,0x2
c000c2ea:	01 d0                	add    eax,edx
c000c2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f6:	83 e0 01             	and    eax,0x1
c000c2f9:	0f 84 a8 00 00 00    	je     c000c3a7 <VAS::~VAS()+0x117>
c000c2ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c307:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c30f:	7f 72                	jg     c000c383 <VAS::~VAS()+0xf3>
c000c311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c315:	c1 e0 0a             	shl    eax,0xa
c000c318:	89 c2                	mov    edx,eax
c000c31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c31e:	01 d0                	add    eax,edx
c000c320:	c1 e0 0c             	shl    eax,0xc
c000c323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c327:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c32c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c32e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c331:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33b:	6a 01                	push   0x1
c000c33d:	50                   	push   eax
c000c33e:	e8 07 fd ff ff       	call   c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c343:	83 c4 0c             	add    esp,0xc
c000c346:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c34a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c34e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c358:	25 01 04 00 00       	and    eax,0x401
c000c35d:	3d 01 04 00 00       	cmp    eax,0x401
c000c362:	75 19                	jne    c000c37d <VAS::~VAS()+0xed>
c000c364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c368:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c36d:	83 ec 0c             	sub    esp,0xc
c000c370:	50                   	push   eax
c000c371:	e8 a5 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c376:	83 c4 10             	add    esp,0x10
c000c379:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c37d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c381:	eb 84                	jmp    c000c307 <VAS::~VAS()+0x77>
c000c383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c387:	25 00 04 00 00       	and    eax,0x400
c000c38c:	74 19                	je     c000c3a7 <VAS::~VAS()+0x117>
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c397:	83 ec 0c             	sub    esp,0xc
c000c39a:	50                   	push   eax
c000c39b:	e8 7b e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3a7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3ab:	e9 1e ff ff ff       	jmp    c000c2ce <VAS::~VAS()+0x3e>
c000c3b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3b7:	83 ec 0c             	sub    esp,0xc
c000c3ba:	50                   	push   eax
c000c3bb:	e8 d5 fc ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c0:	83 c4 10             	add    esp,0x10
c000c3c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 48 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c3de:	c1 e0 02             	shl    eax,0x2
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	50                   	push   eax
c000c3e5:	68 00 4f 02 c0       	push   0xc0024f00
c000c3ea:	e8 5a 0d 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000c3f7:	48                   	dec    eax
c000c3f8:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000c3fd:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000c402:	85 c0                	test   eax,eax
c000c404:	75 01                	jne    c000c407 <VAS::~VAS()+0x177>
c000c406:	fb                   	sti    
c000c407:	90                   	nop
c000c408:	83 c4 2c             	add    esp,0x2c
c000c40b:	c3                   	ret    

c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c40c:	55                   	push   ebp
c000c40d:	57                   	push   edi
c000c40e:	56                   	push   esi
c000c40f:	53                   	push   ebx
c000c410:	83 ec 1c             	sub    esp,0x1c
c000c413:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c417:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c41b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c421:	77 08                	ja     c000c42b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c423:	0f 20 d8             	mov    eax,cr3
c000c426:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c429:	75 47                	jne    c000c472 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c42b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c42f:	09 d8                	or     eax,ebx
c000c431:	a9 ff 0f 00 00       	test   eax,0xfff
c000c436:	75 57                	jne    c000c48f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c438:	89 de                	mov    esi,ebx
c000c43a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c43d:	c1 ee 16             	shr    esi,0x16
c000c440:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c447:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c44b:	74 54                	je     c000c4a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c44d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c451:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c457:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c45b:	c1 e6 0c             	shl    esi,0xc
c000c45e:	c1 eb 0a             	shr    ebx,0xa
c000c461:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c467:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c46a:	83 c4 1c             	add    esp,0x1c
c000c46d:	5b                   	pop    ebx
c000c46e:	5e                   	pop    esi
c000c46f:	5f                   	pop    edi
c000c470:	5d                   	pop    ebp
c000c471:	c3                   	ret    
c000c472:	83 ec 0c             	sub    esp,0xc
c000c475:	68 20 4f 02 c0       	push   0xc0024f20
c000c47a:	e8 ca 0c 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c486:	09 d8                	or     eax,ebx
c000c488:	a9 ff 0f 00 00       	test   eax,0xfff
c000c48d:	74 a9                	je     c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c48f:	83 ec 0c             	sub    esp,0xc
c000c492:	68 88 4f 02 c0       	push   0xc0024f88
c000c497:	e8 8d 8d 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	eb 97                	jmp    c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4a5:	e8 f4 df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	89 c5                	mov    ebp,eax
c000c4af:	8b 0d 74 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d74
c000c4b5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4b9:	6a 01                	push   0x1
c000c4bb:	e8 e1 f8 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c4c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4c7:	6a 01                	push   0x1
c000c4c9:	50                   	push   eax
c000c4ca:	55                   	push   ebp
c000c4cb:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4d5:	51                   	push   ecx
c000c4d6:	e8 27 02 00 00       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4db:	83 c4 1c             	add    esp,0x1c
c000c4de:	68 00 10 00 00       	push   0x1000
c000c4e3:	6a 00                	push   0x0
c000c4e5:	50                   	push   eax
c000c4e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ea:	e8 a5 41 ff ff       	call   c0000694 <memset>
c000c4ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4f6:	e8 9a fb ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4ff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c502:	83 c4 10             	add    esp,0x10
c000c505:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c508:	e9 40 ff ff ff       	jmp    c000c44d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c50d:	90                   	nop

c000c50e <VAS::allocatePages(int, int)>:
c000c50e:	55                   	push   ebp
c000c50f:	57                   	push   edi
c000c510:	56                   	push   esi
c000c511:	53                   	push   ebx
c000c512:	83 ec 1c             	sub    esp,0x1c
c000c515:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c519:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c51e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c524:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c52a:	83 e0 01             	and    eax,0x1
c000c52d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c531:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c535:	0f 85 cc 00 00 00    	jne    c000c607 <VAS::allocatePages(int, int)+0xf9>
c000c53b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c53e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c542:	85 c0                	test   eax,eax
c000c544:	0f 84 a1 00 00 00    	je     c000c5eb <VAS::allocatePages(int, int)+0xdd>
c000c54a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c54e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c552:	c1 e6 0c             	shl    esi,0xc
c000c555:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c559:	85 c0                	test   eax,eax
c000c55b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c55e:	7e 33                	jle    c000c593 <VAS::allocatePages(int, int)+0x85>
c000c560:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c564:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c568:	81 cd 00 04 00 00    	or     ebp,0x400
c000c56e:	e8 2b df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c573:	55                   	push   ebp
c000c574:	53                   	push   ebx
c000c575:	50                   	push   eax
c000c576:	57                   	push   edi
c000c577:	e8 90 fe ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c57c:	83 c4 10             	add    esp,0x10
c000c57f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c584:	74 03                	je     c000c589 <VAS::allocatePages(int, int)+0x7b>
c000c586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c589:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c58f:	39 de                	cmp    esi,ebx
c000c591:	75 db                	jne    c000c56e <VAS::allocatePages(int, int)+0x60>
c000c593:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c598:	75 12                	jne    c000c5ac <VAS::allocatePages(int, int)+0x9e>
c000c59a:	0f 20 d8             	mov    eax,cr3
c000c59d:	0f 22 d8             	mov    cr3,eax
c000c5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5a4:	83 c4 1c             	add    esp,0x1c
c000c5a7:	5b                   	pop    ebx
c000c5a8:	5e                   	pop    esi
c000c5a9:	5f                   	pop    edi
c000c5aa:	5d                   	pop    ebp
c000c5ab:	c3                   	ret    
c000c5ac:	c1 ee 0a             	shr    esi,0xa
c000c5af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5b3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c5b9:	c1 eb 0a             	shr    ebx,0xa
c000c5bc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c5c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5c8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5ce:	39 c3                	cmp    ebx,eax
c000c5d0:	77 ce                	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c5d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5db:	39 d8                	cmp    eax,ebx
c000c5dd:	73 f3                	jae    c000c5d2 <VAS::allocatePages(int, int)+0xc4>
c000c5df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e3:	83 c4 1c             	add    esp,0x1c
c000c5e6:	5b                   	pop    ebx
c000c5e7:	5e                   	pop    esi
c000c5e8:	5f                   	pop    edi
c000c5e9:	5d                   	pop    ebp
c000c5ea:	c3                   	ret    
c000c5eb:	83 ec 0c             	sub    esp,0xc
c000c5ee:	68 ac 4f 02 c0       	push   0xc0024fac
c000c5f3:	e8 31 8c 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c5f8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	e9 43 ff ff ff       	jmp    c000c54a <VAS::allocatePages(int, int)+0x3c>
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c60e:	e8 8e f7 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c613:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c61f:	0f 87 9b 00 00 00    	ja     c000c6c0 <VAS::allocatePages(int, int)+0x1b2>
c000c625:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c629:	85 d2                	test   edx,edx
c000c62b:	7e 3c                	jle    c000c669 <VAS::allocatePages(int, int)+0x15b>
c000c62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c631:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c639:	c1 e5 0c             	shl    ebp,0xc
c000c63c:	81 ce 00 04 00 00    	or     esi,0x400
c000c642:	01 dd                	add    ebp,ebx
c000c644:	e8 55 de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c649:	56                   	push   esi
c000c64a:	53                   	push   ebx
c000c64b:	50                   	push   eax
c000c64c:	57                   	push   edi
c000c64d:	e8 ba fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c65a:	74 03                	je     c000c65f <VAS::allocatePages(int, int)+0x151>
c000c65c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c65f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c665:	39 dd                	cmp    ebp,ebx
c000c667:	75 db                	jne    c000c644 <VAS::allocatePages(int, int)+0x136>
c000c669:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c66e:	0f 84 26 ff ff ff    	je     c000c59a <VAS::allocatePages(int, int)+0x8c>
c000c674:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c67c:	89 d3                	mov    ebx,edx
c000c67e:	c1 e0 0c             	shl    eax,0xc
c000c681:	c1 eb 0a             	shr    ebx,0xa
c000c684:	01 d0                	add    eax,edx
c000c686:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c68c:	c1 e8 0a             	shr    eax,0xa
c000c68f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c695:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c69a:	2d 00 00 40 00       	sub    eax,0x400000
c000c69f:	39 c3                	cmp    ebx,eax
c000c6a1:	0f 87 f9 fe ff ff    	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c6a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6b0:	39 d8                	cmp    eax,ebx
c000c6b2:	73 f3                	jae    c000c6a7 <VAS::allocatePages(int, int)+0x199>
c000c6b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6b8:	83 c4 1c             	add    esp,0x1c
c000c6bb:	5b                   	pop    ebx
c000c6bc:	5e                   	pop    esi
c000c6bd:	5f                   	pop    edi
c000c6be:	5d                   	pop    ebp
c000c6bf:	c3                   	ret    
c000c6c0:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c6c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c6d2:	0f 84 4d ff ff ff    	je     c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6d8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c6e0:	e9 40 ff ff ff       	jmp    c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6e5:	90                   	nop

c000c6e6 <VAS::setCPUSpecific(unsigned long)>:
c000c6e6:	83 ec 0c             	sub    esp,0xc
c000c6e9:	6a 05                	push   0x5
c000c6eb:	68 00 00 40 c2       	push   0xc2400000
c000c6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f8:	e8 0f fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6fd:	83 c4 1c             	add    esp,0x1c
c000c700:	c3                   	ret    
c000c701:	90                   	nop

c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c702:	55                   	push   ebp
c000c703:	57                   	push   edi
c000c704:	56                   	push   esi
c000c705:	53                   	push   ebx
c000c706:	83 ec 1c             	sub    esp,0x1c
c000c709:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c70e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c712:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c718:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c71c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c722:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c726:	83 e0 01             	and    eax,0x1
c000c729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c72d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c731:	85 c0                	test   eax,eax
c000c733:	7e 39                	jle    c000c76e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c735:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c739:	89 f3                	mov    ebx,esi
c000c73b:	c1 e0 0c             	shl    eax,0xc
c000c73e:	01 f0                	add    eax,esi
c000c740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c744:	55                   	push   ebp
c000c745:	53                   	push   ebx
c000c746:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c74a:	29 f0                	sub    eax,esi
c000c74c:	01 d8                	add    eax,ebx
c000c74e:	50                   	push   eax
c000c74f:	57                   	push   edi
c000c750:	e8 b7 fc ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c75d:	74 03                	je     c000c762 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c75f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c762:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c768:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c76c:	75 d6                	jne    c000c744 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c76e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c773:	75 10                	jne    c000c785 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c775:	0f 20 d8             	mov    eax,cr3
c000c778:	0f 22 d8             	mov    cr3,eax
c000c77b:	83 c4 1c             	add    esp,0x1c
c000c77e:	89 f0                	mov    eax,esi
c000c780:	5b                   	pop    ebx
c000c781:	5e                   	pop    esi
c000c782:	5f                   	pop    edi
c000c783:	5d                   	pop    ebp
c000c784:	c3                   	ret    
c000c785:	89 f3                	mov    ebx,esi
c000c787:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c78b:	c1 eb 0a             	shr    ebx,0xa
c000c78e:	c1 e0 0c             	shl    eax,0xc
c000c791:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c797:	01 f0                	add    eax,esi
c000c799:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c79f:	c1 e8 0a             	shr    eax,0xa
c000c7a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7a7:	2d 00 00 40 00       	sub    eax,0x400000
c000c7ac:	39 c3                	cmp    ebx,eax
c000c7ae:	77 cb                	ja     c000c77b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c7b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7b9:	39 d8                	cmp    eax,ebx
c000c7bb:	73 f3                	jae    c000c7b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c7bd:	83 c4 1c             	add    esp,0x1c
c000c7c0:	89 f0                	mov    eax,esi
c000c7c2:	5b                   	pop    ebx
c000c7c3:	5e                   	pop    esi
c000c7c4:	5f                   	pop    edi
c000c7c5:	5d                   	pop    ebp
c000c7c6:	c3                   	ret    
c000c7c7:	90                   	nop

c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c7c8:	55                   	push   ebp
c000c7c9:	57                   	push   edi
c000c7ca:	56                   	push   esi
c000c7cb:	53                   	push   ebx
c000c7cc:	83 ec 1c             	sub    esp,0x1c
c000c7cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c7d7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c7db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7df:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7e4:	75 4a                	jne    c000c830 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7ed:	c1 eb 16             	shr    ebx,0x16
c000c7f0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7f7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7fb:	74 4d                	je     c000c84a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c801:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c805:	c1 e8 0a             	shr    eax,0xa
c000c808:	80 fa 01             	cmp    dl,0x1
c000c80b:	19 d2                	sbb    edx,edx
c000c80d:	c1 e3 0c             	shl    ebx,0xc
c000c810:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c814:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c81a:	25 fc 0f 00 00       	and    eax,0xffc
c000c81f:	01 d8                	add    eax,ebx
c000c821:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c828:	83 c4 1c             	add    esp,0x1c
c000c82b:	5b                   	pop    ebx
c000c82c:	5e                   	pop    esi
c000c82d:	5f                   	pop    edi
c000c82e:	5d                   	pop    ebp
c000c82f:	c3                   	ret    
c000c830:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	68 d8 4f 02 c0       	push   0xc0024fd8
c000c83c:	e8 e8 89 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000c841:	83 c4 10             	add    esp,0x10
c000c844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c848:	eb 9c                	jmp    c000c7e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c84a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c84e:	e8 4b dc ff ff       	call   c000a49e <Phys::allocatePage()>
c000c853:	83 ec 0c             	sub    esp,0xc
c000c856:	89 c5                	mov    ebp,eax
c000c858:	8b 0d 74 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d74
c000c85e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c862:	6a 01                	push   0x1
c000c864:	e8 38 f5 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c869:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c870:	6a 01                	push   0x1
c000c872:	50                   	push   eax
c000c873:	55                   	push   ebp
c000c874:	81 cd 07 04 00 00    	or     ebp,0x407
c000c87a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c87e:	51                   	push   ecx
c000c87f:	e8 7e fe ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	68 00 10 00 00       	push   0x1000
c000c88c:	6a 00                	push   0x0
c000c88e:	50                   	push   eax
c000c88f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c893:	e8 fc 3d ff ff       	call   c0000694 <memset>
c000c898:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c89c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c89f:	e8 f1 f7 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c8a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c8ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b1:	e9 47 ff ff ff       	jmp    c000c7fd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c8b6 <VAS::VAS(bool)>:
c000c8b6:	53                   	push   ebx
c000c8b7:	83 ec 28             	sub    esp,0x28
c000c8ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c8d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c8e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c8e3:	e8 b6 db ff ff       	call   c000a49e <Phys::allocatePage()>
c000c8e8:	89 c2                	mov    edx,eax
c000c8ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8f1:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c000c8f7:	83 ec 0c             	sub    esp,0xc
c000c8fa:	6a 01                	push   0x1
c000c8fc:	e8 a0 f4 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 c2                	mov    edx,eax
c000c906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c90d:	83 ec 0c             	sub    esp,0xc
c000c910:	6a 03                	push   0x3
c000c912:	6a 01                	push   0x1
c000c914:	52                   	push   edx
c000c915:	50                   	push   eax
c000c916:	53                   	push   ebx
c000c917:	e8 e6 fd ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c91c:	83 c4 20             	add    esp,0x20
c000c91f:	89 c2                	mov    edx,eax
c000c921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c925:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c928:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c930:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c938:	7f 1c                	jg     c000c956 <VAS::VAS(bool)+0xa0>
c000c93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c93e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c941:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c945:	c1 e2 02             	shl    edx,0x2
c000c948:	01 d0                	add    eax,edx
c000c94a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c950:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c954:	eb da                	jmp    c000c930 <VAS::VAS(bool)+0x7a>
c000c956:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c95e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c966:	7f 7a                	jg     c000c9e2 <VAS::VAS(bool)+0x12c>
c000c968:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c96c:	2d 00 02 00 00       	sub    eax,0x200
c000c971:	c1 e0 0c             	shl    eax,0xc
c000c974:	83 c8 03             	or     eax,0x3
c000c977:	89 c2                	mov    edx,eax
c000c979:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c97e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c984:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c98a:	83 e0 10             	and    eax,0x10
c000c98d:	84 c0                	test   al,al
c000c98f:	74 07                	je     c000c998 <VAS::VAS(bool)+0xe2>
c000c991:	b8 00 01 00 00       	mov    eax,0x100
c000c996:	eb 05                	jmp    c000c99d <VAS::VAS(bool)+0xe7>
c000c998:	b8 00 00 00 00       	mov    eax,0x0
c000c99d:	09 d0                	or     eax,edx
c000c99f:	89 c1                	mov    ecx,eax
c000c9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ac:	c1 e2 02             	shl    edx,0x2
c000c9af:	01 d0                	add    eax,edx
c000c9b1:	89 ca                	mov    edx,ecx
c000c9b3:	89 10                	mov    DWORD PTR [eax],edx
c000c9b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9b9:	2d 40 03 00 00       	sub    eax,0x340
c000c9be:	83 f8 7f             	cmp    eax,0x7f
c000c9c1:	77 16                	ja     c000c9d9 <VAS::VAS(bool)+0x123>
c000c9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ce:	c1 e2 02             	shl    edx,0x2
c000c9d1:	01 d0                	add    eax,edx
c000c9d3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c9d9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c9dd:	e9 7c ff ff ff       	jmp    c000c95e <VAS::VAS(bool)+0xa8>
c000c9e2:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000c9e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ed:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9f3:	83 e0 10             	and    eax,0x10
c000c9f6:	84 c0                	test   al,al
c000c9f8:	74 07                	je     c000ca01 <VAS::VAS(bool)+0x14b>
c000c9fa:	b8 03 41 00 00       	mov    eax,0x4103
c000c9ff:	eb 05                	jmp    c000ca06 <VAS::VAS(bool)+0x150>
c000ca01:	b8 03 40 00 00       	mov    eax,0x4003
c000ca06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca0a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ca0d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ca13:	89 02                	mov    DWORD PTR [edx],eax
c000ca15:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000ca1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ca26:	83 ec 08             	sub    esp,0x8
c000ca29:	50                   	push   eax
c000ca2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca2e:	e8 b3 fc ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca3d:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000ca42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca48:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca4e:	83 e0 10             	and    eax,0x10
c000ca51:	84 c0                	test   al,al
c000ca53:	74 07                	je     c000ca5c <VAS::VAS(bool)+0x1a6>
c000ca55:	b8 00 01 00 00       	mov    eax,0x100
c000ca5a:	eb 05                	jmp    c000ca61 <VAS::VAS(bool)+0x1ab>
c000ca5c:	b8 00 00 00 00       	mov    eax,0x0
c000ca61:	09 c2                	or     edx,eax
c000ca63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca6a:	05 fc 0f 00 00       	add    eax,0xffc
c000ca6f:	83 ca 03             	or     edx,0x3
c000ca72:	89 10                	mov    DWORD PTR [eax],edx
c000ca74:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000ca79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	50                   	push   eax
c000ca83:	e8 32 1f 00 00       	call   c000e9ba <Device::getName()>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	83 ec 08             	sub    esp,0x8
c000ca8e:	68 ac 50 02 c0       	push   0xc00250ac
c000ca93:	50                   	push   eax
c000ca94:	e8 43 3d ff ff       	call   c00007dc <strcmp>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	85 c0                	test   eax,eax
c000ca9e:	0f 94 c0             	sete   al
c000caa1:	84 c0                	test   al,al
c000caa3:	0f 84 87 00 00 00    	je     c000cb30 <VAS::VAS(bool)+0x27a>
c000caa9:	fa                   	cli    
c000caaa:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000caaf:	40                   	inc    eax
c000cab0:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000cab5:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000caba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cac0:	05 7c 09 00 00       	add    eax,0x97c
c000cac5:	83 ec 0c             	sub    esp,0xc
c000cac8:	50                   	push   eax
c000cac9:	e8 08 ce ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cad6:	89 c3                	mov    ebx,eax
c000cad8:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000cadd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cae3:	05 7c 09 00 00       	add    eax,0x97c
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	50                   	push   eax
c000caec:	e8 e5 cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caf1:	83 c4 10             	add    esp,0x10
c000caf4:	83 ec 08             	sub    esp,0x8
c000caf7:	50                   	push   eax
c000caf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cafc:	e8 75 f5 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb06:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb0b:	6a 11                	push   0x11
c000cb0d:	53                   	push   ebx
c000cb0e:	50                   	push   eax
c000cb0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb13:	e8 f4 f8 ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000cb18:	83 c4 10             	add    esp,0x10
c000cb1b:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000cb20:	48                   	dec    eax
c000cb21:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000cb26:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000cb2b:	85 c0                	test   eax,eax
c000cb2d:	75 01                	jne    c000cb30 <VAS::VAS(bool)+0x27a>
c000cb2f:	fb                   	sti    
c000cb30:	90                   	nop
c000cb31:	83 c4 28             	add    esp,0x28
c000cb34:	5b                   	pop    ebx
c000cb35:	c3                   	ret    

c000cb36 <VAS::VAS()>:
c000cb36:	53                   	push   ebx
c000cb37:	83 ec 28             	sub    esp,0x28
c000cb3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000cb50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb54:	a3 74 8d 02 c0       	mov    ds:0xc0028d74,eax
c000cb59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb5d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000cb61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb65:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000cb68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb6c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000cb73:	0f 20 d8             	mov    eax,cr3
c000cb76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb82:	c7 44 24 10 14 00 00 00 	mov    DWORD PTR [esp+0x10],0x14
c000cb8a:	83 ec 0c             	sub    esp,0xc
c000cb8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb91:	e8 51 d2 ff ff       	call   c0009de7 <malloc>
c000cb96:	83 c4 10             	add    esp,0x10
c000cb99:	89 c3                	mov    ebx,eax
c000cb9b:	83 ec 08             	sub    esp,0x8
c000cb9e:	6a 01                	push   0x1
c000cba0:	53                   	push   ebx
c000cba1:	e8 10 fd ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c000cba6:	83 c4 10             	add    esp,0x10
c000cba9:	89 1d 6c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d6c,ebx
c000cbaf:	a1 6c 8d 02 c0       	mov    eax,ds:0xc0028d6c
c000cbb4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cbb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cbbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cbbf:	0f 22 d8             	mov    cr3,eax
c000cbc2:	a1 6c 8d 02 c0       	mov    eax,ds:0xc0028d6c
c000cbc7:	83 ec 0c             	sub    esp,0xc
c000cbca:	6a 01                	push   0x1
c000cbcc:	68 00 01 00 00       	push   0x100
c000cbd1:	6a 00                	push   0x0
c000cbd3:	6a 00                	push   0x0
c000cbd5:	50                   	push   eax
c000cbd6:	e8 27 fb ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cbdb:	83 c4 20             	add    esp,0x20
c000cbde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbe2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbe6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbea:	0f 22 d8             	mov    cr3,eax
c000cbed:	90                   	nop
c000cbee:	83 c4 28             	add    esp,0x28
c000cbf1:	5b                   	pop    ebx
c000cbf2:	c3                   	ret    
c000cbf3:	90                   	nop

c000cbf4 <VAS::evict(unsigned long)>:
c000cbf4:	55                   	push   ebp
c000cbf5:	57                   	push   edi
c000cbf6:	56                   	push   esi
c000cbf7:	53                   	push   ebx
c000cbf8:	83 ec 1c             	sub    esp,0x1c
c000cbfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc07:	e8 d6 f2 ff ff       	call   c000bee2 <Virt::allocateSwapfilePage()>
c000cc0c:	89 c7                	mov    edi,eax
c000cc0e:	a1 8c 80 02 c0       	mov    eax,ds:0xc002808c
c000cc13:	85 c0                	test   eax,eax
c000cc15:	7e 3d                	jle    c000cc54 <VAS::evict(unsigned long)+0x60>
c000cc17:	89 ee                	mov    esi,ebp
c000cc19:	31 db                	xor    ebx,ebx
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	57                   	push   edi
c000cc1f:	e8 ac f2 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cc24:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc27:	01 d8                	add    eax,ebx
c000cc29:	6a 01                	push   0x1
c000cc2b:	31 d2                	xor    edx,edx
c000cc2d:	43                   	inc    ebx
c000cc2e:	52                   	push   edx
c000cc2f:	81 c6 00 02 00 00    	add    esi,0x200
c000cc35:	50                   	push   eax
c000cc36:	0f be 05 98 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028098
c000cc3d:	ff 34 85 fc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f04]
c000cc44:	e8 ed 3e 00 00       	call   c0010b36 <LogicalDisk::write(unsigned long long, int, void*)>
c000cc49:	83 c4 20             	add    esp,0x20
c000cc4c:	39 1d 8c 80 02 c0    	cmp    DWORD PTR ds:0xc002808c,ebx
c000cc52:	7f c7                	jg     c000cc1b <VAS::evict(unsigned long)+0x27>
c000cc54:	83 ec 08             	sub    esp,0x8
c000cc57:	c1 e7 0b             	shl    edi,0xb
c000cc5a:	55                   	push   ebp
c000cc5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc5f:	e8 12 f4 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cc64:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc66:	89 d3                	mov    ebx,edx
c000cc68:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cc6e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cc74:	09 d7                	or     edi,edx
c000cc76:	89 38                	mov    DWORD PTR [eax],edi
c000cc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cc7b:	ff 05 68 8d 02 c0    	inc    DWORD PTR ds:0xc0028d68
c000cc81:	e8 95 d7 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000cc86:	0f 20 d8             	mov    eax,cr3
c000cc89:	0f 22 d8             	mov    cr3,eax
c000cc8c:	ff 35 68 8d 02 c0    	push   DWORD PTR ds:0xc0028d68
c000cc92:	55                   	push   ebp
c000cc93:	53                   	push   ebx
c000cc94:	68 fc 4f 02 c0       	push   0xc0024ffc
c000cc99:	e8 ab 04 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cc9e:	a1 64 8d 02 c0       	mov    eax,ds:0xc0028d64
c000cca3:	c7 44 24 50 ba 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc00250ba
c000ccab:	8d 50 01             	lea    edx,[eax+0x1]
c000ccae:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000ccb2:	89 15 64 8d 02 c0    	mov    DWORD PTR ds:0xc0028d64,edx
c000ccb8:	83 c4 3c             	add    esp,0x3c
c000ccbb:	5b                   	pop    ebx
c000ccbc:	5e                   	pop    esi
c000ccbd:	5f                   	pop    edi
c000ccbe:	5d                   	pop    ebp
c000ccbf:	e9 85 04 00 00       	jmp    c000d149 <Dbg::kprintf(char const*, ...)>

c000ccc4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000ccc4:	55                   	push   ebp
c000ccc5:	57                   	push   edi
c000ccc6:	56                   	push   esi
c000ccc7:	53                   	push   ebx
c000ccc8:	83 ec 14             	sub    esp,0x14
c000cccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cccf:	68 cb 50 02 c0       	push   0xc00250cb
c000ccd4:	e8 70 04 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cce0:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cce6:	74 20                	je     c000cd08 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cce8:	83 ec 08             	sub    esp,0x8
c000cceb:	55                   	push   ebp
c000ccec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf0:	e8 81 f3 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	89 c3                	mov    ebx,eax
c000ccfa:	85 c0                	test   eax,eax
c000ccfc:	74 0a                	je     c000cd08 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000ccfe:	8b 38                	mov    edi,DWORD PTR [eax]
c000cd00:	f7 c7 01 00 00 00    	test   edi,0x1
c000cd06:	74 0a                	je     c000cd12 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cd08:	31 c0                	xor    eax,eax
c000cd0a:	83 c4 0c             	add    esp,0xc
c000cd0d:	5b                   	pop    ebx
c000cd0e:	5e                   	pop    esi
c000cd0f:	5f                   	pop    edi
c000cd10:	5d                   	pop    ebp
c000cd11:	c3                   	ret    
c000cd12:	e8 87 d7 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cd17:	c1 ef 0b             	shr    edi,0xb
c000cd1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cd1c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cd22:	09 c2                	or     edx,eax
c000cd24:	81 ca 01 08 00 00    	or     edx,0x801
c000cd2a:	89 13                	mov    DWORD PTR [ebx],edx
c000cd2c:	8b 0d 8c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002808c
c000cd32:	85 c9                	test   ecx,ecx
c000cd34:	7e 3d                	jle    c000cd73 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cd36:	89 ee                	mov    esi,ebp
c000cd38:	31 db                	xor    ebx,ebx
c000cd3a:	83 ec 0c             	sub    esp,0xc
c000cd3d:	57                   	push   edi
c000cd3e:	e8 8d f1 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cd43:	89 34 24             	mov    DWORD PTR [esp],esi
c000cd46:	01 d8                	add    eax,ebx
c000cd48:	6a 01                	push   0x1
c000cd4a:	31 d2                	xor    edx,edx
c000cd4c:	43                   	inc    ebx
c000cd4d:	52                   	push   edx
c000cd4e:	81 c6 00 02 00 00    	add    esi,0x200
c000cd54:	50                   	push   eax
c000cd55:	0f be 05 98 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028098
c000cd5c:	ff 34 85 fc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f04]
c000cd63:	e8 62 3d 00 00       	call   c0010aca <LogicalDisk::read(unsigned long long, int, void*)>
c000cd68:	83 c4 20             	add    esp,0x20
c000cd6b:	39 1d 8c 80 02 c0    	cmp    DWORD PTR ds:0xc002808c,ebx
c000cd71:	7f c7                	jg     c000cd3a <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cd73:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c000cd78:	48                   	dec    eax
c000cd79:	52                   	push   edx
c000cd7a:	a3 68 8d 02 c0       	mov    ds:0xc0028d68,eax
c000cd7f:	50                   	push   eax
c000cd80:	55                   	push   ebp
c000cd81:	68 de 50 02 c0       	push   0xc00250de
c000cd86:	e8 be 03 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cd8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8e:	e8 1f f1 ff ff       	call   c000beb2 <Virt::freeSwapfilePage(unsigned long)>
c000cd93:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000cd98:	83 c4 10             	add    esp,0x10
c000cd9b:	48                   	dec    eax
c000cd9c:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000cda1:	85 c0                	test   eax,eax
c000cda3:	74 1d                	je     c000cdc2 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cda5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cda9:	25 ff 0f 00 00       	and    eax,0xfff
c000cdae:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cdb3:	77 10                	ja     c000cdc5 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cdb5:	0f 20 d8             	mov    eax,cr3
c000cdb8:	0f 22 d8             	mov    cr3,eax
c000cdbb:	b0 01                	mov    al,0x1
c000cdbd:	e9 48 ff ff ff       	jmp    c000cd0a <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cdc2:	fb                   	sti    
c000cdc3:	eb e0                	jmp    c000cda5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cdc5:	83 ec 0c             	sub    esp,0xc
c000cdc8:	68 f3 50 02 c0       	push   0xc00250f3
c000cdcd:	e8 77 03 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	eb de                	jmp    c000cdb5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cdd7:	90                   	nop

c000cdd8 <VAS::scanForEviction()>:
c000cdd8:	57                   	push   edi
c000cdd9:	31 ff                	xor    edi,edi
c000cddb:	56                   	push   esi
c000cddc:	53                   	push   ebx
c000cddd:	83 ec 10             	sub    esp,0x10
c000cde0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cde4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cde7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cded:	75 0e                	jne    c000cdfd <VAS::scanForEviction()+0x25>
c000cdef:	89 da                	mov    edx,ebx
c000cdf1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cdf4:	c1 ea 16             	shr    edx,0x16
c000cdf7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdfb:	74 4e                	je     c000ce4b <VAS::scanForEviction()+0x73>
c000cdfd:	53                   	push   ebx
c000cdfe:	56                   	push   esi
c000cdff:	e8 72 f2 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000ce04:	5a                   	pop    edx
c000ce05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ce07:	59                   	pop    ecx
c000ce08:	89 d1                	mov    ecx,edx
c000ce0a:	81 e1 01 08 00 00    	and    ecx,0x801
c000ce10:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000ce16:	74 3e                	je     c000ce56 <VAS::scanForEviction()+0x7e>
c000ce18:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ce1e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000ce24:	76 2b                	jbe    c000ce51 <VAS::scanForEviction()+0x79>
c000ce26:	47                   	inc    edi
c000ce27:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ce2e:	83 ff 03             	cmp    edi,0x3
c000ce31:	74 32                	je     c000ce65 <VAS::scanForEviction()+0x8d>
c000ce33:	31 db                	xor    ebx,ebx
c000ce35:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ce3b:	75 c0                	jne    c000cdfd <VAS::scanForEviction()+0x25>
c000ce3d:	89 da                	mov    edx,ebx
c000ce3f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ce42:	c1 ea 16             	shr    edx,0x16
c000ce45:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ce49:	75 b2                	jne    c000cdfd <VAS::scanForEviction()+0x25>
c000ce4b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ce51:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ce54:	eb 91                	jmp    c000cde7 <VAS::scanForEviction()+0xf>
c000ce56:	f6 c2 20             	test   dl,0x20
c000ce59:	74 13                	je     c000ce6e <VAS::scanForEviction()+0x96>
c000ce5b:	83 e2 df             	and    edx,0xffffffdf
c000ce5e:	89 10                	mov    DWORD PTR [eax],edx
c000ce60:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ce63:	eb b3                	jmp    c000ce18 <VAS::scanForEviction()+0x40>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	31 c0                	xor    eax,eax
c000ce6a:	5b                   	pop    ebx
c000ce6b:	5e                   	pop    esi
c000ce6c:	5f                   	pop    edi
c000ce6d:	c3                   	ret    
c000ce6e:	83 ec 08             	sub    esp,0x8
c000ce71:	89 d0                	mov    eax,edx
c000ce73:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ce78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce7c:	53                   	push   ebx
c000ce7d:	68 03 51 02 c0       	push   0xc0025103
c000ce82:	e8 c2 02 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000ce87:	58                   	pop    eax
c000ce88:	5a                   	pop    edx
c000ce89:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce8c:	56                   	push   esi
c000ce8d:	e8 62 fd ff ff       	call   c000cbf4 <VAS::evict(unsigned long)>
c000ce92:	59                   	pop    ecx
c000ce93:	5b                   	pop    ebx
c000ce94:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce97:	68 17 51 02 c0       	push   0xc0025117
c000ce9c:	e8 a8 02 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cea1:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cea8:	83 c4 10             	add    esp,0x10
c000ceab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	5b                   	pop    ebx
c000ceb3:	5e                   	pop    esi
c000ceb4:	5f                   	pop    edi
c000ceb5:	c3                   	ret    

c000ceb6 <mapVASFirstTime>:
c000ceb6:	55                   	push   ebp
c000ceb7:	57                   	push   edi
c000ceb8:	56                   	push   esi
c000ceb9:	53                   	push   ebx
c000ceba:	83 ec 0c             	sub    esp,0xc
c000cebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cec2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cec5:	4a                   	dec    edx
c000cec6:	0f 84 fe 00 00 00    	je     c000cfca <mapVASFirstTime+0x114>
c000cecc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cecf:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ced2:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ced7:	c1 e5 15             	shl    ebp,0x15
c000ceda:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cedf:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cee5:	29 eb                	sub    ebx,ebp
c000cee7:	29 ef                	sub    edi,ebp
c000cee9:	83 ec 08             	sub    esp,0x8
c000ceec:	53                   	push   ebx
c000ceed:	68 43 51 02 c0       	push   0xc0025143
c000cef2:	e8 52 02 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cef7:	e8 a2 d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cefc:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cf03:	6a 01                	push   0x1
c000cf05:	53                   	push   ebx
c000cf06:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cf0c:	50                   	push   eax
c000cf0d:	56                   	push   esi
c000cf0e:	e8 ef f7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	39 fb                	cmp    ebx,edi
c000cf18:	75 cf                	jne    c000cee9 <mapVASFirstTime+0x33>
c000cf1a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cf1f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cf24:	29 eb                	sub    ebx,ebp
c000cf26:	29 ef                	sub    edi,ebp
c000cf28:	83 ec 08             	sub    esp,0x8
c000cf2b:	53                   	push   ebx
c000cf2c:	68 5f 51 02 c0       	push   0xc002515f
c000cf31:	e8 13 02 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cf36:	58                   	pop    eax
c000cf37:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cf3b:	5a                   	pop    edx
c000cf3c:	19 c0                	sbb    eax,eax
c000cf3e:	83 e0 04             	and    eax,0x4
c000cf41:	05 03 04 00 00       	add    eax,0x403
c000cf46:	50                   	push   eax
c000cf47:	68 73 51 02 c0       	push   0xc0025173
c000cf4c:	e8 f8 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cf51:	e8 48 d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cf56:	59                   	pop    ecx
c000cf57:	89 c5                	mov    ebp,eax
c000cf59:	58                   	pop    eax
c000cf5a:	55                   	push   ebp
c000cf5b:	68 81 51 02 c0       	push   0xc0025181
c000cf60:	e8 e4 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cf65:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cf69:	19 d2                	sbb    edx,edx
c000cf6b:	83 e2 04             	and    edx,0x4
c000cf6e:	81 c2 03 04 00 00    	add    edx,0x403
c000cf74:	89 14 24             	mov    DWORD PTR [esp],edx
c000cf77:	6a 01                	push   0x1
c000cf79:	53                   	push   ebx
c000cf7a:	55                   	push   ebp
c000cf7b:	56                   	push   esi
c000cf7c:	e8 81 f7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf81:	83 c4 18             	add    esp,0x18
c000cf84:	53                   	push   ebx
c000cf85:	56                   	push   esi
c000cf86:	e8 eb f0 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cf8b:	5a                   	pop    edx
c000cf8c:	59                   	pop    ecx
c000cf8d:	ff 30                	push   DWORD PTR [eax]
c000cf8f:	68 9d 51 02 c0       	push   0xc002519d
c000cf94:	e8 b0 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cf99:	0f 20 d8             	mov    eax,cr3
c000cf9c:	83 c4 0c             	add    esp,0xc
c000cf9f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cfa5:	56                   	push   esi
c000cfa6:	50                   	push   eax
c000cfa7:	68 a8 51 02 c0       	push   0xc00251a8
c000cfac:	e8 98 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	39 df                	cmp    edi,ebx
c000cfb6:	0f 85 6c ff ff ff    	jne    c000cf28 <mapVASFirstTime+0x72>
c000cfbc:	0f 20 d8             	mov    eax,cr3
c000cfbf:	0f 22 d8             	mov    cr3,eax
c000cfc2:	83 c4 0c             	add    esp,0xc
c000cfc5:	5b                   	pop    ebx
c000cfc6:	5e                   	pop    esi
c000cfc7:	5f                   	pop    edi
c000cfc8:	5d                   	pop    ebp
c000cfc9:	c3                   	ret    
c000cfca:	83 ec 0c             	sub    esp,0xc
c000cfcd:	68 2a 51 02 c0       	push   0xc002512a
c000cfd2:	e8 72 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cfd7:	83 c4 10             	add    esp,0x10
c000cfda:	83 c4 0c             	add    esp,0xc
c000cfdd:	5b                   	pop    ebx
c000cfde:	5e                   	pop    esi
c000cfdf:	5f                   	pop    edi
c000cfe0:	5d                   	pop    ebp
c000cfe1:	c3                   	ret    

c000cfe2 <__cxa_atexit>:
c000cfe2:	31 c0                	xor    eax,eax
c000cfe4:	c3                   	ret    

c000cfe5 <__cxa_finalize>:
c000cfe5:	c3                   	ret    

c000cfe6 <__stack_chk_fail>:
c000cfe6:	55                   	push   ebp
c000cfe7:	89 e5                	mov    ebp,esp
c000cfe9:	83 ec 14             	sub    esp,0x14
c000cfec:	68 c0 51 02 c0       	push   0xc00251c0
c000cff1:	e8 53 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000cff6:	58                   	pop    eax
c000cff7:	5a                   	pop    edx
c000cff8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cffb:	68 10 52 02 c0       	push   0xc0025210
c000d000:	e8 44 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d005:	59                   	pop    ecx
c000d006:	58                   	pop    eax
c000d007:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d00a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d00d:	68 10 52 02 c0       	push   0xc0025210
c000d012:	e8 32 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d017:	5a                   	pop    edx
c000d018:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d01b:	59                   	pop    ecx
c000d01c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d01e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d021:	68 10 52 02 c0       	push   0xc0025210
c000d026:	e8 1e 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d02b:	5a                   	pop    edx
c000d02c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d02f:	59                   	pop    ecx
c000d030:	8b 00                	mov    eax,DWORD PTR [eax]
c000d032:	8b 00                	mov    eax,DWORD PTR [eax]
c000d034:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d037:	68 10 52 02 c0       	push   0xc0025210
c000d03c:	e8 08 01 00 00       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d041:	c7 04 24 18 52 02 c0 	mov    DWORD PTR [esp],0xc0025218
c000d048:	e8 dc 81 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000d04d:	83 c4 10             	add    esp,0x10
c000d050:	c9                   	leave  
c000d051:	c3                   	ret    

c000d052 <__cxa_pure_virtual>:
c000d052:	83 ec 18             	sub    esp,0x18
c000d055:	68 30 52 02 c0       	push   0xc0025230
c000d05a:	e8 ca 81 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000d05f:	83 c4 1c             	add    esp,0x1c
c000d062:	c3                   	ret    

c000d063 <operator new[](unsigned long)>:
c000d063:	e9 7f cd ff ff       	jmp    c0009de7 <malloc>

c000d068 <operator delete(void*, unsigned long)>:
c000d068:	e9 9a cd ff ff       	jmp    c0009e07 <rfree>

c000d06d <operator delete[](void*)>:
c000d06d:	e9 95 cd ff ff       	jmp    c0009e07 <rfree>

c000d072 <operator delete[](void*, unsigned long)>:
c000d072:	e9 90 cd ff ff       	jmp    c0009e07 <rfree>

c000d077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000d077:	55                   	push   ebp
c000d078:	b9 11 00 00 00       	mov    ecx,0x11
c000d07d:	57                   	push   edi
c000d07e:	56                   	push   esi
c000d07f:	be 16 4d 02 c0       	mov    esi,0xc0024d16
c000d084:	53                   	push   ebx
c000d085:	83 ec 20             	sub    esp,0x20
c000d088:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d08c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d090:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d094:	fc                   	cld    
c000d095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d097:	89 ee                	mov    esi,ebp
c000d099:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d09d:	eb 02                	jmp    c000d0a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000d09f:	89 c6                	mov    esi,eax
c000d0a1:	31 d2                	xor    edx,edx
c000d0a3:	41                   	inc    ecx
c000d0a4:	89 f0                	mov    eax,esi
c000d0a6:	f7 f3                	div    ebx
c000d0a8:	39 de                	cmp    esi,ebx
c000d0aa:	73 f3                	jae    c000d09f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000d0ac:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d0af:	eb 02                	jmp    c000d0b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000d0b1:	89 c5                	mov    ebp,eax
c000d0b3:	31 d2                	xor    edx,edx
c000d0b5:	49                   	dec    ecx
c000d0b6:	89 e8                	mov    eax,ebp
c000d0b8:	f7 f3                	div    ebx
c000d0ba:	39 dd                	cmp    ebp,ebx
c000d0bc:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000d0c0:	88 11                	mov    BYTE PTR [ecx],dl
c000d0c2:	73 ed                	jae    c000d0b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000d0c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c8:	83 c4 20             	add    esp,0x20
c000d0cb:	5b                   	pop    ebx
c000d0cc:	5e                   	pop    esi
c000d0cd:	5f                   	pop    edi
c000d0ce:	5d                   	pop    ebp
c000d0cf:	c3                   	ret    

c000d0d0 <Dbg::logc(char)>:
c000d0d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0d4:	f6 05 60 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c60,0x10
c000d0db:	75 12                	jne    c000d0ef <Dbg::logc(char)+0x1f>
c000d0dd:	ba fd 03 00 00       	mov    edx,0x3fd
c000d0e2:	ec                   	in     al,dx
c000d0e3:	a8 20                	test   al,0x20
c000d0e5:	74 fb                	je     c000d0e2 <Dbg::logc(char)+0x12>
c000d0e7:	ba f8 03 00 00       	mov    edx,0x3f8
c000d0ec:	88 c8                	mov    al,cl
c000d0ee:	ee                   	out    dx,al
c000d0ef:	c3                   	ret    

c000d0f0 <Dbg::logs(char*)>:
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d0f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d0f8:	84 c0                	test   al,al
c000d0fa:	74 0f                	je     c000d10b <Dbg::logs(char*)+0x1b>
c000d0fc:	50                   	push   eax
c000d0fd:	43                   	inc    ebx
c000d0fe:	e8 cd ff ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d103:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d106:	5a                   	pop    edx
c000d107:	84 c0                	test   al,al
c000d109:	75 f1                	jne    c000d0fc <Dbg::logs(char*)+0xc>
c000d10b:	5b                   	pop    ebx
c000d10c:	c3                   	ret    

c000d10d <Dbg::logWriteInt(unsigned int)>:
c000d10d:	83 ec 10             	sub    esp,0x10
c000d110:	6a 0a                	push   0xa
c000d112:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d116:	50                   	push   eax
c000d117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11b:	e8 57 ff ff ff       	call   c000d077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d120:	50                   	push   eax
c000d121:	e8 ca ff ff ff       	call   c000d0f0 <Dbg::logs(char*)>
c000d126:	83 c4 20             	add    esp,0x20
c000d129:	c3                   	ret    

c000d12a <Dbg::logWriteIntBase(unsigned int, int)>:
c000d12a:	83 ec 10             	sub    esp,0x10
c000d12d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d131:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d135:	50                   	push   eax
c000d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13a:	e8 38 ff ff ff       	call   c000d077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d13f:	50                   	push   eax
c000d140:	e8 ab ff ff ff       	call   c000d0f0 <Dbg::logs(char*)>
c000d145:	83 c4 20             	add    esp,0x20
c000d148:	c3                   	ret    

c000d149 <Dbg::kprintf(char const*, ...)>:
c000d149:	55                   	push   ebp
c000d14a:	57                   	push   edi
c000d14b:	56                   	push   esi
c000d14c:	53                   	push   ebx
c000d14d:	83 ec 0c             	sub    esp,0xc
c000d150:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d154:	f6 05 60 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c60,0x10
c000d15b:	74 08                	je     c000d165 <Dbg::kprintf(char const*, ...)+0x1c>
c000d15d:	83 c4 0c             	add    esp,0xc
c000d160:	5b                   	pop    ebx
c000d161:	5e                   	pop    esi
c000d162:	5f                   	pop    edi
c000d163:	5d                   	pop    ebp
c000d164:	c3                   	ret    
c000d165:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d169:	31 db                	xor    ebx,ebx
c000d16b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d16f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d172:	84 c0                	test   al,al
c000d174:	74 e7                	je     c000d15d <Dbg::kprintf(char const*, ...)+0x14>
c000d176:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d179:	3c 25                	cmp    al,0x25
c000d17b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d17e:	75 44                	jne    c000d1c4 <Dbg::kprintf(char const*, ...)+0x7b>
c000d180:	83 c3 02             	add    ebx,0x2
c000d183:	8a 07                	mov    al,BYTE PTR [edi]
c000d185:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d188:	83 e8 25             	sub    eax,0x25
c000d18b:	3c 53                	cmp    al,0x53
c000d18d:	0f 87 c9 00 00 00    	ja     c000d25c <Dbg::kprintf(char const*, ...)+0x113>
c000d193:	0f b6 c0             	movzx  eax,al
c000d196:	ff 24 85 44 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdadbc]
c000d19d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1a1:	89 c8                	mov    eax,ecx
c000d1a3:	83 c1 04             	add    ecx,0x4
c000d1a6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1aa:	ff 30                	push   DWORD PTR [eax]
c000d1ac:	e8 5c ff ff ff       	call   c000d10d <Dbg::logWriteInt(unsigned int)>
c000d1b1:	5f                   	pop    edi
c000d1b2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d1b6:	84 c0                	test   al,al
c000d1b8:	74 a3                	je     c000d15d <Dbg::kprintf(char const*, ...)+0x14>
c000d1ba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d1bd:	3c 25                	cmp    al,0x25
c000d1bf:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d1c2:	74 bc                	je     c000d180 <Dbg::kprintf(char const*, ...)+0x37>
c000d1c4:	50                   	push   eax
c000d1c5:	89 eb                	mov    ebx,ebp
c000d1c7:	e8 04 ff ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d1cc:	89 fd                	mov    ebp,edi
c000d1ce:	58                   	pop    eax
c000d1cf:	eb e1                	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d1d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1d5:	89 c8                	mov    eax,ecx
c000d1d7:	83 c1 04             	add    ecx,0x4
c000d1da:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1de:	ff 30                	push   DWORD PTR [eax]
c000d1e0:	e8 0b ff ff ff       	call   c000d0f0 <Dbg::logs(char*)>
c000d1e5:	58                   	pop    eax
c000d1e6:	eb ca                	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d1e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ec:	89 d0                	mov    eax,edx
c000d1ee:	83 c2 04             	add    edx,0x4
c000d1f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f5:	ff 30                	push   DWORD PTR [eax]
c000d1f7:	e8 11 ff ff ff       	call   c000d10d <Dbg::logWriteInt(unsigned int)>
c000d1fc:	58                   	pop    eax
c000d1fd:	eb b3                	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d1ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d203:	89 d0                	mov    eax,edx
c000d205:	83 c2 04             	add    edx,0x4
c000d208:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d20b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d20f:	50                   	push   eax
c000d210:	e8 bb fe ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d215:	58                   	pop    eax
c000d216:	eb 9a                	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d218:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d21c:	89 c8                	mov    eax,ecx
c000d21e:	83 c1 04             	add    ecx,0x4
c000d221:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d225:	6a 10                	push   0x10
c000d227:	ff 30                	push   DWORD PTR [eax]
c000d229:	e8 fc fe ff ff       	call   c000d12a <Dbg::logWriteIntBase(unsigned int, int)>
c000d22e:	59                   	pop    ecx
c000d22f:	5f                   	pop    edi
c000d230:	eb 80                	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d232:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d236:	89 d0                	mov    eax,edx
c000d238:	83 c2 08             	add    edx,0x8
c000d23b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d23f:	6a 10                	push   0x10
c000d241:	ff 30                	push   DWORD PTR [eax]
c000d243:	e8 e2 fe ff ff       	call   c000d12a <Dbg::logWriteIntBase(unsigned int, int)>
c000d248:	58                   	pop    eax
c000d249:	5a                   	pop    edx
c000d24a:	e9 63 ff ff ff       	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d24f:	6a 25                	push   0x25
c000d251:	e8 7a fe ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d256:	58                   	pop    eax
c000d257:	e9 56 ff ff ff       	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d25c:	6a 25                	push   0x25
c000d25e:	e8 6d fe ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d263:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d266:	50                   	push   eax
c000d267:	e8 64 fe ff ff       	call   c000d0d0 <Dbg::logc(char)>
c000d26c:	5a                   	pop    edx
c000d26d:	59                   	pop    ecx
c000d26e:	e9 3f ff ff ff       	jmp    c000d1b2 <Dbg::kprintf(char const*, ...)+0x69>
c000d273:	90                   	nop

c000d274 <File::read(unsigned long long, void*, int*)>:
c000d274:	53                   	push   ebx
c000d275:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d279:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d27d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d284:	3c 19                	cmp    al,0x19
c000d286:	77 35                	ja     c000d2bd <File::read(unsigned long long, void*, int*)+0x49>
c000d288:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d28f:	85 c0                	test   eax,eax
c000d291:	74 2a                	je     c000d2bd <File::read(unsigned long long, void*, int*)+0x49>
c000d293:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d299:	85 c0                	test   eax,eax
c000d29b:	74 20                	je     c000d2bd <File::read(unsigned long long, void*, int*)+0x49>
c000d29d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2a1:	74 21                	je     c000d2c4 <File::read(unsigned long long, void*, int*)+0x50>
c000d2a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2a9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d2af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2b7:	5b                   	pop    ebx
c000d2b8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d2bb:	ff e0                	jmp    eax
c000d2bd:	b8 0b 00 00 00       	mov    eax,0xb
c000d2c2:	eb 05                	jmp    c000d2c9 <File::read(unsigned long long, void*, int*)+0x55>
c000d2c4:	b8 05 00 00 00       	mov    eax,0x5
c000d2c9:	5b                   	pop    ebx
c000d2ca:	c3                   	ret    
c000d2cb:	90                   	nop

c000d2cc <File::write(unsigned long long, void*, int*)>:
c000d2cc:	53                   	push   ebx
c000d2cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d2dc:	3c 19                	cmp    al,0x19
c000d2de:	77 35                	ja     c000d315 <File::write(unsigned long long, void*, int*)+0x49>
c000d2e0:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d2e7:	85 c0                	test   eax,eax
c000d2e9:	74 2a                	je     c000d315 <File::write(unsigned long long, void*, int*)+0x49>
c000d2eb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2f1:	85 c0                	test   eax,eax
c000d2f3:	74 20                	je     c000d315 <File::write(unsigned long long, void*, int*)+0x49>
c000d2f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2f9:	74 21                	je     c000d31c <File::write(unsigned long long, void*, int*)+0x50>
c000d2fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2fd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d301:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d307:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d30b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d30f:	5b                   	pop    ebx
c000d310:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d313:	ff e0                	jmp    eax
c000d315:	b8 0b 00 00 00       	mov    eax,0xb
c000d31a:	eb 05                	jmp    c000d321 <File::write(unsigned long long, void*, int*)+0x55>
c000d31c:	b8 05 00 00 00       	mov    eax,0x5
c000d321:	5b                   	pop    ebx
c000d322:	c3                   	ret    
c000d323:	90                   	nop

c000d324 <Directory::read(unsigned long long, void*, int*)>:
c000d324:	53                   	push   ebx
c000d325:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d329:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d32d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d334:	3c 19                	cmp    al,0x19
c000d336:	77 35                	ja     c000d36d <Directory::read(unsigned long long, void*, int*)+0x49>
c000d338:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d33f:	85 c0                	test   eax,eax
c000d341:	74 2a                	je     c000d36d <Directory::read(unsigned long long, void*, int*)+0x49>
c000d343:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d349:	85 c0                	test   eax,eax
c000d34b:	74 20                	je     c000d36d <Directory::read(unsigned long long, void*, int*)+0x49>
c000d34d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d351:	74 21                	je     c000d374 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d353:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d355:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d359:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d367:	5b                   	pop    ebx
c000d368:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d36b:	ff e0                	jmp    eax
c000d36d:	b8 0b 00 00 00       	mov    eax,0xb
c000d372:	eb 05                	jmp    c000d379 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d374:	b8 05 00 00 00       	mov    eax,0x5
c000d379:	5b                   	pop    ebx
c000d37a:	c3                   	ret    
c000d37b:	90                   	nop

c000d37c <Directory::write(unsigned long long, void*, int*)>:
c000d37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d380:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d387:	b8 0b 00 00 00       	mov    eax,0xb
c000d38c:	80 fa 19             	cmp    dl,0x19
c000d38f:	77 18                	ja     c000d3a9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d391:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000d398:	85 d2                	test   edx,edx
c000d39a:	74 0d                	je     c000d3a9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d39c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d3a3:	19 c0                	sbb    eax,eax
c000d3a5:	83 e0 0a             	and    eax,0xa
c000d3a8:	40                   	inc    eax
c000d3a9:	c3                   	ret    

c000d3aa <File::isAtty()>:
c000d3aa:	31 c0                	xor    eax,eax
c000d3ac:	c3                   	ret    
c000d3ad:	90                   	nop

c000d3ae <Directory::isAtty()>:
c000d3ae:	31 c0                	xor    eax,eax
c000d3b0:	c3                   	ret    
c000d3b1:	90                   	nop

c000d3b2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d3b2:	b8 0a 00 00 00       	mov    eax,0xa
c000d3b7:	c3                   	ret    

c000d3b8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d3b8:	b8 0a 00 00 00       	mov    eax,0xa
c000d3bd:	c3                   	ret    

c000d3be <Filesystem::allocateSwapfile(char const*, int)>:
c000d3be:	31 c0                	xor    eax,eax
c000d3c0:	31 d2                	xor    edx,edx
c000d3c2:	c3                   	ret    
c000d3c3:	90                   	nop

c000d3c4 <File::~File()>:
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	ba 80 54 02 c0       	mov    edx,0xc0025480
c000d3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d0:	89 10                	mov    DWORD PTR [eax],edx
c000d3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d6:	83 ec 0c             	sub    esp,0xc
c000d3d9:	50                   	push   eax
c000d3da:	e8 61 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	90                   	nop
c000d3e3:	83 c4 0c             	add    esp,0xc
c000d3e6:	c3                   	ret    
c000d3e7:	90                   	nop

c000d3e8 <File::~File()>:
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	83 ec 0c             	sub    esp,0xc
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 cd ff ff ff       	call   c000d3c4 <File::~File()>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	83 ec 08             	sub    esp,0x8
c000d3fd:	68 14 01 00 00       	push   0x114
c000d402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d406:	e8 5d fc ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	c3                   	ret    

c000d412 <Directory::~Directory()>:
c000d412:	83 ec 0c             	sub    esp,0xc
c000d415:	ba 9c 54 02 c0       	mov    edx,0xc002549c
c000d41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d41e:	89 10                	mov    DWORD PTR [eax],edx
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 ec 0c             	sub    esp,0xc
c000d427:	50                   	push   eax
c000d428:	e8 13 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d42d:	83 c4 10             	add    esp,0x10
c000d430:	90                   	nop
c000d431:	83 c4 0c             	add    esp,0xc
c000d434:	c3                   	ret    
c000d435:	90                   	nop

c000d436 <Directory::~Directory()>:
c000d436:	83 ec 0c             	sub    esp,0xc
c000d439:	83 ec 0c             	sub    esp,0xc
c000d43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d440:	e8 cd ff ff ff       	call   c000d412 <Directory::~Directory()>
c000d445:	83 c4 10             	add    esp,0x10
c000d448:	83 ec 08             	sub    esp,0x8
c000d44b:	68 14 01 00 00       	push   0x114
c000d450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d454:	e8 0f fc ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	83 c4 0c             	add    esp,0xc
c000d45f:	c3                   	ret    

c000d460 <Filesystem::Filesystem()>:
c000d460:	ba 18 54 02 c0       	mov    edx,0xc0025418
c000d465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d469:	89 10                	mov    DWORD PTR [eax],edx
c000d46b:	8b 15 78 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d78
c000d471:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d475:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d47c:	a3 78 8d 02 c0       	mov    ds:0xc0028d78,eax
c000d481:	90                   	nop
c000d482:	c3                   	ret    
c000d483:	90                   	nop

c000d484 <Filesystem::~Filesystem()>:
c000d484:	ba 18 54 02 c0       	mov    edx,0xc0025418
c000d489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d48d:	89 10                	mov    DWORD PTR [eax],edx
c000d48f:	90                   	nop
c000d490:	c3                   	ret    
c000d491:	90                   	nop

c000d492 <Filesystem::~Filesystem()>:
c000d492:	83 ec 0c             	sub    esp,0xc
c000d495:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d499:	e8 e6 ff ff ff       	call   c000d484 <Filesystem::~Filesystem()>
c000d49e:	83 c4 04             	add    esp,0x4
c000d4a1:	83 ec 08             	sub    esp,0x8
c000d4a4:	6a 08                	push   0x8
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	e8 b9 fb ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000d4af:	83 c4 10             	add    esp,0x10
c000d4b2:	83 c4 0c             	add    esp,0xc
c000d4b5:	c3                   	ret    

c000d4b6 <Fs::getcwd(Process*, char*, int)>:
c000d4b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d4ba:	31 c0                	xor    eax,eax
c000d4bc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d4bf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d4c3:	7d 15                	jge    c000d4da <Fs::getcwd(Process*, char*, int)+0x24>
c000d4c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d4c9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d4d0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d4d3:	84 c9                	test   cl,cl
c000d4d5:	74 06                	je     c000d4dd <Fs::getcwd(Process*, char*, int)+0x27>
c000d4d7:	40                   	inc    eax
c000d4d8:	eb e2                	jmp    c000d4bc <Fs::getcwd(Process*, char*, int)+0x6>
c000d4da:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d4dd:	31 c0                	xor    eax,eax
c000d4df:	c3                   	ret    

c000d4e0 <Fs::initVFS()>:
c000d4e0:	83 ec 18             	sub    esp,0x18
c000d4e3:	6a 08                	push   0x8
c000d4e5:	e8 fd c8 ff ff       	call   c0009de7 <malloc>
c000d4ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ed:	e8 ce ed 00 00       	call   c001c2c0 <FAT::FAT()>
c000d4f2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d4f9:	e8 e9 c8 ff ff       	call   c0009de7 <malloc>
c000d4fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000d501:	e8 4a 00 01 00       	call   c001d550 <ISO9660::ISO9660()>
c000d506:	83 c4 1c             	add    esp,0x1c
c000d509:	c3                   	ret    

c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d50a:	55                   	push   ebp
c000d50b:	57                   	push   edi
c000d50c:	56                   	push   esi
c000d50d:	53                   	push   ebx
c000d50e:	81 ec 10 04 00 00    	sub    esp,0x410
c000d514:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d51b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d522:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d529:	68 00 04 00 00       	push   0x400
c000d52e:	6a 00                	push   0x0
c000d530:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d534:	56                   	push   esi
c000d535:	e8 5a 31 ff ff       	call   c0000694 <memset>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d541:	75 0b                	jne    c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d543:	50                   	push   eax
c000d544:	50                   	push   eax
c000d545:	57                   	push   edi
c000d546:	56                   	push   esi
c000d547:	e8 04 32 ff ff       	call   c0000750 <strcpy>
c000d54c:	eb 41                	jmp    c000d58f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d54e:	8a 07                	mov    al,BYTE PTR [edi]
c000d550:	3c 5c                	cmp    al,0x5c
c000d552:	74 04                	je     c000d558 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d554:	3c 2f                	cmp    al,0x2f
c000d556:	75 18                	jne    c000d570 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d558:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d55b:	3c 60                	cmp    al,0x60
c000d55d:	7e 03                	jle    c000d562 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d55f:	83 e8 20             	sub    eax,0x20
c000d562:	88 04 24             	mov    BYTE PTR [esp],al
c000d565:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d56c:	50                   	push   eax
c000d56d:	50                   	push   eax
c000d56e:	eb 18                	jmp    c000d588 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d570:	50                   	push   eax
c000d571:	50                   	push   eax
c000d572:	55                   	push   ebp
c000d573:	56                   	push   esi
c000d574:	e8 d7 31 ff ff       	call   c0000750 <strcpy>
c000d579:	5a                   	pop    edx
c000d57a:	59                   	pop    ecx
c000d57b:	68 4a 6d 02 c0       	push   0xc0026d4a
c000d580:	56                   	push   esi
c000d581:	e8 0a 33 ff ff       	call   c0000890 <strcat>
c000d586:	5d                   	pop    ebp
c000d587:	58                   	pop    eax
c000d588:	57                   	push   edi
c000d589:	56                   	push   esi
c000d58a:	e8 01 33 ff ff       	call   c0000890 <strcat>
c000d58f:	83 c4 10             	add    esp,0x10
c000d592:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d595:	3c 60                	cmp    al,0x60
c000d597:	7e 03                	jle    c000d59c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d599:	83 e8 20             	sub    eax,0x20
c000d59c:	88 04 24             	mov    BYTE PTR [esp],al
c000d59f:	88 03                	mov    BYTE PTR [ebx],al
c000d5a1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d5a8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d5ae:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d5b2:	bf 03 00 00 00       	mov    edi,0x3
c000d5b7:	b8 03 00 00 00       	mov    eax,0x3
c000d5bc:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d5bf:	84 d2                	test   dl,dl
c000d5c1:	0f 84 91 00 00 00    	je     c000d658 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d5c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d5ca:	80 fa 5c             	cmp    dl,0x5c
c000d5cd:	74 05                	je     c000d5d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d5cf:	80 fa 2f             	cmp    dl,0x2f
c000d5d2:	75 12                	jne    c000d5e6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d5d4:	89 c5                	mov    ebp,eax
c000d5d6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5db:	74 09                	je     c000d5e6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d5dd:	40                   	inc    eax
c000d5de:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d5e2:	89 cf                	mov    edi,ecx
c000d5e4:	eb d6                	jmp    c000d5bc <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d5e6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d5eb:	75 5b                	jne    c000d648 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d5ed:	80 fa 2e             	cmp    dl,0x2e
c000d5f0:	75 56                	jne    c000d648 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d5f2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d5f6:	74 19                	je     c000d611 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d5f8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5fd:	74 53                	je     c000d652 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5ff:	89 f9                	mov    ecx,edi
c000d601:	41                   	inc    ecx
c000d602:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d605:	80 fa 2f             	cmp    dl,0x2f
c000d608:	74 f7                	je     c000d601 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d60a:	80 fa 5c             	cmp    dl,0x5c
c000d60d:	74 f2                	je     c000d601 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d60f:	eb d1                	jmp    c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d611:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d616:	74 3a                	je     c000d652 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d618:	83 f8 03             	cmp    eax,0x3
c000d61b:	74 c5                	je     c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d61d:	41                   	inc    ecx
c000d61e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d621:	80 fa 2f             	cmp    dl,0x2f
c000d624:	74 f7                	je     c000d61d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d626:	80 fa 5c             	cmp    dl,0x5c
c000d629:	74 f2                	je     c000d61d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d62b:	48                   	dec    eax
c000d62c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d630:	75 06                	jne    c000d638 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d632:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d636:	eb f3                	jmp    c000d62b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d638:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d63c:	74 07                	je     c000d645 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d63e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d642:	48                   	dec    eax
c000d643:	eb f3                	jmp    c000d638 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d645:	40                   	inc    eax
c000d646:	eb 9a                	jmp    c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d648:	80 fa 2f             	cmp    dl,0x2f
c000d64b:	74 95                	je     c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d64d:	80 fa 5c             	cmp    dl,0x5c
c000d650:	74 90                	je     c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d652:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d655:	40                   	inc    eax
c000d656:	eb 8a                	jmp    c000d5e2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d658:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d65c:	83 ec 0c             	sub    esp,0xc
c000d65f:	53                   	push   ebx
c000d660:	e8 4b 30 ff ff       	call   c00006b0 <strlen>
c000d665:	83 c4 10             	add    esp,0x10
c000d668:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d66d:	75 26                	jne    c000d695 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d66f:	83 ec 0c             	sub    esp,0xc
c000d672:	53                   	push   ebx
c000d673:	e8 38 30 ff ff       	call   c00006b0 <strlen>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d680:	74 26                	je     c000d6a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	53                   	push   ebx
c000d686:	e8 25 30 ff ff       	call   c00006b0 <strlen>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d693:	eb c7                	jmp    c000d65c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d695:	83 ec 0c             	sub    esp,0xc
c000d698:	53                   	push   ebx
c000d699:	e8 12 30 ff ff       	call   c00006b0 <strlen>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d6a6:	74 c7                	je     c000d66f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d6a8:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d6ae:	5b                   	pop    ebx
c000d6af:	5e                   	pop    esi
c000d6b0:	5f                   	pop    edi
c000d6b1:	5d                   	pop    ebp
c000d6b2:	c3                   	ret    
c000d6b3:	90                   	nop

c000d6b4 <File::File(char const*, Process*)>:
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6bb:	83 ec 08             	sub    esp,0x8
c000d6be:	6a 00                	push   0x0
c000d6c0:	50                   	push   eax
c000d6c1:	e8 98 e2 ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	ba 80 54 02 c0       	mov    edx,0xc0025480
c000d6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d2:	89 10                	mov    DWORD PTR [eax],edx
c000d6d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d6d8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e2:	83 c0 0d             	add    eax,0xd
c000d6e5:	83 ec 04             	sub    esp,0x4
c000d6e8:	52                   	push   edx
c000d6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ed:	50                   	push   eax
c000d6ee:	e8 17 fe ff ff       	call   c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fa:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d6fd:	8d 50 bf             	lea    edx,[eax-0x41]
c000d700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d704:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d716:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d71c:	0f b6 c0             	movzx  eax,al
c000d71f:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d726:	85 c0                	test   eax,eax
c000d728:	74 5e                	je     c000d788 <File::File(char const*, Process*)+0xd4>
c000d72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d734:	0f b6 c0             	movzx  eax,al
c000d737:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d73e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d744:	85 c0                	test   eax,eax
c000d746:	75 40                	jne    c000d788 <File::File(char const*, Process*)+0xd4>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	68 bc 53 02 c0       	push   0xc00253bc
c000d750:	e8 f4 f9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d755:	83 c4 10             	add    esp,0x10
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d762:	0f b6 c0             	movzx  eax,al
c000d765:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	50                   	push   eax
c000d770:	e8 53 32 00 00       	call   c00109c8 <LogicalDisk::mount()>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	68 7b 77 02 c0       	push   0xc002777b
c000d780:	e8 c4 f9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000d785:	83 c4 10             	add    esp,0x10
c000d788:	90                   	nop
c000d789:	83 c4 0c             	add    esp,0xc
c000d78c:	c3                   	ret    
c000d78d:	90                   	nop

c000d78e <File::open(FileOpenMode)>:
c000d78e:	53                   	push   ebx
c000d78f:	b8 0b 00 00 00       	mov    eax,0xb
c000d794:	83 ec 08             	sub    esp,0x8
c000d797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d79b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d7a2:	80 fa 19             	cmp    dl,0x19
c000d7a5:	77 40                	ja     c000d7e7 <File::open(FileOpenMode)+0x59>
c000d7a7:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000d7ae:	85 d2                	test   edx,edx
c000d7b0:	74 35                	je     c000d7e7 <File::open(FileOpenMode)+0x59>
c000d7b2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7b8:	85 d2                	test   edx,edx
c000d7ba:	74 2b                	je     c000d7e7 <File::open(FileOpenMode)+0x59>
c000d7bc:	b8 06 00 00 00       	mov    eax,0x6
c000d7c1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d7c5:	75 20                	jne    c000d7e7 <File::open(FileOpenMode)+0x59>
c000d7c7:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7c9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d3:	51                   	push   ecx
c000d7d4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d7d7:	51                   	push   ecx
c000d7d8:	52                   	push   edx
c000d7d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d7dc:	83 c4 10             	add    esp,0x10
c000d7df:	85 c0                	test   eax,eax
c000d7e1:	75 04                	jne    c000d7e7 <File::open(FileOpenMode)+0x59>
c000d7e3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d7e7:	83 c4 08             	add    esp,0x8
c000d7ea:	5b                   	pop    ebx
c000d7eb:	c3                   	ret    

c000d7ec <File::close()>:
c000d7ec:	53                   	push   ebx
c000d7ed:	b8 0b 00 00 00       	mov    eax,0xb
c000d7f2:	83 ec 08             	sub    esp,0x8
c000d7f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7f9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d800:	80 fa 19             	cmp    dl,0x19
c000d803:	77 41                	ja     c000d846 <File::close()+0x5a>
c000d805:	8b 1c 95 00 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e00]
c000d80c:	85 db                	test   ebx,ebx
c000d80e:	74 36                	je     c000d846 <File::close()+0x5a>
c000d810:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d817:	74 2d                	je     c000d846 <File::close()+0x5a>
c000d819:	b8 05 00 00 00       	mov    eax,0x5
c000d81e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d822:	74 22                	je     c000d846 <File::close()+0x5a>
c000d824:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d828:	8b 04 95 00 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e00]
c000d82f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d835:	53                   	push   ebx
c000d836:	53                   	push   ebx
c000d837:	8b 10                	mov    edx,DWORD PTR [eax]
c000d839:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d83f:	50                   	push   eax
c000d840:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	83 c4 08             	add    esp,0x8
c000d849:	5b                   	pop    ebx
c000d84a:	c3                   	ret    
c000d84b:	90                   	nop

c000d84c <File::seek(unsigned long long)>:
c000d84c:	56                   	push   esi
c000d84d:	53                   	push   ebx
c000d84e:	b8 0b 00 00 00       	mov    eax,0xb
c000d853:	51                   	push   ecx
c000d854:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d858:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d85c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d863:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d867:	80 fa 19             	cmp    dl,0x19
c000d86a:	77 31                	ja     c000d89d <File::seek(unsigned long long)+0x51>
c000d86c:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000d873:	85 d2                	test   edx,edx
c000d875:	74 26                	je     c000d89d <File::seek(unsigned long long)+0x51>
c000d877:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d87d:	85 d2                	test   edx,edx
c000d87f:	74 1c                	je     c000d89d <File::seek(unsigned long long)+0x51>
c000d881:	b8 05 00 00 00       	mov    eax,0x5
c000d886:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d88a:	74 11                	je     c000d89d <File::seek(unsigned long long)+0x51>
c000d88c:	8b 02                	mov    eax,DWORD PTR [edx]
c000d88e:	53                   	push   ebx
c000d88f:	51                   	push   ecx
c000d890:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d896:	52                   	push   edx
c000d897:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d89a:	83 c4 10             	add    esp,0x10
c000d89d:	5a                   	pop    edx
c000d89e:	5b                   	pop    ebx
c000d89f:	5e                   	pop    esi
c000d8a0:	c3                   	ret    
c000d8a1:	90                   	nop

c000d8a2 <File::tell(unsigned long long*)>:
c000d8a2:	83 ec 0c             	sub    esp,0xc
c000d8a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d8aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8ae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d8b5:	80 fa 19             	cmp    dl,0x19
c000d8b8:	77 34                	ja     c000d8ee <File::tell(unsigned long long*)+0x4c>
c000d8ba:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000d8c1:	85 d2                	test   edx,edx
c000d8c3:	74 29                	je     c000d8ee <File::tell(unsigned long long*)+0x4c>
c000d8c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d8cb:	85 d2                	test   edx,edx
c000d8cd:	74 1f                	je     c000d8ee <File::tell(unsigned long long*)+0x4c>
c000d8cf:	b8 05 00 00 00       	mov    eax,0x5
c000d8d4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d8d8:	74 14                	je     c000d8ee <File::tell(unsigned long long*)+0x4c>
c000d8da:	50                   	push   eax
c000d8db:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d8e7:	52                   	push   edx
c000d8e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d8eb:	83 c4 10             	add    esp,0x10
c000d8ee:	83 c4 0c             	add    esp,0xc
c000d8f1:	c3                   	ret    

c000d8f2 <File::rewind()>:
c000d8f2:	83 ec 10             	sub    esp,0x10
c000d8f5:	6a 00                	push   0x0
c000d8f7:	6a 00                	push   0x0
c000d8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fd:	e8 4a ff ff ff       	call   c000d84c <File::seek(unsigned long long)>
c000d902:	83 c4 1c             	add    esp,0x1c
c000d905:	c3                   	ret    

c000d906 <File::unlink()>:
c000d906:	83 ec 0c             	sub    esp,0xc
c000d909:	b8 0b 00 00 00       	mov    eax,0xb
c000d90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d912:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d919:	80 f9 19             	cmp    cl,0x19
c000d91c:	77 2f                	ja     c000d94d <File::unlink()+0x47>
c000d91e:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000d925:	85 c9                	test   ecx,ecx
c000d927:	74 24                	je     c000d94d <File::unlink()+0x47>
c000d929:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d92f:	85 c9                	test   ecx,ecx
c000d931:	74 1a                	je     c000d94d <File::unlink()+0x47>
c000d933:	b8 06 00 00 00       	mov    eax,0x6
c000d938:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d93c:	75 0f                	jne    c000d94d <File::unlink()+0x47>
c000d93e:	83 c2 0d             	add    edx,0xd
c000d941:	50                   	push   eax
c000d942:	50                   	push   eax
c000d943:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d945:	52                   	push   edx
c000d946:	51                   	push   ecx
c000d947:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	83 c4 0c             	add    esp,0xc
c000d950:	c3                   	ret    
c000d951:	90                   	nop

c000d952 <File::rename(char const*)>:
c000d952:	83 ec 0c             	sub    esp,0xc
c000d955:	b8 0b 00 00 00       	mov    eax,0xb
c000d95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d965:	80 f9 19             	cmp    cl,0x19
c000d968:	77 32                	ja     c000d99c <File::rename(char const*)+0x4a>
c000d96a:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000d971:	85 c9                	test   ecx,ecx
c000d973:	74 27                	je     c000d99c <File::rename(char const*)+0x4a>
c000d975:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d97b:	85 c9                	test   ecx,ecx
c000d97d:	74 1d                	je     c000d99c <File::rename(char const*)+0x4a>
c000d97f:	b8 06 00 00 00       	mov    eax,0x6
c000d984:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d988:	75 12                	jne    c000d99c <File::rename(char const*)+0x4a>
c000d98a:	83 c2 0d             	add    edx,0xd
c000d98d:	50                   	push   eax
c000d98e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d994:	52                   	push   edx
c000d995:	51                   	push   ecx
c000d996:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	83 c4 0c             	add    esp,0xc
c000d99f:	c3                   	ret    

c000d9a0 <File::chfatattr(unsigned char, unsigned char)>:
c000d9a0:	57                   	push   edi
c000d9a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d9a6:	56                   	push   esi
c000d9a7:	53                   	push   ebx
c000d9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d9bb:	80 f9 19             	cmp    cl,0x19
c000d9be:	77 37                	ja     c000d9f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9c0:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000d9c7:	85 c9                	test   ecx,ecx
c000d9c9:	74 2c                	je     c000d9f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9d1:	85 c9                	test   ecx,ecx
c000d9d3:	74 22                	je     c000d9f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9d5:	b8 06 00 00 00       	mov    eax,0x6
c000d9da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9de:	75 17                	jne    c000d9f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d9e0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d9e2:	89 f0                	mov    eax,esi
c000d9e4:	83 c2 0d             	add    edx,0xd
c000d9e7:	0f b6 f0             	movzx  esi,al
c000d9ea:	0f b6 db             	movzx  ebx,bl
c000d9ed:	56                   	push   esi
c000d9ee:	53                   	push   ebx
c000d9ef:	52                   	push   edx
c000d9f0:	51                   	push   ecx
c000d9f1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	5b                   	pop    ebx
c000d9f8:	5e                   	pop    esi
c000d9f9:	5f                   	pop    edi
c000d9fa:	c3                   	ret    
c000d9fb:	90                   	nop

c000d9fc <File::exists()>:
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	31 c0                	xor    eax,eax
c000da01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da0c:	80 f9 19             	cmp    cl,0x19
c000da0f:	77 24                	ja     c000da35 <File::exists()+0x39>
c000da11:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000da18:	85 c9                	test   ecx,ecx
c000da1a:	74 19                	je     c000da35 <File::exists()+0x39>
c000da1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da22:	85 c9                	test   ecx,ecx
c000da24:	74 0f                	je     c000da35 <File::exists()+0x39>
c000da26:	83 c2 0d             	add    edx,0xd
c000da29:	50                   	push   eax
c000da2a:	50                   	push   eax
c000da2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da2d:	52                   	push   edx
c000da2e:	51                   	push   ecx
c000da2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000da32:	83 c4 10             	add    esp,0x10
c000da35:	83 c4 0c             	add    esp,0xc
c000da38:	c3                   	ret    
c000da39:	90                   	nop

c000da3a <File::stat(unsigned long long*, bool*)>:
c000da3a:	56                   	push   esi
c000da3b:	53                   	push   ebx
c000da3c:	50                   	push   eax
c000da3d:	b8 0b 00 00 00       	mov    eax,0xb
c000da42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da55:	80 f9 19             	cmp    cl,0x19
c000da58:	77 3d                	ja     c000da97 <File::stat(unsigned long long*, bool*)+0x5d>
c000da5a:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000da61:	85 c9                	test   ecx,ecx
c000da63:	74 32                	je     c000da97 <File::stat(unsigned long long*, bool*)+0x5d>
c000da65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da6b:	85 c9                	test   ecx,ecx
c000da6d:	74 28                	je     c000da97 <File::stat(unsigned long long*, bool*)+0x5d>
c000da6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da71:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da75:	74 13                	je     c000da8a <File::stat(unsigned long long*, bool*)+0x50>
c000da77:	83 ec 04             	sub    esp,0x4
c000da7a:	56                   	push   esi
c000da7b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000da81:	51                   	push   ecx
c000da82:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000da85:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000da88:	eb 0a                	jmp    c000da94 <File::stat(unsigned long long*, bool*)+0x5a>
c000da8a:	53                   	push   ebx
c000da8b:	83 c2 0d             	add    edx,0xd
c000da8e:	56                   	push   esi
c000da8f:	52                   	push   edx
c000da90:	51                   	push   ecx
c000da91:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000da94:	83 c4 10             	add    esp,0x10
c000da97:	5a                   	pop    edx
c000da98:	5b                   	pop    ebx
c000da99:	5e                   	pop    esi
c000da9a:	c3                   	ret    

c000da9b <Fs::setcwd(Process*, char*)>:
c000da9b:	55                   	push   ebp
c000da9c:	57                   	push   edi
c000da9d:	56                   	push   esi
c000da9e:	53                   	push   ebx
c000da9f:	81 ec 20 02 00 00    	sub    esp,0x220
c000daa5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000daac:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000dab2:	57                   	push   edi
c000dab3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000daba:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000dabe:	56                   	push   esi
c000dabf:	e8 46 fa ff ff       	call   c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>
c000dac4:	89 34 24             	mov    DWORD PTR [esp],esi
c000dac7:	e8 e4 2b ff ff       	call   c00006b0 <strlen>
c000dacc:	83 c4 10             	add    esp,0x10
c000dacf:	83 f8 02             	cmp    eax,0x2
c000dad2:	77 15                	ja     c000dae9 <Fs::setcwd(Process*, char*)+0x4e>
c000dad4:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000dad9:	83 eb 41             	sub    ebx,0x41
c000dadc:	8b 04 9d 00 92 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6e00]
c000dae3:	85 c0                	test   eax,eax
c000dae5:	75 1c                	jne    c000db03 <Fs::setcwd(Process*, char*)+0x68>
c000dae7:	eb 4c                	jmp    c000db35 <Fs::setcwd(Process*, char*)+0x9a>
c000dae9:	83 ec 0c             	sub    esp,0xc
c000daec:	56                   	push   esi
c000daed:	e8 be 2b ff ff       	call   c00006b0 <strlen>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	83 f8 03             	cmp    eax,0x3
c000daf8:	75 74                	jne    c000db6e <Fs::setcwd(Process*, char*)+0xd3>
c000dafa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000daff:	75 6d                	jne    c000db6e <Fs::setcwd(Process*, char*)+0xd3>
c000db01:	eb d1                	jmp    c000dad4 <Fs::setcwd(Process*, char*)+0x39>
c000db03:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000db0a:	75 29                	jne    c000db35 <Fs::setcwd(Process*, char*)+0x9a>
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	68 94 53 02 c0       	push   0xc0025394
c000db14:	e8 30 f6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000db19:	5a                   	pop    edx
c000db1a:	ff 34 9d 00 92 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6e00]
c000db21:	e8 a2 2e 00 00       	call   c00109c8 <LogicalDisk::mount()>
c000db26:	c7 04 24 7b 77 02 c0 	mov    DWORD PTR [esp],0xc002777b
c000db2d:	e8 17 f6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000db32:	83 c4 10             	add    esp,0x10
c000db35:	b8 03 00 00 00       	mov    eax,0x3
c000db3a:	83 fb 19             	cmp    ebx,0x19
c000db3d:	0f 87 c6 00 00 00    	ja     c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000db43:	8b 14 9d 00 92 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6e00]
c000db4a:	b8 05 00 00 00       	mov    eax,0x5
c000db4f:	85 d2                	test   edx,edx
c000db51:	0f 84 b2 00 00 00    	je     c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000db57:	b8 06 00 00 00       	mov    eax,0x6
c000db5c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000db63:	0f 85 92 00 00 00    	jne    c000dbfb <Fs::setcwd(Process*, char*)+0x160>
c000db69:	e9 9b 00 00 00       	jmp    c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000db6e:	83 ec 0c             	sub    esp,0xc
c000db71:	68 14 01 00 00       	push   0x114
c000db76:	e8 6c c2 ff ff       	call   c0009de7 <malloc>
c000db7b:	83 c4 0c             	add    esp,0xc
c000db7e:	89 c3                	mov    ebx,eax
c000db80:	55                   	push   ebp
c000db81:	56                   	push   esi
c000db82:	50                   	push   eax
c000db83:	e8 2c fb ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c000db88:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000db8d:	83 c4 0c             	add    esp,0xc
c000db90:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000db94:	50                   	push   eax
c000db95:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db99:	50                   	push   eax
c000db9a:	53                   	push   ebx
c000db9b:	e8 9a fe ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c000dba0:	83 c4 10             	add    esp,0x10
c000dba3:	83 f8 02             	cmp    eax,0x2
c000dba6:	74 04                	je     c000dbac <Fs::setcwd(Process*, char*)+0x111>
c000dba8:	85 c0                	test   eax,eax
c000dbaa:	74 1c                	je     c000dbc8 <Fs::setcwd(Process*, char*)+0x12d>
c000dbac:	b8 01 00 00 00       	mov    eax,0x1
c000dbb1:	85 db                	test   ebx,ebx
c000dbb3:	74 54                	je     c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000dbb5:	83 ec 0c             	sub    esp,0xc
c000dbb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbba:	53                   	push   ebx
c000dbbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbbe:	83 c4 10             	add    esp,0x10
c000dbc1:	b8 01 00 00 00       	mov    eax,0x1
c000dbc6:	eb 41                	jmp    c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000dbc8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dbcd:	75 1c                	jne    c000dbeb <Fs::setcwd(Process*, char*)+0x150>
c000dbcf:	b8 02 00 00 00       	mov    eax,0x2
c000dbd4:	85 db                	test   ebx,ebx
c000dbd6:	74 31                	je     c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbdd:	53                   	push   ebx
c000dbde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbe1:	83 c4 10             	add    esp,0x10
c000dbe4:	b8 02 00 00 00       	mov    eax,0x2
c000dbe9:	eb 1e                	jmp    c000dc09 <Fs::setcwd(Process*, char*)+0x16e>
c000dbeb:	85 db                	test   ebx,ebx
c000dbed:	74 0c                	je     c000dbfb <Fs::setcwd(Process*, char*)+0x160>
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbf4:	53                   	push   ebx
c000dbf5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbf8:	83 c4 10             	add    esp,0x10
c000dbfb:	50                   	push   eax
c000dbfc:	50                   	push   eax
c000dbfd:	56                   	push   esi
c000dbfe:	57                   	push   edi
c000dbff:	e8 4c 2b ff ff       	call   c0000750 <strcpy>
c000dc04:	83 c4 10             	add    esp,0x10
c000dc07:	31 c0                	xor    eax,eax
c000dc09:	81 c4 1c 02 00 00    	add    esp,0x21c
c000dc0f:	5b                   	pop    ebx
c000dc10:	5e                   	pop    esi
c000dc11:	5f                   	pop    edi
c000dc12:	5d                   	pop    ebp
c000dc13:	c3                   	ret    

c000dc14 <Directory::Directory(char const*, Process*)>:
c000dc14:	83 ec 0c             	sub    esp,0xc
c000dc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1b:	83 ec 08             	sub    esp,0x8
c000dc1e:	6a 00                	push   0x0
c000dc20:	50                   	push   eax
c000dc21:	e8 38 dd ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000dc26:	83 c4 10             	add    esp,0x10
c000dc29:	ba 9c 54 02 c0       	mov    edx,0xc002549c
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	89 10                	mov    DWORD PTR [eax],edx
c000dc34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc38:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc42:	83 c0 0d             	add    eax,0xd
c000dc45:	83 ec 04             	sub    esp,0x4
c000dc48:	52                   	push   edx
c000dc49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4d:	50                   	push   eax
c000dc4e:	e8 b7 f8 ff ff       	call   c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dc5d:	8d 50 bf             	lea    edx,[eax-0x41]
c000dc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc64:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc6e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000dc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc76:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc7c:	0f b6 c0             	movzx  eax,al
c000dc7f:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000dc86:	85 c0                	test   eax,eax
c000dc88:	74 5e                	je     c000dce8 <Directory::Directory(char const*, Process*)+0xd4>
c000dc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc8e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc94:	0f b6 c0             	movzx  eax,al
c000dc97:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000dc9e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	75 40                	jne    c000dce8 <Directory::Directory(char const*, Process*)+0xd4>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	68 e4 53 02 c0       	push   0xc00253e4
c000dcb0:	e8 94 f4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000dcb5:	83 c4 10             	add    esp,0x10
c000dcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcbc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dcc2:	0f b6 c0             	movzx  eax,al
c000dcc5:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	50                   	push   eax
c000dcd0:	e8 f3 2c 00 00       	call   c00109c8 <LogicalDisk::mount()>
c000dcd5:	83 c4 10             	add    esp,0x10
c000dcd8:	83 ec 0c             	sub    esp,0xc
c000dcdb:	68 7b 77 02 c0       	push   0xc002777b
c000dce0:	e8 64 f4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	90                   	nop
c000dce9:	83 c4 0c             	add    esp,0xc
c000dcec:	c3                   	ret    
c000dced:	90                   	nop

c000dcee <Directory::open()>:
c000dcee:	53                   	push   ebx
c000dcef:	b8 0b 00 00 00       	mov    eax,0xb
c000dcf4:	83 ec 08             	sub    esp,0x8
c000dcf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcfb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dd02:	80 fa 19             	cmp    dl,0x19
c000dd05:	77 3d                	ja     c000dd44 <Directory::open()+0x56>
c000dd07:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000dd0e:	85 d2                	test   edx,edx
c000dd10:	74 32                	je     c000dd44 <Directory::open()+0x56>
c000dd12:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dd18:	85 d2                	test   edx,edx
c000dd1a:	74 28                	je     c000dd44 <Directory::open()+0x56>
c000dd1c:	b8 06 00 00 00       	mov    eax,0x6
c000dd21:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dd25:	75 1d                	jne    c000dd44 <Directory::open()+0x56>
c000dd27:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dd2d:	50                   	push   eax
c000dd2e:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd30:	51                   	push   ecx
c000dd31:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dd34:	51                   	push   ecx
c000dd35:	52                   	push   edx
c000dd36:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	85 c0                	test   eax,eax
c000dd3e:	75 04                	jne    c000dd44 <Directory::open()+0x56>
c000dd40:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dd44:	83 c4 08             	add    esp,0x8
c000dd47:	5b                   	pop    ebx
c000dd48:	c3                   	ret    
c000dd49:	90                   	nop

c000dd4a <Directory::close()>:
c000dd4a:	53                   	push   ebx
c000dd4b:	b8 0b 00 00 00       	mov    eax,0xb
c000dd50:	83 ec 08             	sub    esp,0x8
c000dd53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dd57:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd5e:	80 fa 19             	cmp    dl,0x19
c000dd61:	77 41                	ja     c000dda4 <Directory::close()+0x5a>
c000dd63:	8b 1c 95 00 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e00]
c000dd6a:	85 db                	test   ebx,ebx
c000dd6c:	74 36                	je     c000dda4 <Directory::close()+0x5a>
c000dd6e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dd75:	74 2d                	je     c000dda4 <Directory::close()+0x5a>
c000dd77:	b8 05 00 00 00       	mov    eax,0x5
c000dd7c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dd80:	74 22                	je     c000dda4 <Directory::close()+0x5a>
c000dd82:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dd86:	8b 04 95 00 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e00]
c000dd8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dd93:	53                   	push   ebx
c000dd94:	53                   	push   ebx
c000dd95:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dd9d:	50                   	push   eax
c000dd9e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dda1:	83 c4 10             	add    esp,0x10
c000dda4:	83 c4 08             	add    esp,0x8
c000dda7:	5b                   	pop    ebx
c000dda8:	c3                   	ret    
c000dda9:	90                   	nop

c000ddaa <Directory::unlink()>:
c000ddaa:	83 ec 0c             	sub    esp,0xc
c000ddad:	b8 0b 00 00 00       	mov    eax,0xb
c000ddb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddbd:	80 f9 19             	cmp    cl,0x19
c000ddc0:	77 2f                	ja     c000ddf1 <Directory::unlink()+0x47>
c000ddc2:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000ddc9:	85 c9                	test   ecx,ecx
c000ddcb:	74 24                	je     c000ddf1 <Directory::unlink()+0x47>
c000ddcd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddd3:	85 c9                	test   ecx,ecx
c000ddd5:	74 1a                	je     c000ddf1 <Directory::unlink()+0x47>
c000ddd7:	b8 06 00 00 00       	mov    eax,0x6
c000dddc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dde0:	75 0f                	jne    c000ddf1 <Directory::unlink()+0x47>
c000dde2:	83 c2 0d             	add    edx,0xd
c000dde5:	50                   	push   eax
c000dde6:	50                   	push   eax
c000dde7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dde9:	52                   	push   edx
c000ddea:	51                   	push   ecx
c000ddeb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ddee:	83 c4 10             	add    esp,0x10
c000ddf1:	83 c4 0c             	add    esp,0xc
c000ddf4:	c3                   	ret    
c000ddf5:	90                   	nop

c000ddf6 <Directory::rename(char const*)>:
c000ddf6:	83 ec 0c             	sub    esp,0xc
c000ddf9:	b8 0b 00 00 00       	mov    eax,0xb
c000ddfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de09:	80 f9 19             	cmp    cl,0x19
c000de0c:	77 32                	ja     c000de40 <Directory::rename(char const*)+0x4a>
c000de0e:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000de15:	85 c9                	test   ecx,ecx
c000de17:	74 27                	je     c000de40 <Directory::rename(char const*)+0x4a>
c000de19:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de1f:	85 c9                	test   ecx,ecx
c000de21:	74 1d                	je     c000de40 <Directory::rename(char const*)+0x4a>
c000de23:	b8 06 00 00 00       	mov    eax,0x6
c000de28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de2c:	75 12                	jne    c000de40 <Directory::rename(char const*)+0x4a>
c000de2e:	83 c2 0d             	add    edx,0xd
c000de31:	50                   	push   eax
c000de32:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de38:	52                   	push   edx
c000de39:	51                   	push   ecx
c000de3a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000de3d:	83 c4 10             	add    esp,0x10
c000de40:	83 c4 0c             	add    esp,0xc
c000de43:	c3                   	ret    

c000de44 <Directory::exists()>:
c000de44:	83 ec 0c             	sub    esp,0xc
c000de47:	31 c0                	xor    eax,eax
c000de49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de54:	80 f9 19             	cmp    cl,0x19
c000de57:	77 24                	ja     c000de7d <Directory::exists()+0x39>
c000de59:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000de60:	85 c9                	test   ecx,ecx
c000de62:	74 19                	je     c000de7d <Directory::exists()+0x39>
c000de64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de6a:	85 c9                	test   ecx,ecx
c000de6c:	74 0f                	je     c000de7d <Directory::exists()+0x39>
c000de6e:	83 c2 0d             	add    edx,0xd
c000de71:	50                   	push   eax
c000de72:	50                   	push   eax
c000de73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de75:	52                   	push   edx
c000de76:	51                   	push   ecx
c000de77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000de7a:	83 c4 10             	add    esp,0x10
c000de7d:	83 c4 0c             	add    esp,0xc
c000de80:	c3                   	ret    
c000de81:	90                   	nop

c000de82 <Directory::read(dirent*)>:
c000de82:	83 ec 1c             	sub    esp,0x1c
c000de85:	b8 0b 00 00 00       	mov    eax,0xb
c000de8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de8e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000de95:	80 fa 19             	cmp    dl,0x19
c000de98:	77 30                	ja     c000deca <Directory::read(dirent*)+0x48>
c000de9a:	8b 14 95 00 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e00]
c000dea1:	85 d2                	test   edx,edx
c000dea3:	74 25                	je     c000deca <Directory::read(dirent*)+0x48>
c000dea5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000deac:	74 1c                	je     c000deca <Directory::read(dirent*)+0x48>
c000deae:	83 ec 0c             	sub    esp,0xc
c000deb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000deb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000deb7:	52                   	push   edx
c000deb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000debc:	6a 00                	push   0x0
c000debe:	68 10 01 00 00       	push   0x110
c000dec3:	51                   	push   ecx
c000dec4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dec7:	83 c4 20             	add    esp,0x20
c000deca:	83 c4 1c             	add    esp,0x1c
c000decd:	c3                   	ret    

c000dece <Directory::create()>:
c000dece:	83 ec 0c             	sub    esp,0xc
c000ded1:	b8 0b 00 00 00       	mov    eax,0xb
c000ded6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dee1:	80 f9 19             	cmp    cl,0x19
c000dee4:	77 2f                	ja     c000df15 <Directory::create()+0x47>
c000dee6:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c000deed:	85 c9                	test   ecx,ecx
c000deef:	74 24                	je     c000df15 <Directory::create()+0x47>
c000def1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000def7:	85 c9                	test   ecx,ecx
c000def9:	74 1a                	je     c000df15 <Directory::create()+0x47>
c000defb:	b8 06 00 00 00       	mov    eax,0x6
c000df00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000df04:	75 0f                	jne    c000df15 <Directory::create()+0x47>
c000df06:	83 c2 0d             	add    edx,0xd
c000df09:	50                   	push   eax
c000df0a:	50                   	push   eax
c000df0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000df0d:	52                   	push   edx
c000df0e:	51                   	push   ecx
c000df0f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000df12:	83 c4 10             	add    esp,0x10
c000df15:	83 c4 0c             	add    esp,0xc
c000df18:	c3                   	ret    
c000df19:	90                   	nop

c000df1a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000df1a:	b8 0a 00 00 00       	mov    eax,0xa
c000df1f:	c3                   	ret    

c000df20 <Bus::Bus(char const*)>:
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df27:	83 ec 08             	sub    esp,0x8
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	50                   	push   eax
c000df2f:	e8 8a 09 00 00       	call   c000e8be <Device::Device(char const*)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	ba b8 54 02 c0       	mov    edx,0xc00254b8
c000df3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df40:	89 10                	mov    DWORD PTR [eax],edx
c000df42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df50:	90                   	nop
c000df51:	83 c4 0c             	add    esp,0xc
c000df54:	c3                   	ret    
c000df55:	90                   	nop
c000df56:	66 90                	xchg   ax,ax

c000df58 <Bus::~Bus()>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	ba b8 54 02 c0       	mov    edx,0xc00254b8
c000df60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df64:	89 10                	mov    DWORD PTR [eax],edx
c000df66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	50                   	push   eax
c000df6e:	e8 15 06 00 00       	call   c000e588 <Device::~Device()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	90                   	nop
c000df77:	83 c4 0c             	add    esp,0xc
c000df7a:	c3                   	ret    
c000df7b:	90                   	nop

c000df7c <Bus::~Bus()>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	83 ec 0c             	sub    esp,0xc
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	e8 cd ff ff ff       	call   c000df58 <Bus::~Bus()>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	83 ec 08             	sub    esp,0x8
c000df91:	68 58 01 00 00       	push   0x158
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 c9 f0 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 c4 0c             	add    esp,0xc
c000dfa5:	c3                   	ret    
c000dfa6:	66 90                	xchg   ax,ax

c000dfa8 <Buzzer::Buzzer(char const*)>:
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaf:	83 ec 08             	sub    esp,0x8
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	50                   	push   eax
c000dfb7:	e8 02 09 00 00       	call   c000e8be <Device::Device(char const*)>
c000dfbc:	83 c4 10             	add    esp,0x10
c000dfbf:	ba e4 54 02 c0       	mov    edx,0xc00254e4
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dfe6:	90                   	nop
c000dfe7:	83 c4 0c             	add    esp,0xc
c000dfea:	c3                   	ret    
c000dfeb:	90                   	nop

c000dfec <Buzzer::~Buzzer()>:
c000dfec:	83 ec 0c             	sub    esp,0xc
c000dfef:	ba e4 54 02 c0       	mov    edx,0xc00254e4
c000dff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff8:	89 10                	mov    DWORD PTR [eax],edx
c000dffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	50                   	push   eax
c000e002:	e8 81 05 00 00       	call   c000e588 <Device::~Device()>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	90                   	nop
c000e00b:	83 c4 0c             	add    esp,0xc
c000e00e:	c3                   	ret    
c000e00f:	90                   	nop

c000e010 <Buzzer::~Buzzer()>:
c000e010:	83 ec 0c             	sub    esp,0xc
c000e013:	83 ec 0c             	sub    esp,0xc
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	e8 cd ff ff ff       	call   c000dfec <Buzzer::~Buzzer()>
c000e01f:	83 c4 10             	add    esp,0x10
c000e022:	83 ec 08             	sub    esp,0x8
c000e025:	68 5c 01 00 00       	push   0x15c
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	e8 35 f0 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	83 c4 0c             	add    esp,0xc
c000e039:	c3                   	ret    

c000e03a <Buzzer::stop()>:
c000e03a:	83 ec 14             	sub    esp,0x14
c000e03d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e041:	8b 10                	mov    edx,DWORD PTR [eax]
c000e043:	6a 00                	push   0x0
c000e045:	50                   	push   eax
c000e046:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e049:	83 c4 1c             	add    esp,0x1c
c000e04c:	c3                   	ret    

c000e04d <beepThread(void*)>:
c000e04d:	53                   	push   ebx
c000e04e:	83 ec 08             	sub    esp,0x8
c000e051:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000e056:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e05a:	48                   	dec    eax
c000e05b:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000e060:	75 02                	jne    c000e064 <beepThread(void*)+0x17>
c000e062:	fb                   	sti    
c000e063:	90                   	nop
c000e064:	83 ec 0c             	sub    esp,0xc
c000e067:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000e06e:	50                   	push   eax
c000e06f:	e8 08 b2 00 00       	call   c001927c <milliTenthSleep(unsigned int)>
c000e074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e077:	e8 be ff ff ff       	call   c000e03a <Buzzer::stop()>
c000e07c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000e084:	83 c4 18             	add    esp,0x18
c000e087:	5b                   	pop    ebx
c000e088:	e9 ef b0 00 00       	jmp    c001917c <blockTask(TaskState)>
c000e08d:	90                   	nop

c000e08e <Buzzer::beep(int, int, bool)>:
c000e08e:	57                   	push   edi
c000e08f:	56                   	push   esi
c000e090:	53                   	push   ebx
c000e091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e095:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e099:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e09d:	50                   	push   eax
c000e09e:	50                   	push   eax
c000e09f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a5:	53                   	push   ebx
c000e0a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0a9:	83 c4 10             	add    esp,0x10
c000e0ac:	89 f8                	mov    eax,edi
c000e0ae:	84 c0                	test   al,al
c000e0b0:	74 1e                	je     c000e0d0 <Buzzer::beep(int, int, bool)+0x42>
c000e0b2:	83 ec 0c             	sub    esp,0xc
c000e0b5:	6b f6 0a             	imul   esi,esi,0xa
c000e0b8:	56                   	push   esi
c000e0b9:	e8 be b1 00 00       	call   c001927c <milliTenthSleep(unsigned int)>
c000e0be:	83 c4 10             	add    esp,0x10
c000e0c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e0c5:	5b                   	pop    ebx
c000e0c6:	5e                   	pop    esi
c000e0c7:	5f                   	pop    edi
c000e0c8:	e9 6d ff ff ff       	jmp    c000e03a <Buzzer::stop()>
c000e0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e0d0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e0d6:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000e0db:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000e0e3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e0e7:	c7 44 24 14 4d e0 00 c0 	mov    DWORD PTR [esp+0x14],0xc000e04d
c000e0ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0f3:	5b                   	pop    ebx
c000e0f4:	5e                   	pop    esi
c000e0f5:	5f                   	pop    edi
c000e0f6:	e9 6d ac 00 00       	jmp    c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c000e0fb:	90                   	nop

c000e0fc <User::loadClockSettings(int)>:
c000e0fc:	53                   	push   ebx
c000e0fd:	83 ec 14             	sub    esp,0x14
c000e100:	68 14 01 00 00       	push   0x114
c000e105:	e8 dd bc ff ff       	call   c0009de7 <malloc>
c000e10a:	83 c4 0c             	add    esp,0xc
c000e10d:	89 c3                	mov    ebx,eax
c000e10f:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c000e115:	68 0c 55 02 c0       	push   0xc002550c
c000e11a:	50                   	push   eax
c000e11b:	e8 94 f5 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c000e120:	58                   	pop    eax
c000e121:	5a                   	pop    edx
c000e122:	6a 01                	push   0x1
c000e124:	53                   	push   ebx
c000e125:	e8 64 f6 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c000e12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e12d:	e8 ba f6 ff ff       	call   c000d7ec <File::close()>
c000e132:	83 c4 10             	add    esp,0x10
c000e135:	85 db                	test   ebx,ebx
c000e137:	74 0f                	je     c000e148 <User::loadClockSettings(int)+0x4c>
c000e139:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e13b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e13f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e142:	83 c4 08             	add    esp,0x8
c000e145:	5b                   	pop    ebx
c000e146:	ff e0                	jmp    eax
c000e148:	83 c4 08             	add    esp,0x8
c000e14b:	5b                   	pop    ebx
c000e14c:	c3                   	ret    
c000e14d:	90                   	nop

c000e14e <Clock::Clock(char const*)>:
c000e14e:	83 ec 0c             	sub    esp,0xc
c000e151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e155:	83 ec 08             	sub    esp,0x8
c000e158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e15c:	50                   	push   eax
c000e15d:	e8 5c 07 00 00       	call   c000e8be <Device::Device(char const*)>
c000e162:	83 c4 10             	add    esp,0x10
c000e165:	ba 34 55 02 c0       	mov    edx,0xc0025534
c000e16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e16e:	89 10                	mov    DWORD PTR [eax],edx
c000e170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e174:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e17e:	90                   	nop
c000e17f:	83 c4 0c             	add    esp,0xc
c000e182:	c3                   	ret    
c000e183:	90                   	nop

c000e184 <Clock::~Clock()>:
c000e184:	83 ec 0c             	sub    esp,0xc
c000e187:	ba 34 55 02 c0       	mov    edx,0xc0025534
c000e18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e190:	89 10                	mov    DWORD PTR [eax],edx
c000e192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e196:	83 ec 0c             	sub    esp,0xc
c000e199:	50                   	push   eax
c000e19a:	e8 e9 03 00 00       	call   c000e588 <Device::~Device()>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	90                   	nop
c000e1a3:	83 c4 0c             	add    esp,0xc
c000e1a6:	c3                   	ret    
c000e1a7:	90                   	nop

c000e1a8 <Clock::~Clock()>:
c000e1a8:	83 ec 0c             	sub    esp,0xc
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b2:	e8 cd ff ff ff       	call   c000e184 <Clock::~Clock()>
c000e1b7:	83 c4 10             	add    esp,0x10
c000e1ba:	83 ec 08             	sub    esp,0x8
c000e1bd:	68 58 01 00 00       	push   0x158
c000e1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c6:	e8 9d ee ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	83 c4 0c             	add    esp,0xc
c000e1d1:	c3                   	ret    

c000e1d2 <Clock::timeInSecondsLocal()>:
c000e1d2:	53                   	push   ebx
c000e1d3:	83 ec 14             	sub    esp,0x14
c000e1d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e1da:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1dc:	50                   	push   eax
c000e1dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e1e0:	0f b6 0d 80 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d80
c000e1e7:	03 0d 84 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d84
c000e1ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1f3:	89 cb                	mov    ebx,ecx
c000e1f5:	c1 fb 1f             	sar    ebx,0x1f
c000e1f8:	01 c8                	add    eax,ecx
c000e1fa:	11 da                	adc    edx,ebx
c000e1fc:	83 c4 10             	add    esp,0x10
c000e1ff:	31 c9                	xor    ecx,ecx
c000e201:	80 3d 81 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d81,0x0
c000e208:	74 05                	je     c000e20f <Clock::timeInSecondsLocal()+0x3d>
c000e20a:	b9 08 07 00 00       	mov    ecx,0x708
c000e20f:	31 db                	xor    ebx,ebx
c000e211:	01 c8                	add    eax,ecx
c000e213:	11 da                	adc    edx,ebx
c000e215:	83 c4 08             	add    esp,0x8
c000e218:	5b                   	pop    ebx
c000e219:	c3                   	ret    

c000e21a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e21a:	57                   	push   edi
c000e21b:	56                   	push   esi
c000e21c:	53                   	push   ebx
c000e21d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e221:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e225:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e227:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e22b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e22e:	0f b6 05 80 8d 02 c0 	movzx  eax,BYTE PTR ds:0xc0028d80
c000e235:	03 05 84 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028d84
c000e23b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e241:	99                   	cdq    
c000e242:	29 c6                	sub    esi,eax
c000e244:	19 d7                	sbb    edi,edx
c000e246:	89 f0                	mov    eax,esi
c000e248:	89 fa                	mov    edx,edi
c000e24a:	31 f6                	xor    esi,esi
c000e24c:	80 3d 81 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d81,0x0
c000e253:	74 05                	je     c000e25a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e255:	be 08 07 00 00       	mov    esi,0x708
c000e25a:	31 ff                	xor    edi,edi
c000e25c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e260:	29 f0                	sub    eax,esi
c000e262:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e266:	19 fa                	sbb    edx,edi
c000e268:	89 d8                	mov    eax,ebx
c000e26a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e26e:	5b                   	pop    ebx
c000e26f:	5e                   	pop    esi
c000e270:	5f                   	pop    edi
c000e271:	ff e0                	jmp    eax

c000e273 <datetimeToSeconds(datetime_t)>:
c000e273:	55                   	push   ebp
c000e274:	57                   	push   edi
c000e275:	56                   	push   esi
c000e276:	53                   	push   ebx
c000e277:	83 ec 14             	sub    esp,0x14
c000e27a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e27e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e282:	89 d3                	mov    ebx,edx
c000e284:	0f b6 c6             	movzx  eax,dh
c000e287:	c1 eb 10             	shr    ebx,0x10
c000e28a:	48                   	dec    eax
c000e28b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e290:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e294:	0f b6 f5             	movzx  esi,ch
c000e297:	89 cf                	mov    edi,ecx
c000e299:	6b f6 3c             	imul   esi,esi,0x3c
c000e29c:	c1 ef 10             	shr    edi,0x10
c000e29f:	0f b6 c9             	movzx  ecx,cl
c000e2a2:	89 f8                	mov    eax,edi
c000e2a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2aa:	0f b6 f8             	movzx  edi,al
c000e2ad:	0f b6 d2             	movzx  edx,dl
c000e2b0:	01 fe                	add    esi,edi
c000e2b2:	01 f1                	add    ecx,esi
c000e2b4:	0f b7 f3             	movzx  esi,bx
c000e2b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e2bb:	c1 f9 1f             	sar    ecx,0x1f
c000e2be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e2c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e2c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e2cc:	8b 0c 8d 80 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdaa80]
c000e2d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e2d7:	76 29                	jbe    c000e302 <datetimeToSeconds(datetime_t)+0x8f>
c000e2d9:	f6 c3 03             	test   bl,0x3
c000e2dc:	75 24                	jne    c000e302 <datetimeToSeconds(datetime_t)+0x8f>
c000e2de:	31 d2                	xor    edx,edx
c000e2e0:	bf 64 00 00 00       	mov    edi,0x64
c000e2e5:	89 d8                	mov    eax,ebx
c000e2e7:	66 f7 f7             	div    di
c000e2ea:	66 85 d2             	test   dx,dx
c000e2ed:	75 12                	jne    c000e301 <datetimeToSeconds(datetime_t)+0x8e>
c000e2ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e2f5:	bf 90 01 00 00       	mov    edi,0x190
c000e2fa:	99                   	cdq    
c000e2fb:	f7 ff                	idiv   edi
c000e2fd:	85 d2                	test   edx,edx
c000e2ff:	75 01                	jne    c000e302 <datetimeToSeconds(datetime_t)+0x8f>
c000e301:	41                   	inc    ecx
c000e302:	66 83 fb 46          	cmp    bx,0x46
c000e306:	76 45                	jbe    c000e34d <datetimeToSeconds(datetime_t)+0xda>
c000e308:	bb 46 00 00 00       	mov    ebx,0x46
c000e30d:	bf 64 00 00 00       	mov    edi,0x64
c000e312:	bd 90 01 00 00       	mov    ebp,0x190
c000e317:	b8 6d 01 00 00       	mov    eax,0x16d
c000e31c:	f6 c3 03             	test   bl,0x3
c000e31f:	75 23                	jne    c000e344 <datetimeToSeconds(datetime_t)+0xd1>
c000e321:	89 d8                	mov    eax,ebx
c000e323:	99                   	cdq    
c000e324:	f7 ff                	idiv   edi
c000e326:	b8 6e 01 00 00       	mov    eax,0x16e
c000e32b:	85 d2                	test   edx,edx
c000e32d:	75 15                	jne    c000e344 <datetimeToSeconds(datetime_t)+0xd1>
c000e32f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e335:	99                   	cdq    
c000e336:	f7 fd                	idiv   ebp
c000e338:	83 fa 01             	cmp    edx,0x1
c000e33b:	19 c0                	sbb    eax,eax
c000e33d:	f7 d0                	not    eax
c000e33f:	05 6e 01 00 00       	add    eax,0x16e
c000e344:	01 c1                	add    ecx,eax
c000e346:	43                   	inc    ebx
c000e347:	39 f3                	cmp    ebx,esi
c000e349:	7c cc                	jl     c000e317 <datetimeToSeconds(datetime_t)+0xa4>
c000e34b:	eb 35                	jmp    c000e382 <datetimeToSeconds(datetime_t)+0x10f>
c000e34d:	74 33                	je     c000e382 <datetimeToSeconds(datetime_t)+0x10f>
c000e34f:	b8 45 00 00 00       	mov    eax,0x45
c000e354:	89 c2                	mov    edx,eax
c000e356:	83 e2 03             	and    edx,0x3
c000e359:	39 f0                	cmp    eax,esi
c000e35b:	7e 0f                	jle    c000e36c <datetimeToSeconds(datetime_t)+0xf9>
c000e35d:	83 fa 01             	cmp    edx,0x1
c000e360:	19 d2                	sbb    edx,edx
c000e362:	48                   	dec    eax
c000e363:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e36a:	eb e8                	jmp    c000e354 <datetimeToSeconds(datetime_t)+0xe1>
c000e36c:	b8 6d 01 00 00       	mov    eax,0x16d
c000e371:	85 d2                	test   edx,edx
c000e373:	75 0b                	jne    c000e380 <datetimeToSeconds(datetime_t)+0x10d>
c000e375:	66 83 fb 01          	cmp    bx,0x1
c000e379:	19 c0                	sbb    eax,eax
c000e37b:	05 6e 01 00 00       	add    eax,0x16e
c000e380:	29 c1                	sub    ecx,eax
c000e382:	b8 80 51 01 00       	mov    eax,0x15180
c000e387:	f7 e9                	imul   ecx
c000e389:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e38d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e391:	83 c4 14             	add    esp,0x14
c000e394:	5b                   	pop    ebx
c000e395:	5e                   	pop    esi
c000e396:	5f                   	pop    edi
c000e397:	5d                   	pop    ebp
c000e398:	c3                   	ret    
c000e399:	90                   	nop

c000e39a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e39a:	57                   	push   edi
c000e39b:	56                   	push   esi
c000e39c:	53                   	push   ebx
c000e39d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e3a1:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e3a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3ae:	e8 c0 fe ff ff       	call   c000e273 <datetimeToSeconds(datetime_t)>
c000e3b3:	59                   	pop    ecx
c000e3b4:	0f b6 0d 80 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d80
c000e3bb:	5b                   	pop    ebx
c000e3bc:	03 0d 84 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d84
c000e3c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e3c8:	89 cb                	mov    ebx,ecx
c000e3ca:	c1 fb 1f             	sar    ebx,0x1f
c000e3cd:	29 c8                	sub    eax,ecx
c000e3cf:	19 da                	sbb    edx,ebx
c000e3d1:	31 c9                	xor    ecx,ecx
c000e3d3:	80 3d 81 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d81,0x0
c000e3da:	74 05                	je     c000e3e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e3dc:	b9 08 07 00 00       	mov    ecx,0x708
c000e3e1:	31 db                	xor    ebx,ebx
c000e3e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e3e7:	29 c8                	sub    eax,ecx
c000e3e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e3ed:	19 da                	sbb    edx,ebx
c000e3ef:	89 f8                	mov    eax,edi
c000e3f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e3f5:	5b                   	pop    ebx
c000e3f6:	5e                   	pop    esi
c000e3f7:	5f                   	pop    edi
c000e3f8:	ff e0                	jmp    eax

c000e3fa <secondsToDatetime(unsigned long long)>:
c000e3fa:	55                   	push   ebp
c000e3fb:	57                   	push   edi
c000e3fc:	56                   	push   esi
c000e3fd:	53                   	push   ebx
c000e3fe:	83 ec 1c             	sub    esp,0x1c
c000e401:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e405:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e409:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e40d:	6a 00                	push   0x0
c000e40f:	68 80 51 01 00       	push   0x15180
c000e414:	55                   	push   ebp
c000e415:	57                   	push   edi
c000e416:	e8 f5 4b 01 00       	call   c0023010 <__udivdi3>
c000e41b:	83 c4 10             	add    esp,0x10
c000e41e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e428:	6a 00                	push   0x0
c000e42a:	68 80 51 01 00       	push   0x15180
c000e42f:	55                   	push   ebp
c000e430:	57                   	push   edi
c000e431:	bf 10 0e 00 00       	mov    edi,0xe10
c000e436:	e8 d5 4c 01 00       	call   c0023110 <__umoddi3>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	99                   	cdq    
c000e43f:	f7 ff                	idiv   edi
c000e441:	bf 3c 00 00 00       	mov    edi,0x3c
c000e446:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e449:	89 d0                	mov    eax,edx
c000e44b:	99                   	cdq    
c000e44c:	f7 ff                	idiv   edi
c000e44e:	85 db                	test   ebx,ebx
c000e450:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e453:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e456:	79 11                	jns    c000e469 <secondsToDatetime(unsigned long long)+0x6f>
c000e458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e45c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e462:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e467:	eb 07                	jmp    c000e470 <secondsToDatetime(unsigned long long)+0x76>
c000e469:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e46e:	89 d8                	mov    eax,ebx
c000e470:	bf b4 05 00 00       	mov    edi,0x5b4
c000e475:	99                   	cdq    
c000e476:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e47b:	f7 f9                	idiv   ecx
c000e47d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e482:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e486:	31 d2                	xor    edx,edx
c000e488:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e490:	01 c3                	add    ebx,eax
c000e492:	89 d8                	mov    eax,ebx
c000e494:	f7 f1                	div    ecx
c000e496:	31 d2                	xor    edx,edx
c000e498:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e49b:	89 d8                	mov    eax,ebx
c000e49d:	f7 f7                	div    edi
c000e49f:	31 d2                	xor    edx,edx
c000e4a1:	29 c1                	sub    ecx,eax
c000e4a3:	89 d8                	mov    eax,ebx
c000e4a5:	f7 f5                	div    ebp
c000e4a7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e4ac:	29 c1                	sub    ecx,eax
c000e4ae:	31 d2                	xor    edx,edx
c000e4b0:	89 c8                	mov    eax,ecx
c000e4b2:	f7 f5                	div    ebp
c000e4b4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e4b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4bd:	31 d2                	xor    edx,edx
c000e4bf:	89 c8                	mov    eax,ecx
c000e4c1:	f7 f5                	div    ebp
c000e4c3:	31 d2                	xor    edx,edx
c000e4c5:	01 c3                	add    ebx,eax
c000e4c7:	89 c8                	mov    eax,ecx
c000e4c9:	f7 f7                	div    edi
c000e4cb:	bf 99 00 00 00       	mov    edi,0x99
c000e4d0:	29 c3                	sub    ebx,eax
c000e4d2:	31 d2                	xor    edx,edx
c000e4d4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e4dc:	29 c3                	sub    ebx,eax
c000e4de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e4e1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e4e4:	bb 05 00 00 00       	mov    ebx,0x5
c000e4e9:	83 c1 02             	add    ecx,0x2
c000e4ec:	89 c8                	mov    eax,ecx
c000e4ee:	f7 f7                	div    edi
c000e4f0:	31 d2                	xor    edx,edx
c000e4f2:	89 c7                	mov    edi,eax
c000e4f4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e4fa:	83 c0 02             	add    eax,0x2
c000e4fd:	f7 f3                	div    ebx
c000e4ff:	89 eb                	mov    ebx,ebp
c000e501:	29 c3                	sub    ebx,eax
c000e503:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e509:	88 1e                	mov    BYTE PTR [esi],bl
c000e50b:	19 c0                	sbb    eax,eax
c000e50d:	31 d2                	xor    edx,edx
c000e50f:	83 e0 0c             	and    eax,0xc
c000e512:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e516:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e51e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e522:	83 f9 01             	cmp    ecx,0x1
c000e525:	0f 96 c2             	setbe  dl
c000e528:	41                   	inc    ecx
c000e529:	01 d0                	add    eax,edx
c000e52b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e52e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e532:	83 c4 1c             	add    esp,0x1c
c000e535:	89 f0                	mov    eax,esi
c000e537:	5b                   	pop    ebx
c000e538:	5e                   	pop    esi
c000e539:	5f                   	pop    edi
c000e53a:	5d                   	pop    ebp
c000e53b:	c2 04 00             	ret    0x4

c000e53e <Clock::timeInDatetimeLocal()>:
c000e53e:	53                   	push   ebx
c000e53f:	83 ec 14             	sub    esp,0x14
c000e542:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e54a:	e8 83 fc ff ff       	call   c000e1d2 <Clock::timeInSecondsLocal()>
c000e54f:	83 c4 0c             	add    esp,0xc
c000e552:	52                   	push   edx
c000e553:	50                   	push   eax
c000e554:	53                   	push   ebx
c000e555:	e8 a0 fe ff ff       	call   c000e3fa <secondsToDatetime(unsigned long long)>
c000e55a:	89 d8                	mov    eax,ebx
c000e55c:	83 c4 14             	add    esp,0x14
c000e55f:	5b                   	pop    ebx
c000e560:	c2 04 00             	ret    0x4
c000e563:	90                   	nop

c000e564 <Device::hibernate()>:
c000e564:	c3                   	ret    
c000e565:	90                   	nop

c000e566 <Device::wake()>:
c000e566:	c3                   	ret    
c000e567:	90                   	nop

c000e568 <Device::detect()>:
c000e568:	c3                   	ret    
c000e569:	90                   	nop

c000e56a <Device::disableLegacy()>:
c000e56a:	c3                   	ret    
c000e56b:	90                   	nop

c000e56c <Device::powerSaving(PowerSavingLevel)>:
c000e56c:	c3                   	ret    
c000e56d:	90                   	nop

c000e56e <DriverlessDevice::close(int, int, void*)>:
c000e56e:	31 c0                	xor    eax,eax
c000e570:	c3                   	ret    
c000e571:	90                   	nop

c000e572 <DriverlessDevice::detect()>:
c000e572:	c3                   	ret    
c000e573:	90                   	nop

c000e574 <DriverlessDevice::open(int, int, void*)>:
c000e574:	83 ec 18             	sub    esp,0x18
c000e577:	68 b0 55 02 c0       	push   0xc00255b0
c000e57c:	e8 a8 6c 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000e581:	83 c8 ff             	or     eax,0xffffffff
c000e584:	83 c4 1c             	add    esp,0x1c
c000e587:	c3                   	ret    

c000e588 <Device::~Device()>:
c000e588:	ba 10 56 02 c0       	mov    edx,0xc0025610
c000e58d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e591:	89 10                	mov    DWORD PTR [eax],edx
c000e593:	90                   	nop
c000e594:	c3                   	ret    
c000e595:	90                   	nop

c000e596 <Device::~Device()>:
c000e596:	83 ec 0c             	sub    esp,0xc
c000e599:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e59d:	e8 e6 ff ff ff       	call   c000e588 <Device::~Device()>
c000e5a2:	83 c4 04             	add    esp,0x4
c000e5a5:	83 ec 08             	sub    esp,0x8
c000e5a8:	68 58 01 00 00       	push   0x158
c000e5ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b1:	e8 b2 ea ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000e5b6:	83 c4 10             	add    esp,0x10
c000e5b9:	83 c4 0c             	add    esp,0xc
c000e5bc:	c3                   	ret    
c000e5bd:	90                   	nop

c000e5be <Device::findAndLoadDriver()>:
c000e5be:	c7 44 24 04 ce 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc00255ce
c000e5c6:	e9 7e eb ff ff       	jmp    c000d149 <Dbg::kprintf(char const*, ...)>
c000e5cb:	90                   	nop

c000e5cc <Device::preOpenPCI(PCIDeviceInfo)>:
c000e5cc:	57                   	push   edi
c000e5cd:	b9 09 00 00 00       	mov    ecx,0x9
c000e5d2:	56                   	push   esi
c000e5d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e5db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e5e5:	81 c7 18 01 00 00    	add    edi,0x118
c000e5eb:	fc                   	cld    
c000e5ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e5ee:	5e                   	pop    esi
c000e5ef:	5f                   	pop    edi
c000e5f0:	c3                   	ret    
c000e5f1:	90                   	nop

c000e5f2 <Device::preOpenACPI(void*, char*, char*)>:
c000e5f2:	57                   	push   edi
c000e5f3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e5f8:	56                   	push   esi
c000e5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e601:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e60b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e611:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e617:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e61b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e622:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e628:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e62c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e62e:	5e                   	pop    esi
c000e62f:	5f                   	pop    edi
c000e630:	c3                   	ret    
c000e631:	90                   	nop

c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e636:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e63b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e642:	75 0b                	jne    c000e64f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e644:	8b 00                	mov    eax,DWORD PTR [eax]
c000e646:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e64a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e64d:	eb 1e                	jmp    c000e66d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e64f:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000e654:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e65a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e660:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e662:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e666:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e66a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e66d:	ff e0                	jmp    eax
c000e66f:	90                   	nop

c000e670 <Device::getParent()>:
c000e670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e674:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e680:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e685:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e68c:	75 0b                	jne    c000e699 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e68e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e690:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e694:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e697:	eb 1e                	jmp    c000e6b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e699:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000e69e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e6aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e6b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e6b7:	ff e0                	jmp    eax
c000e6b9:	90                   	nop

c000e6ba <Device::addChild(Device*)>:
c000e6ba:	53                   	push   ebx
c000e6bb:	83 ec 08             	sub    esp,0x8
c000e6be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e6c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e6cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e6d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e6d4:	85 d2                	test   edx,edx
c000e6d6:	74 04                	je     c000e6dc <Device::addChild(Device*)+0x22>
c000e6d8:	89 d3                	mov    ebx,edx
c000e6da:	eb f6                	jmp    c000e6d2 <Device::addChild(Device*)+0x18>
c000e6dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e6df:	83 ec 0c             	sub    esp,0xc
c000e6e2:	6a 08                	push   0x8
c000e6e4:	e8 fe b6 ff ff       	call   c0009de7 <malloc>
c000e6e9:	89 03                	mov    DWORD PTR [ebx],eax
c000e6eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6f8:	83 c4 18             	add    esp,0x18
c000e6fb:	5b                   	pop    ebx
c000e6fc:	c3                   	ret    
c000e6fd:	90                   	nop

c000e6fe <Device::removeAllChildren()>:
c000e6fe:	56                   	push   esi
c000e6ff:	53                   	push   ebx
c000e700:	52                   	push   edx
c000e701:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e705:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e70b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e70e:	74 17                	je     c000e727 <Device::removeAllChildren()+0x29>
c000e710:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e713:	85 c0                	test   eax,eax
c000e715:	74 0c                	je     c000e723 <Device::removeAllChildren()+0x25>
c000e717:	83 ec 0c             	sub    esp,0xc
c000e71a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e71c:	50                   	push   eax
c000e71d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e720:	83 c4 10             	add    esp,0x10
c000e723:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e725:	eb e4                	jmp    c000e70b <Device::removeAllChildren()+0xd>
c000e727:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e72d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e733:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e740:	58                   	pop    eax
c000e741:	5b                   	pop    ebx
c000e742:	5e                   	pop    esi
c000e743:	c3                   	ret    

c000e744 <Device::hibernateAll()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 14             	sub    esp,0x14
c000e748:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e74c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e74e:	53                   	push   ebx
c000e74f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e752:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e75e:	74 0f                	je     c000e76f <Device::hibernateAll()+0x2b>
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e766:	e8 d9 ff ff ff       	call   c000e744 <Device::hibernateAll()>
c000e76b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e76d:	eb e9                	jmp    c000e758 <Device::hibernateAll()+0x14>
c000e76f:	83 c4 08             	add    esp,0x8
c000e772:	5b                   	pop    ebx
c000e773:	c3                   	ret    

c000e774 <Device::wakeAll()>:
c000e774:	53                   	push   ebx
c000e775:	83 ec 14             	sub    esp,0x14
c000e778:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e77e:	53                   	push   ebx
c000e77f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e782:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e788:	83 c4 10             	add    esp,0x10
c000e78b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e78e:	74 0f                	je     c000e79f <Device::wakeAll()+0x2b>
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e796:	e8 d9 ff ff ff       	call   c000e774 <Device::wakeAll()>
c000e79b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e79d:	eb e9                	jmp    c000e788 <Device::wakeAll()+0x14>
c000e79f:	83 c4 08             	add    esp,0x8
c000e7a2:	5b                   	pop    ebx
c000e7a3:	c3                   	ret    

c000e7a4 <Device::detectAll()>:
c000e7a4:	53                   	push   ebx
c000e7a5:	83 ec 14             	sub    esp,0x14
c000e7a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7ae:	53                   	push   ebx
c000e7af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e7b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7be:	74 0f                	je     c000e7cf <Device::detectAll()+0x2b>
c000e7c0:	83 ec 0c             	sub    esp,0xc
c000e7c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7c6:	e8 d9 ff ff ff       	call   c000e7a4 <Device::detectAll()>
c000e7cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7cd:	eb e9                	jmp    c000e7b8 <Device::detectAll()+0x14>
c000e7cf:	83 c4 08             	add    esp,0x8
c000e7d2:	5b                   	pop    ebx
c000e7d3:	c3                   	ret    

c000e7d4 <Device::disableLegacyAll()>:
c000e7d4:	53                   	push   ebx
c000e7d5:	83 ec 14             	sub    esp,0x14
c000e7d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7de:	53                   	push   ebx
c000e7df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e7e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7e8:	83 c4 10             	add    esp,0x10
c000e7eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7ee:	74 0f                	je     c000e7ff <Device::disableLegacyAll()+0x2b>
c000e7f0:	83 ec 0c             	sub    esp,0xc
c000e7f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7f6:	e8 d9 ff ff ff       	call   c000e7d4 <Device::disableLegacyAll()>
c000e7fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7fd:	eb e9                	jmp    c000e7e8 <Device::disableLegacyAll()+0x14>
c000e7ff:	83 c4 08             	add    esp,0x8
c000e802:	5b                   	pop    ebx
c000e803:	c3                   	ret    

c000e804 <Device::loadDriversForAll()>:
c000e804:	53                   	push   ebx
c000e805:	83 ec 08             	sub    esp,0x8
c000e808:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e80c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e813:	75 0c                	jne    c000e821 <Device::loadDriversForAll()+0x1d>
c000e815:	83 ec 0c             	sub    esp,0xc
c000e818:	53                   	push   ebx
c000e819:	e8 a0 fd ff ff       	call   c000e5be <Device::findAndLoadDriver()>
c000e81e:	83 c4 10             	add    esp,0x10
c000e821:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e827:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e82a:	74 12                	je     c000e83e <Device::loadDriversForAll()+0x3a>
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e832:	e8 cd ff ff ff       	call   c000e804 <Device::loadDriversForAll()>
c000e837:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	eb e9                	jmp    c000e827 <Device::loadDriversForAll()+0x23>
c000e83e:	83 c4 08             	add    esp,0x8
c000e841:	5b                   	pop    ebx
c000e842:	c3                   	ret    
c000e843:	90                   	nop

c000e844 <Device::closeAll()>:
c000e844:	53                   	push   ebx
c000e845:	83 ec 08             	sub    esp,0x8
c000e848:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e84c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e84e:	6a 00                	push   0x0
c000e850:	6a 00                	push   0x0
c000e852:	6a 00                	push   0x0
c000e854:	53                   	push   ebx
c000e855:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e858:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e864:	74 0f                	je     c000e875 <Device::closeAll()+0x31>
c000e866:	83 ec 0c             	sub    esp,0xc
c000e869:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e86c:	e8 d3 ff ff ff       	call   c000e844 <Device::closeAll()>
c000e871:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e873:	eb e9                	jmp    c000e85e <Device::closeAll()+0x1a>
c000e875:	83 c4 08             	add    esp,0x8
c000e878:	5b                   	pop    ebx
c000e879:	c3                   	ret    

c000e87a <Device::powerSavingAll(PowerSavingLevel)>:
c000e87a:	56                   	push   esi
c000e87b:	53                   	push   ebx
c000e87c:	83 ec 0c             	sub    esp,0xc
c000e87f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e883:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e887:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e889:	56                   	push   esi
c000e88a:	53                   	push   ebx
c000e88b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e88e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e89a:	74 0f                	je     c000e8ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e89c:	52                   	push   edx
c000e89d:	52                   	push   edx
c000e89e:	56                   	push   esi
c000e89f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e8a2:	e8 d3 ff ff ff       	call   c000e87a <Device::powerSavingAll(PowerSavingLevel)>
c000e8a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e8a9:	eb e9                	jmp    c000e894 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e8ab:	58                   	pop    eax
c000e8ac:	5b                   	pop    ebx
c000e8ad:	5e                   	pop    esi
c000e8ae:	c3                   	ret    
c000e8af:	90                   	nop

c000e8b0 <Device::setName(char const*)>:
c000e8b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e8b8:	e9 93 1e ff ff       	jmp    c0000750 <strcpy>
c000e8bd:	90                   	nop

c000e8be <Device::Device(char const*)>:
c000e8be:	83 ec 1c             	sub    esp,0x1c
c000e8c1:	ba 10 56 02 c0       	mov    edx,0xc0025610
c000e8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ca:	89 10                	mov    DWORD PTR [eax],edx
c000e8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e8f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e904:	83 ec 08             	sub    esp,0x8
c000e907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e90b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e90f:	e8 9c ff ff ff       	call   c000e8b0 <Device::setName(char const*)>
c000e914:	83 c4 10             	add    esp,0x10
c000e917:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e91f:	83 ec 0c             	sub    esp,0xc
c000e922:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e926:	e8 bc b4 ff ff       	call   c0009de7 <malloc>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e93b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e93f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e949:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e94f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e959:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e96a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e975:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e980:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e98e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e99c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9aa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e9b4:	90                   	nop
c000e9b5:	83 c4 1c             	add    esp,0x1c
c000e9b8:	c3                   	ret    
c000e9b9:	90                   	nop

c000e9ba <Device::getName()>:
c000e9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9be:	05 d0 00 00 00       	add    eax,0xd0
c000e9c3:	c3                   	ret    

c000e9c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9cb:	83 ec 08             	sub    esp,0x8
c000e9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9d2:	50                   	push   eax
c000e9d3:	e8 e6 fe ff ff       	call   c000e8be <Device::Device(char const*)>
c000e9d8:	83 c4 10             	add    esp,0x10
c000e9db:	ba 3c 56 02 c0       	mov    edx,0xc002563c
c000e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9e4:	89 10                	mov    DWORD PTR [eax],edx
c000e9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e9f4:	90                   	nop
c000e9f5:	83 c4 0c             	add    esp,0xc
c000e9f8:	c3                   	ret    
c000e9f9:	90                   	nop

c000e9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e9fa:	57                   	push   edi
c000e9fb:	56                   	push   esi
c000e9fc:	53                   	push   ebx
c000e9fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ea05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ea09:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ea0f:	75 0c                	jne    c000ea1d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ea11:	52                   	push   edx
c000ea12:	52                   	push   edx
c000ea13:	53                   	push   ebx
c000ea14:	56                   	push   esi
c000ea15:	e8 a8 4a 01 00       	call   c00234c2 <LinkedList<Device>::addElement(Device*)>
c000ea1a:	83 c4 10             	add    esp,0x10
c000ea1d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ea23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ea26:	74 12                	je     c000ea3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ea28:	50                   	push   eax
c000ea29:	57                   	push   edi
c000ea2a:	56                   	push   esi
c000ea2b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ea2e:	e8 c7 ff ff ff       	call   c000e9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ea33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ea35:	83 c4 10             	add    esp,0x10
c000ea38:	eb e9                	jmp    c000ea23 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ea3a:	5b                   	pop    ebx
c000ea3b:	5e                   	pop    esi
c000ea3c:	5f                   	pop    edi
c000ea3d:	c3                   	ret    

c000ea3e <getDevicesOfType(DeviceType)>:
c000ea3e:	53                   	push   ebx
c000ea3f:	83 ec 14             	sub    esp,0x14
c000ea42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea46:	53                   	push   ebx
c000ea47:	e8 52 4b 01 00       	call   c002359e <LinkedList<Device>::LinkedList()>
c000ea4c:	83 c4 0c             	add    esp,0xc
c000ea4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea53:	53                   	push   ebx
c000ea54:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c000ea5a:	e8 9b ff ff ff       	call   c000e9fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ea5f:	89 d8                	mov    eax,ebx
c000ea61:	83 c4 18             	add    esp,0x18
c000ea64:	5b                   	pop    ebx
c000ea65:	c2 04 00             	ret    0x4

c000ea68 <HardDiskController::HardDiskController(char const*)>:
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6f:	83 ec 08             	sub    esp,0x8
c000ea72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea76:	50                   	push   eax
c000ea77:	e8 42 fe ff ff       	call   c000e8be <Device::Device(char const*)>
c000ea7c:	83 c4 10             	add    esp,0x10
c000ea7f:	ba 68 56 02 c0       	mov    edx,0xc0025668
c000ea84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea88:	89 10                	mov    DWORD PTR [eax],edx
c000ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ea98:	90                   	nop
c000ea99:	83 c4 0c             	add    esp,0xc
c000ea9c:	c3                   	ret    
c000ea9d:	90                   	nop
c000ea9e:	66 90                	xchg   ax,ax

c000eaa0 <HardDiskController::~HardDiskController()>:
c000eaa0:	83 ec 0c             	sub    esp,0xc
c000eaa3:	ba 68 56 02 c0       	mov    edx,0xc0025668
c000eaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaac:	89 10                	mov    DWORD PTR [eax],edx
c000eaae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab2:	83 ec 0c             	sub    esp,0xc
c000eab5:	50                   	push   eax
c000eab6:	e8 cd fa ff ff       	call   c000e588 <Device::~Device()>
c000eabb:	83 c4 10             	add    esp,0x10
c000eabe:	90                   	nop
c000eabf:	83 c4 0c             	add    esp,0xc
c000eac2:	c3                   	ret    
c000eac3:	90                   	nop

c000eac4 <HardDiskController::~HardDiskController()>:
c000eac4:	83 ec 0c             	sub    esp,0xc
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eace:	e8 cd ff ff ff       	call   c000eaa0 <HardDiskController::~HardDiskController()>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	83 ec 08             	sub    esp,0x8
c000ead9:	68 58 01 00 00       	push   0x158
c000eade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eae2:	e8 81 e5 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000eae7:	83 c4 10             	add    esp,0x10
c000eaea:	83 c4 0c             	add    esp,0xc
c000eaed:	c3                   	ret    

c000eaee <PhysicalDisk::eject()>:
c000eaee:	83 c8 ff             	or     eax,0xffffffff
c000eaf1:	c3                   	ret    

c000eaf2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000eaf2:	83 ec 0c             	sub    esp,0xc
c000eaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf9:	83 ec 08             	sub    esp,0x8
c000eafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb00:	50                   	push   eax
c000eb01:	e8 b8 fd ff ff       	call   c000e8be <Device::Device(char const*)>
c000eb06:	83 c4 10             	add    esp,0x10
c000eb09:	ba 94 56 02 c0       	mov    edx,0xc0025694
c000eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb12:	89 10                	mov    DWORD PTR [eax],edx
c000eb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000eb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000eb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eb54:	90                   	nop
c000eb55:	83 c4 0c             	add    esp,0xc
c000eb58:	c3                   	ret    
c000eb59:	90                   	nop

c000eb5a <PhysicalDisk::startCache()>:
c000eb5a:	56                   	push   esi
c000eb5b:	53                   	push   ebx
c000eb5c:	83 ec 10             	sub    esp,0x10
c000eb5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb63:	6a 44                	push   0x44
c000eb65:	e8 7d b2 ff ff       	call   c0009de7 <malloc>
c000eb6a:	89 c6                	mov    esi,eax
c000eb6c:	58                   	pop    eax
c000eb6d:	5a                   	pop    edx
c000eb6e:	53                   	push   ebx
c000eb6f:	56                   	push   esi
c000eb70:	e8 6b 27 00 00       	call   c00112e0 <VCache::VCache(PhysicalDisk*)>
c000eb75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000eb7b:	83 c4 14             	add    esp,0x14
c000eb7e:	5b                   	pop    ebx
c000eb7f:	5e                   	pop    esi
c000eb80:	c3                   	ret    
c000eb81:	90                   	nop

c000eb82 <PhysicalDisk::~PhysicalDisk()>:
c000eb82:	83 ec 0c             	sub    esp,0xc
c000eb85:	ba 94 56 02 c0       	mov    edx,0xc0025694
c000eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8e:	89 10                	mov    DWORD PTR [eax],edx
c000eb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	50                   	push   eax
c000eb98:	e8 eb f9 ff ff       	call   c000e588 <Device::~Device()>
c000eb9d:	83 c4 10             	add    esp,0x10
c000eba0:	90                   	nop
c000eba1:	83 c4 0c             	add    esp,0xc
c000eba4:	c3                   	ret    
c000eba5:	90                   	nop

c000eba6 <PhysicalDisk::~PhysicalDisk()>:
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	83 ec 0c             	sub    esp,0xc
c000ebac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebb0:	e8 cd ff ff ff       	call   c000eb82 <PhysicalDisk::~PhysicalDisk()>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	83 ec 08             	sub    esp,0x8
c000ebbb:	68 6c 01 00 00       	push   0x16c
c000ebc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc4:	e8 9f e4 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 c4 0c             	add    esp,0xc
c000ebcf:	c3                   	ret    

c000ebd0 <FPU::FPU(char const*)>:
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd7:	83 ec 08             	sub    esp,0x8
c000ebda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebde:	50                   	push   eax
c000ebdf:	e8 da fc ff ff       	call   c000e8be <Device::Device(char const*)>
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	ba f4 56 02 c0       	mov    edx,0xc00256f4
c000ebec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf0:	89 10                	mov    DWORD PTR [eax],edx
c000ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ec00:	90                   	nop
c000ec01:	83 c4 0c             	add    esp,0xc
c000ec04:	c3                   	ret    
c000ec05:	90                   	nop
c000ec06:	66 90                	xchg   ax,ax

c000ec08 <FPU::~FPU()>:
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	ba f4 56 02 c0       	mov    edx,0xc00256f4
c000ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec14:	89 10                	mov    DWORD PTR [eax],edx
c000ec16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec1a:	83 ec 0c             	sub    esp,0xc
c000ec1d:	50                   	push   eax
c000ec1e:	e8 65 f9 ff ff       	call   c000e588 <Device::~Device()>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	90                   	nop
c000ec27:	83 c4 0c             	add    esp,0xc
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <FPU::~FPU()>:
c000ec2c:	83 ec 0c             	sub    esp,0xc
c000ec2f:	83 ec 0c             	sub    esp,0xc
c000ec32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec36:	e8 cd ff ff ff       	call   c000ec08 <FPU::~FPU()>
c000ec3b:	83 c4 10             	add    esp,0x10
c000ec3e:	83 ec 08             	sub    esp,0x8
c000ec41:	68 58 01 00 00       	push   0x158
c000ec46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec4a:	e8 19 e4 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	83 c4 0c             	add    esp,0xc
c000ec55:	c3                   	ret    

c000ec56 <setupFPU()>:
c000ec56:	53                   	push   ebx
c000ec57:	83 ec 14             	sub    esp,0x14
c000ec5a:	68 c4 56 02 c0       	push   0xc00256c4
c000ec5f:	e8 e5 e4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000ec64:	8b 15 48 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c48
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000ec74:	74 1a                	je     c000ec90 <setupFPU()+0x3a>
c000ec76:	83 ec 0c             	sub    esp,0xc
c000ec79:	68 58 01 00 00       	push   0x158
c000ec7e:	e8 64 b1 ff ff       	call   c0009de7 <malloc>
c000ec83:	89 c3                	mov    ebx,eax
c000ec85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec88:	e8 b7 2e 01 00       	call   c0021b44 <AVX::AVX()>
c000ec8d:	eb 6d                	jmp    c000ecfc <setupFPU()+0xa6>
c000ec8f:	90                   	nop
c000ec90:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ec96:	84 c0                	test   al,al
c000ec98:	79 1a                	jns    c000ecb4 <setupFPU()+0x5e>
c000ec9a:	83 ec 0c             	sub    esp,0xc
c000ec9d:	68 58 01 00 00       	push   0x158
c000eca2:	e8 40 b1 ff ff       	call   c0009de7 <malloc>
c000eca7:	89 c3                	mov    ebx,eax
c000eca9:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecac:	e8 c3 2f 01 00       	call   c0021c74 <SSE::SSE()>
c000ecb1:	eb 49                	jmp    c000ecfc <setupFPU()+0xa6>
c000ecb3:	90                   	nop
c000ecb4:	a8 20                	test   al,0x20
c000ecb6:	74 1c                	je     c000ecd4 <setupFPU()+0x7e>
c000ecb8:	83 ec 0c             	sub    esp,0xc
c000ecbb:	68 58 01 00 00       	push   0x158
c000ecc0:	e8 22 b1 ff ff       	call   c0009de7 <malloc>
c000ecc5:	89 c3                	mov    ebx,eax
c000ecc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecca:	e8 09 2f 01 00       	call   c0021bd8 <MMX::MMX()>
c000eccf:	eb 2b                	jmp    c000ecfc <setupFPU()+0xa6>
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	a8 10                	test   al,0x10
c000ecd6:	74 2c                	je     c000ed04 <setupFPU()+0xae>
c000ecd8:	83 ec 0c             	sub    esp,0xc
c000ecdb:	68 d7 56 02 c0       	push   0xc00256d7
c000ece0:	e8 64 e4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000ece5:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ecec:	e8 f6 b0 ff ff       	call   c0009de7 <malloc>
c000ecf1:	89 c3                	mov    ebx,eax
c000ecf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecf6:	e8 07 30 01 00       	call   c0021d02 <x87::x87()>
c000ecfb:	90                   	nop
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	eb 27                	jmp    c000ed28 <setupFPU()+0xd2>
c000ed01:	8d 76 00             	lea    esi,[esi+0x0]
c000ed04:	83 e0 ef             	and    eax,0xffffffef
c000ed07:	83 ec 0c             	sub    esp,0xc
c000ed0a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ed10:	68 e1 56 02 c0       	push   0xc00256e1
c000ed15:	e8 2f e4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000ed1a:	0f 20 c0             	mov    eax,cr0
c000ed1d:	83 c8 04             	or     eax,0x4
c000ed20:	0f 22 c0             	mov    cr0,eax
c000ed23:	31 db                	xor    ebx,ebx
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	89 d8                	mov    eax,ebx
c000ed2a:	83 c4 08             	add    esp,0x8
c000ed2d:	5b                   	pop    ebx
c000ed2e:	c3                   	ret    
c000ed2f:	90                   	nop

c000ed30 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ed30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed38:	c1 e0 04             	shl    eax,0x4
c000ed3b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ed3f:	8d 50 10             	lea    edx,[eax+0x10]
c000ed42:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ed48:	74 08                	je     c000ed52 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ed4a:	83 c0 04             	add    eax,0x4
c000ed4d:	39 d0                	cmp    eax,edx
c000ed4f:	75 f1                	jne    c000ed42 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ed51:	c3                   	ret    
c000ed52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ed5c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ed66:	eb e2                	jmp    c000ed4a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ed68 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ed68:	57                   	push   edi
c000ed69:	31 c0                	xor    eax,eax
c000ed6b:	56                   	push   esi
c000ed6c:	53                   	push   ebx
c000ed6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed75:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ed79:	89 da                	mov    edx,ebx
c000ed7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ed7f:	c1 e2 04             	shl    edx,0x4
c000ed82:	01 ca                	add    edx,ecx
c000ed84:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ed8c:	74 16                	je     c000eda4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ed8e:	40                   	inc    eax
c000ed8f:	83 f8 04             	cmp    eax,0x4
c000ed92:	75 f0                	jne    c000ed84 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ed94:	c7 44 24 10 24 57 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025724
c000ed9c:	5b                   	pop    ebx
c000ed9d:	5e                   	pop    esi
c000ed9e:	5f                   	pop    edi
c000ed9f:	e9 85 64 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c000eda4:	8d 04 98             	lea    eax,[eax+ebx*4]
c000eda7:	8d 04 81             	lea    eax,[ecx+eax*4]
c000edaa:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000edb0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000edb6:	5b                   	pop    ebx
c000edb7:	5e                   	pop    esi
c000edb8:	5f                   	pop    edi
c000edb9:	c3                   	ret    

c000edba <doubleFault(regs*, void*)>:
c000edba:	55                   	push   ebp
c000edbb:	89 e5                	mov    ebp,esp
c000edbd:	83 ec 08             	sub    esp,0x8
c000edc0:	83 ec 0c             	sub    esp,0xc
c000edc3:	68 31 57 02 c0       	push   0xc0025731
c000edc8:	e8 5c 64 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000edcd:	83 c4 10             	add    esp,0x10
c000edd0:	90                   	nop
c000edd1:	c9                   	leave  
c000edd2:	c3                   	ret    
c000edd3:	90                   	nop

c000edd4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000edd4:	56                   	push   esi
c000edd5:	53                   	push   ebx
c000edd6:	50                   	push   eax
c000edd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eddb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eddf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ede4:	75 35                	jne    c000ee1b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ede6:	8d 43 20             	lea    eax,[ebx+0x20]
c000ede9:	31 d2                	xor    edx,edx
c000edeb:	89 c1                	mov    ecx,eax
c000eded:	c1 e1 04             	shl    ecx,0x4
c000edf0:	01 f1                	add    ecx,esi
c000edf2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000edfa:	74 3e                	je     c000ee3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000edfc:	42                   	inc    edx
c000edfd:	83 fa 04             	cmp    edx,0x4
c000ee00:	75 f0                	jne    c000edf2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 4b 57 02 c0       	push   0xc002574b
c000ee0a:	e8 1a 64 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ee17:	5a                   	pop    edx
c000ee18:	5b                   	pop    ebx
c000ee19:	5e                   	pop    esi
c000ee1a:	c3                   	ret    
c000ee1b:	83 ec 0c             	sub    esp,0xc
c000ee1e:	56                   	push   esi
c000ee1f:	e8 96 fb ff ff       	call   c000e9ba <Device::getName()>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee2a:	75 ba                	jne    c000ede6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee2c:	83 fb 0f             	cmp    ebx,0xf
c000ee2f:	7f 29                	jg     c000ee5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ee31:	0f b6 9b 40 83 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7cc0]
c000ee38:	eb ac                	jmp    c000ede6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee3a:	8d 04 82             	lea    eax,[edx+eax*4]
c000ee3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee41:	8d 04 86             	lea    eax,[esi+eax*4]
c000ee44:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ee4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee4e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ee54:	89 d8                	mov    eax,ebx
c000ee56:	5a                   	pop    edx
c000ee57:	5b                   	pop    ebx
c000ee58:	5e                   	pop    esi
c000ee59:	c3                   	ret    
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	68 3e 57 02 c0       	push   0xc002573e
c000ee62:	e8 c2 63 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000ee67:	83 c4 10             	add    esp,0x10
c000ee6a:	e9 77 ff ff ff       	jmp    c000ede6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee6f:	90                   	nop

c000ee70 <InterruptController::clearAllHandlers(int, bool)>:
c000ee70:	56                   	push   esi
c000ee71:	53                   	push   ebx
c000ee72:	52                   	push   edx
c000ee73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee7b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ee80:	75 61                	jne    c000eee3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ee82:	8d 46 20             	lea    eax,[esi+0x20]
c000ee85:	c1 e6 04             	shl    esi,0x4
c000ee88:	c1 e0 04             	shl    eax,0x4
c000ee8b:	01 de                	add    esi,ebx
c000ee8d:	01 d8                	add    eax,ebx
c000ee8f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ee99:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eea3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000eead:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eeb7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000eec1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000eecb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eed5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eedf:	58                   	pop    eax
c000eee0:	5b                   	pop    ebx
c000eee1:	5e                   	pop    esi
c000eee2:	c3                   	ret    
c000eee3:	83 ec 0c             	sub    esp,0xc
c000eee6:	53                   	push   ebx
c000eee7:	e8 ce fa ff ff       	call   c000e9ba <Device::getName()>
c000eeec:	83 c4 10             	add    esp,0x10
c000eeef:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eef2:	75 8e                	jne    c000ee82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eef4:	83 fe 0f             	cmp    esi,0xf
c000eef7:	7f 09                	jg     c000ef02 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eef9:	0f b6 b6 40 83 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7cc0]
c000ef00:	eb 80                	jmp    c000ee82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ef02:	83 ec 0c             	sub    esp,0xc
c000ef05:	68 58 57 02 c0       	push   0xc0025758
c000ef0a:	e8 1a 63 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000ef0f:	83 c4 10             	add    esp,0x10
c000ef12:	e9 6b ff ff ff       	jmp    c000ee82 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ef17:	90                   	nop

c000ef18 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ef18:	56                   	push   esi
c000ef19:	53                   	push   ebx
c000ef1a:	52                   	push   edx
c000ef1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ef23:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ef28:	75 3a                	jne    c000ef64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ef2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef2e:	8d 50 20             	lea    edx,[eax+0x20]
c000ef31:	c1 e2 04             	shl    edx,0x4
c000ef34:	8d 04 16             	lea    eax,[esi+edx*1]
c000ef37:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ef3b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ef41:	74 0b                	je     c000ef4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ef43:	83 c0 04             	add    eax,0x4
c000ef46:	39 d0                	cmp    eax,edx
c000ef48:	75 f1                	jne    c000ef3b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ef4a:	58                   	pop    eax
c000ef4b:	5b                   	pop    ebx
c000ef4c:	5e                   	pop    esi
c000ef4d:	c3                   	ret    
c000ef4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ef58:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ef62:	eb df                	jmp    c000ef43 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	56                   	push   esi
c000ef68:	e8 4d fa ff ff       	call   c000e9ba <Device::getName()>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ef73:	75 b5                	jne    c000ef2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef75:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ef7a:	7f 11                	jg     c000ef8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ef7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef80:	0f b6 80 40 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7cc0]
c000ef87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef8b:	eb 9d                	jmp    c000ef2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef8d:	83 ec 0c             	sub    esp,0xc
c000ef90:	68 65 57 02 c0       	push   0xc0025765
c000ef95:	e8 8f 62 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000ef9a:	83 c4 10             	add    esp,0x10
c000ef9d:	eb 8b                	jmp    c000ef2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ef9f <nmiHandler(regs*, void*)>:
c000ef9f:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000efa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000efa8:	e9 8f a5 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000efad <int_handler>:
c000efad:	55                   	push   ebp
c000efae:	57                   	push   edi
c000efaf:	56                   	push   esi
c000efb0:	53                   	push   ebx
c000efb1:	83 ec 0c             	sub    esp,0xc
c000efb4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000efb8:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c000efbf:	74 0b                	je     c000efcc <int_handler+0x1f>
c000efc1:	fa                   	cli    
c000efc2:	f4                   	hlt    
c000efc3:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c000efca:	75 f5                	jne    c000efc1 <int_handler+0x14>
c000efcc:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000efd1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000efd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000efda:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000efe0:	8d 43 e0             	lea    eax,[ebx-0x20]
c000efe3:	83 f8 17             	cmp    eax,0x17
c000efe6:	77 13                	ja     c000effb <int_handler+0x4e>
c000efe8:	83 ec 08             	sub    esp,0x8
c000efeb:	8b 17                	mov    edx,DWORD PTR [edi]
c000efed:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eff0:	0f b6 c0             	movzx  eax,al
c000eff3:	50                   	push   eax
c000eff4:	57                   	push   edi
c000eff5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eff8:	83 c4 10             	add    esp,0x10
c000effb:	83 c3 15             	add    ebx,0x15
c000effe:	c1 e3 04             	shl    ebx,0x4
c000f001:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000f005:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000f00c:	31 db                	xor    ebx,ebx
c000f00e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000f012:	85 c0                	test   eax,eax
c000f014:	74 13                	je     c000f029 <int_handler+0x7c>
c000f016:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000f019:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000f01d:	74 1c                	je     c000f03b <int_handler+0x8e>
c000f01f:	83 ec 08             	sub    esp,0x8
c000f022:	52                   	push   edx
c000f023:	56                   	push   esi
c000f024:	ff d0                	call   eax
c000f026:	83 c4 10             	add    esp,0x10
c000f029:	43                   	inc    ebx
c000f02a:	83 fb 04             	cmp    ebx,0x4
c000f02d:	75 df                	jne    c000f00e <int_handler+0x61>
c000f02f:	83 c4 0c             	add    esp,0xc
c000f032:	31 c0                	xor    eax,eax
c000f034:	5b                   	pop    ebx
c000f035:	31 d2                	xor    edx,edx
c000f037:	5e                   	pop    esi
c000f038:	5f                   	pop    edi
c000f039:	5d                   	pop    ebp
c000f03a:	c3                   	ret    
c000f03b:	83 ec 08             	sub    esp,0x8
c000f03e:	52                   	push   edx
c000f03f:	56                   	push   esi
c000f040:	ff d0                	call   eax
c000f042:	83 c4 10             	add    esp,0x10
c000f045:	83 c4 0c             	add    esp,0xc
c000f048:	5b                   	pop    ebx
c000f049:	5e                   	pop    esi
c000f04a:	5f                   	pop    edi
c000f04b:	5d                   	pop    ebp
c000f04c:	c3                   	ret    
c000f04d:	90                   	nop

c000f04e <InterruptController::InterruptController(char const*)>:
c000f04e:	83 ec 1c             	sub    esp,0x1c
c000f051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f055:	83 ec 08             	sub    esp,0x8
c000f058:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f05c:	50                   	push   eax
c000f05d:	e8 5c f8 ff ff       	call   c000e8be <Device::Device(char const*)>
c000f062:	83 c4 10             	add    esp,0x10
c000f065:	ba 9c 5a 02 c0       	mov    edx,0xc0025a9c
c000f06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06e:	89 10                	mov    DWORD PTR [eax],edx
c000f070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f074:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000f07e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f086:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000f08e:	7f 5e                	jg     c000f0ee <InterruptController::InterruptController(char const*)+0xa0>
c000f090:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f098:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000f09d:	7f 49                	jg     c000f0e8 <InterruptController::InterruptController(char const*)+0x9a>
c000f09f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f0a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f0ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0b2:	01 ca                	add    edx,ecx
c000f0b4:	83 c2 54             	add    edx,0x54
c000f0b7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f0c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f0ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0d2:	01 ca                	add    edx,ecx
c000f0d4:	81 c2 54 04 00 00    	add    edx,0x454
c000f0da:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f0e2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000f0e6:	eb b0                	jmp    c000f098 <InterruptController::InterruptController(char const*)+0x4a>
c000f0e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f0ec:	eb 98                	jmp    c000f086 <InterruptController::InterruptController(char const*)+0x38>
c000f0ee:	90                   	nop
c000f0ef:	83 c4 1c             	add    esp,0x1c
c000f0f2:	c3                   	ret    
c000f0f3:	90                   	nop

c000f0f4 <InterruptController::~InterruptController()>:
c000f0f4:	83 ec 0c             	sub    esp,0xc
c000f0f7:	ba 9c 5a 02 c0       	mov    edx,0xc0025a9c
c000f0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f100:	89 10                	mov    DWORD PTR [eax],edx
c000f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f106:	83 ec 0c             	sub    esp,0xc
c000f109:	50                   	push   eax
c000f10a:	e8 79 f4 ff ff       	call   c000e588 <Device::~Device()>
c000f10f:	83 c4 10             	add    esp,0x10
c000f112:	90                   	nop
c000f113:	83 c4 0c             	add    esp,0xc
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <InterruptController::~InterruptController()>:
c000f118:	83 ec 0c             	sub    esp,0xc
c000f11b:	83 ec 0c             	sub    esp,0xc
c000f11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f122:	e8 cd ff ff ff       	call   c000f0f4 <InterruptController::~InterruptController()>
c000f127:	83 c4 10             	add    esp,0x10
c000f12a:	83 ec 08             	sub    esp,0x8
c000f12d:	68 58 21 00 00       	push   0x2158
c000f132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f136:	e8 2d df ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c000f13b:	83 c4 10             	add    esp,0x10
c000f13e:	83 c4 0c             	add    esp,0xc
c000f141:	c3                   	ret    

c000f142 <displayDebugInfo(regs*)>:
c000f142:	55                   	push   ebp
c000f143:	57                   	push   edi
c000f144:	56                   	push   esi
c000f145:	53                   	push   ebx
c000f146:	83 ec 24             	sub    esp,0x24
c000f149:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f14d:	0f 20 c2             	mov    edx,cr0
c000f150:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f154:	0f 20 d7             	mov    edi,cr2
c000f157:	0f 20 de             	mov    esi,cr3
c000f15a:	0f 20 e5             	mov    ebp,cr4
c000f15d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f160:	68 72 57 02 c0       	push   0xc0025772
c000f165:	e8 df df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f16a:	59                   	pop    ecx
c000f16b:	58                   	pop    eax
c000f16c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f16f:	68 7d 57 02 c0       	push   0xc002577d
c000f174:	e8 d0 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f179:	58                   	pop    eax
c000f17a:	5a                   	pop    edx
c000f17b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f17e:	68 88 57 02 c0       	push   0xc0025788
c000f183:	e8 c1 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f188:	59                   	pop    ecx
c000f189:	58                   	pop    eax
c000f18a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f18d:	68 93 57 02 c0       	push   0xc0025793
c000f192:	e8 b2 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f197:	58                   	pop    eax
c000f198:	5a                   	pop    edx
c000f199:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f19c:	68 9e 57 02 c0       	push   0xc002579e
c000f1a1:	e8 a3 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1a6:	59                   	pop    ecx
c000f1a7:	58                   	pop    eax
c000f1a8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f1ab:	68 a9 57 02 c0       	push   0xc00257a9
c000f1b0:	e8 94 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1b5:	58                   	pop    eax
c000f1b6:	5a                   	pop    edx
c000f1b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f1ba:	68 b4 57 02 c0       	push   0xc00257b4
c000f1bf:	e8 85 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1c4:	59                   	pop    ecx
c000f1c5:	58                   	pop    eax
c000f1c6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f1c9:	68 bf 57 02 c0       	push   0xc00257bf
c000f1ce:	e8 76 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1d3:	58                   	pop    eax
c000f1d4:	5a                   	pop    edx
c000f1d5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f1d8:	68 ca 57 02 c0       	push   0xc00257ca
c000f1dd:	e8 67 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1e2:	59                   	pop    ecx
c000f1e3:	58                   	pop    eax
c000f1e4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1e7:	68 d9 57 02 c0       	push   0xc00257d9
c000f1ec:	e8 58 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f1f1:	58                   	pop    eax
c000f1f2:	5a                   	pop    edx
c000f1f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1f6:	68 e4 57 02 c0       	push   0xc00257e4
c000f1fb:	e8 49 df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f200:	59                   	pop    ecx
c000f201:	58                   	pop    eax
c000f202:	57                   	push   edi
c000f203:	68 ef 57 02 c0       	push   0xc00257ef
c000f208:	e8 3c df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f20d:	58                   	pop    eax
c000f20e:	5a                   	pop    edx
c000f20f:	56                   	push   esi
c000f210:	68 fa 57 02 c0       	push   0xc00257fa
c000f215:	e8 2f df ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f21a:	59                   	pop    ecx
c000f21b:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f220:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f226:	e8 aa bc ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000f22b:	58                   	pop    eax
c000f22c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f22f:	5a                   	pop    edx
c000f230:	c1 e0 05             	shl    eax,0x5
c000f233:	05 a0 80 02 c0       	add    eax,0xc00280a0
c000f238:	50                   	push   eax
c000f239:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f23e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f244:	e8 99 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f249:	59                   	pop    ecx
c000f24a:	58                   	pop    eax
c000f24b:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f250:	68 05 58 02 c0       	push   0xc0025805
c000f255:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f25b:	e8 82 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f260:	58                   	pop    eax
c000f261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f266:	5a                   	pop    edx
c000f267:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f26a:	83 c0 0c             	add    eax,0xc
c000f26d:	50                   	push   eax
c000f26e:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f273:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f279:	e8 64 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f27e:	59                   	pop    ecx
c000f27f:	58                   	pop    eax
c000f280:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f285:	68 0e 58 02 c0       	push   0xc002580e
c000f28a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f290:	e8 4d c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f295:	58                   	pop    eax
c000f296:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f29b:	5a                   	pop    edx
c000f29c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f29f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2a5:	e8 f2 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2aa:	59                   	pop    ecx
c000f2ab:	58                   	pop    eax
c000f2ac:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f2b1:	68 16 58 02 c0       	push   0xc0025816
c000f2b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2bc:	e8 21 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2c1:	58                   	pop    eax
c000f2c2:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f2c7:	5a                   	pop    edx
c000f2c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f2cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2d1:	e8 c6 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2d6:	59                   	pop    ecx
c000f2d7:	58                   	pop    eax
c000f2d8:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f2dd:	68 1e 58 02 c0       	push   0xc002581e
c000f2e2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e8:	e8 f5 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2ed:	58                   	pop    eax
c000f2ee:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f2f3:	5a                   	pop    edx
c000f2f4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f2f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2fd:	e8 9a c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f302:	59                   	pop    ecx
c000f303:	58                   	pop    eax
c000f304:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f309:	68 26 58 02 c0       	push   0xc0025826
c000f30e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f314:	e8 c9 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f319:	58                   	pop    eax
c000f31a:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f31f:	5a                   	pop    edx
c000f320:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f323:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f329:	e8 6e c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f32e:	59                   	pop    ecx
c000f32f:	58                   	pop    eax
c000f330:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f335:	68 2e 58 02 c0       	push   0xc002582e
c000f33a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f340:	e8 9d c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f345:	58                   	pop    eax
c000f346:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f34b:	5a                   	pop    edx
c000f34c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f34f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f355:	e8 42 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f35a:	59                   	pop    ecx
c000f35b:	58                   	pop    eax
c000f35c:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f361:	68 36 58 02 c0       	push   0xc0025836
c000f366:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f36c:	e8 71 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f371:	58                   	pop    eax
c000f372:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f377:	5a                   	pop    edx
c000f378:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f37b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f381:	e8 16 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f386:	59                   	pop    ecx
c000f387:	58                   	pop    eax
c000f388:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f38d:	68 3e 58 02 c0       	push   0xc002583e
c000f392:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f398:	e8 45 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f39d:	58                   	pop    eax
c000f39e:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f3a3:	5a                   	pop    edx
c000f3a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3a8:	52                   	push   edx
c000f3a9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3af:	e8 e8 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3b4:	59                   	pop    ecx
c000f3b5:	58                   	pop    eax
c000f3b6:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f3bb:	68 47 58 02 c0       	push   0xc0025847
c000f3c0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c6:	e8 17 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3cb:	58                   	pop    eax
c000f3cc:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f3d1:	5a                   	pop    edx
c000f3d2:	57                   	push   edi
c000f3d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3d9:	e8 be bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3de:	59                   	pop    ecx
c000f3df:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f3e4:	5f                   	pop    edi
c000f3e5:	68 4f 58 02 c0       	push   0xc002584f
c000f3ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3f0:	e8 ed bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3f5:	58                   	pop    eax
c000f3f6:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f3fb:	5a                   	pop    edx
c000f3fc:	56                   	push   esi
c000f3fd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f403:	e8 94 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f408:	59                   	pop    ecx
c000f409:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f40e:	5e                   	pop    esi
c000f40f:	68 57 58 02 c0       	push   0xc0025857
c000f414:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f41a:	e8 c3 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f41f:	5f                   	pop    edi
c000f420:	58                   	pop    eax
c000f421:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f426:	55                   	push   ebp
c000f427:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f42d:	e8 6a bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f432:	58                   	pop    eax
c000f433:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f438:	5a                   	pop    edx
c000f439:	68 5f 58 02 c0       	push   0xc002585f
c000f43e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f444:	e8 99 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f449:	0f 21 c0             	mov    eax,db0
c000f44c:	59                   	pop    ecx
c000f44d:	5e                   	pop    esi
c000f44e:	50                   	push   eax
c000f44f:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f454:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f45a:	e8 3d bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f45f:	5f                   	pop    edi
c000f460:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f465:	5d                   	pop    ebp
c000f466:	68 68 58 02 c0       	push   0xc0025868
c000f46b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f471:	e8 6c bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f476:	0f 21 c8             	mov    eax,db1
c000f479:	5a                   	pop    edx
c000f47a:	59                   	pop    ecx
c000f47b:	50                   	push   eax
c000f47c:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f481:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f487:	e8 10 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f48c:	5e                   	pop    esi
c000f48d:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f492:	5f                   	pop    edi
c000f493:	68 70 58 02 c0       	push   0xc0025870
c000f498:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f49e:	e8 3f bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4a3:	0f 21 d0             	mov    eax,db2
c000f4a6:	5d                   	pop    ebp
c000f4a7:	5a                   	pop    edx
c000f4a8:	50                   	push   eax
c000f4a9:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f4ae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4b4:	e8 e3 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4b9:	59                   	pop    ecx
c000f4ba:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f4bf:	5e                   	pop    esi
c000f4c0:	68 78 58 02 c0       	push   0xc0025878
c000f4c5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4cb:	e8 12 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4d0:	0f 21 d8             	mov    eax,db3
c000f4d3:	5f                   	pop    edi
c000f4d4:	5d                   	pop    ebp
c000f4d5:	50                   	push   eax
c000f4d6:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f4db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4e1:	e8 b6 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4e6:	58                   	pop    eax
c000f4e7:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f4ec:	5a                   	pop    edx
c000f4ed:	68 80 58 02 c0       	push   0xc0025880
c000f4f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4f8:	e8 e5 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4fd:	0f 21 f0             	mov    eax,db6
c000f500:	59                   	pop    ecx
c000f501:	5e                   	pop    esi
c000f502:	50                   	push   eax
c000f503:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f508:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f50e:	e8 89 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f513:	5f                   	pop    edi
c000f514:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f519:	5d                   	pop    ebp
c000f51a:	68 88 58 02 c0       	push   0xc0025888
c000f51f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f525:	e8 b8 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f52a:	0f 21 f8             	mov    eax,db7
c000f52d:	5a                   	pop    edx
c000f52e:	59                   	pop    ecx
c000f52f:	50                   	push   eax
c000f530:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f535:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f53b:	e8 5c be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f540:	5e                   	pop    esi
c000f541:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f544:	e8 04 90 00 00       	call   c001854d <Thr::getDriverNameFromAddress(unsigned long)>
c000f549:	83 c4 10             	add    esp,0x10
c000f54c:	85 c0                	test   eax,eax
c000f54e:	74 7d                	je     c000f5cd <displayDebugInfo(regs*)+0x48b>
c000f550:	89 c6                	mov    esi,eax
c000f552:	50                   	push   eax
c000f553:	50                   	push   eax
c000f554:	56                   	push   esi
c000f555:	68 90 58 02 c0       	push   0xc0025890
c000f55a:	e8 ea db ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f55f:	5a                   	pop    edx
c000f560:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f565:	59                   	pop    ecx
c000f566:	68 9e 58 02 c0       	push   0xc002589e
c000f56b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f571:	e8 6c be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f576:	5f                   	pop    edi
c000f577:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f57c:	5d                   	pop    ebp
c000f57d:	56                   	push   esi
c000f57e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f584:	e8 59 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f589:	58                   	pop    eax
c000f58a:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f58f:	5a                   	pop    edx
c000f590:	68 aa 58 02 c0       	push   0xc00258aa
c000f595:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f59b:	e8 42 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f5a0:	59                   	pop    ecx
c000f5a1:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c000f5a6:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f5ac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f5af:	e8 d0 8f 00 00       	call   c0018584 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f5b4:	5b                   	pop    ebx
c000f5b5:	5d                   	pop    ebp
c000f5b6:	50                   	push   eax
c000f5b7:	57                   	push   edi
c000f5b8:	e8 df bd ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f5bd:	58                   	pop    eax
c000f5be:	5a                   	pop    edx
c000f5bf:	56                   	push   esi
c000f5c0:	68 b6 58 02 c0       	push   0xc00258b6
c000f5c5:	e8 7f db ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	fa                   	cli    
c000f5ce:	f4                   	hlt    
c000f5cf:	eb fe                	jmp    c000f5cf <displayDebugInfo(regs*)+0x48d>

c000f5d1 <x87EmulHandler(regs*, void*)>:
c000f5d1:	53                   	push   ebx
c000f5d2:	83 ec 14             	sub    esp,0x14
c000f5d5:	68 c6 58 02 c0       	push   0xc00258c6
c000f5da:	e8 6a db ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f5df:	0f 20 c2             	mov    edx,cr0
c000f5e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5e7:	83 c4 10             	add    esp,0x10
c000f5ea:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f5ee:	0f 85 0f 01 00 00    	jne    c000f703 <x87EmulHandler(regs*, void*)+0x132>
c000f5f4:	f6 05 61 8c 02 c0 40 	test   BYTE PTR ds:0xc0028c61,0x40
c000f5fb:	75 30                	jne    c000f62d <x87EmulHandler(regs*, void*)+0x5c>
c000f5fd:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000f602:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f608:	85 c0                	test   eax,eax
c000f60a:	74 05                	je     c000f611 <x87EmulHandler(regs*, void*)+0x40>
c000f60c:	83 e2 08             	and    edx,0x8
c000f60f:	75 23                	jne    c000f634 <x87EmulHandler(regs*, void*)+0x63>
c000f611:	83 ec 0c             	sub    esp,0xc
c000f614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f618:	e8 95 b4 00 00       	call   c001aab2 <Vm::x87Handler(regs*)>
c000f61d:	83 c4 10             	add    esp,0x10
c000f620:	84 c0                	test   al,al
c000f622:	0f 84 db 00 00 00    	je     c000f703 <x87EmulHandler(regs*, void*)+0x132>
c000f628:	83 c4 08             	add    esp,0x8
c000f62b:	5b                   	pop    ebx
c000f62c:	c3                   	ret    
c000f62d:	0f 06                	clts   
c000f62f:	83 c4 08             	add    esp,0x8
c000f632:	5b                   	pop    ebx
c000f633:	c3                   	ret    
c000f634:	83 ec 0c             	sub    esp,0xc
c000f637:	68 f6 58 02 c0       	push   0xc00258f6
c000f63c:	e8 08 db ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f641:	0f 06                	clts   
c000f643:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	85 c0                	test   eax,eax
c000f64d:	74 33                	je     c000f682 <x87EmulHandler(regs*, void*)+0xb1>
c000f64f:	83 ec 0c             	sub    esp,0xc
c000f652:	68 03 59 02 c0       	push   0xc0025903
c000f657:	e8 ed da ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f65c:	59                   	pop    ecx
c000f65d:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000f662:	5b                   	pop    ebx
c000f663:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f666:	8b 15 48 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c48
c000f66c:	83 c0 3f             	add    eax,0x3f
c000f66f:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f675:	83 e0 c0             	and    eax,0xffffffc0
c000f678:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f67a:	50                   	push   eax
c000f67b:	52                   	push   edx
c000f67c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f67f:	83 c4 10             	add    esp,0x10
c000f682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f687:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f68a:	85 c0                	test   eax,eax
c000f68c:	74 4e                	je     c000f6dc <x87EmulHandler(regs*, void*)+0x10b>
c000f68e:	83 ec 0c             	sub    esp,0xc
c000f691:	68 2f 59 02 c0       	push   0xc002592f
c000f696:	e8 ae da ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f69b:	59                   	pop    ecx
c000f69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6a1:	5b                   	pop    ebx
c000f6a2:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f6a5:	8b 15 48 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c48
c000f6ab:	83 c0 3f             	add    eax,0x3f
c000f6ae:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f6b4:	83 e0 c0             	and    eax,0xffffffc0
c000f6b7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f6b9:	50                   	push   eax
c000f6ba:	52                   	push   edx
c000f6bb:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f6be:	c7 04 24 45 59 02 c0 	mov    DWORD PTR [esp],0xc0025945
c000f6c5:	e8 7f da ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f6ca:	83 c4 10             	add    esp,0x10
c000f6cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6d2:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000f6d7:	83 c4 08             	add    esp,0x8
c000f6da:	5b                   	pop    ebx
c000f6db:	c3                   	ret    
c000f6dc:	83 ec 0c             	sub    esp,0xc
c000f6df:	68 16 59 02 c0       	push   0xc0025916
c000f6e4:	e8 60 da ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f6e9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f6ef:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f6f6:	e8 ec a6 ff ff       	call   c0009de7 <malloc>
c000f6fb:	83 c4 10             	add    esp,0x10
c000f6fe:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f701:	eb ca                	jmp    c000f6cd <x87EmulHandler(regs*, void*)+0xfc>
c000f703:	83 ec 0c             	sub    esp,0xc
c000f706:	68 e0 58 02 c0       	push   0xc00258e0
c000f70b:	e8 39 da ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f710:	58                   	pop    eax
c000f711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f715:	e8 28 fa ff ff       	call   c000f142 <displayDebugInfo(regs*)>

c000f71a <gpFault(regs*, void*)>:
c000f71a:	53                   	push   ebx
c000f71b:	83 ec 14             	sub    esp,0x14
c000f71e:	c7 05 88 8d 02 c0 6f 9f 01 c0 	mov    DWORD PTR ds:0xc0028d88,0xc0019f6f
c000f728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f72c:	53                   	push   ebx
c000f72d:	e8 3d a8 00 00       	call   c0019f6f <Vm::faultHandler(regs*)>
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	84 c0                	test   al,al
c000f737:	74 05                	je     c000f73e <gpFault(regs*, void*)+0x24>
c000f739:	83 c4 08             	add    esp,0x8
c000f73c:	5b                   	pop    ebx
c000f73d:	c3                   	ret    
c000f73e:	83 ec 0c             	sub    esp,0xc
c000f741:	68 5a 59 02 c0       	push   0xc002595a
c000f746:	e8 fe d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f74b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f74e:	e8 ef f9 ff ff       	call   c000f142 <displayDebugInfo(regs*)>

c000f753 <pgFault(regs*, void*)>:
c000f753:	53                   	push   ebx
c000f754:	83 ec 10             	sub    esp,0x10
c000f757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f75b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f75e:	68 75 59 02 c0       	push   0xc0025975
c000f763:	e8 e1 d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f768:	0f 20 d0             	mov    eax,cr2
c000f76b:	5a                   	pop    edx
c000f76c:	59                   	pop    ecx
c000f76d:	50                   	push   eax
c000f76e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f773:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f776:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f77c:	e8 43 d5 ff ff       	call   c000ccc4 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	84 c0                	test   al,al
c000f786:	74 05                	je     c000f78d <pgFault(regs*, void*)+0x3a>
c000f788:	83 c4 08             	add    esp,0x8
c000f78b:	5b                   	pop    ebx
c000f78c:	c3                   	ret    
c000f78d:	83 ec 0c             	sub    esp,0xc
c000f790:	68 8a 59 02 c0       	push   0xc002598a
c000f795:	e8 af d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f79a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f79d:	e8 a0 f9 ff ff       	call   c000f142 <displayDebugInfo(regs*)>

c000f7a2 <otherISRHandler(regs*, void*)>:
c000f7a2:	53                   	push   ebx
c000f7a3:	83 ec 0c             	sub    esp,0xc
c000f7a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7aa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f7ad:	50                   	push   eax
c000f7ae:	50                   	push   eax
c000f7af:	68 97 59 02 c0       	push   0xc0025997
c000f7b4:	e8 90 d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f7b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7bc:	e8 81 f9 ff ff       	call   c000f142 <displayDebugInfo(regs*)>

c000f7c1 <opcodeFault(regs*, void*)>:
c000f7c1:	55                   	push   ebp
c000f7c2:	89 e5                	mov    ebp,esp
c000f7c4:	56                   	push   esi
c000f7c5:	53                   	push   ebx
c000f7c6:	83 ec 30             	sub    esp,0x30
c000f7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	50                   	push   eax
c000f7d3:	68 b4 59 02 c0       	push   0xc00259b4
c000f7d8:	e8 6c d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000f7e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f7eb:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f7f1:	84 c0                	test   al,al
c000f7f3:	74 24                	je     c000f819 <opcodeFault(regs*, void*)+0x58>
c000f7f5:	83 ec 0c             	sub    esp,0xc
c000f7f8:	68 c4 59 02 c0       	push   0xc00259c4
c000f7fd:	e8 47 d9 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000f802:	83 c4 10             	add    esp,0x10
c000f805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f808:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f80b:	8d 50 19             	lea    edx,[eax+0x19]
c000f80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f811:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f814:	e9 7b 03 00 00       	jmp    c000fb94 <opcodeFault(regs*, void*)+0x3d3>
c000f819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f81c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f81f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f822:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f829:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f82c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f82f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f832:	8a 00                	mov    al,BYTE PTR [eax]
c000f834:	3c f0                	cmp    al,0xf0
c000f836:	75 17                	jne    c000f84f <opcodeFault(regs*, void*)+0x8e>
c000f838:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f841:	8d 50 01             	lea    edx,[eax+0x1]
c000f844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f847:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f84a:	e9 d6 00 00 00       	jmp    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f84f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f852:	8a 00                	mov    al,BYTE PTR [eax]
c000f854:	3c f2                	cmp    al,0xf2
c000f856:	74 09                	je     c000f861 <opcodeFault(regs*, void*)+0xa0>
c000f858:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f85b:	8a 00                	mov    al,BYTE PTR [eax]
c000f85d:	3c f3                	cmp    al,0xf3
c000f85f:	75 1b                	jne    c000f87c <opcodeFault(regs*, void*)+0xbb>
c000f861:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f865:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f86b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f86e:	8d 50 01             	lea    edx,[eax+0x1]
c000f871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f874:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f877:	e9 a9 00 00 00       	jmp    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f87c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87f:	8a 00                	mov    al,BYTE PTR [eax]
c000f881:	3c 66                	cmp    al,0x66
c000f883:	75 1b                	jne    c000f8a0 <opcodeFault(regs*, void*)+0xdf>
c000f885:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f88f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f892:	8d 50 01             	lea    edx,[eax+0x1]
c000f895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f898:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f89b:	e9 85 00 00 00       	jmp    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f8a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a3:	8a 00                	mov    al,BYTE PTR [eax]
c000f8a5:	3c 67                	cmp    al,0x67
c000f8a7:	75 18                	jne    c000f8c1 <opcodeFault(regs*, void*)+0x100>
c000f8a9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f8ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8bf:	eb 64                	jmp    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f8c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c6:	3c 2e                	cmp    al,0x2e
c000f8c8:	74 09                	je     c000f8d3 <opcodeFault(regs*, void*)+0x112>
c000f8ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f8cf:	3c 3e                	cmp    al,0x3e
c000f8d1:	75 18                	jne    c000f8eb <opcodeFault(regs*, void*)+0x12a>
c000f8d3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f8d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8e0:	8d 50 01             	lea    edx,[eax+0x1]
c000f8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8e9:	eb 3a                	jmp    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f8eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ee:	8a 00                	mov    al,BYTE PTR [eax]
c000f8f0:	3c 36                	cmp    al,0x36
c000f8f2:	74 1b                	je     c000f90f <opcodeFault(regs*, void*)+0x14e>
c000f8f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f7:	8a 00                	mov    al,BYTE PTR [eax]
c000f8f9:	3c 26                	cmp    al,0x26
c000f8fb:	74 12                	je     c000f90f <opcodeFault(regs*, void*)+0x14e>
c000f8fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f900:	8a 00                	mov    al,BYTE PTR [eax]
c000f902:	3c 64                	cmp    al,0x64
c000f904:	74 09                	je     c000f90f <opcodeFault(regs*, void*)+0x14e>
c000f906:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f909:	8a 00                	mov    al,BYTE PTR [eax]
c000f90b:	3c 65                	cmp    al,0x65
c000f90d:	75 16                	jne    c000f925 <opcodeFault(regs*, void*)+0x164>
c000f90f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f913:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f919:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f91c:	8d 50 01             	lea    edx,[eax+0x1]
c000f91f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f922:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f925:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f928:	8a 00                	mov    al,BYTE PTR [eax]
c000f92a:	3c 0f                	cmp    al,0xf
c000f92c:	0f 85 8d 01 00 00    	jne    c000fabf <opcodeFault(regs*, void*)+0x2fe>
c000f932:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f935:	40                   	inc    eax
c000f936:	8a 00                	mov    al,BYTE PTR [eax]
c000f938:	3c c7                	cmp    al,0xc7
c000f93a:	0f 85 7f 01 00 00    	jne    c000fabf <opcodeFault(regs*, void*)+0x2fe>
c000f940:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f946:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f949:	8d 50 01             	lea    edx,[eax+0x1]
c000f94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f952:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f955:	50                   	push   eax
c000f956:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f959:	50                   	push   eax
c000f95a:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f95d:	50                   	push   eax
c000f95e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f961:	e8 dc 4f 00 00       	call   c0014942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f96c:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f96f:	83 f0 01             	xor    eax,0x1
c000f972:	84 c0                	test   al,al
c000f974:	0f 84 45 01 00 00    	je     c000fabf <opcodeFault(regs*, void*)+0x2fe>
c000f97a:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f97d:	3c 01                	cmp    al,0x1
c000f97f:	0f 85 3a 01 00 00    	jne    c000fabf <opcodeFault(regs*, void*)+0x2fe>
c000f985:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f988:	83 f0 01             	xor    eax,0x1
c000f98b:	84 c0                	test   al,al
c000f98d:	0f 84 2c 01 00 00    	je     c000fabf <opcodeFault(regs*, void*)+0x2fe>
c000f993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f996:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f999:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f99c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f9a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f9a6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f9a9:	89 c2                	mov    edx,eax
c000f9ab:	b8 00 00 00 00       	mov    eax,0x0
c000f9b0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f9b3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f9bc:	ba 00 00 00 00       	mov    edx,0x0
c000f9c1:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f9c4:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f9cd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f9d0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f9d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9da:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9dd:	89 c2                	mov    edx,eax
c000f9df:	b8 00 00 00 00       	mov    eax,0x0
c000f9e4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f9e7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f9f0:	ba 00 00 00 00       	mov    edx,0x0
c000f9f5:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f9f8:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f9fb:	fa                   	cli    
c000f9fc:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000fa01:	40                   	inc    eax
c000fa02:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000fa07:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000fa0a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fa0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0f:	89 c1                	mov    ecx,eax
c000fa11:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000fa14:	89 cb                	mov    ebx,ecx
c000fa16:	89 d0                	mov    eax,edx
c000fa18:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000fa1b:	89 c6                	mov    esi,eax
c000fa1d:	89 f0                	mov    eax,esi
c000fa1f:	09 d8                	or     eax,ebx
c000fa21:	85 c0                	test   eax,eax
c000fa23:	75 21                	jne    c000fa46 <opcodeFault(regs*, void*)+0x285>
c000fa25:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000fa28:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fa2b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000fa2e:	89 01                	mov    DWORD PTR [ecx],eax
c000fa30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa39:	83 c8 40             	or     eax,0x40
c000fa3c:	89 c2                	mov    edx,eax
c000fa3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa41:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa44:	eb 3e                	jmp    c000fa84 <opcodeFault(regs*, void*)+0x2c3>
c000fa46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000fa49:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fa4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fa51:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000fa54:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000fa57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000fa5d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000fa60:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000fa63:	89 d0                	mov    eax,edx
c000fa65:	31 d2                	xor    edx,edx
c000fa67:	89 c3                	mov    ebx,eax
c000fa69:	89 d6                	mov    esi,edx
c000fa6b:	89 da                	mov    edx,ebx
c000fa6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa70:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000fa73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa79:	83 e0 bf             	and    eax,0xffffffbf
c000fa7c:	89 c2                	mov    edx,eax
c000fa7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa81:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa84:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000fa89:	48                   	dec    eax
c000fa8a:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c000fa8f:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c000fa94:	85 c0                	test   eax,eax
c000fa96:	75 01                	jne    c000fa99 <opcodeFault(regs*, void*)+0x2d8>
c000fa98:	fb                   	sti    
c000fa99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa9f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000faa2:	01 c2                	add    edx,eax
c000faa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000faaa:	83 ec 0c             	sub    esp,0xc
c000faad:	68 e7 59 02 c0       	push   0xc00259e7
c000fab2:	e8 92 d6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	e9 d5 00 00 00       	jmp    c000fb94 <opcodeFault(regs*, void*)+0x3d3>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	68 fa 59 02 c0       	push   0xc00259fa
c000fac7:	e8 7d d6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000facc:	83 c4 10             	add    esp,0x10
c000facf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fadb:	c1 e0 04             	shl    eax,0x4
c000fade:	01 d0                	add    eax,edx
c000fae0:	83 c0 03             	add    eax,0x3
c000fae3:	8a 00                	mov    al,BYTE PTR [eax]
c000fae5:	0f b6 d8             	movzx  ebx,al
c000fae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faeb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000faee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faf4:	c1 e0 04             	shl    eax,0x4
c000faf7:	01 d0                	add    eax,edx
c000faf9:	83 c0 02             	add    eax,0x2
c000fafc:	8a 00                	mov    al,BYTE PTR [eax]
c000fafe:	0f b6 c8             	movzx  ecx,al
c000fb01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb04:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fb07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb0d:	c1 e0 04             	shl    eax,0x4
c000fb10:	01 d0                	add    eax,edx
c000fb12:	40                   	inc    eax
c000fb13:	8a 00                	mov    al,BYTE PTR [eax]
c000fb15:	0f b6 d0             	movzx  edx,al
c000fb18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb1b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000fb1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb24:	c1 e0 04             	shl    eax,0x4
c000fb27:	01 f0                	add    eax,esi
c000fb29:	8a 00                	mov    al,BYTE PTR [eax]
c000fb2b:	0f b6 c0             	movzx  eax,al
c000fb2e:	83 ec 0c             	sub    esp,0xc
c000fb31:	53                   	push   ebx
c000fb32:	51                   	push   ecx
c000fb33:	52                   	push   edx
c000fb34:	50                   	push   eax
c000fb35:	68 0c 5a 02 c0       	push   0xc0025a0c
c000fb3a:	e8 0a d6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000fb3f:	83 c4 20             	add    esp,0x20
c000fb42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb48:	83 c0 03             	add    eax,0x3
c000fb4b:	8a 00                	mov    al,BYTE PTR [eax]
c000fb4d:	0f b6 d8             	movzx  ebx,al
c000fb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb56:	83 c0 02             	add    eax,0x2
c000fb59:	8a 00                	mov    al,BYTE PTR [eax]
c000fb5b:	0f b6 c8             	movzx  ecx,al
c000fb5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb64:	40                   	inc    eax
c000fb65:	8a 00                	mov    al,BYTE PTR [eax]
c000fb67:	0f b6 d0             	movzx  edx,al
c000fb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb70:	8a 00                	mov    al,BYTE PTR [eax]
c000fb72:	0f b6 c0             	movzx  eax,al
c000fb75:	83 ec 0c             	sub    esp,0xc
c000fb78:	53                   	push   ebx
c000fb79:	51                   	push   ecx
c000fb7a:	52                   	push   edx
c000fb7b:	50                   	push   eax
c000fb7c:	68 34 5a 02 c0       	push   0xc0025a34
c000fb81:	e8 c3 d5 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c000fb86:	83 c4 20             	add    esp,0x20
c000fb89:	83 ec 0c             	sub    esp,0xc
c000fb8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb8f:	e8 ae f5 ff ff       	call   c000f142 <displayDebugInfo(regs*)>
c000fb94:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fb97:	5b                   	pop    ebx
c000fb98:	5e                   	pop    esi
c000fb99:	5d                   	pop    ebp
c000fb9a:	c3                   	ret    

c000fb9b <displayProgramFault(char const*)>:
c000fb9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fba0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fba3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fba9:	85 c0                	test   eax,eax
c000fbab:	74 15                	je     c000fbc2 <displayProgramFault(char const*)+0x27>
c000fbad:	83 ec 0c             	sub    esp,0xc
c000fbb0:	6a 04                	push   0x4
c000fbb2:	6a 0f                	push   0xf
c000fbb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbb8:	50                   	push   eax
c000fbb9:	e8 20 b5 ff ff       	call   c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fbbe:	83 c4 1c             	add    esp,0x1c
c000fbc1:	c3                   	ret    
c000fbc2:	c3                   	ret    

c000fbc3 <setupInterruptController()>:
c000fbc3:	55                   	push   ebp
c000fbc4:	89 e5                	mov    ebp,esp
c000fbc6:	53                   	push   ebx
c000fbc7:	83 ec 24             	sub    esp,0x24
c000fbca:	b8 00 00 00 00       	mov    eax,0x0
c000fbcf:	85 c0                	test   eax,eax
c000fbd1:	0f 95 c0             	setne  al
c000fbd4:	84 c0                	test   al,al
c000fbd6:	74 5b                	je     c000fc33 <setupInterruptController()+0x70>
c000fbd8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fbdf:	83 ec 0c             	sub    esp,0xc
c000fbe2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fbe5:	e8 fd a1 ff ff       	call   c0009de7 <malloc>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	89 c3                	mov    ebx,eax
c000fbef:	83 ec 0c             	sub    esp,0xc
c000fbf2:	53                   	push   ebx
c000fbf3:	e8 48 23 01 00       	call   c0021f40 <APIC::APIC()>
c000fbf8:	83 c4 10             	add    esp,0x10
c000fbfb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbfe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fc01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc04:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc06:	83 c0 08             	add    eax,0x8
c000fc09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0b:	6a 00                	push   0x0
c000fc0d:	6a 00                	push   0x0
c000fc0f:	6a 00                	push   0x0
c000fc11:	52                   	push   edx
c000fc12:	ff d0                	call   eax
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000fc1c:	83 ec 08             	sub    esp,0x8
c000fc1f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc22:	50                   	push   eax
c000fc23:	e8 92 ea ff ff       	call   c000e6ba <Device::addChild(Device*)>
c000fc28:	83 c4 10             	add    esp,0x10
c000fc2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc2e:	e9 79 03 00 00       	jmp    c000ffac <setupInterruptController()+0x3e9>
c000fc33:	a0 60 95 02 c0       	mov    al,ds:0xc0029560
c000fc38:	84 c0                	test   al,al
c000fc3a:	75 14                	jne    c000fc50 <setupInterruptController()+0x8d>
c000fc3c:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000fc41:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fc47:	83 e2 fe             	and    edx,0xfffffffe
c000fc4a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fc50:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000fc55:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fc5b:	83 e0 01             	and    eax,0x1
c000fc5e:	84 c0                	test   al,al
c000fc60:	0f 95 c0             	setne  al
c000fc63:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fc66:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fc6d:	83 ec 0c             	sub    esp,0xc
c000fc70:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fc73:	e8 6f a1 ff ff       	call   c0009de7 <malloc>
c000fc78:	83 c4 10             	add    esp,0x10
c000fc7b:	89 c3                	mov    ebx,eax
c000fc7d:	83 ec 0c             	sub    esp,0xc
c000fc80:	53                   	push   ebx
c000fc81:	e8 12 28 01 00       	call   c0022498 <PIC::PIC()>
c000fc86:	83 c4 10             	add    esp,0x10
c000fc89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc94:	83 c0 08             	add    eax,0x8
c000fc97:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc99:	6a 00                	push   0x0
c000fc9b:	6a 00                	push   0x0
c000fc9d:	6a 00                	push   0x0
c000fc9f:	52                   	push   edx
c000fca0:	ff d0                	call   eax
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fca9:	74 73                	je     c000fd1e <setupInterruptController()+0x15b>
c000fcab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fcae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb3:	83 c0 0c             	add    eax,0xc
c000fcb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb8:	6a 00                	push   0x0
c000fcba:	6a 00                	push   0x0
c000fcbc:	6a 00                	push   0x0
c000fcbe:	52                   	push   edx
c000fcbf:	ff d0                	call   eax
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fcc8:	74 15                	je     c000fcdf <setupInterruptController()+0x11c>
c000fcca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fccd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fccf:	83 c0 04             	add    eax,0x4
c000fcd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcda:	ff d0                	call   eax
c000fcdc:	83 c4 10             	add    esp,0x10
c000fcdf:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fcec:	e8 f6 a0 ff ff       	call   c0009de7 <malloc>
c000fcf1:	83 c4 10             	add    esp,0x10
c000fcf4:	89 c3                	mov    ebx,eax
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	53                   	push   ebx
c000fcfa:	e8 41 22 01 00       	call   c0021f40 <APIC::APIC()>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fd05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fd08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0d:	83 c0 08             	add    eax,0x8
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	6a 00                	push   0x0
c000fd14:	6a 00                	push   0x0
c000fd16:	6a 00                	push   0x0
c000fd18:	52                   	push   edx
c000fd19:	ff d0                	call   eax
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c000fd23:	83 ec 08             	sub    esp,0x8
c000fd26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd29:	50                   	push   eax
c000fd2a:	e8 8b e9 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	c7 05 8c 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d8c,0x0
c000fd3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd41:	83 c0 24             	add    eax,0x24
c000fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd46:	6a 00                	push   0x0
c000fd48:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fd4d:	6a 00                	push   0x0
c000fd4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd52:	ff d0                	call   eax
c000fd54:	83 c4 10             	add    esp,0x10
c000fd57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5c:	83 c0 24             	add    eax,0x24
c000fd5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd61:	6a 00                	push   0x0
c000fd63:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fd68:	6a 01                	push   0x1
c000fd6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd6d:	ff d0                	call   eax
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd77:	83 c0 24             	add    eax,0x24
c000fd7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7c:	6a 00                	push   0x0
c000fd7e:	68 9f ef 00 c0       	push   0xc000ef9f
c000fd83:	6a 02                	push   0x2
c000fd85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd88:	ff d0                	call   eax
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd92:	83 c0 24             	add    eax,0x24
c000fd95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd97:	6a 00                	push   0x0
c000fd99:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fd9e:	6a 03                	push   0x3
c000fda0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fda3:	ff d0                	call   eax
c000fda5:	83 c4 10             	add    esp,0x10
c000fda8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdab:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdad:	83 c0 24             	add    eax,0x24
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	6a 00                	push   0x0
c000fdb4:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fdb9:	6a 04                	push   0x4
c000fdbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdbe:	ff d0                	call   eax
c000fdc0:	83 c4 10             	add    esp,0x10
c000fdc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc8:	83 c0 24             	add    eax,0x24
c000fdcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcd:	6a 00                	push   0x0
c000fdcf:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fdd4:	6a 05                	push   0x5
c000fdd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdd9:	ff d0                	call   eax
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde3:	83 c0 24             	add    eax,0x24
c000fde6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde8:	6a 00                	push   0x0
c000fdea:	68 c1 f7 00 c0       	push   0xc000f7c1
c000fdef:	6a 06                	push   0x6
c000fdf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdf4:	ff d0                	call   eax
c000fdf6:	83 c4 10             	add    esp,0x10
c000fdf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdfc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfe:	83 c0 24             	add    eax,0x24
c000fe01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe03:	6a 00                	push   0x0
c000fe05:	68 d1 f5 00 c0       	push   0xc000f5d1
c000fe0a:	6a 07                	push   0x7
c000fe0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe0f:	ff d0                	call   eax
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe17:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe19:	83 c0 24             	add    eax,0x24
c000fe1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1e:	6a 00                	push   0x0
c000fe20:	68 ba ed 00 c0       	push   0xc000edba
c000fe25:	6a 08                	push   0x8
c000fe27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe2a:	ff d0                	call   eax
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe34:	83 c0 24             	add    eax,0x24
c000fe37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe39:	6a 00                	push   0x0
c000fe3b:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fe40:	6a 09                	push   0x9
c000fe42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe45:	ff d0                	call   eax
c000fe47:	83 c4 10             	add    esp,0x10
c000fe4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4f:	83 c0 24             	add    eax,0x24
c000fe52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe54:	6a 00                	push   0x0
c000fe56:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fe5b:	6a 0a                	push   0xa
c000fe5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe60:	ff d0                	call   eax
c000fe62:	83 c4 10             	add    esp,0x10
c000fe65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe68:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe6a:	83 c0 24             	add    eax,0x24
c000fe6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe6f:	6a 00                	push   0x0
c000fe71:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fe76:	6a 0b                	push   0xb
c000fe78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe7b:	ff d0                	call   eax
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe83:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe85:	83 c0 24             	add    eax,0x24
c000fe88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8a:	6a 00                	push   0x0
c000fe8c:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fe91:	6a 0c                	push   0xc
c000fe93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe96:	ff d0                	call   eax
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea0:	83 c0 24             	add    eax,0x24
c000fea3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea5:	6a 00                	push   0x0
c000fea7:	68 1a f7 00 c0       	push   0xc000f71a
c000feac:	6a 0d                	push   0xd
c000feae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feb1:	ff d0                	call   eax
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000feb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000febb:	83 c0 24             	add    eax,0x24
c000febe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec0:	6a 00                	push   0x0
c000fec2:	68 53 f7 00 c0       	push   0xc000f753
c000fec7:	6a 0e                	push   0xe
c000fec9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fecc:	ff d0                	call   eax
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fed4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed6:	83 c0 24             	add    eax,0x24
c000fed9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedb:	6a 00                	push   0x0
c000fedd:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fee2:	6a 0f                	push   0xf
c000fee4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fee7:	ff d0                	call   eax
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000feef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef1:	83 c0 24             	add    eax,0x24
c000fef4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef6:	6a 00                	push   0x0
c000fef8:	68 a2 f7 00 c0       	push   0xc000f7a2
c000fefd:	6a 10                	push   0x10
c000feff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff02:	ff d0                	call   eax
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff0c:	83 c0 24             	add    eax,0x24
c000ff0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff11:	6a 00                	push   0x0
c000ff13:	68 a2 f7 00 c0       	push   0xc000f7a2
c000ff18:	6a 11                	push   0x11
c000ff1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff1d:	ff d0                	call   eax
c000ff1f:	83 c4 10             	add    esp,0x10
c000ff22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff27:	83 c0 24             	add    eax,0x24
c000ff2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2c:	6a 00                	push   0x0
c000ff2e:	68 a2 f7 00 c0       	push   0xc000f7a2
c000ff33:	6a 12                	push   0x12
c000ff35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff38:	ff d0                	call   eax
c000ff3a:	83 c4 10             	add    esp,0x10
c000ff3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff40:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff42:	83 c0 24             	add    eax,0x24
c000ff45:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff47:	6a 00                	push   0x0
c000ff49:	68 a2 f7 00 c0       	push   0xc000f7a2
c000ff4e:	6a 13                	push   0x13
c000ff50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff53:	ff d0                	call   eax
c000ff55:	83 c4 10             	add    esp,0x10
c000ff58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5d:	83 c0 24             	add    eax,0x24
c000ff60:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff62:	6a 00                	push   0x0
c000ff64:	68 a2 f7 00 c0       	push   0xc000f7a2
c000ff69:	6a 14                	push   0x14
c000ff6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff6e:	ff d0                	call   eax
c000ff70:	83 c4 10             	add    esp,0x10
c000ff73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff76:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff78:	83 c0 24             	add    eax,0x24
c000ff7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff7d:	6a 00                	push   0x0
c000ff7f:	68 a2 f7 00 c0       	push   0xc000f7a2
c000ff84:	6a 1e                	push   0x1e
c000ff86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff89:	ff d0                	call   eax
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff91:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff93:	83 c0 24             	add    eax,0x24
c000ff96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff98:	6a 00                	push   0x0
c000ff9a:	68 c3 75 01 c0       	push   0xc00175c3
c000ff9f:	6a 60                	push   0x60
c000ffa1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ffa4:	ff d0                	call   eax
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ffac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ffaf:	c9                   	leave  
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <InterruptController::convertLegacyIRQNumber(int)>:
c000ffb2:	55                   	push   ebp
c000ffb3:	89 e5                	mov    ebp,esp
c000ffb5:	83 ec 08             	sub    esp,0x8
c000ffb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffbb:	83 ec 0c             	sub    esp,0xc
c000ffbe:	50                   	push   eax
c000ffbf:	e8 f6 e9 ff ff       	call   c000e9ba <Device::getName()>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	8a 00                	mov    al,BYTE PTR [eax]
c000ffc9:	3c 41                	cmp    al,0x41
c000ffcb:	0f 94 c0             	sete   al
c000ffce:	84 c0                	test   al,al
c000ffd0:	74 28                	je     c000fffa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ffd2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000ffd6:	7f 12                	jg     c000ffea <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000ffd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffdb:	05 40 83 02 c0       	add    eax,0xc0028340
c000ffe0:	8a 00                	mov    al,BYTE PTR [eax]
c000ffe2:	0f b6 c0             	movzx  eax,al
c000ffe5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000ffe8:	eb 10                	jmp    c000fffa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ffea:	83 ec 0c             	sub    esp,0xc
c000ffed:	68 5c 5a 02 c0       	push   0xc0025a5c
c000fff2:	e8 32 52 00 00       	call   c0015229 <Krnl::panic(char const*)>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fffd:	c9                   	leave  
c000fffe:	c3                   	ret    
c000ffff:	90                   	nop

c0010000 <startGUI(void*)>:
c0010000:	55                   	push   ebp
c0010001:	89 e5                	mov    ebp,esp
c0010003:	53                   	push   ebx
c0010004:	83 ec 04             	sub    esp,0x4
c0010007:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001000c:	48                   	dec    eax
c001000d:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0010012:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0010017:	85 c0                	test   eax,eax
c0010019:	75 01                	jne    c001001c <startGUI(void*)+0x1c>
c001001b:	fb                   	sti    
c001001c:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c0010022:	83 ec 08             	sub    esp,0x8
c0010025:	6a 01                	push   0x1
c0010027:	68 dc 5a 02 c0       	push   0xc0025adc
c001002c:	e8 6d 85 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0010031:	83 c4 10             	add    esp,0x10
c0010034:	83 ec 08             	sub    esp,0x8
c0010037:	53                   	push   ebx
c0010038:	50                   	push   eax
c0010039:	e8 91 87 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c001003e:	83 c4 10             	add    esp,0x10
c0010041:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c0010047:	83 ec 08             	sub    esp,0x8
c001004a:	6a 01                	push   0x1
c001004c:	68 f6 5a 02 c0       	push   0xc0025af6
c0010051:	e8 48 85 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0010056:	83 c4 10             	add    esp,0x10
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	53                   	push   ebx
c001005d:	50                   	push   eax
c001005e:	e8 6c 87 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c0010063:	83 c4 10             	add    esp,0x10
c0010066:	90                   	nop
c0010067:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001006a:	c9                   	leave  
c001006b:	c3                   	ret    

c001006c <startGUIVESA(void*)>:
c001006c:	55                   	push   ebp
c001006d:	89 e5                	mov    ebp,esp
c001006f:	53                   	push   ebx
c0010070:	83 ec 04             	sub    esp,0x4
c0010073:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0010078:	48                   	dec    eax
c0010079:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001007e:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0010083:	85 c0                	test   eax,eax
c0010085:	75 01                	jne    c0010088 <startGUIVESA(void*)+0x1c>
c0010087:	fb                   	sti    
c0010088:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c001008e:	83 ec 08             	sub    esp,0x8
c0010091:	6a 01                	push   0x1
c0010093:	68 14 5b 02 c0       	push   0xc0025b14
c0010098:	e8 01 85 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c001009d:	83 c4 10             	add    esp,0x10
c00100a0:	83 ec 08             	sub    esp,0x8
c00100a3:	53                   	push   ebx
c00100a4:	50                   	push   eax
c00100a5:	e8 25 87 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c00100aa:	83 c4 10             	add    esp,0x10
c00100ad:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c00100b3:	83 ec 08             	sub    esp,0x8
c00100b6:	6a 01                	push   0x1
c00100b8:	68 f6 5a 02 c0       	push   0xc0025af6
c00100bd:	e8 dc 84 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	53                   	push   ebx
c00100c9:	50                   	push   eax
c00100ca:	e8 00 87 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c00100cf:	83 c4 10             	add    esp,0x10
c00100d2:	90                   	nop
c00100d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00100d6:	c9                   	leave  
c00100d7:	c3                   	ret    

c00100d8 <sendKeyToTerminal(unsigned char)>:
c00100d8:	55                   	push   ebp
c00100d9:	89 e5                	mov    ebp,esp
c00100db:	83 ec 28             	sub    esp,0x28
c00100de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00100e4:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c00100e9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00100ed:	83 ec 08             	sub    esp,0x8
c00100f0:	52                   	push   edx
c00100f1:	50                   	push   eax
c00100f2:	e8 8d b4 ff ff       	call   c000b584 <VgaText::receiveKey(unsigned char)>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00100fe:	0f 85 8f 00 00 00    	jne    c0010193 <sendKeyToTerminal(unsigned char)+0xbb>
c0010104:	fa                   	cli    
c0010105:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001010a:	40                   	inc    eax
c001010b:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0010110:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0010115:	40                   	inc    eax
c0010116:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c001011b:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010120:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010123:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c001012d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0010131:	74 1f                	je     c0010152 <sendKeyToTerminal(unsigned char)+0x7a>
c0010133:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010136:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0010139:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001013c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001013f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010142:	83 ec 0c             	sub    esp,0xc
c0010145:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010148:	e8 f3 92 00 00       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c001014d:	83 c4 10             	add    esp,0x10
c0010150:	eb db                	jmp    c001012d <sendKeyToTerminal(unsigned char)+0x55>
c0010152:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0010157:	48                   	dec    eax
c0010158:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c001015d:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0010162:	85 c0                	test   eax,eax
c0010164:	75 18                	jne    c001017e <sendKeyToTerminal(unsigned char)+0xa6>
c0010166:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c001016b:	85 c0                	test   eax,eax
c001016d:	74 0f                	je     c001017e <sendKeyToTerminal(unsigned char)+0xa6>
c001016f:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c0010179:	e8 06 8e 00 00       	call   c0018f84 <schedule()>
c001017e:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0010183:	48                   	dec    eax
c0010184:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0010189:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001018e:	85 c0                	test   eax,eax
c0010190:	75 01                	jne    c0010193 <sendKeyToTerminal(unsigned char)+0xbb>
c0010192:	fb                   	sti    
c0010193:	90                   	nop
c0010194:	c9                   	leave  
c0010195:	c3                   	ret    

c0010196 <sendKeyboardToken(KeyboardToken)>:
c0010196:	55                   	push   ebp
c0010197:	89 e5                	mov    ebp,esp
c0010199:	83 ec 18             	sub    esp,0x18
c001019c:	e8 76 53 00 00       	call   c0015517 <Krnl::userIOReceived()>
c00101a1:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00101a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a7:	0f b7 c0             	movzx  eax,ax
c00101aa:	83 f2 01             	xor    edx,0x1
c00101ad:	88 90 c0 8d 02 c0    	mov    BYTE PTR [eax-0x3ffd7240],dl
c00101b3:	a1 a8 8d 02 c0       	mov    eax,ds:0xc0028da8
c00101b8:	85 c0                	test   eax,eax
c00101ba:	74 24                	je     c00101e0 <sendKeyboardToken(KeyboardToken)+0x4a>
c00101bc:	8b 0d a8 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028da8
c00101c2:	83 ec 04             	sub    esp,0x4
c00101c5:	68 c0 8d 02 c0       	push   0xc0028dc0
c00101ca:	83 ec 08             	sub    esp,0x8
c00101cd:	89 e2                	mov    edx,esp
c00101cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d2:	89 02                	mov    DWORD PTR [edx],eax
c00101d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00101d7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00101db:	ff d1                	call   ecx
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00101e4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00101e7:	a0 c8 91 02 c0       	mov    al,ds:0xc00291c8
c00101ec:	38 c2                	cmp    dl,al
c00101ee:	74 1c                	je     c001020c <sendKeyboardToken(KeyboardToken)+0x76>
c00101f0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00101f3:	a2 c8 91 02 c0       	mov    ds:0xc00291c8,al
c00101f8:	a0 c8 91 02 c0       	mov    al,ds:0xc00291c8
c00101fd:	0f b6 c0             	movzx  eax,al
c0010200:	83 ec 0c             	sub    esp,0xc
c0010203:	50                   	push   eax
c0010204:	e8 bd a9 ff ff       	call   c000abc6 <setTerminalScrollLock(bool)>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001020f:	84 c0                	test   al,al
c0010211:	0f 84 ae 00 00 00    	je     c00102c5 <sendKeyboardToken(KeyboardToken)+0x12f>
c0010217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001021a:	66 3d 10 03          	cmp    ax,0x310
c001021e:	75 06                	jne    c0010226 <sendKeyboardToken(KeyboardToken)+0x90>
c0010220:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0010226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010229:	66 3d 11 03          	cmp    ax,0x311
c001022d:	75 06                	jne    c0010235 <sendKeyboardToken(KeyboardToken)+0x9f>
c001022f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0010235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010238:	66 3d 12 03          	cmp    ax,0x312
c001023c:	75 06                	jne    c0010244 <sendKeyboardToken(KeyboardToken)+0xae>
c001023e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010247:	66 3d 13 03          	cmp    ax,0x313
c001024b:	75 06                	jne    c0010253 <sendKeyboardToken(KeyboardToken)+0xbd>
c001024d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010256:	66 3d 14 03          	cmp    ax,0x314
c001025a:	75 06                	jne    c0010262 <sendKeyboardToken(KeyboardToken)+0xcc>
c001025c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010265:	66 3d 15 03          	cmp    ax,0x315
c0010269:	75 06                	jne    c0010271 <sendKeyboardToken(KeyboardToken)+0xdb>
c001026b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010274:	66 3d 16 03          	cmp    ax,0x316
c0010278:	75 06                	jne    c0010280 <sendKeyboardToken(KeyboardToken)+0xea>
c001027a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010283:	66 3d 17 03          	cmp    ax,0x317
c0010287:	75 06                	jne    c001028f <sendKeyboardToken(KeyboardToken)+0xf9>
c0010289:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001028f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010292:	66 3d 18 03          	cmp    ax,0x318
c0010296:	75 06                	jne    c001029e <sendKeyboardToken(KeyboardToken)+0x108>
c0010298:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001029e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a1:	66 3d 19 03          	cmp    ax,0x319
c00102a5:	75 06                	jne    c00102ad <sendKeyboardToken(KeyboardToken)+0x117>
c00102a7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00102ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102b0:	66 3d 1a 03          	cmp    ax,0x31a
c00102b4:	0f 85 c9 00 00 00    	jne    c0010383 <sendKeyboardToken(KeyboardToken)+0x1ed>
c00102ba:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00102c0:	e9 be 00 00 00       	jmp    c0010383 <sendKeyboardToken(KeyboardToken)+0x1ed>
c00102c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c8:	66 3d 10 03          	cmp    ax,0x310
c00102cc:	75 0a                	jne    c00102d8 <sendKeyboardToken(KeyboardToken)+0x142>
c00102ce:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00102d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102db:	66 3d 11 03          	cmp    ax,0x311
c00102df:	75 0a                	jne    c00102eb <sendKeyboardToken(KeyboardToken)+0x155>
c00102e1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00102e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ee:	66 3d 12 03          	cmp    ax,0x312
c00102f2:	75 0a                	jne    c00102fe <sendKeyboardToken(KeyboardToken)+0x168>
c00102f4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00102fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010301:	66 3d 13 03          	cmp    ax,0x313
c0010305:	75 0a                	jne    c0010311 <sendKeyboardToken(KeyboardToken)+0x17b>
c0010307:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001030d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010314:	66 3d 14 03          	cmp    ax,0x314
c0010318:	75 0a                	jne    c0010324 <sendKeyboardToken(KeyboardToken)+0x18e>
c001031a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0010320:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010327:	66 3d 15 03          	cmp    ax,0x315
c001032b:	75 0a                	jne    c0010337 <sendKeyboardToken(KeyboardToken)+0x1a1>
c001032d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010333:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001033a:	66 3d 16 03          	cmp    ax,0x316
c001033e:	75 0a                	jne    c001034a <sendKeyboardToken(KeyboardToken)+0x1b4>
c0010340:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010346:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001034a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001034d:	66 3d 17 03          	cmp    ax,0x317
c0010351:	75 0a                	jne    c001035d <sendKeyboardToken(KeyboardToken)+0x1c7>
c0010353:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010359:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001035d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010360:	66 3d 18 03          	cmp    ax,0x318
c0010364:	75 0a                	jne    c0010370 <sendKeyboardToken(KeyboardToken)+0x1da>
c0010366:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001036c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010373:	66 3d 19 03          	cmp    ax,0x319
c0010377:	75 0a                	jne    c0010383 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010379:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001037f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010386:	66 3d 00 02          	cmp    ax,0x200
c001038a:	75 2c                	jne    c00103b8 <sendKeyboardToken(KeyboardToken)+0x222>
c001038c:	a0 c0 91 02 c0       	mov    al,ds:0xc00291c0
c0010391:	83 f0 01             	xor    eax,0x1
c0010394:	84 c0                	test   al,al
c0010396:	74 20                	je     c00103b8 <sendKeyboardToken(KeyboardToken)+0x222>
c0010398:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c001039d:	6a 01                	push   0x1
c001039f:	6a 00                	push   0x0
c00103a1:	68 00 00 01 c0       	push   0xc0010000
c00103a6:	50                   	push   eax
c00103a7:	e8 bc 89 00 00       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c00103ac:	83 c4 10             	add    esp,0x10
c00103af:	c6 05 c0 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c0,0x1
c00103b6:	eb 33                	jmp    c00103eb <sendKeyboardToken(KeyboardToken)+0x255>
c00103b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103bb:	66 3d 01 02          	cmp    ax,0x201
c00103bf:	75 2a                	jne    c00103eb <sendKeyboardToken(KeyboardToken)+0x255>
c00103c1:	a0 c0 91 02 c0       	mov    al,ds:0xc00291c0
c00103c6:	83 f0 01             	xor    eax,0x1
c00103c9:	84 c0                	test   al,al
c00103cb:	74 1e                	je     c00103eb <sendKeyboardToken(KeyboardToken)+0x255>
c00103cd:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c00103d2:	6a 01                	push   0x1
c00103d4:	6a 00                	push   0x0
c00103d6:	68 6c 00 01 c0       	push   0xc001006c
c00103db:	50                   	push   eax
c00103dc:	e8 87 89 00 00       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	c6 05 c0 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c0,0x1
c00103eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103ee:	66 3d 1d 03          	cmp    ax,0x31d
c00103f2:	75 06                	jne    c00103fa <sendKeyboardToken(KeyboardToken)+0x264>
c00103f4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00103fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103fd:	66 3d 1c 03          	cmp    ax,0x31c
c0010401:	75 06                	jne    c0010409 <sendKeyboardToken(KeyboardToken)+0x273>
c0010403:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0010409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001040c:	66 3d 1b 03          	cmp    ax,0x31b
c0010410:	75 06                	jne    c0010418 <sendKeyboardToken(KeyboardToken)+0x282>
c0010412:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0010418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001041b:	66 3d 1e 03          	cmp    ax,0x31e
c001041f:	75 06                	jne    c0010427 <sendKeyboardToken(KeyboardToken)+0x291>
c0010421:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0010427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001042a:	66 3d 1f 03          	cmp    ax,0x31f
c001042e:	75 06                	jne    c0010436 <sendKeyboardToken(KeyboardToken)+0x2a0>
c0010430:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0010436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010439:	66 3d 1a 03          	cmp    ax,0x31a
c001043d:	75 06                	jne    c0010445 <sendKeyboardToken(KeyboardToken)+0x2af>
c001043f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010445:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010449:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001044c:	83 f0 01             	xor    eax,0x1
c001044f:	84 c0                	test   al,al
c0010451:	74 77                	je     c00104ca <sendKeyboardToken(KeyboardToken)+0x334>
c0010453:	a0 c1 8e 02 c0       	mov    al,ds:0xc0028ec1
c0010458:	84 c0                	test   al,al
c001045a:	74 41                	je     c001049d <sendKeyboardToken(KeyboardToken)+0x307>
c001045c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010460:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010464:	74 2b                	je     c0010491 <sendKeyboardToken(KeyboardToken)+0x2fb>
c0010466:	8b 15 c4 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291c4
c001046c:	89 d0                	mov    eax,edx
c001046e:	c1 e0 02             	shl    eax,0x2
c0010471:	01 d0                	add    eax,edx
c0010473:	01 c0                	add    eax,eax
c0010475:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c001047a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001047d:	0f b7 c0             	movzx  eax,ax
c0010480:	8d 50 d0             	lea    edx,[eax-0x30]
c0010483:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0010488:	01 d0                	add    eax,edx
c001048a:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c001048f:	eb 6d                	jmp    c00104fe <sendKeyboardToken(KeyboardToken)+0x368>
c0010491:	c7 05 c4 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c4,0x0
c001049b:	eb 61                	jmp    c00104fe <sendKeyboardToken(KeyboardToken)+0x368>
c001049d:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00104a2:	85 c0                	test   eax,eax
c00104a4:	74 18                	je     c00104be <sendKeyboardToken(KeyboardToken)+0x328>
c00104a6:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00104ab:	0f b6 c0             	movzx  eax,al
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	50                   	push   eax
c00104b2:	e8 21 fc ff ff       	call   c00100d8 <sendKeyToTerminal(unsigned char)>
c00104b7:	83 c4 10             	add    esp,0x10
c00104ba:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00104be:	c7 05 c4 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c4,0x0
c00104c8:	eb 34                	jmp    c00104fe <sendKeyboardToken(KeyboardToken)+0x368>
c00104ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104cd:	66 3d 01 01          	cmp    ax,0x101
c00104d1:	75 2b                	jne    c00104fe <sendKeyboardToken(KeyboardToken)+0x368>
c00104d3:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00104d8:	85 c0                	test   eax,eax
c00104da:	74 18                	je     c00104f4 <sendKeyboardToken(KeyboardToken)+0x35e>
c00104dc:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00104e1:	0f b6 c0             	movzx  eax,al
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	50                   	push   eax
c00104e8:	e8 eb fb ff ff       	call   c00100d8 <sendKeyToTerminal(unsigned char)>
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00104f4:	c7 05 c4 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c4,0x0
c00104fe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010501:	83 f0 01             	xor    eax,0x1
c0010504:	84 c0                	test   al,al
c0010506:	74 4c                	je     c0010554 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010508:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001050b:	83 f0 01             	xor    eax,0x1
c001050e:	84 c0                	test   al,al
c0010510:	74 42                	je     c0010554 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010512:	a0 c0 8e 02 c0       	mov    al,ds:0xc0028ec0
c0010517:	83 f0 01             	xor    eax,0x1
c001051a:	84 c0                	test   al,al
c001051c:	74 36                	je     c0010554 <sendKeyboardToken(KeyboardToken)+0x3be>
c001051e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010521:	66 83 f8 1f          	cmp    ax,0x1f
c0010525:	76 09                	jbe    c0010530 <sendKeyboardToken(KeyboardToken)+0x39a>
c0010527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001052a:	66 83 f8 7e          	cmp    ax,0x7e
c001052e:	76 12                	jbe    c0010542 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010533:	66 83 f8 0a          	cmp    ax,0xa
c0010537:	74 09                	je     c0010542 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001053c:	66 83 f8 08          	cmp    ax,0x8
c0010540:	75 12                	jne    c0010554 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010545:	0f b6 c0             	movzx  eax,al
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	50                   	push   eax
c001054c:	e8 87 fb ff ff       	call   c00100d8 <sendKeyToTerminal(unsigned char)>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010557:	83 f0 01             	xor    eax,0x1
c001055a:	84 c0                	test   al,al
c001055c:	74 4f                	je     c00105ad <sendKeyboardToken(KeyboardToken)+0x417>
c001055e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010561:	83 f0 01             	xor    eax,0x1
c0010564:	84 c0                	test   al,al
c0010566:	74 45                	je     c00105ad <sendKeyboardToken(KeyboardToken)+0x417>
c0010568:	a0 c0 8e 02 c0       	mov    al,ds:0xc0028ec0
c001056d:	84 c0                	test   al,al
c001056f:	74 3c                	je     c00105ad <sendKeyboardToken(KeyboardToken)+0x417>
c0010571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010574:	66 83 f8 3f          	cmp    ax,0x3f
c0010578:	76 33                	jbe    c00105ad <sendKeyboardToken(KeyboardToken)+0x417>
c001057a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001057d:	66 83 f8 7f          	cmp    ax,0x7f
c0010581:	77 2a                	ja     c00105ad <sendKeyboardToken(KeyboardToken)+0x417>
c0010583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010586:	88 c2                	mov    dl,al
c0010588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001058b:	66 83 f8 5f          	cmp    ax,0x5f
c001058f:	76 04                	jbe    c0010595 <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010591:	b0 20                	mov    al,0x20
c0010593:	eb 02                	jmp    c0010597 <sendKeyboardToken(KeyboardToken)+0x401>
c0010595:	b0 00                	mov    al,0x0
c0010597:	29 c2                	sub    edx,eax
c0010599:	88 d0                	mov    al,dl
c001059b:	83 e8 40             	sub    eax,0x40
c001059e:	0f b6 c0             	movzx  eax,al
c00105a1:	83 ec 0c             	sub    esp,0xc
c00105a4:	50                   	push   eax
c00105a5:	e8 2e fb ff ff       	call   c00100d8 <sendKeyToTerminal(unsigned char)>
c00105aa:	83 c4 10             	add    esp,0x10
c00105ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105b0:	66 3d 00 03          	cmp    ax,0x300
c00105b4:	75 0f                	jne    c00105c5 <sendKeyboardToken(KeyboardToken)+0x42f>
c00105b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00105b9:	83 f0 01             	xor    eax,0x1
c00105bc:	84 c0                	test   al,al
c00105be:	74 05                	je     c00105c5 <sendKeyboardToken(KeyboardToken)+0x42f>
c00105c0:	e8 72 a9 ff ff       	call   c000af37 <doTerminalCycle()>
c00105c5:	90                   	nop
c00105c6:	c9                   	leave  
c00105c7:	c3                   	ret    

c00105c8 <clearInternalKeybuffer(VgaText*)>:
c00105c8:	55                   	push   ebp
c00105c9:	89 e5                	mov    ebp,esp
c00105cb:	83 ec 08             	sub    esp,0x8
c00105ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105d1:	05 32 01 00 00       	add    eax,0x132
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	50                   	push   eax
c00105da:	e8 d1 00 ff ff       	call   c00006b0 <strlen>
c00105df:	83 c4 10             	add    esp,0x10
c00105e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105e5:	81 c2 32 01 00 00    	add    edx,0x132
c00105eb:	83 ec 04             	sub    esp,0x4
c00105ee:	50                   	push   eax
c00105ef:	6a 00                	push   0x0
c00105f1:	52                   	push   edx
c00105f2:	e8 9d 00 ff ff       	call   c0000694 <memset>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	90                   	nop
c00105fb:	c9                   	leave  
c00105fc:	c3                   	ret    

c00105fd <readKeyboard(VgaText*, char*, unsigned long)>:
c00105fd:	55                   	push   ebp
c00105fe:	89 e5                	mov    ebp,esp
c0010600:	83 ec 18             	sub    esp,0x18
c0010603:	a1 a8 8d 02 c0       	mov    eax,ds:0xc0028da8
c0010608:	85 c0                	test   eax,eax
c001060a:	74 2a                	je     c0010636 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001060c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010612:	8b 0d a8 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028da8
c0010618:	83 ec 04             	sub    esp,0x4
c001061b:	68 c0 8d 02 c0       	push   0xc0028dc0
c0010620:	83 ec 08             	sub    esp,0x8
c0010623:	89 e2                	mov    edx,esp
c0010625:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010628:	89 02                	mov    DWORD PTR [edx],eax
c001062a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001062d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010631:	ff d1                	call   ecx
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	fb                   	sti    
c0010637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001063e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010642:	0f 84 a1 00 00 00    	je     c00106e9 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001064b:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010651:	84 c0                	test   al,al
c0010653:	75 28                	jne    c001067d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010655:	fa                   	cli    
c0010656:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001065b:	40                   	inc    eax
c001065c:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0010661:	e8 1e 89 00 00       	call   c0018f84 <schedule()>
c0010666:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001066b:	48                   	dec    eax
c001066c:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0010671:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0010676:	85 c0                	test   eax,eax
c0010678:	75 ce                	jne    c0010648 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001067a:	fb                   	sti    
c001067b:	eb cb                	jmp    c0010648 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001067d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010680:	8d 50 01             	lea    edx,[eax+0x1]
c0010683:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010686:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010689:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001068f:	88 10                	mov    BYTE PTR [eax],dl
c0010691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010694:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001069a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001069d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00106a0:	05 32 01 00 00       	add    eax,0x132
c00106a5:	83 ec 0c             	sub    esp,0xc
c00106a8:	50                   	push   eax
c00106a9:	e8 02 00 ff ff       	call   c00006b0 <strlen>
c00106ae:	83 c4 10             	add    esp,0x10
c00106b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00106b4:	81 c2 32 01 00 00    	add    edx,0x132
c00106ba:	8d 4a 01             	lea    ecx,[edx+0x1]
c00106bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00106c0:	81 c2 32 01 00 00    	add    edx,0x132
c00106c6:	83 ec 04             	sub    esp,0x4
c00106c9:	50                   	push   eax
c00106ca:	51                   	push   ecx
c00106cb:	52                   	push   edx
c00106cc:	e8 fb fe fe ff       	call   c00005cc <memmove>
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00106d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00106da:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00106de:	0f 85 5a ff ff ff    	jne    c001063e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00106e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00106e7:	eb 03                	jmp    c00106ec <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00106e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00106ec:	c9                   	leave  
c00106ed:	c3                   	ret    

c00106ee <Keyboard::Keyboard(char const*)>:
c00106ee:	83 ec 0c             	sub    esp,0xc
c00106f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f5:	83 ec 08             	sub    esp,0x8
c00106f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106fc:	50                   	push   eax
c00106fd:	e8 bc e1 ff ff       	call   c000e8be <Device::Device(char const*)>
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	ba 38 5b 02 c0       	mov    edx,0xc0025b38
c001070a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070e:	89 10                	mov    DWORD PTR [eax],edx
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001071e:	c6 05 a4 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028da4,0x1
c0010725:	90                   	nop
c0010726:	83 c4 0c             	add    esp,0xc
c0010729:	c3                   	ret    

c001072a <Keyboard::~Keyboard()>:
c001072a:	83 ec 0c             	sub    esp,0xc
c001072d:	ba 38 5b 02 c0       	mov    edx,0xc0025b38
c0010732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010736:	89 10                	mov    DWORD PTR [eax],edx
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	83 ec 0c             	sub    esp,0xc
c001073f:	50                   	push   eax
c0010740:	e8 43 de ff ff       	call   c000e588 <Device::~Device()>
c0010745:	83 c4 10             	add    esp,0x10
c0010748:	90                   	nop
c0010749:	83 c4 0c             	add    esp,0xc
c001074c:	c3                   	ret    
c001074d:	90                   	nop

c001074e <Keyboard::~Keyboard()>:
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	83 ec 0c             	sub    esp,0xc
c0010754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010758:	e8 cd ff ff ff       	call   c001072a <Keyboard::~Keyboard()>
c001075d:	83 c4 10             	add    esp,0x10
c0010760:	83 ec 08             	sub    esp,0x8
c0010763:	68 5c 01 00 00       	push   0x15c
c0010768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001076c:	e8 f7 c8 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0010771:	83 c4 10             	add    esp,0x10
c0010774:	83 c4 0c             	add    esp,0xc
c0010777:	c3                   	ret    

c0010778 <LogicalDisk::close(int, int, void*)>:
c0010778:	83 c8 ff             	or     eax,0xffffffff
c001077b:	c3                   	ret    

c001077c <LogicalDisk::~LogicalDisk()>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	ba 08 5c 02 c0       	mov    edx,0xc0025c08
c0010784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010788:	89 10                	mov    DWORD PTR [eax],edx
c001078a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078e:	83 ec 0c             	sub    esp,0xc
c0010791:	50                   	push   eax
c0010792:	e8 f1 dd ff ff       	call   c000e588 <Device::~Device()>
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	90                   	nop
c001079b:	83 c4 0c             	add    esp,0xc
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <LogicalDisk::~LogicalDisk()>:
c00107a0:	83 ec 0c             	sub    esp,0xc
c00107a3:	83 ec 0c             	sub    esp,0xc
c00107a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107aa:	e8 cd ff ff ff       	call   c001077c <LogicalDisk::~LogicalDisk()>
c00107af:	83 c4 10             	add    esp,0x10
c00107b2:	83 ec 08             	sub    esp,0x8
c00107b5:	68 74 01 00 00       	push   0x174
c00107ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107be:	e8 a5 c8 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c00107c3:	83 c4 10             	add    esp,0x10
c00107c6:	83 c4 0c             	add    esp,0xc
c00107c9:	c3                   	ret    

c00107ca <LogicalDisk::open(int, int, void*)>:
c00107ca:	83 ec 18             	sub    esp,0x18
c00107cd:	68 64 5b 02 c0       	push   0xc0025b64
c00107d2:	e8 52 4a 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00107d7:	83 c8 ff             	or     eax,0xffffffff
c00107da:	83 c4 1c             	add    esp,0x1c
c00107dd:	c3                   	ret    

c00107de <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00107de:	53                   	push   ebx
c00107df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107eb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00107f1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00107f7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00107fd:	77 10                	ja     c001080f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00107ff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010805:	89 d3                	mov    ebx,edx
c0010807:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001080d:	72 05                	jb     c0010814 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001080f:	83 c8 ff             	or     eax,0xffffffff
c0010812:	89 c2                	mov    edx,eax
c0010814:	5b                   	pop    ebx
c0010815:	c3                   	ret    

c0010816 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010816:	56                   	push   esi
c0010817:	83 c8 ff             	or     eax,0xffffffff
c001081a:	53                   	push   ebx
c001081b:	89 c2                	mov    edx,eax
c001081d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010821:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0010825:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010829:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001082f:	77 27                	ja     c0010858 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010831:	89 d8                	mov    eax,ebx
c0010833:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010839:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001083f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010844:	89 c2                	mov    edx,eax
c0010846:	73 10                	jae    c0010858 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010848:	89 c8                	mov    eax,ecx
c001084a:	89 da                	mov    edx,ebx
c001084c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010852:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010858:	5b                   	pop    ebx
c0010859:	5e                   	pop    esi
c001085a:	c3                   	ret    
c001085b:	90                   	nop

c001085c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001085c:	83 ec 1c             	sub    esp,0x1c
c001085f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010867:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001086b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001086f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010873:	89 04 24             	mov    DWORD PTR [esp],eax
c0010876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001087a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001087e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010882:	83 ec 08             	sub    esp,0x8
c0010885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010889:	50                   	push   eax
c001088a:	e8 2f e0 ff ff       	call   c000e8be <Device::Device(char const*)>
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	ba 08 5c 02 c0       	mov    edx,0xc0025c08
c0010897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001089b:	89 10                	mov    DWORD PTR [eax],edx
c001089d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108a1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00108a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108ac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00108b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00108c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00108c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108cd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00108d3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00108d9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00108dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00108e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00108e4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00108ea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00108f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108f8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00108fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010902:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001090c:	90                   	nop
c001090d:	83 c4 1c             	add    esp,0x1c
c0010910:	c3                   	ret    
c0010911:	90                   	nop

c0010912 <LogicalDisk::assignDriveLetter()>:
c0010912:	55                   	push   ebp
c0010913:	57                   	push   edi
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	83 ec 14             	sub    esp,0x14
c0010919:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001091d:	8b 3d e0 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291e0
c0010923:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010929:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001092d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010933:	8b 3d e4 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291e4
c0010939:	3c 01                	cmp    al,0x1
c001093b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001093f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010943:	19 c0                	sbb    eax,eax
c0010945:	83 e0 02             	and    eax,0x2
c0010948:	83 c0 41             	add    eax,0x41
c001094b:	0f be e8             	movsx  ebp,al
c001094e:	3c 43                	cmp    al,0x43
c0010950:	75 10                	jne    c0010962 <LogicalDisk::assignDriveLetter()+0x50>
c0010952:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010959:	75 5d                	jne    c00109b8 <LogicalDisk::assignDriveLetter()+0xa6>
c001095b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010960:	75 56                	jne    c00109b8 <LogicalDisk::assignDriveLetter()+0xa6>
c0010962:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010965:	ba 01 00 00 00       	mov    edx,0x1
c001096a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001096e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010972:	d3 e2                	shl    edx,cl
c0010974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010978:	89 d7                	mov    edi,edx
c001097a:	89 d6                	mov    esi,edx
c001097c:	c1 ff 1f             	sar    edi,0x1f
c001097f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010983:	21 f9                	and    ecx,edi
c0010985:	09 d1                	or     ecx,edx
c0010987:	75 2f                	jne    c00109b8 <LogicalDisk::assignDriveLetter()+0xa6>
c0010989:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001098d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010991:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010997:	09 f2                	or     edx,esi
c0010999:	89 15 e0 91 02 c0    	mov    DWORD PTR ds:0xc00291e0,edx
c001099f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00109a3:	09 fa                	or     edx,edi
c00109a5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00109a9:	89 15 e4 91 02 c0    	mov    DWORD PTR ds:0xc00291e4,edx
c00109af:	89 1c bd 00 92 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6e00],ebx
c00109b6:	eb 08                	jmp    c00109c0 <LogicalDisk::assignDriveLetter()+0xae>
c00109b8:	45                   	inc    ebp
c00109b9:	40                   	inc    eax
c00109ba:	3c 5b                	cmp    al,0x5b
c00109bc:	75 90                	jne    c001094e <LogicalDisk::assignDriveLetter()+0x3c>
c00109be:	31 c0                	xor    eax,eax
c00109c0:	83 c4 14             	add    esp,0x14
c00109c3:	5b                   	pop    ebx
c00109c4:	5e                   	pop    esi
c00109c5:	5f                   	pop    edi
c00109c6:	5d                   	pop    ebp
c00109c7:	c3                   	ret    

c00109c8 <LogicalDisk::mount()>:
c00109c8:	56                   	push   esi
c00109c9:	53                   	push   ebx
c00109ca:	83 ec 1c             	sub    esp,0x1c
c00109cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00109d1:	8b 1d 78 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d78
c00109d7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00109de:	50                   	push   eax
c00109df:	68 88 5b 02 c0       	push   0xc0025b88
c00109e4:	e8 60 c7 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00109e9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	85 db                	test   ebx,ebx
c00109f8:	74 4e                	je     c0010a48 <LogicalDisk::mount()+0x80>
c00109fa:	83 ec 0c             	sub    esp,0xc
c00109fd:	68 a9 5b 02 c0       	push   0xc0025ba9
c0010a02:	e8 42 c7 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0010a07:	83 c4 0c             	add    esp,0xc
c0010a0a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010a11:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a13:	83 e8 41             	sub    eax,0x41
c0010a16:	50                   	push   eax
c0010a17:	56                   	push   esi
c0010a18:	53                   	push   ebx
c0010a19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	84 c0                	test   al,al
c0010a21:	74 20                	je     c0010a43 <LogicalDisk::mount()+0x7b>
c0010a23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010a27:	83 ec 0c             	sub    esp,0xc
c0010a2a:	68 c5 5b 02 c0       	push   0xc0025bc5
c0010a2f:	e8 15 c7 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010a3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010a41:	eb 07                	jmp    c0010a4a <LogicalDisk::mount()+0x82>
c0010a43:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a46:	eb ae                	jmp    c00109f6 <LogicalDisk::mount()+0x2e>
c0010a48:	31 c0                	xor    eax,eax
c0010a4a:	83 c4 14             	add    esp,0x14
c0010a4d:	5b                   	pop    ebx
c0010a4e:	5e                   	pop    esi
c0010a4f:	c3                   	ret    

c0010a50 <LogicalDisk::unmount()>:
c0010a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a54:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010a5e:	c3                   	ret    
c0010a5f:	90                   	nop

c0010a60 <LogicalDisk::eject()>:
c0010a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a64:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010a6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a70:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010a73:	90                   	nop

c0010a74 <LogicalDisk::unassignDriveLetter()>:
c0010a74:	57                   	push   edi
c0010a75:	56                   	push   esi
c0010a76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a7a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010a81:	84 c9                	test   cl,cl
c0010a83:	75 0f                	jne    c0010a94 <LogicalDisk::unassignDriveLetter()+0x20>
c0010a85:	c7 44 24 0c de 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025bde
c0010a8d:	5e                   	pop    esi
c0010a8e:	5f                   	pop    edi
c0010a8f:	e9 95 47 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c0010a94:	83 e9 41             	sub    ecx,0x41
c0010a97:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010a9e:	b8 01 00 00 00       	mov    eax,0x1
c0010aa3:	c7 04 8d 00 92 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6e00],0x0
c0010aae:	d3 e0                	shl    eax,cl
c0010ab0:	89 c7                	mov    edi,eax
c0010ab2:	f7 d0                	not    eax
c0010ab4:	c1 ff 1f             	sar    edi,0x1f
c0010ab7:	21 05 e0 91 02 c0    	and    DWORD PTR ds:0xc00291e0,eax
c0010abd:	89 fe                	mov    esi,edi
c0010abf:	f7 d6                	not    esi
c0010ac1:	21 35 e4 91 02 c0    	and    DWORD PTR ds:0xc00291e4,esi
c0010ac7:	5e                   	pop    esi
c0010ac8:	5f                   	pop    edi
c0010ac9:	c3                   	ret    

c0010aca <LogicalDisk::read(unsigned long long, int, void*)>:
c0010aca:	57                   	push   edi
c0010acb:	56                   	push   esi
c0010acc:	53                   	push   ebx
c0010acd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ad1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ad5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ad9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010add:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010ae3:	77 41                	ja     c0010b26 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010ae5:	99                   	cdq    
c0010ae6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010aec:	01 c8                	add    eax,ecx
c0010aee:	11 da                	adc    edx,ebx
c0010af0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010af6:	19 d7                	sbb    edi,edx
c0010af8:	72 33                	jb     c0010b2d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010afa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010b00:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010b06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010b0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010b0e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b1e:	5b                   	pop    ebx
c0010b1f:	5e                   	pop    esi
c0010b20:	5f                   	pop    edi
c0010b21:	e9 f4 0a 00 00       	jmp    c001161a <VCache::read(unsigned long long, int, void*)>
c0010b26:	b8 05 00 00 00       	mov    eax,0x5
c0010b2b:	eb 05                	jmp    c0010b32 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010b2d:	b8 07 00 00 00       	mov    eax,0x7
c0010b32:	5b                   	pop    ebx
c0010b33:	5e                   	pop    esi
c0010b34:	5f                   	pop    edi
c0010b35:	c3                   	ret    

c0010b36 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010b36:	57                   	push   edi
c0010b37:	56                   	push   esi
c0010b38:	53                   	push   ebx
c0010b39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010b4f:	77 41                	ja     c0010b92 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010b51:	99                   	cdq    
c0010b52:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010b58:	01 c8                	add    eax,ecx
c0010b5a:	11 da                	adc    edx,ebx
c0010b5c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010b62:	19 d7                	sbb    edi,edx
c0010b64:	72 33                	jb     c0010b99 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010b66:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010b6c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010b72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010b76:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010b7a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b8a:	5b                   	pop    ebx
c0010b8b:	5e                   	pop    esi
c0010b8c:	5f                   	pop    edi
c0010b8d:	e9 8e 09 00 00       	jmp    c0011520 <VCache::write(unsigned long long, int, void*)>
c0010b92:	b8 05 00 00 00       	mov    eax,0x5
c0010b97:	eb 05                	jmp    c0010b9e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010b99:	b8 07 00 00 00       	mov    eax,0x7
c0010b9e:	5b                   	pop    ebx
c0010b9f:	5e                   	pop    esi
c0010ba0:	5f                   	pop    edi
c0010ba1:	c3                   	ret    
c0010ba2:	66 90                	xchg   ax,ax

c0010ba4 <Mouse::Mouse(char const*)>:
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bab:	83 ec 08             	sub    esp,0x8
c0010bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb2:	50                   	push   eax
c0010bb3:	e8 06 dd ff ff       	call   c000e8be <Device::Device(char const*)>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	ba 34 5c 02 c0       	mov    edx,0xc0025c34
c0010bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc4:	89 10                	mov    DWORD PTR [eax],edx
c0010bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010bd4:	90                   	nop
c0010bd5:	83 c4 0c             	add    esp,0xc
c0010bd8:	c3                   	ret    
c0010bd9:	90                   	nop
c0010bda:	66 90                	xchg   ax,ax

c0010bdc <Mouse::~Mouse()>:
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	ba 34 5c 02 c0       	mov    edx,0xc0025c34
c0010be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be8:	89 10                	mov    DWORD PTR [eax],edx
c0010bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bee:	83 ec 0c             	sub    esp,0xc
c0010bf1:	50                   	push   eax
c0010bf2:	e8 91 d9 ff ff       	call   c000e588 <Device::~Device()>
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	90                   	nop
c0010bfb:	83 c4 0c             	add    esp,0xc
c0010bfe:	c3                   	ret    
c0010bff:	90                   	nop

c0010c00 <Mouse::~Mouse()>:
c0010c00:	83 ec 0c             	sub    esp,0xc
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c0a:	e8 cd ff ff ff       	call   c0010bdc <Mouse::~Mouse()>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	83 ec 08             	sub    esp,0x8
c0010c15:	68 58 01 00 00       	push   0x158
c0010c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1e:	e8 45 c4 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	83 c4 0c             	add    esp,0xc
c0010c29:	c3                   	ret    

c0010c2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010c2a:	55                   	push   ebp
c0010c2b:	57                   	push   edi
c0010c2c:	56                   	push   esi
c0010c2d:	53                   	push   ebx
c0010c2e:	81 ec 28 01 00 00    	sub    esp,0x128
c0010c34:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010c3b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010c42:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010c49:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010c50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010c58:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c5f:	e8 56 dd ff ff       	call   c000e9ba <Device::getName()>
c0010c64:	5a                   	pop    edx
c0010c65:	59                   	pop    ecx
c0010c66:	50                   	push   eax
c0010c67:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010c6b:	55                   	push   ebp
c0010c6c:	e8 df fa fe ff       	call   c0000750 <strcpy>
c0010c71:	5b                   	pop    ebx
c0010c72:	58                   	pop    eax
c0010c73:	68 58 5c 02 c0       	push   0xc0025c58
c0010c78:	55                   	push   ebp
c0010c79:	e8 12 fc fe ff       	call   c0000890 <strcat>
c0010c7e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010c85:	e8 5d 91 ff ff       	call   c0009de7 <malloc>
c0010c8a:	83 c4 0c             	add    esp,0xc
c0010c8d:	89 c3                	mov    ebx,eax
c0010c8f:	57                   	push   edi
c0010c90:	56                   	push   esi
c0010c91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c99:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010ca0:	55                   	push   ebp
c0010ca1:	50                   	push   eax
c0010ca2:	e8 b5 fb ff ff       	call   c001085c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010ca7:	83 c4 14             	add    esp,0x14
c0010caa:	53                   	push   ebx
c0010cab:	e8 62 fc ff ff       	call   c0010912 <LogicalDisk::assignDriveLetter()>
c0010cb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb3:	e8 10 fd ff ff       	call   c00109c8 <LogicalDisk::mount()>
c0010cb8:	58                   	pop    eax
c0010cb9:	5a                   	pop    edx
c0010cba:	53                   	push   ebx
c0010cbb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010cc2:	e8 f3 d9 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c0010cc7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010ccd:	5b                   	pop    ebx
c0010cce:	5e                   	pop    esi
c0010ccf:	5f                   	pop    edi
c0010cd0:	5d                   	pop    ebp
c0010cd1:	c3                   	ret    

c0010cd2 <createPartitionsForDisk(PhysicalDisk*)>:
c0010cd2:	55                   	push   ebp
c0010cd3:	57                   	push   edi
c0010cd4:	56                   	push   esi
c0010cd5:	53                   	push   ebx
c0010cd6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010cdc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010ce3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010ce9:	3d 00 02 00 00       	cmp    eax,0x200
c0010cee:	74 27                	je     c0010d17 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010cf0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010cf6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010cfc:	83 ec 10             	sub    esp,0x10
c0010cff:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010d03:	99                   	cdq    
c0010d04:	c1 e6 0a             	shl    esi,0xa
c0010d07:	52                   	push   edx
c0010d08:	89 fd                	mov    ebp,edi
c0010d0a:	50                   	push   eax
c0010d0b:	55                   	push   ebp
c0010d0c:	56                   	push   esi
c0010d0d:	e8 fe 22 01 00       	call   c0023010 <__udivdi3>
c0010d12:	e9 b1 00 00 00       	jmp    c0010dc8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010d17:	83 ec 0c             	sub    esp,0xc
c0010d1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d1c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010d20:	56                   	push   esi
c0010d21:	6a 01                	push   0x1
c0010d23:	6a 00                	push   0x0
c0010d25:	6a 00                	push   0x0
c0010d27:	53                   	push   ebx
c0010d28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010d2b:	83 c4 20             	add    esp,0x20
c0010d2e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010d36:	75 0a                	jne    c0010d42 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010d38:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010d40:	74 2c                	je     c0010d6e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010d42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d54:	83 ec 10             	sub    esp,0x10
c0010d57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d5b:	89 f7                	mov    edi,esi
c0010d5d:	c1 e0 0a             	shl    eax,0xa
c0010d60:	c1 ff 1f             	sar    edi,0x1f
c0010d63:	57                   	push   edi
c0010d64:	56                   	push   esi
c0010d65:	52                   	push   edx
c0010d66:	50                   	push   eax
c0010d67:	e8 a4 22 01 00       	call   c0023010 <__udivdi3>
c0010d6c:	eb 5a                	jmp    c0010dc8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010d6e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010d75:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010d7c:	83 e1 7f             	and    ecx,0x7f
c0010d7f:	83 e0 7f             	and    eax,0x7f
c0010d82:	01 c1                	add    ecx,eax
c0010d84:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010d8b:	83 e0 7f             	and    eax,0x7f
c0010d8e:	01 c1                	add    ecx,eax
c0010d90:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010d97:	83 e0 7f             	and    eax,0x7f
c0010d9a:	00 c1                	add    cl,al
c0010d9c:	74 41                	je     c0010ddf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010d9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010da4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010daa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010db0:	83 ec 10             	sub    esp,0x10
c0010db3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010db7:	89 f7                	mov    edi,esi
c0010db9:	c1 e0 0a             	shl    eax,0xa
c0010dbc:	c1 ff 1f             	sar    edi,0x1f
c0010dbf:	57                   	push   edi
c0010dc0:	56                   	push   esi
c0010dc1:	52                   	push   edx
c0010dc2:	50                   	push   eax
c0010dc3:	e8 48 22 01 00       	call   c0023010 <__udivdi3>
c0010dc8:	83 c4 14             	add    esp,0x14
c0010dcb:	52                   	push   edx
c0010dcc:	50                   	push   eax
c0010dcd:	6a 00                	push   0x0
c0010dcf:	6a 00                	push   0x0
c0010dd1:	53                   	push   ebx
c0010dd2:	e8 53 fe ff ff       	call   c0010c2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010dd7:	83 c4 20             	add    esp,0x20
c0010dda:	e9 79 01 00 00       	jmp    c0010f58 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010ddf:	89 f0                	mov    eax,esi
c0010de1:	31 f6                	xor    esi,esi
c0010de3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010dea:	75 02                	jne    c0010dee <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010dec:	89 f1                	mov    ecx,esi
c0010dee:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010df5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010dfc:	c1 e2 08             	shl    edx,0x8
c0010dff:	c1 e7 10             	shl    edi,0x10
c0010e02:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010e0a:	09 fa                	or     edx,edi
c0010e0c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010e14:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010e1b:	83 c0 10             	add    eax,0x10
c0010e1e:	09 fa                	or     edx,edi
c0010e20:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010e27:	c1 e7 18             	shl    edi,0x18
c0010e2a:	09 fa                	or     edx,edi
c0010e2c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010e33:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010e37:	c1 e7 10             	shl    edi,0x10
c0010e3a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010e41:	c1 e2 08             	shl    edx,0x8
c0010e44:	09 fa                	or     edx,edi
c0010e46:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010e4d:	09 fa                	or     edx,edi
c0010e4f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010e56:	c1 e7 18             	shl    edi,0x18
c0010e59:	09 fa                	or     edx,edi
c0010e5b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010e5f:	46                   	inc    esi
c0010e60:	83 fe 04             	cmp    esi,0x4
c0010e63:	0f 85 7a ff ff ff    	jne    c0010de3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6d:	83 f0 01             	xor    eax,0x1
c0010e70:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e74:	75 57                	jne    c0010ecd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7a:	83 f0 01             	xor    eax,0x1
c0010e7d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010e81:	75 4a                	jne    c0010ecd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e83:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010e87:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010e8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010e9d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010ea3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010ea9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010ead:	89 f7                	mov    edi,esi
c0010eaf:	c1 e0 0a             	shl    eax,0xa
c0010eb2:	c1 ff 1f             	sar    edi,0x1f
c0010eb5:	57                   	push   edi
c0010eb6:	56                   	push   esi
c0010eb7:	52                   	push   edx
c0010eb8:	50                   	push   eax
c0010eb9:	e8 52 21 01 00       	call   c0023010 <__udivdi3>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ec5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010ec9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ecd:	84 c9                	test   cl,cl
c0010ecf:	74 53                	je     c0010f24 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010ed1:	0f b6 c9             	movzx  ecx,cl
c0010ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010edc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010ee4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ee8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010eec:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010ef0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010ef4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ef8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f04:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010f08:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010f0c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010f10:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010f14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010f18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010f1c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010f20:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010f24:	31 ed                	xor    ebp,ebp
c0010f26:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010f2a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010f2e:	89 f8                	mov    eax,edi
c0010f30:	09 f0                	or     eax,esi
c0010f32:	74 1e                	je     c0010f52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010f34:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010f38:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010f3c:	89 d1                	mov    ecx,edx
c0010f3e:	09 c1                	or     ecx,eax
c0010f40:	74 10                	je     c0010f52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010f42:	83 ec 0c             	sub    esp,0xc
c0010f45:	57                   	push   edi
c0010f46:	56                   	push   esi
c0010f47:	52                   	push   edx
c0010f48:	50                   	push   eax
c0010f49:	53                   	push   ebx
c0010f4a:	e8 db fc ff ff       	call   c0010c2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010f4f:	83 c4 20             	add    esp,0x20
c0010f52:	45                   	inc    ebp
c0010f53:	83 fd 04             	cmp    ebp,0x4
c0010f56:	75 ce                	jne    c0010f26 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010f58:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010f5e:	5b                   	pop    ebx
c0010f5f:	5e                   	pop    esi
c0010f60:	5f                   	pop    edi
c0010f61:	5d                   	pop    ebp
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <Serial::Serial(char const*)>:
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6b:	83 ec 08             	sub    esp,0x8
c0010f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f72:	50                   	push   eax
c0010f73:	e8 46 d9 ff ff       	call   c000e8be <Device::Device(char const*)>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	ba 6c 5c 02 c0       	mov    edx,0xc0025c6c
c0010f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f84:	89 10                	mov    DWORD PTR [eax],edx
c0010f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010f94:	90                   	nop
c0010f95:	83 c4 0c             	add    esp,0xc
c0010f98:	c3                   	ret    
c0010f99:	90                   	nop
c0010f9a:	66 90                	xchg   ax,ax

c0010f9c <Serial::~Serial()>:
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	ba 6c 5c 02 c0       	mov    edx,0xc0025c6c
c0010fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa8:	89 10                	mov    DWORD PTR [eax],edx
c0010faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fae:	83 ec 0c             	sub    esp,0xc
c0010fb1:	50                   	push   eax
c0010fb2:	e8 d1 d5 ff ff       	call   c000e588 <Device::~Device()>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	90                   	nop
c0010fbb:	83 c4 0c             	add    esp,0xc
c0010fbe:	c3                   	ret    
c0010fbf:	90                   	nop

c0010fc0 <Serial::~Serial()>:
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fca:	e8 cd ff ff ff       	call   c0010f9c <Serial::~Serial()>
c0010fcf:	83 c4 10             	add    esp,0x10
c0010fd2:	83 ec 08             	sub    esp,0x8
c0010fd5:	68 58 01 00 00       	push   0x158
c0010fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fde:	e8 85 c0 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	83 c4 0c             	add    esp,0xc
c0010fe9:	c3                   	ret    
c0010fea:	66 90                	xchg   ax,ax

c0010fec <Timer::Timer(char const*)>:
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff3:	83 ec 08             	sub    esp,0x8
c0010ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffa:	50                   	push   eax
c0010ffb:	e8 be d8 ff ff       	call   c000e8be <Device::Device(char const*)>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	ba b0 5c 02 c0       	mov    edx,0xc0025cb0
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001101c:	90                   	nop
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	90                   	nop
c0011022:	66 90                	xchg   ax,ax

c0011024 <Timer::~Timer()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	ba b0 5c 02 c0       	mov    edx,0xc0025cb0
c001102c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011030:	89 10                	mov    DWORD PTR [eax],edx
c0011032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	50                   	push   eax
c001103a:	e8 49 d5 ff ff       	call   c000e588 <Device::~Device()>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	90                   	nop
c0011043:	83 c4 0c             	add    esp,0xc
c0011046:	c3                   	ret    
c0011047:	90                   	nop

c0011048 <Timer::~Timer()>:
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	83 ec 0c             	sub    esp,0xc
c001104e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011052:	e8 cd ff ff ff       	call   c0011024 <Timer::~Timer()>
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	83 ec 08             	sub    esp,0x8
c001105d:	68 5c 01 00 00       	push   0x15c
c0011062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011066:	e8 fd bf ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c001106b:	83 c4 10             	add    esp,0x10
c001106e:	83 c4 0c             	add    esp,0xc
c0011071:	c3                   	ret    

c0011072 <Timer::read()>:
c0011072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011076:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001107c:	c3                   	ret    

c001107d <timerHandler(unsigned int)>:
c001107d:	56                   	push   esi
c001107e:	53                   	push   ebx
c001107f:	51                   	push   ecx
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	01 05 6c 92 02 c0    	add    DWORD PTR ds:0xc002926c,eax
c001108a:	80 3d 4d 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c4d,0x0
c0011091:	0f 84 49 01 00 00    	je     c00111e0 <timerHandler(unsigned int)+0x163>
c0011097:	fa                   	cli    
c0011098:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c001109e:	83 ec 0c             	sub    esp,0xc
c00110a1:	ff 05 64 a1 02 c0    	inc    DWORD PTR ds:0xc002a164
c00110a7:	68 78 a1 02 c0       	push   0xc002a178
c00110ac:	e8 2f 25 01 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	84 c0                	test   al,al
c00110b6:	0f 85 a0 00 00 00    	jne    c001115c <timerHandler(unsigned int)+0xdf>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	68 78 a1 02 c0       	push   0xc002a178
c00110c4:	e8 33 25 01 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	89 c6                	mov    esi,eax
c00110ce:	66 90                	xchg   ax,ax
c00110d0:	83 ec 0c             	sub    esp,0xc
c00110d3:	68 78 a1 02 c0       	push   0xc002a178
c00110d8:	e8 1f 25 01 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110dd:	c7 04 24 78 a1 02 c0 	mov    DWORD PTR [esp],0xc002a178
c00110e4:	89 c3                	mov    ebx,eax
c00110e6:	e8 19 25 01 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00110eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	3b 05 6c 92 02 c0    	cmp    eax,DWORD PTR ds:0xc002926c
c00110f7:	77 23                	ja     c001111c <timerHandler(unsigned int)+0x9f>
c00110f9:	83 ec 0c             	sub    esp,0xc
c00110fc:	53                   	push   ebx
c00110fd:	e8 3e 83 00 00       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	39 de                	cmp    esi,ebx
c0011107:	75 27                	jne    c0011130 <timerHandler(unsigned int)+0xb3>
c0011109:	83 ec 0c             	sub    esp,0xc
c001110c:	68 78 a1 02 c0       	push   0xc002a178
c0011111:	e8 e6 24 01 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011116:	89 c6                	mov    esi,eax
c0011118:	eb 12                	jmp    c001112c <timerHandler(unsigned int)+0xaf>
c001111a:	66 90                	xchg   ax,ax
c001111c:	52                   	push   edx
c001111d:	52                   	push   edx
c001111e:	53                   	push   ebx
c001111f:	68 78 a1 02 c0       	push   0xc002a178
c0011124:	e8 93 25 01 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0011129:	8d 76 00             	lea    esi,[esi+0x0]
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	90                   	nop
c0011130:	83 ec 0c             	sub    esp,0xc
c0011133:	68 78 a1 02 c0       	push   0xc002a178
c0011138:	e8 a3 24 01 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	84 c0                	test   al,al
c0011142:	75 18                	jne    c001115c <timerHandler(unsigned int)+0xdf>
c0011144:	83 ec 0c             	sub    esp,0xc
c0011147:	68 78 a1 02 c0       	push   0xc002a178
c001114c:	e8 ab 24 01 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011151:	83 c4 10             	add    esp,0x10
c0011154:	39 f0                	cmp    eax,esi
c0011156:	0f 85 74 ff ff ff    	jne    c00110d0 <timerHandler(unsigned int)+0x53>
c001115c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011161:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0011165:	74 41                	je     c00111a8 <timerHandler(unsigned int)+0x12b>
c0011167:	80 3d 4c 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c4c,0x0
c001116e:	74 38                	je     c00111a8 <timerHandler(unsigned int)+0x12b>
c0011170:	fa                   	cli    
c0011171:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0011177:	a1 6c 92 02 c0       	mov    eax,ds:0xc002926c
c001117c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011182:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011185:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001118b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001118e:	72 08                	jb     c0011198 <timerHandler(unsigned int)+0x11b>
c0011190:	e8 ef 7d 00 00       	call   c0018f84 <schedule()>
c0011195:	8d 76 00             	lea    esi,[esi+0x0]
c0011198:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001119d:	48                   	dec    eax
c001119e:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00111a3:	75 03                	jne    c00111a8 <timerHandler(unsigned int)+0x12b>
c00111a5:	fb                   	sti    
c00111a6:	66 90                	xchg   ax,ax
c00111a8:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c00111ad:	48                   	dec    eax
c00111ae:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c00111b3:	75 1b                	jne    c00111d0 <timerHandler(unsigned int)+0x153>
c00111b5:	83 3d 60 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a160,0x0
c00111bc:	74 12                	je     c00111d0 <timerHandler(unsigned int)+0x153>
c00111be:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c00111c8:	e8 b7 7d 00 00       	call   c0018f84 <schedule()>
c00111cd:	8d 76 00             	lea    esi,[esi+0x0]
c00111d0:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00111d5:	48                   	dec    eax
c00111d6:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00111db:	75 03                	jne    c00111e0 <timerHandler(unsigned int)+0x163>
c00111dd:	fb                   	sti    
c00111de:	66 90                	xchg   ax,ax
c00111e0:	58                   	pop    eax
c00111e1:	5b                   	pop    ebx
c00111e2:	5e                   	pop    esi
c00111e3:	c3                   	ret    

c00111e4 <setupTimer(int)>:
c00111e4:	57                   	push   edi
c00111e5:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00111ea:	56                   	push   esi
c00111eb:	53                   	push   ebx
c00111ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111f6:	83 ec 0c             	sub    esp,0xc
c00111f9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00111ff:	e8 b6 d7 ff ff       	call   c000e9ba <Device::getName()>
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001120a:	0f 85 94 00 00 00    	jne    c00112a4 <setupTimer(int)+0xc0>
c0011210:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011215:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001121c:	0f 84 82 00 00 00    	je     c00112a4 <setupTimer(int)+0xc0>
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	68 5c 01 00 00       	push   0x15c
c001122a:	e8 b8 8b ff ff       	call   c0009de7 <malloc>
c001122f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011232:	89 c3                	mov    ebx,eax
c0011234:	e8 47 19 01 00       	call   c0022b80 <PIT::PIT()>
c0011239:	59                   	pop    ecx
c001123a:	5f                   	pop    edi
c001123b:	53                   	push   ebx
c001123c:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c0011242:	e8 73 d4 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c0011247:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011249:	6a 00                	push   0x0
c001124b:	6a 00                	push   0x0
c001124d:	56                   	push   esi
c001124e:	53                   	push   ebx
c001124f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011252:	83 c4 14             	add    esp,0x14
c0011255:	68 60 01 00 00       	push   0x160
c001125a:	e8 88 8b ff ff       	call   c0009de7 <malloc>
c001125f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011262:	89 c7                	mov    edi,eax
c0011264:	e8 cb 17 01 00       	call   c0022a34 <APICTimer::APICTimer()>
c0011269:	6a 00                	push   0x0
c001126b:	6a 00                	push   0x0
c001126d:	56                   	push   esi
c001126e:	57                   	push   edi
c001126f:	e8 c0 16 01 00       	call   c0022934 <APICTimer::open(int, int, void*)>
c0011274:	83 c4 20             	add    esp,0x20
c0011277:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011279:	6a 00                	push   0x0
c001127b:	6a 00                	push   0x0
c001127d:	6a 00                	push   0x0
c001127f:	53                   	push   ebx
c0011280:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011283:	58                   	pop    eax
c0011284:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011289:	5a                   	pop    edx
c001128a:	57                   	push   edi
c001128b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011291:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011297:	e8 1e d4 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	eb 37                	jmp    c00112d8 <setupTimer(int)+0xf4>
c00112a1:	8d 76 00             	lea    esi,[esi+0x0]
c00112a4:	83 ec 0c             	sub    esp,0xc
c00112a7:	68 5c 01 00 00       	push   0x15c
c00112ac:	e8 36 8b ff ff       	call   c0009de7 <malloc>
c00112b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00112b4:	89 c3                	mov    ebx,eax
c00112b6:	e8 c5 18 01 00       	call   c0022b80 <PIT::PIT()>
c00112bb:	58                   	pop    eax
c00112bc:	5a                   	pop    edx
c00112bd:	53                   	push   ebx
c00112be:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c00112c4:	e8 f1 d3 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c00112c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112cb:	6a 00                	push   0x0
c00112cd:	6a 00                	push   0x0
c00112cf:	56                   	push   esi
c00112d0:	53                   	push   ebx
c00112d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112d4:	83 c4 20             	add    esp,0x20
c00112d7:	90                   	nop
c00112d8:	89 d8                	mov    eax,ebx
c00112da:	5b                   	pop    ebx
c00112db:	5e                   	pop    esi
c00112dc:	5f                   	pop    edi
c00112dd:	c3                   	ret    
c00112de:	66 90                	xchg   ax,ax

c00112e0 <VCache::VCache(PhysicalDisk*)>:
c00112e0:	53                   	push   ebx
c00112e1:	83 ec 18             	sub    esp,0x18
c00112e4:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00112e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ed:	89 10                	mov    DWORD PTR [eax],edx
c00112ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00112fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0011305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011309:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0011310:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0011317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001131b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0011322:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001132d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0011334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011338:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001133c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011340:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0011347:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001134e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011352:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001135a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001135e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011362:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001136a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011371:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011380:	e8 62 8a ff ff       	call   c0009de7 <malloc>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	89 c3                	mov    ebx,eax
c001138a:	83 ec 0c             	sub    esp,0xc
c001138d:	53                   	push   ebx
c001138e:	e8 c1 79 00 00       	call   c0018d54 <Mutex::Mutex()>
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001139a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001139d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00113a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00113b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113b7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00113bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00113c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113c8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00113ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00113d8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00113db:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00113de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00113e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113f0:	05 00 01 00 00       	add    eax,0x100
c00113f5:	c1 e0 04             	shl    eax,0x4
c00113f8:	83 ec 0c             	sub    esp,0xc
c00113fb:	50                   	push   eax
c00113fc:	e8 e6 89 ff ff       	call   c0009de7 <malloc>
c0011401:	83 c4 10             	add    esp,0x10
c0011404:	89 c2                	mov    edx,eax
c0011406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001140a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001140d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011411:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001141c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011420:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011424:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001142a:	c1 e0 06             	shl    eax,0x6
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	50                   	push   eax
c0011431:	e8 b1 89 ff ff       	call   c0009de7 <malloc>
c0011436:	83 c4 10             	add    esp,0x10
c0011439:	89 c2                	mov    edx,eax
c001143b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001143f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011442:	90                   	nop
c0011443:	83 c4 18             	add    esp,0x18
c0011446:	5b                   	pop    ebx
c0011447:	c3                   	ret    

c0011448 <VCache::invalidateReadBuffer()>:
c0011448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001144c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0011452:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011456:	c3                   	ret    
c0011457:	90                   	nop

c0011458 <VCache::writeWriteBuffer()>:
c0011458:	53                   	push   ebx
c0011459:	83 ec 08             	sub    esp,0x8
c001145c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011460:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011464:	74 1e                	je     c0011484 <VCache::writeWriteBuffer()+0x2c>
c0011466:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011469:	83 ec 0c             	sub    esp,0xc
c001146c:	8b 10                	mov    edx,DWORD PTR [eax]
c001146e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011471:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011474:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011477:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001147a:	50                   	push   eax
c001147b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001147e:	83 c4 20             	add    esp,0x20
c0011481:	8d 76 00             	lea    esi,[esi+0x0]
c0011484:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001148b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0011492:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011496:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001149d:	83 c4 08             	add    esp,0x8
c00114a0:	5b                   	pop    ebx
c00114a1:	c3                   	ret    
c00114a2:	66 90                	xchg   ax,ax

c00114a4 <VCache::~VCache()>:
c00114a4:	83 ec 0c             	sub    esp,0xc
c00114a7:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00114ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b0:	89 10                	mov    DWORD PTR [eax],edx
c00114b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00114b9:	84 c0                	test   al,al
c00114bb:	74 0f                	je     c00114cc <VCache::~VCache()+0x28>
c00114bd:	83 ec 0c             	sub    esp,0xc
c00114c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c4:	e8 8f ff ff ff       	call   c0011458 <VCache::writeWriteBuffer()>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00114d3:	83 ec 0c             	sub    esp,0xc
c00114d6:	50                   	push   eax
c00114d7:	e8 1b 89 ff ff       	call   c0009df7 <free>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114e6:	83 ec 0c             	sub    esp,0xc
c00114e9:	50                   	push   eax
c00114ea:	e8 08 89 ff ff       	call   c0009df7 <free>
c00114ef:	83 c4 10             	add    esp,0x10
c00114f2:	90                   	nop
c00114f3:	83 c4 0c             	add    esp,0xc
c00114f6:	c3                   	ret    
c00114f7:	90                   	nop

c00114f8 <VCache::~VCache()>:
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	83 ec 0c             	sub    esp,0xc
c00114fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011502:	e8 9d ff ff ff       	call   c00114a4 <VCache::~VCache()>
c0011507:	83 c4 10             	add    esp,0x10
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	6a 44                	push   0x44
c001150f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011513:	e8 50 bb ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	83 c4 0c             	add    esp,0xc
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <VCache::write(unsigned long long, int, void*)>:
c0011520:	55                   	push   ebp
c0011521:	31 c0                	xor    eax,eax
c0011523:	57                   	push   edi
c0011524:	56                   	push   esi
c0011525:	53                   	push   ebx
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001152d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011531:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001153c:	7d 1a                	jge    c0011558 <VCache::write(unsigned long long, int, void*)+0x38>
c001153e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011541:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011547:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001154b:	0f af c8             	imul   ecx,eax
c001154e:	01 ca                	add    edx,ecx
c0011550:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011552:	40                   	inc    eax
c0011553:	eb e3                	jmp    c0011538 <VCache::write(unsigned long long, int, void*)+0x18>
c0011555:	8d 76 00             	lea    esi,[esi+0x0]
c0011558:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001155c:	74 0a                	je     c0011568 <VCache::write(unsigned long long, int, void*)+0x48>
c001155e:	53                   	push   ebx
c001155f:	e8 e4 fe ff ff       	call   c0011448 <VCache::invalidateReadBuffer()>
c0011564:	58                   	pop    eax
c0011565:	8d 76 00             	lea    esi,[esi+0x0]
c0011568:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001156c:	74 5e                	je     c00115cc <VCache::write(unsigned long long, int, void*)+0xac>
c001156e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011571:	89 e8                	mov    eax,ebp
c0011573:	99                   	cdq    
c0011574:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011577:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001157a:	89 c1                	mov    ecx,eax
c001157c:	89 d0                	mov    eax,edx
c001157e:	31 f1                	xor    ecx,esi
c0011580:	31 f8                	xor    eax,edi
c0011582:	09 c1                	or     ecx,eax
c0011584:	75 3a                	jne    c00115c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011586:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001158b:	75 33                	jne    c00115c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001158d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011590:	89 ef                	mov    edi,ebp
c0011592:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011598:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001159c:	0f af f9             	imul   edi,ecx
c001159f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00115a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115a7:	40                   	inc    eax
c00115a8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00115ab:	83 f8 40             	cmp    eax,0x40
c00115ae:	75 60                	jne    c0011610 <VCache::write(unsigned long long, int, void*)+0xf0>
c00115b0:	83 ec 0c             	sub    esp,0xc
c00115b3:	53                   	push   ebx
c00115b4:	e8 9f fe ff ff       	call   c0011458 <VCache::writeWriteBuffer()>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	eb 52                	jmp    c0011610 <VCache::write(unsigned long long, int, void*)+0xf0>
c00115be:	66 90                	xchg   ax,ax
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	53                   	push   ebx
c00115c4:	e8 8f fe ff ff       	call   c0011458 <VCache::writeWriteBuffer()>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00115cf:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00115d4:	7f 22                	jg     c00115f8 <VCache::write(unsigned long long, int, void*)+0xd8>
c00115d6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00115d9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00115dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115e0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00115e4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00115e7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00115ea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00115f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115f6:	eb 18                	jmp    c0011610 <VCache::write(unsigned long long, int, void*)+0xf0>
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011601:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011605:	57                   	push   edi
c0011606:	56                   	push   esi
c0011607:	50                   	push   eax
c0011608:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001160b:	83 c4 20             	add    esp,0x20
c001160e:	66 90                	xchg   ax,ax
c0011610:	83 c4 0c             	add    esp,0xc
c0011613:	31 c0                	xor    eax,eax
c0011615:	5b                   	pop    ebx
c0011616:	5e                   	pop    esi
c0011617:	5f                   	pop    edi
c0011618:	5d                   	pop    ebp
c0011619:	c3                   	ret    

c001161a <VCache::read(unsigned long long, int, void*)>:
c001161a:	55                   	push   ebp
c001161b:	31 c0                	xor    eax,eax
c001161d:	57                   	push   edi
c001161e:	56                   	push   esi
c001161f:	53                   	push   ebx
c0011620:	83 ec 1c             	sub    esp,0x1c
c0011623:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011627:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001162b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001162f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011633:	90                   	nop
c0011634:	39 e8                	cmp    eax,ebp
c0011636:	7d 18                	jge    c0011650 <VCache::read(unsigned long long, int, void*)+0x36>
c0011638:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001163b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011641:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011645:	0f af c8             	imul   ecx,eax
c0011648:	01 ca                	add    edx,ecx
c001164a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001164c:	40                   	inc    eax
c001164d:	eb e5                	jmp    c0011634 <VCache::read(unsigned long long, int, void*)+0x1a>
c001164f:	90                   	nop
c0011650:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011654:	74 0e                	je     c0011664 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011656:	83 ec 0c             	sub    esp,0xc
c0011659:	53                   	push   ebx
c001165a:	e8 f9 fd ff ff       	call   c0011458 <VCache::writeWriteBuffer()>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	66 90                	xchg   ax,ax
c0011664:	83 fd 01             	cmp    ebp,0x1
c0011667:	0f 85 87 00 00 00    	jne    c00116f4 <VCache::read(unsigned long long, int, void*)+0xda>
c001166d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011670:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011674:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001167b:	75 77                	jne    c00116f4 <VCache::read(unsigned long long, int, void*)+0xda>
c001167d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011680:	89 e9                	mov    ecx,ebp
c0011682:	f7 d9                	neg    ecx
c0011684:	89 c8                	mov    eax,ecx
c0011686:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001168a:	c1 f8 1f             	sar    eax,0x1f
c001168d:	21 f1                	and    ecx,esi
c001168f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011693:	89 c8                	mov    eax,ecx
c0011695:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011699:	21 f9                	and    ecx,edi
c001169b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001169f:	89 ca                	mov    edx,ecx
c00116a1:	74 0d                	je     c00116b0 <VCache::read(unsigned long long, int, void*)+0x96>
c00116a3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00116a6:	75 08                	jne    c00116b0 <VCache::read(unsigned long long, int, void*)+0x96>
c00116a8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00116ab:	74 27                	je     c00116d4 <VCache::read(unsigned long long, int, void*)+0xba>
c00116ad:	8d 76 00             	lea    esi,[esi+0x0]
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00116b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00116bb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00116be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00116c1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00116c3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00116c6:	55                   	push   ebp
c00116c7:	52                   	push   edx
c00116c8:	50                   	push   eax
c00116c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116cd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00116d0:	83 c4 20             	add    esp,0x20
c00116d3:	90                   	nop
c00116d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00116d7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00116db:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00116e1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00116e4:	48                   	dec    eax
c00116e5:	21 c6                	and    esi,eax
c00116e7:	0f af f1             	imul   esi,ecx
c00116ea:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00116ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116ef:	eb 23                	jmp    c0011714 <VCache::read(unsigned long long, int, void*)+0xfa>
c00116f1:	8d 76 00             	lea    esi,[esi+0x0]
c00116f4:	83 ec 0c             	sub    esp,0xc
c00116f7:	53                   	push   ebx
c00116f8:	e8 4b fd ff ff       	call   c0011448 <VCache::invalidateReadBuffer()>
c00116fd:	5a                   	pop    edx
c00116fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011701:	8b 10                	mov    edx,DWORD PTR [eax]
c0011703:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011707:	55                   	push   ebp
c0011708:	57                   	push   edi
c0011709:	56                   	push   esi
c001170a:	50                   	push   eax
c001170b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001170e:	83 c4 20             	add    esp,0x20
c0011711:	8d 76 00             	lea    esi,[esi+0x0]
c0011714:	83 c4 1c             	add    esp,0x1c
c0011717:	31 c0                	xor    eax,eax
c0011719:	5b                   	pop    ebx
c001171a:	5e                   	pop    esi
c001171b:	5f                   	pop    edi
c001171c:	5d                   	pop    ebp
c001171d:	c3                   	ret    

c001171e <Video::putrect(int, int, int, int, unsigned int)>:
c001171e:	55                   	push   ebp
c001171f:	57                   	push   edi
c0011720:	56                   	push   esi
c0011721:	53                   	push   ebx
c0011722:	83 ec 1c             	sub    esp,0x1c
c0011725:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011729:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001172d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011731:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011735:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001173d:	01 df                	add    edi,ebx
c001173f:	39 fb                	cmp    ebx,edi
c0011741:	7d 1f                	jge    c0011762 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011743:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011747:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001174b:	7d 12                	jge    c001175f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001174d:	8b 16                	mov    edx,DWORD PTR [esi]
c001174f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011753:	53                   	push   ebx
c0011754:	55                   	push   ebp
c0011755:	45                   	inc    ebp
c0011756:	56                   	push   esi
c0011757:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	eb e8                	jmp    c0011747 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001175f:	43                   	inc    ebx
c0011760:	eb dd                	jmp    c001173f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011762:	83 c4 1c             	add    esp,0x1c
c0011765:	5b                   	pop    ebx
c0011766:	5e                   	pop    esi
c0011767:	5f                   	pop    edi
c0011768:	5d                   	pop    ebp
c0011769:	c3                   	ret    

c001176a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001176a:	55                   	push   ebp
c001176b:	57                   	push   edi
c001176c:	31 ff                	xor    edi,edi
c001176e:	56                   	push   esi
c001176f:	53                   	push   ebx
c0011770:	83 ec 1c             	sub    esp,0x1c
c0011773:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011777:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001177b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011782:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001178b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001178f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011793:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011796:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001179a:	01 f9                	add    ecx,edi
c001179c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00117a0:	7d 2f                	jge    c00117d1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00117a2:	31 f6                	xor    esi,esi
c00117a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00117a8:	01 f2                	add    edx,esi
c00117aa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00117ae:	7d 1a                	jge    c00117ca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00117b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117b3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00117b6:	46                   	inc    esi
c00117b7:	51                   	push   ecx
c00117b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00117bc:	52                   	push   edx
c00117bd:	55                   	push   ebp
c00117be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117c8:	eb da                	jmp    c00117a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00117ca:	47                   	inc    edi
c00117cb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00117cf:	eb c5                	jmp    c0011796 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00117d1:	83 c4 1c             	add    esp,0x1c
c00117d4:	5b                   	pop    ebx
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	5d                   	pop    ebp
c00117d8:	c3                   	ret    
c00117d9:	90                   	nop

c00117da <Video::blit(unsigned int*, int, int, int, int)>:
c00117da:	55                   	push   ebp
c00117db:	57                   	push   edi
c00117dc:	56                   	push   esi
c00117dd:	53                   	push   ebx
c00117de:	83 ec 1c             	sub    esp,0x1c
c00117e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117e9:	85 c0                	test   eax,eax
c00117eb:	79 02                	jns    c00117ef <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00117ed:	31 c0                	xor    eax,eax
c00117ef:	c1 e0 02             	shl    eax,0x2
c00117f2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00117f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117fe:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011802:	39 d8                	cmp    eax,ebx
c0011804:	7e 49                	jle    c001184f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011806:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001180c:	7c 41                	jl     c001184f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001180e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011812:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011816:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001181a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001181e:	39 f9                	cmp    ecx,edi
c0011820:	7e 22                	jle    c0011844 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011822:	83 c5 04             	add    ebp,0x4
c0011825:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001182b:	7c 14                	jl     c0011841 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001182d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001182f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011832:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011836:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001183a:	56                   	push   esi
c001183b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001183e:	83 c4 10             	add    esp,0x10
c0011841:	47                   	inc    edi
c0011842:	eb d2                	jmp    c0011816 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011848:	43                   	inc    ebx
c0011849:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001184d:	eb ab                	jmp    c00117fa <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001184f:	83 c4 1c             	add    esp,0x1c
c0011852:	5b                   	pop    ebx
c0011853:	5e                   	pop    esi
c0011854:	5f                   	pop    edi
c0011855:	5d                   	pop    ebp
c0011856:	c3                   	ret    
c0011857:	90                   	nop

c0011858 <Video::clearScreen(unsigned int)>:
c0011858:	57                   	push   edi
c0011859:	56                   	push   esi
c001185a:	53                   	push   ebx
c001185b:	31 db                	xor    ebx,ebx
c001185d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011861:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011867:	7e 1f                	jle    c0011888 <Video::clearScreen(unsigned int)+0x30>
c0011869:	31 ff                	xor    edi,edi
c001186b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011871:	7e 12                	jle    c0011885 <Video::clearScreen(unsigned int)+0x2d>
c0011873:	8b 06                	mov    eax,DWORD PTR [esi]
c0011875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011879:	53                   	push   ebx
c001187a:	57                   	push   edi
c001187b:	47                   	inc    edi
c001187c:	56                   	push   esi
c001187d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011880:	83 c4 10             	add    esp,0x10
c0011883:	eb e6                	jmp    c001186b <Video::clearScreen(unsigned int)+0x13>
c0011885:	43                   	inc    ebx
c0011886:	eb d9                	jmp    c0011861 <Video::clearScreen(unsigned int)+0x9>
c0011888:	5b                   	pop    ebx
c0011889:	5e                   	pop    esi
c001188a:	5f                   	pop    edi
c001188b:	c3                   	ret    

c001188c <Video::putpixel(int, int, unsigned int)>:
c001188c:	c7 44 24 04 e8 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025ce8
c0011894:	e9 90 39 00 00       	jmp    c0015229 <Krnl::panic(char const*)>
c0011899:	90                   	nop

c001189a <Video::Video(char const*)>:
c001189a:	83 ec 0c             	sub    esp,0xc
c001189d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a1:	83 ec 08             	sub    esp,0x8
c00118a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a8:	50                   	push   eax
c00118a9:	e8 10 d0 ff ff       	call   c000e8be <Device::Device(char const*)>
c00118ae:	83 c4 10             	add    esp,0x10
c00118b1:	ba 58 5d 02 c0       	mov    edx,0xc0025d58
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	89 10                	mov    DWORD PTR [eax],edx
c00118bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00118ca:	90                   	nop
c00118cb:	83 c4 0c             	add    esp,0xc
c00118ce:	c3                   	ret    
c00118cf:	90                   	nop

c00118d0 <Video::~Video()>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	ba 58 5d 02 c0       	mov    edx,0xc0025d58
c00118d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dc:	89 10                	mov    DWORD PTR [eax],edx
c00118de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	50                   	push   eax
c00118e6:	e8 9d cc ff ff       	call   c000e588 <Device::~Device()>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	90                   	nop
c00118ef:	83 c4 0c             	add    esp,0xc
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <Video::~Video()>:
c00118f4:	83 ec 0c             	sub    esp,0xc
c00118f7:	83 ec 0c             	sub    esp,0xc
c00118fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118fe:	e8 cd ff ff ff       	call   c00118d0 <Video::~Video()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	83 ec 08             	sub    esp,0x8
c0011909:	68 64 01 00 00       	push   0x164
c001190e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011912:	e8 51 b7 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	83 c4 0c             	add    esp,0xc
c001191d:	c3                   	ret    

c001191e <Video::isMonochrome()>:
c001191e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011922:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011928:	c3                   	ret    
c0011929:	90                   	nop

c001192a <Video::getWidth()>:
c001192a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011934:	c3                   	ret    
c0011935:	90                   	nop

c0011936 <Video::getHeight()>:
c0011936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011940:	c3                   	ret    
c0011941:	90                   	nop

c0011942 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011942:	55                   	push   ebp
c0011943:	57                   	push   edi
c0011944:	56                   	push   esi
c0011945:	53                   	push   ebx
c0011946:	83 ec 2c             	sub    esp,0x2c
c0011949:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001194d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011951:	83 f8 01             	cmp    eax,0x1
c0011954:	19 c9                	sbb    ecx,ecx
c0011956:	31 db                	xor    ebx,ebx
c0011958:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001195c:	89 cd                	mov    ebp,ecx
c001195e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011966:	f7 d5                	not    ebp
c0011968:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001196e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011972:	01 d8                	add    eax,ebx
c0011974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011978:	56                   	push   esi
c0011979:	e8 b8 ff ff ff       	call   c0011936 <Video::getHeight()>
c001197e:	59                   	pop    ecx
c001197f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011983:	7e 70                	jle    c00119f5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011985:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011989:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001198d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011990:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011994:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011998:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001199f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119a3:	89 f8                	mov    eax,edi
c00119a5:	83 c0 20             	add    eax,0x20
c00119a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119ac:	56                   	push   esi
c00119ad:	e8 78 ff ff ff       	call   c001192a <Video::getWidth()>
c00119b2:	5a                   	pop    edx
c00119b3:	39 c7                	cmp    edi,eax
c00119b5:	7d 34                	jge    c00119eb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00119b7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00119bc:	74 05                	je     c00119c3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00119be:	8b 06                	mov    eax,DWORD PTR [esi]
c00119c0:	55                   	push   ebp
c00119c1:	eb 0d                	jmp    c00119d0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00119c3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00119c8:	74 12                	je     c00119dc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00119ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00119cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00119d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119d4:	57                   	push   edi
c00119d5:	56                   	push   esi
c00119d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00119e0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00119e4:	47                   	inc    edi
c00119e5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00119e9:	75 c1                	jne    c00119ac <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00119eb:	43                   	inc    ebx
c00119ec:	83 fb 20             	cmp    ebx,0x20
c00119ef:	0f 85 79 ff ff ff    	jne    c001196e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00119f5:	83 c4 2c             	add    esp,0x2c
c00119f8:	5b                   	pop    ebx
c00119f9:	5e                   	pop    esi
c00119fa:	5f                   	pop    edi
c00119fb:	5d                   	pop    ebp
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00119fe:	55                   	push   ebp
c00119ff:	57                   	push   edi
c0011a00:	56                   	push   esi
c0011a01:	53                   	push   ebx
c0011a02:	83 ec 28             	sub    esp,0x28
c0011a05:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a09:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011a0d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011a11:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011a15:	c1 e6 08             	shl    esi,0x8
c0011a18:	01 c6                	add    esi,eax
c0011a1a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011a1e:	c1 e0 08             	shl    eax,0x8
c0011a21:	01 d0                	add    eax,edx
c0011a23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a2b:	0f af c6             	imul   eax,esi
c0011a2e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011a35:	50                   	push   eax
c0011a36:	e8 ac 83 ff ff       	call   c0009de7 <malloc>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	89 c7                	mov    edi,eax
c0011a40:	85 c0                	test   eax,eax
c0011a42:	75 10                	jne    c0011a54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011a44:	83 ec 0c             	sub    esp,0xc
c0011a47:	68 09 5d 02 c0       	push   0xc0025d09
c0011a4c:	e8 d8 37 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011a57:	ba 12 00 00 00       	mov    edx,0x12
c0011a5c:	84 c0                	test   al,al
c0011a5e:	74 11                	je     c0011a71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011a60:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011a64:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011a68:	c1 fa 03             	sar    edx,0x3
c0011a6b:	0f af d1             	imul   edx,ecx
c0011a6e:	83 c2 12             	add    edx,0x12
c0011a71:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011a75:	74 04                	je     c0011a7b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011a77:	85 f6                	test   esi,esi
c0011a79:	75 12                	jne    c0011a8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011a7b:	83 ec 0c             	sub    esp,0xc
c0011a7e:	68 19 5d 02 c0       	push   0xc0025d19
c0011a83:	e8 c1 b6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0011a88:	e9 b8 00 00 00       	jmp    c0011b45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011a8d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011a91:	80 f9 02             	cmp    cl,0x2
c0011a94:	0f 85 96 00 00 00    	jne    c0011b30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011a9a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011a9f:	75 0e                	jne    c0011aaf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011aa1:	84 c0                	test   al,al
c0011aa3:	75 0a                	jne    c0011aaf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011aa5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011aa8:	83 e8 18             	sub    eax,0x18
c0011aab:	a8 f7                	test   al,0xf7
c0011aad:	74 0a                	je     c0011ab9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	68 2e 5d 02 c0       	push   0xc0025d2e
c0011ab7:	eb 7f                	jmp    c0011b38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011ab9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ac1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011ac9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011acd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ad5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011ad9:	75 0c                	jne    c0011ae7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011adb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011ae0:	c1 e0 18             	shl    eax,0x18
c0011ae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ae7:	45                   	inc    ebp
c0011ae8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011aed:	c1 e1 10             	shl    ecx,0x10
c0011af0:	89 c8                	mov    eax,ecx
c0011af2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011af7:	c1 e1 08             	shl    ecx,0x8
c0011afa:	09 c1                	or     ecx,eax
c0011afc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011b00:	09 c1                	or     ecx,eax
c0011b02:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011b06:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011b0a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011b0e:	c1 f8 03             	sar    eax,0x3
c0011b11:	01 c2                	add    edx,eax
c0011b13:	89 e8                	mov    eax,ebp
c0011b15:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011b19:	39 c6                	cmp    esi,eax
c0011b1b:	7f b0                	jg     c0011acd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011b1d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b25:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011b28:	7e 22                	jle    c0011b4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011b2a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011b2e:	eb 99                	jmp    c0011ac9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011b30:	50                   	push   eax
c0011b31:	50                   	push   eax
c0011b32:	51                   	push   ecx
c0011b33:	68 3c 5d 02 c0       	push   0xc0025d3c
c0011b38:	e8 0c b6 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0011b3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b40:	e8 b2 82 ff ff       	call   c0009df7 <free>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	31 ff                	xor    edi,edi
c0011b4a:	eb 0f                	jmp    c0011b5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011b4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b50:	89 30                	mov    DWORD PTR [eax],esi
c0011b52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b56:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011b59:	89 30                	mov    DWORD PTR [eax],esi
c0011b5b:	83 c4 1c             	add    esp,0x1c
c0011b5e:	89 f8                	mov    eax,edi
c0011b60:	5b                   	pop    ebx
c0011b61:	5e                   	pop    esi
c0011b62:	5f                   	pop    edi
c0011b63:	5d                   	pop    ebp
c0011b64:	c3                   	ret    
c0011b65:	90                   	nop

c0011b66 <Video::putTGA(int, int, unsigned char*, int)>:
c0011b66:	55                   	push   ebp
c0011b67:	57                   	push   edi
c0011b68:	56                   	push   esi
c0011b69:	53                   	push   ebx
c0011b6a:	83 ec 28             	sub    esp,0x28
c0011b6d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011b71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b75:	50                   	push   eax
c0011b76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b7a:	50                   	push   eax
c0011b7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b83:	56                   	push   esi
c0011b84:	e8 75 fe ff ff       	call   c00119fe <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011b89:	83 c4 20             	add    esp,0x20
c0011b8c:	85 c0                	test   eax,eax
c0011b8e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b92:	74 35                	je     c0011bc9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b94:	89 c7                	mov    edi,eax
c0011b96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b9a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011b9e:	39 d8                	cmp    eax,ebx
c0011ba0:	7e 27                	jle    c0011bc9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011ba2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ba6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011baa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011bae:	39 e8                	cmp    eax,ebp
c0011bb0:	7e 14                	jle    c0011bc6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011bb2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011bb4:	83 c7 04             	add    edi,0x4
c0011bb7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011bba:	53                   	push   ebx
c0011bbb:	55                   	push   ebp
c0011bbc:	45                   	inc    ebp
c0011bbd:	56                   	push   esi
c0011bbe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	eb e0                	jmp    c0011ba6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011bc6:	43                   	inc    ebx
c0011bc7:	eb cd                	jmp    c0011b96 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011bc9:	83 c4 1c             	add    esp,0x1c
c0011bcc:	5b                   	pop    ebx
c0011bcd:	5e                   	pop    esi
c0011bce:	5f                   	pop    edi
c0011bcf:	5d                   	pop    ebp
c0011bd0:	c3                   	ret    
c0011bd1:	66 90                	xchg   ax,ax
c0011bd3:	90                   	nop

c0011bd4 <ACPI::close(int, int, void*)>:
c0011bd4:	83 ec 1c             	sub    esp,0x1c
c0011bd7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011bdf:	74 0b                	je     c0011bec <ACPI::close(int, int, void*)+0x18>
c0011be1:	b8 00 00 00 00       	mov    eax,0x0
c0011be6:	e9 99 00 00 00       	jmp    c0011c84 <ACPI::close(int, int, void*)+0xb0>
c0011beb:	90                   	nop
c0011bec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011bf1:	75 29                	jne    c0011c1c <ACPI::close(int, int, void*)+0x48>
c0011bf3:	a1 88 92 02 c0       	mov    eax,ds:0xc0029288
c0011bf8:	85 c0                	test   eax,eax
c0011bfa:	74 08                	je     c0011c04 <ACPI::close(int, int, void*)+0x30>
c0011bfc:	a1 88 92 02 c0       	mov    eax,ds:0xc0029288
c0011c01:	ff d0                	call   eax
c0011c03:	90                   	nop
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	68 98 5d 02 c0       	push   0xc0025d98
c0011c0c:	e8 18 36 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0011c11:	83 c4 10             	add    esp,0x10
c0011c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c19:	eb 69                	jmp    c0011c84 <ACPI::close(int, int, void*)+0xb0>
c0011c1b:	90                   	nop
c0011c1c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011c21:	75 59                	jne    c0011c7c <ACPI::close(int, int, void*)+0xa8>
c0011c23:	a1 84 92 02 c0       	mov    eax,ds:0xc0029284
c0011c28:	85 c0                	test   eax,eax
c0011c2a:	74 08                	je     c0011c34 <ACPI::close(int, int, void*)+0x60>
c0011c2c:	a1 84 92 02 c0       	mov    eax,ds:0xc0029284
c0011c31:	ff d0                	call   eax
c0011c33:	90                   	nop
c0011c34:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011c39:	8d 76 00             	lea    esi,[esi+0x0]
c0011c3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011c41:	83 e0 02             	and    eax,0x2
c0011c44:	74 1e                	je     c0011c64 <ACPI::close(int, int, void*)+0x90>
c0011c46:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c51:	89 c2                	mov    edx,eax
c0011c53:	ec                   	in     al,dx
c0011c54:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c58:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011c5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c60:	eb da                	jmp    c0011c3c <ACPI::close(int, int, void*)+0x68>
c0011c62:	66 90                	xchg   ax,ax
c0011c64:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011c6b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011c70:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011c74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c78:	ee                   	out    dx,al
c0011c79:	8d 76 00             	lea    esi,[esi+0x0]
c0011c7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c81:	8d 76 00             	lea    esi,[esi+0x0]
c0011c84:	83 c4 1c             	add    esp,0x1c
c0011c87:	c3                   	ret    

c0011c88 <findRSDP()>:
c0011c88:	83 ec 1c             	sub    esp,0x1c
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	68 bb 5e 02 c0       	push   0xc0025ebb
c0011c93:	e8 a9 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011ca0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ca6:	83 e0 04             	and    eax,0x4
c0011ca9:	84 c0                	test   al,al
c0011cab:	75 0b                	jne    c0011cb8 <findRSDP()+0x30>
c0011cad:	b8 00 00 00 00       	mov    eax,0x0
c0011cb2:	e9 a1 00 00 00       	jmp    c0011d58 <findRSDP()+0xd0>
c0011cb7:	90                   	nop
c0011cb8:	a1 78 8c 02 c0       	mov    eax,ds:0xc0028c78
c0011cbd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011cc2:	7f 1c                	jg     c0011ce0 <findRSDP()+0x58>
c0011cc4:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011cc9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ccf:	83 e2 fb             	and    edx,0xfffffffb
c0011cd2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011cd8:	b8 00 00 00 00       	mov    eax,0x0
c0011cdd:	eb 79                	jmp    c0011d58 <findRSDP()+0xd0>
c0011cdf:	90                   	nop
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	68 cb 5e 02 c0       	push   0xc0025ecb
c0011ce8:	e8 54 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011cf8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011d00:	77 3e                	ja     c0011d40 <findRSDP()+0xb8>
c0011d02:	83 ec 04             	sub    esp,0x4
c0011d05:	6a 08                	push   0x8
c0011d07:	68 e4 5e 02 c0       	push   0xc0025ee4
c0011d0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d10:	e8 7b e8 fe ff       	call   c0000590 <memcmp>
c0011d15:	83 c4 10             	add    esp,0x10
c0011d18:	85 c0                	test   eax,eax
c0011d1a:	0f 94 c0             	sete   al
c0011d1d:	84 c0                	test   al,al
c0011d1f:	74 17                	je     c0011d38 <findRSDP()+0xb0>
c0011d21:	83 ec 0c             	sub    esp,0xc
c0011d24:	68 ed 5e 02 c0       	push   0xc0025eed
c0011d29:	e8 13 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011d2e:	83 c4 10             	add    esp,0x10
c0011d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d35:	eb 21                	jmp    c0011d58 <findRSDP()+0xd0>
c0011d37:	90                   	nop
c0011d38:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011d3d:	eb b9                	jmp    c0011cf8 <findRSDP()+0x70>
c0011d3f:	90                   	nop
c0011d40:	83 ec 0c             	sub    esp,0xc
c0011d43:	68 fb 5e 02 c0       	push   0xc0025efb
c0011d48:	e8 f4 80 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	b8 00 00 00 00       	mov    eax,0x0
c0011d55:	8d 76 00             	lea    esi,[esi+0x0]
c0011d58:	83 c4 1c             	add    esp,0x1c
c0011d5b:	c3                   	ret    

c0011d5c <loadACPITables(unsigned char*)>:
c0011d5c:	57                   	push   edi
c0011d5d:	56                   	push   esi
c0011d5e:	53                   	push   ebx
c0011d5f:	83 ec 60             	sub    esp,0x60
c0011d62:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011d67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d6d:	83 e0 04             	and    eax,0x4
c0011d70:	84 c0                	test   al,al
c0011d72:	0f 84 3c 02 00 00    	je     c0011fb4 <loadACPITables(unsigned char*)+0x258>
c0011d78:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c0011d7d:	84 c0                	test   al,al
c0011d7f:	74 77                	je     c0011df8 <loadACPITables(unsigned char*)+0x9c>
c0011d81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011d89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011d8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d90:	83 e8 24             	sub    eax,0x24
c0011d93:	c1 e8 03             	shr    eax,0x3
c0011d96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011d9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011da2:	66 90                	xchg   ax,ax
c0011da4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011da8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011dac:	0f 8d b6 00 00 00    	jge    c0011e68 <loadACPITables(unsigned char*)+0x10c>
c0011db2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011db6:	83 c0 24             	add    eax,0x24
c0011db9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011dbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011dc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011dc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011dc9:	c1 e0 03             	shl    eax,0x3
c0011dcc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011dd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011dd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd9:	89 c1                	mov    ecx,eax
c0011ddb:	a1 8c 92 02 c0       	mov    eax,ds:0xc002928c
c0011de0:	8d 50 01             	lea    edx,[eax+0x1]
c0011de3:	89 15 8c 92 02 c0    	mov    DWORD PTR ds:0xc002928c,edx
c0011de9:	89 ca                	mov    edx,ecx
c0011deb:	89 14 c5 a4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d5c],edx
c0011df2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011df6:	eb ac                	jmp    c0011da4 <loadACPITables(unsigned char*)+0x48>
c0011df8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011dfc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011e00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e07:	83 e8 24             	sub    eax,0x24
c0011e0a:	c1 e8 02             	shr    eax,0x2
c0011e0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011e11:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011e19:	8d 76 00             	lea    esi,[esi+0x0]
c0011e1c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e20:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011e24:	7d 42                	jge    c0011e68 <loadACPITables(unsigned char*)+0x10c>
c0011e26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011e2a:	83 c0 24             	add    eax,0x24
c0011e2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011e31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e35:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011e39:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e3d:	c1 e0 02             	shl    eax,0x2
c0011e40:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011e44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e48:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011e4a:	a1 8c 92 02 c0       	mov    eax,ds:0xc002928c
c0011e4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e52:	89 15 8c 92 02 c0    	mov    DWORD PTR ds:0xc002928c,edx
c0011e58:	89 ca                	mov    edx,ecx
c0011e5a:	89 14 c5 a4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d5c],edx
c0011e61:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011e65:	eb b5                	jmp    c0011e1c <loadACPITables(unsigned char*)+0xc0>
c0011e67:	90                   	nop
c0011e68:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011e70:	a1 8c 92 02 c0       	mov    eax,ds:0xc002928c
c0011e75:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011e79:	0f 8d 39 01 00 00    	jge    c0011fb8 <loadACPITables(unsigned char*)+0x25c>
c0011e7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e83:	8b 04 c5 a4 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d5c]
c0011e8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9a:	25 ff 0f 00 00       	and    eax,0xfff
c0011e9f:	89 c6                	mov    esi,eax
c0011ea1:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	6a 01                	push   0x1
c0011eac:	e8 f0 9e ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011eb8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ebe:	83 ec 0c             	sub    esp,0xc
c0011ec1:	6a 01                	push   0x1
c0011ec3:	6a 01                	push   0x1
c0011ec5:	50                   	push   eax
c0011ec6:	52                   	push   edx
c0011ec7:	53                   	push   ebx
c0011ec8:	e8 35 a8 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ecd:	83 c4 20             	add    esp,0x20
c0011ed0:	09 f0                	or     eax,esi
c0011ed2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ed6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011eda:	c1 e0 03             	shl    eax,0x3
c0011edd:	05 a0 92 02 c0       	add    eax,0xc00292a0
c0011ee2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011eee:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011ef6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011efa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011efe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011f0a:	89 c6                	mov    esi,eax
c0011f0c:	89 d7                	mov    edi,edx
c0011f0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f10:	89 c8                	mov    eax,ecx
c0011f12:	89 fa                	mov    edx,edi
c0011f14:	89 f3                	mov    ebx,esi
c0011f16:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011f1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f31:	05 00 10 00 00       	add    eax,0x1000
c0011f36:	c1 e8 0c             	shr    eax,0xc
c0011f39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f49:	25 ff 0f 00 00       	and    eax,0xfff
c0011f4e:	89 c6                	mov    esi,eax
c0011f50:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c0011f56:	83 ec 0c             	sub    esp,0xc
c0011f59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f5d:	e8 3f 9e ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011f62:	83 c4 10             	add    esp,0x10
c0011f65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f6f:	83 ec 0c             	sub    esp,0xc
c0011f72:	6a 01                	push   0x1
c0011f74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f78:	50                   	push   eax
c0011f79:	52                   	push   edx
c0011f7a:	53                   	push   ebx
c0011f7b:	e8 82 a7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f80:	83 c4 20             	add    esp,0x20
c0011f83:	09 f0                	or     eax,esi
c0011f85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	50                   	push   eax
c0011f91:	e8 ff a0 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fa1:	89 14 c5 a4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d5c],edx
c0011fa8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011fac:	e9 bf fe ff ff       	jmp    c0011e70 <loadACPITables(unsigned char*)+0x114>
c0011fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb4:	90                   	nop
c0011fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb8:	83 c4 60             	add    esp,0x60
c0011fbb:	5b                   	pop    ebx
c0011fbc:	5e                   	pop    esi
c0011fbd:	5f                   	pop    edi
c0011fbe:	c3                   	ret    
c0011fbf:	90                   	nop

c0011fc0 <findRSDT(unsigned char*)>:
c0011fc0:	57                   	push   edi
c0011fc1:	56                   	push   esi
c0011fc2:	53                   	push   ebx
c0011fc3:	83 ec 50             	sub    esp,0x50
c0011fc6:	83 ec 0c             	sub    esp,0xc
c0011fc9:	68 0f 5f 02 c0       	push   0xc0025f0f
c0011fce:	e8 6e 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0011fdb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011fe1:	83 e0 04             	and    eax,0x4
c0011fe4:	84 c0                	test   al,al
c0011fe6:	75 0c                	jne    c0011ff4 <findRSDT(unsigned char*)+0x34>
c0011fe8:	b8 00 00 00 00       	mov    eax,0x0
c0011fed:	e9 86 01 00 00       	jmp    c0012178 <findRSDT(unsigned char*)+0x1b8>
c0011ff2:	66 90                	xchg   ax,ax
c0011ff4:	83 ec 0c             	sub    esp,0xc
c0011ff7:	68 21 5f 02 c0       	push   0xc0025f21
c0011ffc:	e8 40 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	89 e0                	mov    eax,esp
c0012006:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001200a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001200e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012012:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001201a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001201e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012022:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001202a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001202e:	89 c6                	mov    esi,eax
c0012030:	89 d7                	mov    edi,edx
c0012032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012034:	89 c8                	mov    eax,ecx
c0012036:	89 fa                	mov    edx,edi
c0012038:	89 f3                	mov    ebx,esi
c001203a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001203e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0012042:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012046:	83 ec 0c             	sub    esp,0xc
c0012049:	68 33 5f 02 c0       	push   0xc0025f33
c001204e:	e8 ee 7d ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001205a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001205e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0012066:	83 ec 0c             	sub    esp,0xc
c0012069:	68 45 5f 02 c0       	push   0xc0025f45
c001206e:	e8 ce 7d ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001207a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001207e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012086:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001208a:	83 ec 04             	sub    esp,0x4
c001208d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012091:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012095:	68 bc 5d 02 c0       	push   0xc0025dbc
c001209a:	e8 aa b0 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001209f:	83 c4 10             	add    esp,0x10
c00120a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00120a6:	25 ff 0f 00 00       	and    eax,0xfff
c00120ab:	89 c6                	mov    esi,eax
c00120ad:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	6a 02                	push   0x2
c00120b8:	e8 e4 9c ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c00120bd:	83 c4 10             	add    esp,0x10
c00120c0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00120c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00120ca:	83 ec 0c             	sub    esp,0xc
c00120cd:	6a 01                	push   0x1
c00120cf:	6a 02                	push   0x2
c00120d1:	50                   	push   eax
c00120d2:	52                   	push   edx
c00120d3:	53                   	push   ebx
c00120d4:	e8 29 a6 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120d9:	83 c4 20             	add    esp,0x20
c00120dc:	09 f0                	or     eax,esi
c00120de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00120e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120e6:	25 ff 0f 00 00       	and    eax,0xfff
c00120eb:	89 c6                	mov    esi,eax
c00120ed:	8b 1d 74 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d74
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	6a 02                	push   0x2
c00120f8:	e8 a4 9c ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c00120fd:	83 c4 10             	add    esp,0x10
c0012100:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012104:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	6a 01                	push   0x1
c001210f:	6a 02                	push   0x2
c0012111:	50                   	push   eax
c0012112:	52                   	push   edx
c0012113:	53                   	push   ebx
c0012114:	e8 e9 a5 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012119:	83 c4 20             	add    esp,0x20
c001211c:	09 f0                	or     eax,esi
c001211e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0012122:	83 ec 04             	sub    esp,0x4
c0012125:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012129:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001212d:	68 dc 5d 02 c0       	push   0xc0025ddc
c0012132:	e8 12 b0 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0012137:	83 c4 10             	add    esp,0x10
c001213a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001213f:	75 13                	jne    c0012154 <findRSDT(unsigned char*)+0x194>
c0012141:	c6 05 a0 94 02 c0 00 	mov    BYTE PTR ds:0xc00294a0,0x0
c0012148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001214c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012150:	eb 22                	jmp    c0012174 <findRSDT(unsigned char*)+0x1b4>
c0012152:	66 90                	xchg   ax,ax
c0012154:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0012159:	75 11                	jne    c001216c <findRSDT(unsigned char*)+0x1ac>
c001215b:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c0012162:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012166:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001216a:	eb 08                	jmp    c0012174 <findRSDT(unsigned char*)+0x1b4>
c001216c:	b8 00 00 00 00       	mov    eax,0x0
c0012171:	eb 05                	jmp    c0012178 <findRSDT(unsigned char*)+0x1b8>
c0012173:	90                   	nop
c0012174:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012178:	83 c4 50             	add    esp,0x50
c001217b:	5b                   	pop    ebx
c001217c:	5e                   	pop    esi
c001217d:	5f                   	pop    edi
c001217e:	c3                   	ret    
c001217f:	90                   	nop

c0012180 <findDataTable(unsigned char*, char*)>:
c0012180:	83 ec 1c             	sub    esp,0x1c
c0012183:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0012188:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001218e:	83 e0 04             	and    eax,0x4
c0012191:	84 c0                	test   al,al
c0012193:	75 07                	jne    c001219c <findDataTable(unsigned char*, char*)+0x1c>
c0012195:	b8 00 00 00 00       	mov    eax,0x0
c001219a:	eb 58                	jmp    c00121f4 <findDataTable(unsigned char*, char*)+0x74>
c001219c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00121a4:	a1 8c 92 02 c0       	mov    eax,ds:0xc002928c
c00121a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00121ad:	7d 3d                	jge    c00121ec <findDataTable(unsigned char*, char*)+0x6c>
c00121af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b3:	c1 e0 03             	shl    eax,0x3
c00121b6:	05 a0 92 02 c0       	add    eax,0xc00292a0
c00121bb:	83 ec 04             	sub    esp,0x4
c00121be:	6a 04                	push   0x4
c00121c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00121c4:	50                   	push   eax
c00121c5:	e8 c6 e3 fe ff       	call   c0000590 <memcmp>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	85 c0                	test   eax,eax
c00121cf:	0f 94 c0             	sete   al
c00121d2:	84 c0                	test   al,al
c00121d4:	74 0e                	je     c00121e4 <findDataTable(unsigned char*, char*)+0x64>
c00121d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121da:	8b 04 c5 a4 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d5c]
c00121e1:	eb 11                	jmp    c00121f4 <findDataTable(unsigned char*, char*)+0x74>
c00121e3:	90                   	nop
c00121e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00121e8:	eb ba                	jmp    c00121a4 <findDataTable(unsigned char*, char*)+0x24>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	b8 00 00 00 00       	mov    eax,0x0
c00121f1:	8d 76 00             	lea    esi,[esi+0x0]
c00121f4:	83 c4 1c             	add    esp,0x1c
c00121f7:	c3                   	ret    

c00121f8 <scanMADT()>:
c00121f8:	53                   	push   ebx
c00121f9:	83 ec 38             	sub    esp,0x38
c00121fc:	83 ec 0c             	sub    esp,0xc
c00121ff:	68 57 5f 02 c0       	push   0xc0025f57
c0012204:	e8 38 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012211:	25 00 04 00 00       	and    eax,0x400
c0012216:	74 14                	je     c001222c <scanMADT()+0x34>
c0012218:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001221d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012223:	83 e2 fb             	and    edx,0xfffffffb
c0012226:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001222c:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0012231:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012237:	83 e0 04             	and    eax,0x4
c001223a:	84 c0                	test   al,al
c001223c:	0f 84 82 04 00 00    	je     c00126c4 <scanMADT()+0x4cc>
c0012242:	83 ec 0c             	sub    esp,0xc
c0012245:	68 64 5f 02 c0       	push   0xc0025f64
c001224a:	e8 f2 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001224f:	83 c4 10             	add    esp,0x10
c0012252:	e8 31 fa ff ff       	call   c0011c88 <findRSDP()>
c0012257:	a3 ac 94 02 c0       	mov    ds:0xc00294ac,eax
c001225c:	a1 ac 94 02 c0       	mov    eax,ds:0xc00294ac
c0012261:	85 c0                	test   eax,eax
c0012263:	75 1b                	jne    c0012280 <scanMADT()+0x88>
c0012265:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001226a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012270:	83 e2 fb             	and    edx,0xfffffffb
c0012273:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012279:	e9 4e 04 00 00       	jmp    c00126cc <scanMADT()+0x4d4>
c001227e:	66 90                	xchg   ax,ax
c0012280:	83 ec 0c             	sub    esp,0xc
c0012283:	68 76 5f 02 c0       	push   0xc0025f76
c0012288:	e8 b4 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	a1 ac 94 02 c0       	mov    eax,ds:0xc00294ac
c0012295:	83 ec 0c             	sub    esp,0xc
c0012298:	50                   	push   eax
c0012299:	e8 22 fd ff ff       	call   c0011fc0 <findRSDT(unsigned char*)>
c001229e:	83 c4 10             	add    esp,0x10
c00122a1:	a3 a8 94 02 c0       	mov    ds:0xc00294a8,eax
c00122a6:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c00122ab:	85 c0                	test   eax,eax
c00122ad:	75 19                	jne    c00122c8 <scanMADT()+0xd0>
c00122af:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00122b4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00122ba:	83 e2 fb             	and    edx,0xfffffffb
c00122bd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00122c3:	e9 04 04 00 00       	jmp    c00126cc <scanMADT()+0x4d4>
c00122c8:	83 ec 0c             	sub    esp,0xc
c00122cb:	68 86 5f 02 c0       	push   0xc0025f86
c00122d0:	e8 6c 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c00122dd:	83 ec 0c             	sub    esp,0xc
c00122e0:	50                   	push   eax
c00122e1:	e8 76 fa ff ff       	call   c0011d5c <loadACPITables(unsigned char*)>
c00122e6:	83 c4 10             	add    esp,0x10
c00122e9:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c00122ee:	83 ec 08             	sub    esp,0x8
c00122f1:	68 9e 5f 02 c0       	push   0xc0025f9e
c00122f6:	50                   	push   eax
c00122f7:	e8 84 fe ff ff       	call   c0012180 <findDataTable(unsigned char*, char*)>
c00122fc:	83 c4 10             	add    esp,0x10
c00122ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012303:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012308:	75 1a                	jne    c0012324 <scanMADT()+0x12c>
c001230a:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001230f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012315:	83 e2 fe             	and    edx,0xfffffffe
c0012318:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001231e:	e9 a9 03 00 00       	jmp    c00126cc <scanMADT()+0x4d4>
c0012323:	90                   	nop
c0012324:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001232c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012330:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012333:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0012337:	0f 87 8f 03 00 00    	ja     c00126cc <scanMADT()+0x4d4>
c001233d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012345:	0f 87 81 03 00 00    	ja     c00126cc <scanMADT()+0x4d4>
c001234b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001234f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012357:	8d 50 01             	lea    edx,[eax+0x1]
c001235a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001235e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012362:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012366:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001236a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001236e:	8d 50 01             	lea    edx,[eax+0x1]
c0012371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012375:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012379:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001237d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012381:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012386:	0f 86 3c 03 00 00    	jbe    c00126c8 <scanMADT()+0x4d0>
c001238c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012391:	75 59                	jne    c00123ec <scanMADT()+0x1f4>
c0012393:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012397:	8d 50 01             	lea    edx,[eax+0x1]
c001239a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001239e:	8a 15 a0 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296a0
c00123a4:	0f b6 d2             	movzx  edx,dl
c00123a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00123ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00123af:	88 82 e0 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6920],al
c00123b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b9:	8d 50 01             	lea    edx,[eax+0x1]
c00123bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123c0:	8a 15 a0 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296a0
c00123c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123c9:	88 0d a0 96 02 c0    	mov    BYTE PTR ds:0xc00296a0,cl
c00123cf:	0f b6 d2             	movzx  edx,dl
c00123d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00123d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00123da:	88 82 c0 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6940],al
c00123e0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00123e5:	e9 c6 02 00 00       	jmp    c00126b0 <scanMADT()+0x4b8>
c00123ea:	66 90                	xchg   ax,ax
c00123ec:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00123f1:	0f 85 15 01 00 00    	jne    c001250c <scanMADT()+0x314>
c00123f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123fb:	8d 50 01             	lea    edx,[eax+0x1]
c00123fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012402:	8a 15 60 95 02 c0    	mov    dl,BYTE PTR ds:0xc0029560
c0012408:	0f b6 d2             	movzx  edx,dl
c001240b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001240f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012413:	88 82 80 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6a80],al
c0012419:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001241d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012421:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012425:	01 d0                	add    eax,edx
c0012427:	83 c0 2c             	add    eax,0x2c
c001242a:	8a 00                	mov    al,BYTE PTR [eax]
c001242c:	0f b6 d0             	movzx  edx,al
c001242f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012433:	8d 48 01             	lea    ecx,[eax+0x1]
c0012436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001243a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001243e:	0f b6 c0             	movzx  eax,al
c0012441:	c1 e0 08             	shl    eax,0x8
c0012444:	89 d1                	mov    ecx,edx
c0012446:	09 c1                	or     ecx,eax
c0012448:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001244c:	8d 50 02             	lea    edx,[eax+0x2]
c001244f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012453:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012457:	0f b6 c0             	movzx  eax,al
c001245a:	c1 e0 10             	shl    eax,0x10
c001245d:	09 c1                	or     ecx,eax
c001245f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012463:	8d 50 03             	lea    edx,[eax+0x3]
c0012466:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001246a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001246e:	0f b6 c0             	movzx  eax,al
c0012471:	c1 e0 18             	shl    eax,0x18
c0012474:	09 c1                	or     ecx,eax
c0012476:	89 ca                	mov    edx,ecx
c0012478:	a0 60 95 02 c0       	mov    al,ds:0xc0029560
c001247d:	0f b6 c0             	movzx  eax,al
c0012480:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c0012487:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001248c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012490:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012494:	01 d0                	add    eax,edx
c0012496:	83 c0 2c             	add    eax,0x2c
c0012499:	8a 00                	mov    al,BYTE PTR [eax]
c001249b:	0f b6 d0             	movzx  edx,al
c001249e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00124a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00124ad:	0f b6 c0             	movzx  eax,al
c00124b0:	c1 e0 08             	shl    eax,0x8
c00124b3:	89 d1                	mov    ecx,edx
c00124b5:	09 c1                	or     ecx,eax
c00124b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124bb:	8d 50 02             	lea    edx,[eax+0x2]
c00124be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00124c6:	0f b6 c0             	movzx  eax,al
c00124c9:	c1 e0 10             	shl    eax,0x10
c00124cc:	09 c1                	or     ecx,eax
c00124ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124d2:	8d 50 03             	lea    edx,[eax+0x3]
c00124d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124d9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00124dd:	0f b6 c0             	movzx  eax,al
c00124e0:	c1 e0 18             	shl    eax,0x18
c00124e3:	09 c1                	or     ecx,eax
c00124e5:	89 ca                	mov    edx,ecx
c00124e7:	a0 60 95 02 c0       	mov    al,ds:0xc0029560
c00124ec:	0f b6 c0             	movzx  eax,al
c00124ef:	89 14 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],edx
c00124f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00124fb:	a0 60 95 02 c0       	mov    al,ds:0xc0029560
c0012500:	40                   	inc    eax
c0012501:	a2 60 95 02 c0       	mov    ds:0xc0029560,al
c0012506:	e9 a5 01 00 00       	jmp    c00126b0 <scanMADT()+0x4b8>
c001250b:	90                   	nop
c001250c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012511:	0f 85 e9 00 00 00    	jne    c0012600 <scanMADT()+0x408>
c0012517:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001251b:	8d 50 01             	lea    edx,[eax+0x1]
c001251e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012522:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012526:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001252a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001252e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012532:	8d 50 01             	lea    edx,[eax+0x1]
c0012535:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012539:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001253d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012541:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012549:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001254d:	01 d0                	add    eax,edx
c001254f:	83 c0 2c             	add    eax,0x2c
c0012552:	8a 00                	mov    al,BYTE PTR [eax]
c0012554:	0f b6 d0             	movzx  edx,al
c0012557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001255b:	8d 48 01             	lea    ecx,[eax+0x1]
c001255e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012562:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012566:	0f b6 c0             	movzx  eax,al
c0012569:	c1 e0 08             	shl    eax,0x8
c001256c:	89 d1                	mov    ecx,edx
c001256e:	09 c1                	or     ecx,eax
c0012570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012574:	8d 50 02             	lea    edx,[eax+0x2]
c0012577:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001257b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001257f:	0f b6 c0             	movzx  eax,al
c0012582:	c1 e0 10             	shl    eax,0x10
c0012585:	09 c1                	or     ecx,eax
c0012587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001258b:	8d 50 03             	lea    edx,[eax+0x3]
c001258e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012592:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012596:	0f b6 c0             	movzx  eax,al
c0012599:	c1 e0 18             	shl    eax,0x18
c001259c:	09 c8                	or     eax,ecx
c001259e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125a2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00125a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125af:	01 d0                	add    eax,edx
c00125b1:	83 c0 2c             	add    eax,0x2c
c00125b4:	8a 00                	mov    al,BYTE PTR [eax]
c00125b6:	0f b6 c0             	movzx  eax,al
c00125b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00125bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00125c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125c4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00125c8:	0f b6 d2             	movzx  edx,dl
c00125cb:	c1 e2 08             	shl    edx,0x8
c00125ce:	09 d0                	or     eax,edx
c00125d0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00125d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00125da:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00125df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00125e3:	88 90 40 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7cc0],dl
c00125e9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00125ee:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125f3:	66 89 84 12 40 95 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6ac0],ax
c00125fb:	e9 b0 00 00 00       	jmp    c00126b0 <scanMADT()+0x4b8>
c0012600:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012605:	0f 85 99 00 00 00    	jne    c00126a4 <scanMADT()+0x4ac>
c001260b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001260f:	8d 50 01             	lea    edx,[eax+0x1]
c0012612:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001261a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001261e:	0f b6 c0             	movzx  eax,al
c0012621:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012625:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012629:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262d:	01 d0                	add    eax,edx
c001262f:	83 c0 2c             	add    eax,0x2c
c0012632:	8a 00                	mov    al,BYTE PTR [eax]
c0012634:	0f b6 d0             	movzx  edx,al
c0012637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001263b:	8d 48 01             	lea    ecx,[eax+0x1]
c001263e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012642:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012646:	0f b6 c0             	movzx  eax,al
c0012649:	c1 e0 08             	shl    eax,0x8
c001264c:	09 d0                	or     eax,edx
c001264e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012652:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001265b:	8d 50 01             	lea    edx,[eax+0x1]
c001265e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012666:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001266a:	0f b6 c0             	movzx  eax,al
c001266d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012675:	c1 e0 08             	shl    eax,0x8
c0012678:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001267c:	89 c1                	mov    ecx,eax
c001267e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012682:	c1 e0 18             	shl    eax,0x18
c0012685:	89 c3                	mov    ebx,eax
c0012687:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c001268c:	8d 50 01             	lea    edx,[eax+0x1]
c001268f:	89 15 b0 94 02 c0    	mov    DWORD PTR ds:0xc00294b0,edx
c0012695:	09 d9                	or     ecx,ebx
c0012697:	89 ca                	mov    edx,ecx
c0012699:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c00126a0:	eb 0e                	jmp    c00126b0 <scanMADT()+0x4b8>
c00126a2:	66 90                	xchg   ax,ax
c00126a4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00126a9:	75 05                	jne    c00126b0 <scanMADT()+0x4b8>
c00126ab:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00126b0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00126b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126b9:	01 d0                	add    eax,edx
c00126bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00126bf:	e9 68 fc ff ff       	jmp    c001232c <scanMADT()+0x134>
c00126c4:	90                   	nop
c00126c5:	eb 05                	jmp    c00126cc <scanMADT()+0x4d4>
c00126c7:	90                   	nop
c00126c8:	90                   	nop
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]
c00126cc:	83 c4 38             	add    esp,0x38
c00126cf:	5b                   	pop    ebx
c00126d0:	c3                   	ret    
c00126d1:	90                   	nop
c00126d2:	66 90                	xchg   ax,ax

c00126d4 <ACPI::ACPI()>:
c00126d4:	83 ec 0c             	sub    esp,0xc
c00126d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126db:	83 ec 08             	sub    esp,0x8
c00126de:	68 a3 5f 02 c0       	push   0xc0025fa3
c00126e3:	50                   	push   eax
c00126e4:	e8 d5 c1 ff ff       	call   c000e8be <Device::Device(char const*)>
c00126e9:	83 c4 10             	add    esp,0x10
c00126ec:	ba 64 61 02 c0       	mov    edx,0xc0026164
c00126f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f5:	89 10                	mov    DWORD PTR [eax],edx
c00126f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126fb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012706:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012714:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	68 a8 5f 02 c0       	push   0xc0025fa8
c0012726:	e8 16 77 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	e8 c5 fa ff ff       	call   c00121f8 <scanMADT()>
c0012733:	90                   	nop
c0012734:	83 c4 0c             	add    esp,0xc
c0012737:	c3                   	ret    

c0012738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012738:	83 ec 2c             	sub    esp,0x2c
c001273b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001273f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012743:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012747:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001274b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012750:	88 d0                	mov    al,dl
c0012752:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012756:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001275b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012763:	90                   	nop
c0012764:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012768:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001276e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012772:	0f 8d 9c 00 00 00    	jge    c0012814 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012778:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001277c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012780:	83 c2 2a             	add    edx,0x2a
c0012783:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012787:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001278c:	75 7a                	jne    c0012808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001278e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012792:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012796:	83 c2 2a             	add    edx,0x2a
c0012799:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001279d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00127a1:	75 65                	jne    c0012808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00127a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127a8:	74 3a                	je     c00127e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00127aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127b2:	83 c2 2a             	add    edx,0x2a
c00127b5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00127b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127c0:	39 c2                	cmp    edx,eax
c00127c2:	74 10                	je     c00127d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00127c4:	83 ec 0c             	sub    esp,0xc
c00127c7:	68 fc 5d 02 c0       	push   0xc0025dfc
c00127cc:	e8 58 2a 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00127d1:	83 c4 10             	add    esp,0x10
c00127d4:	83 ec 0c             	sub    esp,0xc
c00127d7:	68 b6 5f 02 c0       	push   0xc0025fb6
c00127dc:	e8 48 2a 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00127e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127f0:	83 c2 2a             	add    edx,0x2a
c00127f3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00127f7:	8b 02                	mov    eax,DWORD PTR [edx]
c00127f9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00127fc:	89 01                	mov    DWORD PTR [ecx],eax
c00127fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012801:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012806:	66 90                	xchg   ax,ax
c0012808:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001280c:	e9 53 ff ff ff       	jmp    c0012764 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012811:	8d 76 00             	lea    esi,[esi+0x0]
c0012814:	90                   	nop
c0012815:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012819:	83 c4 2c             	add    esp,0x2c
c001281c:	c2 04 00             	ret    0x4
c001281f:	90                   	nop

c0012820 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012820:	83 ec 1c             	sub    esp,0x1c
c0012823:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012827:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001282b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001282f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012834:	88 c8                	mov    al,cl
c0012836:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001283a:	88 d0                	mov    al,dl
c001283c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012844:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001284a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001284e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012851:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012855:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001285d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012863:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012867:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001286a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001286e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012877:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001287d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012881:	8d 48 01             	lea    ecx,[eax+0x1]
c0012884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012888:	83 c2 2a             	add    edx,0x2a
c001288b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001288f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012893:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00128a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00128a4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00128a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128ac:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00128b2:	8d 50 01             	lea    edx,[eax+0x1]
c00128b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128b9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00128bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128c3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00128c9:	3d 00 02 00 00       	cmp    eax,0x200
c00128ce:	75 10                	jne    c00128e0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00128d0:	83 ec 0c             	sub    esp,0xc
c00128d3:	68 c5 5f 02 c0       	push   0xc0025fc5
c00128d8:	e8 4c 29 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	90                   	nop
c00128e1:	83 c4 1c             	add    esp,0x1c
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop
c00128e6:	66 90                	xchg   ax,ax

c00128e8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00128e8:	b8 00 00 00 00       	mov    eax,0x0
c00128ed:	c3                   	ret    
c00128ee:	66 90                	xchg   ax,ax

c00128f0 <ACPI::detectPCI()>:
c00128f0:	53                   	push   ebx
c00128f1:	83 ec 68             	sub    esp,0x68
c00128f4:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00128f9:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00128fe:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0012903:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012909:	83 e0 04             	and    eax,0x4
c001290c:	84 c0                	test   al,al
c001290e:	74 2c                	je     c001293c <ACPI::detectPCI()+0x4c>
c0012910:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c0012915:	83 ec 08             	sub    esp,0x8
c0012918:	68 e2 5f 02 c0       	push   0xc0025fe2
c001291d:	50                   	push   eax
c001291e:	e8 5d f8 ff ff       	call   c0012180 <findDataTable(unsigned char*, char*)>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001292a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c001292f:	74 0b                	je     c001293c <ACPI::detectPCI()+0x4c>
c0012931:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012936:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001293b:	90                   	nop
c001293c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012944:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012948:	8a 00                	mov    al,BYTE PTR [eax]
c001294a:	3c 01                	cmp    al,0x1
c001294c:	75 0e                	jne    c001295c <ACPI::detectPCI()+0x6c>
c001294e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012953:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012958:	eb 2a                	jmp    c0012984 <ACPI::detectPCI()+0x94>
c001295a:	66 90                	xchg   ax,ax
c001295c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012960:	8a 00                	mov    al,BYTE PTR [eax]
c0012962:	3c 02                	cmp    al,0x2
c0012964:	75 1e                	jne    c0012984 <ACPI::detectPCI()+0x94>
c0012966:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001296b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012970:	74 12                	je     c0012984 <ACPI::detectPCI()+0x94>
c0012972:	83 ec 0c             	sub    esp,0xc
c0012975:	68 2c 5e 02 c0       	push   0xc0025e2c
c001297a:	e8 aa 28 00 00       	call   c0015229 <Krnl::panic(char const*)>
c001297f:	83 c4 10             	add    esp,0x10
c0012982:	66 90                	xchg   ax,ax
c0012984:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012988:	83 f0 01             	xor    eax,0x1
c001298b:	84 c0                	test   al,al
c001298d:	74 41                	je     c00129d0 <ACPI::detectPCI()+0xe0>
c001298f:	e8 bc d7 fe ff       	call   c0000150 <manualPCIProbe>
c0012994:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012998:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001299d:	75 0d                	jne    c00129ac <ACPI::detectPCI()+0xbc>
c001299f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00129a4:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00129a9:	eb 25                	jmp    c00129d0 <ACPI::detectPCI()+0xe0>
c00129ab:	90                   	nop
c00129ac:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00129b1:	75 1d                	jne    c00129d0 <ACPI::detectPCI()+0xe0>
c00129b3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00129b8:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00129bd:	74 11                	je     c00129d0 <ACPI::detectPCI()+0xe0>
c00129bf:	83 ec 0c             	sub    esp,0xc
c00129c2:	68 2c 5e 02 c0       	push   0xc0025e2c
c00129c7:	e8 5d 28 00 00       	call   c0015229 <Krnl::panic(char const*)>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	90                   	nop
c00129d0:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00129d5:	0f 84 49 03 00 00    	je     c0012d24 <ACPI::detectPCI()+0x434>
c00129db:	83 ec 0c             	sub    esp,0xc
c00129de:	68 e7 5f 02 c0       	push   0xc0025fe7
c00129e3:	e8 59 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00129f0:	0f 84 8e 00 00 00    	je     c0012a84 <ACPI::detectPCI()+0x194>
c00129f6:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c00129fb:	25 00 08 00 00       	and    eax,0x800
c0012a00:	0f 84 16 01 00 00    	je     c0012b1c <ACPI::detectPCI()+0x22c>
c0012a06:	83 ec 0c             	sub    esp,0xc
c0012a09:	68 54 5e 02 c0       	push   0xc0025e54
c0012a0e:	e8 2e 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012a1b:	25 80 00 00 00       	and    eax,0x80
c0012a20:	0f 85 f6 00 00 00    	jne    c0012b1c <ACPI::detectPCI()+0x22c>
c0012a26:	66 90                	xchg   ax,ax
c0012a28:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012a2f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012a34:	89 c2                	mov    edx,eax
c0012a36:	ec                   	in     al,dx
c0012a37:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012a3b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012a3f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012a43:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012a48:	74 0a                	je     c0012a54 <ACPI::detectPCI()+0x164>
c0012a4a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012a4f:	74 03                	je     c0012a54 <ACPI::detectPCI()+0x164>
c0012a51:	eb d5                	jmp    c0012a28 <ACPI::detectPCI()+0x138>
c0012a53:	90                   	nop
c0012a54:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012a5b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012a60:	89 c2                	mov    edx,eax
c0012a62:	ec                   	in     al,dx
c0012a63:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012a67:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012a6b:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012a6f:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012a74:	74 de                	je     c0012a54 <ACPI::detectPCI()+0x164>
c0012a76:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012a7b:	0f 85 93 00 00 00    	jne    c0012b14 <ACPI::detectPCI()+0x224>
c0012a81:	eb d1                	jmp    c0012a54 <ACPI::detectPCI()+0x164>
c0012a83:	90                   	nop
c0012a84:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012a88:	83 f0 01             	xor    eax,0x1
c0012a8b:	84 c0                	test   al,al
c0012a8d:	0f 84 89 00 00 00    	je     c0012b1c <ACPI::detectPCI()+0x22c>
c0012a93:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012a98:	25 00 08 00 00       	and    eax,0x800
c0012a9d:	74 7d                	je     c0012b1c <ACPI::detectPCI()+0x22c>
c0012a9f:	83 ec 0c             	sub    esp,0xc
c0012aa2:	68 78 5e 02 c0       	push   0xc0025e78
c0012aa7:	e8 95 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012ab4:	25 80 00 00 00       	and    eax,0x80
c0012ab9:	75 61                	jne    c0012b1c <ACPI::detectPCI()+0x22c>
c0012abb:	90                   	nop
c0012abc:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012ac3:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012ac8:	89 c2                	mov    edx,eax
c0012aca:	ec                   	in     al,dx
c0012acb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012acf:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012ad3:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012ad7:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012adc:	74 0a                	je     c0012ae8 <ACPI::detectPCI()+0x1f8>
c0012ade:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012ae3:	74 03                	je     c0012ae8 <ACPI::detectPCI()+0x1f8>
c0012ae5:	eb d5                	jmp    c0012abc <ACPI::detectPCI()+0x1cc>
c0012ae7:	90                   	nop
c0012ae8:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012aef:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012af4:	89 c2                	mov    edx,eax
c0012af6:	ec                   	in     al,dx
c0012af7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012afb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012aff:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012b03:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012b08:	74 de                	je     c0012ae8 <ACPI::detectPCI()+0x1f8>
c0012b0a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012b0f:	75 07                	jne    c0012b18 <ACPI::detectPCI()+0x228>
c0012b11:	eb d5                	jmp    c0012ae8 <ACPI::detectPCI()+0x1f8>
c0012b13:	90                   	nop
c0012b14:	90                   	nop
c0012b15:	eb 05                	jmp    c0012b1c <ACPI::detectPCI()+0x22c>
c0012b17:	90                   	nop
c0012b18:	90                   	nop
c0012b19:	8d 76 00             	lea    esi,[esi+0x0]
c0012b1c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012b24:	83 ec 0c             	sub    esp,0xc
c0012b27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012b2b:	e8 b7 72 ff ff       	call   c0009de7 <malloc>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	89 c3                	mov    ebx,eax
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	53                   	push   ebx
c0012b39:	e8 ec b0 00 00       	call   c001dc2a <PCI::PCI()>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012b45:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012b4a:	25 00 08 00 00       	and    eax,0x800
c0012b4f:	74 7b                	je     c0012bcc <ACPI::detectPCI()+0x2dc>
c0012b51:	83 ec 0c             	sub    esp,0xc
c0012b54:	68 ff 5f 02 c0       	push   0xc0025fff
c0012b59:	e8 e3 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012b66:	25 80 00 00 00       	and    eax,0x80
c0012b6b:	75 5f                	jne    c0012bcc <ACPI::detectPCI()+0x2dc>
c0012b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b70:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012b77:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012b7c:	89 c2                	mov    edx,eax
c0012b7e:	ec                   	in     al,dx
c0012b7f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012b83:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012b87:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012b8b:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012b90:	74 0a                	je     c0012b9c <ACPI::detectPCI()+0x2ac>
c0012b92:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012b97:	74 03                	je     c0012b9c <ACPI::detectPCI()+0x2ac>
c0012b99:	eb d5                	jmp    c0012b70 <ACPI::detectPCI()+0x280>
c0012b9b:	90                   	nop
c0012b9c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012ba3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012ba8:	89 c2                	mov    edx,eax
c0012baa:	ec                   	in     al,dx
c0012bab:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012baf:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012bb3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012bb7:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012bbc:	74 de                	je     c0012b9c <ACPI::detectPCI()+0x2ac>
c0012bbe:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012bc3:	75 03                	jne    c0012bc8 <ACPI::detectPCI()+0x2d8>
c0012bc5:	eb d5                	jmp    c0012b9c <ACPI::detectPCI()+0x2ac>
c0012bc7:	90                   	nop
c0012bc8:	90                   	nop
c0012bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bcc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012bd0:	83 ec 08             	sub    esp,0x8
c0012bd3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012bd7:	50                   	push   eax
c0012bd8:	e8 dd ba ff ff       	call   c000e6ba <Device::addChild(Device*)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012be5:	25 00 08 00 00       	and    eax,0x800
c0012bea:	74 78                	je     c0012c64 <ACPI::detectPCI()+0x374>
c0012bec:	83 ec 0c             	sub    esp,0xc
c0012bef:	68 05 60 02 c0       	push   0xc0026005
c0012bf4:	e8 48 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012bf9:	83 c4 10             	add    esp,0x10
c0012bfc:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012c01:	25 80 00 00 00       	and    eax,0x80
c0012c06:	75 5c                	jne    c0012c64 <ACPI::detectPCI()+0x374>
c0012c08:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012c0f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012c14:	89 c2                	mov    edx,eax
c0012c16:	ec                   	in     al,dx
c0012c17:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012c1b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012c1f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012c23:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012c28:	74 0a                	je     c0012c34 <ACPI::detectPCI()+0x344>
c0012c2a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012c2f:	74 03                	je     c0012c34 <ACPI::detectPCI()+0x344>
c0012c31:	eb d5                	jmp    c0012c08 <ACPI::detectPCI()+0x318>
c0012c33:	90                   	nop
c0012c34:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012c40:	89 c2                	mov    edx,eax
c0012c42:	ec                   	in     al,dx
c0012c43:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012c47:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012c4b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012c4f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012c54:	74 de                	je     c0012c34 <ACPI::detectPCI()+0x344>
c0012c56:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012c5b:	75 03                	jne    c0012c60 <ACPI::detectPCI()+0x370>
c0012c5d:	eb d5                	jmp    c0012c34 <ACPI::detectPCI()+0x344>
c0012c5f:	90                   	nop
c0012c60:	90                   	nop
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6a:	83 c0 08             	add    eax,0x8
c0012c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012c74:	74 0a                	je     c0012c80 <ACPI::detectPCI()+0x390>
c0012c76:	ba 01 00 00 00       	mov    edx,0x1
c0012c7b:	eb 0b                	jmp    c0012c88 <ACPI::detectPCI()+0x398>
c0012c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c80:	ba 02 00 00 00       	mov    edx,0x2
c0012c85:	8d 76 00             	lea    esi,[esi+0x0]
c0012c88:	6a 00                	push   0x0
c0012c8a:	6a 00                	push   0x0
c0012c8c:	52                   	push   edx
c0012c8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012c91:	ff d0                	call   eax
c0012c93:	83 c4 10             	add    esp,0x10
c0012c96:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012c9b:	25 00 08 00 00       	and    eax,0x800
c0012ca0:	0f 84 26 01 00 00    	je     c0012dcc <ACPI::detectPCI()+0x4dc>
c0012ca6:	83 ec 0c             	sub    esp,0xc
c0012ca9:	68 0b 60 02 c0       	push   0xc002600b
c0012cae:	e8 8e 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0012cbb:	25 80 00 00 00       	and    eax,0x80
c0012cc0:	0f 85 06 01 00 00    	jne    c0012dcc <ACPI::detectPCI()+0x4dc>
c0012cc6:	66 90                	xchg   ax,ax
c0012cc8:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012ccf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cd4:	89 c2                	mov    edx,eax
c0012cd6:	ec                   	in     al,dx
c0012cd7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cdb:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012cdf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012ce3:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012ce8:	74 0a                	je     c0012cf4 <ACPI::detectPCI()+0x404>
c0012cea:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012cef:	74 03                	je     c0012cf4 <ACPI::detectPCI()+0x404>
c0012cf1:	eb d5                	jmp    c0012cc8 <ACPI::detectPCI()+0x3d8>
c0012cf3:	90                   	nop
c0012cf4:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012cfb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012d00:	89 c2                	mov    edx,eax
c0012d02:	ec                   	in     al,dx
c0012d03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012d07:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012d0b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012d0f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012d14:	74 de                	je     c0012cf4 <ACPI::detectPCI()+0x404>
c0012d16:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012d1b:	0f 85 a7 00 00 00    	jne    c0012dc8 <ACPI::detectPCI()+0x4d8>
c0012d21:	eb d1                	jmp    c0012cf4 <ACPI::detectPCI()+0x404>
c0012d23:	90                   	nop
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	68 11 60 02 c0       	push   0xc0026011
c0012d2c:	e8 18 a4 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	68 1c 60 02 c0       	push   0xc002601c
c0012d3c:	e8 00 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012d4c:	83 ec 0c             	sub    esp,0xc
c0012d4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d53:	e8 8f 70 ff ff       	call   c0009de7 <malloc>
c0012d58:	83 c4 10             	add    esp,0x10
c0012d5b:	89 c3                	mov    ebx,eax
c0012d5d:	83 ec 0c             	sub    esp,0xc
c0012d60:	53                   	push   ebx
c0012d61:	e8 2e c0 00 00       	call   c001ed94 <IDE::IDE()>
c0012d66:	83 c4 10             	add    esp,0x10
c0012d69:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012d6d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012d71:	83 ec 08             	sub    esp,0x8
c0012d74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012d78:	50                   	push   eax
c0012d79:	e8 3c b9 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d85:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d93:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012d9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012da0:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012da9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0012daf:	83 c0 08             	add    eax,0x8
c0012db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db4:	6a 00                	push   0x0
c0012db6:	6a 00                	push   0x0
c0012db8:	6a 00                	push   0x0
c0012dba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012dbe:	ff d0                	call   eax
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	eb 07                	jmp    c0012dcc <ACPI::detectPCI()+0x4dc>
c0012dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012dc8:	90                   	nop
c0012dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0012dcc:	90                   	nop
c0012dcd:	83 c4 68             	add    esp,0x68
c0012dd0:	5b                   	pop    ebx
c0012dd1:	c3                   	ret    
c0012dd2:	66 90                	xchg   ax,ax

c0012dd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012dd4:	83 ec 1c             	sub    esp,0x1c
c0012dd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ddb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012dde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012de2:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0012de7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012dec:	83 ec 08             	sub    esp,0x8
c0012def:	52                   	push   edx
c0012df0:	50                   	push   eax
c0012df1:	e8 3c 65 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012df6:	83 c4 10             	add    esp,0x10
c0012df9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012dfd:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0012e02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012e07:	83 ec 04             	sub    esp,0x4
c0012e0a:	6a 01                	push   0x1
c0012e0c:	52                   	push   edx
c0012e0d:	50                   	push   eax
c0012e0e:	e8 0b 67 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	90                   	nop
c0012e17:	83 c4 1c             	add    esp,0x1c
c0012e1a:	c3                   	ret    
c0012e1b:	90                   	nop

c0012e1c <ACPI::sleep()>:
c0012e1c:	83 ec 0c             	sub    esp,0xc
c0012e1f:	83 ec 0c             	sub    esp,0xc
c0012e22:	68 31 60 02 c0       	push   0xc0026031
c0012e27:	e8 1d a3 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0012e2c:	83 c4 10             	add    esp,0x10
c0012e2f:	a1 80 92 02 c0       	mov    eax,ds:0xc0029280
c0012e34:	85 c0                	test   eax,eax
c0012e36:	74 18                	je     c0012e50 <ACPI::sleep()+0x34>
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	68 3e 60 02 c0       	push   0xc002603e
c0012e40:	e8 04 a3 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	a1 80 92 02 c0       	mov    eax,ds:0xc0029280
c0012e4d:	ff d0                	call   eax
c0012e4f:	90                   	nop
c0012e50:	90                   	nop
c0012e51:	83 c4 0c             	add    esp,0xc
c0012e54:	c3                   	ret    
c0012e55:	90                   	nop
c0012e56:	66 90                	xchg   ax,ax

c0012e58 <ACPI::open(int, int, void*)>:
c0012e58:	57                   	push   edi
c0012e59:	56                   	push   esi
c0012e5a:	53                   	push   ebx
c0012e5b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012e61:	83 ec 0c             	sub    esp,0xc
c0012e64:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012e6b:	e8 80 fa ff ff       	call   c00128f0 <ACPI::detectPCI()>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	83 ec 0c             	sub    esp,0xc
c0012e76:	68 9c 5e 02 c0       	push   0xc0025e9c
c0012e7b:	e8 c1 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012e80:	83 c4 10             	add    esp,0x10
c0012e83:	83 ec 0c             	sub    esp,0xc
c0012e86:	68 58 60 02 c0       	push   0xc0026058
c0012e8b:	e8 97 4c 00 00       	call   c0017b27 <Thr::loadKernelSymbolTable(char const*)>
c0012e90:	83 c4 10             	add    esp,0x10
c0012e93:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012e9b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012ea6:	83 ec 0c             	sub    esp,0xc
c0012ea9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012eb0:	e8 32 6f ff ff       	call   c0009de7 <malloc>
c0012eb5:	83 c4 10             	add    esp,0x10
c0012eb8:	89 c3                	mov    ebx,eax
c0012eba:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c0012ebf:	83 ec 04             	sub    esp,0x4
c0012ec2:	50                   	push   eax
c0012ec3:	68 76 60 02 c0       	push   0xc0026076
c0012ec8:	53                   	push   ebx
c0012ec9:	e8 e6 a7 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a 01                	push   0x1
c0012edd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ee4:	e8 a5 a8 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0012ee9:	83 c4 10             	add    esp,0x10
c0012eec:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012ef3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012efb:	75 17                	jne    c0012f14 <ACPI::open(int, int, void*)+0xbc>
c0012efd:	83 ec 0c             	sub    esp,0xc
c0012f00:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012f07:	e8 e0 a8 ff ff       	call   c000d7ec <File::close()>
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	eb 0b                	jmp    c0012f1c <ACPI::open(int, int, void*)+0xc4>
c0012f11:	8d 76 00             	lea    esi,[esi+0x0]
c0012f14:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012f1c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012f24:	74 1e                	je     c0012f44 <ACPI::open(int, int, void*)+0xec>
c0012f26:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012f2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f2f:	83 c0 08             	add    eax,0x8
c0012f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012f3e:	ff d0                	call   eax
c0012f40:	83 c4 10             	add    esp,0x10
c0012f43:	90                   	nop
c0012f44:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012f4b:	83 f0 01             	xor    eax,0x1
c0012f4e:	84 c0                	test   al,al
c0012f50:	74 42                	je     c0012f94 <ACPI::open(int, int, void*)+0x13c>
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	68 94 60 02 c0       	push   0xc0026094
c0012f5a:	e8 e2 6e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	83 ec 04             	sub    esp,0x4
c0012f65:	6a 0c                	push   0xc
c0012f67:	68 af 60 02 c0       	push   0xc00260af
c0012f6c:	68 c0 60 02 c0       	push   0xc00260c0
c0012f71:	e8 1b 32 00 00       	call   c0016191 <Reg::readIntWithDefault(char*, char*, int)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012f80:	83 ec 0c             	sub    esp,0xc
c0012f83:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012f8a:	e8 1c 90 ff ff       	call   c000bfab <Virt::setupPageSwapping(int)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	66 90                	xchg   ax,ax
c0012f94:	83 ec 0c             	sub    esp,0xc
c0012f97:	68 06 46 02 c0       	push   0xc0024606
c0012f9c:	e8 a0 6e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c0012faa:	83 ec 08             	sub    esp,0x8
c0012fad:	6a 01                	push   0x1
c0012faf:	68 c7 60 02 c0       	push   0xc00260c7
c0012fb4:	e8 e5 55 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0012fb9:	83 c4 10             	add    esp,0x10
c0012fbc:	83 ec 08             	sub    esp,0x8
c0012fbf:	53                   	push   ebx
c0012fc0:	50                   	push   eax
c0012fc1:	e8 09 58 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012fd0:	83 ec 08             	sub    esp,0x8
c0012fd3:	6a 12                	push   0x12
c0012fd5:	50                   	push   eax
c0012fd6:	e8 63 ba ff ff       	call   c000ea3e <getDevicesOfType(DeviceType)>
c0012fdb:	83 c4 0c             	add    esp,0xc
c0012fde:	66 90                	xchg   ax,ax
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fea:	50                   	push   eax
c0012feb:	e8 fc 07 01 00       	call   c00237ec <LinkedList<Device>::isEmpty()>
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	83 f0 01             	xor    eax,0x1
c0012ff6:	84 c0                	test   al,al
c0012ff8:	0f 84 46 01 00 00    	je     c0013144 <ACPI::open(int, int, void*)+0x2ec>
c0012ffe:	83 ec 0c             	sub    esp,0xc
c0013001:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0013008:	50                   	push   eax
c0013009:	e8 fa 07 01 00       	call   c0023808 <LinkedList<Device>::getFirstElement()>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0013018:	83 ec 0c             	sub    esp,0xc
c001301b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0013022:	50                   	push   eax
c0013023:	e8 e8 07 01 00       	call   c0023810 <LinkedList<Device>::removeFirst()>
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0013032:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0013039:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0013040:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013044:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001304a:	ba 09 00 00 00       	mov    edx,0x9
c001304f:	fc                   	cld    
c0013050:	89 c7                	mov    edi,eax
c0013052:	89 de                	mov    esi,ebx
c0013054:	89 d1                	mov    ecx,edx
c0013056:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013058:	83 ec 08             	sub    esp,0x8
c001305b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001305f:	50                   	push   eax
c0013060:	83 ec 24             	sub    esp,0x24
c0013063:	89 e0                	mov    eax,esp
c0013065:	89 c3                	mov    ebx,eax
c0013067:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001306b:	ba 09 00 00 00       	mov    edx,0x9
c0013070:	89 df                	mov    edi,ebx
c0013072:	89 c6                	mov    esi,eax
c0013074:	89 d1                	mov    ecx,edx
c0013076:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013078:	e8 8b b0 00 00       	call   c001e108 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001307d:	83 c4 30             	add    esp,0x30
c0013080:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0013087:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001308f:	0f 84 4b ff ff ff    	je     c0012fe0 <ACPI::open(int, int, void*)+0x188>
c0013095:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00130a0:	83 ec 0c             	sub    esp,0xc
c00130a3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00130aa:	e8 38 6d ff ff       	call   c0009de7 <malloc>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	89 c3                	mov    ebx,eax
c00130b4:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c00130b9:	83 ec 04             	sub    esp,0x4
c00130bc:	50                   	push   eax
c00130bd:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130c4:	53                   	push   ebx
c00130c5:	e8 ea a5 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130de:	e8 19 a9 ff ff       	call   c000d9fc <File::exists()>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	84 c0                	test   al,al
c00130e8:	74 2a                	je     c0013114 <ACPI::open(int, int, void*)+0x2bc>
c00130ea:	83 ec 08             	sub    esp,0x8
c00130ed:	6a 01                	push   0x1
c00130ef:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00130f6:	e8 a3 54 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c00130fb:	83 c4 10             	add    esp,0x10
c00130fe:	83 ec 08             	sub    esp,0x8
c0013101:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013108:	50                   	push   eax
c0013109:	e8 c1 56 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	8d 76 00             	lea    esi,[esi+0x0]
c0013114:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001311c:	0f 84 be fe ff ff    	je     c0012fe0 <ACPI::open(int, int, void*)+0x188>
c0013122:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0013129:	8b 00                	mov    eax,DWORD PTR [eax]
c001312b:	83 c0 08             	add    eax,0x8
c001312e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001313a:	ff d0                	call   eax
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	e9 9c fe ff ff       	jmp    c0012fe0 <ACPI::open(int, int, void*)+0x188>
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001314e:	50                   	push   eax
c001314f:	e8 94 06 01 00       	call   c00237e8 <LinkedList<Device>::~LinkedList()>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c001315d:	83 ec 08             	sub    esp,0x8
c0013160:	6a 01                	push   0x1
c0013162:	68 e2 60 02 c0       	push   0xc00260e2
c0013167:	e8 32 54 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	83 ec 08             	sub    esp,0x8
c0013172:	53                   	push   ebx
c0013173:	50                   	push   eax
c0013174:	e8 56 56 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	8b 1d 48 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c48
c0013182:	83 ec 08             	sub    esp,0x8
c0013185:	6a 01                	push   0x1
c0013187:	68 ff 60 02 c0       	push   0xc00260ff
c001318c:	e8 0d 54 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	83 ec 08             	sub    esp,0x8
c0013197:	53                   	push   ebx
c0013198:	50                   	push   eax
c0013199:	e8 31 56 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00131a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00131ac:	83 e0 04             	and    eax,0x4
c00131af:	84 c0                	test   al,al
c00131b1:	0f 84 15 01 00 00    	je     c00132cc <ACPI::open(int, int, void*)+0x474>
c00131b7:	83 ec 0c             	sub    esp,0xc
c00131ba:	68 1c 61 02 c0       	push   0xc002611c
c00131bf:	e8 7d 6c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00131dc:	e8 06 6c ff ff       	call   c0009de7 <malloc>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	89 c3                	mov    ebx,eax
c00131e6:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c00131eb:	83 ec 04             	sub    esp,0x4
c00131ee:	50                   	push   eax
c00131ef:	68 39 61 02 c0       	push   0xc0026139
c00131f4:	53                   	push   ebx
c00131f5:	e8 ba a4 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0013204:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001320c:	74 1a                	je     c0013228 <ACPI::open(int, int, void*)+0x3d0>
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013218:	e8 df a7 ff ff       	call   c000d9fc <File::exists()>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	84 c0                	test   al,al
c0013222:	74 04                	je     c0013228 <ACPI::open(int, int, void*)+0x3d0>
c0013224:	b0 01                	mov    al,0x1
c0013226:	eb 04                	jmp    c001322c <ACPI::open(int, int, void*)+0x3d4>
c0013228:	b0 00                	mov    al,0x0
c001322a:	66 90                	xchg   ax,ax
c001322c:	84 c0                	test   al,al
c001322e:	74 28                	je     c0013258 <ACPI::open(int, int, void*)+0x400>
c0013230:	83 ec 08             	sub    esp,0x8
c0013233:	6a 01                	push   0x1
c0013235:	68 39 61 02 c0       	push   0xc0026139
c001323a:	e8 5f 53 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	83 ec 08             	sub    esp,0x8
c0013245:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001324c:	50                   	push   eax
c001324d:	e8 7d 55 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c0013252:	83 c4 10             	add    esp,0x10
c0013255:	8d 76 00             	lea    esi,[esi+0x0]
c0013258:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013260:	74 2a                	je     c001328c <ACPI::open(int, int, void*)+0x434>
c0013262:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001326a:	74 20                	je     c001328c <ACPI::open(int, int, void*)+0x434>
c001326c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0013273:	8b 00                	mov    eax,DWORD PTR [eax]
c0013275:	83 c0 08             	add    eax,0x8
c0013278:	8b 00                	mov    eax,DWORD PTR [eax]
c001327a:	83 ec 0c             	sub    esp,0xc
c001327d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013284:	ff d0                	call   eax
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	8d 76 00             	lea    esi,[esi+0x0]
c001328c:	a1 a8 94 02 c0       	mov    eax,ds:0xc00294a8
c0013291:	83 ec 08             	sub    esp,0x8
c0013294:	68 56 61 02 c0       	push   0xc0026156
c0013299:	50                   	push   eax
c001329a:	e8 e1 ee ff ff       	call   c0012180 <findDataTable(unsigned char*, char*)>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00132a9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00132b1:	74 19                	je     c00132cc <ACPI::open(int, int, void*)+0x474>
c00132b3:	83 ec 08             	sub    esp,0x8
c00132b6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00132bd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00132c4:	e8 0b fb ff ff       	call   c0012dd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00132c9:	83 c4 10             	add    esp,0x10
c00132cc:	b8 00 00 00 00       	mov    eax,0x0
c00132d1:	81 c4 70 01 00 00    	add    esp,0x170
c00132d7:	5b                   	pop    ebx
c00132d8:	5e                   	pop    esi
c00132d9:	5f                   	pop    edi
c00132da:	c3                   	ret    
c00132db:	90                   	nop

c00132dc <CPU::close(int, int, void*)>:
c00132dc:	31 c0                	xor    eax,eax
c00132de:	c3                   	ret    
c00132df:	90                   	nop

c00132e0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00132e0:	55                   	push   ebp
c00132e1:	57                   	push   edi
c00132e2:	56                   	push   esi
c00132e3:	53                   	push   ebx
c00132e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00132e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132ec:	89 ce                	mov    esi,ecx
c00132ee:	89 d5                	mov    ebp,edx
c00132f0:	80 f9 04             	cmp    cl,0x4
c00132f3:	75 28                	jne    c001331d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00132f5:	8d 42 f9             	lea    eax,[edx-0x7]
c00132f8:	3c 03                	cmp    al,0x3
c00132fa:	0f 86 63 01 00 00    	jbe    c0013463 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013300:	80 fa 03             	cmp    dl,0x3
c0013303:	0f 84 5a 01 00 00    	je     c0013463 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013309:	8d 7a f2             	lea    edi,[edx-0xe]
c001330c:	b8 10 85 02 c0       	mov    eax,0xc0028510
c0013311:	89 fb                	mov    ebx,edi
c0013313:	80 fb 01             	cmp    bl,0x1
c0013316:	77 4e                	ja     c0013366 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0013318:	e9 52 01 00 00       	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001331d:	80 f9 05             	cmp    cl,0x5
c0013320:	75 4d                	jne    c001336f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0013322:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0013327:	80 fa 03             	cmp    dl,0x3
c001332a:	0f 86 3f 01 00 00    	jbe    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013330:	8d 7a fa             	lea    edi,[edx-0x6]
c0013333:	b8 30 85 02 c0       	mov    eax,0xc0028530
c0013338:	89 fb                	mov    ebx,edi
c001333a:	80 fb 01             	cmp    bl,0x1
c001333d:	0f 86 2c 01 00 00    	jbe    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013343:	b8 40 85 02 c0       	mov    eax,0xc0028540
c0013348:	80 fa 08             	cmp    dl,0x8
c001334b:	0f 84 1e 01 00 00    	je     c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013351:	89 d7                	mov    edi,edx
c0013353:	b8 50 85 02 c0       	mov    eax,0xc0028550
c0013358:	83 e7 fb             	and    edi,0xfffffffb
c001335b:	89 fb                	mov    ebx,edi
c001335d:	80 fb 09             	cmp    bl,0x9
c0013360:	0f 84 09 01 00 00    	je     c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013366:	31 c0                	xor    eax,eax
c0013368:	89 eb                	mov    ebx,ebp
c001336a:	0f b6 fb             	movzx  edi,bl
c001336d:	eb 30                	jmp    c001339f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001336f:	31 c0                	xor    eax,eax
c0013371:	80 f9 06             	cmp    cl,0x6
c0013374:	75 f2                	jne    c0013368 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013376:	80 fa 0a             	cmp    dl,0xa
c0013379:	77 ed                	ja     c0013368 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001337b:	bf de 05 00 00       	mov    edi,0x5de
c0013380:	0f a3 d7             	bt     edi,edx
c0013383:	73 e3                	jae    c0013368 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013385:	b8 60 85 02 c0       	mov    eax,0xc0028560
c001338a:	e9 e0 00 00 00       	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001338f:	39 c7                	cmp    edi,eax
c0013391:	0f 84 d3 00 00 00    	je     c001346a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013397:	40                   	inc    eax
c0013398:	3d d0 00 00 00       	cmp    eax,0xd0
c001339d:	74 09                	je     c00133a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001339f:	89 f3                	mov    ebx,esi
c00133a1:	80 fb 0f             	cmp    bl,0xf
c00133a4:	75 f1                	jne    c0013397 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00133a6:	eb e7                	jmp    c001338f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00133a8:	80 f9 10             	cmp    cl,0x10
c00133ab:	75 14                	jne    c00133c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00133ad:	8d 42 fc             	lea    eax,[edx-0x4]
c00133b0:	83 e0 fb             	and    eax,0xfffffffb
c00133b3:	3c 02                	cmp    al,0x2
c00133b5:	76 34                	jbe    c00133eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00133b7:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00133bc:	80 fa 02             	cmp    dl,0x2
c00133bf:	eb 24                	jmp    c00133e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00133c1:	80 f9 11             	cmp    cl,0x11
c00133c4:	75 13                	jne    c00133d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00133c6:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00133cb:	80 fa 03             	cmp    dl,0x3
c00133ce:	0f 85 9b 00 00 00    	jne    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133d4:	e9 91 00 00 00       	jmp    c001346a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00133d9:	80 f9 12             	cmp    cl,0x12
c00133dc:	75 14                	jne    c00133f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00133de:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00133e3:	fe ca                	dec    dl
c00133e5:	0f 85 84 00 00 00    	jne    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133eb:	b8 80 85 02 c0       	mov    eax,0xc0028580
c00133f0:	eb 7d                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133f2:	80 f9 14             	cmp    cl,0x14
c00133f5:	75 12                	jne    c0013409 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00133f7:	4a                   	dec    edx
c00133f8:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00133fd:	80 fa 01             	cmp    dl,0x1
c0013400:	77 6d                	ja     c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013402:	b8 90 85 02 c0       	mov    eax,0xc0028590
c0013407:	eb 66                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013409:	80 f9 15             	cmp    cl,0x15
c001340c:	75 31                	jne    c001343f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001340e:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0013413:	80 fa 01             	cmp    dl,0x1
c0013416:	74 57                	je     c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013418:	b8 91 64 02 c0       	mov    eax,0xc0026491
c001341d:	80 fa 13             	cmp    dl,0x13
c0013420:	76 0c                	jbe    c001342e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0013422:	80 fa 30             	cmp    dl,0x30
c0013425:	75 48                	jne    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013427:	b8 c0 85 02 c0       	mov    eax,0xc00285c0
c001342c:	eb 41                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001342e:	b9 04 00 09 00       	mov    ecx,0x90004
c0013433:	0f a3 d1             	bt     ecx,edx
c0013436:	73 37                	jae    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013438:	b8 b0 85 02 c0       	mov    eax,0xc00285b0
c001343d:	eb 30                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001343f:	b8 91 64 02 c0       	mov    eax,0xc0026491
c0013444:	80 f9 16             	cmp    cl,0x16
c0013447:	75 26                	jne    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013449:	b8 d0 85 02 c0       	mov    eax,0xc00285d0
c001344e:	84 d2                	test   dl,dl
c0013450:	74 1d                	je     c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013452:	b8 91 64 02 c0       	mov    eax,0xc0026491
c0013457:	80 fa 30             	cmp    dl,0x30
c001345a:	75 13                	jne    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001345c:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c0013461:	eb 0c                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013463:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0013468:	eb 05                	jmp    c001346f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001346a:	b8 70 85 02 c0       	mov    eax,0xc0028570
c001346f:	5b                   	pop    ebx
c0013470:	5e                   	pop    esi
c0013471:	5f                   	pop    edi
c0013472:	5d                   	pop    ebp
c0013473:	c3                   	ret    

c0013474 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013474:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001347c:	80 f9 04             	cmp    cl,0x4
c001347f:	75 6b                	jne    c00134ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013481:	b8 60 83 02 c0       	mov    eax,0xc0028360
c0013486:	80 fa 01             	cmp    dl,0x1
c0013489:	0f 86 92 02 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001348f:	b8 70 83 02 c0       	mov    eax,0xc0028370
c0013494:	80 fa 02             	cmp    dl,0x2
c0013497:	0f 84 84 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001349d:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00134a2:	80 fa 03             	cmp    dl,0x3
c00134a5:	0f 84 76 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134ab:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00134b0:	80 fa 04             	cmp    dl,0x4
c00134b3:	0f 84 68 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b9:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c00134be:	80 fa 05             	cmp    dl,0x5
c00134c1:	0f 84 5a 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c7:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00134cc:	80 fa 07             	cmp    dl,0x7
c00134cf:	0f 84 4c 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d5:	83 ea 08             	sub    edx,0x8
c00134d8:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00134dd:	80 fa 01             	cmp    dl,0x1
c00134e0:	0f 87 3b 02 00 00    	ja     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134e6:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c00134eb:	c3                   	ret    
c00134ec:	80 f9 05             	cmp    cl,0x5
c00134ef:	75 45                	jne    c0013536 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00134f1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00134f4:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00134f9:	80 f9 02             	cmp    cl,0x2
c00134fc:	0f 86 1f 02 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013502:	80 fa 04             	cmp    dl,0x4
c0013505:	0f 84 f3 01 00 00    	je     c00136fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001350b:	80 fa 07             	cmp    dl,0x7
c001350e:	0f 84 0d 02 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013514:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0013519:	80 fa 08             	cmp    dl,0x8
c001351c:	0f 84 ff 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013522:	b8 91 64 02 c0       	mov    eax,0xc0026491
c0013527:	80 fa 09             	cmp    dl,0x9
c001352a:	0f 85 f1 01 00 00    	jne    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013530:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c0013535:	c3                   	ret    
c0013536:	80 f9 06             	cmp    cl,0x6
c0013539:	0f 85 85 01 00 00    	jne    c00136c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001353f:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c0013544:	80 fa 01             	cmp    dl,0x1
c0013547:	0f 84 d4 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001354d:	8d 42 fb             	lea    eax,[edx-0x5]
c0013550:	3c 01                	cmp    al,0x1
c0013552:	0f 86 ac 01 00 00    	jbe    c0013704 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013558:	80 fa 03             	cmp    dl,0x3
c001355b:	0f 84 a3 01 00 00    	je     c0013704 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013561:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013564:	b8 10 84 02 c0       	mov    eax,0xc0028410
c0013569:	80 f9 01             	cmp    cl,0x1
c001356c:	0f 86 af 01 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013572:	80 fa 09             	cmp    dl,0x9
c0013575:	0f 84 8f 01 00 00    	je     c001370a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001357b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001357e:	80 f9 01             	cmp    cl,0x1
c0013581:	0f 86 9a 01 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013587:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001358c:	80 fa 0d             	cmp    dl,0xd
c001358f:	0f 84 8c 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013595:	b8 30 84 02 c0       	mov    eax,0xc0028430
c001359a:	80 fa 0e             	cmp    dl,0xe
c001359d:	0f 84 7e 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a3:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135a8:	80 fa 0f             	cmp    dl,0xf
c00135ab:	0f 84 70 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135b1:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00135b6:	80 fa 15             	cmp    dl,0x15
c00135b9:	0f 84 62 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135bf:	8d 4a ea             	lea    ecx,[edx-0x16]
c00135c2:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135c7:	80 f9 01             	cmp    cl,0x1
c00135ca:	0f 86 51 01 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135d0:	80 fa 1a             	cmp    dl,0x1a
c00135d3:	0f 84 37 01 00 00    	je     c0013710 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00135d9:	80 fa 1c             	cmp    dl,0x1c
c00135dc:	0f 84 34 01 00 00    	je     c0013716 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00135e2:	80 fa 1d             	cmp    dl,0x1d
c00135e5:	0f 84 36 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135eb:	b8 70 84 02 c0       	mov    eax,0xc0028470
c00135f0:	80 fa 25             	cmp    dl,0x25
c00135f3:	0f 84 28 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135f9:	8d 4a da             	lea    ecx,[edx-0x26]
c00135fc:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013601:	80 f9 01             	cmp    cl,0x1
c0013604:	0f 86 17 01 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001360a:	b8 80 84 02 c0       	mov    eax,0xc0028480
c001360f:	80 fa 2a             	cmp    dl,0x2a
c0013612:	0f 84 09 01 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013618:	b8 70 84 02 c0       	mov    eax,0xc0028470
c001361d:	80 fa 2c             	cmp    dl,0x2c
c0013620:	0f 84 fb 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013626:	b8 80 84 02 c0       	mov    eax,0xc0028480
c001362b:	80 fa 2d             	cmp    dl,0x2d
c001362e:	0f 84 ed 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013634:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013639:	80 fa 2e             	cmp    dl,0x2e
c001363c:	0f 84 df 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013642:	b8 70 84 02 c0       	mov    eax,0xc0028470
c0013647:	80 fa 2f             	cmp    dl,0x2f
c001364a:	0f 84 d1 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013650:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013653:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013658:	80 f9 01             	cmp    cl,0x1
c001365b:	0f 86 c0 00 00 00    	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013661:	b8 90 84 02 c0       	mov    eax,0xc0028490
c0013666:	80 fa 37             	cmp    dl,0x37
c0013669:	0f 84 b2 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001366f:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013674:	80 fa 3a             	cmp    dl,0x3a
c0013677:	0f 84 a4 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001367d:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c0013682:	80 fa 3c             	cmp    dl,0x3c
c0013685:	0f 84 96 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001368b:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0013690:	80 fa 3d             	cmp    dl,0x3d
c0013693:	0f 84 88 00 00 00    	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013699:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c001369e:	80 fa 3e             	cmp    dl,0x3e
c00136a1:	74 7e                	je     c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136a3:	8d 42 bb             	lea    eax,[edx-0x45]
c00136a6:	3c 01                	cmp    al,0x1
c00136a8:	76 72                	jbe    c001371c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00136aa:	80 fa 3f             	cmp    dl,0x3f
c00136ad:	74 6d                	je     c001371c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00136af:	80 fa 4a             	cmp    dl,0x4a
c00136b2:	74 0a                	je     c00136be <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00136b4:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00136b9:	80 fa 4d             	cmp    dl,0x4d
c00136bc:	75 63                	jne    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136be:	b8 90 84 02 c0       	mov    eax,0xc0028490
c00136c3:	c3                   	ret    
c00136c4:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00136c9:	80 f9 0b             	cmp    cl,0xb
c00136cc:	75 0a                	jne    c00136d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00136ce:	fe ca                	dec    dl
c00136d0:	75 4f                	jne    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136d2:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00136d7:	c3                   	ret    
c00136d8:	80 f9 0f             	cmp    cl,0xf
c00136db:	75 44                	jne    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136dd:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c00136e2:	80 fa 02             	cmp    dl,0x2
c00136e5:	76 3a                	jbe    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136e7:	8d 42 fd             	lea    eax,[edx-0x3]
c00136ea:	3c 01                	cmp    al,0x1
c00136ec:	76 0a                	jbe    c00136f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00136ee:	b8 91 64 02 c0       	mov    eax,0xc0026491
c00136f3:	80 fa 06             	cmp    dl,0x6
c00136f6:	75 29                	jne    c0013721 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136f8:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c00136fd:	c3                   	ret    
c00136fe:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0013703:	c3                   	ret    
c0013704:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0013709:	c3                   	ret    
c001370a:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001370f:	c3                   	ret    
c0013710:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013715:	c3                   	ret    
c0013716:	b8 60 84 02 c0       	mov    eax,0xc0028460
c001371b:	c3                   	ret    
c001371c:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c0013721:	c3                   	ret    

c0013722 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013722:	60                   	pusha  
c0013723:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001372b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001372f:	9c                   	pushf  
c0013730:	fa                   	cli    
c0013731:	0f 09                	wbinvd 
c0013733:	0f 30                	wrmsr  
c0013735:	9d                   	popf   
c0013736:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001373a:	89 02                	mov    DWORD PTR [edx],eax
c001373c:	61                   	popa   
c001373d:	c3                   	ret    

c001373e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001373e:	60                   	pusha  
c001373f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013743:	9c                   	pushf  
c0013744:	fa                   	cli    
c0013745:	0f 09                	wbinvd 
c0013747:	31 c0                	xor    eax,eax
c0013749:	31 d2                	xor    edx,edx
c001374b:	0f 32                	rdmsr  
c001374d:	9d                   	popf   
c001374e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013752:	89 02                	mov    DWORD PTR [edx],eax
c0013754:	61                   	popa   
c0013755:	c3                   	ret    

c0013756 <CPU::AMD_K6_writeback(int, int, int)>:
c0013756:	56                   	push   esi
c0013757:	53                   	push   ebx
c0013758:	83 ec 10             	sub    esp,0x10
c001375b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001375f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013764:	75 5d                	jne    c00137c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013766:	83 f8 08             	cmp    eax,0x8
c0013769:	75 09                	jne    c0013774 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001376b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013770:	7e 13                	jle    c0013785 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013772:	eb 30                	jmp    c00137a4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013774:	83 f8 06             	cmp    eax,0x6
c0013777:	7c 4a                	jl     c00137c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013779:	83 f8 07             	cmp    eax,0x7
c001377c:	7e 07                	jle    c0013785 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001377e:	83 f8 09             	cmp    eax,0x9
c0013781:	74 21                	je     c00137a4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013783:	eb 3e                	jmp    c00137c3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013785:	89 e6                	mov    esi,esp
c0013787:	8b 1d 6c 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c6c
c001378d:	56                   	push   esi
c001378e:	c1 eb 15             	shr    ebx,0x15
c0013791:	68 82 00 00 c0       	push   0xc0000082
c0013796:	83 e3 7e             	and    ebx,0x7e
c0013799:	e8 a0 ff ff ff       	call   c001373e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001379e:	56                   	push   esi
c001379f:	6a 00                	push   0x0
c00137a1:	53                   	push   ebx
c00137a2:	eb 12                	jmp    c00137b6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00137a4:	89 e3                	mov    ebx,esp
c00137a6:	53                   	push   ebx
c00137a7:	68 82 00 00 c0       	push   0xc0000082
c00137ac:	e8 8d ff ff ff       	call   c001373e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00137b1:	53                   	push   ebx
c00137b2:	6a 00                	push   0x0
c00137b4:	6a 00                	push   0x0
c00137b6:	68 82 00 00 c0       	push   0xc0000082
c00137bb:	e8 62 ff ff ff       	call   c0013722 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00137c0:	83 c4 18             	add    esp,0x18
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	5b                   	pop    ebx
c00137c7:	5e                   	pop    esi
c00137c8:	c3                   	ret    
c00137c9:	90                   	nop

c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00137ca:	55                   	push   ebp
c00137cb:	57                   	push   edi
c00137cc:	56                   	push   esi
c00137cd:	53                   	push   ebx
c00137ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137d6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137da:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00137de:	39 05 00 86 02 c0    	cmp    DWORD PTR ds:0xc0028600,eax
c00137e4:	75 23                	jne    c0013809 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00137e6:	a1 0c 97 02 c0       	mov    eax,ds:0xc002970c
c00137eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137ef:	89 06                	mov    DWORD PTR [esi],eax
c00137f1:	a1 08 97 02 c0       	mov    eax,ds:0xc0029708
c00137f6:	89 07                	mov    DWORD PTR [edi],eax
c00137f8:	a1 04 97 02 c0       	mov    eax,ds:0xc0029704
c00137fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013800:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c0013805:	89 02                	mov    DWORD PTR [edx],eax
c0013807:	eb 3f                	jmp    c0013848 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013809:	31 c9                	xor    ecx,ecx
c001380b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001380f:	0f a2                	cpuid  
c0013811:	89 06                	mov    DWORD PTR [esi],eax
c0013813:	89 1f                	mov    DWORD PTR [edi],ebx
c0013815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013819:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001381c:	89 10                	mov    DWORD PTR [eax],edx
c001381e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013822:	a3 00 86 02 c0       	mov    ds:0xc0028600,eax
c0013827:	8b 06                	mov    eax,DWORD PTR [esi]
c0013829:	a3 0c 97 02 c0       	mov    ds:0xc002970c,eax
c001382e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013830:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0013835:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013838:	a3 04 97 02 c0       	mov    ds:0xc0029704,eax
c001383d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013841:	8b 00                	mov    eax,DWORD PTR [eax]
c0013843:	a3 00 97 02 c0       	mov    ds:0xc0029700,eax
c0013848:	5b                   	pop    ebx
c0013849:	5e                   	pop    esi
c001384a:	5f                   	pop    edi
c001384b:	5d                   	pop    ebp
c001384c:	c3                   	ret    
c001384d:	90                   	nop

c001384e <CPU::cpuidCheckEDX(unsigned int)>:
c001384e:	83 ec 10             	sub    esp,0x10
c0013851:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013855:	50                   	push   eax
c0013856:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001385a:	50                   	push   eax
c001385b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001385f:	50                   	push   eax
c0013860:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013864:	50                   	push   eax
c0013865:	6a 01                	push   0x1
c0013867:	e8 5e ff ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001386c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013870:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013874:	0f 95 c0             	setne  al
c0013877:	83 c4 24             	add    esp,0x24
c001387a:	c3                   	ret    
c001387b:	90                   	nop

c001387c <CPU::cpuidCheckECX(unsigned int)>:
c001387c:	83 ec 10             	sub    esp,0x10
c001387f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013883:	50                   	push   eax
c0013884:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013888:	50                   	push   eax
c0013889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001388d:	50                   	push   eax
c001388e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013892:	50                   	push   eax
c0013893:	6a 01                	push   0x1
c0013895:	e8 30 ff ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001389a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001389e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00138a2:	0f 95 c0             	setne  al
c00138a5:	83 c4 24             	add    esp,0x24
c00138a8:	c3                   	ret    
c00138a9:	90                   	nop

c00138aa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00138aa:	83 ec 10             	sub    esp,0x10
c00138ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138b1:	50                   	push   eax
c00138b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138b6:	50                   	push   eax
c00138b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138bb:	50                   	push   eax
c00138bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138c0:	50                   	push   eax
c00138c1:	6a 07                	push   0x7
c00138c3:	e8 02 ff ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138cc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00138d0:	0f 95 c0             	setne  al
c00138d3:	83 c4 24             	add    esp,0x24
c00138d6:	c3                   	ret    
c00138d7:	90                   	nop

c00138d8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00138d8:	83 ec 10             	sub    esp,0x10
c00138db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138df:	50                   	push   eax
c00138e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138e4:	50                   	push   eax
c00138e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138e9:	50                   	push   eax
c00138ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138ee:	50                   	push   eax
c00138ef:	6a 07                	push   0x7
c00138f1:	e8 d4 fe ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00138fe:	0f 95 c0             	setne  al
c0013901:	83 c4 24             	add    esp,0x24
c0013904:	c3                   	ret    
c0013905:	90                   	nop

c0013906 <CPU::CPU()>:
c0013906:	83 ec 0c             	sub    esp,0xc
c0013909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390d:	83 ec 08             	sub    esp,0x8
c0013910:	68 91 64 02 c0       	push   0xc0026491
c0013915:	50                   	push   eax
c0013916:	e8 a3 af ff ff       	call   c000e8be <Device::Device(char const*)>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	ba f4 66 02 c0       	mov    edx,0xc00266f4
c0013923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013927:	89 10                	mov    DWORD PTR [eax],edx
c0013929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393b:	05 78 01 00 00       	add    eax,0x178
c0013940:	83 ec 0c             	sub    esp,0xc
c0013943:	50                   	push   eax
c0013944:	e8 bf 5c ff ff       	call   c0009608 <GDT::GDT()>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013950:	05 7c 09 00 00       	add    eax,0x97c
c0013955:	83 ec 0c             	sub    esp,0xc
c0013958:	50                   	push   eax
c0013959:	e8 76 5f ff ff       	call   c00098d4 <IDT::IDT()>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013965:	05 7c 11 00 00       	add    eax,0x117c
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	50                   	push   eax
c001396e:	e8 71 7d ff ff       	call   c000b6e4 <TSS::TSS()>
c0013973:	83 c4 10             	add    esp,0x10
c0013976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013985:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001398f:	90                   	nop
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	c3                   	ret    

c0013994 <CPU::displayFeatures()>:
c0013994:	53                   	push   ebx
c0013995:	83 ec 10             	sub    esp,0x10
c0013998:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001399c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00139a2:	68 88 61 02 c0       	push   0xc0026188
c00139a7:	e8 9d 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00139ac:	58                   	pop    eax
c00139ad:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00139b3:	5a                   	pop    edx
c00139b4:	50                   	push   eax
c00139b5:	68 99 61 02 c0       	push   0xc0026199
c00139ba:	e8 8a 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00139bf:	59                   	pop    ecx
c00139c0:	58                   	pop    eax
c00139c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139c7:	c1 e8 0e             	shr    eax,0xe
c00139ca:	0f b6 c0             	movzx  eax,al
c00139cd:	50                   	push   eax
c00139ce:	68 aa 61 02 c0       	push   0xc00261aa
c00139d3:	e8 71 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00139d8:	58                   	pop    eax
c00139d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139df:	5a                   	pop    edx
c00139e0:	66 c1 e8 06          	shr    ax,0x6
c00139e4:	0f b6 c0             	movzx  eax,al
c00139e7:	50                   	push   eax
c00139e8:	68 bb 61 02 c0       	push   0xc00261bb
c00139ed:	e8 57 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00139f2:	c7 04 24 bb 67 02 c0 	mov    DWORD PTR [esp],0xc00267bb
c00139f9:	e8 4b 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00139fe:	83 c4 10             	add    esp,0x10
c0013a01:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013a06:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013a0d:	74 05                	je     c0013a14 <CPU::displayFeatures()+0x80>
c0013a0f:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013a14:	51                   	push   ecx
c0013a15:	51                   	push   ecx
c0013a16:	50                   	push   eax
c0013a17:	68 cc 61 02 c0       	push   0xc00261cc
c0013a1c:	e8 28 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013a29:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013a30:	78 05                	js     c0013a37 <CPU::displayFeatures()+0xa3>
c0013a32:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013a37:	52                   	push   edx
c0013a38:	52                   	push   edx
c0013a39:	50                   	push   eax
c0013a3a:	68 e3 61 02 c0       	push   0xc00261e3
c0013a3f:	e8 05 97 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013a4c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013a53:	75 05                	jne    c0013a5a <CPU::displayFeatures()+0xc6>
c0013a55:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013a5a:	51                   	push   ecx
c0013a5b:	51                   	push   ecx
c0013a5c:	50                   	push   eax
c0013a5d:	68 fa 61 02 c0       	push   0xc00261fa
c0013a62:	e8 e2 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013a67:	83 c4 10             	add    esp,0x10
c0013a6a:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013a6f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013a76:	75 05                	jne    c0013a7d <CPU::displayFeatures()+0xe9>
c0013a78:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013a7d:	52                   	push   edx
c0013a7e:	52                   	push   edx
c0013a7f:	50                   	push   eax
c0013a80:	68 11 62 02 c0       	push   0xc0026211
c0013a85:	e8 bf 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013a92:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013a99:	75 05                	jne    c0013aa0 <CPU::displayFeatures()+0x10c>
c0013a9b:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013aa0:	51                   	push   ecx
c0013aa1:	51                   	push   ecx
c0013aa2:	50                   	push   eax
c0013aa3:	68 28 62 02 c0       	push   0xc0026228
c0013aa8:	e8 9c 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013ab5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013abc:	75 05                	jne    c0013ac3 <CPU::displayFeatures()+0x12f>
c0013abe:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013ac3:	52                   	push   edx
c0013ac4:	52                   	push   edx
c0013ac5:	50                   	push   eax
c0013ac6:	68 3f 62 02 c0       	push   0xc002623f
c0013acb:	e8 79 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013ad8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013adf:	75 05                	jne    c0013ae6 <CPU::displayFeatures()+0x152>
c0013ae1:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013ae6:	51                   	push   ecx
c0013ae7:	51                   	push   ecx
c0013ae8:	50                   	push   eax
c0013ae9:	68 56 62 02 c0       	push   0xc0026256
c0013aee:	e8 56 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013afb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013b02:	75 05                	jne    c0013b09 <CPU::displayFeatures()+0x175>
c0013b04:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013b09:	52                   	push   edx
c0013b0a:	52                   	push   edx
c0013b0b:	50                   	push   eax
c0013b0c:	68 6d 62 02 c0       	push   0xc002626d
c0013b11:	e8 33 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013b16:	83 c4 10             	add    esp,0x10
c0013b19:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013b1e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013b25:	75 05                	jne    c0013b2c <CPU::displayFeatures()+0x198>
c0013b27:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013b2c:	51                   	push   ecx
c0013b2d:	51                   	push   ecx
c0013b2e:	50                   	push   eax
c0013b2f:	68 84 62 02 c0       	push   0xc0026284
c0013b34:	e8 10 96 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013b41:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013b48:	75 05                	jne    c0013b4f <CPU::displayFeatures()+0x1bb>
c0013b4a:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013b4f:	52                   	push   edx
c0013b50:	52                   	push   edx
c0013b51:	50                   	push   eax
c0013b52:	68 9b 62 02 c0       	push   0xc002629b
c0013b57:	e8 ed 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013b5c:	83 c4 10             	add    esp,0x10
c0013b5f:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013b64:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013b6b:	75 05                	jne    c0013b72 <CPU::displayFeatures()+0x1de>
c0013b6d:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013b72:	51                   	push   ecx
c0013b73:	51                   	push   ecx
c0013b74:	50                   	push   eax
c0013b75:	68 b2 62 02 c0       	push   0xc00262b2
c0013b7a:	e8 ca 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013b7f:	83 c4 10             	add    esp,0x10
c0013b82:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013b87:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013b8e:	75 05                	jne    c0013b95 <CPU::displayFeatures()+0x201>
c0013b90:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013b95:	52                   	push   edx
c0013b96:	52                   	push   edx
c0013b97:	50                   	push   eax
c0013b98:	68 c9 62 02 c0       	push   0xc00262c9
c0013b9d:	e8 a7 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013baa:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013bb1:	75 05                	jne    c0013bb8 <CPU::displayFeatures()+0x224>
c0013bb3:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013bb8:	51                   	push   ecx
c0013bb9:	51                   	push   ecx
c0013bba:	50                   	push   eax
c0013bbb:	68 e0 62 02 c0       	push   0xc00262e0
c0013bc0:	e8 84 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013bcd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013bd4:	78 05                	js     c0013bdb <CPU::displayFeatures()+0x247>
c0013bd6:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013bdb:	52                   	push   edx
c0013bdc:	52                   	push   edx
c0013bdd:	50                   	push   eax
c0013bde:	68 f7 62 02 c0       	push   0xc00262f7
c0013be3:	e8 61 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013bf0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013bf7:	75 05                	jne    c0013bfe <CPU::displayFeatures()+0x26a>
c0013bf9:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013bfe:	51                   	push   ecx
c0013bff:	51                   	push   ecx
c0013c00:	50                   	push   eax
c0013c01:	68 0e 63 02 c0       	push   0xc002630e
c0013c06:	e8 3e 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013c0b:	83 c4 10             	add    esp,0x10
c0013c0e:	b8 81 46 02 c0       	mov    eax,0xc0024681
c0013c13:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013c1a:	75 05                	jne    c0013c21 <CPU::displayFeatures()+0x28d>
c0013c1c:	b8 85 46 02 c0       	mov    eax,0xc0024685
c0013c21:	52                   	push   edx
c0013c22:	52                   	push   edx
c0013c23:	50                   	push   eax
c0013c24:	68 25 63 02 c0       	push   0xc0026325
c0013c29:	e8 1b 95 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0013c2e:	83 c4 18             	add    esp,0x18
c0013c31:	5b                   	pop    ebx
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <CPU::detectFeatures()>:
c0013c34:	55                   	push   ebp
c0013c35:	57                   	push   edi
c0013c36:	56                   	push   esi
c0013c37:	53                   	push   ebx
c0013c38:	83 ec 50             	sub    esp,0x50
c0013c3b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013c3f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013c49:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013c50:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013c56:	6a 0d                	push   0xd
c0013c58:	6a 00                	push   0x0
c0013c5a:	55                   	push   ebp
c0013c5b:	e8 34 ca fe ff       	call   c0000694 <memset>
c0013c60:	83 c4 10             	add    esp,0x10
c0013c63:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0013c68:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013c6f:	0f 84 22 09 00 00    	je     c0014597 <CPU::detectFeatures()+0x963>
c0013c75:	83 ec 0c             	sub    esp,0xc
c0013c78:	89 ef                	mov    edi,ebp
c0013c7a:	6a 10                	push   0x10
c0013c7c:	e8 cd fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013c81:	83 e0 01             	and    eax,0x1
c0013c84:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c87:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c8d:	83 e0 fd             	and    eax,0xfffffffd
c0013c90:	09 d0                	or     eax,edx
c0013c92:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c98:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013c9f:	e8 aa fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013ca4:	83 e0 01             	and    eax,0x1
c0013ca7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013cae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cb4:	83 e0 fb             	and    eax,0xfffffffb
c0013cb7:	09 d0                	or     eax,edx
c0013cb9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cbf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013cc6:	e8 83 fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013ccb:	83 e0 01             	and    eax,0x1
c0013cce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013cd5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cdb:	83 e0 f7             	and    eax,0xfffffff7
c0013cde:	09 d0                	or     eax,edx
c0013ce0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ce6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013ced:	e8 5c fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013cf2:	83 e0 01             	and    eax,0x1
c0013cf5:	c1 e0 04             	shl    eax,0x4
c0013cf8:	88 c2                	mov    dl,al
c0013cfa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d00:	83 e0 ef             	and    eax,0xffffffef
c0013d03:	09 d0                	or     eax,edx
c0013d05:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d0b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013d12:	e8 37 fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013d17:	83 e0 01             	and    eax,0x1
c0013d1a:	c1 e0 05             	shl    eax,0x5
c0013d1d:	88 c2                	mov    dl,al
c0013d1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d25:	83 e0 df             	and    eax,0xffffffdf
c0013d28:	09 d0                	or     eax,edx
c0013d2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d30:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013d37:	e8 12 fb ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013d3c:	83 e0 01             	and    eax,0x1
c0013d3f:	8d 14 00             	lea    edx,[eax+eax*1]
c0013d42:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013d48:	83 e0 fd             	and    eax,0xfffffffd
c0013d4b:	09 d0                	or     eax,edx
c0013d4d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013d53:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013d5a:	e8 ef fa ff ff       	call   c001384e <CPU::cpuidCheckEDX(unsigned int)>
c0013d5f:	83 e0 01             	and    eax,0x1
c0013d62:	c1 e0 06             	shl    eax,0x6
c0013d65:	88 c2                	mov    dl,al
c0013d67:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013d6d:	83 e0 bf             	and    eax,0xffffffbf
c0013d70:	09 d0                	or     eax,edx
c0013d72:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013d78:	58                   	pop    eax
c0013d79:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d7d:	50                   	push   eax
c0013d7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d82:	50                   	push   eax
c0013d83:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013d87:	56                   	push   esi
c0013d88:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d8c:	50                   	push   eax
c0013d8d:	6a 00                	push   0x0
c0013d8f:	e8 36 fa ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d94:	b8 04 00 00 00       	mov    eax,0x4
c0013d99:	89 c1                	mov    ecx,eax
c0013d9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d9d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013da3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013da7:	89 c1                	mov    ecx,eax
c0013da9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013dab:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013db1:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013db5:	89 c1                	mov    ecx,eax
c0013db7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013db9:	83 c4 18             	add    esp,0x18
c0013dbc:	68 3c 63 02 c0       	push   0xc002633c
c0013dc1:	55                   	push   ebp
c0013dc2:	e8 15 ca fe ff       	call   c00007dc <strcmp>
c0013dc7:	83 c4 10             	add    esp,0x10
c0013dca:	85 c0                	test   eax,eax
c0013dcc:	75 0f                	jne    c0013ddd <CPU::detectFeatures()+0x1a9>
c0013dce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013dd8:	e9 22 02 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013ddd:	50                   	push   eax
c0013dde:	50                   	push   eax
c0013ddf:	68 49 63 02 c0       	push   0xc0026349
c0013de4:	55                   	push   ebp
c0013de5:	e8 f2 c9 fe ff       	call   c00007dc <strcmp>
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	85 c0                	test   eax,eax
c0013def:	74 dd                	je     c0013dce <CPU::detectFeatures()+0x19a>
c0013df1:	50                   	push   eax
c0013df2:	50                   	push   eax
c0013df3:	68 56 63 02 c0       	push   0xc0026356
c0013df8:	55                   	push   ebp
c0013df9:	e8 de c9 fe ff       	call   c00007dc <strcmp>
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	85 c0                	test   eax,eax
c0013e03:	74 2a                	je     c0013e2f <CPU::detectFeatures()+0x1fb>
c0013e05:	50                   	push   eax
c0013e06:	50                   	push   eax
c0013e07:	68 63 63 02 c0       	push   0xc0026363
c0013e0c:	55                   	push   ebp
c0013e0d:	e8 ca c9 fe ff       	call   c00007dc <strcmp>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	85 c0                	test   eax,eax
c0013e17:	74 16                	je     c0013e2f <CPU::detectFeatures()+0x1fb>
c0013e19:	50                   	push   eax
c0013e1a:	50                   	push   eax
c0013e1b:	68 70 63 02 c0       	push   0xc0026370
c0013e20:	55                   	push   ebp
c0013e21:	e8 b6 c9 fe ff       	call   c00007dc <strcmp>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	85 c0                	test   eax,eax
c0013e2b:	74 48                	je     c0013e75 <CPU::detectFeatures()+0x241>
c0013e2d:	eb 0f                	jmp    c0013e3e <CPU::detectFeatures()+0x20a>
c0013e2f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013e39:	e9 c1 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013e3e:	50                   	push   eax
c0013e3f:	50                   	push   eax
c0013e40:	68 7d 63 02 c0       	push   0xc002637d
c0013e45:	55                   	push   ebp
c0013e46:	e8 91 c9 fe ff       	call   c00007dc <strcmp>
c0013e4b:	83 c4 10             	add    esp,0x10
c0013e4e:	85 c0                	test   eax,eax
c0013e50:	74 23                	je     c0013e75 <CPU::detectFeatures()+0x241>
c0013e52:	57                   	push   edi
c0013e53:	57                   	push   edi
c0013e54:	68 8a 63 02 c0       	push   0xc002638a
c0013e59:	55                   	push   ebp
c0013e5a:	e8 7d c9 fe ff       	call   c00007dc <strcmp>
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	85 c0                	test   eax,eax
c0013e64:	75 1e                	jne    c0013e84 <CPU::detectFeatures()+0x250>
c0013e66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013e70:	e9 8a 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013e75:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013e7f:	e9 7b 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013e84:	56                   	push   esi
c0013e85:	56                   	push   esi
c0013e86:	68 97 63 02 c0       	push   0xc0026397
c0013e8b:	55                   	push   ebp
c0013e8c:	e8 4b c9 fe ff       	call   c00007dc <strcmp>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	85 c0                	test   eax,eax
c0013e96:	75 0f                	jne    c0013ea7 <CPU::detectFeatures()+0x273>
c0013e98:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013ea2:	e9 58 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013ea7:	51                   	push   ecx
c0013ea8:	51                   	push   ecx
c0013ea9:	68 56 63 02 c0       	push   0xc0026356
c0013eae:	55                   	push   ebp
c0013eaf:	e8 28 c9 fe ff       	call   c00007dc <strcmp>
c0013eb4:	83 c4 10             	add    esp,0x10
c0013eb7:	85 c0                	test   eax,eax
c0013eb9:	75 0f                	jne    c0013eca <CPU::detectFeatures()+0x296>
c0013ebb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013ec5:	e9 35 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013eca:	52                   	push   edx
c0013ecb:	52                   	push   edx
c0013ecc:	68 a4 63 02 c0       	push   0xc00263a4
c0013ed1:	55                   	push   ebp
c0013ed2:	e8 05 c9 fe ff       	call   c00007dc <strcmp>
c0013ed7:	83 c4 10             	add    esp,0x10
c0013eda:	85 c0                	test   eax,eax
c0013edc:	75 0f                	jne    c0013eed <CPU::detectFeatures()+0x2b9>
c0013ede:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013ee8:	e9 12 01 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013eed:	50                   	push   eax
c0013eee:	50                   	push   eax
c0013eef:	68 b1 63 02 c0       	push   0xc00263b1
c0013ef4:	55                   	push   ebp
c0013ef5:	e8 e2 c8 fe ff       	call   c00007dc <strcmp>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	85 c0                	test   eax,eax
c0013eff:	75 0f                	jne    c0013f10 <CPU::detectFeatures()+0x2dc>
c0013f01:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013f0b:	e9 ef 00 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013f10:	50                   	push   eax
c0013f11:	50                   	push   eax
c0013f12:	68 be 63 02 c0       	push   0xc00263be
c0013f17:	55                   	push   ebp
c0013f18:	e8 bf c8 fe ff       	call   c00007dc <strcmp>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	85 c0                	test   eax,eax
c0013f22:	75 0f                	jne    c0013f33 <CPU::detectFeatures()+0x2ff>
c0013f24:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013f2e:	e9 cc 00 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013f33:	50                   	push   eax
c0013f34:	50                   	push   eax
c0013f35:	68 cb 63 02 c0       	push   0xc00263cb
c0013f3a:	55                   	push   ebp
c0013f3b:	e8 9c c8 fe ff       	call   c00007dc <strcmp>
c0013f40:	83 c4 10             	add    esp,0x10
c0013f43:	85 c0                	test   eax,eax
c0013f45:	75 0f                	jne    c0013f56 <CPU::detectFeatures()+0x322>
c0013f47:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013f51:	e9 a9 00 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013f56:	50                   	push   eax
c0013f57:	50                   	push   eax
c0013f58:	68 d8 63 02 c0       	push   0xc00263d8
c0013f5d:	55                   	push   ebp
c0013f5e:	e8 79 c8 fe ff       	call   c00007dc <strcmp>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	85 c0                	test   eax,eax
c0013f68:	75 0f                	jne    c0013f79 <CPU::detectFeatures()+0x345>
c0013f6a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013f74:	e9 86 00 00 00       	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013f79:	50                   	push   eax
c0013f7a:	50                   	push   eax
c0013f7b:	68 e5 63 02 c0       	push   0xc00263e5
c0013f80:	55                   	push   ebp
c0013f81:	e8 56 c8 fe ff       	call   c00007dc <strcmp>
c0013f86:	83 c4 10             	add    esp,0x10
c0013f89:	85 c0                	test   eax,eax
c0013f8b:	75 0c                	jne    c0013f99 <CPU::detectFeatures()+0x365>
c0013f8d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013f97:	eb 66                	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013f99:	50                   	push   eax
c0013f9a:	50                   	push   eax
c0013f9b:	68 f2 63 02 c0       	push   0xc00263f2
c0013fa0:	55                   	push   ebp
c0013fa1:	e8 36 c8 fe ff       	call   c00007dc <strcmp>
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	85 c0                	test   eax,eax
c0013fab:	75 0c                	jne    c0013fb9 <CPU::detectFeatures()+0x385>
c0013fad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013fb7:	eb 46                	jmp    c0013fff <CPU::detectFeatures()+0x3cb>
c0013fb9:	57                   	push   edi
c0013fba:	57                   	push   edi
c0013fbb:	68 ff 63 02 c0       	push   0xc00263ff
c0013fc0:	55                   	push   ebp
c0013fc1:	e8 16 c8 fe ff       	call   c00007dc <strcmp>
c0013fc6:	83 c4 10             	add    esp,0x10
c0013fc9:	85 c0                	test   eax,eax
c0013fcb:	74 e0                	je     c0013fad <CPU::detectFeatures()+0x379>
c0013fcd:	56                   	push   esi
c0013fce:	56                   	push   esi
c0013fcf:	68 0c 64 02 c0       	push   0xc002640c
c0013fd4:	55                   	push   ebp
c0013fd5:	e8 02 c8 fe ff       	call   c00007dc <strcmp>
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	85 c0                	test   eax,eax
c0013fdf:	74 cc                	je     c0013fad <CPU::detectFeatures()+0x379>
c0013fe1:	51                   	push   ecx
c0013fe2:	51                   	push   ecx
c0013fe3:	68 19 64 02 c0       	push   0xc0026419
c0013fe8:	55                   	push   ebp
c0013fe9:	e8 ee c7 fe ff       	call   c00007dc <strcmp>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	85 c0                	test   eax,eax
c0013ff3:	74 b8                	je     c0013fad <CPU::detectFeatures()+0x379>
c0013ff5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013fff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014004:	0f 86 be 00 00 00    	jbe    c00140c8 <CPU::detectFeatures()+0x494>
c001400a:	83 ec 0c             	sub    esp,0xc
c001400d:	68 80 00 00 00       	push   0x80
c0014012:	e8 93 f8 ff ff       	call   c00138aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0014017:	83 e0 01             	and    eax,0x1
c001401a:	c1 e0 06             	shl    eax,0x6
c001401d:	88 c2                	mov    dl,al
c001401f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014025:	83 e0 bf             	and    eax,0xffffffbf
c0014028:	09 d0                	or     eax,edx
c001402a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014030:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014037:	e8 6e f8 ff ff       	call   c00138aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001403c:	83 e0 01             	and    eax,0x1
c001403f:	c1 e0 04             	shl    eax,0x4
c0014042:	88 c2                	mov    dl,al
c0014044:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001404a:	83 e0 ef             	and    eax,0xffffffef
c001404d:	09 d0                	or     eax,edx
c001404f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014055:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001405c:	e8 49 f8 ff ff       	call   c00138aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0014061:	c1 e0 07             	shl    eax,0x7
c0014064:	88 c2                	mov    dl,al
c0014066:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001406c:	83 e0 7f             	and    eax,0x7f
c001406f:	09 d0                	or     eax,edx
c0014071:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014077:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001407e:	e8 55 f8 ff ff       	call   c00138d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0014083:	83 e0 01             	and    eax,0x1
c0014086:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001408d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014093:	83 e0 f7             	and    eax,0xfffffff7
c0014096:	09 d0                	or     eax,edx
c0014098:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001409e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00140a5:	e8 2e f8 ff ff       	call   c00138d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00140aa:	83 c4 10             	add    esp,0x10
c00140ad:	83 e0 01             	and    eax,0x1
c00140b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00140b7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00140bd:	83 e0 fb             	and    eax,0xfffffffb
c00140c0:	09 d0                	or     eax,edx
c00140c2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140cf:	50                   	push   eax
c00140d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140d4:	50                   	push   eax
c00140d5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00140d9:	56                   	push   esi
c00140da:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140de:	50                   	push   eax
c00140df:	6a 01                	push   0x1
c00140e1:	e8 e4 f6 ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00140e6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140ea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00140f0:	88 ca                	mov    dl,cl
c00140f2:	83 e0 f0             	and    eax,0xfffffff0
c00140f5:	83 e2 0f             	and    edx,0xf
c00140f8:	09 d0                	or     eax,edx
c00140fa:	88 ca                	mov    dl,cl
c00140fc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014102:	c0 ea 04             	shr    dl,0x4
c0014105:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014109:	0f b6 c2             	movzx  eax,dl
c001410c:	83 c4 20             	add    esp,0x20
c001410f:	c1 e0 06             	shl    eax,0x6
c0014112:	89 c7                	mov    edi,eax
c0014114:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001411a:	66 25 3f c0          	and    ax,0xc03f
c001411e:	09 f8                	or     eax,edi
c0014120:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014127:	89 c8                	mov    eax,ecx
c0014129:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0014130:	c1 e8 08             	shr    eax,0x8
c0014133:	83 e5 3f             	and    ebp,0x3f
c0014136:	83 e0 0f             	and    eax,0xf
c0014139:	89 c7                	mov    edi,eax
c001413b:	c1 e7 06             	shl    edi,0x6
c001413e:	09 ef                	or     edi,ebp
c0014140:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0014147:	89 fa                	mov    edx,edi
c0014149:	83 e5 c0             	and    ebp,0xffffffc0
c001414c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014152:	88 c2                	mov    dl,al
c0014154:	c0 ea 02             	shr    dl,0x2
c0014157:	89 d7                	mov    edi,edx
c0014159:	09 ef                	or     edi,ebp
c001415b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014161:	89 fa                	mov    edx,edi
c0014163:	83 e5 cf             	and    ebp,0xffffffcf
c0014166:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001416c:	89 cf                	mov    edi,ecx
c001416e:	c1 ef 0c             	shr    edi,0xc
c0014171:	83 e7 03             	and    edi,0x3
c0014174:	c1 e7 04             	shl    edi,0x4
c0014177:	09 ef                	or     edi,ebp
c0014179:	3c 06                	cmp    al,0x6
c001417b:	89 fa                	mov    edx,edi
c001417d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014183:	74 04                	je     c0014189 <CPU::detectFeatures()+0x555>
c0014185:	3c 0f                	cmp    al,0xf
c0014187:	75 5c                	jne    c00141e5 <CPU::detectFeatures()+0x5b1>
c0014189:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001418d:	89 cf                	mov    edi,ecx
c001418f:	c1 ef 10             	shr    edi,0x10
c0014192:	c1 e7 04             	shl    edi,0x4
c0014195:	09 fa                	or     edx,edi
c0014197:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001419d:	0f b6 d2             	movzx  edx,dl
c00141a0:	66 81 e7 3f c0       	and    di,0xc03f
c00141a5:	c1 e2 06             	shl    edx,0x6
c00141a8:	09 fa                	or     edx,edi
c00141aa:	3c 0f                	cmp    al,0xf
c00141ac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00141b3:	75 30                	jne    c00141e5 <CPU::detectFeatures()+0x5b1>
c00141b5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00141bb:	c1 e9 14             	shr    ecx,0x14
c00141be:	83 e0 3f             	and    eax,0x3f
c00141c1:	83 c1 0f             	add    ecx,0xf
c00141c4:	88 ca                	mov    dl,cl
c00141c6:	c0 e9 02             	shr    cl,0x2
c00141c9:	c1 e2 06             	shl    edx,0x6
c00141cc:	09 d0                	or     eax,edx
c00141ce:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00141d4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00141da:	83 e0 c0             	and    eax,0xffffffc0
c00141dd:	09 c1                	or     ecx,eax
c00141df:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00141e5:	83 ec 0c             	sub    esp,0xc
c00141e8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00141ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141f3:	50                   	push   eax
c00141f4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00141f8:	55                   	push   ebp
c00141f9:	56                   	push   esi
c00141fa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00141fe:	57                   	push   edi
c00141ff:	68 00 00 00 80       	push   0x80000000
c0014204:	e8 c1 f5 ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014209:	83 c4 20             	add    esp,0x20
c001420c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014214:	76 22                	jbe    c0014238 <CPU::detectFeatures()+0x604>
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	8d 44 24 28          	lea    eax,[esp+0x28]
c001421d:	50                   	push   eax
c001421e:	55                   	push   ebp
c001421f:	56                   	push   esi
c0014220:	57                   	push   edi
c0014221:	68 01 00 00 80       	push   0x80000001
c0014226:	e8 9f f5 ff ff       	call   c00137ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001422b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014235:	83 c4 20             	add    esp,0x20
c0014238:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001423e:	83 f8 01             	cmp    eax,0x1
c0014241:	75 6f                	jne    c00142b2 <CPU::detectFeatures()+0x67e>
c0014243:	51                   	push   ecx
c0014244:	51                   	push   ecx
c0014245:	68 25 64 02 c0       	push   0xc0026425
c001424a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001424e:	56                   	push   esi
c001424f:	e8 fc c4 fe ff       	call   c0000750 <strcpy>
c0014254:	5f                   	pop    edi
c0014255:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001425b:	5d                   	pop    ebp
c001425c:	66 c1 e8 06          	shr    ax,0x6
c0014260:	0f b6 c0             	movzx  eax,al
c0014263:	50                   	push   eax
c0014264:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001426a:	c1 e8 0e             	shr    eax,0xe
c001426d:	0f b6 c0             	movzx  eax,al
c0014270:	50                   	push   eax
c0014271:	e8 fe f1 ff ff       	call   c0013474 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014276:	5a                   	pop    edx
c0014277:	59                   	pop    ecx
c0014278:	50                   	push   eax
c0014279:	56                   	push   esi
c001427a:	e8 11 c6 fe ff       	call   c0000890 <strcat>
c001427f:	5f                   	pop    edi
c0014280:	5d                   	pop    ebp
c0014281:	56                   	push   esi
c0014282:	53                   	push   ebx
c0014283:	e8 28 a6 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c0014288:	58                   	pop    eax
c0014289:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001428f:	5a                   	pop    edx
c0014290:	68 2c 64 02 c0       	push   0xc002642c
c0014295:	50                   	push   eax
c0014296:	e8 41 c5 fe ff       	call   c00007dc <strcmp>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	85 c0                	test   eax,eax
c00142a0:	0f 85 71 03 00 00    	jne    c0014617 <CPU::detectFeatures()+0x9e3>
c00142a6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00142ad:	e9 65 03 00 00       	jmp    c0014617 <CPU::detectFeatures()+0x9e3>
c00142b2:	83 f8 02             	cmp    eax,0x2
c00142b5:	0f 85 b5 00 00 00    	jne    c0014370 <CPU::detectFeatures()+0x73c>
c00142bb:	57                   	push   edi
c00142bc:	57                   	push   edi
c00142bd:	68 3e 64 02 c0       	push   0xc002643e
c00142c2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00142c6:	56                   	push   esi
c00142c7:	e8 84 c4 fe ff       	call   c0000750 <strcpy>
c00142cc:	5d                   	pop    ebp
c00142cd:	58                   	pop    eax
c00142ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142d4:	66 c1 e8 06          	shr    ax,0x6
c00142d8:	0f b6 c0             	movzx  eax,al
c00142db:	50                   	push   eax
c00142dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142e2:	c1 e8 0e             	shr    eax,0xe
c00142e5:	0f b6 c0             	movzx  eax,al
c00142e8:	50                   	push   eax
c00142e9:	e8 f2 ef ff ff       	call   c00132e0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00142ee:	5a                   	pop    edx
c00142ef:	59                   	pop    ecx
c00142f0:	50                   	push   eax
c00142f1:	56                   	push   esi
c00142f2:	e8 99 c5 fe ff       	call   c0000890 <strcat>
c00142f7:	5f                   	pop    edi
c00142f8:	5d                   	pop    ebp
c00142f9:	56                   	push   esi
c00142fa:	53                   	push   ebx
c00142fb:	e8 b0 a5 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c0014300:	58                   	pop    eax
c0014301:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014307:	5a                   	pop    edx
c0014308:	68 43 64 02 c0       	push   0xc0026443
c001430d:	50                   	push   eax
c001430e:	e8 c9 c4 fe ff       	call   c00007dc <strcmp>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	85 c0                	test   eax,eax
c0014318:	75 20                	jne    c001433a <CPU::detectFeatures()+0x706>
c001431a:	8b 15 48 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c48
c0014320:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014326:	a8 01                	test   al,0x1
c0014328:	74 10                	je     c001433a <CPU::detectFeatures()+0x706>
c001432a:	83 e0 fe             	and    eax,0xfffffffe
c001432d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014333:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001433a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014340:	c1 e8 0e             	shr    eax,0xe
c0014343:	3c 05                	cmp    al,0x5
c0014345:	0f 85 cc 02 00 00    	jne    c0014617 <CPU::detectFeatures()+0x9e3>
c001434b:	56                   	push   esi
c001434c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014352:	83 e0 0f             	and    eax,0xf
c0014355:	50                   	push   eax
c0014356:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001435c:	66 c1 e8 06          	shr    ax,0x6
c0014360:	0f b6 c0             	movzx  eax,al
c0014363:	50                   	push   eax
c0014364:	6a 05                	push   0x5
c0014366:	e8 eb f3 ff ff       	call   c0013756 <CPU::AMD_K6_writeback(int, int, int)>
c001436b:	e9 1f 02 00 00       	jmp    c001458f <CPU::detectFeatures()+0x95b>
c0014370:	8d 50 fd             	lea    edx,[eax-0x3]
c0014373:	83 fa 01             	cmp    edx,0x1
c0014376:	76 09                	jbe    c0014381 <CPU::detectFeatures()+0x74d>
c0014378:	83 f8 06             	cmp    eax,0x6
c001437b:	0f 85 91 01 00 00    	jne    c0014512 <CPU::detectFeatures()+0x8de>
c0014381:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014387:	c1 ea 0e             	shr    edx,0xe
c001438a:	80 fa 05             	cmp    dl,0x5
c001438d:	75 7b                	jne    c001440a <CPU::detectFeatures()+0x7d6>
c001438f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014395:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001439a:	66 81 fa 00 01       	cmp    dx,0x100
c001439f:	75 0c                	jne    c00143ad <CPU::detectFeatures()+0x779>
c00143a1:	51                   	push   ecx
c00143a2:	51                   	push   ecx
c00143a3:	68 4a 64 02 c0       	push   0xc002644a
c00143a8:	e9 dc 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c00143ad:	66 81 fa 00 02       	cmp    dx,0x200
c00143b2:	75 0c                	jne    c00143c0 <CPU::detectFeatures()+0x78c>
c00143b4:	52                   	push   edx
c00143b5:	52                   	push   edx
c00143b6:	68 5d 64 02 c0       	push   0xc002645d
c00143bb:	e9 c9 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c00143c0:	66 81 fa 40 02       	cmp    dx,0x240
c00143c5:	75 0c                	jne    c00143d3 <CPU::detectFeatures()+0x79f>
c00143c7:	50                   	push   eax
c00143c8:	50                   	push   eax
c00143c9:	68 6f 64 02 c0       	push   0xc002646f
c00143ce:	e9 b6 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c00143d3:	83 f8 06             	cmp    eax,0x6
c00143d6:	75 0c                	jne    c00143e4 <CPU::detectFeatures()+0x7b0>
c00143d8:	50                   	push   eax
c00143d9:	50                   	push   eax
c00143da:	68 81 64 02 c0       	push   0xc0026481
c00143df:	e9 a5 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c00143e4:	83 f8 04             	cmp    eax,0x4
c00143e7:	75 0c                	jne    c00143f5 <CPU::detectFeatures()+0x7c1>
c00143e9:	50                   	push   eax
c00143ea:	50                   	push   eax
c00143eb:	68 8d 64 02 c0       	push   0xc002648d
c00143f0:	e9 94 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c00143f5:	83 f8 03             	cmp    eax,0x3
c00143f8:	0f 85 19 02 00 00    	jne    c0014617 <CPU::detectFeatures()+0x9e3>
c00143fe:	50                   	push   eax
c00143ff:	50                   	push   eax
c0014400:	68 95 64 02 c0       	push   0xc0026495
c0014405:	e9 7f 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001440a:	80 fa 06             	cmp    dl,0x6
c001440d:	0f 85 db 00 00 00    	jne    c00144ee <CPU::detectFeatures()+0x8ba>
c0014413:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014419:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001441e:	66 81 fa 80 01       	cmp    dx,0x180
c0014423:	75 0c                	jne    c0014431 <CPU::detectFeatures()+0x7fd>
c0014425:	50                   	push   eax
c0014426:	50                   	push   eax
c0014427:	68 a0 64 02 c0       	push   0xc00264a0
c001442c:	e9 58 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014431:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014437:	66 f7 c1 80 ff       	test   cx,0xff80
c001443c:	75 0c                	jne    c001444a <CPU::detectFeatures()+0x816>
c001443e:	50                   	push   eax
c001443f:	50                   	push   eax
c0014440:	68 b0 64 02 c0       	push   0xc00264b0
c0014445:	e9 3f 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001444a:	66 81 fa 40 02       	cmp    dx,0x240
c001444f:	75 0c                	jne    c001445d <CPU::detectFeatures()+0x829>
c0014451:	55                   	push   ebp
c0014452:	55                   	push   ebp
c0014453:	68 b7 64 02 c0       	push   0xc00264b7
c0014458:	e9 2c 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001445d:	66 81 fa 80 02       	cmp    dx,0x280
c0014462:	75 0c                	jne    c0014470 <CPU::detectFeatures()+0x83c>
c0014464:	57                   	push   edi
c0014465:	57                   	push   edi
c0014466:	68 c0 64 02 c0       	push   0xc00264c0
c001446b:	e9 19 01 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014470:	66 81 fa 40 03       	cmp    dx,0x340
c0014475:	74 ed                	je     c0014464 <CPU::detectFeatures()+0x830>
c0014477:	66 81 fa c0 03       	cmp    dx,0x3c0
c001447c:	75 0c                	jne    c001448a <CPU::detectFeatures()+0x856>
c001447e:	56                   	push   esi
c001447f:	56                   	push   esi
c0014480:	68 c7 64 02 c0       	push   0xc00264c7
c0014485:	e9 ff 00 00 00       	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001448a:	83 f8 06             	cmp    eax,0x6
c001448d:	0f 84 45 ff ff ff    	je     c00143d8 <CPU::detectFeatures()+0x7a4>
c0014493:	83 f8 04             	cmp    eax,0x4
c0014496:	0f 84 4d ff ff ff    	je     c00143e9 <CPU::detectFeatures()+0x7b5>
c001449c:	83 f8 03             	cmp    eax,0x3
c001449f:	0f 85 72 01 00 00    	jne    c0014617 <CPU::detectFeatures()+0x9e3>
c00144a5:	51                   	push   ecx
c00144a6:	51                   	push   ecx
c00144a7:	68 d0 64 02 c0       	push   0xc00264d0
c00144ac:	53                   	push   ebx
c00144ad:	e8 fe a3 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c00144b2:	b1 c1                	mov    cl,0xc1
c00144b4:	88 c8                	mov    al,cl
c00144b6:	e6 22                	out    0x22,al
c00144b8:	e4 23                	in     al,0x23
c00144ba:	88 c2                	mov    dl,al
c00144bc:	88 c8                	mov    al,cl
c00144be:	e6 22                	out    0x22,al
c00144c0:	88 d0                	mov    al,dl
c00144c2:	83 c8 10             	or     eax,0x10
c00144c5:	e6 23                	out    0x23,al
c00144c7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00144ce:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00144d1:	89 d0                	mov    eax,edx
c00144d3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00144d9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00144dd:	40                   	inc    eax
c00144de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00144e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00144e9:	e9 a1 00 00 00       	jmp    c001458f <CPU::detectFeatures()+0x95b>
c00144ee:	83 f8 06             	cmp    eax,0x6
c00144f1:	0f 84 e1 fe ff ff    	je     c00143d8 <CPU::detectFeatures()+0x7a4>
c00144f7:	83 f8 04             	cmp    eax,0x4
c00144fa:	0f 84 e9 fe ff ff    	je     c00143e9 <CPU::detectFeatures()+0x7b5>
c0014500:	83 f8 03             	cmp    eax,0x3
c0014503:	0f 85 0e 01 00 00    	jne    c0014617 <CPU::detectFeatures()+0x9e3>
c0014509:	52                   	push   edx
c001450a:	52                   	push   edx
c001450b:	68 db 64 02 c0       	push   0xc00264db
c0014510:	eb 77                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014512:	83 f8 07             	cmp    eax,0x7
c0014515:	75 09                	jne    c0014520 <CPU::detectFeatures()+0x8ec>
c0014517:	50                   	push   eax
c0014518:	50                   	push   eax
c0014519:	68 e5 64 02 c0       	push   0xc00264e5
c001451e:	eb 69                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014520:	83 f8 0a             	cmp    eax,0xa
c0014523:	75 09                	jne    c001452e <CPU::detectFeatures()+0x8fa>
c0014525:	50                   	push   eax
c0014526:	50                   	push   eax
c0014527:	68 f0 64 02 c0       	push   0xc00264f0
c001452c:	eb 5b                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001452e:	83 f8 0b             	cmp    eax,0xb
c0014531:	75 09                	jne    c001453c <CPU::detectFeatures()+0x908>
c0014533:	50                   	push   eax
c0014534:	50                   	push   eax
c0014535:	68 f8 64 02 c0       	push   0xc00264f8
c001453a:	eb 4d                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001453c:	83 f8 08             	cmp    eax,0x8
c001453f:	75 09                	jne    c001454a <CPU::detectFeatures()+0x916>
c0014541:	50                   	push   eax
c0014542:	50                   	push   eax
c0014543:	68 01 65 02 c0       	push   0xc0026501
c0014548:	eb 3f                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c001454a:	83 f8 09             	cmp    eax,0x9
c001454d:	75 09                	jne    c0014558 <CPU::detectFeatures()+0x924>
c001454f:	50                   	push   eax
c0014550:	50                   	push   eax
c0014551:	68 09 65 02 c0       	push   0xc0026509
c0014556:	eb 31                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014558:	83 f8 05             	cmp    eax,0x5
c001455b:	75 09                	jne    c0014566 <CPU::detectFeatures()+0x932>
c001455d:	50                   	push   eax
c001455e:	50                   	push   eax
c001455f:	68 11 65 02 c0       	push   0xc0026511
c0014564:	eb 23                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014566:	83 f8 0c             	cmp    eax,0xc
c0014569:	75 09                	jne    c0014574 <CPU::detectFeatures()+0x940>
c001456b:	55                   	push   ebp
c001456c:	55                   	push   ebp
c001456d:	68 1f 65 02 c0       	push   0xc002651f
c0014572:	eb 15                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014574:	83 f8 0d             	cmp    eax,0xd
c0014577:	75 09                	jne    c0014582 <CPU::detectFeatures()+0x94e>
c0014579:	57                   	push   edi
c001457a:	57                   	push   edi
c001457b:	68 2a 65 02 c0       	push   0xc002652a
c0014580:	eb 07                	jmp    c0014589 <CPU::detectFeatures()+0x955>
c0014582:	56                   	push   esi
c0014583:	56                   	push   esi
c0014584:	68 3e 65 02 c0       	push   0xc002653e
c0014589:	53                   	push   ebx
c001458a:	e8 21 a3 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c001458f:	83 c4 10             	add    esp,0x10
c0014592:	e9 80 00 00 00       	jmp    c0014617 <CPU::detectFeatures()+0x9e3>
c0014597:	51                   	push   ecx
c0014598:	51                   	push   ecx
c0014599:	68 8a 63 02 c0       	push   0xc002638a
c001459e:	55                   	push   ebp
c001459f:	e8 ac c1 fe ff       	call   c0000750 <strcpy>
c00145a4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00145ae:	e8 30 bc fe ff       	call   c00001e3 <is486>
c00145b3:	83 c4 10             	add    esp,0x10
c00145b6:	85 c0                	test   eax,eax
c00145b8:	74 2b                	je     c00145e5 <CPU::detectFeatures()+0x9b1>
c00145ba:	52                   	push   edx
c00145bb:	52                   	push   edx
c00145bc:	68 4a 65 02 c0       	push   0xc002654a
c00145c1:	53                   	push   ebx
c00145c2:	e8 e9 a2 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c00145c7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00145ce:	0f 20 c0             	mov    eax,cr0
c00145d1:	83 e0 14             	and    eax,0x14
c00145d4:	83 c4 10             	add    esp,0x10
c00145d7:	83 f8 04             	cmp    eax,0x4
c00145da:	75 1f                	jne    c00145fb <CPU::detectFeatures()+0x9c7>
c00145dc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00145e3:	eb 32                	jmp    c0014617 <CPU::detectFeatures()+0x9e3>
c00145e5:	50                   	push   eax
c00145e6:	50                   	push   eax
c00145e7:	68 55 65 02 c0       	push   0xc0026555
c00145ec:	53                   	push   ebx
c00145ed:	e8 be a2 ff ff       	call   c000e8b0 <Device::setName(char const*)>
c00145f2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00145f9:	eb d3                	jmp    c00145ce <CPU::detectFeatures()+0x99a>
c00145fb:	e8 be bb fe ff       	call   c00001be <hasLegacyFPU>
c0014600:	83 e0 01             	and    eax,0x1
c0014603:	8d 14 00             	lea    edx,[eax+eax*1]
c0014606:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001460c:	83 e0 fd             	and    eax,0xfffffffd
c001460f:	09 d0                	or     eax,edx
c0014611:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014617:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c001461e:	74 0e                	je     c001462e <CPU::detectFeatures()+0x9fa>
c0014620:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0014625:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c001462c:	eb 20                	jmp    c001464e <CPU::detectFeatures()+0xa1a>
c001462e:	e8 8b bb fe ff       	call   c00001be <hasLegacyFPU>
c0014633:	83 e0 01             	and    eax,0x1
c0014636:	8d 14 00             	lea    edx,[eax+eax*1]
c0014639:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001463f:	83 e0 fd             	and    eax,0xfffffffd
c0014642:	09 d0                	or     eax,edx
c0014644:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001464a:	a8 02                	test   al,0x2
c001464c:	75 d2                	jne    c0014620 <CPU::detectFeatures()+0x9ec>
c001464e:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014655:	83 c4 4c             	add    esp,0x4c
c0014658:	5b                   	pop    ebx
c0014659:	5e                   	pop    esi
c001465a:	5f                   	pop    edi
c001465b:	5d                   	pop    ebp
c001465c:	c3                   	ret    
c001465d:	90                   	nop

c001465e <CPU::setupSMEP()>:
c001465e:	0f 20 e0             	mov    eax,cr4
c0014661:	0d 00 00 10 00       	or     eax,0x100000
c0014666:	0f 22 e0             	mov    cr4,eax
c0014669:	c3                   	ret    

c001466a <CPU::setupUMIP()>:
c001466a:	0f 20 e0             	mov    eax,cr4
c001466d:	80 cc 08             	or     ah,0x8
c0014670:	0f 22 e0             	mov    cr4,eax
c0014673:	c3                   	ret    

c0014674 <CPU::setupTSC()>:
c0014674:	0f 20 e0             	mov    eax,cr4
c0014677:	83 c8 04             	or     eax,0x4
c001467a:	0f 22 e0             	mov    cr4,eax
c001467d:	c3                   	ret    

c001467e <CPU::setupLargePages()>:
c001467e:	0f 20 e0             	mov    eax,cr4
c0014681:	83 c8 10             	or     eax,0x10
c0014684:	0f 22 e0             	mov    cr4,eax
c0014687:	c3                   	ret    

c0014688 <CPU::setupPAT()>:
c0014688:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001468d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014694:	74 2c                	je     c00146c2 <CPU::setupPAT()+0x3a>
c0014696:	53                   	push   ebx
c0014697:	83 ec 10             	sub    esp,0x10
c001469a:	68 77 02 00 00       	push   0x277
c001469f:	50                   	push   eax
c00146a0:	e8 d9 4b ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c00146a5:	83 e2 f8             	and    edx,0xfffffff8
c00146a8:	83 ca 01             	or     edx,0x1
c00146ab:	52                   	push   edx
c00146ac:	50                   	push   eax
c00146ad:	68 77 02 00 00       	push   0x277
c00146b2:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c00146b8:	e8 ed 4b ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c00146bd:	83 c4 28             	add    esp,0x28
c00146c0:	5b                   	pop    ebx
c00146c1:	c3                   	ret    
c00146c2:	c3                   	ret    
c00146c3:	90                   	nop

c00146c4 <CPU::setupMTRR()>:
c00146c4:	c3                   	ret    
c00146c5:	90                   	nop

c00146c6 <CPU::setupGlobalPages()>:
c00146c6:	0f 20 e0             	mov    eax,cr4
c00146c9:	0c 80                	or     al,0x80
c00146cb:	0f 22 e0             	mov    cr4,eax
c00146ce:	c3                   	ret    
c00146cf:	90                   	nop

c00146d0 <CPU::allowUsermodeDataAccess()>:
c00146d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00146db:	74 03                	je     c00146e0 <CPU::allowUsermodeDataAccess()+0x10>
c00146dd:	0f 01 cb             	stac   
c00146e0:	c3                   	ret    
c00146e1:	90                   	nop

c00146e2 <CPU::prohibitUsermodeDataAccess()>:
c00146e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146e6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00146ed:	74 03                	je     c00146f2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00146ef:	0f 01 ca             	clac   
c00146f2:	c3                   	ret    
c00146f3:	90                   	nop

c00146f4 <CPU::setupSMAP()>:
c00146f4:	0f 20 e0             	mov    eax,cr4
c00146f7:	0d 00 00 20 00       	or     eax,0x200000
c00146fc:	0f 22 e0             	mov    cr4,eax
c00146ff:	eb e1                	jmp    c00146e2 <CPU::prohibitUsermodeDataAccess()>
c0014701:	90                   	nop

c0014702 <CPU::setupFeatures()>:
c0014702:	53                   	push   ebx
c0014703:	83 ec 08             	sub    esp,0x8
c0014706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001470a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014711:	74 18                	je     c001472b <CPU::setupFeatures()+0x29>
c0014713:	83 ec 0c             	sub    esp,0xc
c0014716:	68 60 65 02 c0       	push   0xc0026560
c001471b:	e8 29 8a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0014720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014723:	e8 42 ff ff ff       	call   c001466a <CPU::setupUMIP()>
c0014728:	83 c4 10             	add    esp,0x10
c001472b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014732:	74 18                	je     c001474c <CPU::setupFeatures()+0x4a>
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	68 6a 65 02 c0       	push   0xc002656a
c001473c:	e8 08 8a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0014741:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014744:	e8 2b ff ff ff       	call   c0014674 <CPU::setupTSC()>
c0014749:	83 c4 10             	add    esp,0x10
c001474c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014753:	74 18                	je     c001476d <CPU::setupFeatures()+0x6b>
c0014755:	83 ec 0c             	sub    esp,0xc
c0014758:	68 73 65 02 c0       	push   0xc0026573
c001475d:	e8 e7 89 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0014762:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014765:	e8 14 ff ff ff       	call   c001467e <CPU::setupLargePages()>
c001476a:	83 c4 10             	add    esp,0x10
c001476d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014774:	74 18                	je     c001478e <CPU::setupFeatures()+0x8c>
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	68 7c 65 02 c0       	push   0xc002657c
c001477e:	e8 c6 89 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0014783:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014786:	e8 3b ff ff ff       	call   c00146c6 <CPU::setupGlobalPages()>
c001478b:	83 c4 10             	add    esp,0x10
c001478e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014795:	74 18                	je     c00147af <CPU::setupFeatures()+0xad>
c0014797:	83 ec 0c             	sub    esp,0xc
c001479a:	68 8e 65 02 c0       	push   0xc002658e
c001479f:	e8 a5 89 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00147a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147a7:	e8 dc fe ff ff       	call   c0014688 <CPU::setupPAT()>
c00147ac:	83 c4 10             	add    esp,0x10
c00147af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00147b6:	74 11                	je     c00147c9 <CPU::setupFeatures()+0xc7>
c00147b8:	c7 44 24 10 97 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026597
c00147c0:	83 c4 08             	add    esp,0x8
c00147c3:	5b                   	pop    ebx
c00147c4:	e9 80 89 ff ff       	jmp    c000d149 <Dbg::kprintf(char const*, ...)>
c00147c9:	83 c4 08             	add    esp,0x8
c00147cc:	5b                   	pop    ebx
c00147cd:	c3                   	ret    

c00147ce <CPU::open(int, int, void*)>:
c00147ce:	57                   	push   edi
c00147cf:	56                   	push   esi
c00147d0:	53                   	push   ebx
c00147d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147d9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00147df:	83 ec 0c             	sub    esp,0xc
c00147e2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00147e8:	68 a1 65 02 c0       	push   0xc00265a1
c00147ed:	e8 4f 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147f2:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00147f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147fb:	e8 6a 4e ff ff       	call   c000966a <GDT::setup()>
c0014800:	c7 04 24 b3 65 02 c0 	mov    DWORD PTR [esp],0xc00265b3
c0014807:	e8 35 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001480c:	83 c4 0c             	add    esp,0xc
c001480f:	6a 00                	push   0x0
c0014811:	68 ef be ad de       	push   0xdeadbeef
c0014816:	57                   	push   edi
c0014817:	e8 0c 6f ff ff       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c001481c:	c7 04 24 c5 65 02 c0 	mov    DWORD PTR [esp],0xc00265c5
c0014823:	e8 19 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014828:	89 3c 24             	mov    DWORD PTR [esp],edi
c001482b:	e8 d8 6e ff ff       	call   c000b708 <TSS::flush()>
c0014830:	c7 04 24 d9 65 02 c0 	mov    DWORD PTR [esp],0xc00265d9
c0014837:	e8 05 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001483c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014842:	89 04 24             	mov    DWORD PTR [esp],eax
c0014845:	e8 00 51 ff ff       	call   c000994a <IDT::setup()>
c001484a:	c7 04 24 eb 65 02 c0 	mov    DWORD PTR [esp],0xc00265eb
c0014851:	e8 eb 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014856:	b8 00 04 00 00       	mov    eax,0x400
c001485b:	0f 23 f8             	mov    db7,eax
c001485e:	c7 04 24 09 66 02 c0 	mov    DWORD PTR [esp],0xc0026609
c0014865:	e8 d7 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001486a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014874:	e8 25 5c ff ff       	call   c000a49e <Phys::allocatePage()>
c0014879:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001487f:	89 30                	mov    DWORD PTR [eax],esi
c0014881:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014887:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001488a:	c7 04 24 2b 66 02 c0 	mov    DWORD PTR [esp],0xc002662b
c0014891:	e8 ab 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014896:	58                   	pop    eax
c0014897:	5a                   	pop    edx
c0014898:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001489e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148a2:	e8 3f 7e ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c00148a7:	c7 04 24 53 66 02 c0 	mov    DWORD PTR [esp],0xc0026653
c00148ae:	e8 8e 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148b6:	e8 79 f3 ff ff       	call   c0013c34 <CPU::detectFeatures()>
c00148bb:	c7 04 24 76 66 02 c0 	mov    DWORD PTR [esp],0xc0026676
c00148c2:	e8 7a 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148c7:	e8 f7 b2 ff ff       	call   c000fbc3 <setupInterruptController()>
c00148cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00148d2:	c7 04 24 9a 66 02 c0 	mov    DWORD PTR [esp],0xc002669a
c00148d9:	e8 63 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148de:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c00148e3:	83 e0 10             	and    eax,0x10
c00148e6:	83 f8 01             	cmp    eax,0x1
c00148e9:	19 c0                	sbb    eax,eax
c00148eb:	83 e0 46             	and    eax,0x46
c00148ee:	83 c0 1e             	add    eax,0x1e
c00148f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148f4:	e8 eb c8 ff ff       	call   c00111e4 <setupTimer(int)>
c00148f9:	83 c4 10             	add    esp,0x10
c00148fc:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014902:	f6 05 60 8c 02 c0 20 	test   BYTE PTR ds:0xc0028c60,0x20
c0014909:	74 18                	je     c0014923 <CPU::open(int, int, void*)+0x155>
c001490b:	83 ec 0c             	sub    esp,0xc
c001490e:	68 b5 66 02 c0       	push   0xc00266b5
c0014913:	e8 29 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001491b:	e8 e2 fd ff ff       	call   c0014702 <CPU::setupFeatures()>
c0014920:	83 c4 10             	add    esp,0x10
c0014923:	83 ec 0c             	sub    esp,0xc
c0014926:	68 d0 66 02 c0       	push   0xc00266d0
c001492b:	e8 11 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014933:	e8 5c f0 ff ff       	call   c0013994 <CPU::displayFeatures()>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	31 c0                	xor    eax,eax
c001493d:	5b                   	pop    ebx
c001493e:	5e                   	pop    esi
c001493f:	5f                   	pop    edi
c0014940:	c3                   	ret    
c0014941:	90                   	nop

c0014942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014942:	57                   	push   edi
c0014943:	56                   	push   esi
c0014944:	53                   	push   ebx
c0014945:	51                   	push   ecx
c0014946:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001494a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001494d:	0f 02 c0             	lar    eax,ax
c0014950:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014953:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014957:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001495a:	88 ca                	mov    dl,cl
c001495c:	c0 ea 06             	shr    dl,0x6
c001495f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014963:	89 ca                	mov    edx,ecx
c0014965:	66 c1 ea 03          	shr    dx,0x3
c0014969:	83 e2 07             	and    edx,0x7
c001496c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014971:	88 17                	mov    BYTE PTR [edi],dl
c0014973:	0f 84 a6 01 00 00    	je     c0014b1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014979:	83 e1 07             	and    ecx,0x7
c001497c:	80 f9 04             	cmp    cl,0x4
c001497f:	0f 84 98 00 00 00    	je     c0014a1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014985:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001498a:	0f 95 c0             	setne  al
c001498d:	80 f9 05             	cmp    cl,0x5
c0014990:	0f 95 c2             	setne  dl
c0014993:	08 c2                	or     dl,al
c0014995:	74 79                	je     c0014a10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014997:	84 c9                	test   cl,cl
c0014999:	75 05                	jne    c00149a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001499b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001499e:	eb 3c                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149a0:	80 f9 01             	cmp    cl,0x1
c00149a3:	75 05                	jne    c00149aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00149a5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00149a8:	eb 32                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149aa:	80 f9 02             	cmp    cl,0x2
c00149ad:	75 05                	jne    c00149b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00149af:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00149b2:	eb 28                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149b4:	31 c0                	xor    eax,eax
c00149b6:	80 f9 03             	cmp    cl,0x3
c00149b9:	75 05                	jne    c00149c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00149bb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00149be:	eb 1c                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149c0:	80 f9 05             	cmp    cl,0x5
c00149c3:	75 05                	jne    c00149ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00149c5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00149c8:	eb 12                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149ca:	80 f9 06             	cmp    cl,0x6
c00149cd:	75 05                	jne    c00149d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00149cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149d2:	eb 08                	jmp    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149d4:	80 f9 07             	cmp    cl,0x7
c00149d7:	75 03                	jne    c00149dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00149d9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149dc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00149e1:	75 10                	jne    c00149f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00149e3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00149e7:	b9 03 00 00 00       	mov    ecx,0x3
c00149ec:	01 d0                	add    eax,edx
c00149ee:	e9 37 01 00 00       	jmp    c0014b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149f3:	b9 02 00 00 00       	mov    ecx,0x2
c00149f8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00149fd:	0f 85 27 01 00 00    	jne    c0014b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014a03:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014a06:	b9 06 00 00 00       	mov    ecx,0x6
c0014a0b:	e9 1a 01 00 00       	jmp    c0014b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014a10:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014a13:	b9 06 00 00 00       	mov    ecx,0x6
c0014a18:	e9 0f 01 00 00       	jmp    c0014b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a1d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014a20:	88 ca                	mov    dl,cl
c0014a22:	c0 ea 06             	shr    dl,0x6
c0014a25:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014a29:	89 ca                	mov    edx,ecx
c0014a2b:	66 c1 ea 03          	shr    dx,0x3
c0014a2f:	83 e2 07             	and    edx,0x7
c0014a32:	80 e1 07             	and    cl,0x7
c0014a35:	75 05                	jne    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0014a37:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014a3a:	eb 4c                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a3c:	80 f9 01             	cmp    cl,0x1
c0014a3f:	75 05                	jne    c0014a46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014a41:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a44:	eb 42                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a46:	80 f9 02             	cmp    cl,0x2
c0014a49:	75 05                	jne    c0014a50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014a4b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014a4e:	eb 38                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a50:	80 f9 03             	cmp    cl,0x3
c0014a53:	75 05                	jne    c0014a5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014a55:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014a58:	eb 2e                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a5a:	80 f9 04             	cmp    cl,0x4
c0014a5d:	75 12                	jne    c0014a71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014a5f:	f6 c4 60             	test   ah,0x60
c0014a62:	75 08                	jne    c0014a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014a64:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014a67:	8d 78 14             	lea    edi,[eax+0x14]
c0014a6a:	eb 1c                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a6c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014a6f:	eb 17                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a71:	80 f9 05             	cmp    cl,0x5
c0014a74:	75 05                	jne    c0014a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014a76:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014a79:	eb 0d                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a7b:	80 f9 06             	cmp    cl,0x6
c0014a7e:	75 05                	jne    c0014a85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014a80:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014a83:	eb 03                	jmp    c0014a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a85:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014a88:	84 d2                	test   dl,dl
c0014a8a:	75 05                	jne    c0014a91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014a8c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014a8f:	eb 3c                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a91:	80 fa 01             	cmp    dl,0x1
c0014a94:	75 05                	jne    c0014a9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014a96:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014a99:	eb 32                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a9b:	80 fa 02             	cmp    dl,0x2
c0014a9e:	75 05                	jne    c0014aa5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014aa0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014aa3:	eb 28                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014aa5:	80 fa 03             	cmp    dl,0x3
c0014aa8:	75 05                	jne    c0014aaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014aaa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014aad:	eb 1e                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014aaf:	31 c0                	xor    eax,eax
c0014ab1:	80 fa 04             	cmp    dl,0x4
c0014ab4:	74 17                	je     c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014ab6:	80 fa 05             	cmp    dl,0x5
c0014ab9:	75 05                	jne    c0014ac0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014abb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014abe:	eb 0d                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014ac0:	80 fa 06             	cmp    dl,0x6
c0014ac3:	75 05                	jne    c0014aca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014ac5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ac8:	eb 03                	jmp    c0014acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014aca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014acd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014ad2:	0f 94 c2             	sete   dl
c0014ad5:	80 f9 05             	cmp    cl,0x5
c0014ad8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014adc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014ae1:	d3 e0                	shl    eax,cl
c0014ae3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014ae7:	74 0a                	je     c0014af3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014ae9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014aec:	b9 07 00 00 00       	mov    ecx,0x7
c0014af1:	eb 37                	jmp    c0014b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014af3:	01 f8                	add    eax,edi
c0014af5:	b9 03 00 00 00       	mov    ecx,0x3
c0014afa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014aff:	74 2b                	je     c0014b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014b01:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014b06:	75 0d                	jne    c0014b15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014b08:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014b0c:	01 c8                	add    eax,ecx
c0014b0e:	b9 04 00 00 00       	mov    ecx,0x4
c0014b13:	eb 17                	jmp    c0014b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014b15:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014b18:	b9 07 00 00 00       	mov    ecx,0x7
c0014b1d:	eb 0d                	jmp    c0014b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014b1f:	b9 02 00 00 00       	mov    ecx,0x2
c0014b24:	b2 01                	mov    dl,0x1
c0014b26:	31 c0                	xor    eax,eax
c0014b28:	eb 02                	jmp    c0014b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014b2a:	31 d2                	xor    edx,edx
c0014b2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b30:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014b32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b36:	88 11                	mov    BYTE PTR [ecx],dl
c0014b38:	5a                   	pop    edx
c0014b39:	5b                   	pop    ebx
c0014b3a:	5e                   	pop    esi
c0014b3b:	5f                   	pop    edi
c0014b3c:	c3                   	ret    

c0014b3d <Krnl::smpEntry()>:
c0014b3d:	eb fe                	jmp    c0014b3d <Krnl::smpEntry()>

c0014b3f <Krnl::startCPU(int)>:
c0014b3f:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0014b44:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014b4b:	0f 84 36 01 00 00    	je     c0014c87 <Krnl::startCPU(int)+0x148>
c0014b51:	53                   	push   ebx
c0014b52:	83 ec 10             	sub    esp,0x10
c0014b55:	fa                   	cli    
c0014b56:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0014b5c:	6a 1b                	push   0x1b
c0014b5e:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c0014b64:	e8 15 47 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014b69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b6e:	89 c3                	mov    ebx,eax
c0014b70:	58                   	pop    eax
c0014b71:	5a                   	pop    edx
c0014b72:	53                   	push   ebx
c0014b73:	68 18 67 02 c0       	push   0xc0026718
c0014b78:	e8 cc 85 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0014b7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b95:	c1 e0 18             	shl    eax,0x18
c0014b98:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014ba7:	09 c2                	or     edx,eax
c0014ba9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014baf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014bb5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bbb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014bc1:	80 cd c5             	or     ch,0xc5
c0014bc4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bca:	f3 90                	pause  
c0014bcc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bce:	0f ba e1 0c          	bt     ecx,0xc
c0014bd2:	72 f6                	jb     c0014bca <Krnl::startCPU(int)+0x8b>
c0014bd4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014bda:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014be0:	09 c1                	or     ecx,eax
c0014be2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014be8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bee:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014bf4:	80 cd 85             	or     ch,0x85
c0014bf7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bfd:	f3 90                	pause  
c0014bff:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014c01:	0f ba e1 0c          	bt     ecx,0xc
c0014c05:	72 f6                	jb     c0014bfd <Krnl::startCPU(int)+0xbe>
c0014c07:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014c11:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014c17:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014c1d:	09 c1                	or     ecx,eax
c0014c1f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014c25:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014c2b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014c31:	81 c9 02 06 00 00    	or     ecx,0x602
c0014c37:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014c3d:	f3 90                	pause  
c0014c3f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014c41:	0f ba e1 0c          	bt     ecx,0xc
c0014c45:	72 f6                	jb     c0014c3d <Krnl::startCPU(int)+0xfe>
c0014c47:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014c51:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014c57:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014c5d:	09 c8                	or     eax,ecx
c0014c5f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014c65:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014c6b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014c70:	0d 02 06 00 00       	or     eax,0x602
c0014c75:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014c7b:	f3 90                	pause  
c0014c7d:	8b 02                	mov    eax,DWORD PTR [edx]
c0014c7f:	0f ba e0 0c          	bt     eax,0xc
c0014c83:	72 f6                	jb     c0014c7b <Krnl::startCPU(int)+0x13c>
c0014c85:	eb fe                	jmp    c0014c85 <Krnl::startCPU(int)+0x146>
c0014c87:	c3                   	ret    

c0014c88 <Krnl::startCPUs()>:
c0014c88:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0014c8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014c93:	88 c2                	mov    dl,al
c0014c95:	83 e2 0a             	and    edx,0xa
c0014c98:	80 fa 0a             	cmp    dl,0xa
c0014c9b:	75 09                	jne    c0014ca6 <Krnl::startCPUs()+0x1e>
c0014c9d:	a8 01                	test   al,0x1
c0014c9f:	74 05                	je     c0014ca6 <Krnl::startCPUs()+0x1e>
c0014ca1:	e9 f5 b4 fe ff       	jmp    c000019b <prepareTramp>
c0014ca6:	c3                   	ret    
c0014ca7:	90                   	nop

c0014ca8 <EnvVarContainer::getEnv(char const*)>:
c0014ca8:	57                   	push   edi
c0014ca9:	56                   	push   esi
c0014caa:	53                   	push   ebx
c0014cab:	31 db                	xor    ebx,ebx
c0014cad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014cb1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014cb3:	7e 2b                	jle    c0014ce0 <EnvVarContainer::getEnv(char const*)+0x38>
c0014cb5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014cbc:	50                   	push   eax
c0014cbd:	50                   	push   eax
c0014cbe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cc1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014cc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014cc8:	e8 0f bb fe ff       	call   c00007dc <strcmp>
c0014ccd:	83 c4 10             	add    esp,0x10
c0014cd0:	85 c0                	test   eax,eax
c0014cd2:	75 09                	jne    c0014cdd <EnvVarContainer::getEnv(char const*)+0x35>
c0014cd4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cd7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014cdb:	eb 05                	jmp    c0014ce2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014cdd:	43                   	inc    ebx
c0014cde:	eb d1                	jmp    c0014cb1 <EnvVarContainer::getEnv(char const*)+0x9>
c0014ce0:	31 c0                	xor    eax,eax
c0014ce2:	5b                   	pop    ebx
c0014ce3:	5e                   	pop    esi
c0014ce4:	5f                   	pop    edi
c0014ce5:	c3                   	ret    

c0014ce6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014ce6:	55                   	push   ebp
c0014ce7:	57                   	push   edi
c0014ce8:	56                   	push   esi
c0014ce9:	53                   	push   ebx
c0014cea:	83 ec 28             	sub    esp,0x28
c0014ced:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014cf1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014cf5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014cf9:	56                   	push   esi
c0014cfa:	e8 b1 b9 fe ff       	call   c00006b0 <strlen>
c0014cff:	40                   	inc    eax
c0014d00:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d03:	e8 df 50 ff ff       	call   c0009de7 <malloc>
c0014d08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d0f:	e8 9c b9 fe ff       	call   c00006b0 <strlen>
c0014d14:	40                   	inc    eax
c0014d15:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d18:	e8 ca 50 ff ff       	call   c0009de7 <malloc>
c0014d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d24:	e8 87 b9 fe ff       	call   c00006b0 <strlen>
c0014d29:	83 c4 0c             	add    esp,0xc
c0014d2c:	40                   	inc    eax
c0014d2d:	50                   	push   eax
c0014d2e:	6a 00                	push   0x0
c0014d30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d34:	e8 5b b9 fe ff       	call   c0000694 <memset>
c0014d39:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d3c:	e8 6f b9 fe ff       	call   c00006b0 <strlen>
c0014d41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014d45:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d4d:	89 de                	mov    esi,ebx
c0014d4f:	e8 5c b9 fe ff       	call   c00006b0 <strlen>
c0014d54:	83 c4 0c             	add    esp,0xc
c0014d57:	40                   	inc    eax
c0014d58:	50                   	push   eax
c0014d59:	6a 00                	push   0x0
c0014d5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d5f:	e8 30 b9 fe ff       	call   c0000694 <memset>
c0014d64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d67:	e8 44 b9 fe ff       	call   c00006b0 <strlen>
c0014d6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014d70:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d78:	40                   	inc    eax
c0014d79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014d7c:	c1 e0 03             	shl    eax,0x3
c0014d7f:	5a                   	pop    edx
c0014d80:	59                   	pop    ecx
c0014d81:	50                   	push   eax
c0014d82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d85:	e8 49 50 ff ff       	call   c0009dd3 <realloc>
c0014d8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d8e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d91:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d94:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d98:	b9 08 00 00 00       	mov    ecx,0x8
c0014d9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d9f:	83 c4 2c             	add    esp,0x2c
c0014da2:	5b                   	pop    ebx
c0014da3:	5e                   	pop    esi
c0014da4:	5f                   	pop    edi
c0014da5:	5d                   	pop    ebp
c0014da6:	c3                   	ret    
c0014da7:	90                   	nop

c0014da8 <EnvVarContainer::deleteEnv(char const*)>:
c0014da8:	c3                   	ret    
c0014da9:	90                   	nop

c0014daa <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014daa:	55                   	push   ebp
c0014dab:	57                   	push   edi
c0014dac:	56                   	push   esi
c0014dad:	53                   	push   ebx
c0014dae:	81 ec 38 01 00 00    	sub    esp,0x138
c0014db4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014dbb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014dc2:	68 14 01 00 00       	push   0x114
c0014dc7:	e8 1b 50 ff ff       	call   c0009de7 <malloc>
c0014dcc:	83 c4 0c             	add    esp,0xc
c0014dcf:	89 c3                	mov    ebx,eax
c0014dd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014dd4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014ddb:	50                   	push   eax
c0014ddc:	e8 d3 88 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0014de1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014de4:	e8 13 8c ff ff       	call   c000d9fc <File::exists()>
c0014de9:	83 c4 10             	add    esp,0x10
c0014dec:	84 c0                	test   al,al
c0014dee:	75 31                	jne    c0014e21 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014df0:	50                   	push   eax
c0014df1:	50                   	push   eax
c0014df2:	6a 12                	push   0x12
c0014df4:	53                   	push   ebx
c0014df5:	e8 94 89 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0014dfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dfc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014dff:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e02:	e8 a9 b8 fe ff       	call   c00006b0 <strlen>
c0014e07:	5a                   	pop    edx
c0014e08:	31 d2                	xor    edx,edx
c0014e0a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014e0e:	51                   	push   ecx
c0014e0f:	56                   	push   esi
c0014e10:	52                   	push   edx
c0014e11:	50                   	push   eax
c0014e12:	53                   	push   ebx
c0014e13:	ff d7                	call   edi
c0014e15:	83 c4 14             	add    esp,0x14
c0014e18:	53                   	push   ebx
c0014e19:	e8 ce 89 ff ff       	call   c000d7ec <File::close()>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	56                   	push   esi
c0014e22:	31 f6                	xor    esi,esi
c0014e24:	68 00 01 00 00       	push   0x100
c0014e29:	6a 00                	push   0x0
c0014e2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014e2f:	50                   	push   eax
c0014e30:	e8 5f b8 fe ff       	call   c0000694 <memset>
c0014e35:	5f                   	pop    edi
c0014e36:	58                   	pop    eax
c0014e37:	6a 01                	push   0x1
c0014e39:	53                   	push   ebx
c0014e3a:	e8 4f 89 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e4a:	83 ec 0c             	sub    esp,0xc
c0014e4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e4f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014e53:	51                   	push   ecx
c0014e54:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014e58:	52                   	push   edx
c0014e59:	6a 00                	push   0x0
c0014e5b:	6a 01                	push   0x1
c0014e5d:	53                   	push   ebx
c0014e5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e61:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014e65:	83 c4 20             	add    esp,0x20
c0014e68:	3c 0d                	cmp    al,0xd
c0014e6a:	0f 84 09 01 00 00    	je     c0014f79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014e75:	0f 84 ef 00 00 00    	je     c0014f6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e7b:	3c 0a                	cmp    al,0xa
c0014e7d:	74 13                	je     c0014e92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e84:	74 0c                	je     c0014e92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e86:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014e8c:	0f 8e d8 00 00 00    	jle    c0014f6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e96:	83 ec 0c             	sub    esp,0xc
c0014e99:	8d 78 01             	lea    edi,[eax+0x1]
c0014e9c:	57                   	push   edi
c0014e9d:	e8 45 4f ff ff       	call   c0009de7 <malloc>
c0014ea2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014ea6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014eaa:	8d 56 04             	lea    edx,[esi+0x4]
c0014ead:	89 14 24             	mov    DWORD PTR [esp],edx
c0014eb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014eb4:	e8 2e 4f ff ff       	call   c0009de7 <malloc>
c0014eb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ebd:	83 c4 0c             	add    esp,0xc
c0014ec0:	57                   	push   edi
c0014ec1:	6a 00                	push   0x0
c0014ec3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ec7:	e8 c8 b7 fe ff       	call   c0000694 <memset>
c0014ecc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ed0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ed4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ed8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eda:	83 c4 0c             	add    esp,0xc
c0014edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ee1:	52                   	push   edx
c0014ee2:	6a 00                	push   0x0
c0014ee4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014ee8:	e8 a7 b7 fe ff       	call   c0000694 <memset>
c0014eed:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ef1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014ef5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ef8:	e8 b3 b7 fe ff       	call   c00006b0 <strlen>
c0014efd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014f01:	89 c1                	mov    ecx,eax
c0014f03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014f0b:	40                   	inc    eax
c0014f0c:	83 c4 10             	add    esp,0x10
c0014f0f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014f12:	85 d2                	test   edx,edx
c0014f14:	75 0c                	jne    c0014f22 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	6a 08                	push   0x8
c0014f1b:	e8 c7 4e ff ff       	call   c0009de7 <malloc>
c0014f20:	eb 0c                	jmp    c0014f2e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014f22:	c1 e0 03             	shl    eax,0x3
c0014f25:	51                   	push   ecx
c0014f26:	51                   	push   ecx
c0014f27:	50                   	push   eax
c0014f28:	52                   	push   edx
c0014f29:	e8 a5 4e ff ff       	call   c0009dd3 <realloc>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014f34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f37:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014f3a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014f3e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014f42:	b9 08 00 00 00       	mov    ecx,0x8
c0014f47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f49:	31 f6                	xor    esi,esi
c0014f4b:	50                   	push   eax
c0014f4c:	68 00 01 00 00       	push   0x100
c0014f51:	6a 00                	push   0x0
c0014f53:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014f57:	50                   	push   eax
c0014f58:	e8 37 b7 fe ff       	call   c0000694 <memset>
c0014f5d:	83 c4 10             	add    esp,0x10
c0014f60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f68:	eb 0f                	jmp    c0014f79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f6a:	3c 3d                	cmp    al,0x3d
c0014f6c:	74 07                	je     c0014f75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014f6e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014f72:	46                   	inc    esi
c0014f73:	eb 04                	jmp    c0014f79 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f75:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014f79:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f7e:	0f 85 c6 fe ff ff    	jne    c0014e4a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014f84:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f8a:	5b                   	pop    ebx
c0014f8b:	5e                   	pop    esi
c0014f8c:	5f                   	pop    edi
c0014f8d:	5d                   	pop    ebp
c0014f8e:	c3                   	ret    
c0014f8f:	90                   	nop

c0014f90 <EnvVarContainer::__loadSystem()>:
c0014f90:	83 ec 10             	sub    esp,0x10
c0014f93:	68 20 86 02 c0       	push   0xc0028620
c0014f98:	68 29 67 02 c0       	push   0xc0026729
c0014f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fa1:	e8 04 fe ff ff       	call   c0014daa <EnvVarContainer::loadFrom(char const*, char const*)>
c0014fa6:	83 c4 1c             	add    esp,0x1c
c0014fa9:	c3                   	ret    

c0014faa <EnvVarContainer::__loadUser()>:
c0014faa:	c3                   	ret    
c0014fab:	90                   	nop

c0014fac <EnvVarContainer::EnvVarContainer(Process*)>:
c0014fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014fbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014fc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014fcc:	90                   	nop
c0014fcd:	c3                   	ret    

c0014fce <EnvVarContainer::~EnvVarContainer()>:
c0014fce:	83 ec 0c             	sub    esp,0xc
c0014fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fd8:	85 c0                	test   eax,eax
c0014fda:	74 1d                	je     c0014ff9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fe2:	85 c0                	test   eax,eax
c0014fe4:	74 13                	je     c0014ff9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	50                   	push   eax
c0014ff1:	e8 01 4e ff ff       	call   c0009df7 <free>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	90                   	nop
c0014ffa:	83 c4 0c             	add    esp,0xc
c0014ffd:	c3                   	ret    

c0014ffe <Krnl::getEnv(Process*, char const*)>:
c0014ffe:	53                   	push   ebx
c0014fff:	83 ec 08             	sub    esp,0x8
c0015002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015006:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001500a:	39 05 90 a1 02 c0    	cmp    DWORD PTR ds:0xc002a190,eax
c0015010:	74 04                	je     c0015016 <Krnl::getEnv(Process*, char const*)+0x18>
c0015012:	85 c0                	test   eax,eax
c0015014:	75 0b                	jne    c0015021 <Krnl::getEnv(Process*, char const*)+0x23>
c0015016:	a1 14 97 02 c0       	mov    eax,ds:0xc0029714
c001501b:	85 c0                	test   eax,eax
c001501d:	75 19                	jne    c0015038 <Krnl::getEnv(Process*, char const*)+0x3a>
c001501f:	eb 27                	jmp    c0015048 <Krnl::getEnv(Process*, char const*)+0x4a>
c0015021:	52                   	push   edx
c0015022:	52                   	push   edx
c0015023:	53                   	push   ebx
c0015024:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001502a:	e8 79 fc ff ff       	call   c0014ca8 <EnvVarContainer::getEnv(char const*)>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	85 c0                	test   eax,eax
c0015034:	75 28                	jne    c001505e <Krnl::getEnv(Process*, char const*)+0x60>
c0015036:	eb de                	jmp    c0015016 <Krnl::getEnv(Process*, char const*)+0x18>
c0015038:	52                   	push   edx
c0015039:	52                   	push   edx
c001503a:	53                   	push   ebx
c001503b:	50                   	push   eax
c001503c:	e8 67 fc ff ff       	call   c0014ca8 <EnvVarContainer::getEnv(char const*)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	85 c0                	test   eax,eax
c0015046:	75 16                	jne    c001505e <Krnl::getEnv(Process*, char const*)+0x60>
c0015048:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001504c:	a1 18 97 02 c0       	mov    eax,ds:0xc0029718
c0015051:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015055:	83 c4 08             	add    esp,0x8
c0015058:	5b                   	pop    ebx
c0015059:	e9 4a fc ff ff       	jmp    c0014ca8 <EnvVarContainer::getEnv(char const*)>
c001505e:	83 c4 08             	add    esp,0x8
c0015061:	5b                   	pop    ebx
c0015062:	c3                   	ret    

c0015063 <Krnl::setEnvSystem(char const*, char const*)>:
c0015063:	83 ec 10             	sub    esp,0x10
c0015066:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001506a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001506e:	ff 35 18 97 02 c0    	push   DWORD PTR ds:0xc0029718
c0015074:	e8 6d fc ff ff       	call   c0014ce6 <EnvVarContainer::setEnv(char const*, char const*)>
c0015079:	83 c4 1c             	add    esp,0x1c
c001507c:	c3                   	ret    

c001507d <Krnl::setEnvUser(char const*, char const*)>:
c001507d:	a1 14 97 02 c0       	mov    eax,ds:0xc0029714
c0015082:	85 c0                	test   eax,eax
c0015084:	74 15                	je     c001509b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0015086:	83 ec 10             	sub    esp,0x10
c0015089:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001508d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015091:	50                   	push   eax
c0015092:	e8 4f fc ff ff       	call   c0014ce6 <EnvVarContainer::setEnv(char const*, char const*)>
c0015097:	83 c4 1c             	add    esp,0x1c
c001509a:	c3                   	ret    
c001509b:	c3                   	ret    

c001509c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001509c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150a0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00150a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150aa:	e9 37 fc ff ff       	jmp    c0014ce6 <EnvVarContainer::setEnv(char const*, char const*)>

c00150af <Krnl::deleteEnvSystem(char const*)>:
c00150af:	c3                   	ret    

c00150b0 <Krnl::deleteEnvUser(char const*)>:
c00150b0:	c3                   	ret    

c00150b1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00150b1:	c3                   	ret    

c00150b2 <Krnl::newProcessEnv(Process*)>:
c00150b2:	83 ec 28             	sub    esp,0x28
c00150b5:	6a 0c                	push   0xc
c00150b7:	e8 2b 4d ff ff       	call   c0009de7 <malloc>
c00150bc:	5a                   	pop    edx
c00150bd:	59                   	pop    ecx
c00150be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150c2:	50                   	push   eax
c00150c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150c7:	e8 e0 fe ff ff       	call   c0014fac <EnvVarContainer::EnvVarContainer(Process*)>
c00150cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150d0:	83 c4 2c             	add    esp,0x2c
c00150d3:	c3                   	ret    

c00150d4 <Krnl::copyProcessEnv(Process*, Process*)>:
c00150d4:	57                   	push   edi
c00150d5:	56                   	push   esi
c00150d6:	53                   	push   ebx
c00150d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150db:	83 ec 0c             	sub    esp,0xc
c00150de:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00150e4:	6a 0c                	push   0xc
c00150e6:	e8 fc 4c ff ff       	call   c0009de7 <malloc>
c00150eb:	89 c3                	mov    ebx,eax
c00150ed:	58                   	pop    eax
c00150ee:	5a                   	pop    edx
c00150ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150f3:	53                   	push   ebx
c00150f4:	e8 b3 fe ff ff       	call   c0014fac <EnvVarContainer::EnvVarContainer(Process*)>
c00150f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00150fb:	89 03                	mov    DWORD PTR [ebx],eax
c00150fd:	c1 e0 03             	shl    eax,0x3
c0015100:	89 04 24             	mov    DWORD PTR [esp],eax
c0015103:	e8 df 4c ff ff       	call   c0009de7 <malloc>
c0015108:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001510b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001510d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0015110:	c1 e1 03             	shl    ecx,0x3
c0015113:	89 c7                	mov    edi,eax
c0015115:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	89 d8                	mov    eax,ebx
c001511c:	5b                   	pop    ebx
c001511d:	5e                   	pop    esi
c001511e:	5f                   	pop    edi
c001511f:	c3                   	ret    

c0015120 <Krnl::loadSystemEnv()>:
c0015120:	53                   	push   ebx
c0015121:	83 ec 14             	sub    esp,0x14
c0015124:	6a 0c                	push   0xc
c0015126:	e8 bc 4c ff ff       	call   c0009de7 <malloc>
c001512b:	89 c3                	mov    ebx,eax
c001512d:	58                   	pop    eax
c001512e:	5a                   	pop    edx
c001512f:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0015135:	53                   	push   ebx
c0015136:	e8 71 fe ff ff       	call   c0014fac <EnvVarContainer::EnvVarContainer(Process*)>
c001513b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513e:	89 1d 18 97 02 c0    	mov    DWORD PTR ds:0xc0029718,ebx
c0015144:	e8 47 fe ff ff       	call   c0014f90 <EnvVarContainer::__loadSystem()>
c0015149:	83 c4 18             	add    esp,0x18
c001514c:	5b                   	pop    ebx
c001514d:	c3                   	ret    

c001514e <Krnl::loadUserEnv()>:
c001514e:	53                   	push   ebx
c001514f:	83 ec 14             	sub    esp,0x14
c0015152:	6a 0c                	push   0xc
c0015154:	e8 8e 4c ff ff       	call   c0009de7 <malloc>
c0015159:	89 c3                	mov    ebx,eax
c001515b:	58                   	pop    eax
c001515c:	5a                   	pop    edx
c001515d:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0015163:	53                   	push   ebx
c0015164:	e8 43 fe ff ff       	call   c0014fac <EnvVarContainer::EnvVarContainer(Process*)>
c0015169:	89 1d 14 97 02 c0    	mov    DWORD PTR ds:0xc0029714,ebx
c001516f:	83 c4 18             	add    esp,0x18
c0015172:	5b                   	pop    ebx
c0015173:	c3                   	ret    

c0015174 <Krnl::flushEnv()>:
c0015174:	c3                   	ret    

c0015175 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015179:	8b 15 14 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029714
c001517f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015185:	a1 18 97 02 c0       	mov    eax,ds:0xc0029718
c001518a:	8b 00                	mov    eax,DWORD PTR [eax]
c001518c:	03 01                	add    eax,DWORD PTR [ecx]
c001518e:	85 d2                	test   edx,edx
c0015190:	74 02                	je     c0015194 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0015192:	03 02                	add    eax,DWORD PTR [edx]
c0015194:	c3                   	ret    

c0015195 <Krnl::getProcessEnvPair(Process*, int)>:
c0015195:	57                   	push   edi
c0015196:	56                   	push   esi
c0015197:	8b 35 14 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029714
c001519d:	53                   	push   ebx
c001519e:	85 f6                	test   esi,esi
c00151a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151a8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00151ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00151b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00151b4:	75 16                	jne    c00151cc <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00151b6:	39 c2                	cmp    edx,eax
c00151b8:	7c 16                	jl     c00151d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00151ba:	8b 0d 18 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029718
c00151c0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00151c2:	01 c6                	add    esi,eax
c00151c4:	39 d6                	cmp    esi,edx
c00151c6:	7e 3c                	jle    c0015204 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00151c8:	29 c2                	sub    edx,eax
c00151ca:	eb 04                	jmp    c00151d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00151cc:	39 c2                	cmp    edx,eax
c00151ce:	7d 05                	jge    c00151d5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00151d0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00151d3:	eb 20                	jmp    c00151f5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00151d5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00151d7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00151da:	39 d1                	cmp    ecx,edx
c00151dc:	7e 04                	jle    c00151e2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00151de:	29 c2                	sub    edx,eax
c00151e0:	eb 10                	jmp    c00151f2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00151e2:	8b 35 18 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029718
c00151e8:	03 0e                	add    ecx,DWORD PTR [esi]
c00151ea:	39 d1                	cmp    ecx,edx
c00151ec:	7e 16                	jle    c0015204 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00151ee:	29 c2                	sub    edx,eax
c00151f0:	29 fa                	sub    edx,edi
c00151f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00151f5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00151f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00151fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00151fd:	89 03                	mov    DWORD PTR [ebx],eax
c00151ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0015202:	eb 1d                	jmp    c0015221 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0015204:	83 ec 0c             	sub    esp,0xc
c0015207:	68 4b 67 02 c0       	push   0xc002674b
c001520c:	e8 18 00 00 00       	call   c0015229 <Krnl::panic(char const*)>
c0015211:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0015217:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	89 d8                	mov    eax,ebx
c0015223:	5b                   	pop    ebx
c0015224:	5e                   	pop    esi
c0015225:	5f                   	pop    edi
c0015226:	c2 04 00             	ret    0x4

c0015229 <Krnl::panic(char const*)>:
c0015229:	53                   	push   ebx
c001522a:	83 ec 10             	sub    esp,0x10
c001522d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015231:	fa                   	cli    
c0015232:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0015239:	53                   	push   ebx
c001523a:	68 65 67 02 c0       	push   0xc0026765
c001523f:	e8 05 7f ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	a1 68 92 02 c0       	mov    eax,ds:0xc0029268
c001524c:	85 c0                	test   eax,eax
c001524e:	74 0d                	je     c001525d <Krnl::panic(char const*)+0x34>
c0015250:	a1 6c 8d 02 c0       	mov    eax,ds:0xc0028d6c
c0015255:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015258:	0f 22 d8             	mov    cr3,eax
c001525b:	eb fe                	jmp    c001525b <Krnl::panic(char const*)+0x32>
c001525d:	50                   	push   eax
c001525e:	6a 01                	push   0x1
c0015260:	6a 0f                	push   0xf
c0015262:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015268:	e8 c7 5a ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001526d:	58                   	pop    eax
c001526e:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015274:	e8 dd 5f ff ff       	call   c000b256 <VgaText::clearScreen()>
c0015279:	58                   	pop    eax
c001527a:	5a                   	pop    edx
c001527b:	68 bc 67 02 c0       	push   0xc00267bc
c0015280:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015286:	e8 e9 5a ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c001528b:	83 c4 0c             	add    esp,0xc
c001528e:	6a 01                	push   0x1
c0015290:	6a 0f                	push   0xf
c0015292:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015298:	e8 97 5a ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001529d:	59                   	pop    ecx
c001529e:	58                   	pop    eax
c001529f:	68 7e 67 02 c0       	push   0xc002677e
c00152a4:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00152aa:	e8 33 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152af:	58                   	pop    eax
c00152b0:	5a                   	pop    edx
c00152b1:	68 08 68 02 c0       	push   0xc0026808
c00152b6:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00152bc:	e8 21 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152c1:	59                   	pop    ecx
c00152c2:	58                   	pop    eax
c00152c3:	68 9a 67 02 c0       	push   0xc002679a
c00152c8:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00152ce:	e8 0f 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152d3:	58                   	pop    eax
c00152d4:	5a                   	pop    edx
c00152d5:	53                   	push   ebx
c00152d6:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00152dc:	e8 01 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152e1:	59                   	pop    ecx
c00152e2:	5b                   	pop    ebx
c00152e3:	68 ba 67 02 c0       	push   0xc00267ba
c00152e8:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00152ee:	e8 ef 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152f3:	58                   	pop    eax
c00152f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152f8:	e8 50 32 00 00       	call   c001854d <Thr::getDriverNameFromAddress(unsigned long)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	89 c3                	mov    ebx,eax
c0015302:	85 c0                	test   eax,eax
c0015304:	0f 84 32 01 00 00    	je     c001543c <Krnl::panic(char const*)+0x213>
c001530a:	51                   	push   ecx
c001530b:	51                   	push   ecx
c001530c:	68 44 68 02 c0       	push   0xc0026844
c0015311:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015317:	e8 c6 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001531c:	58                   	pop    eax
c001531d:	5a                   	pop    edx
c001531e:	68 9a 67 02 c0       	push   0xc002679a
c0015323:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015329:	e8 b4 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001532e:	59                   	pop    ecx
c001532f:	58                   	pop    eax
c0015330:	53                   	push   ebx
c0015331:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015337:	e8 a6 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	50                   	push   eax
c0015340:	50                   	push   eax
c0015341:	68 b9 67 02 c0       	push   0xc00267b9
c0015346:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c001534c:	e8 91 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015351:	5a                   	pop    edx
c0015352:	59                   	pop    ecx
c0015353:	68 9c 68 02 c0       	push   0xc002689c
c0015358:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c001535e:	e8 7f 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015363:	5b                   	pop    ebx
c0015364:	58                   	pop    eax
c0015365:	68 dc 68 02 c0       	push   0xc00268dc
c001536a:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015370:	e8 6d 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015375:	58                   	pop    eax
c0015376:	5a                   	pop    edx
c0015377:	68 a5 67 02 c0       	push   0xc00267a5
c001537c:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015382:	e8 5b 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015387:	59                   	pop    ecx
c0015388:	5b                   	pop    ebx
c0015389:	68 20 69 02 c0       	push   0xc0026920
c001538e:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015394:	e8 49 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015399:	58                   	pop    eax
c001539a:	5a                   	pop    edx
c001539b:	68 bd 67 02 c0       	push   0xc00267bd
c00153a0:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153a6:	e8 37 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153ab:	0f 20 c0             	mov    eax,cr0
c00153ae:	59                   	pop    ecx
c00153af:	5b                   	pop    ebx
c00153b0:	50                   	push   eax
c00153b1:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153b7:	e8 e0 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153bc:	58                   	pop    eax
c00153bd:	5a                   	pop    edx
c00153be:	68 c7 67 02 c0       	push   0xc00267c7
c00153c3:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153c9:	e8 14 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153ce:	0f 20 d0             	mov    eax,cr2
c00153d1:	59                   	pop    ecx
c00153d2:	5b                   	pop    ebx
c00153d3:	50                   	push   eax
c00153d4:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153da:	e8 bd 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153df:	58                   	pop    eax
c00153e0:	5a                   	pop    edx
c00153e1:	68 d1 67 02 c0       	push   0xc00267d1
c00153e6:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153ec:	e8 f1 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153f1:	0f 20 d8             	mov    eax,cr3
c00153f4:	59                   	pop    ecx
c00153f5:	5b                   	pop    ebx
c00153f6:	50                   	push   eax
c00153f7:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c00153fd:	e8 9a 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c0015402:	58                   	pop    eax
c0015403:	5a                   	pop    edx
c0015404:	68 e4 67 02 c0       	push   0xc00267e4
c0015409:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c001540f:	e8 ce 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015414:	0f 20 e0             	mov    eax,cr4
c0015417:	59                   	pop    ecx
c0015418:	5b                   	pop    ebx
c0015419:	50                   	push   eax
c001541a:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015420:	e8 77 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c0015425:	58                   	pop    eax
c0015426:	5a                   	pop    edx
c0015427:	68 ee 67 02 c0       	push   0xc00267ee
c001542c:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015432:	e8 ab 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	eb fe                	jmp    c001543a <Krnl::panic(char const*)+0x211>
c001543c:	51                   	push   ecx
c001543d:	51                   	push   ecx
c001543e:	68 70 68 02 c0       	push   0xc0026870
c0015443:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015449:	e8 94 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001544e:	5b                   	pop    ebx
c001544f:	58                   	pop    eax
c0015450:	68 9a 67 02 c0       	push   0xc002679a
c0015455:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c001545b:	e8 82 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015460:	58                   	pop    eax
c0015461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015466:	5a                   	pop    edx
c0015467:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001546a:	83 c0 0c             	add    eax,0xc
c001546d:	50                   	push   eax
c001546e:	ff 35 c4 8c 02 c0    	push   DWORD PTR ds:0xc0028cc4
c0015474:	e8 69 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	e9 be fe ff ff       	jmp    c001533f <Krnl::panic(char const*)+0x116>

c0015481 <Krnl::powerThread(void*)>:
c0015481:	53                   	push   ebx
c0015482:	83 ec 08             	sub    esp,0x8
c0015485:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001548a:	48                   	dec    eax
c001548b:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0015490:	75 01                	jne    c0015493 <Krnl::powerThread(void*)+0x12>
c0015492:	fb                   	sti    
c0015493:	52                   	push   edx
c0015494:	52                   	push   edx
c0015495:	ff 35 84 97 02 c0    	push   DWORD PTR ds:0xc0029784
c001549b:	68 46 69 02 c0       	push   0xc0026946
c00154a0:	e8 a4 7c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00154a5:	59                   	pop    ecx
c00154a6:	8b 1d 74 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029774
c00154ac:	58                   	pop    eax
c00154ad:	c6 05 40 97 02 c0 00 	mov    BYTE PTR ds:0xc0029740,0x0
c00154b4:	53                   	push   ebx
c00154b5:	68 50 69 02 c0       	push   0xc0026950
c00154ba:	e8 8a 7c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00154bf:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00154c6:	e8 c1 3d 00 00       	call   c001928c <sleep(unsigned int)>
c00154cb:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c00154d0:	83 c4 10             	add    esp,0x10
c00154d3:	83 c0 0a             	add    eax,0xa
c00154d6:	85 db                	test   ebx,ebx
c00154d8:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c00154dd:	74 b4                	je     c0015493 <Krnl::powerThread(void*)+0x12>
c00154df:	39 d8                	cmp    eax,ebx
c00154e1:	7e b0                	jle    c0015493 <Krnl::powerThread(void*)+0x12>
c00154e3:	83 ec 0c             	sub    esp,0xc
c00154e6:	68 68 69 02 c0       	push   0xc0026968
c00154eb:	e8 59 7c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00154f0:	58                   	pop    eax
c00154f1:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c00154f7:	e8 16 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	eb 92                	jmp    c0015493 <Krnl::powerThread(void*)+0x12>

c0015501 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0015501:	57                   	push   edi
c0015502:	b9 09 00 00 00       	mov    ecx,0x9
c0015507:	56                   	push   esi
c0015508:	bf 60 97 02 c0       	mov    edi,0xc0029760
c001550d:	fc                   	cld    
c001550e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015512:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015514:	5e                   	pop    esi
c0015515:	5f                   	pop    edi
c0015516:	c3                   	ret    

c0015517 <Krnl::userIOReceived()>:
c0015517:	c7 05 84 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029784,0x0
c0015521:	c3                   	ret    

c0015522 <Krnl::handlePowerButton()>:
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	a1 60 97 02 c0       	mov    eax,ds:0xc0029760
c001552a:	83 f8 02             	cmp    eax,0x2
c001552d:	75 10                	jne    c001553f <Krnl::handlePowerButton()+0x1d>
c001552f:	83 ec 0c             	sub    esp,0xc
c0015532:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c0015538:	e8 a5 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c001553d:	eb 11                	jmp    c0015550 <Krnl::handlePowerButton()+0x2e>
c001553f:	48                   	dec    eax
c0015540:	75 11                	jne    c0015553 <Krnl::handlePowerButton()+0x31>
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c001554b:	e8 c2 3d ff ff       	call   c0009312 <Computer::sleep()>
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	83 c4 0c             	add    esp,0xc
c0015556:	c3                   	ret    

c0015557 <Krnl::handleSleepButton()>:
c0015557:	83 ec 0c             	sub    esp,0xc
c001555a:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c001555f:	83 f8 02             	cmp    eax,0x2
c0015562:	75 10                	jne    c0015574 <Krnl::handleSleepButton()+0x1d>
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c001556d:	e8 70 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c0015572:	eb 11                	jmp    c0015585 <Krnl::handleSleepButton()+0x2e>
c0015574:	48                   	dec    eax
c0015575:	75 11                	jne    c0015588 <Krnl::handleSleepButton()+0x31>
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c0015580:	e8 8d 3d ff ff       	call   c0009312 <Computer::sleep()>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	83 c4 0c             	add    esp,0xc
c001558b:	c3                   	ret    

c001558c <Krnl::setupPowerManager()>:
c001558c:	83 ec 0c             	sub    esp,0xc
c001558f:	c7 05 84 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029784,0x0
c0015599:	68 f0 00 00 00       	push   0xf0
c001559e:	c6 05 40 97 02 c0 00 	mov    BYTE PTR ds:0xc0029740,0x0
c00155a5:	6a 00                	push   0x0
c00155a7:	68 81 54 01 c0       	push   0xc0015481
c00155ac:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c00155b2:	e8 b1 37 00 00       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c00155b7:	c7 05 60 97 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029760,0x2
c00155c1:	c7 05 64 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029764,0x1
c00155cb:	c7 05 68 97 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x3
c00155d5:	c7 05 6c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002976c,0x0
c00155df:	c7 05 78 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029778,0x0
c00155e9:	c7 05 70 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029770,0x0
c00155f3:	c7 05 7c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002977c,0x0
c00155fd:	c7 05 74 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029774,0x3c
c0015607:	c7 05 80 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x3c
c0015611:	83 c4 1c             	add    esp,0x1c
c0015614:	c3                   	ret    

c0015615 <Krnl::initRNG()>:
c0015615:	56                   	push   esi
c0015616:	53                   	push   ebx
c0015617:	52                   	push   edx
c0015618:	80 3d 90 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029790,0x0
c001561f:	74 15                	je     c0015636 <Krnl::initRNG()+0x21>
c0015621:	83 ec 0c             	sub    esp,0xc
c0015624:	68 75 69 02 c0       	push   0xc0026975
c0015629:	e8 fb fb ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	e9 b4 00 00 00       	jmp    c00156ea <Krnl::initRNG()+0xd5>
c0015636:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001563b:	c7 05 88 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029788,0x0
c0015645:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001564b:	c7 05 8c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002978c,0x0
c0015655:	f6 80 90 11 00 00 01 	test   BYTE PTR [eax+0x1190],0x1
c001565c:	74 1f                	je     c001567d <Krnl::initRNG()+0x68>
c001565e:	e8 b6 ab fe ff       	call   c0000219 <getRDRAND>
c0015663:	c7 05 88 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029788,0x0
c001566d:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c0015672:	e8 a2 ab fe ff       	call   c0000219 <getRDRAND>
c0015677:	09 05 88 97 02 c0    	or     DWORD PTR ds:0xc0029788,eax
c001567d:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0015682:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015688:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001568f:	74 10                	je     c00156a1 <Krnl::initRNG()+0x8c>
c0015691:	0f 31                	rdtsc  
c0015693:	89 c1                	mov    ecx,eax
c0015695:	31 15 8c 97 02 c0    	xor    DWORD PTR ds:0xc002978c,edx
c001569b:	31 0d 88 97 02 c0    	xor    DWORD PTR ds:0xc0029788,ecx
c00156a1:	8b 0d 88 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029788
c00156a7:	8b 1d 8c 97 02 c0    	mov    ebx,DWORD PTR ds:0xc002978c
c00156ad:	89 c8                	mov    eax,ecx
c00156af:	8b 35 6c 92 02 c0    	mov    esi,DWORD PTR ds:0xc002926c
c00156b5:	0f a4 d9 11          	shld   ecx,ebx,0x11
c00156b9:	c6 05 90 97 02 c0 01 	mov    BYTE PTR ds:0xc0029790,0x1
c00156c0:	31 ce                	xor    esi,ecx
c00156c2:	0f a4 c3 11          	shld   ebx,eax,0x11
c00156c6:	89 f0                	mov    eax,esi
c00156c8:	89 da                	mov    edx,ebx
c00156ca:	0f ac d0 1b          	shrd   eax,edx,0x1b
c00156ce:	0f ac f2 1b          	shrd   edx,esi,0x1b
c00156d2:	35 f6 5d 72 45       	xor    eax,0x45725df6
c00156d7:	89 d1                	mov    ecx,edx
c00156d9:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00156de:	89 c8                	mov    eax,ecx
c00156e0:	35 89 c3 8d 30       	xor    eax,0x308dc389
c00156e5:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c00156ea:	58                   	pop    eax
c00156eb:	5b                   	pop    ebx
c00156ec:	5e                   	pop    esi
c00156ed:	c3                   	ret    

c00156ee <Krnl::rand()>:
c00156ee:	53                   	push   ebx
c00156ef:	83 ec 08             	sub    esp,0x8
c00156f2:	80 3d 90 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029790,0x0
c00156f9:	75 10                	jne    c001570b <Krnl::rand()+0x1d>
c00156fb:	83 ec 0c             	sub    esp,0xc
c00156fe:	68 8c 69 02 c0       	push   0xc002698c
c0015703:	e8 21 fb ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	69 05 88 97 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029788,0x2875
c0015715:	69 0d 8c 97 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002978c,0xa2e7b175
c001571f:	01 c1                	add    ecx,eax
c0015721:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0015726:	f7 25 88 97 02 c0    	mul    DWORD PTR ds:0xc0029788
c001572c:	01 ca                	add    edx,ecx
c001572e:	05 ef 04 b5 00       	add    eax,0xb504ef
c0015733:	83 d2 00             	adc    edx,0x0
c0015736:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c001573b:	0f b7 da             	movzx  ebx,dx
c001573e:	89 1d 8c 97 02 c0    	mov    DWORD PTR ds:0xc002978c,ebx
c0015744:	89 da                	mov    edx,ebx
c0015746:	83 c4 08             	add    esp,0x8
c0015749:	0f ac d0 10          	shrd   eax,edx,0x10
c001574d:	5b                   	pop    ebx
c001574e:	c3                   	ret    
c001574f:	90                   	nop

c0015750 <Net::switchEndian16(unsigned short)>:
c0015750:	83 ec 04             	sub    esp,0x4
c0015753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015757:	66 89 04 24          	mov    WORD PTR [esp],ax
c001575b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001575f:	c1 f8 08             	sar    eax,0x8
c0015762:	89 c2                	mov    edx,eax
c0015764:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015768:	c1 e0 08             	shl    eax,0x8
c001576b:	09 d0                	or     eax,edx
c001576d:	83 c4 04             	add    esp,0x4
c0015770:	c3                   	ret    
c0015771:	8d 76 00             	lea    esi,[esi+0x0]

c0015774 <Net::switchEndian32(unsigned int)>:
c0015774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015778:	c1 e8 18             	shr    eax,0x18
c001577b:	89 c2                	mov    edx,eax
c001577d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015781:	c1 e0 08             	shl    eax,0x8
c0015784:	25 00 00 ff 00       	and    eax,0xff0000
c0015789:	09 c2                	or     edx,eax
c001578b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001578f:	c1 e8 08             	shr    eax,0x8
c0015792:	25 00 ff 00 00       	and    eax,0xff00
c0015797:	09 c2                	or     edx,eax
c0015799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001579d:	c1 e0 18             	shl    eax,0x18
c00157a0:	09 d0                	or     eax,edx
c00157a2:	c3                   	ret    
c00157a3:	90                   	nop

c00157a4 <Net::crc32Calc(unsigned char*, int)>:
c00157a4:	83 ec 10             	sub    esp,0x10
c00157a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00157ac:	75 0a                	jne    c00157b8 <Net::crc32Calc(unsigned char*, int)+0x14>
c00157ae:	b8 00 00 00 00       	mov    eax,0x0
c00157b3:	e9 8c 00 00 00       	jmp    c0015844 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00157b8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00157bd:	7f 09                	jg     c00157c8 <Net::crc32Calc(unsigned char*, int)+0x24>
c00157bf:	b8 00 00 00 00       	mov    eax,0x0
c00157c4:	eb 7e                	jmp    c0015844 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00157c6:	66 90                	xchg   ax,ax
c00157c8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00157d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00157d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00157dc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00157e0:	7d 5a                	jge    c001583c <Net::crc32Calc(unsigned char*, int)+0x98>
c00157e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00157e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157ea:	01 d0                	add    eax,edx
c00157ec:	8a 00                	mov    al,BYTE PTR [eax]
c00157ee:	0f b6 c0             	movzx  eax,al
c00157f1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00157f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015800:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015805:	7f 2d                	jg     c0015834 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001580b:	83 e0 01             	and    eax,0x1
c001580e:	74 10                	je     c0015820 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0015810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015814:	d1 e8                	shr    eax,1
c0015816:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001581b:	eb 0b                	jmp    c0015828 <Net::crc32Calc(unsigned char*, int)+0x84>
c001581d:	8d 76 00             	lea    esi,[esi+0x0]
c0015820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015824:	d1 e8                	shr    eax,1
c0015826:	66 90                	xchg   ax,ax
c0015828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001582c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015830:	eb ce                	jmp    c0015800 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0015832:	66 90                	xchg   ax,ax
c0015834:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015838:	eb 9e                	jmp    c00157d8 <Net::crc32Calc(unsigned char*, int)+0x34>
c001583a:	66 90                	xchg   ax,ax
c001583c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015840:	f7 d0                	not    eax
c0015842:	66 90                	xchg   ax,ax
c0015844:	83 c4 10             	add    esp,0x10
c0015847:	c3                   	ret    

c0015848 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0015848:	57                   	push   edi
c0015849:	56                   	push   esi
c001584a:	53                   	push   ebx
c001584b:	83 ec 60             	sub    esp,0x60
c001584e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015855:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015859:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015861:	8d 76 00             	lea    esi,[esi+0x0]
c0015864:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015869:	7f 1d                	jg     c0015888 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001586b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015872:	8d 50 01             	lea    edx,[eax+0x1]
c0015875:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001587c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001587f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0015883:	eb df                	jmp    c0015864 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015885:	8d 76 00             	lea    esi,[esi+0x0]
c0015888:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001588f:	8d 50 01             	lea    edx,[eax+0x1]
c0015892:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015899:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001589c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158a7:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00158ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158af:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c00158b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00158c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00158cb:	89 c6                	mov    esi,eax
c00158cd:	89 d7                	mov    edi,edx
c00158cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158d1:	89 c8                	mov    eax,ecx
c00158d3:	89 fa                	mov    edx,edi
c00158d5:	89 f3                	mov    ebx,esi
c00158d7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00158db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00158df:	89 04 24             	mov    DWORD PTR [esp],eax
c00158e2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00158f5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00158f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00158fd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015905:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015909:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001590d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015911:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015915:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015919:	89 c6                	mov    esi,eax
c001591b:	89 d7                	mov    edi,edx
c001591d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001591f:	89 c8                	mov    eax,ecx
c0015921:	89 fa                	mov    edx,edi
c0015923:	89 f3                	mov    ebx,esi
c0015925:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015929:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001592d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015931:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015939:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015940:	0f b7 c0             	movzx  eax,ax
c0015943:	c1 f8 08             	sar    eax,0x8
c0015946:	89 c1                	mov    ecx,eax
c0015948:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001594f:	8d 50 01             	lea    edx,[eax+0x1]
c0015952:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015959:	88 ca                	mov    dl,cl
c001595b:	88 10                	mov    BYTE PTR [eax],dl
c001595d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015964:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001596b:	8d 48 01             	lea    ecx,[eax+0x1]
c001596e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015975:	88 10                	mov    BYTE PTR [eax],dl
c0015977:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001597b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001597f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015986:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001598a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001598e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0015992:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015996:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001599a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001599e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00159a2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00159a6:	89 c6                	mov    esi,eax
c00159a8:	89 d7                	mov    edi,edx
c00159aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00159ac:	89 c8                	mov    eax,ecx
c00159ae:	89 fa                	mov    edx,edi
c00159b0:	89 f3                	mov    ebx,esi
c00159b2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00159b6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00159ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00159be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00159c2:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c00159c9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159d0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00159d4:	50                   	push   eax
c00159d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00159d9:	e8 c6 fd ff ff       	call   c00157a4 <Net::crc32Calc(unsigned char*, int)>
c00159de:	83 c4 08             	add    esp,0x8
c00159e1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00159e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159e9:	c1 e8 18             	shr    eax,0x18
c00159ec:	89 c1                	mov    ecx,eax
c00159ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159f5:	8d 50 01             	lea    edx,[eax+0x1]
c00159f8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159ff:	88 ca                	mov    dl,cl
c0015a01:	88 10                	mov    BYTE PTR [eax],dl
c0015a03:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015a07:	c1 e8 10             	shr    eax,0x10
c0015a0a:	89 c1                	mov    ecx,eax
c0015a0c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a13:	8d 50 01             	lea    edx,[eax+0x1]
c0015a16:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a1d:	88 ca                	mov    dl,cl
c0015a1f:	88 10                	mov    BYTE PTR [eax],dl
c0015a21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015a25:	c1 e8 08             	shr    eax,0x8
c0015a28:	89 c1                	mov    ecx,eax
c0015a2a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a31:	8d 50 01             	lea    edx,[eax+0x1]
c0015a34:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a3b:	88 ca                	mov    dl,cl
c0015a3d:	88 10                	mov    BYTE PTR [eax],dl
c0015a3f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a46:	8d 50 01             	lea    edx,[eax+0x1]
c0015a49:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a50:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015a54:	88 10                	mov    BYTE PTR [eax],dl
c0015a56:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015a5a:	83 c4 60             	add    esp,0x60
c0015a5d:	5b                   	pop    ebx
c0015a5e:	5e                   	pop    esi
c0015a5f:	5f                   	pop    edi
c0015a60:	c3                   	ret    
c0015a61:	8d 76 00             	lea    esi,[esi+0x0]

c0015a64 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015a64:	57                   	push   edi
c0015a65:	56                   	push   esi
c0015a66:	53                   	push   ebx
c0015a67:	83 ec 70             	sub    esp,0x70
c0015a6a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a71:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015a75:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015a7d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a84:	83 c0 0e             	add    eax,0xe
c0015a87:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015a8b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015a96:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015a9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015aa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015aaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015aae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015ab2:	89 c6                	mov    esi,eax
c0015ab4:	89 d7                	mov    edi,edx
c0015ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ab8:	89 c8                	mov    eax,ecx
c0015aba:	89 fa                	mov    edx,edi
c0015abc:	89 f3                	mov    ebx,esi
c0015abe:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015ac2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015ac6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015aca:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015ad2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015ad9:	83 c0 08             	add    eax,0x8
c0015adc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015ae0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ae7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015aeb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015af3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015af7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015afb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015aff:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015b03:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015b07:	89 c6                	mov    esi,eax
c0015b09:	89 d7                	mov    edi,edx
c0015b0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b0d:	89 c8                	mov    eax,ecx
c0015b0f:	89 fa                	mov    edx,edi
c0015b11:	89 f3                	mov    ebx,esi
c0015b13:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015b17:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015b1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015b1f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015b27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b2e:	8d 50 01             	lea    edx,[eax+0x1]
c0015b31:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b38:	8a 00                	mov    al,BYTE PTR [eax]
c0015b3a:	0f b6 c0             	movzx  eax,al
c0015b3d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015b42:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b49:	8d 50 01             	lea    edx,[eax+0x1]
c0015b4c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b53:	8a 00                	mov    al,BYTE PTR [eax]
c0015b55:	0f b6 c0             	movzx  eax,al
c0015b58:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015b5d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015b62:	c1 e0 08             	shl    eax,0x8
c0015b65:	89 c2                	mov    edx,eax
c0015b67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015b6b:	09 d0                	or     eax,edx
c0015b6d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b74:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015b78:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015b80:	75 46                	jne    c0015bc8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b89:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b8c:	66 3d dc 05          	cmp    ax,0x5dc
c0015b90:	77 16                	ja     c0015ba8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015b92:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b99:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b9c:	0f b7 c0             	movzx  eax,ax
c0015b9f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015ba6:	eb 20                	jmp    c0015bc8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	68 a8 69 02 c0       	push   0xc00269a8
c0015bb0:	e8 94 75 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0015bb5:	83 c4 10             	add    esp,0x10
c0015bb8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015bbf:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015bc3:	e9 18 01 00 00       	jmp    c0015ce0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015bc8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015bcf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015bd6:	8b 12                	mov    edx,DWORD PTR [edx]
c0015bd8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015bdc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015be3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015beb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015bfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bff:	89 c6                	mov    esi,eax
c0015c01:	89 d7                	mov    edi,edx
c0015c03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015c05:	89 c8                	mov    eax,ecx
c0015c07:	89 fa                	mov    edx,edi
c0015c09:	89 f3                	mov    ebx,esi
c0015c0b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015c0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015c13:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c16:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015c1d:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015c24:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0015c2e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c35:	8a 00                	mov    al,BYTE PTR [eax]
c0015c37:	0f b6 c0             	movzx  eax,al
c0015c3a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015c3e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c45:	8d 50 01             	lea    edx,[eax+0x1]
c0015c48:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c4f:	8a 00                	mov    al,BYTE PTR [eax]
c0015c51:	0f b6 c0             	movzx  eax,al
c0015c54:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015c58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c5f:	8d 50 01             	lea    edx,[eax+0x1]
c0015c62:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c69:	8a 00                	mov    al,BYTE PTR [eax]
c0015c6b:	0f b6 c0             	movzx  eax,al
c0015c6e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015c72:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c79:	8d 50 01             	lea    edx,[eax+0x1]
c0015c7c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c83:	8a 00                	mov    al,BYTE PTR [eax]
c0015c85:	0f b6 c0             	movzx  eax,al
c0015c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015c8c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015c90:	c1 e0 18             	shl    eax,0x18
c0015c93:	89 c2                	mov    edx,eax
c0015c95:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015c99:	c1 e0 10             	shl    eax,0x10
c0015c9c:	09 c2                	or     edx,eax
c0015c9e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015ca2:	c1 e0 08             	shl    eax,0x8
c0015ca5:	09 d0                	or     eax,edx
c0015ca7:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015cab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015caf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015cb6:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015cba:	83 e8 04             	sub    eax,0x4
c0015cbd:	83 ec 08             	sub    esp,0x8
c0015cc0:	50                   	push   eax
c0015cc1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015cc5:	e8 da fa ff ff       	call   c00157a4 <Net::crc32Calc(unsigned char*, int)>
c0015cca:	83 c4 10             	add    esp,0x10
c0015ccd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015cd1:	0f 94 c2             	sete   dl
c0015cd4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015cdb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015cde:	90                   	nop
c0015cdf:	90                   	nop
c0015ce0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015ce7:	83 c4 70             	add    esp,0x70
c0015cea:	5b                   	pop    ebx
c0015ceb:	5e                   	pop    esi
c0015cec:	5f                   	pop    edi
c0015ced:	c2 04 00             	ret    0x4

c0015cf0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015cf0:	55                   	push   ebp
c0015cf1:	57                   	push   edi
c0015cf2:	56                   	push   esi
c0015cf3:	53                   	push   ebx
c0015cf4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015cfa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015d01:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015d03:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015d06:	80 fb 40             	cmp    bl,0x40
c0015d09:	75 1b                	jne    c0015d26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015d0b:	8a 16                	mov    dl,BYTE PTR [esi]
c0015d0d:	84 d2                	test   dl,dl
c0015d0f:	0f 84 f1 00 00 00    	je     c0015e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d15:	8d 46 01             	lea    eax,[esi+0x1]
c0015d18:	80 fa 3a             	cmp    dl,0x3a
c0015d1b:	74 04                	je     c0015d21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015d1d:	89 c6                	mov    esi,eax
c0015d1f:	eb ea                	jmp    c0015d0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015d21:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015d24:	89 c6                	mov    esi,eax
c0015d26:	50                   	push   eax
c0015d27:	6a 40                	push   0x40
c0015d29:	6a 00                	push   0x0
c0015d2b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d2f:	50                   	push   eax
c0015d30:	e8 5f a9 fe ff       	call   c0000694 <memset>
c0015d35:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015d3c:	31 c0                	xor    eax,eax
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015d43:	84 c9                	test   cl,cl
c0015d45:	0f 84 bb 00 00 00    	je     c0015e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d4b:	3d c7 00 00 00       	cmp    eax,0xc7
c0015d50:	0f 8f b0 00 00 00    	jg     c0015e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d56:	80 f9 0a             	cmp    cl,0xa
c0015d59:	0f 85 98 00 00 00    	jne    c0015df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015d5f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015d64:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015d68:	a8 df                	test   al,0xdf
c0015d6a:	0f 94 c1             	sete   cl
c0015d6d:	3c 23                	cmp    al,0x23
c0015d6f:	0f 94 c2             	sete   dl
c0015d72:	08 d1                	or     cl,dl
c0015d74:	75 4a                	jne    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d76:	8d 50 f7             	lea    edx,[eax-0x9]
c0015d79:	80 fa 01             	cmp    dl,0x1
c0015d7c:	76 42                	jbe    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d7e:	3c 5b                	cmp    al,0x5b
c0015d80:	75 42                	jne    c0015dc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015d82:	80 fb 40             	cmp    bl,0x40
c0015d85:	75 39                	jne    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d87:	83 ec 0c             	sub    esp,0xc
c0015d8a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015d8e:	52                   	push   edx
c0015d8f:	e8 1c a9 fe ff       	call   c00006b0 <strlen>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	83 f8 3f             	cmp    eax,0x3f
c0015d9a:	77 6a                	ja     c0015e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d9c:	50                   	push   eax
c0015d9d:	50                   	push   eax
c0015d9e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015da2:	52                   	push   edx
c0015da3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015da7:	52                   	push   edx
c0015da8:	e8 a3 a9 fe ff       	call   c0000750 <strcpy>
c0015dad:	58                   	pop    eax
c0015dae:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015db2:	52                   	push   edx
c0015db3:	e8 f8 a8 fe ff       	call   c00006b0 <strlen>
c0015db8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	31 d2                	xor    edx,edx
c0015dc2:	eb 3a                	jmp    c0015dfe <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015dc4:	80 fb 40             	cmp    bl,0x40
c0015dc7:	74 06                	je     c0015dcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015dc9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015dcd:	eb 20                	jmp    c0015def <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015dcf:	50                   	push   eax
c0015dd0:	50                   	push   eax
c0015dd1:	55                   	push   ebp
c0015dd2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dd6:	50                   	push   eax
c0015dd7:	e8 00 aa fe ff       	call   c00007dc <strcmp>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	85 c0                	test   eax,eax
c0015de1:	75 dd                	jne    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015de3:	eb e4                	jmp    c0015dc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015de5:	8d 50 01             	lea    edx,[eax+0x1]
c0015de8:	80 f9 3d             	cmp    cl,0x3d
c0015deb:	74 1d                	je     c0015e0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015ded:	89 d0                	mov    eax,edx
c0015def:	8a 08                	mov    cl,BYTE PTR [eax]
c0015df1:	84 c9                	test   cl,cl
c0015df3:	75 f0                	jne    c0015de5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015df5:	eb 0f                	jmp    c0015e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015df7:	8d 50 01             	lea    edx,[eax+0x1]
c0015dfa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015dfe:	47                   	inc    edi
c0015dff:	89 d0                	mov    eax,edx
c0015e01:	e9 3b ff ff ff       	jmp    c0015d41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015e06:	31 c0                	xor    eax,eax
c0015e08:	eb 33                	jmp    c0015e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015e0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015e11:	50                   	push   eax
c0015e12:	50                   	push   eax
c0015e13:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015e17:	50                   	push   eax
c0015e18:	56                   	push   esi
c0015e19:	e8 be a9 fe ff       	call   c00007dc <strcmp>
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	85 c0                	test   eax,eax
c0015e23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e27:	75 97                	jne    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015e29:	51                   	push   ecx
c0015e2a:	51                   	push   ecx
c0015e2b:	52                   	push   edx
c0015e2c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015e33:	e8 18 a9 fe ff       	call   c0000750 <strcpy>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	b0 01                	mov    al,0x1
c0015e3d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e43:	5b                   	pop    ebx
c0015e44:	5e                   	pop    esi
c0015e45:	5f                   	pop    edi
c0015e46:	5d                   	pop    ebp
c0015e47:	c3                   	ret    

c0015e48 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e48:	57                   	push   edi
c0015e49:	56                   	push   esi
c0015e4a:	53                   	push   ebx
c0015e4b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015e51:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015e58:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015e5f:	53                   	push   ebx
c0015e60:	e8 4b a8 fe ff       	call   c00006b0 <strlen>
c0015e65:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e68:	89 c7                	mov    edi,eax
c0015e6a:	e8 41 a8 fe ff       	call   c00006b0 <strlen>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e76:	3d ff 00 00 00       	cmp    eax,0xff
c0015e7b:	0f 87 d3 00 00 00    	ja     c0015f54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e81:	57                   	push   edi
c0015e82:	57                   	push   edi
c0015e83:	56                   	push   esi
c0015e84:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e88:	56                   	push   esi
c0015e89:	e8 c2 a8 fe ff       	call   c0000750 <strcpy>
c0015e8e:	58                   	pop    eax
c0015e8f:	5a                   	pop    edx
c0015e90:	68 4a 6d 02 c0       	push   0xc0026d4a
c0015e95:	56                   	push   esi
c0015e96:	e8 f5 a9 fe ff       	call   c0000890 <strcat>
c0015e9b:	59                   	pop    ecx
c0015e9c:	5f                   	pop    edi
c0015e9d:	53                   	push   ebx
c0015e9e:	56                   	push   esi
c0015e9f:	e8 ec a9 fe ff       	call   c0000890 <strcat>
c0015ea4:	58                   	pop    eax
c0015ea5:	5a                   	pop    edx
c0015ea6:	68 f4 69 02 c0       	push   0xc00269f4
c0015eab:	56                   	push   esi
c0015eac:	e8 df a9 fe ff       	call   c0000890 <strcat>
c0015eb1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eb8:	e8 2a 3f ff ff       	call   c0009de7 <malloc>
c0015ebd:	83 c4 0c             	add    esp,0xc
c0015ec0:	89 c3                	mov    ebx,eax
c0015ec2:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0015ec8:	56                   	push   esi
c0015ec9:	50                   	push   eax
c0015eca:	e8 e5 77 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0015ecf:	83 c4 10             	add    esp,0x10
c0015ed2:	85 db                	test   ebx,ebx
c0015ed4:	74 7e                	je     c0015f54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015ed6:	51                   	push   ecx
c0015ed7:	51                   	push   ecx
c0015ed8:	6a 01                	push   0x1
c0015eda:	53                   	push   ebx
c0015edb:	e8 ae 78 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0015ee0:	83 c4 10             	add    esp,0x10
c0015ee3:	85 c0                	test   eax,eax
c0015ee5:	74 08                	je     c0015eef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015ee7:	83 ec 0c             	sub    esp,0xc
c0015eea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eec:	53                   	push   ebx
c0015eed:	eb 5f                	jmp    c0015f4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015eef:	52                   	push   edx
c0015ef0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015ef4:	50                   	push   eax
c0015ef5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ef9:	50                   	push   eax
c0015efa:	53                   	push   ebx
c0015efb:	e8 3a 7b ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c0015f00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	89 c1                	mov    ecx,eax
c0015f09:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015f0d:	74 31                	je     c0015f40 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015f0f:	83 ec 0c             	sub    esp,0xc
c0015f12:	50                   	push   eax
c0015f13:	e8 cf 3e ff ff       	call   c0009de7 <malloc>
c0015f18:	89 c6                	mov    esi,eax
c0015f1a:	58                   	pop    eax
c0015f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f1d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015f21:	52                   	push   edx
c0015f22:	56                   	push   esi
c0015f23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f2b:	53                   	push   ebx
c0015f2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f2f:	83 c4 20             	add    esp,0x20
c0015f32:	85 c0                	test   eax,eax
c0015f34:	75 0a                	jne    c0015f40 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015f36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f3a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015f3e:	74 18                	je     c0015f58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	53                   	push   ebx
c0015f44:	e8 a3 78 ff ff       	call   c000d7ec <File::close()>
c0015f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	31 c0                	xor    eax,eax
c0015f56:	eb 3b                	jmp    c0015f93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015f58:	83 ec 0c             	sub    esp,0xc
c0015f5b:	53                   	push   ebx
c0015f5c:	e8 8b 78 ff ff       	call   c000d7ec <File::close()>
c0015f61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f69:	83 c4 0c             	add    esp,0xc
c0015f6c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f73:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f7a:	56                   	push   esi
c0015f7b:	e8 70 fd ff ff       	call   c0015cf0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f80:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f83:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f87:	e8 6b 3e ff ff       	call   c0009df7 <free>
c0015f8c:	83 c4 10             	add    esp,0x10
c0015f8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f93:	81 c4 20 01 00 00    	add    esp,0x120
c0015f99:	5b                   	pop    ebx
c0015f9a:	5e                   	pop    esi
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    

c0015f9d <Reg::getLine(char*, char*, char*)>:
c0015f9d:	57                   	push   edi
c0015f9e:	56                   	push   esi
c0015f9f:	53                   	push   ebx
c0015fa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fa4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015fa8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015fac:	57                   	push   edi
c0015fad:	56                   	push   esi
c0015fae:	53                   	push   ebx
c0015faf:	68 f9 69 02 c0       	push   0xc00269f9
c0015fb4:	e8 8f fe ff ff       	call   c0015e48 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fb9:	83 c4 10             	add    esp,0x10
c0015fbc:	84 c0                	test   al,al
c0015fbe:	75 10                	jne    c0015fd0 <Reg::getLine(char*, char*, char*)+0x33>
c0015fc0:	57                   	push   edi
c0015fc1:	56                   	push   esi
c0015fc2:	53                   	push   ebx
c0015fc3:	68 1e 6a 02 c0       	push   0xc0026a1e
c0015fc8:	e8 7b fe ff ff       	call   c0015e48 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fcd:	83 c4 10             	add    esp,0x10
c0015fd0:	5b                   	pop    ebx
c0015fd1:	5e                   	pop    esi
c0015fd2:	5f                   	pop    edi
c0015fd3:	c3                   	ret    

c0015fd4 <Reg::readInt(char*, char*, int*)>:
c0015fd4:	55                   	push   ebp
c0015fd5:	57                   	push   edi
c0015fd6:	56                   	push   esi
c0015fd7:	53                   	push   ebx
c0015fd8:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015fde:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fe2:	57                   	push   edi
c0015fe3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fea:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015ff1:	e8 a7 ff ff ff       	call   c0015f9d <Reg::getLine(char*, char*, char*)>
c0015ff6:	83 c4 10             	add    esp,0x10
c0015ff9:	84 c0                	test   al,al
c0015ffb:	0f 84 b3 00 00 00    	je     c00160b4 <Reg::readInt(char*, char*, int*)+0xe0>
c0016001:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0016005:	80 fa 2b             	cmp    dl,0x2b
c0016008:	74 0c                	je     c0016016 <Reg::readInt(char*, char*, int*)+0x42>
c001600a:	80 fa 2d             	cmp    dl,0x2d
c001600d:	75 0e                	jne    c001601d <Reg::readInt(char*, char*, int*)+0x49>
c001600f:	ba 01 00 00 00       	mov    edx,0x1
c0016014:	eb 0b                	jmp    c0016021 <Reg::readInt(char*, char*, int*)+0x4d>
c0016016:	ba 01 00 00 00       	mov    edx,0x1
c001601b:	eb 02                	jmp    c001601f <Reg::readInt(char*, char*, int*)+0x4b>
c001601d:	31 d2                	xor    edx,edx
c001601f:	31 c0                	xor    eax,eax
c0016021:	be 0a 00 00 00       	mov    esi,0xa
c0016026:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001602b:	75 20                	jne    c001604d <Reg::readInt(char*, char*, int*)+0x79>
c001602d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016031:	80 f9 78             	cmp    cl,0x78
c0016034:	75 0a                	jne    c0016040 <Reg::readInt(char*, char*, int*)+0x6c>
c0016036:	83 c2 02             	add    edx,0x2
c0016039:	be 10 00 00 00       	mov    esi,0x10
c001603e:	eb 0d                	jmp    c001604d <Reg::readInt(char*, char*, int*)+0x79>
c0016040:	80 f9 62             	cmp    cl,0x62
c0016043:	75 08                	jne    c001604d <Reg::readInt(char*, char*, int*)+0x79>
c0016045:	83 c2 02             	add    edx,0x2
c0016048:	be 02 00 00 00       	mov    esi,0x2
c001604d:	01 d7                	add    edi,edx
c001604f:	31 d2                	xor    edx,edx
c0016051:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016053:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016057:	80 fb 0d             	cmp    bl,0xd
c001605a:	0f 94 c3             	sete   bl
c001605d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016062:	0f 94 c1             	sete   cl
c0016065:	08 cb                	or     bl,cl
c0016067:	75 3a                	jne    c00160a3 <Reg::readInt(char*, char*, int*)+0xcf>
c0016069:	0f af d6             	imul   edx,esi
c001606c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016071:	83 fe 10             	cmp    esi,0x10
c0016074:	75 26                	jne    c001609c <Reg::readInt(char*, char*, int*)+0xc8>
c0016076:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001607a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001607d:	89 e9                	mov    ecx,ebp
c001607f:	80 f9 05             	cmp    cl,0x5
c0016082:	77 06                	ja     c001608a <Reg::readInt(char*, char*, int*)+0xb6>
c0016084:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016088:	eb 16                	jmp    c00160a0 <Reg::readInt(char*, char*, int*)+0xcc>
c001608a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001608e:	83 e9 61             	sub    ecx,0x61
c0016091:	80 f9 05             	cmp    cl,0x5
c0016094:	77 06                	ja     c001609c <Reg::readInt(char*, char*, int*)+0xc8>
c0016096:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001609a:	eb 04                	jmp    c00160a0 <Reg::readInt(char*, char*, int*)+0xcc>
c001609c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00160a0:	47                   	inc    edi
c00160a1:	eb ae                	jmp    c0016051 <Reg::readInt(char*, char*, int*)+0x7d>
c00160a3:	84 c0                	test   al,al
c00160a5:	74 02                	je     c00160a9 <Reg::readInt(char*, char*, int*)+0xd5>
c00160a7:	f7 da                	neg    edx
c00160a9:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00160b0:	89 10                	mov    DWORD PTR [eax],edx
c00160b2:	88 d8                	mov    al,bl
c00160b4:	81 c4 ec 00 00 00    	add    esp,0xec
c00160ba:	5b                   	pop    ebx
c00160bb:	5e                   	pop    esi
c00160bc:	5f                   	pop    edi
c00160bd:	5d                   	pop    ebp
c00160be:	c3                   	ret    

c00160bf <Reg::readString(char*, char*, char*, int)>:
c00160bf:	57                   	push   edi
c00160c0:	56                   	push   esi
c00160c1:	53                   	push   ebx
c00160c2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00160c8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00160cf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00160d3:	57                   	push   edi
c00160d4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160db:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160e2:	e8 b6 fe ff ff       	call   c0015f9d <Reg::getLine(char*, char*, char*)>
c00160e7:	83 c4 10             	add    esp,0x10
c00160ea:	89 c6                	mov    esi,eax
c00160ec:	84 c0                	test   al,al
c00160ee:	74 44                	je     c0016134 <Reg::readString(char*, char*, char*, int)+0x75>
c00160f0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160f7:	31 c0                	xor    eax,eax
c00160f9:	4a                   	dec    edx
c00160fa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160fd:	84 c9                	test   cl,cl
c00160ff:	74 0f                	je     c0016110 <Reg::readString(char*, char*, char*, int)+0x51>
c0016101:	39 c2                	cmp    edx,eax
c0016103:	7e 0b                	jle    c0016110 <Reg::readString(char*, char*, char*, int)+0x51>
c0016105:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016108:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001610d:	40                   	inc    eax
c001610e:	eb ea                	jmp    c00160fa <Reg::readString(char*, char*, char*, int)+0x3b>
c0016110:	83 ec 0c             	sub    esp,0xc
c0016113:	53                   	push   ebx
c0016114:	e8 97 a5 fe ff       	call   c00006b0 <strlen>
c0016119:	83 c4 10             	add    esp,0x10
c001611c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016121:	75 11                	jne    c0016134 <Reg::readString(char*, char*, char*, int)+0x75>
c0016123:	83 ec 0c             	sub    esp,0xc
c0016126:	53                   	push   ebx
c0016127:	e8 84 a5 fe ff       	call   c00006b0 <strlen>
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016134:	81 c4 d0 00 00 00    	add    esp,0xd0
c001613a:	89 f0                	mov    eax,esi
c001613c:	5b                   	pop    ebx
c001613d:	5e                   	pop    esi
c001613e:	5f                   	pop    edi
c001613f:	c3                   	ret    

c0016140 <Reg::readBool(char*, char*, bool*)>:
c0016140:	83 ec 20             	sub    esp,0x20
c0016143:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016147:	50                   	push   eax
c0016148:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001614c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016150:	e8 7f fe ff ff       	call   c0015fd4 <Reg::readInt(char*, char*, int*)>
c0016155:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001615a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001615e:	0f 95 02             	setne  BYTE PTR [edx]
c0016161:	83 c4 2c             	add    esp,0x2c
c0016164:	c3                   	ret    

c0016165 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016165:	53                   	push   ebx
c0016166:	83 ec 1c             	sub    esp,0x1c
c0016169:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001616d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016171:	50                   	push   eax
c0016172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617a:	e8 c1 ff ff ff       	call   c0016140 <Reg::readBool(char*, char*, bool*)>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	84 c0                	test   al,al
c0016184:	74 04                	je     c001618a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016186:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001618a:	88 d8                	mov    al,bl
c001618c:	83 c4 18             	add    esp,0x18
c001618f:	5b                   	pop    ebx
c0016190:	c3                   	ret    

c0016191 <Reg::readIntWithDefault(char*, char*, int)>:
c0016191:	53                   	push   ebx
c0016192:	83 ec 1c             	sub    esp,0x1c
c0016195:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016199:	8d 44 24 10          	lea    eax,[esp+0x10]
c001619d:	50                   	push   eax
c001619e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161a6:	e8 29 fe ff ff       	call   c0015fd4 <Reg::readInt(char*, char*, int*)>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	84 c0                	test   al,al
c00161b0:	74 04                	je     c00161b6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00161b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00161b6:	89 d8                	mov    eax,ebx
c00161b8:	83 c4 18             	add    esp,0x18
c00161bb:	5b                   	pop    ebx
c00161bc:	c3                   	ret    

c00161bd <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00161bd:	57                   	push   edi
c00161be:	56                   	push   esi
c00161bf:	56                   	push   esi
c00161c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00161c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00161c8:	56                   	push   esi
c00161c9:	57                   	push   edi
c00161ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161d2:	e8 e8 fe ff ff       	call   c00160bf <Reg::readString(char*, char*, char*, int)>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	84 c0                	test   al,al
c00161dc:	75 1a                	jne    c00161f8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00161de:	51                   	push   ecx
c00161df:	56                   	push   esi
c00161e0:	6a 00                	push   0x0
c00161e2:	57                   	push   edi
c00161e3:	e8 ac a4 fe ff       	call   c0000694 <memset>
c00161e8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00161eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00161f8:	89 f8                	mov    eax,edi
c00161fa:	5a                   	pop    edx
c00161fb:	5e                   	pop    esi
c00161fc:	5f                   	pop    edi
c00161fd:	c3                   	ret    

c00161fe <Sys::eject(regs*)>:
c00161fe:	83 ec 0c             	sub    esp,0xc
c0016201:	83 ca ff             	or     edx,0xffffffff
c0016204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016208:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001620b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016210:	83 e9 41             	sub    ecx,0x41
c0016213:	83 f9 19             	cmp    ecx,0x19
c0016216:	77 18                	ja     c0016230 <Sys::eject(regs*)+0x32>
c0016218:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c001621f:	85 c9                	test   ecx,ecx
c0016221:	74 0d                	je     c0016230 <Sys::eject(regs*)+0x32>
c0016223:	83 ec 0c             	sub    esp,0xc
c0016226:	51                   	push   ecx
c0016227:	e8 34 a8 ff ff       	call   c0010a60 <LogicalDisk::eject()>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	99                   	cdq    
c0016230:	83 c4 0c             	add    esp,0xc
c0016233:	c3                   	ret    

c0016234 <Sys::exit(regs*)>:
c0016234:	83 ec 18             	sub    esp,0x18
c0016237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001623b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001623e:	e8 59 36 00 00       	call   c001989c <terminateTask(int)>
c0016243:	83 c8 ff             	or     eax,0xffffffff
c0016246:	83 c4 1c             	add    esp,0x1c
c0016249:	89 c2                	mov    edx,eax
c001624b:	c3                   	ret    

c001624c <Sys::getCwd(regs*)>:
c001624c:	83 ec 10             	sub    esp,0x10
c001624f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016253:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016256:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001625e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016261:	e8 50 72 ff ff       	call   c000d4b6 <Fs::getcwd(Process*, char*, int)>
c0016266:	83 c4 1c             	add    esp,0x1c
c0016269:	99                   	cdq    
c001626a:	c3                   	ret    

c001626b <Sys::getPID(regs*)>:
c001626b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016270:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016273:	8b 00                	mov    eax,DWORD PTR [eax]
c0016275:	99                   	cdq    
c0016276:	c3                   	ret    

c0016277 <Sys::getRAMData(regs*)>:
c0016277:	8b 0d 78 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028c78
c001627d:	69 05 74 8c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028c74,0xc8
c0016287:	99                   	cdq    
c0016288:	f7 f9                	idiv   ecx
c001628a:	c1 e0 18             	shl    eax,0x18
c001628d:	09 c8                	or     eax,ecx
c001628f:	99                   	cdq    
c0016290:	c3                   	ret    

c0016291 <Sys::getVGAPtr(regs*)>:
c0016291:	55                   	push   ebp
c0016292:	57                   	push   edi
c0016293:	56                   	push   esi
c0016294:	53                   	push   ebx
c0016295:	83 ec 18             	sub    esp,0x18
c0016298:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001629c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001629f:	e8 fc 30 00 00       	call   c00193a0 <Thr::processFromPID(int)>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	89 c1                	mov    ecx,eax
c00162a9:	b8 01 00 00 00       	mov    eax,0x1
c00162ae:	85 c9                	test   ecx,ecx
c00162b0:	74 59                	je     c001630b <Sys::getVGAPtr(regs*)+0x7a>
c00162b2:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00162b8:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00162bc:	74 0c                	je     c00162ca <Sys::getVGAPtr(regs*)+0x39>
c00162be:	83 ec 0c             	sub    esp,0xc
c00162c1:	53                   	push   ebx
c00162c2:	e8 0e 4c ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c00162c7:	83 c4 10             	add    esp,0x10
c00162ca:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00162cd:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00162d0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00162d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00162d7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00162da:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162dd:	81 c3 82 00 00 00    	add    ebx,0x82
c00162e3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00162e9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162ec:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00162ef:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00162f5:	50                   	push   eax
c00162f6:	50                   	push   eax
c00162f7:	53                   	push   ebx
c00162f8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162fb:	05 a8 0f 00 00       	add    eax,0xfa8
c0016300:	50                   	push   eax
c0016301:	e8 4a a4 fe ff       	call   c0000750 <strcpy>
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	31 c0                	xor    eax,eax
c001630b:	83 c4 0c             	add    esp,0xc
c001630e:	31 d2                	xor    edx,edx
c0016310:	5b                   	pop    ebx
c0016311:	5e                   	pop    esi
c0016312:	5f                   	pop    edi
c0016313:	5d                   	pop    ebp
c0016314:	c3                   	ret    

c0016315 <Sys::loadDLL(regs*)>:
c0016315:	56                   	push   esi
c0016316:	53                   	push   ebx
c0016317:	31 d2                	xor    edx,edx
c0016319:	51                   	push   ecx
c001631a:	b8 01 00 00 00       	mov    eax,0x1
c001631f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016323:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016327:	0f 84 8c 00 00 00    	je     c00163b9 <Sys::loadDLL(regs*)+0xa4>
c001632d:	83 ec 0c             	sub    esp,0xc
c0016330:	68 14 01 00 00       	push   0x114
c0016335:	e8 ad 3a ff ff       	call   c0009de7 <malloc>
c001633a:	83 c4 0c             	add    esp,0xc
c001633d:	89 c3                	mov    ebx,eax
c001633f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016344:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016347:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001634a:	53                   	push   ebx
c001634b:	e8 64 73 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	31 d2                	xor    edx,edx
c0016355:	b8 02 00 00 00       	mov    eax,0x2
c001635a:	85 db                	test   ebx,ebx
c001635c:	74 5b                	je     c00163b9 <Sys::loadDLL(regs*)+0xa4>
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	53                   	push   ebx
c0016362:	e8 95 76 ff ff       	call   c000d9fc <File::exists()>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	84 c0                	test   al,al
c001636c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001636e:	75 11                	jne    c0016381 <Sys::loadDLL(regs*)+0x6c>
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	53                   	push   ebx
c0016374:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	b8 03 00 00 00       	mov    eax,0x3
c001637f:	eb 36                	jmp    c00163b7 <Sys::loadDLL(regs*)+0xa2>
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	53                   	push   ebx
c0016385:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016388:	58                   	pop    eax
c0016389:	5a                   	pop    edx
c001638a:	6a 00                	push   0x0
c001638c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001638f:	e8 0a 22 00 00       	call   c001859e <Thr::loadDLL(char const*, bool)>
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	89 c1                	mov    ecx,eax
c0016399:	31 d2                	xor    edx,edx
c001639b:	b8 04 00 00 00       	mov    eax,0x4
c00163a0:	85 c9                	test   ecx,ecx
c00163a2:	74 15                	je     c00163b9 <Sys::loadDLL(regs*)+0xa4>
c00163a4:	53                   	push   ebx
c00163a5:	53                   	push   ebx
c00163a6:	ff 35 48 8c 02 c0    	push   DWORD PTR ds:0xc0028c48
c00163ac:	51                   	push   ecx
c00163ad:	e8 1d 24 00 00       	call   c00187cf <Thr::executeDLL(unsigned long, void*)>
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	31 c0                	xor    eax,eax
c00163b7:	31 d2                	xor    edx,edx
c00163b9:	59                   	pop    ecx
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	c3                   	ret    

c00163bd <Sys::read(regs*)>:
c00163bd:	57                   	push   edi
c00163be:	56                   	push   esi
c00163bf:	53                   	push   ebx
c00163c0:	83 ec 10             	sub    esp,0x10
c00163c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163ca:	83 f8 02             	cmp    eax,0x2
c00163cd:	77 10                	ja     c00163df <Sys::read(regs*)+0x22>
c00163cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163d7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00163dd:	eb 0e                	jmp    c00163ed <Sys::read(regs*)+0x30>
c00163df:	83 ec 0c             	sub    esp,0xc
c00163e2:	50                   	push   eax
c00163e3:	e8 63 58 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	89 c1                	mov    ecx,eax
c00163ed:	83 c8 ff             	or     eax,0xffffffff
c00163f0:	85 c9                	test   ecx,ecx
c00163f2:	89 c2                	mov    edx,eax
c00163f4:	74 28                	je     c001641e <Sys::read(regs*)+0x61>
c00163f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163fe:	31 ff                	xor    edi,edi
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016405:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016409:	52                   	push   edx
c001640a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001640d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016410:	57                   	push   edi
c0016411:	56                   	push   esi
c0016412:	51                   	push   ecx
c0016413:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016416:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001641a:	83 c4 20             	add    esp,0x20
c001641d:	99                   	cdq    
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	5b                   	pop    ebx
c0016422:	5e                   	pop    esi
c0016423:	5f                   	pop    edi
c0016424:	c3                   	ret    

c0016425 <Sys::sbrk(regs*)>:
c0016425:	56                   	push   esi
c0016426:	53                   	push   ebx
c0016427:	50                   	push   eax
c0016428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001642d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016431:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016434:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016437:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001643d:	85 db                	test   ebx,ebx
c001643f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0016442:	74 02                	je     c0016446 <Sys::sbrk(regs*)+0x21>
c0016444:	79 06                	jns    c001644c <Sys::sbrk(regs*)+0x27>
c0016446:	89 f0                	mov    eax,esi
c0016448:	31 d2                	xor    edx,edx
c001644a:	eb 2a                	jmp    c0016476 <Sys::sbrk(regs*)+0x51>
c001644c:	83 c8 ff             	or     eax,0xffffffff
c001644f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016455:	89 c2                	mov    edx,eax
c0016457:	77 1d                	ja     c0016476 <Sys::sbrk(regs*)+0x51>
c0016459:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001645f:	50                   	push   eax
c0016460:	c1 ea 0c             	shr    edx,0xc
c0016463:	68 07 0c 00 00       	push   0xc07
c0016468:	52                   	push   edx
c0016469:	51                   	push   ecx
c001646a:	e8 9f 60 ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c001646f:	89 f0                	mov    eax,esi
c0016471:	31 d2                	xor    edx,edx
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	59                   	pop    ecx
c0016477:	5b                   	pop    ebx
c0016478:	5e                   	pop    esi
c0016479:	c3                   	ret    

c001647a <Sys::setCwd(regs*)>:
c001647a:	83 ec 14             	sub    esp,0x14
c001647d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016481:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016489:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001648c:	e8 0a 76 ff ff       	call   c000da9b <Fs::setcwd(Process*, char*)>
c0016491:	83 c4 1c             	add    esp,0x1c
c0016494:	99                   	cdq    
c0016495:	c3                   	ret    

c0016496 <Sys::setTime(regs*)>:
c0016496:	55                   	push   ebp
c0016497:	31 c9                	xor    ecx,ecx
c0016499:	57                   	push   edi
c001649a:	bd 0c 00 00 00       	mov    ebp,0xc
c001649f:	56                   	push   esi
c00164a0:	53                   	push   ebx
c00164a1:	31 db                	xor    ebx,ebx
c00164a3:	83 ec 10             	sub    esp,0x10
c00164a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00164aa:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00164ad:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00164b0:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00164b3:	89 c2                	mov    edx,eax
c00164b5:	66 81 ef 6c 07       	sub    di,0x76c
c00164ba:	83 e2 1f             	and    edx,0x1f
c00164bd:	c1 e7 10             	shl    edi,0x10
c00164c0:	42                   	inc    edx
c00164c1:	c1 e8 05             	shr    eax,0x5
c00164c4:	88 d1                	mov    cl,dl
c00164c6:	31 d2                	xor    edx,edx
c00164c8:	f7 f5                	div    ebp
c00164ca:	89 dd                	mov    ebp,ebx
c00164cc:	88 d5                	mov    ch,dl
c00164ce:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00164d4:	0f b7 c1             	movzx  eax,cx
c00164d7:	31 d2                	xor    edx,edx
c00164d9:	09 f8                	or     eax,edi
c00164db:	bf 3c 00 00 00       	mov    edi,0x3c
c00164e0:	89 c1                	mov    ecx,eax
c00164e2:	89 f0                	mov    eax,esi
c00164e4:	f7 f7                	div    edi
c00164e6:	c1 e2 10             	shl    edx,0x10
c00164e9:	09 d5                	or     ebp,edx
c00164eb:	31 d2                	xor    edx,edx
c00164ed:	89 eb                	mov    ebx,ebp
c00164ef:	f7 f7                	div    edi
c00164f1:	bf 10 0e 00 00       	mov    edi,0xe10
c00164f6:	88 d7                	mov    bh,dl
c00164f8:	89 f0                	mov    eax,esi
c00164fa:	31 d2                	xor    edx,edx
c00164fc:	f7 f7                	div    edi
c00164fe:	bf 18 00 00 00       	mov    edi,0x18
c0016503:	31 d2                	xor    edx,edx
c0016505:	f7 f7                	div    edi
c0016507:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001650c:	88 d3                	mov    bl,dl
c001650e:	53                   	push   ebx
c001650f:	51                   	push   ecx
c0016510:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016516:	e8 7f 7e ff ff       	call   c000e39a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001651b:	83 c4 1c             	add    esp,0x1c
c001651e:	83 f0 01             	xor    eax,0x1
c0016521:	5b                   	pop    ebx
c0016522:	0f b6 c0             	movzx  eax,al
c0016525:	5e                   	pop    esi
c0016526:	31 d2                	xor    edx,edx
c0016528:	5f                   	pop    edi
c0016529:	5d                   	pop    ebp
c001652a:	c3                   	ret    

c001652b <Sys::timezone(regs*)>:
c001652b:	53                   	push   ebx
c001652c:	83 ec 08             	sub    esp,0x8
c001652f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016533:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0016537:	75 17                	jne    c0016550 <Sys::timezone(regs*)+0x25>
c0016539:	83 ec 0c             	sub    esp,0xc
c001653c:	68 39 6a 02 c0       	push   0xc0026a39
c0016541:	e8 03 6c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0016546:	83 c8 ff             	or     eax,0xffffffff
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	89 c2                	mov    edx,eax
c001654e:	eb 20                	jmp    c0016570 <Sys::timezone(regs*)+0x45>
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	68 4e 6a 02 c0       	push   0xc0026a4e
c0016558:	e8 ec 6b ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001655d:	58                   	pop    eax
c001655e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016561:	e8 96 7b ff ff       	call   c000e0fc <User::loadClockSettings(int)>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	b8 01 00 00 00       	mov    eax,0x1
c001656e:	31 d2                	xor    edx,edx
c0016570:	83 c4 08             	add    esp,0x8
c0016573:	5b                   	pop    ebx
c0016574:	c3                   	ret    

c0016575 <Sys::write(regs*)>:
c0016575:	57                   	push   edi
c0016576:	56                   	push   esi
c0016577:	53                   	push   ebx
c0016578:	83 ec 10             	sub    esp,0x10
c001657b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001657f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016582:	83 f8 02             	cmp    eax,0x2
c0016585:	77 10                	ja     c0016597 <Sys::write(regs*)+0x22>
c0016587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001658c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001658f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016595:	eb 0e                	jmp    c00165a5 <Sys::write(regs*)+0x30>
c0016597:	83 ec 0c             	sub    esp,0xc
c001659a:	50                   	push   eax
c001659b:	e8 ab 56 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00165a0:	83 c4 10             	add    esp,0x10
c00165a3:	89 c1                	mov    ecx,eax
c00165a5:	83 c8 ff             	or     eax,0xffffffff
c00165a8:	85 c9                	test   ecx,ecx
c00165aa:	89 c2                	mov    edx,eax
c00165ac:	74 28                	je     c00165d6 <Sys::write(regs*)+0x61>
c00165ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00165b6:	31 ff                	xor    edi,edi
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00165bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00165c1:	52                   	push   edx
c00165c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165c5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00165c8:	57                   	push   edi
c00165c9:	56                   	push   esi
c00165ca:	51                   	push   ecx
c00165cb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00165ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165d2:	83 c4 20             	add    esp,0x20
c00165d5:	99                   	cdq    
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	5b                   	pop    ebx
c00165da:	5e                   	pop    esi
c00165db:	5f                   	pop    edi
c00165dc:	c3                   	ret    

c00165dd <Sys::wsbe(regs*)>:
c00165dd:	57                   	push   edi
c00165de:	b9 0b 00 00 00       	mov    ecx,0xb
c00165e3:	56                   	push   esi
c00165e4:	be 8d 6a 02 c0       	mov    esi,0xc0026a8d
c00165e9:	53                   	push   ebx
c00165ea:	83 ec 30             	sub    esp,0x30
c00165ed:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00165f1:	fc                   	cld    
c00165f2:	83 ec 0c             	sub    esp,0xc
c00165f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00165f7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00165fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016600:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016603:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016609:	8b 06                	mov    eax,DWORD PTR [esi]
c001660b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001660e:	57                   	push   edi
c001660f:	e8 9c a0 fe ff       	call   c00006b0 <strlen>
c0016614:	5a                   	pop    edx
c0016615:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016619:	52                   	push   edx
c001661a:	31 d2                	xor    edx,edx
c001661c:	57                   	push   edi
c001661d:	52                   	push   edx
c001661e:	50                   	push   eax
c001661f:	56                   	push   esi
c0016620:	ff d3                	call   ebx
c0016622:	83 c4 14             	add    esp,0x14
c0016625:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016629:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001662c:	e8 6b 32 00 00       	call   c001989c <terminateTask(int)>
c0016631:	83 c4 40             	add    esp,0x40
c0016634:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016639:	5b                   	pop    ebx
c001663a:	31 d2                	xor    edx,edx
c001663c:	5e                   	pop    esi
c001663d:	5f                   	pop    edi
c001663e:	c3                   	ret    

c001663f <Sys::yield(regs*)>:
c001663f:	83 ec 0c             	sub    esp,0xc
c0016642:	fa                   	cli    
c0016643:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0016649:	e8 36 29 00 00       	call   c0018f84 <schedule()>
c001664e:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0016653:	48                   	dec    eax
c0016654:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0016659:	75 01                	jne    c001665c <Sys::yield(regs*)+0x1d>
c001665b:	fb                   	sti    
c001665c:	8b 15 6c 92 02 c0    	mov    edx,DWORD PTR ds:0xc002926c
c0016662:	83 c4 0c             	add    esp,0xc
c0016665:	89 d0                	mov    eax,edx
c0016667:	c1 ea 11             	shr    edx,0x11
c001666a:	c1 e0 07             	shl    eax,0x7
c001666d:	25 80 30 0f 00       	and    eax,0xf3080
c0016672:	31 d0                	xor    eax,edx
c0016674:	31 d2                	xor    edx,edx
c0016676:	c3                   	ret    

c0016677 <sysCallSeekDir(regs*)>:
c0016677:	31 c0                	xor    eax,eax
c0016679:	31 d2                	xor    edx,edx
c001667b:	c3                   	ret    

c001667c <sysCallTellDir(regs*)>:
c001667c:	31 c0                	xor    eax,eax
c001667e:	31 d2                	xor    edx,edx
c0016680:	c3                   	ret    

c0016681 <sysCallVerify(regs*)>:
c0016681:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016685:	31 d2                	xor    edx,edx
c0016687:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001668a:	c3                   	ret    

c001668b <sysCallGetArgc(regs*)>:
c001668b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016690:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016693:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016699:	99                   	cdq    
c001669a:	c3                   	ret    

c001669b <sysFormatDisk(regs*)>:
c001669b:	56                   	push   esi
c001669c:	53                   	push   ebx
c001669d:	53                   	push   ebx
c001669e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166a2:	8b 1d 78 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d78
c00166a8:	eb 25                	jmp    c00166cf <sysFormatDisk(regs*)+0x34>
c00166aa:	83 ec 0c             	sub    esp,0xc
c00166ad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00166b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166b2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00166b5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00166b8:	50                   	push   eax
c00166b9:	ff 34 85 00 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e00]
c00166c0:	53                   	push   ebx
c00166c1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00166c4:	83 c4 20             	add    esp,0x20
c00166c7:	83 f8 08             	cmp    eax,0x8
c00166ca:	75 12                	jne    c00166de <sysFormatDisk(regs*)+0x43>
c00166cc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166cf:	85 db                	test   ebx,ebx
c00166d1:	75 d7                	jne    c00166aa <sysFormatDisk(regs*)+0xf>
c00166d3:	59                   	pop    ecx
c00166d4:	b8 03 00 00 00       	mov    eax,0x3
c00166d9:	31 d2                	xor    edx,edx
c00166db:	5b                   	pop    ebx
c00166dc:	5e                   	pop    esi
c00166dd:	c3                   	ret    
c00166de:	85 c0                	test   eax,eax
c00166e0:	74 1b                	je     c00166fd <sysFormatDisk(regs*)+0x62>
c00166e2:	83 f8 09             	cmp    eax,0x9
c00166e5:	74 0b                	je     c00166f2 <sysFormatDisk(regs*)+0x57>
c00166e7:	59                   	pop    ecx
c00166e8:	b8 02 00 00 00       	mov    eax,0x2
c00166ed:	31 d2                	xor    edx,edx
c00166ef:	5b                   	pop    ebx
c00166f0:	5e                   	pop    esi
c00166f1:	c3                   	ret    
c00166f2:	59                   	pop    ecx
c00166f3:	b8 01 00 00 00       	mov    eax,0x1
c00166f8:	31 d2                	xor    edx,edx
c00166fa:	5b                   	pop    ebx
c00166fb:	5e                   	pop    esi
c00166fc:	c3                   	ret    
c00166fd:	59                   	pop    ecx
c00166fe:	31 c0                	xor    eax,eax
c0016700:	31 d2                	xor    edx,edx
c0016702:	5b                   	pop    ebx
c0016703:	5e                   	pop    esi
c0016704:	c3                   	ret    

c0016705 <sysSetDiskVolumeLabel(regs*)>:
c0016705:	56                   	push   esi
c0016706:	53                   	push   ebx
c0016707:	53                   	push   ebx
c0016708:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001670c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001670f:	83 f8 19             	cmp    eax,0x19
c0016712:	77 2d                	ja     c0016741 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016714:	8b 0c 85 00 92 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6e00]
c001671b:	85 c9                	test   ecx,ecx
c001671d:	74 22                	je     c0016741 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001671f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0016722:	85 db                	test   ebx,ebx
c0016724:	74 1b                	je     c0016741 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016726:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001672c:	85 d2                	test   edx,edx
c001672e:	74 11                	je     c0016741 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016730:	8b 32                	mov    esi,DWORD PTR [edx]
c0016732:	53                   	push   ebx
c0016733:	50                   	push   eax
c0016734:	51                   	push   ecx
c0016735:	52                   	push   edx
c0016736:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	99                   	cdq    
c001673d:	59                   	pop    ecx
c001673e:	5b                   	pop    ebx
c001673f:	5e                   	pop    esi
c0016740:	c3                   	ret    
c0016741:	59                   	pop    ecx
c0016742:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016747:	ba ff ff ff ff       	mov    edx,0xffffffff
c001674c:	5b                   	pop    ebx
c001674d:	5e                   	pop    esi
c001674e:	c3                   	ret    

c001674f <sysGetDiskVolumeLabel(regs*)>:
c001674f:	57                   	push   edi
c0016750:	56                   	push   esi
c0016751:	53                   	push   ebx
c0016752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016756:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016759:	83 fa 19             	cmp    edx,0x19
c001675c:	77 38                	ja     c0016796 <sysGetDiskVolumeLabel(regs*)+0x47>
c001675e:	8b 0c 95 00 92 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6e00]
c0016765:	85 c9                	test   ecx,ecx
c0016767:	74 2d                	je     c0016796 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016769:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001676c:	85 db                	test   ebx,ebx
c001676e:	74 26                	je     c0016796 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016770:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016773:	85 f6                	test   esi,esi
c0016775:	74 1f                	je     c0016796 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016777:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001677d:	85 c0                	test   eax,eax
c001677f:	74 15                	je     c0016796 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016781:	83 ec 0c             	sub    esp,0xc
c0016784:	8b 38                	mov    edi,DWORD PTR [eax]
c0016786:	56                   	push   esi
c0016787:	53                   	push   ebx
c0016788:	52                   	push   edx
c0016789:	51                   	push   ecx
c001678a:	50                   	push   eax
c001678b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001678e:	83 c4 20             	add    esp,0x20
c0016791:	99                   	cdq    
c0016792:	5b                   	pop    ebx
c0016793:	5e                   	pop    esi
c0016794:	5f                   	pop    edi
c0016795:	c3                   	ret    
c0016796:	5b                   	pop    ebx
c0016797:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001679c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167a1:	5e                   	pop    esi
c00167a2:	5f                   	pop    edi
c00167a3:	c3                   	ret    

c00167a4 <sysShutdown(regs*)>:
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167ae:	85 c0                	test   eax,eax
c00167b0:	74 18                	je     c00167ca <sysShutdown(regs*)+0x26>
c00167b2:	83 f8 01             	cmp    eax,0x1
c00167b5:	74 38                	je     c00167ef <sysShutdown(regs*)+0x4b>
c00167b7:	83 f8 02             	cmp    eax,0x2
c00167ba:	74 24                	je     c00167e0 <sysShutdown(regs*)+0x3c>
c00167bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167c6:	83 c4 0c             	add    esp,0xc
c00167c9:	c3                   	ret    
c00167ca:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00167cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00167d1:	6a 00                	push   0x0
c00167d3:	6a 00                	push   0x0
c00167d5:	6a 00                	push   0x0
c00167d7:	50                   	push   eax
c00167d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	eb dc                	jmp    c00167bc <sysShutdown(regs*)+0x18>
c00167e0:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00167e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00167e7:	6a 00                	push   0x0
c00167e9:	6a 00                	push   0x0
c00167eb:	6a 01                	push   0x1
c00167ed:	eb e8                	jmp    c00167d7 <sysShutdown(regs*)+0x33>
c00167ef:	a1 80 92 02 c0       	mov    eax,ds:0xc0029280
c00167f4:	85 c0                	test   eax,eax
c00167f6:	74 02                	je     c00167fa <sysShutdown(regs*)+0x56>
c00167f8:	ff d0                	call   eax
c00167fa:	31 c0                	xor    eax,eax
c00167fc:	31 d2                	xor    edx,edx
c00167fe:	83 c4 0c             	add    esp,0xc
c0016801:	c3                   	ret    

c0016802 <sysCallRealpath(regs*)>:
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016809:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001680c:	85 d2                	test   edx,edx
c001680e:	74 07                	je     c0016817 <sysCallRealpath(regs*)+0x15>
c0016810:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016813:	85 c0                	test   eax,eax
c0016815:	75 0b                	jne    c0016822 <sysCallRealpath(regs*)+0x20>
c0016817:	b8 01 00 00 00       	mov    eax,0x1
c001681c:	31 d2                	xor    edx,edx
c001681e:	83 c4 0c             	add    esp,0xc
c0016821:	c3                   	ret    
c0016822:	51                   	push   ecx
c0016823:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016829:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001682c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0016832:	51                   	push   ecx
c0016833:	52                   	push   edx
c0016834:	50                   	push   eax
c0016835:	e8 d0 6c ff ff       	call   c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>
c001683a:	83 c4 10             	add    esp,0x10
c001683d:	31 c0                	xor    eax,eax
c001683f:	31 d2                	xor    edx,edx
c0016841:	83 c4 0c             	add    esp,0xc
c0016844:	c3                   	ret    

c0016845 <sysCallReadDir(regs*)>:
c0016845:	53                   	push   ebx
c0016846:	83 ec 18             	sub    esp,0x18
c0016849:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001684d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016850:	83 f8 02             	cmp    eax,0x2
c0016853:	76 60                	jbe    c00168b5 <sysCallReadDir(regs*)+0x70>
c0016855:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001685c:	77 48                	ja     c00168a6 <sysCallReadDir(regs*)+0x61>
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	50                   	push   eax
c0016862:	e8 e4 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016867:	83 c4 10             	add    esp,0x10
c001686a:	85 c0                	test   eax,eax
c001686c:	74 38                	je     c00168a6 <sysCallReadDir(regs*)+0x61>
c001686e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	8b 10                	mov    edx,DWORD PTR [eax]
c001687b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001687f:	51                   	push   ecx
c0016880:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016883:	6a 00                	push   0x0
c0016885:	68 10 01 00 00       	push   0x110
c001688a:	50                   	push   eax
c001688b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001688e:	83 c4 20             	add    esp,0x20
c0016891:	85 c0                	test   eax,eax
c0016893:	74 29                	je     c00168be <sysCallReadDir(regs*)+0x79>
c0016895:	83 f8 07             	cmp    eax,0x7
c0016898:	74 1b                	je     c00168b5 <sysCallReadDir(regs*)+0x70>
c001689a:	b8 02 00 00 00       	mov    eax,0x2
c001689f:	31 d2                	xor    edx,edx
c00168a1:	83 c4 18             	add    esp,0x18
c00168a4:	5b                   	pop    ebx
c00168a5:	c3                   	ret    
c00168a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168b0:	83 c4 18             	add    esp,0x18
c00168b3:	5b                   	pop    ebx
c00168b4:	c3                   	ret    
c00168b5:	b8 01 00 00 00       	mov    eax,0x1
c00168ba:	31 d2                	xor    edx,edx
c00168bc:	eb e3                	jmp    c00168a1 <sysCallReadDir(regs*)+0x5c>
c00168be:	31 c0                	xor    eax,eax
c00168c0:	31 d2                	xor    edx,edx
c00168c2:	eb dd                	jmp    c00168a1 <sysCallReadDir(regs*)+0x5c>

c00168c4 <sysCallIsATTY(regs*)>:
c00168c4:	83 ec 0c             	sub    esp,0xc
c00168c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168ce:	83 f8 02             	cmp    eax,0x2
c00168d1:	76 07                	jbe    c00168da <sysCallIsATTY(regs*)+0x16>
c00168d3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168d8:	75 26                	jne    c0016900 <sysCallIsATTY(regs*)+0x3c>
c00168da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00168e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168e8:	85 c0                	test   eax,eax
c00168ea:	74 24                	je     c0016910 <sysCallIsATTY(regs*)+0x4c>
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00168f1:	50                   	push   eax
c00168f2:	ff 12                	call   DWORD PTR [edx]
c00168f4:	31 d2                	xor    edx,edx
c00168f6:	0f b6 c0             	movzx  eax,al
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	83 c4 0c             	add    esp,0xc
c00168ff:	c3                   	ret    
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	50                   	push   eax
c0016904:	e8 42 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016909:	83 c4 10             	add    esp,0x10
c001690c:	85 c0                	test   eax,eax
c001690e:	75 dc                	jne    c00168ec <sysCallIsATTY(regs*)+0x28>
c0016910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016915:	ba ff ff ff ff       	mov    edx,0xffffffff
c001691a:	83 c4 0c             	add    esp,0xc
c001691d:	c3                   	ret    

c001691e <sysCallSeek(regs*)>:
c001691e:	53                   	push   ebx
c001691f:	83 ec 08             	sub    esp,0x8
c0016922:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016926:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016929:	8d 50 fd             	lea    edx,[eax-0x3]
c001692c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016932:	77 32                	ja     c0016966 <sysCallSeek(regs*)+0x48>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	50                   	push   eax
c0016938:	e8 0e 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001693d:	83 c4 0c             	add    esp,0xc
c0016940:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016943:	31 db                	xor    ebx,ebx
c0016945:	53                   	push   ebx
c0016946:	51                   	push   ecx
c0016947:	50                   	push   eax
c0016948:	e8 ff 6e ff ff       	call   c000d84c <File::seek(unsigned long long)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	85 c0                	test   eax,eax
c0016952:	0f 95 c0             	setne  al
c0016955:	31 d2                	xor    edx,edx
c0016957:	0f b6 c0             	movzx  eax,al
c001695a:	f7 d8                	neg    eax
c001695c:	83 d2 00             	adc    edx,0x0
c001695f:	83 c4 08             	add    esp,0x8
c0016962:	f7 da                	neg    edx
c0016964:	5b                   	pop    ebx
c0016965:	c3                   	ret    
c0016966:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001696b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016970:	83 c4 08             	add    esp,0x8
c0016973:	5b                   	pop    ebx
c0016974:	c3                   	ret    

c0016975 <sysCallTell(regs*)>:
c0016975:	53                   	push   ebx
c0016976:	83 ec 08             	sub    esp,0x8
c0016979:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001697d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016980:	83 f8 02             	cmp    eax,0x2
c0016983:	76 4d                	jbe    c00169d2 <sysCallTell(regs*)+0x5d>
c0016985:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001698a:	76 19                	jbe    c00169a5 <sysCallTell(regs*)+0x30>
c001698c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001698f:	31 d2                	xor    edx,edx
c0016991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001699e:	31 c0                	xor    eax,eax
c00169a0:	83 c4 08             	add    esp,0x8
c00169a3:	5b                   	pop    ebx
c00169a4:	c3                   	ret    
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	50                   	push   eax
c00169a9:	e8 9d 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00169ae:	5a                   	pop    edx
c00169af:	59                   	pop    ecx
c00169b0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169b3:	50                   	push   eax
c00169b4:	e8 e9 6e ff ff       	call   c000d8a2 <File::tell(unsigned long long*)>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	85 c0                	test   eax,eax
c00169be:	0f 95 c0             	setne  al
c00169c1:	31 d2                	xor    edx,edx
c00169c3:	0f b6 c0             	movzx  eax,al
c00169c6:	f7 d8                	neg    eax
c00169c8:	83 d2 00             	adc    edx,0x0
c00169cb:	83 c4 08             	add    esp,0x8
c00169ce:	f7 da                	neg    edx
c00169d0:	5b                   	pop    ebx
c00169d1:	c3                   	ret    
c00169d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169dc:	83 c4 08             	add    esp,0x8
c00169df:	5b                   	pop    ebx
c00169e0:	c3                   	ret    

c00169e1 <sysCallSize(regs*)>:
c00169e1:	53                   	push   ebx
c00169e2:	83 ec 18             	sub    esp,0x18
c00169e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00169e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169ec:	83 f8 02             	cmp    eax,0x2
c00169ef:	76 53                	jbe    c0016a44 <sysCallSize(regs*)+0x63>
c00169f1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169f6:	76 19                	jbe    c0016a11 <sysCallSize(regs*)+0x30>
c00169f8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169fb:	31 d2                	xor    edx,edx
c00169fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a0a:	31 c0                	xor    eax,eax
c0016a0c:	83 c4 18             	add    esp,0x18
c0016a0f:	5b                   	pop    ebx
c0016a10:	c3                   	ret    
c0016a11:	83 ec 0c             	sub    esp,0xc
c0016a14:	50                   	push   eax
c0016a15:	e8 31 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016a1a:	83 c4 0c             	add    esp,0xc
c0016a1d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016a21:	52                   	push   edx
c0016a22:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a25:	50                   	push   eax
c0016a26:	e8 0f 70 ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	85 c0                	test   eax,eax
c0016a30:	0f 95 c0             	setne  al
c0016a33:	31 d2                	xor    edx,edx
c0016a35:	0f b6 c0             	movzx  eax,al
c0016a38:	f7 d8                	neg    eax
c0016a3a:	83 d2 00             	adc    edx,0x0
c0016a3d:	83 c4 18             	add    esp,0x18
c0016a40:	f7 da                	neg    edx
c0016a42:	5b                   	pop    ebx
c0016a43:	c3                   	ret    
c0016a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a4e:	83 c4 18             	add    esp,0x18
c0016a51:	5b                   	pop    ebx
c0016a52:	c3                   	ret    

c0016a53 <sysCallSizeFromFilename(regs*)>:
c0016a53:	57                   	push   edi
c0016a54:	56                   	push   esi
c0016a55:	53                   	push   ebx
c0016a56:	83 ec 20             	sub    esp,0x20
c0016a59:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a5d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016a60:	83 fb 02             	cmp    ebx,0x2
c0016a63:	0f 86 88 00 00 00    	jbe    c0016af1 <sysCallSizeFromFilename(regs*)+0x9e>
c0016a69:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016a6f:	76 1b                	jbe    c0016a8c <sysCallSizeFromFilename(regs*)+0x39>
c0016a71:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a74:	31 d2                	xor    edx,edx
c0016a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a83:	83 c4 20             	add    esp,0x20
c0016a86:	31 c0                	xor    eax,eax
c0016a88:	5b                   	pop    ebx
c0016a89:	5e                   	pop    esi
c0016a8a:	5f                   	pop    edi
c0016a8b:	c3                   	ret    
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	68 14 01 00 00       	push   0x114
c0016a94:	e8 4e 33 ff ff       	call   c0009de7 <malloc>
c0016a99:	83 c4 0c             	add    esp,0xc
c0016a9c:	89 c7                	mov    edi,eax
c0016a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aa3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016aa6:	53                   	push   ebx
c0016aa7:	57                   	push   edi
c0016aa8:	e8 07 6c ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0016aad:	83 c4 0c             	add    esp,0xc
c0016ab0:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016ab4:	50                   	push   eax
c0016ab5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016ab8:	57                   	push   edi
c0016ab9:	e8 7c 6f ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	85 ff                	test   edi,edi
c0016ac3:	74 14                	je     c0016ad9 <sysCallSizeFromFilename(regs*)+0x86>
c0016ac5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ac9:	8b 17                	mov    edx,DWORD PTR [edi]
c0016acb:	83 ec 0c             	sub    esp,0xc
c0016ace:	57                   	push   edi
c0016acf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ad9:	85 c0                	test   eax,eax
c0016adb:	0f 95 c0             	setne  al
c0016ade:	31 d2                	xor    edx,edx
c0016ae0:	0f b6 c0             	movzx  eax,al
c0016ae3:	f7 d8                	neg    eax
c0016ae5:	83 d2 00             	adc    edx,0x0
c0016ae8:	83 c4 20             	add    esp,0x20
c0016aeb:	f7 da                	neg    edx
c0016aed:	5b                   	pop    ebx
c0016aee:	5e                   	pop    esi
c0016aef:	5f                   	pop    edi
c0016af0:	c3                   	ret    
c0016af1:	83 c4 20             	add    esp,0x20
c0016af4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016af9:	5b                   	pop    ebx
c0016afa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016aff:	5e                   	pop    esi
c0016b00:	5f                   	pop    edi
c0016b01:	c3                   	ret    

c0016b02 <sysCallClose(regs*)>:
c0016b02:	53                   	push   ebx
c0016b03:	83 ec 08             	sub    esp,0x8
c0016b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b0d:	83 f8 02             	cmp    eax,0x2
c0016b10:	76 41                	jbe    c0016b53 <sysCallClose(regs*)+0x51>
c0016b12:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016b18:	83 fa 01             	cmp    edx,0x1
c0016b1b:	76 2d                	jbe    c0016b4a <sysCallClose(regs*)+0x48>
c0016b1d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b22:	77 2f                	ja     c0016b53 <sysCallClose(regs*)+0x51>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	50                   	push   eax
c0016b28:	e8 1e 51 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016b2d:	89 c3                	mov    ebx,eax
c0016b2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b32:	e8 b5 6c ff ff       	call   c000d7ec <File::close()>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	85 db                	test   ebx,ebx
c0016b3c:	74 0c                	je     c0016b4a <sysCallClose(regs*)+0x48>
c0016b3e:	83 ec 0c             	sub    esp,0xc
c0016b41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b43:	53                   	push   ebx
c0016b44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	31 c0                	xor    eax,eax
c0016b4c:	31 d2                	xor    edx,edx
c0016b4e:	83 c4 08             	add    esp,0x8
c0016b51:	5b                   	pop    ebx
c0016b52:	c3                   	ret    
c0016b53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b5d:	83 c4 08             	add    esp,0x8
c0016b60:	5b                   	pop    ebx
c0016b61:	c3                   	ret    

c0016b62 <sysCallOpenDir(regs*)>:
c0016b62:	56                   	push   esi
c0016b63:	53                   	push   ebx
c0016b64:	53                   	push   ebx
c0016b65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b69:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016b6c:	85 f6                	test   esi,esi
c0016b6e:	74 59                	je     c0016bc9 <sysCallOpenDir(regs*)+0x67>
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	68 14 01 00 00       	push   0x114
c0016b78:	e8 6a 32 ff ff       	call   c0009de7 <malloc>
c0016b7d:	83 c4 0c             	add    esp,0xc
c0016b80:	89 c6                	mov    esi,eax
c0016b82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b87:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b8a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b8d:	56                   	push   esi
c0016b8e:	e8 81 70 ff ff       	call   c000dc14 <Directory::Directory(char const*, Process*)>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	85 f6                	test   esi,esi
c0016b98:	74 2f                	je     c0016bc9 <sysCallOpenDir(regs*)+0x67>
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	56                   	push   esi
c0016b9e:	e8 4b 71 ff ff       	call   c000dcee <Directory::open()>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	85 c0                	test   eax,eax
c0016ba8:	75 1f                	jne    c0016bc9 <sysCallOpenDir(regs*)+0x67>
c0016baa:	83 ec 0c             	sub    esp,0xc
c0016bad:	56                   	push   esi
c0016bae:	e8 a3 4d ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0016bb3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	89 02                	mov    DWORD PTR [edx],eax
c0016bbb:	c1 f8 1f             	sar    eax,0x1f
c0016bbe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016bc1:	31 c0                	xor    eax,eax
c0016bc3:	59                   	pop    ecx
c0016bc4:	31 d2                	xor    edx,edx
c0016bc6:	5b                   	pop    ebx
c0016bc7:	5e                   	pop    esi
c0016bc8:	c3                   	ret    
c0016bc9:	59                   	pop    ecx
c0016bca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016bcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016bd4:	5b                   	pop    ebx
c0016bd5:	5e                   	pop    esi
c0016bd6:	c3                   	ret    

c0016bd7 <sysCallCloseDir(regs*)>:
c0016bd7:	53                   	push   ebx
c0016bd8:	83 ec 08             	sub    esp,0x8
c0016bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016be2:	8d 50 fd             	lea    edx,[eax-0x3]
c0016be5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016beb:	77 2f                	ja     c0016c1c <sysCallCloseDir(regs*)+0x45>
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	50                   	push   eax
c0016bf1:	e8 55 50 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016bf6:	89 c3                	mov    ebx,eax
c0016bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bfb:	e8 4a 71 ff ff       	call   c000dd4a <Directory::close()>
c0016c00:	83 c4 10             	add    esp,0x10
c0016c03:	85 db                	test   ebx,ebx
c0016c05:	74 0c                	je     c0016c13 <sysCallCloseDir(regs*)+0x3c>
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c0c:	53                   	push   ebx
c0016c0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	31 c0                	xor    eax,eax
c0016c15:	31 d2                	xor    edx,edx
c0016c17:	83 c4 08             	add    esp,0x8
c0016c1a:	5b                   	pop    ebx
c0016c1b:	c3                   	ret    
c0016c1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c26:	83 c4 08             	add    esp,0x8
c0016c29:	5b                   	pop    ebx
c0016c2a:	c3                   	ret    

c0016c2b <sysCallMakeDir(regs*)>:
c0016c2b:	56                   	push   esi
c0016c2c:	53                   	push   ebx
c0016c2d:	83 ec 10             	sub    esp,0x10
c0016c30:	68 14 01 00 00       	push   0x114
c0016c35:	e8 ad 31 ff ff       	call   c0009de7 <malloc>
c0016c3a:	83 c4 0c             	add    esp,0xc
c0016c3d:	89 c3                	mov    ebx,eax
c0016c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c44:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c4b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c4e:	53                   	push   ebx
c0016c4f:	e8 c0 6f ff ff       	call   c000dc14 <Directory::Directory(char const*, Process*)>
c0016c54:	83 c4 10             	add    esp,0x10
c0016c57:	85 db                	test   ebx,ebx
c0016c59:	74 32                	je     c0016c8d <sysCallMakeDir(regs*)+0x62>
c0016c5b:	83 ec 0c             	sub    esp,0xc
c0016c5e:	53                   	push   ebx
c0016c5f:	e8 6a 72 ff ff       	call   c000dece <Directory::create()>
c0016c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c67:	89 c6                	mov    esi,eax
c0016c69:	e8 dc 70 ff ff       	call   c000dd4a <Directory::close()>
c0016c6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	31 c0                	xor    eax,eax
c0016c7b:	59                   	pop    ecx
c0016c7c:	85 f6                	test   esi,esi
c0016c7e:	5b                   	pop    ebx
c0016c7f:	0f 95 c0             	setne  al
c0016c82:	5e                   	pop    esi
c0016c83:	31 d2                	xor    edx,edx
c0016c85:	f7 d8                	neg    eax
c0016c87:	83 d2 00             	adc    edx,0x0
c0016c8a:	f7 da                	neg    edx
c0016c8c:	c3                   	ret    
c0016c8d:	59                   	pop    ecx
c0016c8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c98:	5b                   	pop    ebx
c0016c99:	5e                   	pop    esi
c0016c9a:	c3                   	ret    

c0016c9b <sysCallWait(regs*)>:
c0016c9b:	83 ec 10             	sub    esp,0x10
c0016c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ca2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016ca5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016ca8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016cab:	e8 fc 24 00 00       	call   c00191ac <waitTask(int, int*, int)>
c0016cb0:	83 c4 1c             	add    esp,0x1c
c0016cb3:	99                   	cdq    
c0016cb4:	c3                   	ret    

c0016cb5 <sysCallNotImpl(regs*)>:
c0016cb5:	83 ec 18             	sub    esp,0x18
c0016cb8:	68 b9 6a 02 c0       	push   0xc0026ab9
c0016cbd:	e8 67 e5 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0016cc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016cc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ccc:	83 c4 1c             	add    esp,0x1c
c0016ccf:	c3                   	ret    

c0016cd0 <sysPanic(regs*)>:
c0016cd0:	83 ec 18             	sub    esp,0x18
c0016cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016cda:	e8 4a e5 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0016cdf:	b8 01 00 00 00       	mov    eax,0x1
c0016ce4:	31 d2                	xor    edx,edx
c0016ce6:	83 c4 1c             	add    esp,0x1c
c0016ce9:	c3                   	ret    

c0016cea <sysCallRmdir(regs*)>:
c0016cea:	56                   	push   esi
c0016ceb:	53                   	push   ebx
c0016cec:	83 ec 20             	sub    esp,0x20
c0016cef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cf3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016cf6:	68 14 01 00 00       	push   0x114
c0016cfb:	e8 e7 30 ff ff       	call   c0009de7 <malloc>
c0016d00:	83 c4 0c             	add    esp,0xc
c0016d03:	89 c3                	mov    ebx,eax
c0016d05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d0a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d0d:	56                   	push   esi
c0016d0e:	53                   	push   ebx
c0016d0f:	e8 a0 69 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0016d14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d17:	e8 ea 6b ff ff       	call   c000d906 <File::unlink()>
c0016d1c:	83 c4 10             	add    esp,0x10
c0016d1f:	85 db                	test   ebx,ebx
c0016d21:	74 14                	je     c0016d37 <sysCallRmdir(regs*)+0x4d>
c0016d23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d27:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d29:	83 ec 0c             	sub    esp,0xc
c0016d2c:	53                   	push   ebx
c0016d2d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d30:	83 c4 10             	add    esp,0x10
c0016d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d37:	85 c0                	test   eax,eax
c0016d39:	0f 95 c0             	setne  al
c0016d3c:	31 d2                	xor    edx,edx
c0016d3e:	0f b6 c0             	movzx  eax,al
c0016d41:	f7 d8                	neg    eax
c0016d43:	83 d2 00             	adc    edx,0x0
c0016d46:	83 c4 14             	add    esp,0x14
c0016d49:	f7 da                	neg    edx
c0016d4b:	5b                   	pop    ebx
c0016d4c:	5e                   	pop    esi
c0016d4d:	c3                   	ret    

c0016d4e <sysCallUnlink(regs*)>:
c0016d4e:	56                   	push   esi
c0016d4f:	53                   	push   ebx
c0016d50:	83 ec 20             	sub    esp,0x20
c0016d53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d57:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d5a:	68 14 01 00 00       	push   0x114
c0016d5f:	e8 83 30 ff ff       	call   c0009de7 <malloc>
c0016d64:	83 c4 0c             	add    esp,0xc
c0016d67:	89 c3                	mov    ebx,eax
c0016d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d6e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d71:	56                   	push   esi
c0016d72:	53                   	push   ebx
c0016d73:	e8 3c 69 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0016d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d7b:	e8 86 6b ff ff       	call   c000d906 <File::unlink()>
c0016d80:	83 c4 10             	add    esp,0x10
c0016d83:	85 db                	test   ebx,ebx
c0016d85:	74 14                	je     c0016d9b <sysCallUnlink(regs*)+0x4d>
c0016d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	53                   	push   ebx
c0016d91:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d9b:	85 c0                	test   eax,eax
c0016d9d:	0f 95 c0             	setne  al
c0016da0:	31 d2                	xor    edx,edx
c0016da2:	0f b6 c0             	movzx  eax,al
c0016da5:	f7 d8                	neg    eax
c0016da7:	83 d2 00             	adc    edx,0x0
c0016daa:	83 c4 14             	add    esp,0x14
c0016dad:	f7 da                	neg    edx
c0016daf:	5b                   	pop    ebx
c0016db0:	5e                   	pop    esi
c0016db1:	c3                   	ret    

c0016db2 <sysCallGetArgv(regs*)>:
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016db9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016dbc:	85 c0                	test   eax,eax
c0016dbe:	78 2b                	js     c0016deb <sysCallGetArgv(regs*)+0x39>
c0016dc0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016dc6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016dc9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016dcf:	7d 1a                	jge    c0016deb <sysCallGetArgv(regs*)+0x39>
c0016dd1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016dd8:	85 c0                	test   eax,eax
c0016dda:	74 17                	je     c0016df3 <sysCallGetArgv(regs*)+0x41>
c0016ddc:	83 ec 08             	sub    esp,0x8
c0016ddf:	50                   	push   eax
c0016de0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016de3:	e8 68 99 fe ff       	call   c0000750 <strcpy>
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	31 c0                	xor    eax,eax
c0016ded:	31 d2                	xor    edx,edx
c0016def:	83 c4 0c             	add    esp,0xc
c0016df2:	c3                   	ret    
c0016df3:	b8 01 00 00 00       	mov    eax,0x1
c0016df8:	31 d2                	xor    edx,edx
c0016dfa:	83 c4 0c             	add    esp,0xc
c0016dfd:	c3                   	ret    

c0016dfe <sysCallTTYName(regs*)>:
c0016dfe:	56                   	push   esi
c0016dff:	53                   	push   ebx
c0016e00:	53                   	push   ebx
c0016e01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e05:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016e08:	85 c0                	test   eax,eax
c0016e0a:	74 5f                	je     c0016e6b <sysCallTTYName(regs*)+0x6d>
c0016e0c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016e0f:	83 f8 02             	cmp    eax,0x2
c0016e12:	77 3e                	ja     c0016e52 <sysCallTTYName(regs*)+0x54>
c0016e14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e1c:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016e22:	85 db                	test   ebx,ebx
c0016e24:	74 45                	je     c0016e6b <sysCallTTYName(regs*)+0x6d>
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e2b:	53                   	push   ebx
c0016e2c:	ff 10                	call   DWORD PTR [eax]
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	84 c0                	test   al,al
c0016e33:	74 41                	je     c0016e76 <sysCallTTYName(regs*)+0x78>
c0016e35:	83 ec 08             	sub    esp,0x8
c0016e38:	81 c3 82 00 00 00    	add    ebx,0x82
c0016e3e:	53                   	push   ebx
c0016e3f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016e42:	e8 09 99 fe ff       	call   c0000750 <strcpy>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	31 c0                	xor    eax,eax
c0016e4c:	59                   	pop    ecx
c0016e4d:	31 d2                	xor    edx,edx
c0016e4f:	5b                   	pop    ebx
c0016e50:	5e                   	pop    esi
c0016e51:	c3                   	ret    
c0016e52:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016e57:	74 bb                	je     c0016e14 <sysCallTTYName(regs*)+0x16>
c0016e59:	83 ec 0c             	sub    esp,0xc
c0016e5c:	50                   	push   eax
c0016e5d:	e8 e9 4d ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016e62:	83 c4 10             	add    esp,0x10
c0016e65:	89 c3                	mov    ebx,eax
c0016e67:	85 db                	test   ebx,ebx
c0016e69:	75 bb                	jne    c0016e26 <sysCallTTYName(regs*)+0x28>
c0016e6b:	59                   	pop    ecx
c0016e6c:	b8 01 00 00 00       	mov    eax,0x1
c0016e71:	31 d2                	xor    edx,edx
c0016e73:	5b                   	pop    ebx
c0016e74:	5e                   	pop    esi
c0016e75:	c3                   	ret    
c0016e76:	59                   	pop    ecx
c0016e77:	b8 02 00 00 00       	mov    eax,0x2
c0016e7c:	31 d2                	xor    edx,edx
c0016e7e:	5b                   	pop    ebx
c0016e7f:	5e                   	pop    esi
c0016e80:	c3                   	ret    

c0016e81 <sysCallUSleep(regs*)>:
c0016e81:	83 ec 1c             	sub    esp,0x1c
c0016e84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e88:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016e8b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016e8e:	6a 00                	push   0x0
c0016e90:	6a 64                	push   0x64
c0016e92:	52                   	push   edx
c0016e93:	50                   	push   eax
c0016e94:	e8 77 c1 00 00       	call   c0023010 <__udivdi3>
c0016e99:	83 c4 14             	add    esp,0x14
c0016e9c:	50                   	push   eax
c0016e9d:	e8 da 23 00 00       	call   c001927c <milliTenthSleep(unsigned int)>
c0016ea2:	31 c0                	xor    eax,eax
c0016ea4:	31 d2                	xor    edx,edx
c0016ea6:	83 c4 1c             	add    esp,0x1c
c0016ea9:	c3                   	ret    

c0016eaa <sysCallSpawn(regs*)>:
c0016eaa:	56                   	push   esi
c0016eab:	53                   	push   ebx
c0016eac:	50                   	push   eax
c0016ead:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016eb1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016eb4:	85 c0                	test   eax,eax
c0016eb6:	75 08                	jne    c0016ec0 <sysCallSpawn(regs*)+0x16>
c0016eb8:	59                   	pop    ecx
c0016eb9:	31 c0                	xor    eax,eax
c0016ebb:	31 d2                	xor    edx,edx
c0016ebd:	5b                   	pop    ebx
c0016ebe:	5e                   	pop    esi
c0016ebf:	c3                   	ret    
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	68 1f 07 00 00       	push   0x71f
c0016ec8:	e8 1a 2f ff ff       	call   c0009de7 <malloc>
c0016ecd:	83 c4 10             	add    esp,0x10
c0016ed0:	89 c6                	mov    esi,eax
c0016ed2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016ed5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ed8:	85 c0                	test   eax,eax
c0016eda:	75 32                	jne    c0016f0e <sysCallSpawn(regs*)+0x64>
c0016edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ee4:	52                   	push   edx
c0016ee5:	50                   	push   eax
c0016ee6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ee9:	56                   	push   esi
c0016eea:	e8 85 1a 00 00       	call   c0018974 <Process::Process(char const*, Process*, char**)>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016ef9:	75 bd                	jne    c0016eb8 <sysCallSpawn(regs*)+0xe>
c0016efb:	83 ec 0c             	sub    esp,0xc
c0016efe:	56                   	push   esi
c0016eff:	e8 5c 1f 00 00       	call   c0018e60 <Process::createUserThread()>
c0016f04:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	99                   	cdq    
c0016f0a:	59                   	pop    ecx
c0016f0b:	5b                   	pop    ebx
c0016f0c:	5e                   	pop    esi
c0016f0d:	c3                   	ret    
c0016f0e:	31 c0                	xor    eax,eax
c0016f10:	eb d2                	jmp    c0016ee4 <sysCallSpawn(regs*)+0x3a>

c0016f12 <sysCallGetEnv(regs*)>:
c0016f12:	57                   	push   edi
c0016f13:	56                   	push   esi
c0016f14:	53                   	push   ebx
c0016f15:	83 ec 1c             	sub    esp,0x1c
c0016f18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f21:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016f24:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016f27:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016f2a:	e8 46 e2 ff ff       	call   c0015175 <Krnl::getProcessTotalEnvCount(Process*)>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	39 c7                	cmp    edi,eax
c0016f34:	7c 14                	jl     c0016f4a <sysCallGetEnv(regs*)+0x38>
c0016f36:	85 f6                	test   esi,esi
c0016f38:	75 0b                	jne    c0016f45 <sysCallGetEnv(regs*)+0x33>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	31 c0                	xor    eax,eax
c0016f3f:	5b                   	pop    ebx
c0016f40:	31 d2                	xor    edx,edx
c0016f42:	5e                   	pop    esi
c0016f43:	5f                   	pop    edi
c0016f44:	c3                   	ret    
c0016f45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f48:	eb f0                	jmp    c0016f3a <sysCallGetEnv(regs*)+0x28>
c0016f4a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f4e:	52                   	push   edx
c0016f4f:	57                   	push   edi
c0016f50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f56:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016f59:	50                   	push   eax
c0016f5a:	e8 36 e2 ff ff       	call   c0015195 <Krnl::getProcessEnvPair(Process*, int)>
c0016f5f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016f62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f66:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016f6a:	83 c4 0c             	add    esp,0xc
c0016f6d:	85 c9                	test   ecx,ecx
c0016f6f:	75 23                	jne    c0016f94 <sysCallGetEnv(regs*)+0x82>
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	50                   	push   eax
c0016f75:	e8 36 97 fe ff       	call   c00006b0 <strlen>
c0016f7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f7d:	89 c3                	mov    ebx,eax
c0016f7f:	e8 2c 97 fe ff       	call   c00006b0 <strlen>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016f8b:	83 c4 10             	add    esp,0x10
c0016f8e:	31 d2                	xor    edx,edx
c0016f90:	5b                   	pop    ebx
c0016f91:	5e                   	pop    esi
c0016f92:	5f                   	pop    edi
c0016f93:	c3                   	ret    
c0016f94:	83 ec 08             	sub    esp,0x8
c0016f97:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f9a:	50                   	push   eax
c0016f9b:	56                   	push   esi
c0016f9c:	e8 af 97 fe ff       	call   c0000750 <strcpy>
c0016fa1:	58                   	pop    eax
c0016fa2:	5a                   	pop    edx
c0016fa3:	68 d3 6a 02 c0       	push   0xc0026ad3
c0016fa8:	56                   	push   esi
c0016fa9:	e8 e2 98 fe ff       	call   c0000890 <strcat>
c0016fae:	59                   	pop    ecx
c0016faf:	5b                   	pop    ebx
c0016fb0:	57                   	push   edi
c0016fb1:	56                   	push   esi
c0016fb2:	e8 d9 98 fe ff       	call   c0000890 <strcat>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	e9 7b ff ff ff       	jmp    c0016f3a <sysCallGetEnv(regs*)+0x28>

c0016fbf <sysAppSettings(regs*)>:
c0016fbf:	57                   	push   edi
c0016fc0:	56                   	push   esi
c0016fc1:	56                   	push   esi
c0016fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016fc9:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016fcf:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016fd4:	66 3d c0 09          	cmp    ax,0x9c0
c0016fd8:	75 2e                	jne    c0017008 <sysAppSettings(regs*)+0x49>
c0016fda:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016fe0:	83 e0 1f             	and    eax,0x1f
c0016fe3:	3c 01                	cmp    al,0x1
c0016fe5:	74 2c                	je     c0017013 <sysAppSettings(regs*)+0x54>
c0016fe7:	3c 07                	cmp    al,0x7
c0016fe9:	0f 84 b3 00 00 00    	je     c00170a2 <sysAppSettings(regs*)+0xe3>
c0016fef:	84 c0                	test   al,al
c0016ff1:	0f 84 d2 00 00 00    	je     c00170c9 <sysAppSettings(regs*)+0x10a>
c0016ff7:	3c 08                	cmp    al,0x8
c0016ff9:	74 63                	je     c001705e <sysAppSettings(regs*)+0x9f>
c0016ffb:	59                   	pop    ecx
c0016ffc:	0f b6 c0             	movzx  eax,al
c0016fff:	5e                   	pop    esi
c0017000:	05 e8 03 00 00       	add    eax,0x3e8
c0017005:	5f                   	pop    edi
c0017006:	99                   	cdq    
c0017007:	c3                   	ret    
c0017008:	b8 01 00 00 00       	mov    eax,0x1
c001700d:	59                   	pop    ecx
c001700e:	31 d2                	xor    edx,edx
c0017010:	5e                   	pop    esi
c0017011:	5f                   	pop    edi
c0017012:	c3                   	ret    
c0017013:	50                   	push   eax
c0017014:	68 00 01 00 00       	push   0x100
c0017019:	6a 00                	push   0x0
c001701b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017020:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017023:	83 c0 0c             	add    eax,0xc
c0017026:	50                   	push   eax
c0017027:	e8 68 96 fe ff       	call   c0000694 <memset>
c001702c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017031:	b9 ff 00 00 00       	mov    ecx,0xff
c0017036:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0017039:	83 c7 0c             	add    edi,0xc
c001703c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001703e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017043:	5a                   	pop    edx
c0017044:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017047:	59                   	pop    ecx
c0017048:	8d 50 0c             	lea    edx,[eax+0xc]
c001704b:	52                   	push   edx
c001704c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017052:	e8 1d 3d ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	31 c0                	xor    eax,eax
c001705c:	eb af                	jmp    c001700d <sysAppSettings(regs*)+0x4e>
c001705e:	83 ec 08             	sub    esp,0x8
c0017061:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017067:	83 e0 0f             	and    eax,0xf
c001706a:	50                   	push   eax
c001706b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017070:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017073:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017079:	e8 e6 3c ff ff       	call   c000ad64 <VgaText::setTitleColour(VgaColour)>
c001707e:	5f                   	pop    edi
c001707f:	58                   	pop    eax
c0017080:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017086:	c1 e8 04             	shr    eax,0x4
c0017089:	83 e0 0f             	and    eax,0xf
c001708c:	50                   	push   eax
c001708d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017092:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017095:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001709b:	e8 b4 3c ff ff       	call   c000ad54 <VgaText::setTitleTextColour(VgaColour)>
c00170a0:	eb b5                	jmp    c0017057 <sysAppSettings(regs*)+0x98>
c00170a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170aa:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00170b0:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00170b6:	c0 e8 06             	shr    al,0x6
c00170b9:	83 e0 01             	and    eax,0x1
c00170bc:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00170c2:	31 c0                	xor    eax,eax
c00170c4:	e9 44 ff ff ff       	jmp    c001700d <sysAppSettings(regs*)+0x4e>
c00170c9:	b8 02 00 00 00       	mov    eax,0x2
c00170ce:	e9 3a ff ff ff       	jmp    c001700d <sysAppSettings(regs*)+0x4e>

c00170d3 <sysSetFatAttrib(regs*)>:
c00170d3:	57                   	push   edi
c00170d4:	56                   	push   esi
c00170d5:	53                   	push   ebx
c00170d6:	83 ec 1c             	sub    esp,0x1c
c00170d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00170dd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00170e0:	68 14 01 00 00       	push   0x114
c00170e5:	e8 fd 2c ff ff       	call   c0009de7 <malloc>
c00170ea:	83 c4 0c             	add    esp,0xc
c00170ed:	89 c3                	mov    ebx,eax
c00170ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00170f7:	57                   	push   edi
c00170f8:	53                   	push   ebx
c00170f9:	e8 b6 65 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c00170fe:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0017101:	83 c4 0c             	add    esp,0xc
c0017104:	0f b6 d4             	movzx  edx,ah
c0017107:	0f b6 c0             	movzx  eax,al
c001710a:	52                   	push   edx
c001710b:	50                   	push   eax
c001710c:	53                   	push   ebx
c001710d:	e8 8e 68 ff ff       	call   c000d9a0 <File::chfatattr(unsigned char, unsigned char)>
c0017112:	83 c4 10             	add    esp,0x10
c0017115:	85 db                	test   ebx,ebx
c0017117:	74 14                	je     c001712d <sysSetFatAttrib(regs*)+0x5a>
c0017119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001711d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001711f:	83 ec 0c             	sub    esp,0xc
c0017122:	53                   	push   ebx
c0017123:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0017126:	83 c4 10             	add    esp,0x10
c0017129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001712d:	85 c0                	test   eax,eax
c001712f:	0f 95 c0             	setne  al
c0017132:	31 d2                	xor    edx,edx
c0017134:	0f b6 c0             	movzx  eax,al
c0017137:	f7 d8                	neg    eax
c0017139:	83 d2 00             	adc    edx,0x0
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	f7 da                	neg    edx
c0017141:	5b                   	pop    ebx
c0017142:	5e                   	pop    esi
c0017143:	5f                   	pop    edi
c0017144:	c3                   	ret    

c0017145 <sysPipe(regs*)>:
c0017145:	57                   	push   edi
c0017146:	56                   	push   esi
c0017147:	53                   	push   ebx
c0017148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0017152:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0017155:	6a 20                	push   0x20
c0017157:	e8 8b 2c ff ff       	call   c0009de7 <malloc>
c001715c:	89 c3                	mov    ebx,eax
c001715e:	58                   	pop    eax
c001715f:	5a                   	pop    edx
c0017160:	68 00 50 00 00       	push   0x5000
c0017165:	53                   	push   ebx
c0017166:	e8 81 39 ff ff       	call   c000aaec <Pipe::Pipe(int)>
c001716b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001716e:	e8 e3 47 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017173:	89 07                	mov    DWORD PTR [edi],eax
c0017175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017178:	e8 d9 47 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c001717d:	83 c4 10             	add    esp,0x10
c0017180:	89 06                	mov    DWORD PTR [esi],eax
c0017182:	31 d2                	xor    edx,edx
c0017184:	5b                   	pop    ebx
c0017185:	31 c0                	xor    eax,eax
c0017187:	5e                   	pop    esi
c0017188:	5f                   	pop    edi
c0017189:	c3                   	ret    

c001718a <sysGetUnixTime(regs*)>:
c001718a:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001718f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017195:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017199:	e9 34 70 ff ff       	jmp    c000e1d2 <Clock::timeInSecondsLocal()>

c001719e <string_ends_with(char const*, char const*)>:
c001719e:	57                   	push   edi
c001719f:	56                   	push   esi
c00171a0:	53                   	push   ebx
c00171a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171a9:	83 ec 0c             	sub    esp,0xc
c00171ac:	53                   	push   ebx
c00171ad:	e8 fe 94 fe ff       	call   c00006b0 <strlen>
c00171b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171b5:	89 c6                	mov    esi,eax
c00171b7:	e8 f4 94 fe ff       	call   c00006b0 <strlen>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	39 c6                	cmp    esi,eax
c00171c1:	7d 06                	jge    c00171c9 <string_ends_with(char const*, char const*)+0x2b>
c00171c3:	5b                   	pop    ebx
c00171c4:	31 c0                	xor    eax,eax
c00171c6:	5e                   	pop    esi
c00171c7:	5f                   	pop    edi
c00171c8:	c3                   	ret    
c00171c9:	83 ec 08             	sub    esp,0x8
c00171cc:	29 c6                	sub    esi,eax
c00171ce:	57                   	push   edi
c00171cf:	01 f3                	add    ebx,esi
c00171d1:	53                   	push   ebx
c00171d2:	e8 05 96 fe ff       	call   c00007dc <strcmp>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	85 c0                	test   eax,eax
c00171dc:	5b                   	pop    ebx
c00171dd:	0f 94 c0             	sete   al
c00171e0:	5e                   	pop    esi
c00171e1:	0f b6 c0             	movzx  eax,al
c00171e4:	5f                   	pop    edi
c00171e5:	c3                   	ret    

c00171e6 <sysCallOpen(regs*)>:
c00171e6:	56                   	push   esi
c00171e7:	53                   	push   ebx
c00171e8:	81 ec 04 01 00 00    	sub    esp,0x104
c00171ee:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00171f5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00171f8:	85 c9                	test   ecx,ecx
c00171fa:	0f 84 ad 01 00 00    	je     c00173ad <sysCallOpen(regs*)+0x1c7>
c0017200:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017203:	85 c0                	test   eax,eax
c0017205:	0f 84 a2 01 00 00    	je     c00173ad <sysCallOpen(regs*)+0x1c7>
c001720b:	52                   	push   edx
c001720c:	68 d5 6a 02 c0       	push   0xc0026ad5
c0017211:	50                   	push   eax
c0017212:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017216:	56                   	push   esi
c0017217:	e8 ee 62 ff ff       	call   c000d50a <Fs::standardiseFiles(char*, char const*, char const*)>
c001721c:	89 34 24             	mov    DWORD PTR [esp],esi
c001721f:	e8 8c 94 fe ff       	call   c00006b0 <strlen>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	48                   	dec    eax
c0017228:	74 1d                	je     c0017247 <sysCallOpen(regs*)+0x61>
c001722a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001722d:	eb 0f                	jmp    c001723e <sysCallOpen(regs*)+0x58>
c001722f:	80 fa 3a             	cmp    dl,0x3a
c0017232:	74 0f                	je     c0017243 <sysCallOpen(regs*)+0x5d>
c0017234:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0017238:	48                   	dec    eax
c0017239:	74 0c                	je     c0017247 <sysCallOpen(regs*)+0x61>
c001723b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001723e:	80 fa 2e             	cmp    dl,0x2e
c0017241:	75 ec                	jne    c001722f <sysCallOpen(regs*)+0x49>
c0017243:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0017247:	83 ec 08             	sub    esp,0x8
c001724a:	68 d9 6a 02 c0       	push   0xc0026ad9
c001724f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017252:	e8 47 ff ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	85 c0                	test   eax,eax
c001725c:	74 1d                	je     c001727b <sysCallOpen(regs*)+0x95>
c001725e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017261:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017267:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001726e:	81 c4 04 01 00 00    	add    esp,0x104
c0017274:	31 c0                	xor    eax,eax
c0017276:	31 d2                	xor    edx,edx
c0017278:	5b                   	pop    ebx
c0017279:	5e                   	pop    esi
c001727a:	c3                   	ret    
c001727b:	83 ec 08             	sub    esp,0x8
c001727e:	68 de 6a 02 c0       	push   0xc0026ade
c0017283:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017286:	e8 13 ff ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c001728b:	83 c4 10             	add    esp,0x10
c001728e:	85 c0                	test   eax,eax
c0017290:	75 cc                	jne    c001725e <sysCallOpen(regs*)+0x78>
c0017292:	83 ec 08             	sub    esp,0x8
c0017295:	68 da 6a 02 c0       	push   0xc0026ada
c001729a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001729d:	e8 3a 95 fe ff       	call   c00007dc <strcmp>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	85 c0                	test   eax,eax
c00172a7:	74 b5                	je     c001725e <sysCallOpen(regs*)+0x78>
c00172a9:	83 ec 08             	sub    esp,0x8
c00172ac:	68 d9 6a 02 c0       	push   0xc0026ad9
c00172b1:	56                   	push   esi
c00172b2:	e8 e7 fe ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	85 c0                	test   eax,eax
c00172bc:	75 a0                	jne    c001725e <sysCallOpen(regs*)+0x78>
c00172be:	83 ec 08             	sub    esp,0x8
c00172c1:	68 e3 6a 02 c0       	push   0xc0026ae3
c00172c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172c9:	e8 d0 fe ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c00172ce:	83 c4 10             	add    esp,0x10
c00172d1:	85 c0                	test   eax,eax
c00172d3:	0f 85 e7 00 00 00    	jne    c00173c0 <sysCallOpen(regs*)+0x1da>
c00172d9:	83 ec 08             	sub    esp,0x8
c00172dc:	68 e8 6a 02 c0       	push   0xc0026ae8
c00172e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172e4:	e8 b5 fe ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	85 c0                	test   eax,eax
c00172ee:	0f 85 cc 00 00 00    	jne    c00173c0 <sysCallOpen(regs*)+0x1da>
c00172f4:	83 ec 08             	sub    esp,0x8
c00172f7:	68 e4 6a 02 c0       	push   0xc0026ae4
c00172fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172ff:	e8 d8 94 fe ff       	call   c00007dc <strcmp>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	85 c0                	test   eax,eax
c0017309:	0f 84 b1 00 00 00    	je     c00173c0 <sysCallOpen(regs*)+0x1da>
c001730f:	83 ec 08             	sub    esp,0x8
c0017312:	68 e3 6a 02 c0       	push   0xc0026ae3
c0017317:	56                   	push   esi
c0017318:	e8 81 fe ff ff       	call   c001719e <string_ends_with(char const*, char const*)>
c001731d:	83 c4 10             	add    esp,0x10
c0017320:	85 c0                	test   eax,eax
c0017322:	0f 85 98 00 00 00    	jne    c00173c0 <sysCallOpen(regs*)+0x1da>
c0017328:	83 ec 0c             	sub    esp,0xc
c001732b:	68 14 01 00 00       	push   0x114
c0017330:	e8 b2 2a ff ff       	call   c0009de7 <malloc>
c0017335:	83 c4 0c             	add    esp,0xc
c0017338:	89 c6                	mov    esi,eax
c001733a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001733f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0017342:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017345:	56                   	push   esi
c0017346:	e8 69 63 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	85 f6                	test   esi,esi
c0017350:	74 5b                	je     c00173ad <sysCallOpen(regs*)+0x1c7>
c0017352:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017355:	0f b6 c2             	movzx  eax,dl
c0017358:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001735b:	89 d0                	mov    eax,edx
c001735d:	83 e0 01             	and    eax,0x1
c0017360:	f6 c2 02             	test   dl,0x2
c0017363:	74 03                	je     c0017368 <sysCallOpen(regs*)+0x182>
c0017365:	83 c8 02             	or     eax,0x2
c0017368:	f6 c2 04             	test   dl,0x4
c001736b:	74 03                	je     c0017370 <sysCallOpen(regs*)+0x18a>
c001736d:	83 c8 04             	or     eax,0x4
c0017370:	f6 c2 08             	test   dl,0x8
c0017373:	74 03                	je     c0017378 <sysCallOpen(regs*)+0x192>
c0017375:	83 c8 0a             	or     eax,0xa
c0017378:	83 e2 10             	and    edx,0x10
c001737b:	74 03                	je     c0017380 <sysCallOpen(regs*)+0x19a>
c001737d:	83 c8 12             	or     eax,0x12
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	50                   	push   eax
c0017384:	56                   	push   esi
c0017385:	e8 04 64 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c001738a:	83 c4 10             	add    esp,0x10
c001738d:	85 c0                	test   eax,eax
c001738f:	75 1c                	jne    c00173ad <sysCallOpen(regs*)+0x1c7>
c0017391:	83 ec 0c             	sub    esp,0xc
c0017394:	56                   	push   esi
c0017395:	e8 bc 45 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c001739a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	89 02                	mov    DWORD PTR [edx],eax
c00173a2:	c1 f8 1f             	sar    eax,0x1f
c00173a5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00173a8:	e9 c1 fe ff ff       	jmp    c001726e <sysCallOpen(regs*)+0x88>
c00173ad:	81 c4 04 01 00 00    	add    esp,0x104
c00173b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00173bd:	5b                   	pop    ebx
c00173be:	5e                   	pop    esi
c00173bf:	c3                   	ret    
c00173c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00173c3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00173c9:	e9 99 fe ff ff       	jmp    c0017267 <sysCallOpen(regs*)+0x81>

c00173ce <Sys::loadSyscalls()>:
c00173ce:	c7 05 a0 97 02 c0 3f 66 01 c0 	mov    DWORD PTR ds:0xc00297a0,0xc001663f
c00173d8:	c7 05 a4 97 02 c0 34 62 01 c0 	mov    DWORD PTR ds:0xc00297a4,0xc0016234
c00173e2:	c7 05 a8 97 02 c0 25 64 01 c0 	mov    DWORD PTR ds:0xc00297a8,0xc0016425
c00173ec:	c7 05 ac 97 02 c0 75 65 01 c0 	mov    DWORD PTR ds:0xc00297ac,0xc0016575
c00173f6:	c7 05 b0 97 02 c0 bd 63 01 c0 	mov    DWORD PTR ds:0xc00297b0,0xc00163bd
c0017400:	c7 05 b4 97 02 c0 6b 62 01 c0 	mov    DWORD PTR ds:0xc00297b4,0xc001626b
c001740a:	c7 05 b8 97 02 c0 4c 62 01 c0 	mov    DWORD PTR ds:0xc00297b8,0xc001624c
c0017414:	c7 05 bc 97 02 c0 7a 64 01 c0 	mov    DWORD PTR ds:0xc00297bc,0xc001647a
c001741e:	c7 05 c4 97 02 c0 02 6b 01 c0 	mov    DWORD PTR ds:0xc00297c4,0xc0016b02
c0017428:	c7 05 c0 97 02 c0 e6 71 01 c0 	mov    DWORD PTR ds:0xc00297c0,0xc00171e6
c0017432:	c7 05 c8 97 02 c0 62 6b 01 c0 	mov    DWORD PTR ds:0xc00297c8,0xc0016b62
c001743c:	c7 05 cc 97 02 c0 45 68 01 c0 	mov    DWORD PTR ds:0xc00297cc,0xc0016845
c0017446:	c7 05 d0 97 02 c0 77 66 01 c0 	mov    DWORD PTR ds:0xc00297d0,0xc0016677
c0017450:	c7 05 d4 97 02 c0 7c 66 01 c0 	mov    DWORD PTR ds:0xc00297d4,0xc001667c
c001745a:	c7 05 d8 97 02 c0 2b 6c 01 c0 	mov    DWORD PTR ds:0xc00297d8,0xc0016c2b
c0017464:	c7 05 dc 97 02 c0 d7 6b 01 c0 	mov    DWORD PTR ds:0xc00297dc,0xc0016bd7
c001746e:	c7 05 e0 97 02 c0 1e 69 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc001691e
c0017478:	c7 05 e4 97 02 c0 75 69 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc0016975
c0017482:	c7 05 e8 97 02 c0 e1 69 01 c0 	mov    DWORD PTR ds:0xc00297e8,0xc00169e1
c001748c:	c7 05 ec 97 02 c0 81 66 01 c0 	mov    DWORD PTR ds:0xc00297ec,0xc0016681
c0017496:	c7 05 f0 97 02 c0 9b 6c 01 c0 	mov    DWORD PTR ds:0xc00297f0,0xc0016c9b
c00174a0:	c7 05 f4 97 02 c0 b5 6c 01 c0 	mov    DWORD PTR ds:0xc00297f4,0xc0016cb5
c00174aa:	c7 05 f8 97 02 c0 b5 6c 01 c0 	mov    DWORD PTR ds:0xc00297f8,0xc0016cb5
c00174b4:	c7 05 fc 97 02 c0 ea 6c 01 c0 	mov    DWORD PTR ds:0xc00297fc,0xc0016cea
c00174be:	c7 05 00 98 02 c0 4e 6d 01 c0 	mov    DWORD PTR ds:0xc0029800,0xc0016d4e
c00174c8:	c7 05 04 98 02 c0 8b 66 01 c0 	mov    DWORD PTR ds:0xc0029804,0xc001668b
c00174d2:	c7 05 08 98 02 c0 b2 6d 01 c0 	mov    DWORD PTR ds:0xc0029808,0xc0016db2
c00174dc:	c7 05 0c 98 02 c0 02 68 01 c0 	mov    DWORD PTR ds:0xc002980c,0xc0016802
c00174e6:	c7 05 10 98 02 c0 fe 6d 01 c0 	mov    DWORD PTR ds:0xc0029810,0xc0016dfe
c00174f0:	c7 05 14 98 02 c0 c4 68 01 c0 	mov    DWORD PTR ds:0xc0029814,0xc00168c4
c00174fa:	c7 05 18 98 02 c0 81 6e 01 c0 	mov    DWORD PTR ds:0xc0029818,0xc0016e81
c0017504:	c7 05 1c 98 02 c0 53 6a 01 c0 	mov    DWORD PTR ds:0xc002981c,0xc0016a53
c001750e:	c7 05 20 98 02 c0 aa 6e 01 c0 	mov    DWORD PTR ds:0xc0029820,0xc0016eaa
c0017518:	c7 05 24 98 02 c0 12 6f 01 c0 	mov    DWORD PTR ds:0xc0029824,0xc0016f12
c0017522:	c7 05 28 98 02 c0 bf 6f 01 c0 	mov    DWORD PTR ds:0xc0029828,0xc0016fbf
c001752c:	c7 05 2c 98 02 c0 9b 66 01 c0 	mov    DWORD PTR ds:0xc002982c,0xc001669b
c0017536:	c7 05 30 98 02 c0 05 67 01 c0 	mov    DWORD PTR ds:0xc0029830,0xc0016705
c0017540:	c7 05 34 98 02 c0 4f 67 01 c0 	mov    DWORD PTR ds:0xc0029834,0xc001674f
c001754a:	c7 05 38 98 02 c0 d3 70 01 c0 	mov    DWORD PTR ds:0xc0029838,0xc00170d3
c0017554:	c7 05 3c 98 02 c0 d0 6c 01 c0 	mov    DWORD PTR ds:0xc002983c,0xc0016cd0
c001755e:	c7 05 40 98 02 c0 a4 67 01 c0 	mov    DWORD PTR ds:0xc0029840,0xc00167a4
c0017568:	c7 05 44 98 02 c0 45 71 01 c0 	mov    DWORD PTR ds:0xc0029844,0xc0017145
c0017572:	c7 05 48 98 02 c0 8a 71 01 c0 	mov    DWORD PTR ds:0xc0029848,0xc001718a
c001757c:	c7 05 4c 98 02 c0 15 63 01 c0 	mov    DWORD PTR ds:0xc002984c,0xc0016315
c0017586:	c7 05 50 98 02 c0 96 64 01 c0 	mov    DWORD PTR ds:0xc0029850,0xc0016496
c0017590:	c7 05 54 98 02 c0 2b 65 01 c0 	mov    DWORD PTR ds:0xc0029854,0xc001652b
c001759a:	c7 05 58 98 02 c0 fe 61 01 c0 	mov    DWORD PTR ds:0xc0029858,0xc00161fe
c00175a4:	c7 05 5c 98 02 c0 dd 65 01 c0 	mov    DWORD PTR ds:0xc002985c,0xc00165dd
c00175ae:	c7 05 60 98 02 c0 77 62 01 c0 	mov    DWORD PTR ds:0xc0029860,0xc0016277
c00175b8:	c7 05 64 98 02 c0 91 62 01 c0 	mov    DWORD PTR ds:0xc0029864,0xc0016291
c00175c2:	c3                   	ret    

c00175c3 <Sys::systemCall(regs*, void*)>:
c00175c3:	53                   	push   ebx
c00175c4:	83 ec 08             	sub    esp,0x8
c00175c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00175cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00175ce:	83 f8 7f             	cmp    eax,0x7f
c00175d1:	77 16                	ja     c00175e9 <Sys::systemCall(regs*, void*)+0x26>
c00175d3:	8b 14 85 a0 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6860]
c00175da:	85 d2                	test   edx,edx
c00175dc:	74 0b                	je     c00175e9 <Sys::systemCall(regs*, void*)+0x26>
c00175de:	83 ec 0c             	sub    esp,0xc
c00175e1:	53                   	push   ebx
c00175e2:	ff d2                	call   edx
c00175e4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00175e7:	eb 0d                	jmp    c00175f6 <Sys::systemCall(regs*, void*)+0x33>
c00175e9:	52                   	push   edx
c00175ea:	52                   	push   edx
c00175eb:	50                   	push   eax
c00175ec:	68 ed 6a 02 c0       	push   0xc0026aed
c00175f1:	e8 53 5b ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00175fe:	31 d2                	xor    edx,edx
c0017600:	83 c4 08             	add    esp,0x8
c0017603:	5b                   	pop    ebx
c0017604:	c3                   	ret    

c0017605 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017605:	55                   	push   ebp
c0017606:	57                   	push   edi
c0017607:	56                   	push   esi
c0017608:	53                   	push   ebx
c0017609:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001760f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017616:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001761d:	85 c0                	test   eax,eax
c001761f:	0f 95 c1             	setne  cl
c0017622:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001762a:	0f 94 c2             	sete   dl
c001762d:	84 d1                	test   cl,dl
c001762f:	74 23                	je     c0017654 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017631:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0017637:	74 1b                	je     c0017654 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017639:	81 c3 00 10 00 00    	add    ebx,0x1000
c001763f:	89 da                	mov    edx,ebx
c0017641:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0017647:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001764d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0017654:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001765b:	05 ff 0f 00 00       	add    eax,0xfff
c0017660:	83 ec 0c             	sub    esp,0xc
c0017663:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017667:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001766d:	c1 e8 0c             	shr    eax,0xc
c0017670:	89 fe                	mov    esi,edi
c0017672:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017676:	c1 ee 0c             	shr    esi,0xc
c0017679:	6a 01                	push   0x1
c001767b:	e8 21 47 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0017680:	89 c5                	mov    ebp,eax
c0017682:	58                   	pop    eax
c0017683:	5a                   	pop    edx
c0017684:	56                   	push   esi
c0017685:	68 01 6b 02 c0       	push   0xc0026b01
c001768a:	e8 ba 5a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001768f:	59                   	pop    ecx
c0017690:	58                   	pop    eax
c0017691:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017695:	68 13 6b 02 c0       	push   0xc0026b13
c001769a:	e8 aa 5a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00176a8:	0f 86 31 01 00 00    	jbe    c00177df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00176ae:	c1 e6 0c             	shl    esi,0xc
c00176b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176b4:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00176b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176bb:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00176c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176c5:	01 df                	add    edi,ebx
c00176c7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c00176ca:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176ce:	0f 84 08 01 00 00    	je     c00177dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00176d4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00176da:	76 05                	jbe    c00176e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00176dc:	bf 00 10 00 00       	mov    edi,0x1000
c00176e1:	83 ec 0c             	sub    esp,0xc
c00176e4:	31 d2                	xor    edx,edx
c00176e6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00176ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00176f3:	50                   	push   eax
c00176f4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00176f8:	56                   	push   esi
c00176f9:	52                   	push   edx
c00176fa:	57                   	push   edi
c00176fb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0017702:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017705:	83 c4 20             	add    esp,0x20
c0017708:	85 c0                	test   eax,eax
c001770a:	74 0a                	je     c0017716 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001770c:	53                   	push   ebx
c001770d:	53                   	push   ebx
c001770e:	50                   	push   eax
c001770f:	68 25 6b 02 c0       	push   0xc0026b25
c0017714:	eb 0f                	jmp    c0017725 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0017716:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001771a:	74 20                	je     c001773c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001771c:	51                   	push   ecx
c001771d:	51                   	push   ecx
c001771e:	6a 00                	push   0x0
c0017720:	68 50 6b 02 c0       	push   0xc0026b50
c0017725:	e8 1f 5a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001772a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001772d:	e8 63 49 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	31 c0                	xor    eax,eax
c0017737:	e9 68 01 00 00       	jmp    c00178a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001773c:	fa                   	cli    
c001773d:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0017743:	e8 56 2d ff ff       	call   c000a49e <Phys::allocatePage()>
c0017748:	6a 07                	push   0x7
c001774a:	89 c7                	mov    edi,eax
c001774c:	55                   	push   ebp
c001774d:	50                   	push   eax
c001774e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017753:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017756:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001775c:	e8 ab 4c ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017761:	83 c4 0c             	add    esp,0xc
c0017764:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001776b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017771:	6a 00                	push   0x0
c0017773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017778:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001777b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017781:	e8 e0 4a ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c0017786:	58                   	pop    eax
c0017787:	5a                   	pop    edx
c0017788:	68 07 0c 00 00       	push   0xc07
c001778d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017791:	57                   	push   edi
c0017792:	89 ef                	mov    edi,ebp
c0017794:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001779b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177a1:	6a 00                	push   0x0
c00177a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177b1:	e8 12 50 ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00177b6:	b9 00 10 00 00       	mov    ecx,0x1000
c00177bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177bd:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00177c2:	83 c4 20             	add    esp,0x20
c00177c5:	48                   	dec    eax
c00177c6:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00177cb:	85 c0                	test   eax,eax
c00177cd:	75 01                	jne    c00177d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00177cf:	fb                   	sti    
c00177d0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00177d7:	e9 df fe ff ff       	jmp    c00176bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00177dc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00177df:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00177e7:	0f 86 a9 00 00 00    	jbe    c0017896 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00177ed:	fa                   	cli    
c00177ee:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00177f4:	51                   	push   ecx
c00177f5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00177fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017802:	6a 00                	push   0x0
c0017804:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017809:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001780c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017812:	e8 4f 4a ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c0017817:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001781b:	c1 e6 0c             	shl    esi,0xc
c001781e:	01 de                	add    esi,ebx
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	39 de                	cmp    esi,ebx
c0017825:	74 61                	je     c0017888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0017827:	e8 72 2c ff ff       	call   c000a49e <Phys::allocatePage()>
c001782c:	6a 07                	push   0x7
c001782e:	89 c7                	mov    edi,eax
c0017830:	55                   	push   ebp
c0017831:	50                   	push   eax
c0017832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001783a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017840:	e8 c7 4b ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017845:	58                   	pop    eax
c0017846:	5a                   	pop    edx
c0017847:	68 07 0c 00 00       	push   0xc07
c001784c:	53                   	push   ebx
c001784d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017853:	57                   	push   edi
c0017854:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001785b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017861:	6a 00                	push   0x0
c0017863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017868:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001786b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017871:	e8 52 4f ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017876:	83 c4 1c             	add    esp,0x1c
c0017879:	68 00 10 00 00       	push   0x1000
c001787e:	6a 00                	push   0x0
c0017880:	55                   	push   ebp
c0017881:	e8 0e 8e fe ff       	call   c0000694 <memset>
c0017886:	eb 98                	jmp    c0017820 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017888:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001788d:	48                   	dec    eax
c001788e:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0017893:	75 01                	jne    c0017896 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017895:	fb                   	sti    
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	55                   	push   ebp
c001789a:	e8 f6 47 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	b0 01                	mov    al,0x1
c00178a4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00178aa:	5b                   	pop    ebx
c00178ab:	5e                   	pop    esi
c00178ac:	5f                   	pop    edi
c00178ad:	5d                   	pop    ebp
c00178ae:	c3                   	ret    

c00178af <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00178af:	55                   	push   ebp
c00178b0:	57                   	push   edi
c00178b1:	56                   	push   esi
c00178b2:	53                   	push   ebx
c00178b3:	83 ec 48             	sub    esp,0x48
c00178b6:	68 14 01 00 00       	push   0x114
c00178bb:	e8 27 25 ff ff       	call   c0009de7 <malloc>
c00178c0:	83 c4 0c             	add    esp,0xc
c00178c3:	89 c6                	mov    esi,eax
c00178c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00178cd:	50                   	push   eax
c00178ce:	e8 e1 5d ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c00178d3:	58                   	pop    eax
c00178d4:	5a                   	pop    edx
c00178d5:	6a 01                	push   0x1
c00178d7:	56                   	push   esi
c00178d8:	e8 b1 5e ff ff       	call   c000d78e <File::open(FileOpenMode)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	85 c0                	test   eax,eax
c00178e2:	0f 85 47 01 00 00    	jne    c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00178f0:	83 ec 0c             	sub    esp,0xc
c00178f3:	6a 34                	push   0x34
c00178f5:	e8 ed 24 ff ff       	call   c0009de7 <malloc>
c00178fa:	89 c3                	mov    ebx,eax
c00178fc:	58                   	pop    eax
c00178fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00178ff:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017903:	57                   	push   edi
c0017904:	53                   	push   ebx
c0017905:	6a 00                	push   0x0
c0017907:	6a 34                	push   0x34
c0017909:	56                   	push   esi
c001790a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001790d:	83 c4 20             	add    esp,0x20
c0017910:	85 c0                	test   eax,eax
c0017912:	0f 85 17 01 00 00    	jne    c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017918:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001791e:	0f 85 0b 01 00 00    	jne    c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017924:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017927:	85 c0                	test   eax,eax
c0017929:	0f 84 00 01 00 00    	je     c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001792f:	31 d2                	xor    edx,edx
c0017931:	55                   	push   ebp
c0017932:	52                   	push   edx
c0017933:	50                   	push   eax
c0017934:	56                   	push   esi
c0017935:	e8 12 5f ff ff       	call   c000d84c <File::seek(unsigned long long)>
c001793a:	83 c4 10             	add    esp,0x10
c001793d:	85 c0                	test   eax,eax
c001793f:	0f 85 ea 00 00 00    	jne    c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017945:	83 ec 0c             	sub    esp,0xc
c0017948:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001794b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001794f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017953:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017957:	0f af c2             	imul   eax,edx
c001795a:	50                   	push   eax
c001795b:	e8 87 24 ff ff       	call   c0009de7 <malloc>
c0017960:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017962:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017966:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017969:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001796d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017971:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017975:	0f af c2             	imul   eax,edx
c0017978:	99                   	cdq    
c0017979:	52                   	push   edx
c001797a:	50                   	push   eax
c001797b:	56                   	push   esi
c001797c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001797f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017982:	83 c4 20             	add    esp,0x20
c0017985:	85 c0                	test   eax,eax
c0017987:	0f 84 a2 00 00 00    	je     c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001798d:	31 d2                	xor    edx,edx
c001798f:	51                   	push   ecx
c0017990:	52                   	push   edx
c0017991:	50                   	push   eax
c0017992:	56                   	push   esi
c0017993:	e8 b4 5e ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	85 c0                	test   eax,eax
c001799d:	0f 85 8c 00 00 00    	jne    c0017a2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00179a3:	83 ec 0c             	sub    esp,0xc
c00179a6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00179aa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00179ae:	31 ed                	xor    ebp,ebp
c00179b0:	0f af c2             	imul   eax,edx
c00179b3:	50                   	push   eax
c00179b4:	e8 2e 24 ff ff       	call   c0009de7 <malloc>
c00179b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00179bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179c6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00179ca:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00179ce:	0f af c2             	imul   eax,edx
c00179d1:	99                   	cdq    
c00179d2:	52                   	push   edx
c00179d3:	50                   	push   eax
c00179d4:	56                   	push   esi
c00179d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179d8:	83 c4 20             	add    esp,0x20
c00179db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00179e3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00179e7:	0f 86 80 00 00 00    	jbe    c0017a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00179ed:	0f b7 fd             	movzx  edi,bp
c00179f0:	c1 e7 05             	shl    edi,0x5
c00179f3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00179f7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00179fa:	75 6b                	jne    c0017a67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00179fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00179ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a03:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a0a:	52                   	push   edx
c0017a0b:	31 d2                	xor    edx,edx
c0017a0d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017a10:	52                   	push   edx
c0017a11:	50                   	push   eax
c0017a12:	56                   	push   esi
c0017a13:	e8 34 5e ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	85 c0                	test   eax,eax
c0017a1d:	74 17                	je     c0017a36 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017a1f:	83 ec 0c             	sub    esp,0xc
c0017a22:	68 7c 6b 02 c0       	push   0xc0026b7c
c0017a27:	e8 1d 57 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0017a2c:	83 c4 10             	add    esp,0x10
c0017a2f:	31 c0                	xor    eax,eax
c0017a31:	e9 87 00 00 00       	jmp    c0017abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017a3c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017a3f:	50                   	push   eax
c0017a40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a48:	56                   	push   esi
c0017a49:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017a4d:	e8 b3 fb ff ff       	call   c0017605 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017a52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a56:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017a5a:	83 c4 20             	add    esp,0x20
c0017a5d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017a61:	73 04                	jae    c0017a67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a67:	45                   	inc    ebp
c0017a68:	e9 76 ff ff ff       	jmp    c00179e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017a6d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017a71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a79:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017a7f:	83 ec 0c             	sub    esp,0xc
c0017a82:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017a88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017a8d:	05 00 10 00 00       	add    eax,0x1000
c0017a92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a99:	e8 59 23 ff ff       	call   c0009df7 <free>
c0017a9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017aa1:	e8 51 23 ff ff       	call   c0009df7 <free>
c0017aa6:	58                   	pop    eax
c0017aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017aab:	e8 47 23 ff ff       	call   c0009df7 <free>
c0017ab0:	89 34 24             	mov    DWORD PTR [esp],esi
c0017ab3:	e8 34 5d ff ff       	call   c000d7ec <File::close()>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	b0 01                	mov    al,0x1
c0017abd:	83 c4 3c             	add    esp,0x3c
c0017ac0:	5b                   	pop    ebx
c0017ac1:	5e                   	pop    esi
c0017ac2:	5f                   	pop    edi
c0017ac3:	5d                   	pop    ebp
c0017ac4:	c3                   	ret    

c0017ac5 <Thr::runtimeReferenceHelper()>:
c0017ac5:	83 ec 18             	sub    esp,0x18
c0017ac8:	68 84 6b 02 c0       	push   0xc0026b84
c0017acd:	e8 77 56 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0017ad2:	fa                   	cli    
c0017ad3:	83 c4 10             	add    esp,0x10
c0017ad6:	eb fe                	jmp    c0017ad6 <Thr::runtimeReferenceHelper()+0x11>

c0017ad8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017ad8:	57                   	push   edi
c0017ad9:	56                   	push   esi
c0017ada:	53                   	push   ebx
c0017adb:	31 db                	xor    ebx,ebx
c0017add:	39 1d 40 a1 02 c0    	cmp    DWORD PTR ds:0xc002a140,ebx
c0017ae3:	7e 3c                	jle    c0017b21 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017ae5:	8b 34 9d c0 a0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5f40]
c0017aec:	31 ff                	xor    edi,edi
c0017aee:	39 3c 9d c0 9f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6040],edi
c0017af5:	7e 27                	jle    c0017b1e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017af7:	50                   	push   eax
c0017af8:	50                   	push   eax
c0017af9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017afd:	8b 06                	mov    eax,DWORD PTR [esi]
c0017aff:	03 04 9d 40 a0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5fc0]
c0017b06:	50                   	push   eax
c0017b07:	e8 d0 8c fe ff       	call   c00007dc <strcmp>
c0017b0c:	83 c4 10             	add    esp,0x10
c0017b0f:	85 c0                	test   eax,eax
c0017b11:	75 05                	jne    c0017b18 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017b13:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017b16:	eb 0b                	jmp    c0017b23 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017b18:	83 c6 10             	add    esi,0x10
c0017b1b:	47                   	inc    edi
c0017b1c:	eb d0                	jmp    c0017aee <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017b1e:	43                   	inc    ebx
c0017b1f:	eb bc                	jmp    c0017add <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017b21:	31 c0                	xor    eax,eax
c0017b23:	5b                   	pop    ebx
c0017b24:	5e                   	pop    esi
c0017b25:	5f                   	pop    edi
c0017b26:	c3                   	ret    

c0017b27 <Thr::loadKernelSymbolTable(char const*)>:
c0017b27:	55                   	push   ebp
c0017b28:	57                   	push   edi
c0017b29:	56                   	push   esi
c0017b2a:	53                   	push   ebx
c0017b2b:	83 ec 68             	sub    esp,0x68
c0017b2e:	8b 35 90 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a190
c0017b34:	68 14 01 00 00       	push   0x114
c0017b39:	e8 a9 22 ff ff       	call   c0009de7 <malloc>
c0017b3e:	83 c4 0c             	add    esp,0xc
c0017b41:	89 c3                	mov    ebx,eax
c0017b43:	56                   	push   esi
c0017b44:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017b48:	50                   	push   eax
c0017b49:	e8 66 5b ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0017b4e:	5e                   	pop    esi
c0017b4f:	5f                   	pop    edi
c0017b50:	6a 01                	push   0x1
c0017b52:	53                   	push   ebx
c0017b53:	e8 36 5c ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	85 c0                	test   eax,eax
c0017b5d:	74 0a                	je     c0017b69 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	68 a6 6b 02 c0       	push   0xc0026ba6
c0017b67:	eb 34                	jmp    c0017b9d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017b69:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017b71:	83 ec 0c             	sub    esp,0xc
c0017b74:	6a 34                	push   0x34
c0017b76:	e8 6c 22 ff ff       	call   c0009de7 <malloc>
c0017b7b:	59                   	pop    ecx
c0017b7c:	89 c7                	mov    edi,eax
c0017b7e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b84:	56                   	push   esi
c0017b85:	57                   	push   edi
c0017b86:	6a 00                	push   0x0
c0017b88:	6a 34                	push   0x34
c0017b8a:	53                   	push   ebx
c0017b8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b8e:	83 c4 20             	add    esp,0x20
c0017b91:	85 c0                	test   eax,eax
c0017b93:	74 17                	je     c0017bac <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017b95:	83 ec 0c             	sub    esp,0xc
c0017b98:	68 bd 6b 02 c0       	push   0xc0026bbd
c0017b9d:	e8 87 d6 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	31 c0                	xor    eax,eax
c0017ba7:	e9 31 02 00 00       	jmp    c0017ddd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017bac:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017bb2:	75 e1                	jne    c0017b95 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017bb4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017bb7:	85 c0                	test   eax,eax
c0017bb9:	74 da                	je     c0017b95 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017bbb:	52                   	push   edx
c0017bbc:	31 d2                	xor    edx,edx
c0017bbe:	52                   	push   edx
c0017bbf:	50                   	push   eax
c0017bc0:	53                   	push   ebx
c0017bc1:	e8 86 5c ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	85 c0                	test   eax,eax
c0017bcb:	75 c8                	jne    c0017b95 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017bcd:	83 ec 0c             	sub    esp,0xc
c0017bd0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017bd4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bd8:	31 ed                	xor    ebp,ebp
c0017bda:	0f af c2             	imul   eax,edx
c0017bdd:	50                   	push   eax
c0017bde:	e8 04 22 ff ff       	call   c0009de7 <malloc>
c0017be3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017be5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017be9:	89 34 24             	mov    DWORD PTR [esp],esi
c0017bec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bf0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017bf4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bf8:	0f af c2             	imul   eax,edx
c0017bfb:	99                   	cdq    
c0017bfc:	52                   	push   edx
c0017bfd:	50                   	push   eax
c0017bfe:	53                   	push   ebx
c0017bff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c02:	83 c4 20             	add    esp,0x20
c0017c05:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c0d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017c15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c25:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017c29:	0f 86 aa 00 00 00    	jbe    c0017cd9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017c2f:	0f b7 f5             	movzx  esi,bp
c0017c32:	6b f6 28             	imul   esi,esi,0x28
c0017c35:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017c39:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017c3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c40:	50                   	push   eax
c0017c41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c45:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017c49:	8b 16                	mov    edx,DWORD PTR [esi]
c0017c4b:	6b c0 28             	imul   eax,eax,0x28
c0017c4e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017c52:	89 d0                	mov    eax,edx
c0017c54:	31 d2                	xor    edx,edx
c0017c56:	52                   	push   edx
c0017c57:	50                   	push   eax
c0017c58:	53                   	push   ebx
c0017c59:	e8 ee 5b ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017c5e:	83 c4 0c             	add    esp,0xc
c0017c61:	6a 20                	push   0x20
c0017c63:	6a 00                	push   0x0
c0017c65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c69:	52                   	push   edx
c0017c6a:	e8 25 8a fe ff       	call   c0000694 <memset>
c0017c6f:	58                   	pop    eax
c0017c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c72:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017c76:	51                   	push   ecx
c0017c77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017c7b:	52                   	push   edx
c0017c7c:	6a 00                	push   0x0
c0017c7e:	6a 1f                	push   0x1f
c0017c80:	53                   	push   ebx
c0017c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c84:	83 c4 18             	add    esp,0x18
c0017c87:	68 d4 6b 02 c0       	push   0xc0026bd4
c0017c8c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c90:	52                   	push   edx
c0017c91:	e8 46 8b fe ff       	call   c00007dc <strcmp>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	85 c0                	test   eax,eax
c0017c9b:	75 0f                	jne    c0017cac <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017c9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cac:	50                   	push   eax
c0017cad:	50                   	push   eax
c0017cae:	68 dc 6b 02 c0       	push   0xc0026bdc
c0017cb3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017cb7:	50                   	push   eax
c0017cb8:	e8 1f 8b fe ff       	call   c00007dc <strcmp>
c0017cbd:	83 c4 10             	add    esp,0x10
c0017cc0:	85 c0                	test   eax,eax
c0017cc2:	75 0f                	jne    c0017cd3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017cc4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017cc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ccf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cd3:	45                   	inc    ebp
c0017cd4:	e9 4c ff ff ff       	jmp    c0017c25 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017cd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017cde:	75 10                	jne    c0017cf0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	68 e4 6b 02 c0       	push   0xc0026be4
c0017ce8:	e8 3c d5 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017cf5:	75 10                	jne    c0017d07 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017cf7:	83 ec 0c             	sub    esp,0xc
c0017cfa:	68 e4 6b 02 c0       	push   0xc0026be4
c0017cff:	e8 25 d5 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	31 d2                	xor    edx,edx
c0017d09:	50                   	push   eax
c0017d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d0e:	52                   	push   edx
c0017d0f:	50                   	push   eax
c0017d10:	53                   	push   ebx
c0017d11:	e8 36 5b ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017d16:	5a                   	pop    edx
c0017d17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d1b:	e8 c7 20 ff ff       	call   c0009de7 <malloc>
c0017d20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d28:	31 c9                	xor    ecx,ecx
c0017d2a:	5e                   	pop    esi
c0017d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d2d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017d31:	55                   	push   ebp
c0017d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d36:	51                   	push   ecx
c0017d37:	52                   	push   edx
c0017d38:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017d3c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017d40:	53                   	push   ebx
c0017d41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d44:	83 c4 14             	add    esp,0x14
c0017d47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d4b:	e8 97 20 ff ff       	call   c0009de7 <malloc>
c0017d50:	89 c6                	mov    esi,eax
c0017d52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d54:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d57:	56                   	push   esi
c0017d58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d60:	51                   	push   ecx
c0017d61:	52                   	push   edx
c0017d62:	53                   	push   ebx
c0017d63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d6a:	8b 15 40 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a140
c0017d70:	83 c4 1c             	add    esp,0x1c
c0017d73:	c1 e8 04             	shr    eax,0x4
c0017d76:	89 04 95 c0 9f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6040],eax
c0017d7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d81:	31 d2                	xor    edx,edx
c0017d83:	52                   	push   edx
c0017d84:	50                   	push   eax
c0017d85:	53                   	push   ebx
c0017d86:	e8 c1 5a ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017d8b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017d8d:	31 d2                	xor    edx,edx
c0017d8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d92:	56                   	push   esi
c0017d93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d97:	52                   	push   edx
c0017d98:	50                   	push   eax
c0017d99:	53                   	push   ebx
c0017d9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d9d:	83 c4 14             	add    esp,0x14
c0017da0:	53                   	push   ebx
c0017da1:	e8 46 5a ff ff       	call   c000d7ec <File::close()>
c0017da6:	5d                   	pop    ebp
c0017da7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dab:	e8 47 20 ff ff       	call   c0009df7 <free>
c0017db0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017db3:	e8 3f 20 ff ff       	call   c0009df7 <free>
c0017db8:	a1 40 a1 02 c0       	mov    eax,ds:0xc002a140
c0017dbd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017dc1:	8d 50 01             	lea    edx,[eax+0x1]
c0017dc4:	89 0c 85 c0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f40],ecx
c0017dcb:	89 34 85 40 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fc0],esi
c0017dd2:	89 15 40 a1 02 c0    	mov    DWORD PTR ds:0xc002a140,edx
c0017dd8:	83 c4 10             	add    esp,0x10
c0017ddb:	b0 01                	mov    al,0x1
c0017ddd:	83 c4 5c             	add    esp,0x5c
c0017de0:	5b                   	pop    ebx
c0017de1:	5e                   	pop    esi
c0017de2:	5f                   	pop    edi
c0017de3:	5d                   	pop    ebp
c0017de4:	c3                   	ret    

c0017de5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017de5:	55                   	push   ebp
c0017de6:	57                   	push   edi
c0017de7:	56                   	push   esi
c0017de8:	53                   	push   ebx
c0017de9:	81 ec 68 03 00 00    	sub    esp,0x368
c0017def:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017df6:	8b 1d 90 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a190
c0017dfc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017e00:	68 14 01 00 00       	push   0x114
c0017e05:	e8 dd 1f ff ff       	call   c0009de7 <malloc>
c0017e0a:	83 c4 0c             	add    esp,0xc
c0017e0d:	89 c5                	mov    ebp,eax
c0017e0f:	53                   	push   ebx
c0017e10:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017e17:	50                   	push   eax
c0017e18:	e8 97 58 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0017e1d:	5e                   	pop    esi
c0017e1e:	5f                   	pop    edi
c0017e1f:	6a 01                	push   0x1
c0017e21:	55                   	push   ebp
c0017e22:	e8 67 59 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	0f 85 a7 06 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e32:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017e3a:	83 ec 0c             	sub    esp,0xc
c0017e3d:	6a 34                	push   0x34
c0017e3f:	e8 a3 1f ff ff       	call   c0009de7 <malloc>
c0017e44:	5b                   	pop    ebx
c0017e45:	89 c7                	mov    edi,eax
c0017e47:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017e4e:	53                   	push   ebx
c0017e4f:	57                   	push   edi
c0017e50:	6a 00                	push   0x0
c0017e52:	6a 34                	push   0x34
c0017e54:	55                   	push   ebp
c0017e55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e58:	83 c4 20             	add    esp,0x20
c0017e5b:	85 c0                	test   eax,eax
c0017e5d:	0f 85 76 06 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e63:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017e69:	0f 85 6a 06 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e6f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017e72:	85 c0                	test   eax,eax
c0017e74:	0f 84 5f 06 00 00    	je     c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e7a:	31 d2                	xor    edx,edx
c0017e7c:	51                   	push   ecx
c0017e7d:	52                   	push   edx
c0017e7e:	50                   	push   eax
c0017e7f:	55                   	push   ebp
c0017e80:	e8 c7 59 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017e85:	83 c4 10             	add    esp,0x10
c0017e88:	85 c0                	test   eax,eax
c0017e8a:	0f 85 49 06 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e90:	83 ec 0c             	sub    esp,0xc
c0017e93:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017e96:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e9a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e9e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ea2:	0f af c2             	imul   eax,edx
c0017ea5:	50                   	push   eax
c0017ea6:	e8 3c 1f ff ff       	call   c0009de7 <malloc>
c0017eab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017eae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017eb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017eb9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017ebd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ec1:	0f af c2             	imul   eax,edx
c0017ec4:	99                   	cdq    
c0017ec5:	52                   	push   edx
c0017ec6:	50                   	push   eax
c0017ec7:	55                   	push   ebp
c0017ec8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ecb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017ece:	83 c4 20             	add    esp,0x20
c0017ed1:	85 c0                	test   eax,eax
c0017ed3:	0f 84 00 06 00 00    	je     c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ed9:	52                   	push   edx
c0017eda:	31 d2                	xor    edx,edx
c0017edc:	52                   	push   edx
c0017edd:	50                   	push   eax
c0017ede:	55                   	push   ebp
c0017edf:	e8 68 59 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	85 c0                	test   eax,eax
c0017ee9:	0f 85 ea 05 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ef6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017efa:	31 f6                	xor    esi,esi
c0017efc:	0f af c2             	imul   eax,edx
c0017eff:	50                   	push   eax
c0017f00:	e8 e2 1e ff ff       	call   c0009de7 <malloc>
c0017f05:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017f0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f13:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017f17:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017f1b:	0f af c2             	imul   eax,edx
c0017f1e:	99                   	cdq    
c0017f1f:	52                   	push   edx
c0017f20:	50                   	push   eax
c0017f21:	55                   	push   ebp
c0017f22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f25:	83 c4 20             	add    esp,0x20
c0017f28:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017f2c:	0f 86 8a 00 00 00    	jbe    c0017fbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017f32:	0f b7 de             	movzx  ebx,si
c0017f35:	c1 e3 05             	shl    ebx,0x5
c0017f38:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017f3c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017f3f:	75 75                	jne    c0017fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017f41:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017f44:	31 d2                	xor    edx,edx
c0017f46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f51:	50                   	push   eax
c0017f52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017f55:	52                   	push   edx
c0017f56:	50                   	push   eax
c0017f57:	55                   	push   ebp
c0017f58:	e8 ef 58 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	85 c0                	test   eax,eax
c0017f62:	0f 85 71 05 00 00    	jne    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017f68:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017f6f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f72:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017f76:	31 d2                	xor    edx,edx
c0017f78:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017f7c:	83 ec 0c             	sub    esp,0xc
c0017f7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f83:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f8a:	50                   	push   eax
c0017f8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f93:	52                   	push   edx
c0017f94:	50                   	push   eax
c0017f95:	55                   	push   ebp
c0017f96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f99:	83 c4 1c             	add    esp,0x1c
c0017f9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017f9f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017fa2:	50                   	push   eax
c0017fa3:	6a 00                	push   0x0
c0017fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017fad:	50                   	push   eax
c0017fae:	e8 e1 86 fe ff       	call   c0000694 <memset>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	46                   	inc    esi
c0017fb7:	e9 6c ff ff ff       	jmp    c0017f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017fbc:	53                   	push   ebx
c0017fbd:	31 db                	xor    ebx,ebx
c0017fbf:	68 00 01 00 00       	push   0x100
c0017fc4:	6a 00                	push   0x0
c0017fc6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017fca:	50                   	push   eax
c0017fcb:	e8 c4 86 fe ff       	call   c0000694 <memset>
c0017fd0:	83 c4 0c             	add    esp,0xc
c0017fd3:	68 00 01 00 00       	push   0x100
c0017fd8:	6a 00                	push   0x0
c0017fda:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017fe1:	50                   	push   eax
c0017fe2:	e8 ad 86 fe ff       	call   c0000694 <memset>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017ff2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ffa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0018002:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001800a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018012:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0018016:	0f 86 30 01 00 00    	jbe    c001814c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001801c:	0f b7 f3             	movzx  esi,bx
c001801f:	6b f6 28             	imul   esi,esi,0x28
c0018022:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0018026:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018029:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001802d:	52                   	push   edx
c001802e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018032:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0018036:	8b 06                	mov    eax,DWORD PTR [esi]
c0018038:	6b d2 28             	imul   edx,edx,0x28
c001803b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001803f:	31 d2                	xor    edx,edx
c0018041:	52                   	push   edx
c0018042:	50                   	push   eax
c0018043:	55                   	push   ebp
c0018044:	e8 03 58 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c0018049:	83 c4 0c             	add    esp,0xc
c001804c:	6a 20                	push   0x20
c001804e:	6a 00                	push   0x0
c0018050:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018057:	51                   	push   ecx
c0018058:	e8 37 86 fe ff       	call   c0000694 <memset>
c001805d:	59                   	pop    ecx
c001805e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018061:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018065:	52                   	push   edx
c0018066:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001806d:	51                   	push   ecx
c001806e:	6a 00                	push   0x0
c0018070:	6a 1f                	push   0x1f
c0018072:	55                   	push   ebp
c0018073:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018076:	83 c4 1c             	add    esp,0x1c
c0018079:	6a 09                	push   0x9
c001807b:	68 fe 6b 02 c0       	push   0xc0026bfe
c0018080:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018087:	51                   	push   ecx
c0018088:	e8 03 85 fe ff       	call   c0000590 <memcmp>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	85 c0                	test   eax,eax
c0018092:	75 21                	jne    c00180b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0018094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018098:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001809c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00180a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180a7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00180ae:	89 d0                	mov    eax,edx
c00180b0:	40                   	inc    eax
c00180b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180b5:	50                   	push   eax
c00180b6:	6a 09                	push   0x9
c00180b8:	68 08 6c 02 c0       	push   0xc0026c08
c00180bd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180c4:	50                   	push   eax
c00180c5:	e8 c6 84 fe ff       	call   c0000590 <memcmp>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	85 c0                	test   eax,eax
c00180cf:	75 21                	jne    c00180f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00180d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180d9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00180dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180e4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00180eb:	89 d0                	mov    eax,edx
c00180ed:	40                   	inc    eax
c00180ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180f2:	50                   	push   eax
c00180f3:	50                   	push   eax
c00180f4:	68 d4 6b 02 c0       	push   0xc0026bd4
c00180f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018100:	50                   	push   eax
c0018101:	e8 d6 86 fe ff       	call   c00007dc <strcmp>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	85 c0                	test   eax,eax
c001810b:	75 0f                	jne    c001811c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001810d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018110:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001811c:	50                   	push   eax
c001811d:	50                   	push   eax
c001811e:	68 dc 6b 02 c0       	push   0xc0026bdc
c0018123:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001812a:	50                   	push   eax
c001812b:	e8 ac 86 fe ff       	call   c00007dc <strcmp>
c0018130:	83 c4 10             	add    esp,0x10
c0018133:	85 c0                	test   eax,eax
c0018135:	75 0f                	jne    c0018146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0018137:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001813a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001813e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018142:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018146:	43                   	inc    ebx
c0018147:	e9 c6 fe ff ff       	jmp    c0018012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001814c:	31 d2                	xor    edx,edx
c001814e:	50                   	push   eax
c001814f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018153:	52                   	push   edx
c0018154:	50                   	push   eax
c0018155:	55                   	push   ebp
c0018156:	e8 f1 56 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c001815b:	58                   	pop    eax
c001815c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018160:	e8 82 1c ff ff       	call   c0009de7 <malloc>
c0018165:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018168:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001816c:	31 d2                	xor    edx,edx
c001816e:	58                   	pop    eax
c001816f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0018173:	53                   	push   ebx
c0018174:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817c:	52                   	push   edx
c001817d:	50                   	push   eax
c001817e:	55                   	push   ebp
c001817f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018182:	83 c4 14             	add    esp,0x14
c0018185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018189:	e8 59 1c ff ff       	call   c0009de7 <malloc>
c001818e:	31 d2                	xor    edx,edx
c0018190:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018194:	83 c4 0c             	add    esp,0xc
c0018197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001819b:	52                   	push   edx
c001819c:	50                   	push   eax
c001819d:	55                   	push   ebp
c001819e:	e8 a9 56 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c00181a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00181a6:	31 d2                	xor    edx,edx
c00181a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181b3:	52                   	push   edx
c00181b4:	50                   	push   eax
c00181b5:	55                   	push   ebp
c00181b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181b9:	83 c4 20             	add    esp,0x20
c00181bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00181c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00181c8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00181cc:	0f 84 0b 03 00 00    	je     c00184dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00181d2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00181d9:	31 d2                	xor    edx,edx
c00181db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181df:	c1 e8 03             	shr    eax,0x3
c00181e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00181e6:	51                   	push   ecx
c00181e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181eb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00181ef:	52                   	push   edx
c00181f0:	50                   	push   eax
c00181f1:	55                   	push   ebp
c00181f2:	e8 55 56 ff ff       	call   c000d84c <File::seek(unsigned long long)>
c00181f7:	5b                   	pop    ebx
c00181f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181fc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018203:	e8 df 1b ff ff       	call   c0009de7 <malloc>
c0018208:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001820b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001820f:	31 d2                	xor    edx,edx
c0018211:	5e                   	pop    esi
c0018212:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018216:	50                   	push   eax
c0018217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001821b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001821f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0018226:	52                   	push   edx
c0018227:	50                   	push   eax
c0018228:	55                   	push   ebp
c0018229:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001822c:	83 c4 20             	add    esp,0x20
c001822f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018237:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001823b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001823f:	0f 8d 7c 02 00 00    	jge    c00184c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0018245:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001824d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0018252:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0018255:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018259:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0018261:	89 d8                	mov    eax,ebx
c0018263:	c1 e8 08             	shr    eax,0x8
c0018266:	89 c6                	mov    esi,eax
c0018268:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001826c:	c1 e6 04             	shl    esi,0x4
c001826f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0018273:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0018276:	85 d2                	test   edx,edx
c0018278:	0f 85 bf 00 00 00    	jne    c001833d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001827e:	83 ec 0c             	sub    esp,0xc
c0018281:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018285:	03 06                	add    eax,DWORD PTR [esi]
c0018287:	50                   	push   eax
c0018288:	e8 4b f8 ff ff       	call   c0017ad8 <Thr::getAddressOfKernelSymbol(char const*)>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	89 c2                	mov    edx,eax
c0018292:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0018297:	85 c0                	test   eax,eax
c0018299:	0f 85 9e 00 00 00    	jne    c001833d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001829f:	83 ec 0c             	sub    esp,0xc
c00182a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a6:	03 06                	add    eax,DWORD PTR [esi]
c00182a8:	50                   	push   eax
c00182a9:	e8 72 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c00182ae:	83 c4 10             	add    esp,0x10
c00182b1:	89 c2                	mov    edx,eax
c00182b3:	85 c0                	test   eax,eax
c00182b5:	0f 85 82 00 00 00    	jne    c001833d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00182bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00182bf:	50                   	push   eax
c00182c0:	50                   	push   eax
c00182c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c5:	03 06                	add    eax,DWORD PTR [esi]
c00182c7:	50                   	push   eax
c00182c8:	68 12 6c 02 c0       	push   0xc0026c12
c00182cd:	e8 77 4e ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00182d2:	58                   	pop    eax
c00182d3:	5a                   	pop    edx
c00182d4:	68 2c 6c 02 c0       	push   0xc0026c2c
c00182d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182e0:	50                   	push   eax
c00182e1:	e8 6a 84 fe ff       	call   c0000750 <strcpy>
c00182e6:	59                   	pop    ecx
c00182e7:	58                   	pop    eax
c00182e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ec:	03 06                	add    eax,DWORD PTR [esi]
c00182ee:	50                   	push   eax
c00182ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182f6:	50                   	push   eax
c00182f7:	e8 94 85 fe ff       	call   c0000890 <strcat>
c00182fc:	58                   	pop    eax
c00182fd:	5a                   	pop    edx
c00182fe:	68 c2 6c 02 c0       	push   0xc0026cc2
c0018303:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001830a:	50                   	push   eax
c001830b:	e8 80 85 fe ff       	call   c0000890 <strcat>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018318:	0f 84 5d 01 00 00    	je     c001847b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001831e:	83 ec 0c             	sub    esp,0xc
c0018321:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018328:	50                   	push   eax
c0018329:	e8 fb ce ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018335:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018339:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001833d:	80 fb 01             	cmp    bl,0x1
c0018340:	0f 85 88 00 00 00    	jne    c00183ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0018346:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001834d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018351:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0018355:	01 ce                	add    esi,ecx
c0018357:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001835d:	0f 94 c0             	sete   al
c0018360:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018366:	0f 94 c3             	sete   bl
c0018369:	09 c3                	or     ebx,eax
c001836b:	8b 06                	mov    eax,DWORD PTR [esi]
c001836d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0018372:	74 41                	je     c00183b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0018374:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018377:	84 db                	test   bl,bl
c0018379:	75 15                	jne    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001837b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001837f:	66 83 f8 0c          	cmp    ax,0xc
c0018383:	76 05                	jbe    c001838a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0018385:	b8 0c 00 00 00       	mov    eax,0xc
c001838a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001838e:	76 37                	jbe    c00183c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018390:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018394:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018399:	0f 84 dc 00 00 00    	je     c001847b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001839f:	83 ec 0c             	sub    esp,0xc
c00183a2:	68 43 6c 02 c0       	push   0xc0026c43
c00183a7:	e8 7d ce ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00183b3:	eb 12                	jmp    c00183c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183b5:	01 c1                	add    ecx,eax
c00183b7:	84 db                	test   bl,bl
c00183b9:	75 0c                	jne    c00183c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00183bf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00183c3:	77 02                	ja     c00183c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183c5:	01 d1                	add    ecx,edx
c00183c7:	89 0e                	mov    DWORD PTR [esi],ecx
c00183c9:	e9 ea 00 00 00       	jmp    c00184b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00183ce:	80 fb 02             	cmp    bl,0x2
c00183d1:	75 7c                	jne    c001844f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00183d3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00183da:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00183de:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00183e2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00183e8:	74 20                	je     c001840a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183ea:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00183f0:	74 18                	je     c001840a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183f2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00183f6:	b9 0a 00 00 00       	mov    ecx,0xa
c00183fb:	66 83 f8 0e          	cmp    ax,0xe
c00183ff:	77 03                	ja     c0018404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0018401:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018404:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018408:	76 1f                	jbe    c0018429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001840a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001840e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018413:	74 66                	je     c001847b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018415:	83 ec 0c             	sub    esp,0xc
c0018418:	68 5f 6c 02 c0       	push   0xc0026c5f
c001841d:	e8 07 ce ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018429:	8b 06                	mov    eax,DWORD PTR [esi]
c001842b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0018430:	74 13                	je     c0018445 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0018432:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018436:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001843d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018441:	01 c8                	add    eax,ecx
c0018443:	eb 04                	jmp    c0018449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0018445:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0018449:	01 c2                	add    edx,eax
c001844b:	89 16                	mov    DWORD PTR [esi],edx
c001844d:	eb 69                	jmp    c00184b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001844f:	0f b6 db             	movzx  ebx,bl
c0018452:	50                   	push   eax
c0018453:	50                   	push   eax
c0018454:	53                   	push   ebx
c0018455:	68 7b 6c 02 c0       	push   0xc0026c7b
c001845a:	e8 ea 4c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018467:	74 12                	je     c001847b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	68 86 6c 02 c0       	push   0xc0026c86
c0018471:	e8 b3 cd ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	eb 3d                	jmp    c00184b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	55                   	push   ebp
c001847f:	e8 68 53 ff ff       	call   c000d7ec <File::close()>
c0018484:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018487:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001848a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001848d:	59                   	pop    ecx
c001848e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018492:	e8 60 19 ff ff       	call   c0009df7 <free>
c0018497:	5b                   	pop    ebx
c0018498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001849c:	e8 56 19 ff ff       	call   c0009df7 <free>
c00184a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00184a4:	e8 4e 19 ff ff       	call   c0009df7 <free>
c00184a9:	5e                   	pop    esi
c00184aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184ae:	e8 44 19 ff ff       	call   c0009df7 <free>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	eb 21                	jmp    c00184d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00184b8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00184bc:	e9 76 fd ff ff       	jmp    c0018237 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00184c1:	83 ec 0c             	sub    esp,0xc
c00184c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184c8:	e8 2a 19 ff ff       	call   c0009df7 <free>
c00184cd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	e9 eb fc ff ff       	jmp    c00181c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00184d9:	31 c0                	xor    eax,eax
c00184db:	eb 33                	jmp    c0018510 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	55                   	push   ebp
c00184e1:	e8 06 53 ff ff       	call   c000d7ec <File::close()>
c00184e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00184ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184ef:	58                   	pop    eax
c00184f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184f4:	e8 fe 18 ff ff       	call   c0009df7 <free>
c00184f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00184fc:	e8 f6 18 ff ff       	call   c0009df7 <free>
c0018501:	5a                   	pop    edx
c0018502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018506:	e8 ec 18 ff ff       	call   c0009df7 <free>
c001850b:	83 c4 10             	add    esp,0x10
c001850e:	b0 01                	mov    al,0x1
c0018510:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018516:	5b                   	pop    ebx
c0018517:	5e                   	pop    esi
c0018518:	5f                   	pop    edi
c0018519:	5d                   	pop    ebp
c001851a:	c3                   	ret    

c001851b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001851b:	56                   	push   esi
c001851c:	31 d2                	xor    edx,edx
c001851e:	53                   	push   ebx
c001851f:	8b 1d a0 99 02 c0    	mov    ebx,DWORD PTR ds:0xc00299a0
c0018525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018529:	39 d3                	cmp    ebx,edx
c001852b:	7e 1b                	jle    c0018548 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001852d:	8b 04 95 c0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6440]
c0018534:	39 c8                	cmp    eax,ecx
c0018536:	77 0d                	ja     c0018545 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018538:	8b 34 95 c0 99 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6640]
c001853f:	01 c6                	add    esi,eax
c0018541:	39 ce                	cmp    esi,ecx
c0018543:	77 05                	ja     c001854a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018545:	42                   	inc    edx
c0018546:	eb e1                	jmp    c0018529 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018548:	31 c0                	xor    eax,eax
c001854a:	5b                   	pop    ebx
c001854b:	5e                   	pop    esi
c001854c:	c3                   	ret    

c001854d <Thr::getDriverNameFromAddress(unsigned long)>:
c001854d:	53                   	push   ebx
c001854e:	31 c0                	xor    eax,eax
c0018550:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018554:	8b 1d a0 99 02 c0    	mov    ebx,DWORD PTR ds:0xc00299a0
c001855a:	39 c3                	cmp    ebx,eax
c001855c:	7e 22                	jle    c0018580 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001855e:	8b 14 85 c0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6440]
c0018565:	39 ca                	cmp    edx,ecx
c0018567:	77 14                	ja     c001857d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018569:	03 14 85 c0 99 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6640]
c0018570:	39 ca                	cmp    edx,ecx
c0018572:	76 09                	jbe    c001857d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018574:	8b 04 85 c0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6240]
c001857b:	eb 05                	jmp    c0018582 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001857d:	40                   	inc    eax
c001857e:	eb da                	jmp    c001855a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018580:	31 c0                	xor    eax,eax
c0018582:	5b                   	pop    ebx
c0018583:	c3                   	ret    

c0018584 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018584:	53                   	push   ebx
c0018585:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018589:	53                   	push   ebx
c001858a:	e8 8c ff ff ff       	call   c001851b <Thr::getDriverBaseFromAddress(unsigned long)>
c001858f:	5a                   	pop    edx
c0018590:	31 d2                	xor    edx,edx
c0018592:	85 c0                	test   eax,eax
c0018594:	74 04                	je     c001859a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018596:	89 da                	mov    edx,ebx
c0018598:	29 c2                	sub    edx,eax
c001859a:	89 d0                	mov    eax,edx
c001859c:	5b                   	pop    ebx
c001859d:	c3                   	ret    

c001859e <Thr::loadDLL(char const*, bool)>:
c001859e:	55                   	push   ebp
c001859f:	57                   	push   edi
c00185a0:	56                   	push   esi
c00185a1:	53                   	push   ebx
c00185a2:	81 ec 34 01 00 00    	sub    esp,0x134
c00185a8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00185af:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00185b6:	56                   	push   esi
c00185b7:	68 9e 6c 02 c0       	push   0xc0026c9e
c00185bc:	e8 88 4b ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00185c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185c8:	e8 1a 18 ff ff       	call   c0009de7 <malloc>
c00185cd:	83 c4 0c             	add    esp,0xc
c00185d0:	89 c3                	mov    ebx,eax
c00185d2:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c00185d8:	56                   	push   esi
c00185d9:	50                   	push   eax
c00185da:	e8 d5 50 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	85 db                	test   ebx,ebx
c00185e4:	75 3c                	jne    c0018622 <Thr::loadDLL(char const*, bool)+0x84>
c00185e6:	89 f8                	mov    eax,edi
c00185e8:	84 c0                	test   al,al
c00185ea:	0f 84 d2 01 00 00    	je     c00187c2 <Thr::loadDLL(char const*, bool)+0x224>
c00185f0:	55                   	push   ebp
c00185f1:	55                   	push   ebp
c00185f2:	68 af 6c 02 c0       	push   0xc0026caf
c00185f7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00185fb:	55                   	push   ebp
c00185fc:	e8 4f 81 fe ff       	call   c0000750 <strcpy>
c0018601:	58                   	pop    eax
c0018602:	5a                   	pop    edx
c0018603:	56                   	push   esi
c0018604:	55                   	push   ebp
c0018605:	e8 86 82 fe ff       	call   c0000890 <strcat>
c001860a:	59                   	pop    ecx
c001860b:	58                   	pop    eax
c001860c:	68 c2 6c 02 c0       	push   0xc0026cc2
c0018611:	55                   	push   ebp
c0018612:	e8 79 82 fe ff       	call   c0000890 <strcat>
c0018617:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001861a:	e8 0a cc ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	51                   	push   ecx
c0018623:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018627:	50                   	push   eax
c0018628:	8d 44 24 20          	lea    eax,[esp+0x20]
c001862c:	50                   	push   eax
c001862d:	53                   	push   ebx
c001862e:	e8 07 54 ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c0018633:	83 c4 10             	add    esp,0x10
c0018636:	85 db                	test   ebx,ebx
c0018638:	74 0c                	je     c0018646 <Thr::loadDLL(char const*, bool)+0xa8>
c001863a:	83 ec 0c             	sub    esp,0xc
c001863d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001863f:	53                   	push   ebx
c0018640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001864b:	75 0a                	jne    c0018657 <Thr::loadDLL(char const*, bool)+0xb9>
c001864d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018651:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018655:	75 3c                	jne    c0018693 <Thr::loadDLL(char const*, bool)+0xf5>
c0018657:	89 f8                	mov    eax,edi
c0018659:	84 c0                	test   al,al
c001865b:	0f 84 49 01 00 00    	je     c00187aa <Thr::loadDLL(char const*, bool)+0x20c>
c0018661:	51                   	push   ecx
c0018662:	51                   	push   ecx
c0018663:	68 af 6c 02 c0       	push   0xc0026caf
c0018668:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001866c:	53                   	push   ebx
c001866d:	e8 de 80 fe ff       	call   c0000750 <strcpy>
c0018672:	5d                   	pop    ebp
c0018673:	58                   	pop    eax
c0018674:	56                   	push   esi
c0018675:	53                   	push   ebx
c0018676:	e8 15 82 fe ff       	call   c0000890 <strcat>
c001867b:	58                   	pop    eax
c001867c:	5a                   	pop    edx
c001867d:	68 c2 6c 02 c0       	push   0xc0026cc2
c0018682:	53                   	push   ebx
c0018683:	e8 08 82 fe ff       	call   c0000890 <strcat>
c0018688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001868b:	e8 99 cb ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	52                   	push   edx
c0018694:	6a 03                	push   0x3
c0018696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001869a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001869e:	05 ff 0f 00 00       	add    eax,0xfff
c00186a3:	83 d2 00             	adc    edx,0x0
c00186a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00186aa:	50                   	push   eax
c00186ab:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c00186b1:	e8 58 3e ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c00186b6:	59                   	pop    ecx
c00186b7:	89 c3                	mov    ebx,eax
c00186b9:	5d                   	pop    ebp
c00186ba:	50                   	push   eax
c00186bb:	68 ae 4b 02 c0       	push   0xc0024bae
c00186c0:	e8 84 4a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00186c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00186c8:	e8 e3 7f fe ff       	call   c00006b0 <strlen>
c00186cd:	8b 2d a0 99 02 c0    	mov    ebp,DWORD PTR ds:0xc00299a0
c00186d3:	40                   	inc    eax
c00186d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00186d7:	e8 0b 17 ff ff       	call   c0009de7 <malloc>
c00186dc:	89 04 ad c0 9d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6240],eax
c00186e3:	58                   	pop    eax
c00186e4:	a1 a0 99 02 c0       	mov    eax,ds:0xc00299a0
c00186e9:	5a                   	pop    edx
c00186ea:	56                   	push   esi
c00186eb:	ff 34 85 c0 9d 02 c0 	push   DWORD PTR [eax*4-0x3ffd6240]
c00186f2:	e8 59 80 fe ff       	call   c0000750 <strcpy>
c00186f7:	a1 a0 99 02 c0       	mov    eax,ds:0xc00299a0
c00186fc:	8d 50 01             	lea    edx,[eax+0x1]
c00186ff:	89 1c 85 c0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6440],ebx
c0018706:	89 15 a0 99 02 c0    	mov    DWORD PTR ds:0xc00299a0,edx
c001870c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018710:	83 c4 0c             	add    esp,0xc
c0018713:	89 14 85 c0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6640],edx
c001871a:	6a 01                	push   0x1
c001871c:	53                   	push   ebx
c001871d:	56                   	push   esi
c001871e:	e8 c2 f6 ff ff       	call   c0017de5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018723:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018727:	83 c4 10             	add    esp,0x10
c001872a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001872f:	0f 85 89 00 00 00    	jne    c00187be <Thr::loadDLL(char const*, bool)+0x220>
c0018735:	89 f8                	mov    eax,edi
c0018737:	84 c0                	test   al,al
c0018739:	74 73                	je     c00187ae <Thr::loadDLL(char const*, bool)+0x210>
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	68 c4 6c 02 c0       	push   0xc0026cc4
c0018743:	e8 e1 ca ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0018748:	83 c4 10             	add    esp,0x10
c001874b:	eb 61                	jmp    c00187ae <Thr::loadDLL(char const*, bool)+0x210>
c001874d:	50                   	push   eax
c001874e:	50                   	push   eax
c001874f:	89 e8                	mov    eax,ebp
c0018751:	c1 e0 0c             	shl    eax,0xc
c0018754:	01 d8                	add    eax,ebx
c0018756:	50                   	push   eax
c0018757:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c001875d:	e8 14 39 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c0018762:	83 c4 10             	add    esp,0x10
c0018765:	8b 00                	mov    eax,DWORD PTR [eax]
c0018767:	a8 60                	test   al,0x60
c0018769:	75 11                	jne    c001877c <Thr::loadDLL(char const*, bool)+0x1de>
c001876b:	83 ec 0c             	sub    esp,0xc
c001876e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018773:	50                   	push   eax
c0018774:	e8 a2 1c ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c0018779:	83 c4 10             	add    esp,0x10
c001877c:	45                   	inc    ebp
c001877d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018781:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018785:	05 ff 0f 00 00       	add    eax,0xfff
c001878a:	bf 00 00 00 00       	mov    edi,0x0
c001878f:	83 d2 00             	adc    edx,0x0
c0018792:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018796:	c1 ea 0c             	shr    edx,0xc
c0018799:	39 c5                	cmp    ebp,eax
c001879b:	89 d1                	mov    ecx,edx
c001879d:	89 f8                	mov    eax,edi
c001879f:	19 c8                	sbb    eax,ecx
c00187a1:	72 aa                	jb     c001874d <Thr::loadDLL(char const*, bool)+0x1af>
c00187a3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00187a8:	75 18                	jne    c00187c2 <Thr::loadDLL(char const*, bool)+0x224>
c00187aa:	31 db                	xor    ebx,ebx
c00187ac:	eb 14                	jmp    c00187c2 <Thr::loadDLL(char const*, bool)+0x224>
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	68 e3 6c 02 c0       	push   0xc0026ce3
c00187b6:	e8 6e ca ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	31 ed                	xor    ebp,ebp
c00187c0:	eb bb                	jmp    c001877d <Thr::loadDLL(char const*, bool)+0x1df>
c00187c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00187c8:	89 d8                	mov    eax,ebx
c00187ca:	5b                   	pop    ebx
c00187cb:	5e                   	pop    esi
c00187cc:	5f                   	pop    edi
c00187cd:	5d                   	pop    ebp
c00187ce:	c3                   	ret    

c00187cf <Thr::executeDLL(unsigned long, void*)>:
c00187cf:	56                   	push   esi
c00187d0:	53                   	push   ebx
c00187d1:	52                   	push   edx
c00187d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187da:	85 db                	test   ebx,ebx
c00187dc:	75 10                	jne    c00187ee <Thr::executeDLL(unsigned long, void*)+0x1f>
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	68 ff 6c 02 c0       	push   0xc0026cff
c00187e6:	e8 3e ca ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	50                   	push   eax
c00187ef:	50                   	push   eax
c00187f0:	53                   	push   ebx
c00187f1:	68 29 6d 02 c0       	push   0xc0026d29
c00187f6:	e8 4e 49 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00187fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00187ff:	89 d8                	mov    eax,ebx
c0018801:	83 c4 14             	add    esp,0x14
c0018804:	5b                   	pop    ebx
c0018805:	5e                   	pop    esi
c0018806:	ff e0                	jmp    eax

c0018808 <userModeEntryPoint(void*)>:
c0018808:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001880d:	48                   	dec    eax
c001880e:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0018813:	75 03                	jne    c0018818 <userModeEntryPoint(void*)+0x10>
c0018815:	fb                   	sti    
c0018816:	66 90                	xchg   ax,ax
c0018818:	fb                   	sti    
c0018819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001881e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018821:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0018827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001882b:	e9 3f 7a fe ff       	jmp    c000026f <goToUsermode>

c0018830 <changeTSS>:
c0018830:	83 ec 14             	sub    esp,0x14
c0018833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018838:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001883b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0018840:	c1 e2 15             	shl    edx,0x15
c0018843:	29 d0                	sub    eax,edx
c0018845:	50                   	push   eax
c0018846:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001884b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018851:	05 7c 11 00 00       	add    eax,0x117c
c0018856:	50                   	push   eax
c0018857:	e8 98 2e ff ff       	call   c000b6f4 <TSS::setESP(unsigned long)>
c001885c:	83 c4 1c             	add    esp,0x1c
c001885f:	c3                   	ret    

c0018860 <switchToThread(ThreadControlBlock*)>:
c0018860:	57                   	push   edi
c0018861:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0018866:	56                   	push   esi
c0018867:	85 c0                	test   eax,eax
c0018869:	53                   	push   ebx
c001886a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001886e:	0f 85 90 00 00 00    	jne    c0018904 <switchToThread(ThreadControlBlock*)+0xa4>
c0018874:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018877:	3c ff                	cmp    al,0xff
c0018879:	0f 84 81 00 00 00    	je     c0018900 <switchToThread(ThreadControlBlock*)+0xa0>
c001887f:	0f b6 d0             	movzx  edx,al
c0018882:	b8 00 04 00 00       	mov    eax,0x400
c0018887:	29 d0                	sub    eax,edx
c0018889:	d1 f8                	sar    eax,1
c001888b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001888e:	66 90                	xchg   ax,ax
c0018890:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0018893:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0018898:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001889e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00188a5:	74 4d                	je     c00188f4 <switchToThread(ThreadControlBlock*)+0x94>
c00188a7:	0f 31                	rdtsc  
c00188a9:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00188ae:	89 c6                	mov    esi,eax
c00188b0:	89 d7                	mov    edi,edx
c00188b2:	2b 35 98 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a198
c00188b8:	89 15 ac a1 02 c0    	mov    DWORD PTR ds:0xc002a1ac,edx
c00188be:	1b 3d 9c a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a19c
c00188c4:	89 35 a0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a0,esi
c00188ca:	a3 98 a1 02 c0       	mov    ds:0xc002a198,eax
c00188cf:	89 3d a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,edi
c00188d5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00188db:	89 15 9c a1 02 c0    	mov    DWORD PTR ds:0xc002a19c,edx
c00188e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00188e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00188e7:	01 c6                	add    esi,eax
c00188e9:	11 d7                	adc    edi,edx
c00188eb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00188ee:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00188f1:	8d 76 00             	lea    esi,[esi+0x0]
c00188f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00188f8:	5b                   	pop    ebx
c00188f9:	5e                   	pop    esi
c00188fa:	5f                   	pop    edi
c00188fb:	e9 a7 79 fe ff       	jmp    c00002a7 <switchToThreadASM>
c0018900:	31 c0                	xor    eax,eax
c0018902:	eb 8c                	jmp    c0018890 <switchToThread(ThreadControlBlock*)+0x30>
c0018904:	5b                   	pop    ebx
c0018905:	c7 05 60 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x1
c001890f:	5e                   	pop    esi
c0018910:	5f                   	pop    edi
c0018911:	c3                   	ret    
c0018912:	66 90                	xchg   ax,ax

c0018914 <Process::addArgs(char**)>:
c0018914:	57                   	push   edi
c0018915:	56                   	push   esi
c0018916:	53                   	push   ebx
c0018917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001891b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001891f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018929:	85 ff                	test   edi,edi
c001892b:	74 43                	je     c0018970 <Process::addArgs(char**)+0x5c>
c001892d:	8b 07                	mov    eax,DWORD PTR [edi]
c001892f:	85 c0                	test   eax,eax
c0018931:	74 3d                	je     c0018970 <Process::addArgs(char**)+0x5c>
c0018933:	31 db                	xor    ebx,ebx
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	50                   	push   eax
c001893c:	e8 6f 7d fe ff       	call   c00006b0 <strlen>
c0018941:	40                   	inc    eax
c0018942:	89 04 24             	mov    DWORD PTR [esp],eax
c0018945:	e8 9d 14 ff ff       	call   c0009de7 <malloc>
c001894a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018951:	5a                   	pop    edx
c0018952:	59                   	pop    ecx
c0018953:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018956:	43                   	inc    ebx
c0018957:	50                   	push   eax
c0018958:	e8 f3 7d fe ff       	call   c0000750 <strcpy>
c001895d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018963:	83 c4 10             	add    esp,0x10
c0018966:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018969:	85 c0                	test   eax,eax
c001896b:	75 cb                	jne    c0018938 <Process::addArgs(char**)+0x24>
c001896d:	8d 76 00             	lea    esi,[esi+0x0]
c0018970:	5b                   	pop    ebx
c0018971:	5e                   	pop    esi
c0018972:	5f                   	pop    edi
c0018973:	c3                   	ret    

c0018974 <Process::Process(char const*, Process*, char**)>:
c0018974:	56                   	push   esi
c0018975:	53                   	push   ebx
c0018976:	83 ec 14             	sub    esp,0x14
c0018979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897d:	05 0c 02 00 00       	add    eax,0x20c
c0018982:	bb 07 00 00 00       	mov    ebx,0x7
c0018987:	89 c6                	mov    esi,eax
c0018989:	8d 76 00             	lea    esi,[esi+0x0]
c001898c:	85 db                	test   ebx,ebx
c001898e:	78 14                	js     c00189a4 <Process::Process(char const*, Process*, char**)+0x30>
c0018990:	83 ec 0c             	sub    esp,0xc
c0018993:	56                   	push   esi
c0018994:	e8 83 af 00 00       	call   c002391c <ThreadControlBlock::ThreadControlBlock()>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	83 c6 5f             	add    esi,0x5f
c001899f:	4b                   	dec    ebx
c00189a0:	eb ea                	jmp    c001898c <Process::Process(char const*, Process*, char**)+0x18>
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00189af:	83 ec 0c             	sub    esp,0xc
c00189b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00189b6:	e8 f7 c6 ff ff       	call   c00150b2 <Krnl::newProcessEnv(Process*)>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	89 c2                	mov    edx,eax
c00189c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00189ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ce:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00189d7:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c00189dc:	8d 50 01             	lea    edx,[eax+0x1]
c00189df:	89 15 70 86 02 c0    	mov    DWORD PTR ds:0xc0028670,edx
c00189e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189e9:	89 02                	mov    DWORD PTR [edx],eax
c00189eb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00189f3:	83 ec 0c             	sub    esp,0xc
c00189f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189fa:	e8 e8 13 ff ff       	call   c0009de7 <malloc>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	89 c3                	mov    ebx,eax
c0018a04:	83 ec 08             	sub    esp,0x8
c0018a07:	6a 00                	push   0x0
c0018a09:	53                   	push   ebx
c0018a0a:	e8 a7 3e ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a16:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a20:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a32:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a42:	85 c0                	test   eax,eax
c0018a44:	74 42                	je     c0018a88 <Process::Process(char const*, Process*, char**)+0x114>
c0018a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a4a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a50:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a5a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a64:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a6a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a74:	05 0c 01 00 00       	add    eax,0x10c
c0018a79:	83 ec 08             	sub    esp,0x8
c0018a7c:	52                   	push   edx
c0018a7d:	50                   	push   eax
c0018a7e:	e8 cd 7c fe ff       	call   c0000750 <strcpy>
c0018a83:	83 c4 10             	add    esp,0x10
c0018a86:	eb 64                	jmp    c0018aec <Process::Process(char const*, Process*, char**)+0x178>
c0018a88:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018a90:	83 ec 0c             	sub    esp,0xc
c0018a93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018a97:	e8 4b 13 ff ff       	call   c0009de7 <malloc>
c0018a9c:	83 c4 10             	add    esp,0x10
c0018a9f:	89 c3                	mov    ebx,eax
c0018aa1:	83 ec 08             	sub    esp,0x8
c0018aa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aa8:	53                   	push   ebx
c0018aa9:	e8 5a 29 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ab5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018abf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ac5:	83 ec 0c             	sub    esp,0xc
c0018ac8:	50                   	push   eax
c0018ac9:	e8 f9 20 ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018ace:	83 c4 10             	add    esp,0x10
c0018ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ad5:	05 0c 01 00 00       	add    eax,0x10c
c0018ada:	83 ec 08             	sub    esp,0x8
c0018add:	68 48 6d 02 c0       	push   0xc0026d48
c0018ae2:	50                   	push   eax
c0018ae3:	e8 68 7c fe ff       	call   c0000750 <strcpy>
c0018ae8:	83 c4 10             	add    esp,0x10
c0018aeb:	90                   	nop
c0018aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018af0:	83 c0 0c             	add    eax,0xc
c0018af3:	83 ec 08             	sub    esp,0x8
c0018af6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018afa:	50                   	push   eax
c0018afb:	e8 50 7c fe ff       	call   c0000750 <strcpy>
c0018b00:	83 c4 10             	add    esp,0x10
c0018b03:	83 ec 08             	sub    esp,0x8
c0018b06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b0e:	e8 01 fe ff ff       	call   c0018914 <Process::addArgs(char**)>
c0018b13:	83 c4 10             	add    esp,0x10
c0018b16:	83 ec 08             	sub    esp,0x8
c0018b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b21:	e8 89 ed ff ff       	call   c00178af <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018b26:	83 c4 10             	add    esp,0x10
c0018b29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b31:	83 f0 01             	xor    eax,0x1
c0018b34:	88 c2                	mov    dl,al
c0018b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b3a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018b45:	83 ec 08             	sub    esp,0x8
c0018b48:	50                   	push   eax
c0018b49:	68 a0 6d 02 c0       	push   0xc0026da0
c0018b4e:	e8 f6 45 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	90                   	nop
c0018b57:	83 c4 14             	add    esp,0x14
c0018b5a:	5b                   	pop    ebx
c0018b5b:	5e                   	pop    esi
c0018b5c:	c3                   	ret    
c0018b5d:	90                   	nop
c0018b5e:	66 90                	xchg   ax,ax

c0018b60 <Process::Process(bool, char const*, Process*, char**)>:
c0018b60:	56                   	push   esi
c0018b61:	53                   	push   ebx
c0018b62:	83 ec 24             	sub    esp,0x24
c0018b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b71:	05 0c 02 00 00       	add    eax,0x20c
c0018b76:	bb 07 00 00 00       	mov    ebx,0x7
c0018b7b:	89 c6                	mov    esi,eax
c0018b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b80:	85 db                	test   ebx,ebx
c0018b82:	78 14                	js     c0018b98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018b84:	83 ec 0c             	sub    esp,0xc
c0018b87:	56                   	push   esi
c0018b88:	e8 8f ad 00 00       	call   c002391c <ThreadControlBlock::ThreadControlBlock()>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	83 c6 5f             	add    esi,0x5f
c0018b93:	4b                   	dec    ebx
c0018b94:	eb ea                	jmp    c0018b80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018b96:	66 90                	xchg   ax,ax
c0018b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018ba3:	83 ec 0c             	sub    esp,0xc
c0018ba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018baa:	e8 03 c5 ff ff       	call   c00150b2 <Krnl::newProcessEnv(Process*)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	89 c2                	mov    edx,eax
c0018bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018bbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018bcb:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c0018bd0:	8d 50 01             	lea    edx,[eax+0x1]
c0018bd3:	89 15 70 86 02 c0    	mov    DWORD PTR ds:0xc0028670,edx
c0018bd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018bdd:	89 02                	mov    DWORD PTR [edx],eax
c0018bdf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018be7:	83 ec 0c             	sub    esp,0xc
c0018bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bee:	e8 f4 11 ff ff       	call   c0009de7 <malloc>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	89 c3                	mov    ebx,eax
c0018bf8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bfd:	83 ec 08             	sub    esp,0x8
c0018c00:	50                   	push   eax
c0018c01:	53                   	push   ebx
c0018c02:	e8 af 3c ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c0e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c18:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018c22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c2a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c3a:	85 c0                	test   eax,eax
c0018c3c:	74 42                	je     c0018c80 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c42:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c48:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c52:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6c:	05 0c 01 00 00       	add    eax,0x10c
c0018c71:	83 ec 08             	sub    esp,0x8
c0018c74:	52                   	push   edx
c0018c75:	50                   	push   eax
c0018c76:	e8 d5 7a fe ff       	call   c0000750 <strcpy>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	eb 64                	jmp    c0018ce4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018c80:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c8f:	e8 53 11 ff ff       	call   c0009de7 <malloc>
c0018c94:	83 c4 10             	add    esp,0x10
c0018c97:	89 c3                	mov    ebx,eax
c0018c99:	83 ec 08             	sub    esp,0x8
c0018c9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018ca0:	53                   	push   ebx
c0018ca1:	e8 62 27 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cbd:	83 ec 0c             	sub    esp,0xc
c0018cc0:	50                   	push   eax
c0018cc1:	e8 01 1f ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018cc6:	83 c4 10             	add    esp,0x10
c0018cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ccd:	05 0c 01 00 00       	add    eax,0x10c
c0018cd2:	83 ec 08             	sub    esp,0x8
c0018cd5:	68 48 6d 02 c0       	push   0xc0026d48
c0018cda:	50                   	push   eax
c0018cdb:	e8 70 7a fe ff       	call   c0000750 <strcpy>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	90                   	nop
c0018ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ce8:	83 c0 0c             	add    eax,0xc
c0018ceb:	83 ec 08             	sub    esp,0x8
c0018cee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018cf2:	50                   	push   eax
c0018cf3:	e8 58 7a fe ff       	call   c0000750 <strcpy>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	83 ec 08             	sub    esp,0x8
c0018cfe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d06:	e8 09 fc ff ff       	call   c0018914 <Process::addArgs(char**)>
c0018d0b:	83 c4 10             	add    esp,0x10
c0018d0e:	90                   	nop
c0018d0f:	83 c4 24             	add    esp,0x24
c0018d12:	5b                   	pop    ebx
c0018d13:	5e                   	pop    esi
c0018d14:	c3                   	ret    
c0018d15:	8d 76 00             	lea    esi,[esi+0x0]

c0018d18 <taskStartupFunction>:
c0018d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d1d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018d20:	c3                   	ret    
c0018d21:	90                   	nop
c0018d22:	66 90                	xchg   ax,ax

c0018d24 <Semaphore::Semaphore(int)>:
c0018d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d2c:	89 10                	mov    DWORD PTR [eax],edx
c0018d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d32:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018d39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018d4f:	90                   	nop
c0018d50:	c3                   	ret    
c0018d51:	90                   	nop
c0018d52:	66 90                	xchg   ax,ax

c0018d54 <Mutex::Mutex()>:
c0018d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d58:	6a 01                	push   0x1
c0018d5a:	50                   	push   eax
c0018d5b:	e8 c4 ff ff ff       	call   c0018d24 <Semaphore::Semaphore(int)>
c0018d60:	83 c4 08             	add    esp,0x8
c0018d63:	90                   	nop
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop
c0018d66:	66 90                	xchg   ax,ax

c0018d68 <Process::createThread(void (*)(void*), void*, int)>:
c0018d68:	57                   	push   edi
c0018d69:	31 c9                	xor    ecx,ecx
c0018d6b:	56                   	push   esi
c0018d6c:	53                   	push   ebx
c0018d6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d71:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018d78:	89 f2                	mov    edx,esi
c0018d7a:	66 90                	xchg   ax,ax
c0018d7c:	0f b7 c2             	movzx  eax,dx
c0018d7f:	83 e2 01             	and    edx,0x1
c0018d82:	74 14                	je     c0018d98 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018d84:	d1 f8                	sar    eax,1
c0018d86:	41                   	inc    ecx
c0018d87:	89 c2                	mov    edx,eax
c0018d89:	83 f9 10             	cmp    ecx,0x10
c0018d8c:	75 ee                	jne    c0018d7c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018d8e:	31 db                	xor    ebx,ebx
c0018d90:	89 d8                	mov    eax,ebx
c0018d92:	5b                   	pop    ebx
c0018d93:	5e                   	pop    esi
c0018d94:	5f                   	pop    edi
c0018d95:	c3                   	ret    
c0018d96:	66 90                	xchg   ax,ax
c0018d98:	b8 01 00 00 00       	mov    eax,0x1
c0018d9d:	d3 e0                	shl    eax,cl
c0018d9f:	09 c6                	or     esi,eax
c0018da1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018da4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018dab:	01 c0                	add    eax,eax
c0018dad:	01 c8                	add    eax,ecx
c0018daf:	8d 04 80             	lea    eax,[eax+eax*4]
c0018db2:	01 d8                	add    eax,ebx
c0018db4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018dbb:	75 0b                	jne    c0018dc8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018dbd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018dc7:	90                   	nop
c0018dc8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018dce:	83 ec 08             	sub    esp,0x8
c0018dd1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018dd4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018dd7:	01 c0                	add    eax,eax
c0018dd9:	01 c8                	add    eax,ecx
c0018ddb:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018dde:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018de1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018de7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018ded:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018df1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018df7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018dfd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018e04:	89 ca                	mov    edx,ecx
c0018e06:	f7 da                	neg    edx
c0018e08:	c1 e2 15             	shl    edx,0x15
c0018e0b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018e11:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018e17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018e1b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018e25:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018e2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e2f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018e35:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018e3f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018e49:	53                   	push   ebx
c0018e4a:	68 84 a1 02 c0       	push   0xc002a184
c0018e4f:	e8 68 a8 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	89 d8                	mov    eax,ebx
c0018e59:	5b                   	pop    ebx
c0018e5a:	5e                   	pop    esi
c0018e5b:	5f                   	pop    edi
c0018e5c:	c3                   	ret    
c0018e5d:	90                   	nop
c0018e5e:	66 90                	xchg   ax,ax

c0018e60 <Process::createUserThread()>:
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	68 80 00 00 00       	push   0x80
c0018e68:	6a 00                	push   0x0
c0018e6a:	68 08 88 01 c0       	push   0xc0018808
c0018e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e73:	e8 f0 fe ff ff       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c0018e78:	83 c4 1c             	add    esp,0x1c
c0018e7b:	c3                   	ret    

c0018e7c <setupMultitasking(void (*)())>:
c0018e7c:	56                   	push   esi
c0018e7d:	53                   	push   ebx
c0018e7e:	51                   	push   ecx
c0018e7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e83:	eb 13                	jmp    c0018e98 <setupMultitasking(void (*)())+0x1c>
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	83 ec 0c             	sub    esp,0xc
c0018e8b:	68 84 a1 02 c0       	push   0xc002a184
c0018e90:	e8 6f a7 00 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e95:	83 c4 10             	add    esp,0x10
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	68 84 a1 02 c0       	push   0xc002a184
c0018ea0:	e8 3b a7 00 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	84 c0                	test   al,al
c0018eaa:	74 dc                	je     c0018e88 <setupMultitasking(void (*)())+0xc>
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	68 1f 07 00 00       	push   0x71f
c0018eb4:	e8 2e 0f ff ff       	call   c0009de7 <malloc>
c0018eb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018ec0:	89 c3                	mov    ebx,eax
c0018ec2:	6a 00                	push   0x0
c0018ec4:	68 4c 6d 02 c0       	push   0xc0026d4c
c0018ec9:	6a 01                	push   0x1
c0018ecb:	50                   	push   eax
c0018ecc:	e8 8f fc ff ff       	call   c0018b60 <Process::Process(bool, char const*, Process*, char**)>
c0018ed1:	83 c4 14             	add    esp,0x14
c0018ed4:	89 1d 90 a1 02 c0    	mov    DWORD PTR ds:0xc002a190,ebx
c0018eda:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018ee0:	e8 f0 1f ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0018ee5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018eed:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018ef7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018efd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f00:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018f0a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018f10:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018f16:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018f20:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018f2a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018f34:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018f3a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018f44:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018f4a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018f54:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018f5a:	58                   	pop    eax
c0018f5b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018f61:	5a                   	pop    edx
c0018f62:	68 48 6d 02 c0       	push   0xc0026d48
c0018f67:	50                   	push   eax
c0018f68:	e8 e3 77 fe ff       	call   c0000750 <strcpy>
c0018f6d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018f74:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018f78:	83 c4 14             	add    esp,0x14
c0018f7b:	5b                   	pop    ebx
c0018f7c:	5e                   	pop    esi
c0018f7d:	e9 17 73 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018f82:	66 90                	xchg   ax,ax

c0018f84 <schedule()>:
c0018f84:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0018f89:	85 c0                	test   eax,eax
c0018f8b:	74 0b                	je     c0018f98 <schedule()+0x14>
c0018f8d:	c7 05 60 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x1
c0018f97:	c3                   	ret    
c0018f98:	53                   	push   ebx
c0018f99:	83 ec 14             	sub    esp,0x14
c0018f9c:	68 84 a1 02 c0       	push   0xc002a184
c0018fa1:	e8 3a a6 00 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018fa6:	83 c4 10             	add    esp,0x10
c0018fa9:	84 c0                	test   al,al
c0018fab:	75 3b                	jne    c0018fe8 <schedule()+0x64>
c0018fad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018fb5:	4a                   	dec    edx
c0018fb6:	74 38                	je     c0018ff0 <schedule()+0x6c>
c0018fb8:	83 ec 0c             	sub    esp,0xc
c0018fbb:	68 84 a1 02 c0       	push   0xc002a184
c0018fc0:	e8 37 a6 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fc5:	c7 04 24 84 a1 02 c0 	mov    DWORD PTR [esp],0xc002a184
c0018fcc:	89 c3                	mov    ebx,eax
c0018fce:	e8 31 a6 00 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fd3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fdd:	e8 7e f8 ff ff       	call   c0018860 <switchToThread(ThreadControlBlock*)>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe8:	83 c4 08             	add    esp,0x8
c0018feb:	5b                   	pop    ebx
c0018fec:	c3                   	ret    
c0018fed:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff0:	83 ec 08             	sub    esp,0x8
c0018ff3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018ffa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0019000:	68 84 a1 02 c0       	push   0xc002a184
c0019005:	e8 b2 a6 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	eb a9                	jmp    c0018fb8 <schedule()+0x34>
c001900f:	90                   	nop

c0019010 <Semaphore::tryAcquire()>:
c0019010:	53                   	push   ebx
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019018:	fa                   	cli    
c0019019:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001901e:	8d 50 01             	lea    edx,[eax+0x1]
c0019021:	89 15 68 a1 02 c0    	mov    DWORD PTR ds:0xc002a168,edx
c0019027:	8b 15 64 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a164
c001902d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0019030:	89 1d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,ebx
c0019036:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0019039:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001903b:	7c 33                	jl     c0019070 <Semaphore::tryAcquire()+0x60>
c001903d:	89 15 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,edx
c0019043:	85 d2                	test   edx,edx
c0019045:	75 0d                	jne    c0019054 <Semaphore::tryAcquire()+0x44>
c0019047:	8b 15 60 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a160
c001904d:	85 d2                	test   edx,edx
c001904f:	75 6b                	jne    c00190bc <Semaphore::tryAcquire()+0xac>
c0019051:	8d 76 00             	lea    esi,[esi+0x0]
c0019054:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019059:	85 c0                	test   eax,eax
c001905b:	74 0b                	je     c0019068 <Semaphore::tryAcquire()+0x58>
c001905d:	8d 76 00             	lea    esi,[esi+0x0]
c0019060:	31 c0                	xor    eax,eax
c0019062:	83 c4 08             	add    esp,0x8
c0019065:	5b                   	pop    ebx
c0019066:	c3                   	ret    
c0019067:	90                   	nop
c0019068:	fb                   	sti    
c0019069:	83 c4 08             	add    esp,0x8
c001906c:	5b                   	pop    ebx
c001906d:	c3                   	ret    
c001906e:	66 90                	xchg   ax,ax
c0019070:	43                   	inc    ebx
c0019071:	89 15 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,edx
c0019077:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001907a:	85 d2                	test   edx,edx
c001907c:	75 22                	jne    c00190a0 <Semaphore::tryAcquire()+0x90>
c001907e:	8b 0d 60 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a160
c0019084:	85 c9                	test   ecx,ecx
c0019086:	74 18                	je     c00190a0 <Semaphore::tryAcquire()+0x90>
c0019088:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c0019092:	e8 ed fe ff ff       	call   c0018f84 <schedule()>
c0019097:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001909c:	48                   	dec    eax
c001909d:	8d 76 00             	lea    esi,[esi+0x0]
c00190a0:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00190a5:	85 c0                	test   eax,eax
c00190a7:	75 0b                	jne    c00190b4 <Semaphore::tryAcquire()+0xa4>
c00190a9:	fb                   	sti    
c00190aa:	b0 01                	mov    al,0x1
c00190ac:	83 c4 08             	add    esp,0x8
c00190af:	5b                   	pop    ebx
c00190b0:	c3                   	ret    
c00190b1:	8d 76 00             	lea    esi,[esi+0x0]
c00190b4:	b0 01                	mov    al,0x1
c00190b6:	83 c4 08             	add    esp,0x8
c00190b9:	5b                   	pop    ebx
c00190ba:	c3                   	ret    
c00190bb:	90                   	nop
c00190bc:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c00190c6:	e8 b9 fe ff ff       	call   c0018f84 <schedule()>
c00190cb:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00190d0:	48                   	dec    eax
c00190d1:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00190d6:	85 c0                	test   eax,eax
c00190d8:	75 86                	jne    c0019060 <Semaphore::tryAcquire()+0x50>
c00190da:	eb 8c                	jmp    c0019068 <Semaphore::tryAcquire()+0x58>

c00190dc <Semaphore::assertLocked(char const*)>:
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190e3:	fa                   	cli    
c00190e4:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00190ea:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c00190ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00190f2:	89 0d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,ecx
c00190f8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00190fa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00190fd:	7c 29                	jl     c0019128 <Semaphore::assertLocked(char const*)+0x4c>
c00190ff:	90                   	nop
c0019100:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c0019105:	85 c0                	test   eax,eax
c0019107:	75 0b                	jne    c0019114 <Semaphore::assertLocked(char const*)+0x38>
c0019109:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c001910e:	85 c0                	test   eax,eax
c0019110:	75 2e                	jne    c0019140 <Semaphore::assertLocked(char const*)+0x64>
c0019112:	66 90                	xchg   ax,ax
c0019114:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019119:	48                   	dec    eax
c001911a:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001911f:	75 03                	jne    c0019124 <Semaphore::assertLocked(char const*)+0x48>
c0019121:	fb                   	sti    
c0019122:	66 90                	xchg   ax,ax
c0019124:	83 c4 0c             	add    esp,0xc
c0019127:	c3                   	ret    
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001912f:	e8 f5 c0 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0019134:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	48                   	dec    eax
c001913d:	eb c1                	jmp    c0019100 <Semaphore::assertLocked(char const*)+0x24>
c001913f:	90                   	nop
c0019140:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c001914a:	e8 35 fe ff ff       	call   c0018f84 <schedule()>
c001914f:	eb c3                	jmp    c0019114 <Semaphore::assertLocked(char const*)+0x38>
c0019151:	8d 76 00             	lea    esi,[esi+0x0]

c0019154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0019154:	83 ec 0c             	sub    esp,0xc
c0019157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001915c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019160:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019163:	e8 1c fe ff ff       	call   c0018f84 <schedule()>
c0019168:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001916d:	48                   	dec    eax
c001916e:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019173:	75 03                	jne    c0019178 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0019175:	fb                   	sti    
c0019176:	66 90                	xchg   ax,ax
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	c3                   	ret    

c001917c <blockTask(TaskState)>:
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	fa                   	cli    
c0019180:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001918a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001918f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019192:	e8 ed fd ff ff       	call   c0018f84 <schedule()>
c0019197:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001919c:	48                   	dec    eax
c001919d:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00191a2:	75 04                	jne    c00191a8 <blockTask(TaskState)+0x2c>
c00191a4:	fb                   	sti    
c00191a5:	8d 76 00             	lea    esi,[esi+0x0]
c00191a8:	83 c4 0c             	add    esp,0xc
c00191ab:	c3                   	ret    

c00191ac <waitTask(int, int*, int)>:
c00191ac:	83 ec 18             	sub    esp,0x18
c00191af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00191bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00191bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00191c7:	6a 07                	push   0x7
c00191c9:	e8 ae ff ff ff       	call   c001917c <blockTask(TaskState)>
c00191ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00191d9:	85 d2                	test   edx,edx
c00191db:	74 0b                	je     c00191e8 <waitTask(int, int*, int)+0x3c>
c00191dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00191e0:	89 02                	mov    DWORD PTR [edx],eax
c00191e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191e7:	90                   	nop
c00191e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00191eb:	83 c4 0c             	add    esp,0xc
c00191ee:	c3                   	ret    
c00191ef:	90                   	nop

c00191f0 <milliTenthSleepUntil(unsigned int)>:
c00191f0:	83 ec 0c             	sub    esp,0xc
c00191f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191f7:	39 05 6c 92 02 c0    	cmp    DWORD PTR ds:0xc002926c,eax
c00191fd:	76 05                	jbe    c0019204 <milliTenthSleepUntil(unsigned int)+0x14>
c00191ff:	90                   	nop
c0019200:	83 c4 0c             	add    esp,0xc
c0019203:	c3                   	ret    
c0019204:	fa                   	cli    
c0019205:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c001920b:	83 ec 08             	sub    esp,0x8
c001920e:	ff 05 64 a1 02 c0    	inc    DWORD PTR ds:0xc002a164
c0019214:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001921a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001921d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0019223:	68 78 a1 02 c0       	push   0xc002a178
c0019228:	e8 8f a4 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001922d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0019234:	e8 43 ff ff ff       	call   c001917c <blockTask(TaskState)>
c0019239:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	48                   	dec    eax
c0019242:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c0019247:	85 c0                	test   eax,eax
c0019249:	75 09                	jne    c0019254 <milliTenthSleepUntil(unsigned int)+0x64>
c001924b:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c0019250:	85 c0                	test   eax,eax
c0019252:	75 14                	jne    c0019268 <milliTenthSleepUntil(unsigned int)+0x78>
c0019254:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019259:	48                   	dec    eax
c001925a:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001925f:	75 9f                	jne    c0019200 <milliTenthSleepUntil(unsigned int)+0x10>
c0019261:	fb                   	sti    
c0019262:	83 c4 0c             	add    esp,0xc
c0019265:	c3                   	ret    
c0019266:	66 90                	xchg   ax,ax
c0019268:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c0019272:	e8 0d fd ff ff       	call   c0018f84 <schedule()>
c0019277:	eb db                	jmp    c0019254 <milliTenthSleepUntil(unsigned int)+0x64>
c0019279:	8d 76 00             	lea    esi,[esi+0x0]

c001927c <milliTenthSleep(unsigned int)>:
c001927c:	a1 6c 92 02 c0       	mov    eax,ds:0xc002926c
c0019281:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019285:	e9 66 ff ff ff       	jmp    c00191f0 <milliTenthSleepUntil(unsigned int)>
c001928a:	66 90                	xchg   ax,ax

c001928c <sleep(unsigned int)>:
c001928c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019290:	8d 04 80             	lea    eax,[eax+eax*4]
c0019293:	8d 04 80             	lea    eax,[eax+eax*4]
c0019296:	8d 04 80             	lea    eax,[eax+eax*4]
c0019299:	8d 04 80             	lea    eax,[eax+eax*4]
c001929c:	c1 e0 04             	shl    eax,0x4
c001929f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192a3:	eb d7                	jmp    c001927c <milliTenthSleep(unsigned int)>
c00192a5:	90                   	nop
c00192a6:	66 90                	xchg   ax,ax

c00192a8 <Semaphore::acquire()>:
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00192af:	fa                   	cli    
c00192b0:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c00192b5:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00192bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00192be:	89 0d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,ecx
c00192c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00192c7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00192c9:	7d 2d                	jge    c00192f8 <Semaphore::acquire()+0x50>
c00192cb:	41                   	inc    ecx
c00192cc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00192cf:	90                   	nop
c00192d0:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c00192d5:	85 c0                	test   eax,eax
c00192d7:	75 0b                	jne    c00192e4 <Semaphore::acquire()+0x3c>
c00192d9:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c00192de:	85 c0                	test   eax,eax
c00192e0:	75 62                	jne    c0019344 <Semaphore::acquire()+0x9c>
c00192e2:	66 90                	xchg   ax,ax
c00192e4:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00192e9:	48                   	dec    eax
c00192ea:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00192ef:	75 03                	jne    c00192f4 <Semaphore::acquire()+0x4c>
c00192f1:	fb                   	sti    
c00192f2:	66 90                	xchg   ax,ax
c00192f4:	83 c4 0c             	add    esp,0xc
c00192f7:	c3                   	ret    
c00192f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019304:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019307:	85 c9                	test   ecx,ecx
c0019309:	74 4d                	je     c0019358 <Semaphore::acquire()+0xb0>
c001930b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001930e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019314:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019317:	90                   	nop
c0019318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001931d:	83 ec 0c             	sub    esp,0xc
c0019320:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019323:	68 c8 6d 02 c0       	push   0xc0026dc8
c0019328:	e8 1c 3e ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001932d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0019334:	e8 43 fe ff ff       	call   c001917c <blockTask(TaskState)>
c0019339:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	48                   	dec    eax
c0019342:	eb 8c                	jmp    c00192d0 <Semaphore::acquire()+0x28>
c0019344:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c001934e:	e8 31 fc ff ff       	call   c0018f84 <schedule()>
c0019353:	eb 8f                	jmp    c00192e4 <Semaphore::acquire()+0x3c>
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001935d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019360:	eb b6                	jmp    c0019318 <Semaphore::acquire()+0x70>
c0019362:	66 90                	xchg   ax,ax

c0019364 <taskReturned>:
c0019364:	83 ec 18             	sub    esp,0x18
c0019367:	68 e8 6d 02 c0       	push   0xc0026de8
c001936c:	e8 b8 be ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0019371:	83 c4 10             	add    esp,0x10
c0019374:	83 ec 0c             	sub    esp,0xc
c0019377:	6a 02                	push   0x2
c0019379:	e8 fe fd ff ff       	call   c001917c <blockTask(TaskState)>
c001937e:	fa                   	cli    
c001937f:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019385:	e8 fa fb ff ff       	call   c0018f84 <schedule()>
c001938a:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	48                   	dec    eax
c0019393:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019398:	85 c0                	test   eax,eax
c001939a:	75 d8                	jne    c0019374 <taskReturned+0x10>
c001939c:	fb                   	sti    
c001939d:	eb d5                	jmp    c0019374 <taskReturned+0x10>
c001939f:	90                   	nop

c00193a0 <Thr::processFromPID(int)>:
c00193a0:	57                   	push   edi
c00193a1:	56                   	push   esi
c00193a2:	53                   	push   ebx
c00193a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00193a7:	fa                   	cli    
c00193a8:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00193ae:	83 ec 0c             	sub    esp,0xc
c00193b1:	68 84 a1 02 c0       	push   0xc002a184
c00193b6:	e8 41 a2 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	89 c7                	mov    edi,eax
c00193c0:	eb 16                	jmp    c00193d8 <Thr::processFromPID(int)+0x38>
c00193c2:	66 90                	xchg   ax,ax
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	68 84 a1 02 c0       	push   0xc002a184
c00193cc:	e8 2b a2 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	39 f8                	cmp    eax,edi
c00193d6:	74 4c                	je     c0019424 <Thr::processFromPID(int)+0x84>
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	68 84 a1 02 c0       	push   0xc002a184
c00193e0:	e8 17 a2 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193e5:	c7 04 24 84 a1 02 c0 	mov    DWORD PTR [esp],0xc002a184
c00193ec:	89 c3                	mov    ebx,eax
c00193ee:	e8 11 a2 00 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00193f3:	58                   	pop    eax
c00193f4:	5a                   	pop    edx
c00193f5:	53                   	push   ebx
c00193f6:	68 84 a1 02 c0       	push   0xc002a184
c00193fb:	e8 bc a2 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019400:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	39 30                	cmp    DWORD PTR [eax],esi
c0019408:	75 ba                	jne    c00193c4 <Thr::processFromPID(int)+0x24>
c001940a:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001940f:	48                   	dec    eax
c0019410:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019415:	74 09                	je     c0019420 <Thr::processFromPID(int)+0x80>
c0019417:	90                   	nop
c0019418:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001941b:	5b                   	pop    ebx
c001941c:	5e                   	pop    esi
c001941d:	5f                   	pop    edi
c001941e:	c3                   	ret    
c001941f:	90                   	nop
c0019420:	fb                   	sti    
c0019421:	eb f5                	jmp    c0019418 <Thr::processFromPID(int)+0x78>
c0019423:	90                   	nop
c0019424:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019429:	48                   	dec    eax
c001942a:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001942f:	75 07                	jne    c0019438 <Thr::processFromPID(int)+0x98>
c0019431:	fb                   	sti    
c0019432:	5b                   	pop    ebx
c0019433:	5e                   	pop    esi
c0019434:	5f                   	pop    edi
c0019435:	c3                   	ret    
c0019436:	66 90                	xchg   ax,ax
c0019438:	5b                   	pop    ebx
c0019439:	31 c0                	xor    eax,eax
c001943b:	5e                   	pop    esi
c001943c:	5f                   	pop    edi
c001943d:	c3                   	ret    
c001943e:	66 90                	xchg   ax,ax

c0019440 <unblockTask(ThreadControlBlock*)>:
c0019440:	53                   	push   ebx
c0019441:	83 ec 08             	sub    esp,0x8
c0019444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019448:	fa                   	cli    
c0019449:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c001944f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019452:	85 c0                	test   eax,eax
c0019454:	74 66                	je     c00194bc <unblockTask(ThreadControlBlock*)+0x7c>
c0019456:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019459:	48                   	dec    eax
c001945a:	74 38                	je     c0019494 <unblockTask(ThreadControlBlock*)+0x54>
c001945c:	83 ec 0c             	sub    esp,0xc
c001945f:	68 84 a1 02 c0       	push   0xc002a184
c0019464:	e8 93 a1 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019469:	83 c4 10             	add    esp,0x10
c001946c:	85 c0                	test   eax,eax
c001946e:	75 1c                	jne    c001948c <unblockTask(ThreadControlBlock*)+0x4c>
c0019470:	eb 5e                	jmp    c00194d0 <unblockTask(ThreadControlBlock*)+0x90>
c0019472:	66 90                	xchg   ax,ax
c0019474:	83 ec 08             	sub    esp,0x8
c0019477:	50                   	push   eax
c0019478:	68 84 a1 02 c0       	push   0xc002a184
c001947d:	e8 2a a5 00 00       	call   c00239ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	85 c0                	test   eax,eax
c0019487:	74 47                	je     c00194d0 <unblockTask(ThreadControlBlock*)+0x90>
c0019489:	8d 76 00             	lea    esi,[esi+0x0]
c001948c:	39 c3                	cmp    ebx,eax
c001948e:	75 e4                	jne    c0019474 <unblockTask(ThreadControlBlock*)+0x34>
c0019490:	eb 12                	jmp    c00194a4 <unblockTask(ThreadControlBlock*)+0x64>
c0019492:	66 90                	xchg   ax,ax
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	68 6a 6d 02 c0       	push   0xc0026d6a
c001949c:	e8 a8 3c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00194a9:	48                   	dec    eax
c00194aa:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00194af:	75 03                	jne    c00194b4 <unblockTask(ThreadControlBlock*)+0x74>
c00194b1:	fb                   	sti    
c00194b2:	66 90                	xchg   ax,ax
c00194b4:	83 c4 08             	add    esp,0x8
c00194b7:	5b                   	pop    ebx
c00194b8:	c3                   	ret    
c00194b9:	8d 76 00             	lea    esi,[esi+0x0]
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	68 53 6d 02 c0       	push   0xc0026d53
c00194c4:	e8 80 3c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	eb d6                	jmp    c00194a4 <unblockTask(ThreadControlBlock*)+0x64>
c00194ce:	66 90                	xchg   ax,ax
c00194d0:	83 ec 08             	sub    esp,0x8
c00194d3:	53                   	push   ebx
c00194d4:	68 84 a1 02 c0       	push   0xc002a184
c00194d9:	e8 de a1 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	eb c1                	jmp    c00194a4 <unblockTask(ThreadControlBlock*)+0x64>
c00194e3:	90                   	nop

c00194e4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00194e4:	55                   	push   ebp
c00194e5:	57                   	push   edi
c00194e6:	56                   	push   esi
c00194e7:	53                   	push   ebx
c00194e8:	83 ec 1c             	sub    esp,0x1c
c00194eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00194ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194f2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00194f8:	85 ff                	test   edi,edi
c00194fa:	7e 24                	jle    c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00194fc:	31 f6                	xor    esi,esi
c00194fe:	66 90                	xchg   ax,ax
c0019500:	83 ec 0c             	sub    esp,0xc
c0019503:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001950a:	46                   	inc    esi
c001950b:	e8 e7 08 ff ff       	call   c0009df7 <free>
c0019510:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019513:	83 c4 10             	add    esp,0x10
c0019516:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001951c:	7f e2                	jg     c0019500 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001951e:	66 90                	xchg   ax,ax
c0019520:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001952a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001952f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0019532:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0019535:	d3 c0                	rol    eax,cl
c0019537:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001953e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019541:	89 f7                	mov    edi,esi
c0019543:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001954b:	0f 85 73 01 00 00    	jne    c00196c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019551:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0019557:	85 ed                	test   ebp,ebp
c0019559:	74 1d                	je     c0019578 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001955b:	83 ec 0c             	sub    esp,0xc
c001955e:	55                   	push   ebp
c001955f:	e8 6a ba ff ff       	call   c0014fce <EnvVarContainer::~EnvVarContainer()>
c0019564:	59                   	pop    ecx
c0019565:	5e                   	pop    esi
c0019566:	6a 0c                	push   0xc
c0019568:	55                   	push   ebp
c0019569:	e8 fa 3a ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c001956e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	89 f7                	mov    edi,esi
c0019576:	66 90                	xchg   ax,ax
c0019578:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001957e:	85 c0                	test   eax,eax
c0019580:	0f 84 b2 00 00 00    	je     c0019638 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019586:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019589:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001958d:	31 c9                	xor    ecx,ecx
c001958f:	eb 17                	jmp    c00195a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019591:	8d 76 00             	lea    esi,[esi+0x0]
c0019594:	41                   	inc    ecx
c0019595:	83 f9 10             	cmp    ecx,0x10
c0019598:	0f 84 9a 00 00 00    	je     c0019638 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001959e:	66 90                	xchg   ax,ax
c00195a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00195a6:	66 90                	xchg   ax,ax
c00195a8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00195af:	d3 fa                	sar    edx,cl
c00195b1:	83 e2 01             	and    edx,0x1
c00195b4:	74 de                	je     c0019594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195b6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00195b9:	01 d2                	add    edx,edx
c00195bb:	01 ca                	add    edx,ecx
c00195bd:	8d 14 92             	lea    edx,[edx+edx*4]
c00195c0:	01 d0                	add    eax,edx
c00195c2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00195c8:	83 fd 07             	cmp    ebp,0x7
c00195cb:	75 c7                	jne    c0019594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195cd:	05 40 02 00 00       	add    eax,0x240
c00195d2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00195d5:	83 fd ff             	cmp    ebp,0xffffffff
c00195d8:	0f 8c ee 00 00 00    	jl     c00196cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00195de:	0f 84 ac 01 00 00    	je     c0019790 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00195e4:	85 ed                	test   ebp,ebp
c00195e6:	0f 84 90 01 00 00    	je     c001977c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00195ec:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00195ee:	75 a4                	jne    c0019594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00195f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00195fa:	01 d0                	add    eax,edx
c00195fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019609:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001960c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0019612:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019619:	50                   	push   eax
c001961a:	e8 21 fe ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019629:	89 f7                	mov    edi,esi
c001962b:	41                   	inc    ecx
c001962c:	83 f9 10             	cmp    ecx,0x10
c001962f:	0f 85 6b ff ff ff    	jne    c00195a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001963e:	85 c0                	test   eax,eax
c0019640:	74 62                	je     c00196a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019642:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019648:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001964e:	74 54                	je     c00196a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	68 84 a1 02 c0       	push   0xc002a184
c0019658:	e8 9f 9f 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001965d:	c7 04 24 84 a1 02 c0 	mov    DWORD PTR [esp],0xc002a184
c0019664:	89 c7                	mov    edi,eax
c0019666:	e8 75 9f 00 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001966b:	83 c4 10             	add    esp,0x10
c001966e:	84 c0                	test   al,al
c0019670:	0f 84 ce 00 00 00    	je     c0019744 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019676:	66 90                	xchg   ax,ax
c0019678:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001967b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0019681:	85 d2                	test   edx,edx
c0019683:	74 0f                	je     c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019685:	83 ec 0c             	sub    esp,0xc
c0019688:	8b 02                	mov    eax,DWORD PTR [edx]
c001968a:	52                   	push   edx
c001968b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001968e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019691:	83 c4 10             	add    esp,0x10
c0019694:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001969e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00196a1:	8d 76 00             	lea    esi,[esi+0x0]
c00196a4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00196aa:	85 db                	test   ebx,ebx
c00196ac:	74 16                	je     c00196c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	53                   	push   ebx
c00196b2:	e8 d9 2b ff ff       	call   c000c290 <VAS::~VAS()>
c00196b7:	58                   	pop    eax
c00196b8:	5a                   	pop    edx
c00196b9:	6a 14                	push   0x14
c00196bb:	53                   	push   ebx
c00196bc:	e8 a7 39 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c00196c1:	83 c4 10             	add    esp,0x10
c00196c4:	83 c4 1c             	add    esp,0x1c
c00196c7:	5b                   	pop    ebx
c00196c8:	5e                   	pop    esi
c00196c9:	5f                   	pop    edi
c00196ca:	5d                   	pop    ebp
c00196cb:	c3                   	ret    
c00196cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196d0:	83 ec 0c             	sub    esp,0xc
c00196d3:	68 1c 6e 02 c0       	push   0xc0026e1c
c00196d8:	e8 4c bb ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00196dd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	89 f7                	mov    edi,esi
c00196e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196e9:	e9 a6 fe ff ff       	jmp    c0019594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00196ee:	66 90                	xchg   ax,ax
c00196f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196f6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00196fc:	75 1e                	jne    c001971c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	68 84 6e 02 c0       	push   0xc0026e84
c0019706:	e8 3e 3a ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001970b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019712:	e8 65 fa ff ff       	call   c001917c <blockTask(TaskState)>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	66 90                	xchg   ax,ax
c001971c:	83 ec 08             	sub    esp,0x8
c001971f:	56                   	push   esi
c0019720:	68 84 a1 02 c0       	push   0xc002a184
c0019725:	e8 92 9f 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001972a:	c7 04 24 84 a1 02 c0 	mov    DWORD PTR [esp],0xc002a184
c0019731:	e8 c6 9e 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019736:	83 c4 10             	add    esp,0x10
c0019739:	39 f8                	cmp    eax,edi
c001973b:	0f 84 37 ff ff ff    	je     c0019678 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0019741:	8d 76 00             	lea    esi,[esi+0x0]
c0019744:	83 ec 0c             	sub    esp,0xc
c0019747:	68 84 a1 02 c0       	push   0xc002a184
c001974c:	e8 ab 9e 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019751:	c7 04 24 84 a1 02 c0 	mov    DWORD PTR [esp],0xc002a184
c0019758:	89 c6                	mov    esi,eax
c001975a:	e8 a5 9e 00 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	39 f3                	cmp    ebx,esi
c0019764:	74 b6                	je     c001971c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019766:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019769:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001976c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0019772:	75 a8                	jne    c001971c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019774:	e9 77 ff ff ff       	jmp    c00196f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	68 50 6e 02 c0       	push   0xc0026e50
c0019788:	e9 4b ff ff ff       	jmp    c00196d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001978d:	8d 76 00             	lea    esi,[esi+0x0]
c0019790:	8b 36                	mov    esi,DWORD PTR [esi]
c0019792:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019796:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019799:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001979c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00197a2:	01 d7                	add    edi,edx
c00197a4:	89 f8                	mov    eax,edi
c00197a6:	e9 51 fe ff ff       	jmp    c00195fc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00197ab:	90                   	nop

c00197ac <cleanerTaskFunction(void*)>:
c00197ac:	53                   	push   ebx
c00197ad:	83 ec 08             	sub    esp,0x8
c00197b0:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00197b5:	48                   	dec    eax
c00197b6:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00197bb:	75 03                	jne    c00197c0 <cleanerTaskFunction(void*)+0x14>
c00197bd:	fb                   	sti    
c00197be:	66 90                	xchg   ax,ax
c00197c0:	fa                   	cli    
c00197c1:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00197c6:	80 3d 4c a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a14c,0x0
c00197cd:	8d 50 01             	lea    edx,[eax+0x1]
c00197d0:	89 15 68 a1 02 c0    	mov    DWORD PTR ds:0xc002a168,edx
c00197d6:	0f 84 ac 00 00 00    	je     c0019888 <cleanerTaskFunction(void*)+0xdc>
c00197dc:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00197e1:	85 c0                	test   eax,eax
c00197e3:	75 03                	jne    c00197e8 <cleanerTaskFunction(void*)+0x3c>
c00197e5:	fb                   	sti    
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	c6 05 4c a1 02 c0 00 	mov    BYTE PTR ds:0xc002a14c,0x0
c00197ef:	fa                   	cli    
c00197f0:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00197f6:	ff 05 64 a1 02 c0    	inc    DWORD PTR ds:0xc002a164
c00197fc:	fa                   	cli    
c00197fd:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019803:	eb 2b                	jmp    c0019830 <cleanerTaskFunction(void*)+0x84>
c0019805:	8d 76 00             	lea    esi,[esi+0x0]
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	68 6c a1 02 c0       	push   0xc002a16c
c0019810:	e8 e7 9d 00 00       	call   c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019815:	c7 04 24 6c a1 02 c0 	mov    DWORD PTR [esp],0xc002a16c
c001981c:	89 c3                	mov    ebx,eax
c001981e:	e8 e1 9d 00 00       	call   c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019826:	e8 b9 fc ff ff       	call   c00194e4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	66 90                	xchg   ax,ax
c0019830:	83 ec 0c             	sub    esp,0xc
c0019833:	68 6c a1 02 c0       	push   0xc002a16c
c0019838:	e8 a3 9d 00 00       	call   c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	84 c0                	test   al,al
c0019842:	74 c4                	je     c0019808 <cleanerTaskFunction(void*)+0x5c>
c0019844:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019849:	48                   	dec    eax
c001984a:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001984f:	75 03                	jne    c0019854 <cleanerTaskFunction(void*)+0xa8>
c0019851:	fb                   	sti    
c0019852:	66 90                	xchg   ax,ax
c0019854:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0019859:	48                   	dec    eax
c001985a:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c001985f:	0f 85 4b ff ff ff    	jne    c00197b0 <cleanerTaskFunction(void*)+0x4>
c0019865:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c001986a:	85 c0                	test   eax,eax
c001986c:	0f 84 3e ff ff ff    	je     c00197b0 <cleanerTaskFunction(void*)+0x4>
c0019872:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c001987c:	e8 03 f7 ff ff       	call   c0018f84 <schedule()>
c0019881:	e9 2a ff ff ff       	jmp    c00197b0 <cleanerTaskFunction(void*)+0x4>
c0019886:	66 90                	xchg   ax,ax
c0019888:	83 ec 0c             	sub    esp,0xc
c001988b:	6a 02                	push   0x2
c001988d:	e8 c2 f8 ff ff       	call   c0019154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019892:	83 c4 10             	add    esp,0x10
c0019895:	e9 4e ff ff ff       	jmp    c00197e8 <cleanerTaskFunction(void*)+0x3c>
c001989a:	66 90                	xchg   ax,ax

c001989c <terminateTask(int)>:
c001989c:	83 ec 14             	sub    esp,0x14
c001989f:	fa                   	cli    
c00198a0:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00198a6:	ff 05 64 a1 02 c0    	inc    DWORD PTR ds:0xc002a164
c00198ac:	fa                   	cli    
c00198ad:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c00198b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00198b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198bc:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00198bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198c4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00198c7:	50                   	push   eax
c00198c8:	68 6c a1 02 c0       	push   0xc002a16c
c00198cd:	e8 ea 9d 00 00       	call   c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00198d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198d7:	83 c4 10             	add    esp,0x10
c00198da:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00198e1:	a1 48 a1 02 c0       	mov    eax,ds:0xc002a148
c00198e6:	85 c0                	test   eax,eax
c00198e8:	74 5e                	je     c0019948 <terminateTask(int)+0xac>
c00198ea:	83 ec 0c             	sub    esp,0xc
c00198ed:	c6 05 4c a1 02 c0 01 	mov    BYTE PTR ds:0xc002a14c,0x1
c00198f4:	50                   	push   eax
c00198f5:	e8 46 fb ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c00198fa:	83 c4 10             	add    esp,0x10
c00198fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019900:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019905:	48                   	dec    eax
c0019906:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c001990b:	75 03                	jne    c0019910 <terminateTask(int)+0x74>
c001990d:	fb                   	sti    
c001990e:	66 90                	xchg   ax,ax
c0019910:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0019915:	48                   	dec    eax
c0019916:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c001991b:	75 0b                	jne    c0019928 <terminateTask(int)+0x8c>
c001991d:	83 3d 60 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a160,0x0
c0019924:	75 36                	jne    c001995c <terminateTask(int)+0xc0>
c0019926:	66 90                	xchg   ax,ax
c0019928:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c001992d:	48                   	dec    eax
c001992e:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019933:	75 03                	jne    c0019938 <terminateTask(int)+0x9c>
c0019935:	fb                   	sti    
c0019936:	66 90                	xchg   ax,ax
c0019938:	fa                   	cli    
c0019939:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c001993f:	90                   	nop
c0019940:	e8 3f f6 ff ff       	call   c0018f84 <schedule()>
c0019945:	eb e1                	jmp    c0019928 <terminateTask(int)+0x8c>
c0019947:	90                   	nop
c0019948:	83 ec 0c             	sub    esp,0xc
c001994b:	68 81 6d 02 c0       	push   0xc0026d81
c0019950:	e8 f4 37 ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0019955:	83 c4 10             	add    esp,0x10
c0019958:	eb a6                	jmp    c0019900 <terminateTask(int)+0x64>
c001995a:	66 90                	xchg   ax,ax
c001995c:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c0019966:	eb d8                	jmp    c0019940 <terminateTask(int)+0xa4>

c0019968 <Thr::terminateFromIRQ(int)>:
c0019968:	83 ec 18             	sub    esp,0x18
c001996b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001996f:	e8 28 ff ff ff       	call   c001989c <terminateTask(int)>

c0019974 <Semaphore::release()>:
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001997b:	fa                   	cli    
c001997c:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c0019981:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019987:	8d 48 01             	lea    ecx,[eax+0x1]
c001998a:	89 0d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,ecx
c0019990:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019993:	85 c9                	test   ecx,ecx
c0019995:	74 41                	je     c00199d8 <Semaphore::release()+0x64>
c0019997:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001999a:	83 ec 0c             	sub    esp,0xc
c001999d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00199a0:	51                   	push   ecx
c00199a1:	e8 9a fa ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c00199a6:	a1 64 a1 02 c0       	mov    eax,ds:0xc002a164
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	48                   	dec    eax
c00199af:	90                   	nop
c00199b0:	a3 64 a1 02 c0       	mov    ds:0xc002a164,eax
c00199b5:	85 c0                	test   eax,eax
c00199b7:	75 0b                	jne    c00199c4 <Semaphore::release()+0x50>
c00199b9:	a1 60 a1 02 c0       	mov    eax,ds:0xc002a160
c00199be:	85 c0                	test   eax,eax
c00199c0:	75 1e                	jne    c00199e0 <Semaphore::release()+0x6c>
c00199c2:	66 90                	xchg   ax,ax
c00199c4:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00199c9:	48                   	dec    eax
c00199ca:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00199cf:	75 03                	jne    c00199d4 <Semaphore::release()+0x60>
c00199d1:	fb                   	sti    
c00199d2:	66 90                	xchg   ax,ax
c00199d4:	83 c4 0c             	add    esp,0xc
c00199d7:	c3                   	ret    
c00199d8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00199db:	eb d3                	jmp    c00199b0 <Semaphore::release()+0x3c>
c00199dd:	8d 76 00             	lea    esi,[esi+0x0]
c00199e0:	c7 05 60 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a160,0x0
c00199ea:	e8 95 f5 ff ff       	call   c0018f84 <schedule()>
c00199ef:	eb d3                	jmp    c00199c4 <Semaphore::release()+0x50>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]

c00199f4 <__static_initialization_and_destruction_0(int, int)>:
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00199fc:	0f 85 8e 00 00 00    	jne    c0019a90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019a02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019a0a:	0f 85 80 00 00 00    	jne    c0019a90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	68 84 a1 02 c0       	push   0xc002a184
c0019a18:	e8 4b 9f 00 00       	call   c0023968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	83 ec 04             	sub    esp,0x4
c0019a23:	68 b8 7e 02 c0       	push   0xc0027eb8
c0019a28:	68 84 a1 02 c0       	push   0xc002a184
c0019a2d:	68 18 39 02 c0       	push   0xc0023918
c0019a32:	e8 ab 35 ff ff       	call   c000cfe2 <__cxa_atexit>
c0019a37:	83 c4 10             	add    esp,0x10
c0019a3a:	83 ec 0c             	sub    esp,0xc
c0019a3d:	68 78 a1 02 c0       	push   0xc002a178
c0019a42:	e8 21 9f 00 00       	call   c0023968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a47:	83 c4 10             	add    esp,0x10
c0019a4a:	83 ec 04             	sub    esp,0x4
c0019a4d:	68 b8 7e 02 c0       	push   0xc0027eb8
c0019a52:	68 78 a1 02 c0       	push   0xc002a178
c0019a57:	68 18 39 02 c0       	push   0xc0023918
c0019a5c:	e8 81 35 ff ff       	call   c000cfe2 <__cxa_atexit>
c0019a61:	83 c4 10             	add    esp,0x10
c0019a64:	83 ec 0c             	sub    esp,0xc
c0019a67:	68 6c a1 02 c0       	push   0xc002a16c
c0019a6c:	e8 f7 9e 00 00       	call   c0023968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a71:	83 c4 10             	add    esp,0x10
c0019a74:	83 ec 04             	sub    esp,0x4
c0019a77:	68 b8 7e 02 c0       	push   0xc0027eb8
c0019a7c:	68 6c a1 02 c0       	push   0xc002a16c
c0019a81:	68 18 39 02 c0       	push   0xc0023918
c0019a86:	e8 57 35 ff ff       	call   c000cfe2 <__cxa_atexit>
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	66 90                	xchg   ax,ax
c0019a90:	90                   	nop
c0019a91:	83 c4 0c             	add    esp,0xc
c0019a94:	c3                   	ret    
c0019a95:	8d 76 00             	lea    esi,[esi+0x0]

c0019a98 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019a98:	83 ec 0c             	sub    esp,0xc
c0019a9b:	83 ec 08             	sub    esp,0x8
c0019a9e:	68 ff ff 00 00       	push   0xffff
c0019aa3:	6a 01                	push   0x1
c0019aa5:	e8 4a ff ff ff       	call   c00199f4 <__static_initialization_and_destruction_0(int, int)>
c0019aaa:	83 c4 10             	add    esp,0x10
c0019aad:	83 c4 0c             	add    esp,0xc
c0019ab0:	c3                   	ret    

c0019ab1 <Vm::inbv(unsigned short)>:
c0019ab1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ab5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019aba:	75 06                	jne    c0019ac2 <Vm::inbv(unsigned short)+0x11>
c0019abc:	a0 cc a1 02 c0       	mov    al,ds:0xc002a1cc
c0019ac1:	c3                   	ret    
c0019ac2:	ec                   	in     al,dx
c0019ac3:	c3                   	ret    

c0019ac4 <Vm::outbv(unsigned short, unsigned char)>:
c0019ac4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019acc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019ad1:	75 25                	jne    c0019af8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019ad3:	8b 0d cc a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1cc
c0019ad9:	8d 51 01             	lea    edx,[ecx+0x1]
c0019adc:	88 81 e0 a1 02 c0    	mov    BYTE PTR [ecx-0x3ffd5e20],al
c0019ae2:	89 15 cc a1 02 c0    	mov    DWORD PTR ds:0xc002a1cc,edx
c0019ae8:	83 fa 20             	cmp    edx,0x20
c0019aeb:	75 0c                	jne    c0019af9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019aed:	c7 05 cc a1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a1cc,0x1f
c0019af7:	c3                   	ret    
c0019af8:	ee                   	out    dx,al
c0019af9:	c3                   	ret    

c0019afa <Vm::realToLinear(unsigned short, unsigned short)>:
c0019afa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019aff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019b04:	c1 e0 04             	shl    eax,0x4
c0019b07:	01 d0                	add    eax,edx
c0019b09:	c3                   	ret    

c0019b0a <Vm::getSegment(unsigned int)>:
c0019b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b0e:	c1 e8 10             	shr    eax,0x10
c0019b11:	c3                   	ret    

c0019b12 <Vm::getOffset(unsigned int)>:
c0019b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b16:	c3                   	ret    

c0019b17 <Vm::mainloop2()>:
c0019b17:	83 ec 18             	sub    esp,0x18
c0019b1a:	fa                   	cli    
c0019b1b:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019b21:	6a 02                	push   0x2
c0019b23:	c6 05 c5 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a1c5,0x1
c0019b2a:	e8 25 f6 ff ff       	call   c0019154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b34:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019b38:	52                   	push   edx
c0019b39:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019b3d:	52                   	push   edx
c0019b3e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019b42:	52                   	push   edx
c0019b43:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019b47:	50                   	push   eax
c0019b48:	e8 f2 66 fe ff       	call   c000023f <goToVM86>
c0019b4d:	83 c4 2c             	add    esp,0x2c
c0019b50:	c3                   	ret    

c0019b51 <Vm::mainVm8086Loop(void*)>:
c0019b51:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019b56:	48                   	dec    eax
c0019b57:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019b5c:	75 01                	jne    c0019b5f <Vm::mainVm8086Loop(void*)+0xe>
c0019b5e:	fb                   	sti    
c0019b5f:	eb b6                	jmp    c0019b17 <Vm::mainloop2()>

c0019b61 <Vm::mainloop3(unsigned long)>:
c0019b61:	83 ec 18             	sub    esp,0x18
c0019b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b68:	fa                   	cli    
c0019b69:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019b6f:	6a 02                	push   0x2
c0019b71:	c6 05 c4 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a1c4,0x1
c0019b78:	a3 c0 a1 02 c0       	mov    ds:0xc002a1c0,eax
c0019b7d:	e8 d2 f5 ff ff       	call   c0019154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b82:	83 c4 1c             	add    esp,0x1c
c0019b85:	eb 90                	jmp    c0019b17 <Vm::mainloop2()>

c0019b87 <Vm::initialise8086()>:
c0019b87:	83 ec 0c             	sub    esp,0xc
c0019b8a:	68 80 00 00 00       	push   0x80
c0019b8f:	6a 00                	push   0x0
c0019b91:	68 51 9b 01 c0       	push   0xc0019b51
c0019b96:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0019b9c:	e8 c7 f1 ff ff       	call   c0018d68 <Process::createThread(void (*)(void*), void*, int)>
c0019ba1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019ba8:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019bad:	68 00 01 00 00       	push   0x100
c0019bb2:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c0019bb7:	6a 00                	push   0x0
c0019bb9:	6a 00                	push   0x0
c0019bbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019bc1:	e8 3c 2b ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019bc6:	83 c4 2c             	add    esp,0x2c
c0019bc9:	c3                   	ret    

c0019bca <Vm::finish8086()>:
c0019bca:	53                   	push   ebx
c0019bcb:	83 ec 08             	sub    esp,0x8
c0019bce:	fa                   	cli    
c0019bcf:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019bd5:	80 3d c4 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1c4,0x0
c0019bdc:	75 15                	jne    c0019bf3 <Vm::finish8086()+0x29>
c0019bde:	e8 a1 f3 ff ff       	call   c0018f84 <schedule()>
c0019be3:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019be8:	48                   	dec    eax
c0019be9:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019bee:	75 de                	jne    c0019bce <Vm::finish8086()+0x4>
c0019bf0:	fb                   	sti    
c0019bf1:	eb db                	jmp    c0019bce <Vm::finish8086()+0x4>
c0019bf3:	83 ec 0c             	sub    esp,0xc
c0019bf6:	8b 1d c0 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a1c0
c0019bfc:	ff 35 c8 a1 02 c0    	push   DWORD PTR ds:0xc002a1c8
c0019c02:	c6 05 c4 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a1c4,0x0
c0019c09:	e8 32 f8 ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c0019c0e:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	8d 50 ff             	lea    edx,[eax-0x1]
c0019c19:	89 15 68 a1 02 c0    	mov    DWORD PTR ds:0xc002a168,edx
c0019c1f:	85 d2                	test   edx,edx
c0019c21:	75 01                	jne    c0019c24 <Vm::finish8086()+0x5a>
c0019c23:	fb                   	sti    
c0019c24:	89 d8                	mov    eax,ebx
c0019c26:	83 c4 08             	add    esp,0x8
c0019c29:	5b                   	pop    ebx
c0019c2a:	c3                   	ret    

c0019c2b <Vm::getOutput8086(unsigned char*)>:
c0019c2b:	57                   	push   edi
c0019c2c:	8b 0d cc a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1cc
c0019c32:	56                   	push   esi
c0019c33:	be e0 a1 02 c0       	mov    esi,0xc002a1e0
c0019c38:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019c3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c3e:	a1 cc a1 02 c0       	mov    eax,ds:0xc002a1cc
c0019c43:	5e                   	pop    esi
c0019c44:	c7 05 cc a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1cc,0x0
c0019c4e:	5f                   	pop    edi
c0019c4f:	c3                   	ret    

c0019c50 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c50:	55                   	push   ebp
c0019c51:	57                   	push   edi
c0019c52:	56                   	push   esi
c0019c53:	53                   	push   ebx
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c5f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019c63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c67:	fa                   	cli    
c0019c68:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019c6e:	80 3d c5 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1c5,0x0
c0019c75:	75 15                	jne    c0019c8c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019c77:	e8 08 f3 ff ff       	call   c0018f84 <schedule()>
c0019c7c:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019c81:	48                   	dec    eax
c0019c82:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019c87:	75 de                	jne    c0019c67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c89:	fb                   	sti    
c0019c8a:	eb db                	jmp    c0019c67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c8c:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019c91:	c7 05 cc a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1cc,0x0
c0019c9b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019c9f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019ca3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019ca7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019cab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019caf:	0f b7 ff             	movzx  edi,di
c0019cb2:	0f b7 f6             	movzx  esi,si
c0019cb5:	50                   	push   eax
c0019cb6:	6a 20                	push   0x20
c0019cb8:	6a 00                	push   0x0
c0019cba:	68 e0 a1 02 c0       	push   0xc002a1e0
c0019cbf:	e8 d0 69 fe ff       	call   c0000694 <memset>
c0019cc4:	5a                   	pop    edx
c0019cc5:	59                   	pop    ecx
c0019cc6:	57                   	push   edi
c0019cc7:	56                   	push   esi
c0019cc8:	e8 2d fe ff ff       	call   c0019afa <Vm::realToLinear(unsigned short, unsigned short)>
c0019ccd:	83 c4 10             	add    esp,0x10
c0019cd0:	89 c7                	mov    edi,eax
c0019cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019cd6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019cda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cdc:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019ce1:	c6 05 c5 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a1c5,0x0
c0019ce8:	48                   	dec    eax
c0019ce9:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019cee:	75 01                	jne    c0019cf1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019cf0:	fb                   	sti    
c0019cf1:	83 ec 0c             	sub    esp,0xc
c0019cf4:	ff 35 c8 a1 02 c0    	push   DWORD PTR ds:0xc002a1c8
c0019cfa:	e8 41 f7 ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c0019cff:	83 c4 1c             	add    esp,0x1c
c0019d02:	b0 01                	mov    al,0x1
c0019d04:	5b                   	pop    ebx
c0019d05:	5e                   	pop    esi
c0019d06:	5f                   	pop    edi
c0019d07:	5d                   	pop    ebp
c0019d08:	c3                   	ret    

c0019d09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019d09:	55                   	push   ebp
c0019d0a:	57                   	push   edi
c0019d0b:	56                   	push   esi
c0019d0c:	53                   	push   ebx
c0019d0d:	83 ec 2c             	sub    esp,0x2c
c0019d10:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019d14:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d18:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019d1c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019d20:	fa                   	cli    
c0019d21:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c0019d27:	0f b6 35 c5 a1 02 c0 	movzx  esi,BYTE PTR ds:0xc002a1c5
c0019d2e:	89 f0                	mov    eax,esi
c0019d30:	84 c0                	test   al,al
c0019d32:	75 1d                	jne    c0019d51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019d34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d38:	e8 47 f2 ff ff       	call   c0018f84 <schedule()>
c0019d3d:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019d42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d46:	48                   	dec    eax
c0019d47:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019d4c:	75 d2                	jne    c0019d20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d4e:	fb                   	sti    
c0019d4f:	eb cf                	jmp    c0019d20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d51:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019d56:	c7 05 cc a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1cc,0x0
c0019d60:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019d64:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019d68:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019d6c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019d70:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019d74:	50                   	push   eax
c0019d75:	6a 20                	push   0x20
c0019d77:	6a 00                	push   0x0
c0019d79:	68 e0 a1 02 c0       	push   0xc002a1e0
c0019d7e:	e8 11 69 fe ff       	call   c0000694 <memset>
c0019d83:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019d8a:	e8 58 00 ff ff       	call   c0009de7 <malloc>
c0019d8f:	83 c4 0c             	add    esp,0xc
c0019d92:	89 c3                	mov    ebx,eax
c0019d94:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c0019d9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d9e:	50                   	push   eax
c0019d9f:	e8 10 39 ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c0019da4:	83 c4 10             	add    esp,0x10
c0019da7:	85 db                	test   ebx,ebx
c0019da9:	75 0a                	jne    c0019db5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019dab:	83 ec 0c             	sub    esp,0xc
c0019dae:	68 ac 6e 02 c0       	push   0xc0026eac
c0019db3:	eb 3e                	jmp    c0019df3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019db5:	50                   	push   eax
c0019db6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019dba:	50                   	push   eax
c0019dbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019dbf:	50                   	push   eax
c0019dc0:	53                   	push   ebx
c0019dc1:	e8 74 3c ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c0019dc6:	83 c4 10             	add    esp,0x10
c0019dc9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019dce:	74 0a                	je     c0019dda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019dd0:	83 ec 0c             	sub    esp,0xc
c0019dd3:	68 c0 6e 02 c0       	push   0xc0026ec0
c0019dd8:	eb 19                	jmp    c0019df3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019dda:	51                   	push   ecx
c0019ddb:	51                   	push   ecx
c0019ddc:	6a 01                	push   0x1
c0019dde:	53                   	push   ebx
c0019ddf:	e8 aa 39 ff ff       	call   c000d78e <File::open(FileOpenMode)>
c0019de4:	83 c4 10             	add    esp,0x10
c0019de7:	85 c0                	test   eax,eax
c0019de9:	74 24                	je     c0019e0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019deb:	83 ec 0c             	sub    esp,0xc
c0019dee:	68 d9 6e 02 c0       	push   0xc0026ed9
c0019df3:	e8 31 b4 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0019df8:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	48                   	dec    eax
c0019e01:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019e06:	85 c0                	test   eax,eax
c0019e08:	75 01                	jne    c0019e0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019e0a:	fb                   	sti    
c0019e0b:	31 f6                	xor    esi,esi
c0019e0d:	eb 58                	jmp    c0019e67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019e0f:	0f b7 ed             	movzx  ebp,bp
c0019e12:	50                   	push   eax
c0019e13:	0f b7 ff             	movzx  edi,di
c0019e16:	50                   	push   eax
c0019e17:	55                   	push   ebp
c0019e18:	57                   	push   edi
c0019e19:	e8 dc fc ff ff       	call   c0019afa <Vm::realToLinear(unsigned short, unsigned short)>
c0019e1e:	5a                   	pop    edx
c0019e1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019e21:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e25:	51                   	push   ecx
c0019e26:	50                   	push   eax
c0019e27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e2f:	53                   	push   ebx
c0019e30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e33:	83 c4 14             	add    esp,0x14
c0019e36:	53                   	push   ebx
c0019e37:	e8 b0 39 ff ff       	call   c000d7ec <File::close()>
c0019e3c:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c0019e41:	83 c4 10             	add    esp,0x10
c0019e44:	48                   	dec    eax
c0019e45:	c6 05 c5 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a1c5,0x0
c0019e4c:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0019e51:	85 c0                	test   eax,eax
c0019e53:	75 01                	jne    c0019e56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019e55:	fb                   	sti    
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	ff 35 c8 a1 02 c0    	push   DWORD PTR ds:0xc002a1c8
c0019e5f:	e8 dc f5 ff ff       	call   c0019440 <unblockTask(ThreadControlBlock*)>
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	83 c4 2c             	add    esp,0x2c
c0019e6a:	89 f0                	mov    eax,esi
c0019e6c:	5b                   	pop    ebx
c0019e6d:	5e                   	pop    esi
c0019e6e:	5f                   	pop    edi
c0019e6f:	5d                   	pop    ebp
c0019e70:	c3                   	ret    

c0019e71 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019e71:	57                   	push   edi
c0019e72:	56                   	push   esi
c0019e73:	53                   	push   ebx
c0019e74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e80:	83 e8 06             	sub    eax,0x6
c0019e83:	0f b7 c0             	movzx  eax,ax
c0019e86:	50                   	push   eax
c0019e87:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019e8c:	50                   	push   eax
c0019e8d:	e8 68 fc ff ff       	call   c0019afa <Vm::realToLinear(unsigned short, unsigned short)>
c0019e92:	5a                   	pop    edx
c0019e93:	5e                   	pop    esi
c0019e94:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019e97:	8d 56 fa             	lea    edx,[esi-0x6]
c0019e9a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019ea0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019ea3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019ea6:	83 c2 02             	add    edx,0x2
c0019ea9:	66 89 10             	mov    WORD PTR [eax],dx
c0019eac:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019eaf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019eb3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019eb6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019eba:	89 d6                	mov    esi,edx
c0019ebc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019ec2:	66 81 e6 ff fd       	and    si,0xfdff
c0019ec7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019ecb:	74 07                	je     c0019ed4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019ecd:	89 d6                	mov    esi,edx
c0019ecf:	66 81 ce 00 02       	or     si,0x200
c0019ed4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019edd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019ee1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019ee9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019eec:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019ef4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019ef7:	5b                   	pop    ebx
c0019ef8:	5e                   	pop    esi
c0019ef9:	5f                   	pop    edi
c0019efa:	c3                   	ret    

c0019efb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f00:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f05:	c1 e0 04             	shl    eax,0x4
c0019f08:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019f0b:	c3                   	ret    

c0019f0c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019f0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f16:	c1 e0 04             	shl    eax,0x4
c0019f19:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019f1d:	c3                   	ret    

c0019f1e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019f1e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f23:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f28:	c1 e0 04             	shl    eax,0x4
c0019f2b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019f2e:	c3                   	ret    

c0019f2f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019f2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f39:	c1 e0 04             	shl    eax,0x4
c0019f3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f40:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019f43:	c3                   	ret    

c0019f44 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019f44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f4e:	c1 e0 04             	shl    eax,0x4
c0019f51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f55:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019f59:	c3                   	ret    

c0019f5a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019f5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f64:	c1 e0 04             	shl    eax,0x4
c0019f67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f6b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019f6e:	c3                   	ret    

c0019f6f <Vm::faultHandler(regs*)>:
c0019f6f:	55                   	push   ebp
c0019f70:	57                   	push   edi
c0019f71:	56                   	push   esi
c0019f72:	53                   	push   ebx
c0019f73:	83 ec 1c             	sub    esp,0x1c
c0019f76:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f7a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019f7d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019f81:	0f b7 f8             	movzx  edi,ax
c0019f84:	52                   	push   edx
c0019f85:	0f b7 c0             	movzx  eax,ax
c0019f88:	50                   	push   eax
c0019f89:	e8 6c fb ff ff       	call   c0019afa <Vm::realToLinear(unsigned short, unsigned short)>
c0019f8e:	5a                   	pop    edx
c0019f8f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019f92:	59                   	pop    ecx
c0019f93:	89 c1                	mov    ecx,eax
c0019f95:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fa5:	0f b7 c5             	movzx  eax,bp
c0019fa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019fb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019fb4:	e8 41 fb ff ff       	call   c0019afa <Vm::realToLinear(unsigned short, unsigned short)>
c0019fb9:	5e                   	pop    esi
c0019fba:	be 06 00 00 00       	mov    esi,0x6
c0019fbf:	5a                   	pop    edx
c0019fc0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019fc5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019fca:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019fcd:	80 fa 9d             	cmp    dl,0x9d
c0019fd0:	0f 84 2c 02 00 00    	je     c001a202 <Vm::faultHandler(regs*)+0x293>
c0019fd6:	0f 87 91 00 00 00    	ja     c001a06d <Vm::faultHandler(regs*)+0xfe>
c0019fdc:	80 fa 66             	cmp    dl,0x66
c0019fdf:	0f 84 98 01 00 00    	je     c001a17d <Vm::faultHandler(regs*)+0x20e>
c0019fe5:	77 47                	ja     c001a02e <Vm::faultHandler(regs*)+0xbf>
c0019fe7:	80 fa 36             	cmp    dl,0x36
c0019fea:	0f 84 80 01 00 00    	je     c001a170 <Vm::faultHandler(regs*)+0x201>
c0019ff0:	77 1a                	ja     c001a00c <Vm::faultHandler(regs*)+0x9d>
c0019ff2:	80 fa 26             	cmp    dl,0x26
c0019ff5:	0f 84 4e 01 00 00    	je     c001a149 <Vm::faultHandler(regs*)+0x1da>
c0019ffb:	80 fa 2e             	cmp    dl,0x2e
c0019ffe:	0f 85 e2 05 00 00    	jne    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a004:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a007:	31 f6                	xor    esi,esi
c001a009:	41                   	inc    ecx
c001a00a:	eb be                	jmp    c0019fca <Vm::faultHandler(regs*)+0x5b>
c001a00c:	80 fa 64             	cmp    dl,0x64
c001a00f:	0f 84 41 01 00 00    	je     c001a156 <Vm::faultHandler(regs*)+0x1e7>
c001a015:	0f 87 48 01 00 00    	ja     c001a163 <Vm::faultHandler(regs*)+0x1f4>
c001a01b:	80 fa 3e             	cmp    dl,0x3e
c001a01e:	0f 85 c2 05 00 00    	jne    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a024:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a027:	be 01 00 00 00       	mov    esi,0x1
c001a02c:	eb db                	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a02e:	80 fa 6d             	cmp    dl,0x6d
c001a031:	0f 84 ec 02 00 00    	je     c001a323 <Vm::faultHandler(regs*)+0x3b4>
c001a037:	77 17                	ja     c001a050 <Vm::faultHandler(regs*)+0xe1>
c001a039:	80 fa 67             	cmp    dl,0x67
c001a03c:	0f 84 48 01 00 00    	je     c001a18a <Vm::faultHandler(regs*)+0x21b>
c001a042:	80 fa 6c             	cmp    dl,0x6c
c001a045:	0f 84 69 02 00 00    	je     c001a2b4 <Vm::faultHandler(regs*)+0x345>
c001a04b:	e9 96 05 00 00       	jmp    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a050:	80 fa 6f             	cmp    dl,0x6f
c001a053:	0f 84 f4 03 00 00    	je     c001a44d <Vm::faultHandler(regs*)+0x4de>
c001a059:	0f 82 59 03 00 00    	jb     c001a3b8 <Vm::faultHandler(regs*)+0x449>
c001a05f:	80 fa 9c             	cmp    dl,0x9c
c001a062:	0f 84 2f 01 00 00    	je     c001a197 <Vm::faultHandler(regs*)+0x228>
c001a068:	e9 79 05 00 00       	jmp    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a06d:	80 fa ec             	cmp    dl,0xec
c001a070:	0f 84 14 05 00 00    	je     c001a58a <Vm::faultHandler(regs*)+0x61b>
c001a076:	77 7b                	ja     c001a0f3 <Vm::faultHandler(regs*)+0x184>
c001a078:	80 fa e4             	cmp    dl,0xe4
c001a07b:	0f 84 93 04 00 00    	je     c001a514 <Vm::faultHandler(regs*)+0x5a5>
c001a081:	77 53                	ja     c001a0d6 <Vm::faultHandler(regs*)+0x167>
c001a083:	80 fa cd             	cmp    dl,0xcd
c001a086:	0f 84 d9 01 00 00    	je     c001a265 <Vm::faultHandler(regs*)+0x2f6>
c001a08c:	80 fa cf             	cmp    dl,0xcf
c001a08f:	0f 85 51 05 00 00    	jne    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a095:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a098:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a09b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a09f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a0a2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a0a6:	81 ca 00 02 02 00    	or     edx,0x20200
c001a0ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a0af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a0b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a0b9:	66 c1 e8 09          	shr    ax,0x9
c001a0bd:	83 e0 01             	and    eax,0x1
c001a0c0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a0c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a0c6:	83 c0 06             	add    eax,0x6
c001a0c9:	25 ff ff 00 00       	and    eax,0xffff
c001a0ce:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a0d1:	e9 0c 05 00 00       	jmp    c001a5e2 <Vm::faultHandler(regs*)+0x673>
c001a0d6:	80 fa e6             	cmp    dl,0xe6
c001a0d9:	0f 84 7f 04 00 00    	je     c001a55e <Vm::faultHandler(regs*)+0x5ef>
c001a0df:	0f 82 4b 04 00 00    	jb     c001a530 <Vm::faultHandler(regs*)+0x5c1>
c001a0e5:	80 fa e7             	cmp    dl,0xe7
c001a0e8:	0f 84 87 04 00 00    	je     c001a575 <Vm::faultHandler(regs*)+0x606>
c001a0ee:	e9 f3 04 00 00       	jmp    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a0f3:	80 fa ef             	cmp    dl,0xef
c001a0f6:	0f 84 d1 04 00 00    	je     c001a5cd <Vm::faultHandler(regs*)+0x65e>
c001a0fc:	77 28                	ja     c001a126 <Vm::faultHandler(regs*)+0x1b7>
c001a0fe:	80 fa ed             	cmp    dl,0xed
c001a101:	0f 84 9f 04 00 00    	je     c001a5a6 <Vm::faultHandler(regs*)+0x637>
c001a107:	80 fa ee             	cmp    dl,0xee
c001a10a:	0f 85 d6 04 00 00    	jne    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a110:	50                   	push   eax
c001a111:	50                   	push   eax
c001a112:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a116:	50                   	push   eax
c001a117:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a11b:	50                   	push   eax
c001a11c:	e8 a3 f9 ff ff       	call   c0019ac4 <Vm::outbv(unsigned short, unsigned char)>
c001a121:	e9 9f 04 00 00       	jmp    c001a5c5 <Vm::faultHandler(regs*)+0x656>
c001a126:	80 fa fa             	cmp    dl,0xfa
c001a129:	0f 84 69 01 00 00    	je     c001a298 <Vm::faultHandler(regs*)+0x329>
c001a12f:	80 fa fb             	cmp    dl,0xfb
c001a132:	0f 84 6e 01 00 00    	je     c001a2a6 <Vm::faultHandler(regs*)+0x337>
c001a138:	80 fa f3             	cmp    dl,0xf3
c001a13b:	0f 85 a5 04 00 00    	jne    c001a5e6 <Vm::faultHandler(regs*)+0x677>
c001a141:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a144:	e9 c0 fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a149:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a14c:	be 02 00 00 00       	mov    esi,0x2
c001a151:	e9 b3 fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a156:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a159:	be 03 00 00 00       	mov    esi,0x3
c001a15e:	e9 a6 fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a163:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a166:	be 04 00 00 00       	mov    esi,0x4
c001a16b:	e9 99 fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a170:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a173:	be 05 00 00 00       	mov    esi,0x5
c001a178:	e9 8c fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a17d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a180:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a185:	e9 7f fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a18a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a18d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a192:	e9 72 fe ff ff       	jmp    c001a009 <Vm::faultHandler(regs*)+0x9a>
c001a197:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a19a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a19e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1a3:	74 30                	je     c001a1d5 <Vm::faultHandler(regs*)+0x266>
c001a1a5:	83 e9 04             	sub    ecx,0x4
c001a1a8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a1ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a1b4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a1b7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a1ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1c0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a1c4:	0f 84 15 04 00 00    	je     c001a5df <Vm::faultHandler(regs*)+0x670>
c001a1ca:	80 ce 02             	or     dh,0x2
c001a1cd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a1d0:	e9 0a 04 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a1d5:	83 e9 02             	sub    ecx,0x2
c001a1d8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a1de:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a1e1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a1e5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1eb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a1ef:	74 05                	je     c001a1f6 <Vm::faultHandler(regs*)+0x287>
c001a1f1:	80 ce 02             	or     dh,0x2
c001a1f4:	eb 03                	jmp    c001a1f9 <Vm::faultHandler(regs*)+0x28a>
c001a1f6:	80 e6 fd             	and    dh,0xfd
c001a1f9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a1fd:	e9 dd 03 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a202:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a207:	74 2a                	je     c001a233 <Vm::faultHandler(regs*)+0x2c4>
c001a209:	8b 10                	mov    edx,DWORD PTR [eax]
c001a20b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a211:	81 ca 00 02 02 00    	or     edx,0x20200
c001a217:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a21a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a21c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a222:	c1 e8 09             	shr    eax,0x9
c001a225:	83 e0 01             	and    eax,0x1
c001a228:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a22b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a22e:	83 c0 04             	add    eax,0x4
c001a231:	eb 25                	jmp    c001a258 <Vm::faultHandler(regs*)+0x2e9>
c001a233:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a236:	81 ca 00 02 02 00    	or     edx,0x20200
c001a23c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a23f:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a242:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a248:	66 c1 e8 09          	shr    ax,0x9
c001a24c:	83 e0 01             	and    eax,0x1
c001a24f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a252:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a255:	83 c0 02             	add    eax,0x2
c001a258:	25 ff ff 00 00       	and    eax,0xffff
c001a25d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a260:	e9 7a 03 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a265:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a269:	3c ee                	cmp    al,0xee
c001a26b:	75 10                	jne    c001a27d <Vm::faultHandler(regs*)+0x30e>
c001a26d:	83 ec 0c             	sub    esp,0xc
c001a270:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a273:	e8 e9 f8 ff ff       	call   c0019b61 <Vm::mainloop3(unsigned long)>
c001a278:	e9 4b 03 00 00       	jmp    c001a5c8 <Vm::faultHandler(regs*)+0x659>
c001a27d:	83 ec 0c             	sub    esp,0xc
c001a280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a288:	51                   	push   ecx
c001a289:	50                   	push   eax
c001a28a:	53                   	push   ebx
c001a28b:	e8 e1 fb ff ff       	call   c0019e71 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a290:	83 c4 20             	add    esp,0x20
c001a293:	e9 4a 03 00 00       	jmp    c001a5e2 <Vm::faultHandler(regs*)+0x673>
c001a298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a29d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a2a1:	e9 39 03 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a2a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2ab:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a2af:	e9 2b 03 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a2b4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a2b7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2bc:	74 2b                	je     c001a2e9 <Vm::faultHandler(regs*)+0x37a>
c001a2be:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a2c5:	76 22                	jbe    c001a2e9 <Vm::faultHandler(regs*)+0x37a>
c001a2c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a2cb:	50                   	push   eax
c001a2cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2d0:	50                   	push   eax
c001a2d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2d5:	50                   	push   eax
c001a2d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a2da:	50                   	push   eax
c001a2db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2df:	50                   	push   eax
c001a2e0:	6a 6c                	push   0x6c
c001a2e2:	6a 6c                	push   0x6c
c001a2e4:	e9 b9 01 00 00       	jmp    c001a4a2 <Vm::faultHandler(regs*)+0x533>
c001a2e9:	83 ec 0c             	sub    esp,0xc
c001a2ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a2f0:	0f b7 f6             	movzx  esi,si
c001a2f3:	50                   	push   eax
c001a2f4:	e8 b8 f7 ff ff       	call   c0019ab1 <Vm::inbv(unsigned short)>
c001a2f9:	83 c4 0c             	add    esp,0xc
c001a2fc:	0f b6 c0             	movzx  eax,al
c001a2ff:	50                   	push   eax
c001a300:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a304:	50                   	push   eax
c001a305:	56                   	push   esi
c001a306:	e8 24 fc ff ff       	call   c0019f2f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a311:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a315:	74 03                	je     c001a31a <Vm::faultHandler(regs*)+0x3ab>
c001a317:	48                   	dec    eax
c001a318:	eb 01                	jmp    c001a31b <Vm::faultHandler(regs*)+0x3ac>
c001a31a:	40                   	inc    eax
c001a31b:	0f b7 c0             	movzx  eax,ax
c001a31e:	e9 8d 00 00 00       	jmp    c001a3b0 <Vm::faultHandler(regs*)+0x441>
c001a323:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a326:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a329:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a32e:	74 29                	je     c001a359 <Vm::faultHandler(regs*)+0x3ea>
c001a330:	3d ff ff 00 00       	cmp    eax,0xffff
c001a335:	76 22                	jbe    c001a359 <Vm::faultHandler(regs*)+0x3ea>
c001a337:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a33b:	50                   	push   eax
c001a33c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a340:	50                   	push   eax
c001a341:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a345:	50                   	push   eax
c001a346:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a34a:	50                   	push   eax
c001a34b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a34f:	50                   	push   eax
c001a350:	6a 6d                	push   0x6d
c001a352:	6a 6d                	push   0x6d
c001a354:	e9 49 01 00 00       	jmp    c001a4a2 <Vm::faultHandler(regs*)+0x533>
c001a359:	0f b7 c8             	movzx  ecx,ax
c001a35c:	0f b7 f6             	movzx  esi,si
c001a35f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a362:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a367:	74 20                	je     c001a389 <Vm::faultHandler(regs*)+0x41a>
c001a369:	ed                   	in     eax,dx
c001a36a:	55                   	push   ebp
c001a36b:	50                   	push   eax
c001a36c:	51                   	push   ecx
c001a36d:	56                   	push   esi
c001a36e:	e8 e7 fb ff ff       	call   c0019f5a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a379:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a37d:	74 05                	je     c001a384 <Vm::faultHandler(regs*)+0x415>
c001a37f:	83 e8 04             	sub    eax,0x4
c001a382:	eb 27                	jmp    c001a3ab <Vm::faultHandler(regs*)+0x43c>
c001a384:	83 c0 04             	add    eax,0x4
c001a387:	eb 22                	jmp    c001a3ab <Vm::faultHandler(regs*)+0x43c>
c001a389:	66 ed                	in     ax,dx
c001a38b:	0f b7 c0             	movzx  eax,ax
c001a38e:	57                   	push   edi
c001a38f:	50                   	push   eax
c001a390:	51                   	push   ecx
c001a391:	56                   	push   esi
c001a392:	e8 ad fb ff ff       	call   c0019f44 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a39d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a3a1:	74 05                	je     c001a3a8 <Vm::faultHandler(regs*)+0x439>
c001a3a3:	83 e8 02             	sub    eax,0x2
c001a3a6:	eb 03                	jmp    c001a3ab <Vm::faultHandler(regs*)+0x43c>
c001a3a8:	83 c0 02             	add    eax,0x2
c001a3ab:	25 ff ff 00 00       	and    eax,0xffff
c001a3b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a3b3:	e9 27 02 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a3b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001a3bb:	3c 05                	cmp    al,0x5
c001a3bd:	77 24                	ja     c001a3e3 <Vm::faultHandler(regs*)+0x474>
c001a3bf:	0f b6 c0             	movzx  eax,al
c001a3c2:	ff 24 85 4c 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd90b4]
c001a3c9:	0f b7 fd             	movzx  edi,bp
c001a3cc:	eb 15                	jmp    c001a3e3 <Vm::faultHandler(regs*)+0x474>
c001a3ce:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a3d2:	eb 0f                	jmp    c001a3e3 <Vm::faultHandler(regs*)+0x474>
c001a3d4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a3d8:	eb 09                	jmp    c001a3e3 <Vm::faultHandler(regs*)+0x474>
c001a3da:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a3de:	eb 03                	jmp    c001a3e3 <Vm::faultHandler(regs*)+0x474>
c001a3e0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a3e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3e6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a3eb:	74 29                	je     c001a416 <Vm::faultHandler(regs*)+0x4a7>
c001a3ed:	3d ff ff 00 00       	cmp    eax,0xffff
c001a3f2:	76 22                	jbe    c001a416 <Vm::faultHandler(regs*)+0x4a7>
c001a3f4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a3f8:	50                   	push   eax
c001a3f9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a3fd:	50                   	push   eax
c001a3fe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a402:	50                   	push   eax
c001a403:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a407:	50                   	push   eax
c001a408:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a40c:	50                   	push   eax
c001a40d:	6a 6e                	push   0x6e
c001a40f:	6a 6e                	push   0x6e
c001a411:	e9 8c 00 00 00       	jmp    c001a4a2 <Vm::faultHandler(regs*)+0x533>
c001a416:	0f b7 c0             	movzx  eax,ax
c001a419:	52                   	push   edx
c001a41a:	52                   	push   edx
c001a41b:	50                   	push   eax
c001a41c:	57                   	push   edi
c001a41d:	e8 d9 fa ff ff       	call   c0019efb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a422:	59                   	pop    ecx
c001a423:	0f b6 c0             	movzx  eax,al
c001a426:	5e                   	pop    esi
c001a427:	50                   	push   eax
c001a428:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a42c:	50                   	push   eax
c001a42d:	e8 92 f6 ff ff       	call   c0019ac4 <Vm::outbv(unsigned short, unsigned char)>
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a438:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a43c:	74 03                	je     c001a441 <Vm::faultHandler(regs*)+0x4d2>
c001a43e:	48                   	dec    eax
c001a43f:	eb 01                	jmp    c001a442 <Vm::faultHandler(regs*)+0x4d3>
c001a441:	40                   	inc    eax
c001a442:	0f b7 c0             	movzx  eax,ax
c001a445:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a448:	e9 92 01 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a44d:	8d 46 ff             	lea    eax,[esi-0x1]
c001a450:	3c 05                	cmp    al,0x5
c001a452:	77 1f                	ja     c001a473 <Vm::faultHandler(regs*)+0x504>
c001a454:	0f b6 c0             	movzx  eax,al
c001a457:	ff 24 85 64 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd909c]
c001a45e:	89 ef                	mov    edi,ebp
c001a460:	eb 11                	jmp    c001a473 <Vm::faultHandler(regs*)+0x504>
c001a462:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a465:	eb 0c                	jmp    c001a473 <Vm::faultHandler(regs*)+0x504>
c001a467:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a46a:	eb 07                	jmp    c001a473 <Vm::faultHandler(regs*)+0x504>
c001a46c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a46f:	eb 02                	jmp    c001a473 <Vm::faultHandler(regs*)+0x504>
c001a471:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a473:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a476:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a47b:	74 37                	je     c001a4b4 <Vm::faultHandler(regs*)+0x545>
c001a47d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a483:	76 2f                	jbe    c001a4b4 <Vm::faultHandler(regs*)+0x545>
c001a485:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a489:	50                   	push   eax
c001a48a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a48e:	50                   	push   eax
c001a48f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a493:	50                   	push   eax
c001a494:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a498:	50                   	push   eax
c001a499:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a49d:	50                   	push   eax
c001a49e:	6a 6f                	push   0x6f
c001a4a0:	6a 6f                	push   0x6f
c001a4a2:	68 f2 6e 02 c0       	push   0xc0026ef2
c001a4a7:	e8 9d 2c ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001a4ac:	83 c4 20             	add    esp,0x20
c001a4af:	e9 86 01 00 00       	jmp    c001a63a <Vm::faultHandler(regs*)+0x6cb>
c001a4b4:	0f b7 d7             	movzx  edx,di
c001a4b7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a4ba:	0f b7 c6             	movzx  eax,si
c001a4bd:	81 e1 00 04 00 00    	and    ecx,0x400
c001a4c3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a4c6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4cb:	74 1d                	je     c001a4ea <Vm::faultHandler(regs*)+0x57b>
c001a4cd:	55                   	push   ebp
c001a4ce:	55                   	push   ebp
c001a4cf:	50                   	push   eax
c001a4d0:	52                   	push   edx
c001a4d1:	e8 48 fa ff ff       	call   c0019f1e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	89 fa                	mov    edx,edi
c001a4db:	ef                   	out    dx,eax
c001a4dc:	85 c9                	test   ecx,ecx
c001a4de:	74 05                	je     c001a4e5 <Vm::faultHandler(regs*)+0x576>
c001a4e0:	83 ee 04             	sub    esi,0x4
c001a4e3:	eb 21                	jmp    c001a506 <Vm::faultHandler(regs*)+0x597>
c001a4e5:	83 c6 04             	add    esi,0x4
c001a4e8:	eb 1c                	jmp    c001a506 <Vm::faultHandler(regs*)+0x597>
c001a4ea:	55                   	push   ebp
c001a4eb:	55                   	push   ebp
c001a4ec:	50                   	push   eax
c001a4ed:	52                   	push   edx
c001a4ee:	e8 19 fa ff ff       	call   c0019f0c <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	89 fa                	mov    edx,edi
c001a4f8:	66 ef                	out    dx,ax
c001a4fa:	85 c9                	test   ecx,ecx
c001a4fc:	74 05                	je     c001a503 <Vm::faultHandler(regs*)+0x594>
c001a4fe:	83 ee 02             	sub    esi,0x2
c001a501:	eb 03                	jmp    c001a506 <Vm::faultHandler(regs*)+0x597>
c001a503:	83 c6 02             	add    esi,0x2
c001a506:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a50c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a50f:	e9 cb 00 00 00       	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a514:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a51b:	83 ec 0c             	sub    esp,0xc
c001a51e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a522:	50                   	push   eax
c001a523:	e8 89 f5 ff ff       	call   c0019ab1 <Vm::inbv(unsigned short)>
c001a528:	0f b6 c0             	movzx  eax,al
c001a52b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a52e:	eb 3f                	jmp    c001a56f <Vm::faultHandler(regs*)+0x600>
c001a530:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a535:	74 07                	je     c001a53e <Vm::faultHandler(regs*)+0x5cf>
c001a537:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a53b:	ed                   	in     eax,dx
c001a53c:	eb 14                	jmp    c001a552 <Vm::faultHandler(regs*)+0x5e3>
c001a53e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a541:	66 31 f6             	xor    si,si
c001a544:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a547:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a54b:	66 ed                	in     ax,dx
c001a54d:	0f b7 c0             	movzx  eax,ax
c001a550:	09 f0                	or     eax,esi
c001a552:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a555:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a559:	e9 84 00 00 00       	jmp    c001a5e2 <Vm::faultHandler(regs*)+0x673>
c001a55e:	52                   	push   edx
c001a55f:	52                   	push   edx
c001a560:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a564:	50                   	push   eax
c001a565:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a569:	50                   	push   eax
c001a56a:	e8 55 f5 ff ff       	call   c0019ac4 <Vm::outbv(unsigned short, unsigned char)>
c001a56f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a573:	eb 53                	jmp    c001a5c8 <Vm::faultHandler(regs*)+0x659>
c001a575:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a578:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a57c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a581:	74 03                	je     c001a586 <Vm::faultHandler(regs*)+0x617>
c001a583:	ef                   	out    dx,eax
c001a584:	eb cf                	jmp    c001a555 <Vm::faultHandler(regs*)+0x5e6>
c001a586:	66 ef                	out    dx,ax
c001a588:	eb cb                	jmp    c001a555 <Vm::faultHandler(regs*)+0x5e6>
c001a58a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a591:	83 ec 0c             	sub    esp,0xc
c001a594:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a598:	50                   	push   eax
c001a599:	e8 13 f5 ff ff       	call   c0019ab1 <Vm::inbv(unsigned short)>
c001a59e:	0f b6 c0             	movzx  eax,al
c001a5a1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a5a4:	eb 1f                	jmp    c001a5c5 <Vm::faultHandler(regs*)+0x656>
c001a5a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a5a9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a5ae:	74 03                	je     c001a5b3 <Vm::faultHandler(regs*)+0x644>
c001a5b0:	ed                   	in     eax,dx
c001a5b1:	eb 0d                	jmp    c001a5c0 <Vm::faultHandler(regs*)+0x651>
c001a5b3:	66 ed                	in     ax,dx
c001a5b5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a5b8:	0f b7 c0             	movzx  eax,ax
c001a5bb:	66 31 d2             	xor    dx,dx
c001a5be:	09 d0                	or     eax,edx
c001a5c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a5c3:	eb 1a                	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a5c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	eb 15                	jmp    c001a5e2 <Vm::faultHandler(regs*)+0x673>
c001a5cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a5d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a5d3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a5d8:	74 03                	je     c001a5dd <Vm::faultHandler(regs*)+0x66e>
c001a5da:	ef                   	out    dx,eax
c001a5db:	eb 02                	jmp    c001a5df <Vm::faultHandler(regs*)+0x670>
c001a5dd:	66 ef                	out    dx,ax
c001a5df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a5e2:	b0 01                	mov    al,0x1
c001a5e4:	eb 56                	jmp    c001a63c <Vm::faultHandler(regs*)+0x6cd>
c001a5e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a5ea:	50                   	push   eax
c001a5eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a5ef:	50                   	push   eax
c001a5f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a5f4:	50                   	push   eax
c001a5f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a5f9:	50                   	push   eax
c001a5fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a5fe:	50                   	push   eax
c001a5ff:	52                   	push   edx
c001a600:	52                   	push   edx
c001a601:	68 1f 6f 02 c0       	push   0xc0026f1f
c001a606:	e8 3e 2b ff ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001a60b:	83 c4 20             	add    esp,0x20
c001a60e:	83 ec 0c             	sub    esp,0xc
c001a611:	6a 60                	push   0x60
c001a613:	e8 99 f4 ff ff       	call   c0019ab1 <Vm::inbv(unsigned short)>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	3c 1c                	cmp    al,0x1c
c001a61d:	74 04                	je     c001a623 <Vm::faultHandler(regs*)+0x6b4>
c001a61f:	3c 5a                	cmp    al,0x5a
c001a621:	75 eb                	jne    c001a60e <Vm::faultHandler(regs*)+0x69f>
c001a623:	3c 5a                	cmp    al,0x5a
c001a625:	74 04                	je     c001a62b <Vm::faultHandler(regs*)+0x6bc>
c001a627:	3c 1c                	cmp    al,0x1c
c001a629:	75 0f                	jne    c001a63a <Vm::faultHandler(regs*)+0x6cb>
c001a62b:	83 ec 0c             	sub    esp,0xc
c001a62e:	6a 60                	push   0x60
c001a630:	e8 7c f4 ff ff       	call   c0019ab1 <Vm::inbv(unsigned short)>
c001a635:	83 c4 10             	add    esp,0x10
c001a638:	eb e9                	jmp    c001a623 <Vm::faultHandler(regs*)+0x6b4>
c001a63a:	31 c0                	xor    eax,eax
c001a63c:	83 c4 1c             	add    esp,0x1c
c001a63f:	5b                   	pop    ebx
c001a640:	5e                   	pop    esi
c001a641:	5f                   	pop    edi
c001a642:	5d                   	pop    ebp
c001a643:	c3                   	ret    

c001a644 <Vm::fpuInternalTo32(unsigned long long)>:
c001a644:	57                   	push   edi
c001a645:	56                   	push   esi
c001a646:	53                   	push   ebx
c001a647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a64f:	89 d6                	mov    esi,edx
c001a651:	89 d7                	mov    edi,edx
c001a653:	89 c1                	mov    ecx,eax
c001a655:	c1 ef 14             	shr    edi,0x14
c001a658:	89 d3                	mov    ebx,edx
c001a65a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a660:	31 d2                	xor    edx,edx
c001a662:	89 f8                	mov    eax,edi
c001a664:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a66a:	bf ff 00 00 00       	mov    edi,0xff
c001a66f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a674:	83 d2 ff             	adc    edx,0xffffffff
c001a677:	39 c7                	cmp    edi,eax
c001a679:	bf 00 00 00 00       	mov    edi,0x0
c001a67e:	19 d7                	sbb    edi,edx
c001a680:	72 16                	jb     c001a698 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a682:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a686:	c1 e0 17             	shl    eax,0x17
c001a689:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a68f:	09 f1                	or     ecx,esi
c001a691:	09 c1                	or     ecx,eax
c001a693:	89 cf                	mov    edi,ecx
c001a695:	eb 05                	jmp    c001a69c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a697:	90                   	nop
c001a698:	31 ff                	xor    edi,edi
c001a69a:	66 90                	xchg   ax,ax
c001a69c:	89 f8                	mov    eax,edi
c001a69e:	5b                   	pop    ebx
c001a69f:	5e                   	pop    esi
c001a6a0:	5f                   	pop    edi
c001a6a1:	c3                   	ret    

c001a6a2 <Vm::fpuInternalTo64(unsigned long long)>:
c001a6a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6aa:	c3                   	ret    

c001a6ab <Vm::fpu32ToInternal(unsigned int)>:
c001a6ab:	57                   	push   edi
c001a6ac:	31 ff                	xor    edi,edi
c001a6ae:	56                   	push   esi
c001a6af:	53                   	push   ebx
c001a6b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6b4:	89 cb                	mov    ebx,ecx
c001a6b6:	89 ce                	mov    esi,ecx
c001a6b8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a6be:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a6c4:	c1 e9 17             	shr    ecx,0x17
c001a6c7:	89 f0                	mov    eax,esi
c001a6c9:	0f b6 d1             	movzx  edx,cl
c001a6cc:	81 c2 80 03 00 00    	add    edx,0x380
c001a6d2:	89 d1                	mov    ecx,edx
c001a6d4:	89 fa                	mov    edx,edi
c001a6d6:	c1 e1 14             	shl    ecx,0x14
c001a6d9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a6dd:	c1 e0 1d             	shl    eax,0x1d
c001a6e0:	89 d7                	mov    edi,edx
c001a6e2:	89 c6                	mov    esi,eax
c001a6e4:	89 ca                	mov    edx,ecx
c001a6e6:	89 f0                	mov    eax,esi
c001a6e8:	09 fa                	or     edx,edi
c001a6ea:	09 da                	or     edx,ebx
c001a6ec:	5b                   	pop    ebx
c001a6ed:	5e                   	pop    esi
c001a6ee:	5f                   	pop    edi
c001a6ef:	c3                   	ret    

c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>:
c001a6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6f8:	c3                   	ret    

c001a6f9 <Vm::fpuFloatToLong(unsigned long long)>:
c001a6f9:	57                   	push   edi
c001a6fa:	31 c0                	xor    eax,eax
c001a6fc:	56                   	push   esi
c001a6fd:	31 d2                	xor    edx,edx
c001a6ff:	53                   	push   ebx
c001a700:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a704:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a708:	89 d9                	mov    ecx,ebx
c001a70a:	c1 e9 14             	shr    ecx,0x14
c001a70d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a713:	89 cf                	mov    edi,ecx
c001a715:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a71b:	78 37                	js     c001a754 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a71d:	89 d9                	mov    ecx,ebx
c001a71f:	89 f0                	mov    eax,esi
c001a721:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a727:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a72d:	89 ca                	mov    edx,ecx
c001a72f:	b9 34 00 00 00       	mov    ecx,0x34
c001a734:	29 f9                	sub    ecx,edi
c001a736:	0f ad d0             	shrd   eax,edx,cl
c001a739:	d3 fa                	sar    edx,cl
c001a73b:	f6 c1 20             	test   cl,0x20
c001a73e:	74 08                	je     c001a748 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a740:	89 d0                	mov    eax,edx
c001a742:	c1 fa 1f             	sar    edx,0x1f
c001a745:	8d 76 00             	lea    esi,[esi+0x0]
c001a748:	85 db                	test   ebx,ebx
c001a74a:	79 08                	jns    c001a754 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a74c:	f7 d8                	neg    eax
c001a74e:	83 d2 00             	adc    edx,0x0
c001a751:	f7 da                	neg    edx
c001a753:	90                   	nop
c001a754:	5b                   	pop    ebx
c001a755:	5e                   	pop    esi
c001a756:	5f                   	pop    edi
c001a757:	c3                   	ret    

c001a758 <Vm::fpuULongToFloat(unsigned long long)>:
c001a758:	57                   	push   edi
c001a759:	31 c9                	xor    ecx,ecx
c001a75b:	56                   	push   esi
c001a75c:	53                   	push   ebx
c001a75d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a761:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a765:	8d 76 00             	lea    esi,[esi+0x0]
c001a768:	0f ba e7 14          	bt     edi,0x14
c001a76c:	72 0a                	jb     c001a778 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a76e:	01 f6                	add    esi,esi
c001a770:	11 ff                	adc    edi,edi
c001a772:	41                   	inc    ecx
c001a773:	eb f3                	jmp    c001a768 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a775:	8d 76 00             	lea    esi,[esi+0x0]
c001a778:	89 fa                	mov    edx,edi
c001a77a:	89 f0                	mov    eax,esi
c001a77c:	bb 33 04 00 00       	mov    ebx,0x433
c001a781:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a787:	29 cb                	sub    ebx,ecx
c001a789:	89 d9                	mov    ecx,ebx
c001a78b:	5b                   	pop    ebx
c001a78c:	c1 e1 14             	shl    ecx,0x14
c001a78f:	5e                   	pop    esi
c001a790:	09 ca                	or     edx,ecx
c001a792:	5f                   	pop    edi
c001a793:	c3                   	ret    

c001a794 <Vm::fpuLongToFloat(long long)>:
c001a794:	56                   	push   esi
c001a795:	31 c0                	xor    eax,eax
c001a797:	53                   	push   ebx
c001a798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a79c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7a0:	39 c8                	cmp    eax,ecx
c001a7a2:	19 d8                	sbb    eax,ebx
c001a7a4:	7d 06                	jge    c001a7ac <Vm::fpuLongToFloat(long long)+0x18>
c001a7a6:	31 f6                	xor    esi,esi
c001a7a8:	eb 0e                	jmp    c001a7b8 <Vm::fpuLongToFloat(long long)+0x24>
c001a7aa:	66 90                	xchg   ax,ax
c001a7ac:	f7 d9                	neg    ecx
c001a7ae:	be 01 00 00 00       	mov    esi,0x1
c001a7b3:	83 d3 00             	adc    ebx,0x0
c001a7b6:	f7 db                	neg    ebx
c001a7b8:	31 c0                	xor    eax,eax
c001a7ba:	66 90                	xchg   ax,ax
c001a7bc:	0f ba e3 14          	bt     ebx,0x14
c001a7c0:	72 0a                	jb     c001a7cc <Vm::fpuLongToFloat(long long)+0x38>
c001a7c2:	01 c9                	add    ecx,ecx
c001a7c4:	11 db                	adc    ebx,ebx
c001a7c6:	40                   	inc    eax
c001a7c7:	eb f3                	jmp    c001a7bc <Vm::fpuLongToFloat(long long)+0x28>
c001a7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7cc:	ba 33 04 00 00       	mov    edx,0x433
c001a7d1:	29 c2                	sub    edx,eax
c001a7d3:	89 c8                	mov    eax,ecx
c001a7d5:	c1 e2 14             	shl    edx,0x14
c001a7d8:	89 d9                	mov    ecx,ebx
c001a7da:	89 f3                	mov    ebx,esi
c001a7dc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a7e2:	09 ca                	or     edx,ecx
c001a7e4:	84 db                	test   bl,bl
c001a7e6:	74 08                	je     c001a7f0 <Vm::fpuLongToFloat(long long)+0x5c>
c001a7e8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a7ee:	66 90                	xchg   ax,ax
c001a7f0:	5b                   	pop    ebx
c001a7f1:	5e                   	pop    esi
c001a7f2:	c3                   	ret    

c001a7f3 <Vm::fpuGet0()>:
c001a7f3:	31 c0                	xor    eax,eax
c001a7f5:	31 d2                	xor    edx,edx
c001a7f7:	c3                   	ret    

c001a7f8 <Vm::fpuGet1()>:
c001a7f8:	b8 01 00 00 00       	mov    eax,0x1
c001a7fd:	31 d2                	xor    edx,edx
c001a7ff:	c3                   	ret    

c001a800 <Vm::fpuGetPi()>:
c001a800:	b8 03 00 00 00       	mov    eax,0x3
c001a805:	31 d2                	xor    edx,edx
c001a807:	c3                   	ret    

c001a808 <Vm::fpuGetLog2E()>:
c001a808:	83 ec 18             	sub    esp,0x18
c001a80b:	68 7c 6f 02 c0       	push   0xc0026f7c
c001a810:	e8 14 aa ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a815:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a81a:	31 d2                	xor    edx,edx
c001a81c:	83 c4 1c             	add    esp,0x1c
c001a81f:	c3                   	ret    

c001a820 <Vm::fpuGetLogE2()>:
c001a820:	83 ec 18             	sub    esp,0x18
c001a823:	68 88 6f 02 c0       	push   0xc0026f88
c001a828:	e8 fc a9 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a82d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a832:	31 d2                	xor    edx,edx
c001a834:	83 c4 1c             	add    esp,0x1c
c001a837:	c3                   	ret    

c001a838 <Vm::fpuGetLog210()>:
c001a838:	83 ec 18             	sub    esp,0x18
c001a83b:	68 94 6f 02 c0       	push   0xc0026f94
c001a840:	e8 e4 a9 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a845:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a84a:	31 d2                	xor    edx,edx
c001a84c:	83 c4 1c             	add    esp,0x1c
c001a84f:	c3                   	ret    

c001a850 <Vm::fpuGetLog102()>:
c001a850:	83 ec 18             	sub    esp,0x18
c001a853:	68 a1 6f 02 c0       	push   0xc0026fa1
c001a858:	e8 cc a9 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a85d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a862:	31 d2                	xor    edx,edx
c001a864:	83 c4 1c             	add    esp,0x1c
c001a867:	c3                   	ret    

c001a868 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a86c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a874:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a878:	0f 92 c0             	setb   al
c001a87b:	c3                   	ret    

c001a87c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a87c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a884:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a888:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a88c:	09 c2                	or     edx,eax
c001a88e:	0f 94 c0             	sete   al
c001a891:	c3                   	ret    

c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a892:	57                   	push   edi
c001a893:	56                   	push   esi
c001a894:	53                   	push   ebx
c001a895:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a899:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a89d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a8a5:	57                   	push   edi
c001a8a6:	56                   	push   esi
c001a8a7:	53                   	push   ebx
c001a8a8:	51                   	push   ecx
c001a8a9:	e8 ce ff ff ff       	call   c001a87c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	88 c2                	mov    dl,al
c001a8b3:	31 c0                	xor    eax,eax
c001a8b5:	84 d2                	test   dl,dl
c001a8b7:	75 0f                	jne    c001a8c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a8b9:	57                   	push   edi
c001a8ba:	56                   	push   esi
c001a8bb:	53                   	push   ebx
c001a8bc:	51                   	push   ecx
c001a8bd:	e8 a6 ff ff ff       	call   c001a868 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a8c2:	83 c4 10             	add    esp,0x10
c001a8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c8:	83 e0 01             	and    eax,0x1
c001a8cb:	5b                   	pop    ebx
c001a8cc:	88 c1                	mov    cl,al
c001a8ce:	83 e2 01             	and    edx,0x1
c001a8d1:	a0 01 a2 02 c0       	mov    al,ds:0xc002a201
c001a8d6:	c1 e2 06             	shl    edx,0x6
c001a8d9:	83 e0 ba             	and    eax,0xffffffba
c001a8dc:	5e                   	pop    esi
c001a8dd:	09 c8                	or     eax,ecx
c001a8df:	5f                   	pop    edi
c001a8e0:	09 d0                	or     eax,edx
c001a8e2:	a2 01 a2 02 c0       	mov    ds:0xc002a201,al
c001a8e7:	c3                   	ret    

c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a8e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8f0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a8f4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a8f8:	c3                   	ret    

c001a8f9 <Vm::fpuAbs(unsigned long long)>:
c001a8f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a901:	c3                   	ret    

c001a902 <Vm::fpuChs(unsigned long long)>:
c001a902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a90a:	f7 d8                	neg    eax
c001a90c:	83 d2 00             	adc    edx,0x0
c001a90f:	f7 da                	neg    edx
c001a911:	c3                   	ret    

c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a912:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a916:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a91b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a91f:	eb c7                	jmp    c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a921:	53                   	push   ebx
c001a922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a92a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a92e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a932:	0f af ca             	imul   ecx,edx
c001a935:	0f af d8             	imul   ebx,eax
c001a938:	f7 e2                	mul    edx
c001a93a:	01 d9                	add    ecx,ebx
c001a93c:	5b                   	pop    ebx
c001a93d:	01 ca                	add    edx,ecx
c001a93f:	c3                   	ret    

c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a940:	83 ec 0c             	sub    esp,0xc
c001a943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a94b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a94f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a953:	e8 b8 86 00 00       	call   c0023010 <__udivdi3>
c001a958:	83 c4 1c             	add    esp,0x1c
c001a95b:	c3                   	ret    

c001a95c <Vm::fpuSquare(unsigned long long)>:
c001a95c:	50                   	push   eax
c001a95d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a961:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a965:	52                   	push   edx
c001a966:	50                   	push   eax
c001a967:	52                   	push   edx
c001a968:	50                   	push   eax
c001a969:	e8 b3 ff ff ff       	call   c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a96e:	83 c4 14             	add    esp,0x14
c001a971:	c3                   	ret    

c001a972 <Vm::fpuGetReg(int)>:
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a97a:	76 10                	jbe    c001a98c <Vm::fpuGetReg(int)+0x1a>
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	68 ae 6f 02 c0       	push   0xc0026fae
c001a984:	e8 a0 a8 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	a0 01 a2 02 c0       	mov    al,ds:0xc002a201
c001a991:	b9 08 00 00 00       	mov    ecx,0x8
c001a996:	c0 e8 03             	shr    al,0x3
c001a999:	83 e0 07             	and    eax,0x7
c001a99c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a9a0:	99                   	cdq    
c001a9a1:	f7 f9                	idiv   ecx
c001a9a3:	8b 04 d5 04 a2 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5dfc]
c001a9aa:	8b 14 d5 08 a2 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5df8]
c001a9b1:	83 c4 0c             	add    esp,0xc
c001a9b4:	c3                   	ret    

c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>:
c001a9b5:	57                   	push   edi
c001a9b6:	56                   	push   esi
c001a9b7:	52                   	push   edx
c001a9b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9c0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a9c5:	76 11                	jbe    c001a9d8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	68 c1 6f 02 c0       	push   0xc0026fc1
c001a9cf:	e8 55 a8 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001a9d4:	83 c4 10             	add    esp,0x10
c001a9d7:	90                   	nop
c001a9d8:	a0 01 a2 02 c0       	mov    al,ds:0xc002a201
c001a9dd:	b9 08 00 00 00       	mov    ecx,0x8
c001a9e2:	c0 e8 03             	shr    al,0x3
c001a9e5:	83 e0 07             	and    eax,0x7
c001a9e8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a9ec:	99                   	cdq    
c001a9ed:	f7 f9                	idiv   ecx
c001a9ef:	89 34 d5 04 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5dfc],esi
c001a9f6:	89 3c d5 08 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5df8],edi
c001a9fd:	58                   	pop    eax
c001a9fe:	5e                   	pop    esi
c001a9ff:	5f                   	pop    edi
c001aa00:	c3                   	ret    

c001aa01 <Vm::fpuPush(unsigned long long)>:
c001aa01:	a0 01 a2 02 c0       	mov    al,ds:0xc002a201
c001aa06:	c0 e8 03             	shr    al,0x3
c001aa09:	83 e0 07             	and    eax,0x7
c001aa0c:	83 c0 07             	add    eax,0x7
c001aa0f:	88 c2                	mov    dl,al
c001aa11:	83 e0 07             	and    eax,0x7
c001aa14:	83 e2 07             	and    edx,0x7
c001aa17:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001aa1e:	8a 15 01 a2 02 c0    	mov    dl,BYTE PTR ds:0xc002a201
c001aa24:	83 e2 c7             	and    edx,0xffffffc7
c001aa27:	09 ca                	or     edx,ecx
c001aa29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aa2d:	88 15 01 a2 02 c0    	mov    BYTE PTR ds:0xc002a201,dl
c001aa33:	89 0c c5 08 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5df8],ecx
c001aa3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa3e:	89 14 c5 04 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5dfc],edx
c001aa45:	a1 44 a2 02 c0       	mov    eax,ds:0xc002a244
c001aa4a:	83 f8 08             	cmp    eax,0x8
c001aa4d:	75 09                	jne    c001aa58 <Vm::fpuPush(unsigned long long)+0x57>
c001aa4f:	80 0d 00 a2 02 c0 40 	or     BYTE PTR ds:0xc002a200,0x40
c001aa56:	c3                   	ret    
c001aa57:	90                   	nop
c001aa58:	40                   	inc    eax
c001aa59:	a3 44 a2 02 c0       	mov    ds:0xc002a244,eax
c001aa5e:	c3                   	ret    

c001aa5f <Vm::fpuPop()>:
c001aa5f:	8a 0d 01 a2 02 c0    	mov    cl,BYTE PTR ds:0xc002a201
c001aa65:	53                   	push   ebx
c001aa66:	c0 e9 03             	shr    cl,0x3
c001aa69:	8a 1d 01 a2 02 c0    	mov    bl,BYTE PTR ds:0xc002a201
c001aa6f:	83 e1 07             	and    ecx,0x7
c001aa72:	83 e3 c7             	and    ebx,0xffffffc7
c001aa75:	8b 04 cd 04 a2 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5dfc]
c001aa7c:	8b 14 cd 08 a2 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5df8]
c001aa83:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aa8a:	83 e1 38             	and    ecx,0x38
c001aa8d:	09 d9                	or     ecx,ebx
c001aa8f:	88 0d 01 a2 02 c0    	mov    BYTE PTR ds:0xc002a201,cl
c001aa95:	8b 0d 44 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a244
c001aa9b:	85 c9                	test   ecx,ecx
c001aa9d:	74 09                	je     c001aaa8 <Vm::fpuPop()+0x49>
c001aa9f:	49                   	dec    ecx
c001aaa0:	89 0d 44 a2 02 c0    	mov    DWORD PTR ds:0xc002a244,ecx
c001aaa6:	eb 08                	jmp    c001aab0 <Vm::fpuPop()+0x51>
c001aaa8:	80 0d 00 a2 02 c0 40 	or     BYTE PTR ds:0xc002a200,0x40
c001aaaf:	90                   	nop
c001aab0:	5b                   	pop    ebx
c001aab1:	c3                   	ret    

c001aab2 <Vm::x87Handler(regs*)>:
c001aab2:	55                   	push   ebp
c001aab3:	57                   	push   edi
c001aab4:	56                   	push   esi
c001aab5:	53                   	push   ebx
c001aab6:	83 ec 1c             	sub    esp,0x1c
c001aab9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aabd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aac2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aac5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aacd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aad1:	50                   	push   eax
c001aad2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aad6:	50                   	push   eax
c001aad7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aadb:	50                   	push   eax
c001aadc:	53                   	push   ebx
c001aadd:	e8 60 9e ff ff       	call   c0014942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aae2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	89 c6                	mov    esi,eax
c001aaea:	80 fa d9             	cmp    dl,0xd9
c001aaed:	0f 85 79 01 00 00    	jne    c001ac6c <Vm::x87Handler(regs*)+0x1ba>
c001aaf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aaf7:	8d 50 20             	lea    edx,[eax+0x20]
c001aafa:	80 fa 0e             	cmp    dl,0xe
c001aafd:	0f 87 a5 00 00 00    	ja     c001aba8 <Vm::x87Handler(regs*)+0xf6>
c001ab03:	0f b6 d2             	movzx  edx,dl
c001ab06:	ff 24 95 d4 6f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd902c]
c001ab0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab10:	e8 de fc ff ff       	call   c001a7f3 <Vm::fpuGet0()>
c001ab15:	eb 09                	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001ab17:	90                   	nop
c001ab18:	e8 db fc ff ff       	call   c001a7f8 <Vm::fpuGet1()>
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	57                   	push   edi
c001ab21:	57                   	push   edi
c001ab22:	66 90                	xchg   ax,ax
c001ab24:	52                   	push   edx
c001ab25:	50                   	push   eax
c001ab26:	e8 d6 fe ff ff       	call   c001aa01 <Vm::fpuPush(unsigned long long)>
c001ab2b:	90                   	nop
c001ab2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	90                   	nop
c001ab34:	b0 01                	mov    al,0x1
c001ab36:	e9 89 0a 00 00       	jmp    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001ab3b:	90                   	nop
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	6a 00                	push   0x0
c001ab41:	e8 2c fe ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ab46:	59                   	pop    ecx
c001ab47:	5e                   	pop    esi
c001ab48:	52                   	push   edx
c001ab49:	50                   	push   eax
c001ab4a:	e8 b3 fd ff ff       	call   c001a902 <Vm::fpuChs(unsigned long long)>
c001ab4f:	eb 17                	jmp    c001ab68 <Vm::x87Handler(regs*)+0xb6>
c001ab51:	8d 76 00             	lea    esi,[esi+0x0]
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	6a 00                	push   0x0
c001ab59:	e8 14 fe ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ab5e:	5f                   	pop    edi
c001ab5f:	5d                   	pop    ebp
c001ab60:	52                   	push   edx
c001ab61:	50                   	push   eax
c001ab62:	e8 92 fd ff ff       	call   c001a8f9 <Vm::fpuAbs(unsigned long long)>
c001ab67:	90                   	nop
c001ab68:	83 c4 0c             	add    esp,0xc
c001ab6b:	90                   	nop
c001ab6c:	52                   	push   edx
c001ab6d:	50                   	push   eax
c001ab6e:	66 90                	xchg   ax,ax
c001ab70:	6a 00                	push   0x0
c001ab72:	66 90                	xchg   ax,ax
c001ab74:	e8 3c fe ff ff       	call   c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>
c001ab79:	eb b1                	jmp    c001ab2c <Vm::x87Handler(regs*)+0x7a>
c001ab7b:	90                   	nop
c001ab7c:	e8 b7 fc ff ff       	call   c001a838 <Vm::fpuGetLog210()>
c001ab81:	eb 9d                	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001ab83:	90                   	nop
c001ab84:	e8 7f fc ff ff       	call   c001a808 <Vm::fpuGetLog2E()>
c001ab89:	eb 95                	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001ab8b:	90                   	nop
c001ab8c:	e8 6f fc ff ff       	call   c001a800 <Vm::fpuGetPi()>
c001ab91:	eb 8d                	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001ab93:	90                   	nop
c001ab94:	e8 b7 fc ff ff       	call   c001a850 <Vm::fpuGetLog102()>
c001ab99:	eb 85                	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001ab9b:	90                   	nop
c001ab9c:	e8 7f fc ff ff       	call   c001a820 <Vm::fpuGetLogE2()>
c001aba1:	e9 7a ff ff ff       	jmp    c001ab20 <Vm::x87Handler(regs*)+0x6e>
c001aba6:	66 90                	xchg   ax,ax
c001aba8:	8d 50 40             	lea    edx,[eax+0x40]
c001abab:	80 fa 07             	cmp    dl,0x7
c001abae:	77 18                	ja     c001abc8 <Vm::x87Handler(regs*)+0x116>
c001abb0:	83 ec 0c             	sub    esp,0xc
c001abb3:	2d c0 00 00 00       	sub    eax,0xc0
c001abb8:	50                   	push   eax
c001abb9:	e8 b4 fd ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001abbe:	59                   	pop    ecx
c001abbf:	5e                   	pop    esi
c001abc0:	e9 5f ff ff ff       	jmp    c001ab24 <Vm::x87Handler(regs*)+0x72>
c001abc5:	8d 76 00             	lea    esi,[esi+0x0]
c001abc8:	8d 50 38             	lea    edx,[eax+0x38]
c001abcb:	80 fa 07             	cmp    dl,0x7
c001abce:	77 3c                	ja     c001ac0c <Vm::x87Handler(regs*)+0x15a>
c001abd0:	83 ec 0c             	sub    esp,0xc
c001abd3:	2d c8 00 00 00       	sub    eax,0xc8
c001abd8:	50                   	push   eax
c001abd9:	e8 94 fd ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001abde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abe5:	89 c6                	mov    esi,eax
c001abe7:	89 d7                	mov    edi,edx
c001abe9:	e8 84 fd ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001abee:	83 c4 0c             	add    esp,0xc
c001abf1:	52                   	push   edx
c001abf2:	50                   	push   eax
c001abf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abf7:	2d c8 00 00 00       	sub    eax,0xc8
c001abfc:	50                   	push   eax
c001abfd:	e8 b3 fd ff ff       	call   c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>
c001ac02:	83 c4 0c             	add    esp,0xc
c001ac05:	57                   	push   edi
c001ac06:	56                   	push   esi
c001ac07:	e9 64 ff ff ff       	jmp    c001ab70 <Vm::x87Handler(regs*)+0xbe>
c001ac0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac10:	84 d2                	test   dl,dl
c001ac12:	75 10                	jne    c001ac24 <Vm::x87Handler(regs*)+0x172>
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	ff 36                	push   DWORD PTR [esi]
c001ac19:	e8 8d fa ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001ac1e:	e9 c9 00 00 00       	jmp    c001acec <Vm::x87Handler(regs*)+0x23a>
c001ac23:	90                   	nop
c001ac24:	80 fa 03             	cmp    dl,0x3
c001ac27:	75 13                	jne    c001ac3c <Vm::x87Handler(regs*)+0x18a>
c001ac29:	e8 31 fe ff ff       	call   c001aa5f <Vm::fpuPop()>
c001ac2e:	55                   	push   ebp
c001ac2f:	55                   	push   ebp
c001ac30:	52                   	push   edx
c001ac31:	50                   	push   eax
c001ac32:	e8 0d fa ff ff       	call   c001a644 <Vm::fpuInternalTo32(unsigned long long)>
c001ac37:	e9 90 00 00 00       	jmp    c001accc <Vm::x87Handler(regs*)+0x21a>
c001ac3c:	80 fa 05             	cmp    dl,0x5
c001ac3f:	75 0f                	jne    c001ac50 <Vm::x87Handler(regs*)+0x19e>
c001ac41:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac44:	66 a3 02 a2 02 c0    	mov    ds:0xc002a202,ax
c001ac4a:	e9 ed 00 00 00       	jmp    c001ad3c <Vm::x87Handler(regs*)+0x28a>
c001ac4f:	90                   	nop
c001ac50:	31 c0                	xor    eax,eax
c001ac52:	80 fa 07             	cmp    dl,0x7
c001ac55:	0f 85 69 09 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001ac5b:	66 a1 02 a2 02 c0    	mov    ax,ds:0xc002a202
c001ac61:	66 89 06             	mov    WORD PTR [esi],ax
c001ac64:	e9 d3 00 00 00       	jmp    c001ad3c <Vm::x87Handler(regs*)+0x28a>
c001ac69:	8d 76 00             	lea    esi,[esi+0x0]
c001ac6c:	80 fa d8             	cmp    dl,0xd8
c001ac6f:	0f 84 d3 00 00 00    	je     c001ad48 <Vm::x87Handler(regs*)+0x296>
c001ac75:	80 fa dc             	cmp    dl,0xdc
c001ac78:	0f 84 2a 02 00 00    	je     c001aea8 <Vm::x87Handler(regs*)+0x3f6>
c001ac7e:	80 fa de             	cmp    dl,0xde
c001ac81:	0f 84 f1 02 00 00    	je     c001af78 <Vm::x87Handler(regs*)+0x4c6>
c001ac87:	80 fa dd             	cmp    dl,0xdd
c001ac8a:	0f 84 94 04 00 00    	je     c001b124 <Vm::x87Handler(regs*)+0x672>
c001ac90:	80 fa da             	cmp    dl,0xda
c001ac93:	0f 84 5f 05 00 00    	je     c001b1f8 <Vm::x87Handler(regs*)+0x746>
c001ac99:	80 fa df             	cmp    dl,0xdf
c001ac9c:	0f 84 aa 05 00 00    	je     c001b24c <Vm::x87Handler(regs*)+0x79a>
c001aca2:	31 c0                	xor    eax,eax
c001aca4:	80 fa db             	cmp    dl,0xdb
c001aca7:	0f 85 17 09 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001acad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001acb1:	80 fa 03             	cmp    dl,0x3
c001acb4:	0f 85 c2 06 00 00    	jne    c001b37c <Vm::x87Handler(regs*)+0x8ca>
c001acba:	e8 a0 fd ff ff       	call   c001aa5f <Vm::fpuPop()>
c001acbf:	55                   	push   ebp
c001acc0:	55                   	push   ebp
c001acc1:	8d 76 00             	lea    esi,[esi+0x0]
c001acc4:	52                   	push   edx
c001acc5:	50                   	push   eax
c001acc6:	e8 2e fa ff ff       	call   c001a6f9 <Vm::fpuFloatToLong(unsigned long long)>
c001accb:	90                   	nop
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	89 06                	mov    DWORD PTR [esi],eax
c001acd1:	eb 69                	jmp    c001ad3c <Vm::x87Handler(regs*)+0x28a>
c001acd3:	90                   	nop
c001acd4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001acd8:	84 d2                	test   dl,dl
c001acda:	0f 85 2c 06 00 00    	jne    c001b30c <Vm::x87Handler(regs*)+0x85a>
c001ace0:	57                   	push   edi
c001ace1:	57                   	push   edi
c001ace2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ace5:	ff 36                	push   DWORD PTR [esi]
c001ace7:	e8 04 fa ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001acec:	5e                   	pop    esi
c001aced:	5f                   	pop    edi
c001acee:	52                   	push   edx
c001acef:	50                   	push   eax
c001acf0:	e8 0c fd ff ff       	call   c001aa01 <Vm::fpuPush(unsigned long long)>
c001acf5:	8d 76 00             	lea    esi,[esi+0x0]
c001acf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acfc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001acff:	e9 2c fe ff ff       	jmp    c001ab30 <Vm::x87Handler(regs*)+0x7e>
c001ad04:	80 fa 03             	cmp    dl,0x3
c001ad07:	0f 85 2b 07 00 00    	jne    c001b438 <Vm::x87Handler(regs*)+0x986>
c001ad0d:	57                   	push   edi
c001ad0e:	57                   	push   edi
c001ad0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ad12:	ff 36                	push   DWORD PTR [esi]
c001ad14:	e8 d7 f9 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001ad19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad20:	89 c6                	mov    esi,eax
c001ad22:	89 d7                	mov    edi,edx
c001ad24:	e8 49 fc ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ad29:	57                   	push   edi
c001ad2a:	56                   	push   esi
c001ad2b:	52                   	push   edx
c001ad2c:	50                   	push   eax
c001ad2d:	e8 60 fb ff ff       	call   c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ad32:	83 c4 20             	add    esp,0x20
c001ad35:	e8 25 fd ff ff       	call   c001aa5f <Vm::fpuPop()>
c001ad3a:	66 90                	xchg   ax,ax
c001ad3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad40:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ad43:	e9 ec fd ff ff       	jmp    c001ab34 <Vm::x87Handler(regs*)+0x82>
c001ad48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad4c:	8d 50 40             	lea    edx,[eax+0x40]
c001ad4f:	80 fa 07             	cmp    dl,0x7
c001ad52:	77 2c                	ja     c001ad80 <Vm::x87Handler(regs*)+0x2ce>
c001ad54:	83 ec 0c             	sub    esp,0xc
c001ad57:	2d c0 00 00 00       	sub    eax,0xc0
c001ad5c:	50                   	push   eax
c001ad5d:	e8 10 fc ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ad62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad69:	89 c6                	mov    esi,eax
c001ad6b:	89 d7                	mov    edi,edx
c001ad6d:	e8 00 fc ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ad72:	57                   	push   edi
c001ad73:	56                   	push   esi
c001ad74:	52                   	push   edx
c001ad75:	50                   	push   eax
c001ad76:	e8 6d fb ff ff       	call   c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad7b:	eb 33                	jmp    c001adb0 <Vm::x87Handler(regs*)+0x2fe>
c001ad7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad80:	8d 50 38             	lea    edx,[eax+0x38]
c001ad83:	80 fa 07             	cmp    dl,0x7
c001ad86:	77 30                	ja     c001adb8 <Vm::x87Handler(regs*)+0x306>
c001ad88:	83 ec 0c             	sub    esp,0xc
c001ad8b:	2d c8 00 00 00       	sub    eax,0xc8
c001ad90:	50                   	push   eax
c001ad91:	e8 dc fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ad96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad9d:	89 c6                	mov    esi,eax
c001ad9f:	89 d7                	mov    edi,edx
c001ada1:	e8 cc fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ada6:	57                   	push   edi
c001ada7:	56                   	push   esi
c001ada8:	52                   	push   edx
c001ada9:	50                   	push   eax
c001adaa:	e8 72 fb ff ff       	call   c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001adaf:	90                   	nop
c001adb0:	83 c4 1c             	add    esp,0x1c
c001adb3:	e9 b4 fd ff ff       	jmp    c001ab6c <Vm::x87Handler(regs*)+0xba>
c001adb8:	8d 50 30             	lea    edx,[eax+0x30]
c001adbb:	80 fa 07             	cmp    dl,0x7
c001adbe:	77 10                	ja     c001add0 <Vm::x87Handler(regs*)+0x31e>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	2d d0 00 00 00       	sub    eax,0xd0
c001adc8:	e9 c3 03 00 00       	jmp    c001b190 <Vm::x87Handler(regs*)+0x6de>
c001adcd:	8d 76 00             	lea    esi,[esi+0x0]
c001add0:	8d 50 28             	lea    edx,[eax+0x28]
c001add3:	80 fa 07             	cmp    dl,0x7
c001add6:	77 10                	ja     c001ade8 <Vm::x87Handler(regs*)+0x336>
c001add8:	83 ec 0c             	sub    esp,0xc
c001addb:	2d d8 00 00 00       	sub    eax,0xd8
c001ade0:	e9 e7 03 00 00       	jmp    c001b1cc <Vm::x87Handler(regs*)+0x71a>
c001ade5:	8d 76 00             	lea    esi,[esi+0x0]
c001ade8:	8d 50 20             	lea    edx,[eax+0x20]
c001adeb:	80 fa 07             	cmp    dl,0x7
c001adee:	77 1c                	ja     c001ae0c <Vm::x87Handler(regs*)+0x35a>
c001adf0:	83 ec 0c             	sub    esp,0xc
c001adf3:	2d e0 00 00 00       	sub    eax,0xe0
c001adf8:	50                   	push   eax
c001adf9:	e8 74 fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001adfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae05:	89 c6                	mov    esi,eax
c001ae07:	89 d7                	mov    edi,edx
c001ae09:	eb 25                	jmp    c001ae30 <Vm::x87Handler(regs*)+0x37e>
c001ae0b:	90                   	nop
c001ae0c:	8d 50 18             	lea    edx,[eax+0x18]
c001ae0f:	80 fa 07             	cmp    dl,0x7
c001ae12:	77 30                	ja     c001ae44 <Vm::x87Handler(regs*)+0x392>
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	6a 00                	push   0x0
c001ae19:	e8 54 fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ae1e:	89 c6                	mov    esi,eax
c001ae20:	89 d7                	mov    edi,edx
c001ae22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae26:	2d e8 00 00 00       	sub    eax,0xe8
c001ae2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae2e:	66 90                	xchg   ax,ax
c001ae30:	e8 3d fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ae35:	57                   	push   edi
c001ae36:	56                   	push   esi
c001ae37:	52                   	push   edx
c001ae38:	50                   	push   eax
c001ae39:	e8 d4 fa ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ae3e:	e9 6d ff ff ff       	jmp    c001adb0 <Vm::x87Handler(regs*)+0x2fe>
c001ae43:	90                   	nop
c001ae44:	8d 50 10             	lea    edx,[eax+0x10]
c001ae47:	80 fa 07             	cmp    dl,0x7
c001ae4a:	77 1c                	ja     c001ae68 <Vm::x87Handler(regs*)+0x3b6>
c001ae4c:	83 ec 0c             	sub    esp,0xc
c001ae4f:	2d f0 00 00 00       	sub    eax,0xf0
c001ae54:	50                   	push   eax
c001ae55:	e8 18 fb ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ae5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae61:	89 c6                	mov    esi,eax
c001ae63:	89 d7                	mov    edi,edx
c001ae65:	eb 25                	jmp    c001ae8c <Vm::x87Handler(regs*)+0x3da>
c001ae67:	90                   	nop
c001ae68:	3c f7                	cmp    al,0xf7
c001ae6a:	0f 86 00 04 00 00    	jbe    c001b270 <Vm::x87Handler(regs*)+0x7be>
c001ae70:	83 ec 0c             	sub    esp,0xc
c001ae73:	6a 00                	push   0x0
c001ae75:	e8 f8 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ae7a:	89 c6                	mov    esi,eax
c001ae7c:	89 d7                	mov    edi,edx
c001ae7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae82:	2d f8 00 00 00       	sub    eax,0xf8
c001ae87:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae8a:	66 90                	xchg   ax,ax
c001ae8c:	e8 e1 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001ae91:	57                   	push   edi
c001ae92:	56                   	push   esi
c001ae93:	52                   	push   edx
c001ae94:	50                   	push   eax
c001ae95:	e8 a6 fa ff ff       	call   c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae9a:	83 c4 1c             	add    esp,0x1c
c001ae9d:	52                   	push   edx
c001ae9e:	50                   	push   eax
c001ae9f:	6a 00                	push   0x0
c001aea1:	e9 6a 02 00 00       	jmp    c001b110 <Vm::x87Handler(regs*)+0x65e>
c001aea6:	66 90                	xchg   ax,ax
c001aea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aeac:	8d 50 40             	lea    edx,[eax+0x40]
c001aeaf:	80 fa 07             	cmp    dl,0x7
c001aeb2:	77 38                	ja     c001aeec <Vm::x87Handler(regs*)+0x43a>
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	2d c0 00 00 00       	sub    eax,0xc0
c001aebc:	50                   	push   eax
c001aebd:	e8 b0 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001aec2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aec9:	89 c6                	mov    esi,eax
c001aecb:	89 d7                	mov    edi,edx
c001aecd:	e8 a0 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001aed2:	57                   	push   edi
c001aed3:	56                   	push   esi
c001aed4:	52                   	push   edx
c001aed5:	50                   	push   eax
c001aed6:	e8 0d fa ff ff       	call   c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aedb:	83 c4 1c             	add    esp,0x1c
c001aede:	52                   	push   edx
c001aedf:	50                   	push   eax
c001aee0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aee4:	2d c0 00 00 00       	sub    eax,0xc0
c001aee9:	eb 41                	jmp    c001af2c <Vm::x87Handler(regs*)+0x47a>
c001aeeb:	90                   	nop
c001aeec:	8d 50 38             	lea    edx,[eax+0x38]
c001aeef:	80 fa 07             	cmp    dl,0x7
c001aef2:	77 40                	ja     c001af34 <Vm::x87Handler(regs*)+0x482>
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	2d c8 00 00 00       	sub    eax,0xc8
c001aefc:	50                   	push   eax
c001aefd:	e8 70 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001af02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af09:	89 c6                	mov    esi,eax
c001af0b:	89 d7                	mov    edi,edx
c001af0d:	e8 60 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001af12:	57                   	push   edi
c001af13:	56                   	push   esi
c001af14:	52                   	push   edx
c001af15:	50                   	push   eax
c001af16:	e8 06 fa ff ff       	call   c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001af1b:	83 c4 1c             	add    esp,0x1c
c001af1e:	52                   	push   edx
c001af1f:	50                   	push   eax
c001af20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af24:	2d c8 00 00 00       	sub    eax,0xc8
c001af29:	8d 76 00             	lea    esi,[esi+0x0]
c001af2c:	50                   	push   eax
c001af2d:	e9 42 fc ff ff       	jmp    c001ab74 <Vm::x87Handler(regs*)+0xc2>
c001af32:	66 90                	xchg   ax,ax
c001af34:	83 c0 18             	add    eax,0x18
c001af37:	3c 07                	cmp    al,0x7
c001af39:	0f 87 6d 04 00 00    	ja     c001b3ac <Vm::x87Handler(regs*)+0x8fa>
c001af3f:	83 ec 0c             	sub    esp,0xc
c001af42:	6a 00                	push   0x0
c001af44:	e8 29 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001af49:	89 c6                	mov    esi,eax
c001af4b:	89 d7                	mov    edi,edx
c001af4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af51:	2d e8 00 00 00       	sub    eax,0xe8
c001af56:	89 04 24             	mov    DWORD PTR [esp],eax
c001af59:	e8 14 fa ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001af5e:	57                   	push   edi
c001af5f:	56                   	push   esi
c001af60:	52                   	push   edx
c001af61:	50                   	push   eax
c001af62:	e8 ab f9 ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af67:	83 c4 1c             	add    esp,0x1c
c001af6a:	52                   	push   edx
c001af6b:	50                   	push   eax
c001af6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af70:	2d e8 00 00 00       	sub    eax,0xe8
c001af75:	eb b5                	jmp    c001af2c <Vm::x87Handler(regs*)+0x47a>
c001af77:	90                   	nop
c001af78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af7c:	8d 50 40             	lea    edx,[eax+0x40]
c001af7f:	80 fa 07             	cmp    dl,0x7
c001af82:	77 3c                	ja     c001afc0 <Vm::x87Handler(regs*)+0x50e>
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	2d c0 00 00 00       	sub    eax,0xc0
c001af8c:	50                   	push   eax
c001af8d:	e8 e0 f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001af92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af99:	89 c6                	mov    esi,eax
c001af9b:	89 d7                	mov    edi,edx
c001af9d:	e8 d0 f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001afa2:	57                   	push   edi
c001afa3:	56                   	push   esi
c001afa4:	52                   	push   edx
c001afa5:	50                   	push   eax
c001afa6:	e8 3d f9 ff ff       	call   c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001afab:	83 c4 1c             	add    esp,0x1c
c001afae:	52                   	push   edx
c001afaf:	50                   	push   eax
c001afb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afb4:	2d c0 00 00 00       	sub    eax,0xc0
c001afb9:	e9 b2 01 00 00       	jmp    c001b170 <Vm::x87Handler(regs*)+0x6be>
c001afbe:	66 90                	xchg   ax,ax
c001afc0:	8d 50 20             	lea    edx,[eax+0x20]
c001afc3:	80 fa 07             	cmp    dl,0x7
c001afc6:	77 3c                	ja     c001b004 <Vm::x87Handler(regs*)+0x552>
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	2d e0 00 00 00       	sub    eax,0xe0
c001afd0:	50                   	push   eax
c001afd1:	e8 9c f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001afd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afdd:	89 c6                	mov    esi,eax
c001afdf:	89 d7                	mov    edi,edx
c001afe1:	e8 8c f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001afe6:	57                   	push   edi
c001afe7:	56                   	push   esi
c001afe8:	52                   	push   edx
c001afe9:	50                   	push   eax
c001afea:	e8 23 f9 ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afef:	83 c4 1c             	add    esp,0x1c
c001aff2:	52                   	push   edx
c001aff3:	50                   	push   eax
c001aff4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aff8:	2d e0 00 00 00       	sub    eax,0xe0
c001affd:	e9 6e 01 00 00       	jmp    c001b170 <Vm::x87Handler(regs*)+0x6be>
c001b002:	66 90                	xchg   ax,ax
c001b004:	8d 50 18             	lea    edx,[eax+0x18]
c001b007:	80 fa 07             	cmp    dl,0x7
c001b00a:	77 3c                	ja     c001b048 <Vm::x87Handler(regs*)+0x596>
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	6a 00                	push   0x0
c001b011:	e8 5c f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b016:	89 c6                	mov    esi,eax
c001b018:	89 d7                	mov    edi,edx
c001b01a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b01e:	2d e8 00 00 00       	sub    eax,0xe8
c001b023:	89 04 24             	mov    DWORD PTR [esp],eax
c001b026:	e8 47 f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b02b:	57                   	push   edi
c001b02c:	56                   	push   esi
c001b02d:	52                   	push   edx
c001b02e:	50                   	push   eax
c001b02f:	e8 de f8 ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b034:	83 c4 1c             	add    esp,0x1c
c001b037:	52                   	push   edx
c001b038:	50                   	push   eax
c001b039:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b03d:	2d e8 00 00 00       	sub    eax,0xe8
c001b042:	e9 29 01 00 00       	jmp    c001b170 <Vm::x87Handler(regs*)+0x6be>
c001b047:	90                   	nop
c001b048:	8d 50 38             	lea    edx,[eax+0x38]
c001b04b:	80 fa 07             	cmp    dl,0x7
c001b04e:	77 3c                	ja     c001b08c <Vm::x87Handler(regs*)+0x5da>
c001b050:	83 ec 0c             	sub    esp,0xc
c001b053:	2d c8 00 00 00       	sub    eax,0xc8
c001b058:	50                   	push   eax
c001b059:	e8 14 f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b05e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b065:	89 c6                	mov    esi,eax
c001b067:	89 d7                	mov    edi,edx
c001b069:	e8 04 f9 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b06e:	57                   	push   edi
c001b06f:	56                   	push   esi
c001b070:	52                   	push   edx
c001b071:	50                   	push   eax
c001b072:	e8 aa f8 ff ff       	call   c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b077:	83 c4 1c             	add    esp,0x1c
c001b07a:	52                   	push   edx
c001b07b:	50                   	push   eax
c001b07c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b080:	2d c8 00 00 00       	sub    eax,0xc8
c001b085:	e9 82 00 00 00       	jmp    c001b10c <Vm::x87Handler(regs*)+0x65a>
c001b08a:	66 90                	xchg   ax,ax
c001b08c:	3c f7                	cmp    al,0xf7
c001b08e:	76 38                	jbe    c001b0c8 <Vm::x87Handler(regs*)+0x616>
c001b090:	83 ec 0c             	sub    esp,0xc
c001b093:	6a 00                	push   0x0
c001b095:	e8 d8 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b09a:	89 c6                	mov    esi,eax
c001b09c:	89 d7                	mov    edi,edx
c001b09e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0a2:	2d f8 00 00 00       	sub    eax,0xf8
c001b0a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0aa:	e8 c3 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b0af:	57                   	push   edi
c001b0b0:	56                   	push   esi
c001b0b1:	52                   	push   edx
c001b0b2:	50                   	push   eax
c001b0b3:	e8 88 f8 ff ff       	call   c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b0b8:	83 c4 1c             	add    esp,0x1c
c001b0bb:	52                   	push   edx
c001b0bc:	50                   	push   eax
c001b0bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0c1:	2d f8 00 00 00       	sub    eax,0xf8
c001b0c6:	eb 44                	jmp    c001b10c <Vm::x87Handler(regs*)+0x65a>
c001b0c8:	8d 50 10             	lea    edx,[eax+0x10]
c001b0cb:	80 fa 07             	cmp    dl,0x7
c001b0ce:	0f 87 6c 01 00 00    	ja     c001b240 <Vm::x87Handler(regs*)+0x78e>
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	2d f0 00 00 00       	sub    eax,0xf0
c001b0dc:	50                   	push   eax
c001b0dd:	e8 90 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b0e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b0e9:	89 c6                	mov    esi,eax
c001b0eb:	89 d7                	mov    edi,edx
c001b0ed:	e8 80 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b0f2:	57                   	push   edi
c001b0f3:	56                   	push   esi
c001b0f4:	52                   	push   edx
c001b0f5:	50                   	push   eax
c001b0f6:	e8 45 f8 ff ff       	call   c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b0fb:	83 c4 1c             	add    esp,0x1c
c001b0fe:	52                   	push   edx
c001b0ff:	50                   	push   eax
c001b100:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b104:	2d f0 00 00 00       	sub    eax,0xf0
c001b109:	8d 76 00             	lea    esi,[esi+0x0]
c001b10c:	50                   	push   eax
c001b10d:	8d 76 00             	lea    esi,[esi+0x0]
c001b110:	e8 a0 f8 ff ff       	call   c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>
c001b115:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b119:	e8 41 f9 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b11e:	e9 0d fa ff ff       	jmp    c001ab30 <Vm::x87Handler(regs*)+0x7e>
c001b123:	90                   	nop
c001b124:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b128:	8d 50 30             	lea    edx,[eax+0x30]
c001b12b:	80 fa 07             	cmp    dl,0x7
c001b12e:	77 20                	ja     c001b150 <Vm::x87Handler(regs*)+0x69e>
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	6a 00                	push   0x0
c001b135:	e8 38 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b13a:	83 c4 0c             	add    esp,0xc
c001b13d:	52                   	push   edx
c001b13e:	50                   	push   eax
c001b13f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b143:	2d d0 00 00 00       	sub    eax,0xd0
c001b148:	e9 df fd ff ff       	jmp    c001af2c <Vm::x87Handler(regs*)+0x47a>
c001b14d:	8d 76 00             	lea    esi,[esi+0x0]
c001b150:	8d 50 28             	lea    edx,[eax+0x28]
c001b153:	80 fa 07             	cmp    dl,0x7
c001b156:	77 28                	ja     c001b180 <Vm::x87Handler(regs*)+0x6ce>
c001b158:	83 ec 0c             	sub    esp,0xc
c001b15b:	6a 00                	push   0x0
c001b15d:	e8 10 f8 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b162:	83 c4 0c             	add    esp,0xc
c001b165:	52                   	push   edx
c001b166:	50                   	push   eax
c001b167:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b16b:	2d d8 00 00 00       	sub    eax,0xd8
c001b170:	50                   	push   eax
c001b171:	e8 3f f8 ff ff       	call   c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>
c001b176:	e8 e4 f8 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b17b:	e9 ac f9 ff ff       	jmp    c001ab2c <Vm::x87Handler(regs*)+0x7a>
c001b180:	8d 50 20             	lea    edx,[eax+0x20]
c001b183:	80 fa 07             	cmp    dl,0x7
c001b186:	77 30                	ja     c001b1b8 <Vm::x87Handler(regs*)+0x706>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	2d e0 00 00 00       	sub    eax,0xe0
c001b190:	50                   	push   eax
c001b191:	e8 dc f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b196:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b19d:	89 c6                	mov    esi,eax
c001b19f:	89 d7                	mov    edi,edx
c001b1a1:	e8 cc f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b1a6:	57                   	push   edi
c001b1a7:	56                   	push   esi
c001b1a8:	52                   	push   edx
c001b1a9:	50                   	push   eax
c001b1aa:	e8 e3 f6 ff ff       	call   c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1b3:	e9 78 02 00 00       	jmp    c001b430 <Vm::x87Handler(regs*)+0x97e>
c001b1b8:	8d 50 18             	lea    edx,[eax+0x18]
c001b1bb:	80 fa 07             	cmp    dl,0x7
c001b1be:	0f 87 10 fb ff ff    	ja     c001acd4 <Vm::x87Handler(regs*)+0x222>
c001b1c4:	83 ec 0c             	sub    esp,0xc
c001b1c7:	2d e8 00 00 00       	sub    eax,0xe8
c001b1cc:	50                   	push   eax
c001b1cd:	e8 a0 f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b1d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1d9:	89 c6                	mov    esi,eax
c001b1db:	89 d7                	mov    edi,edx
c001b1dd:	e8 90 f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b1e2:	57                   	push   edi
c001b1e3:	56                   	push   esi
c001b1e4:	52                   	push   edx
c001b1e5:	50                   	push   eax
c001b1e6:	e8 a7 f6 ff ff       	call   c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1eb:	83 c4 20             	add    esp,0x20
c001b1ee:	e8 6c f8 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b1f3:	eb 6f                	jmp    c001b264 <Vm::x87Handler(regs*)+0x7b2>
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b1fc:	0f 85 22 01 00 00    	jne    c001b324 <Vm::x87Handler(regs*)+0x872>
c001b202:	66 90                	xchg   ax,ax
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	6a 01                	push   0x1
c001b209:	e8 64 f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b20e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b215:	89 c6                	mov    esi,eax
c001b217:	89 d7                	mov    edi,edx
c001b219:	e8 54 f7 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b21e:	57                   	push   edi
c001b21f:	56                   	push   esi
c001b220:	52                   	push   edx
c001b221:	50                   	push   eax
c001b222:	e8 6b f6 ff ff       	call   c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b227:	83 c4 20             	add    esp,0x20
c001b22a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b22e:	e8 2c f8 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b233:	e8 27 f8 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b238:	e9 f7 f8 ff ff       	jmp    c001ab34 <Vm::x87Handler(regs*)+0x82>
c001b23d:	8d 76 00             	lea    esi,[esi+0x0]
c001b240:	3c d9                	cmp    al,0xd9
c001b242:	0f 85 e8 02 00 00    	jne    c001b530 <Vm::x87Handler(regs*)+0xa7e>
c001b248:	eb ba                	jmp    c001b204 <Vm::x87Handler(regs*)+0x752>
c001b24a:	66 90                	xchg   ax,ax
c001b24c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b250:	0f 85 2a 03 00 00    	jne    c001b580 <Vm::x87Handler(regs*)+0xace>
c001b256:	0f b7 05 00 a2 02 c0 	movzx  eax,WORD PTR ds:0xc002a200
c001b25d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b261:	8d 76 00             	lea    esi,[esi+0x0]
c001b264:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b268:	e9 c7 f8 ff ff       	jmp    c001ab34 <Vm::x87Handler(regs*)+0x82>
c001b26d:	8d 76 00             	lea    esi,[esi+0x0]
c001b270:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b274:	84 d2                	test   dl,dl
c001b276:	75 10                	jne    c001b288 <Vm::x87Handler(regs*)+0x7d6>
c001b278:	83 ec 0c             	sub    esp,0xc
c001b27b:	ff 36                	push   DWORD PTR [esi]
c001b27d:	e8 29 f4 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b282:	e9 39 01 00 00       	jmp    c001b3c0 <Vm::x87Handler(regs*)+0x90e>
c001b287:	90                   	nop
c001b288:	80 fa 01             	cmp    dl,0x1
c001b28b:	75 0f                	jne    c001b29c <Vm::x87Handler(regs*)+0x7ea>
c001b28d:	83 ec 0c             	sub    esp,0xc
c001b290:	ff 36                	push   DWORD PTR [esi]
c001b292:	e8 14 f4 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b297:	e9 b4 02 00 00       	jmp    c001b550 <Vm::x87Handler(regs*)+0xa9e>
c001b29c:	80 fa 04             	cmp    dl,0x4
c001b29f:	75 0f                	jne    c001b2b0 <Vm::x87Handler(regs*)+0x7fe>
c001b2a1:	83 ec 0c             	sub    esp,0xc
c001b2a4:	ff 36                	push   DWORD PTR [esi]
c001b2a6:	e8 00 f4 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b2ab:	e9 9c 01 00 00       	jmp    c001b44c <Vm::x87Handler(regs*)+0x99a>
c001b2b0:	80 fa 05             	cmp    dl,0x5
c001b2b3:	75 1b                	jne    c001b2d0 <Vm::x87Handler(regs*)+0x81e>
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	6a 00                	push   0x0
c001b2ba:	e8 b3 f6 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b2bf:	89 c7                	mov    edi,eax
c001b2c1:	89 d5                	mov    ebp,edx
c001b2c3:	58                   	pop    eax
c001b2c4:	ff 36                	push   DWORD PTR [esi]
c001b2c6:	e8 e0 f3 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b2cb:	e9 bc 01 00 00       	jmp    c001b48c <Vm::x87Handler(regs*)+0x9da>
c001b2d0:	80 fa 06             	cmp    dl,0x6
c001b2d3:	75 0f                	jne    c001b2e4 <Vm::x87Handler(regs*)+0x832>
c001b2d5:	83 ec 0c             	sub    esp,0xc
c001b2d8:	ff 36                	push   DWORD PTR [esi]
c001b2da:	e8 cc f3 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b2df:	e9 cc 01 00 00       	jmp    c001b4b0 <Vm::x87Handler(regs*)+0x9fe>
c001b2e4:	31 c0                	xor    eax,eax
c001b2e6:	80 fa 07             	cmp    dl,0x7
c001b2e9:	0f 85 d5 02 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b2ef:	83 ec 0c             	sub    esp,0xc
c001b2f2:	6a 00                	push   0x0
c001b2f4:	e8 79 f6 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b2f9:	89 c7                	mov    edi,eax
c001b2fb:	89 d5                	mov    ebp,edx
c001b2fd:	58                   	pop    eax
c001b2fe:	ff 36                	push   DWORD PTR [esi]
c001b300:	e8 a6 f3 ff ff       	call   c001a6ab <Vm::fpu32ToInternal(unsigned int)>
c001b305:	e9 ee 01 00 00       	jmp    c001b4f8 <Vm::x87Handler(regs*)+0xa46>
c001b30a:	66 90                	xchg   ax,ax
c001b30c:	80 fa 03             	cmp    dl,0x3
c001b30f:	0f 85 f7 01 00 00    	jne    c001b50c <Vm::x87Handler(regs*)+0xa5a>
c001b315:	e8 45 f7 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b31a:	51                   	push   ecx
c001b31b:	51                   	push   ecx
c001b31c:	e9 03 02 00 00       	jmp    c001b524 <Vm::x87Handler(regs*)+0xa72>
c001b321:	8d 76 00             	lea    esi,[esi+0x0]
c001b324:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b328:	80 fa 01             	cmp    dl,0x1
c001b32b:	75 0b                	jne    c001b338 <Vm::x87Handler(regs*)+0x886>
c001b32d:	57                   	push   edi
c001b32e:	57                   	push   edi
c001b32f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b331:	e9 0e 02 00 00       	jmp    c001b544 <Vm::x87Handler(regs*)+0xa92>
c001b336:	66 90                	xchg   ax,ax
c001b338:	80 fa 04             	cmp    dl,0x4
c001b33b:	75 13                	jne    c001b350 <Vm::x87Handler(regs*)+0x89e>
c001b33d:	31 d2                	xor    edx,edx
c001b33f:	51                   	push   ecx
c001b340:	51                   	push   ecx
c001b341:	8b 06                	mov    eax,DWORD PTR [esi]
c001b343:	52                   	push   edx
c001b344:	50                   	push   eax
c001b345:	e8 4a f4 ff ff       	call   c001a794 <Vm::fpuLongToFloat(long long)>
c001b34a:	e9 fd 00 00 00       	jmp    c001b44c <Vm::x87Handler(regs*)+0x99a>
c001b34f:	90                   	nop
c001b350:	31 c0                	xor    eax,eax
c001b352:	80 fa 07             	cmp    dl,0x7
c001b355:	0f 85 69 02 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b35b:	83 ec 0c             	sub    esp,0xc
c001b35e:	6a 00                	push   0x0
c001b360:	e8 0d f6 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b365:	89 c7                	mov    edi,eax
c001b367:	89 d5                	mov    ebp,edx
c001b369:	58                   	pop    eax
c001b36a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b36c:	5a                   	pop    edx
c001b36d:	31 d2                	xor    edx,edx
c001b36f:	52                   	push   edx
c001b370:	50                   	push   eax
c001b371:	e8 1e f4 ff ff       	call   c001a794 <Vm::fpuLongToFloat(long long)>
c001b376:	e9 7d 01 00 00       	jmp    c001b4f8 <Vm::x87Handler(regs*)+0xa46>
c001b37b:	90                   	nop
c001b37c:	84 d2                	test   dl,dl
c001b37e:	75 10                	jne    c001b390 <Vm::x87Handler(regs*)+0x8de>
c001b380:	31 d2                	xor    edx,edx
c001b382:	55                   	push   ebp
c001b383:	55                   	push   ebp
c001b384:	8b 06                	mov    eax,DWORD PTR [esi]
c001b386:	52                   	push   edx
c001b387:	50                   	push   eax
c001b388:	e9 03 02 00 00       	jmp    c001b590 <Vm::x87Handler(regs*)+0xade>
c001b38d:	8d 76 00             	lea    esi,[esi+0x0]
c001b390:	31 c0                	xor    eax,eax
c001b392:	80 fa 02             	cmp    dl,0x2
c001b395:	0f 85 29 02 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	6a 00                	push   0x0
c001b3a0:	e8 cd f5 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b3a5:	59                   	pop    ecx
c001b3a6:	5f                   	pop    edi
c001b3a7:	e9 18 f9 ff ff       	jmp    c001acc4 <Vm::x87Handler(regs*)+0x212>
c001b3ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b3b0:	84 d2                	test   dl,dl
c001b3b2:	75 2c                	jne    c001b3e0 <Vm::x87Handler(regs*)+0x92e>
c001b3b4:	50                   	push   eax
c001b3b5:	50                   	push   eax
c001b3b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3b9:	ff 36                	push   DWORD PTR [esi]
c001b3bb:	e8 30 f3 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b3c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3c7:	89 c6                	mov    esi,eax
c001b3c9:	89 d7                	mov    edi,edx
c001b3cb:	e8 a2 f5 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b3d0:	57                   	push   edi
c001b3d1:	56                   	push   esi
c001b3d2:	52                   	push   edx
c001b3d3:	50                   	push   eax
c001b3d4:	e8 0f f5 ff ff       	call   c001a8e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b3d9:	e9 8e 01 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xaba>
c001b3de:	66 90                	xchg   ax,ax
c001b3e0:	80 fa 01             	cmp    dl,0x1
c001b3e3:	75 13                	jne    c001b3f8 <Vm::x87Handler(regs*)+0x946>
c001b3e5:	50                   	push   eax
c001b3e6:	50                   	push   eax
c001b3e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3ea:	ff 36                	push   DWORD PTR [esi]
c001b3ec:	e8 ff f2 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b3f1:	e9 5a 01 00 00       	jmp    c001b550 <Vm::x87Handler(regs*)+0xa9e>
c001b3f6:	66 90                	xchg   ax,ax
c001b3f8:	80 fa 02             	cmp    dl,0x2
c001b3fb:	0f 85 03 f9 ff ff    	jne    c001ad04 <Vm::x87Handler(regs*)+0x252>
c001b401:	55                   	push   ebp
c001b402:	55                   	push   ebp
c001b403:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b406:	ff 36                	push   DWORD PTR [esi]
c001b408:	e8 e3 f2 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b40d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b414:	89 c6                	mov    esi,eax
c001b416:	89 d7                	mov    edi,edx
c001b418:	e8 55 f5 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b41d:	57                   	push   edi
c001b41e:	56                   	push   esi
c001b41f:	52                   	push   edx
c001b420:	50                   	push   eax
c001b421:	e8 6c f4 ff ff       	call   c001a892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b42a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b42d:	8d 76 00             	lea    esi,[esi+0x0]
c001b430:	83 c4 20             	add    esp,0x20
c001b433:	e9 fc f6 ff ff       	jmp    c001ab34 <Vm::x87Handler(regs*)+0x82>
c001b438:	80 fa 04             	cmp    dl,0x4
c001b43b:	75 2f                	jne    c001b46c <Vm::x87Handler(regs*)+0x9ba>
c001b43d:	51                   	push   ecx
c001b43e:	51                   	push   ecx
c001b43f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b442:	ff 36                	push   DWORD PTR [esi]
c001b444:	e8 a7 f2 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b449:	8d 76 00             	lea    esi,[esi+0x0]
c001b44c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b453:	89 c6                	mov    esi,eax
c001b455:	89 d7                	mov    edi,edx
c001b457:	e8 16 f5 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b45c:	57                   	push   edi
c001b45d:	56                   	push   esi
c001b45e:	52                   	push   edx
c001b45f:	50                   	push   eax
c001b460:	e8 ad f4 ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b465:	e9 02 01 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xaba>
c001b46a:	66 90                	xchg   ax,ax
c001b46c:	80 fa 05             	cmp    dl,0x5
c001b46f:	75 2b                	jne    c001b49c <Vm::x87Handler(regs*)+0x9ea>
c001b471:	83 ec 0c             	sub    esp,0xc
c001b474:	6a 00                	push   0x0
c001b476:	e8 f7 f4 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b47b:	89 c7                	mov    edi,eax
c001b47d:	89 d5                	mov    ebp,edx
c001b47f:	58                   	pop    eax
c001b480:	5a                   	pop    edx
c001b481:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b484:	ff 36                	push   DWORD PTR [esi]
c001b486:	e8 65 f2 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b48b:	90                   	nop
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	55                   	push   ebp
c001b490:	57                   	push   edi
c001b491:	52                   	push   edx
c001b492:	50                   	push   eax
c001b493:	e8 7a f4 ff ff       	call   c001a912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b498:	eb 6a                	jmp    c001b504 <Vm::x87Handler(regs*)+0xa52>
c001b49a:	66 90                	xchg   ax,ax
c001b49c:	80 fa 06             	cmp    dl,0x6
c001b49f:	75 2f                	jne    c001b4d0 <Vm::x87Handler(regs*)+0xa1e>
c001b4a1:	51                   	push   ecx
c001b4a2:	51                   	push   ecx
c001b4a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4a6:	ff 36                	push   DWORD PTR [esi]
c001b4a8:	e8 43 f2 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b4b7:	89 c6                	mov    esi,eax
c001b4b9:	89 d7                	mov    edi,edx
c001b4bb:	e8 b2 f4 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b4c0:	57                   	push   edi
c001b4c1:	56                   	push   esi
c001b4c2:	52                   	push   edx
c001b4c3:	50                   	push   eax
c001b4c4:	e8 77 f4 ff ff       	call   c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b4c9:	e9 9e 00 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xaba>
c001b4ce:	66 90                	xchg   ax,ax
c001b4d0:	31 c0                	xor    eax,eax
c001b4d2:	80 fa 07             	cmp    dl,0x7
c001b4d5:	0f 85 e9 00 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b4db:	83 ec 0c             	sub    esp,0xc
c001b4de:	6a 00                	push   0x0
c001b4e0:	e8 8d f4 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b4e5:	89 c7                	mov    edi,eax
c001b4e7:	89 d5                	mov    ebp,edx
c001b4e9:	58                   	pop    eax
c001b4ea:	5a                   	pop    edx
c001b4eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4ee:	ff 36                	push   DWORD PTR [esi]
c001b4f0:	e8 fb f1 ff ff       	call   c001a6f0 <Vm::fpu64ToInternal(unsigned long long)>
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	83 c4 10             	add    esp,0x10
c001b4fb:	55                   	push   ebp
c001b4fc:	57                   	push   edi
c001b4fd:	52                   	push   edx
c001b4fe:	50                   	push   eax
c001b4ff:	e8 3c f4 ff ff       	call   c001a940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b504:	83 c4 0c             	add    esp,0xc
c001b507:	eb 67                	jmp    c001b570 <Vm::x87Handler(regs*)+0xabe>
c001b509:	8d 76 00             	lea    esi,[esi+0x0]
c001b50c:	31 c0                	xor    eax,eax
c001b50e:	80 fa 02             	cmp    dl,0x2
c001b511:	0f 85 ad 00 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b517:	83 ec 0c             	sub    esp,0xc
c001b51a:	6a 00                	push   0x0
c001b51c:	e8 51 f4 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b521:	59                   	pop    ecx
c001b522:	5f                   	pop    edi
c001b523:	90                   	nop
c001b524:	52                   	push   edx
c001b525:	50                   	push   eax
c001b526:	e8 77 f1 ff ff       	call   c001a6a2 <Vm::fpuInternalTo64(unsigned long long)>
c001b52b:	e9 84 00 00 00       	jmp    c001b5b4 <Vm::x87Handler(regs*)+0xb02>
c001b530:	31 c0                	xor    eax,eax
c001b532:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b537:	0f 85 87 00 00 00    	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b53d:	50                   	push   eax
c001b53e:	50                   	push   eax
c001b53f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b542:	66 90                	xchg   ax,ax
c001b544:	31 d2                	xor    edx,edx
c001b546:	52                   	push   edx
c001b547:	50                   	push   eax
c001b548:	e8 47 f2 ff ff       	call   c001a794 <Vm::fpuLongToFloat(long long)>
c001b54d:	8d 76 00             	lea    esi,[esi+0x0]
c001b550:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b557:	89 c6                	mov    esi,eax
c001b559:	89 d7                	mov    edi,edx
c001b55b:	e8 12 f4 ff ff       	call   c001a972 <Vm::fpuGetReg(int)>
c001b560:	57                   	push   edi
c001b561:	56                   	push   esi
c001b562:	52                   	push   edx
c001b563:	50                   	push   eax
c001b564:	e8 b8 f3 ff ff       	call   c001a921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	83 c4 1c             	add    esp,0x1c
c001b56f:	90                   	nop
c001b570:	52                   	push   edx
c001b571:	50                   	push   eax
c001b572:	6a 00                	push   0x0
c001b574:	e8 3c f4 ff ff       	call   c001a9b5 <Vm::fpuSetReg(int, unsigned long long)>
c001b579:	e9 7a f7 ff ff       	jmp    c001acf8 <Vm::x87Handler(regs*)+0x246>
c001b57e:	66 90                	xchg   ax,ax
c001b580:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b584:	80 fa 05             	cmp    dl,0x5
c001b587:	75 13                	jne    c001b59c <Vm::x87Handler(regs*)+0xaea>
c001b589:	55                   	push   ebp
c001b58a:	55                   	push   ebp
c001b58b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b58e:	ff 36                	push   DWORD PTR [esi]
c001b590:	e8 c3 f1 ff ff       	call   c001a758 <Vm::fpuULongToFloat(unsigned long long)>
c001b595:	e9 52 f7 ff ff       	jmp    c001acec <Vm::x87Handler(regs*)+0x23a>
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	31 c0                	xor    eax,eax
c001b59e:	80 fa 07             	cmp    dl,0x7
c001b5a1:	75 21                	jne    c001b5c4 <Vm::x87Handler(regs*)+0xb12>
c001b5a3:	e8 b7 f4 ff ff       	call   c001aa5f <Vm::fpuPop()>
c001b5a8:	51                   	push   ecx
c001b5a9:	51                   	push   ecx
c001b5aa:	52                   	push   edx
c001b5ab:	50                   	push   eax
c001b5ac:	e8 48 f1 ff ff       	call   c001a6f9 <Vm::fpuFloatToLong(unsigned long long)>
c001b5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	89 06                	mov    DWORD PTR [esi],eax
c001b5b9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b5bc:	e9 7b f7 ff ff       	jmp    c001ad3c <Vm::x87Handler(regs*)+0x28a>
c001b5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c4:	83 c4 1c             	add    esp,0x1c
c001b5c7:	5b                   	pop    ebx
c001b5c8:	5e                   	pop    esi
c001b5c9:	5f                   	pop    edi
c001b5ca:	5d                   	pop    ebp
c001b5cb:	c3                   	ret    

c001b5cc <__static_initialization_and_destruction_0(int, int)>:
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b5d4:	75 1a                	jne    c001b5f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b5de:	75 10                	jne    c001b5f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5e0:	83 ec 0c             	sub    esp,0xc
c001b5e3:	68 00 a2 02 c0       	push   0xc002a200
c001b5e8:	e8 c7 83 00 00       	call   c00239b4 <Vm::_FPUState::_FPUState()>
c001b5ed:	83 c4 10             	add    esp,0x10
c001b5f0:	90                   	nop
c001b5f1:	83 c4 0c             	add    esp,0xc
c001b5f4:	c3                   	ret    
c001b5f5:	8d 76 00             	lea    esi,[esi+0x0]

c001b5f8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	83 ec 08             	sub    esp,0x8
c001b5fe:	68 ff ff 00 00       	push   0xffff
c001b603:	6a 01                	push   0x1
c001b605:	e8 c2 ff ff ff       	call   c001b5cc <__static_initialization_and_destruction_0(int, int)>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	83 c4 0c             	add    esp,0xc
c001b610:	c3                   	ret    
c001b611:	66 90                	xchg   ax,ax
c001b613:	90                   	nop

c001b614 <FAT::getName()>:
c001b614:	b8 10 70 02 c0       	mov    eax,0xc0027010
c001b619:	c3                   	ret    
c001b61a:	66 90                	xchg   ax,ax

c001b61c <FAT::tell(void*, unsigned long long*)>:
c001b61c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b621:	75 09                	jne    c001b62c <FAT::tell(void*, unsigned long long*)+0x10>
c001b623:	b8 04 00 00 00       	mov    eax,0x4
c001b628:	c3                   	ret    
c001b629:	8d 76 00             	lea    esi,[esi+0x0]
c001b62c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b631:	75 09                	jne    c001b63c <FAT::tell(void*, unsigned long long*)+0x20>
c001b633:	b8 04 00 00 00       	mov    eax,0x4
c001b638:	c3                   	ret    
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b640:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b643:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b646:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b64a:	89 01                	mov    DWORD PTR [ecx],eax
c001b64c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b64f:	b8 00 00 00 00       	mov    eax,0x0
c001b654:	c3                   	ret    
c001b655:	90                   	nop
c001b656:	66 90                	xchg   ax,ax

c001b658 <FAT::stat(void*, unsigned long long*)>:
c001b658:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b65d:	75 09                	jne    c001b668 <FAT::stat(void*, unsigned long long*)+0x10>
c001b65f:	b8 04 00 00 00       	mov    eax,0x4
c001b664:	c3                   	ret    
c001b665:	8d 76 00             	lea    esi,[esi+0x0]
c001b668:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b66d:	75 09                	jne    c001b678 <FAT::stat(void*, unsigned long long*)+0x20>
c001b66f:	b8 04 00 00 00       	mov    eax,0x4
c001b674:	c3                   	ret    
c001b675:	8d 76 00             	lea    esi,[esi+0x0]
c001b678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b67c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b67f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b682:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b686:	89 01                	mov    DWORD PTR [ecx],eax
c001b688:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b68b:	b8 00 00 00 00       	mov    eax,0x0
c001b690:	c3                   	ret    
c001b691:	90                   	nop
c001b692:	66 90                	xchg   ax,ax

c001b694 <FAT::~FAT()>:
c001b694:	83 ec 0c             	sub    esp,0xc
c001b697:	ba 5c 70 02 c0       	mov    edx,0xc002705c
c001b69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a0:	89 10                	mov    DWORD PTR [eax],edx
c001b6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a6:	83 ec 0c             	sub    esp,0xc
c001b6a9:	50                   	push   eax
c001b6aa:	e8 d5 1d ff ff       	call   c000d484 <Filesystem::~Filesystem()>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	90                   	nop
c001b6b3:	83 c4 0c             	add    esp,0xc
c001b6b6:	c3                   	ret    
c001b6b7:	90                   	nop

c001b6b8 <FAT::~FAT()>:
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	83 ec 0c             	sub    esp,0xc
c001b6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c2:	e8 cd ff ff ff       	call   c001b694 <FAT::~FAT()>
c001b6c7:	83 c4 10             	add    esp,0x10
c001b6ca:	83 ec 08             	sub    esp,0x8
c001b6cd:	6a 08                	push   0x8
c001b6cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d3:	e8 90 19 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	83 c4 0c             	add    esp,0xc
c001b6de:	c3                   	ret    
c001b6df:	90                   	nop

c001b6e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b6e0:	83 ec 1c             	sub    esp,0x1c
c001b6e3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b6ea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6f3:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b6fa:	83 f8 ff             	cmp    eax,0xffffffff
c001b6fd:	75 35                	jne    c001b734 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b6ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b703:	88 c2                	mov    dl,al
c001b705:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b70a:	01 d0                	add    eax,edx
c001b70c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b710:	8b 15 60 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a260
c001b716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b71a:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b721:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b726:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b72a:	89 14 85 00 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d00],edx
c001b731:	eb 19                	jmp    c001b74c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b733:	90                   	nop
c001b734:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b738:	88 c2                	mov    dl,al
c001b73a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b73e:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b745:	01 d0                	add    eax,edx
c001b747:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b74b:	90                   	nop
c001b74c:	83 ec 04             	sub    esp,0x4
c001b74f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b753:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b757:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b75b:	50                   	push   eax
c001b75c:	e8 e1 b4 fe ff       	call   c0006c42 <f_getlabel>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b768:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b76d:	75 09                	jne    c001b778 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b76f:	b8 00 00 00 00       	mov    eax,0x0
c001b774:	eb 0a                	jmp    c001b780 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b776:	66 90                	xchg   ax,ax
c001b778:	b8 01 00 00 00       	mov    eax,0x1
c001b77d:	8d 76 00             	lea    esi,[esi+0x0]
c001b780:	83 c4 1c             	add    esp,0x1c
c001b783:	c3                   	ret    

c001b784 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b784:	57                   	push   edi
c001b785:	83 ec 58             	sub    esp,0x58
c001b788:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b790:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b794:	b9 0f 00 00 00       	mov    ecx,0xf
c001b799:	b8 00 00 00 00       	mov    eax,0x0
c001b79e:	fc                   	cld    
c001b79f:	89 d7                	mov    edi,edx
c001b7a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b7a3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7a7:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b7ae:	83 f8 ff             	cmp    eax,0xffffffff
c001b7b1:	75 35                	jne    c001b7e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b7b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7b7:	88 c2                	mov    dl,al
c001b7b9:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b7be:	01 d0                	add    eax,edx
c001b7c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7c4:	8b 15 60 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a260
c001b7ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7ce:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b7d5:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b7da:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b7de:	89 14 85 00 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d00],edx
c001b7e5:	eb 19                	jmp    c001b800 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b7e7:	90                   	nop
c001b7e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7ec:	88 c2                	mov    dl,al
c001b7ee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7f2:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b7f9:	01 d0                	add    eax,edx
c001b7fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7ff:	90                   	nop
c001b800:	83 ec 08             	sub    esp,0x8
c001b803:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b807:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b80b:	50                   	push   eax
c001b80c:	e8 7f 50 fe ff       	call   c0000890 <strcat>
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	83 ec 0c             	sub    esp,0xc
c001b817:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b81b:	50                   	push   eax
c001b81c:	e8 0f b6 fe ff       	call   c0006e30 <f_setlabel>
c001b821:	83 c4 10             	add    esp,0x10
c001b824:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b828:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b82d:	75 09                	jne    c001b838 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b82f:	b8 00 00 00 00       	mov    eax,0x0
c001b834:	eb 0a                	jmp    c001b840 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b836:	66 90                	xchg   ax,ax
c001b838:	b8 01 00 00 00       	mov    eax,0x1
c001b83d:	8d 76 00             	lea    esi,[esi+0x0]
c001b840:	83 c4 58             	add    esp,0x58
c001b843:	5f                   	pop    edi
c001b844:	c3                   	ret    
c001b845:	90                   	nop
c001b846:	66 90                	xchg   ax,ax

c001b848 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b848:	83 ec 2c             	sub    esp,0x2c
c001b84b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b853:	83 ec 08             	sub    esp,0x8
c001b856:	68 34 70 02 c0       	push   0xc0027034
c001b85b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b85f:	e8 78 4f fe ff       	call   c00007dc <strcmp>
c001b864:	83 c4 10             	add    esp,0x10
c001b867:	85 c0                	test   eax,eax
c001b869:	0f 94 c0             	sete   al
c001b86c:	84 c0                	test   al,al
c001b86e:	74 10                	je     c001b880 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b870:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b878:	e9 b3 00 00 00       	jmp    c001b930 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b87d:	8d 76 00             	lea    esi,[esi+0x0]
c001b880:	83 ec 08             	sub    esp,0x8
c001b883:	68 26 70 02 c0       	push   0xc0027026
c001b888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b88c:	e8 4b 4f fe ff       	call   c00007dc <strcmp>
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	85 c0                	test   eax,eax
c001b896:	0f 94 c0             	sete   al
c001b899:	84 c0                	test   al,al
c001b89b:	74 0f                	je     c001b8ac <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b89d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8a5:	e9 86 00 00 00       	jmp    c001b930 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8aa:	66 90                	xchg   ax,ax
c001b8ac:	83 ec 08             	sub    esp,0x8
c001b8af:	68 2c 70 02 c0       	push   0xc002702c
c001b8b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8b8:	e8 1f 4f fe ff       	call   c00007dc <strcmp>
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	85 c0                	test   eax,eax
c001b8c2:	0f 94 c0             	sete   al
c001b8c5:	84 c0                	test   al,al
c001b8c7:	74 0b                	je     c001b8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b8c9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8d1:	eb 5d                	jmp    c001b930 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8d3:	90                   	nop
c001b8d4:	83 ec 08             	sub    esp,0x8
c001b8d7:	68 2c 41 02 c0       	push   0xc002412c
c001b8dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8e0:	e8 f7 4e fe ff       	call   c00007dc <strcmp>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	85 c0                	test   eax,eax
c001b8ea:	0f 94 c0             	sete   al
c001b8ed:	84 c0                	test   al,al
c001b8ef:	74 0b                	je     c001b8fc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b8f1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b8f9:	eb 35                	jmp    c001b930 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8fb:	90                   	nop
c001b8fc:	83 ec 08             	sub    esp,0x8
c001b8ff:	68 32 70 02 c0       	push   0xc0027032
c001b904:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b908:	e8 cf 4e fe ff       	call   c00007dc <strcmp>
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	85 c0                	test   eax,eax
c001b912:	0f 94 c0             	sete   al
c001b915:	84 c0                	test   al,al
c001b917:	74 0b                	je     c001b924 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b919:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b921:	eb 0d                	jmp    c001b930 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b923:	90                   	nop
c001b924:	b8 08 00 00 00       	mov    eax,0x8
c001b929:	e9 ea 00 00 00       	jmp    c001ba18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b92e:	66 90                	xchg   ax,ax
c001b930:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b937:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b93c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b940:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b947:	83 f8 ff             	cmp    eax,0xffffffff
c001b94a:	75 34                	jne    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b94c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b950:	88 c2                	mov    dl,al
c001b952:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b957:	01 d0                	add    eax,edx
c001b959:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b95d:	8b 15 60 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a260
c001b963:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b967:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b96e:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001b973:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b977:	89 14 85 00 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d00],edx
c001b97e:	eb 18                	jmp    c001b998 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b980:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b984:	88 c2                	mov    dl,al
c001b986:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b98a:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001b991:	01 d0                	add    eax,edx
c001b993:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b997:	90                   	nop
c001b998:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b99c:	88 04 24             	mov    BYTE PTR [esp],al
c001b99f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b9a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b9af:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b9b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	68 00 20 00 00       	push   0x2000
c001b9c4:	e8 1e e4 fe ff       	call   c0009de7 <malloc>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9d0:	68 00 20 00 00       	push   0x2000
c001b9d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9dd:	50                   	push   eax
c001b9de:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b9e2:	50                   	push   eax
c001b9e3:	e8 c9 ba fe ff       	call   c00074b1 <f_mkfs>
c001b9e8:	83 c4 10             	add    esp,0x10
c001b9eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b9f4:	75 0a                	jne    c001ba00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b9f6:	b8 00 00 00 00       	mov    eax,0x0
c001b9fb:	eb 1b                	jmp    c001ba18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001ba00:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ba05:	75 09                	jne    c001ba10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ba07:	b8 09 00 00 00       	mov    eax,0x9
c001ba0c:	eb 0a                	jmp    c001ba18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ba0e:	66 90                	xchg   ax,ax
c001ba10:	b8 01 00 00 00       	mov    eax,0x1
c001ba15:	8d 76 00             	lea    esi,[esi+0x0]
c001ba18:	83 c4 2c             	add    esp,0x2c
c001ba1b:	c3                   	ret    

c001ba1c <FAT::tryMount(LogicalDisk*, int)>:
c001ba1c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ba22:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001ba27:	83 f8 14             	cmp    eax,0x14
c001ba2a:	75 18                	jne    c001ba44 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ba2c:	83 ec 0c             	sub    esp,0xc
c001ba2f:	68 38 70 02 c0       	push   0xc0027038
c001ba34:	e8 f0 97 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	b0 00                	mov    al,0x0
c001ba3e:	e9 e9 01 00 00       	jmp    c001bc2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba43:	90                   	nop
c001ba44:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ba4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba57:	3d 00 02 00 00       	cmp    eax,0x200
c001ba5c:	74 0a                	je     c001ba68 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ba5e:	b0 00                	mov    al,0x0
c001ba60:	e9 c7 01 00 00       	jmp    c001bc2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba65:	8d 76 00             	lea    esi,[esi+0x0]
c001ba68:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ba70:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba77:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001ba7e:	83 f8 ff             	cmp    eax,0xffffffff
c001ba81:	74 09                	je     c001ba8c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ba83:	b0 01                	mov    al,0x1
c001ba85:	e9 a2 01 00 00       	jmp    c001bc2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba8a:	66 90                	xchg   ax,ax
c001ba8c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ba96:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ba9e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001baa5:	88 c2                	mov    dl,al
c001baa7:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001baac:	01 d0                	add    eax,edx
c001baae:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001bab5:	8b 15 60 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a260
c001babb:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001bac2:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001bac9:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001bace:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001bad5:	89 14 85 00 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d00],edx
c001badc:	83 ec 0c             	sub    esp,0xc
c001badf:	68 54 02 00 00       	push   0x254
c001bae4:	e8 fe e2 fe ff       	call   c0009de7 <malloc>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001baf3:	83 ec 04             	sub    esp,0x4
c001baf6:	6a 00                	push   0x0
c001baf8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001baff:	50                   	push   eax
c001bb00:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb07:	e8 2d 93 fe ff       	call   c0004e39 <f_mount>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb16:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001bb1e:	74 1c                	je     c001bb3c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bb20:	83 ec 0c             	sub    esp,0xc
c001bb23:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb2a:	e8 d8 e2 fe ff       	call   c0009e07 <rfree>
c001bb2f:	83 c4 10             	add    esp,0x10
c001bb32:	b0 00                	mov    al,0x0
c001bb34:	e9 f3 00 00 00       	jmp    c001bc2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bb39:	8d 76 00             	lea    esi,[esi+0x0]
c001bb3c:	83 ec 04             	sub    esp,0x4
c001bb3f:	68 00 01 00 00       	push   0x100
c001bb44:	6a 00                	push   0x0
c001bb46:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb4d:	50                   	push   eax
c001bb4e:	e8 41 4b fe ff       	call   c0000694 <memset>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	83 ec 08             	sub    esp,0x8
c001bb59:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb60:	50                   	push   eax
c001bb61:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb68:	50                   	push   eax
c001bb69:	e8 22 4d fe ff       	call   c0000890 <strcat>
c001bb6e:	83 c4 10             	add    esp,0x10
c001bb71:	83 ec 08             	sub    esp,0x8
c001bb74:	68 46 70 02 c0       	push   0xc0027046
c001bb79:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb80:	50                   	push   eax
c001bb81:	e8 0a 4d fe ff       	call   c0000890 <strcat>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	83 ec 04             	sub    esp,0x4
c001bb8c:	6a 01                	push   0x1
c001bb8e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bb95:	50                   	push   eax
c001bb96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb9a:	50                   	push   eax
c001bb9b:	e8 fb 92 fe ff       	call   c0004e9b <f_open>
c001bba0:	83 c4 10             	add    esp,0x10
c001bba3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bbaa:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bbb1:	85 c0                	test   eax,eax
c001bbb3:	74 0b                	je     c001bbc0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bbb5:	78 31                	js     c001bbe8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bbb7:	83 e8 04             	sub    eax,0x4
c001bbba:	83 f8 01             	cmp    eax,0x1
c001bbbd:	77 29                	ja     c001bbe8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bbbf:	90                   	nop
c001bbc0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bbcf:	50                   	push   eax
c001bbd0:	e8 18 9e fe ff       	call   c00059ed <f_close>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	90                   	nop
c001bbd9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bbe1:	74 41                	je     c001bc24 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bbe3:	eb 33                	jmp    c001bc18 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe8:	83 ec 0c             	sub    esp,0xc
c001bbeb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bbf2:	e8 10 e2 fe ff       	call   c0009e07 <rfree>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	83 ec 04             	sub    esp,0x4
c001bbfd:	6a 00                	push   0x0
c001bbff:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bc06:	50                   	push   eax
c001bc07:	6a 00                	push   0x0
c001bc09:	e8 2b 92 fe ff       	call   c0004e39 <f_mount>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	b0 00                	mov    al,0x0
c001bc13:	eb 17                	jmp    c001bc2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bc15:	8d 76 00             	lea    esi,[esi+0x0]
c001bc18:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c001bc1d:	40                   	inc    eax
c001bc1e:	a3 60 a2 02 c0       	mov    ds:0xc002a260,eax
c001bc23:	90                   	nop
c001bc24:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bc2b:	90                   	nop
c001bc2c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bc32:	c3                   	ret    
c001bc33:	90                   	nop

c001bc34 <FAT::allocateSwapfile(char const*, int)>:
c001bc34:	55                   	push   ebp
c001bc35:	57                   	push   edi
c001bc36:	56                   	push   esi
c001bc37:	53                   	push   ebx
c001bc38:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bc3e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc49:	83 ec 0c             	sub    esp,0xc
c001bc4c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bc53:	e8 8f e1 fe ff       	call   c0009de7 <malloc>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	89 c7                	mov    edi,eax
c001bc5d:	a1 90 a1 02 c0       	mov    eax,ds:0xc002a190
c001bc62:	83 ec 04             	sub    esp,0x4
c001bc65:	50                   	push   eax
c001bc66:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bc6d:	57                   	push   edi
c001bc6e:	e8 41 1a ff ff       	call   c000d6b4 <File::File(char const*, Process*)>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bc7d:	83 ec 04             	sub    esp,0x4
c001bc80:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bc84:	50                   	push   eax
c001bc85:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc89:	50                   	push   eax
c001bc8a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc91:	e8 a4 1d ff ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bca0:	c1 e0 14             	shl    eax,0x14
c001bca3:	89 c7                	mov    edi,eax
c001bca5:	89 c5                	mov    ebp,eax
c001bca7:	c1 fd 1f             	sar    ebp,0x1f
c001bcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcb2:	89 f9                	mov    ecx,edi
c001bcb4:	31 c1                	xor    ecx,eax
c001bcb6:	89 cb                	mov    ebx,ecx
c001bcb8:	89 e9                	mov    ecx,ebp
c001bcba:	31 d1                	xor    ecx,edx
c001bcbc:	89 ce                	mov    esi,ecx
c001bcbe:	89 f0                	mov    eax,esi
c001bcc0:	09 d8                	or     eax,ebx
c001bcc2:	0f 84 98 00 00 00    	je     c001bd60 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bcc8:	83 ec 0c             	sub    esp,0xc
c001bccb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcd2:	e8 2f 1c ff ff       	call   c000d906 <File::unlink()>
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	83 ec 08             	sub    esp,0x8
c001bcdd:	6a 12                	push   0x12
c001bcdf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bce6:	e8 a3 1a ff ff       	call   c000d78e <File::open(FileOpenMode)>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcf5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bcfb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd02:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bd09:	c1 e0 14             	shl    eax,0x14
c001bd0c:	99                   	cdq    
c001bd0d:	6a 01                	push   0x1
c001bd0f:	52                   	push   edx
c001bd10:	50                   	push   eax
c001bd11:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bd18:	e8 80 b3 fe ff       	call   c000709d <f_expand>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd27:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd29:	83 c0 10             	add    eax,0x10
c001bd2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd2e:	83 ec 0c             	sub    esp,0xc
c001bd31:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd35:	52                   	push   edx
c001bd36:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bd3a:	52                   	push   edx
c001bd3b:	6a 00                	push   0x0
c001bd3d:	68 00 04 00 00       	push   0x400
c001bd42:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd49:	ff d0                	call   eax
c001bd4b:	83 c4 20             	add    esp,0x20
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd58:	e8 8f 1a ff ff       	call   c000d7ec <File::close()>
c001bd5d:	83 c4 10             	add    esp,0x10
c001bd60:	83 ec 08             	sub    esp,0x8
c001bd63:	6a 01                	push   0x1
c001bd65:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd6c:	e8 1d 1a ff ff       	call   c000d78e <File::open(FileOpenMode)>
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7d:	83 c0 0c             	add    eax,0xc
c001bd80:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd82:	83 ec 0c             	sub    esp,0xc
c001bd85:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd89:	52                   	push   edx
c001bd8a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bd8e:	52                   	push   edx
c001bd8f:	6a 00                	push   0x0
c001bd91:	6a 04                	push   0x4
c001bd93:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd9a:	ff d0                	call   eax
c001bd9c:	83 c4 20             	add    esp,0x20
c001bd9f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bda6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bdac:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bdb3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bdba:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bdbd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bdc0:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bdc7:	83 ec 0c             	sub    esp,0xc
c001bdca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bdd1:	e8 16 1a ff ff       	call   c000d7ec <File::close()>
c001bdd6:	83 c4 10             	add    esp,0x10
c001bdd9:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bde0:	ba 00 00 00 00       	mov    edx,0x0
c001bde5:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bdeb:	5b                   	pop    ebx
c001bdec:	5e                   	pop    esi
c001bded:	5f                   	pop    edi
c001bdee:	5d                   	pop    ebp
c001bdef:	c3                   	ret    

c001bdf0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bdf0:	57                   	push   edi
c001bdf1:	56                   	push   esi
c001bdf2:	53                   	push   ebx
c001bdf3:	81 ec 50 02 00 00    	sub    esp,0x250
c001bdf9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001be01:	74 0d                	je     c001be10 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001be03:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001be0b:	75 0f                	jne    c001be1c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001be0d:	8d 76 00             	lea    esi,[esi+0x0]
c001be10:	b8 04 00 00 00       	mov    eax,0x4
c001be15:	e9 36 01 00 00       	jmp    c001bf50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001be1a:	66 90                	xchg   ax,ax
c001be1c:	83 ec 08             	sub    esp,0x8
c001be1f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be26:	50                   	push   eax
c001be27:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001be2e:	e8 c4 a1 fe ff       	call   c0005ff7 <f_readdir>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001be3d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001be44:	83 ec 0c             	sub    esp,0xc
c001be47:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be4e:	83 c0 1a             	add    eax,0x1a
c001be51:	50                   	push   eax
c001be52:	e8 59 48 fe ff       	call   c00006b0 <strlen>
c001be57:	83 c4 10             	add    esp,0x10
c001be5a:	ba 00 00 00 00       	mov    edx,0x0
c001be5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be67:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001be6e:	0f b6 c0             	movzx  eax,al
c001be71:	83 e0 10             	and    eax,0x10
c001be74:	74 0a                	je     c001be80 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001be76:	b8 02 00 00 00       	mov    eax,0x2
c001be7b:	eb 0b                	jmp    c001be88 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001be7d:	8d 76 00             	lea    esi,[esi+0x0]
c001be80:	b8 01 00 00 00       	mov    eax,0x1
c001be85:	8d 76 00             	lea    esi,[esi+0x0]
c001be88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be8c:	83 ec 08             	sub    esp,0x8
c001be8f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be96:	83 c0 1a             	add    eax,0x1a
c001be99:	50                   	push   eax
c001be9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be9e:	83 c0 10             	add    eax,0x10
c001bea1:	50                   	push   eax
c001bea2:	e8 a9 48 fe ff       	call   c0000750 <strcpy>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001beb1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001beb8:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bebc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bec3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001beca:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bed1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bed8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bedf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bee6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001beed:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bef4:	89 c6                	mov    esi,eax
c001bef6:	89 d7                	mov    edi,edx
c001bef8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001befa:	89 c8                	mov    eax,ecx
c001befc:	89 fa                	mov    edx,edi
c001befe:	89 f3                	mov    ebx,esi
c001bf00:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bf07:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bf0e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bf15:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bf1c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf22:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bf29:	84 c0                	test   al,al
c001bf2b:	75 07                	jne    c001bf34 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bf2d:	b8 07 00 00 00       	mov    eax,0x7
c001bf32:	eb 1c                	jmp    c001bf50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf34:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bf3b:	85 c0                	test   eax,eax
c001bf3d:	75 09                	jne    c001bf48 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bf3f:	b8 00 00 00 00       	mov    eax,0x0
c001bf44:	eb 0a                	jmp    c001bf50 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf46:	66 90                	xchg   ax,ax
c001bf48:	b8 01 00 00 00       	mov    eax,0x1
c001bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf50:	81 c4 50 02 00 00    	add    esp,0x250
c001bf56:	5b                   	pop    ebx
c001bf57:	5e                   	pop    esi
c001bf58:	5f                   	pop    edi
c001bf59:	c3                   	ret    
c001bf5a:	66 90                	xchg   ax,ax

c001bf5c <FAT::read(void*, unsigned long, void*, int*)>:
c001bf5c:	83 ec 1c             	sub    esp,0x1c
c001bf5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf64:	74 0a                	je     c001bf70 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bf66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf6b:	75 0b                	jne    c001bf78 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bf6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf70:	b8 04 00 00 00       	mov    eax,0x4
c001bf75:	eb 41                	jmp    c001bfb8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf77:	90                   	nop
c001bf78:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf7c:	50                   	push   eax
c001bf7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf89:	e8 49 93 fe ff       	call   c00052d7 <f_read>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf99:	89 c2                	mov    edx,eax
c001bf9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf9f:	89 10                	mov    DWORD PTR [eax],edx
c001bfa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfa5:	85 c0                	test   eax,eax
c001bfa7:	75 07                	jne    c001bfb0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bfa9:	b8 00 00 00 00       	mov    eax,0x0
c001bfae:	eb 08                	jmp    c001bfb8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bfb0:	b8 01 00 00 00       	mov    eax,0x1
c001bfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb8:	83 c4 1c             	add    esp,0x1c
c001bfbb:	c3                   	ret    

c001bfbc <FAT::write(void*, unsigned long, void*, int*)>:
c001bfbc:	83 ec 1c             	sub    esp,0x1c
c001bfbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfc4:	74 0a                	je     c001bfd0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bfc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bfcb:	75 0b                	jne    c001bfd8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd0:	b8 04 00 00 00       	mov    eax,0x4
c001bfd5:	eb 41                	jmp    c001c018 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bfd7:	90                   	nop
c001bfd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfdc:	50                   	push   eax
c001bfdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfe1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bfe5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfe9:	e8 69 95 fe ff       	call   c0005557 <f_write>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bff9:	89 c2                	mov    edx,eax
c001bffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfff:	89 10                	mov    DWORD PTR [eax],edx
c001c001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c005:	85 c0                	test   eax,eax
c001c007:	75 07                	jne    c001c010 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c009:	b8 00 00 00 00       	mov    eax,0x0
c001c00e:	eb 08                	jmp    c001c018 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c010:	b8 01 00 00 00       	mov    eax,0x1
c001c015:	8d 76 00             	lea    esi,[esi+0x0]
c001c018:	83 c4 1c             	add    esp,0x1c
c001c01b:	c3                   	ret    

c001c01c <FAT::close(void*)>:
c001c01c:	83 ec 1c             	sub    esp,0x1c
c001c01f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c024:	75 0a                	jne    c001c030 <FAT::close(void*)+0x14>
c001c026:	b8 04 00 00 00       	mov    eax,0x4
c001c02b:	eb 3f                	jmp    c001c06c <FAT::close(void*)+0x50>
c001c02d:	8d 76 00             	lea    esi,[esi+0x0]
c001c030:	83 ec 0c             	sub    esp,0xc
c001c033:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c037:	e8 b1 99 fe ff       	call   c00059ed <f_close>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c04a:	e8 a8 dd fe ff       	call   c0009df7 <free>
c001c04f:	83 c4 10             	add    esp,0x10
c001c052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c056:	85 c0                	test   eax,eax
c001c058:	75 0a                	jne    c001c064 <FAT::close(void*)+0x48>
c001c05a:	b8 00 00 00 00       	mov    eax,0x0
c001c05f:	eb 0b                	jmp    c001c06c <FAT::close(void*)+0x50>
c001c061:	8d 76 00             	lea    esi,[esi+0x0]
c001c064:	b8 01 00 00 00       	mov    eax,0x1
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	83 c4 1c             	add    esp,0x1c
c001c06f:	c3                   	ret    

c001c070 <FAT::closeDir(void*)>:
c001c070:	83 ec 1c             	sub    esp,0x1c
c001c073:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c078:	75 0a                	jne    c001c084 <FAT::closeDir(void*)+0x14>
c001c07a:	b8 04 00 00 00       	mov    eax,0x4
c001c07f:	eb 3f                	jmp    c001c0c0 <FAT::closeDir(void*)+0x50>
c001c081:	8d 76 00             	lea    esi,[esi+0x0]
c001c084:	83 ec 0c             	sub    esp,0xc
c001c087:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c08b:	e8 45 9f fe ff       	call   c0005fd5 <f_closedir>
c001c090:	83 c4 10             	add    esp,0x10
c001c093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c097:	83 ec 0c             	sub    esp,0xc
c001c09a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c09e:	e8 54 dd fe ff       	call   c0009df7 <free>
c001c0a3:	83 c4 10             	add    esp,0x10
c001c0a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0aa:	85 c0                	test   eax,eax
c001c0ac:	75 0a                	jne    c001c0b8 <FAT::closeDir(void*)+0x48>
c001c0ae:	b8 00 00 00 00       	mov    eax,0x0
c001c0b3:	eb 0b                	jmp    c001c0c0 <FAT::closeDir(void*)+0x50>
c001c0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0b8:	b8 01 00 00 00       	mov    eax,0x1
c001c0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c0c0:	83 c4 1c             	add    esp,0x1c
c001c0c3:	c3                   	ret    

c001c0c4 <FAT::seek(void*, unsigned long long)>:
c001c0c4:	83 ec 2c             	sub    esp,0x2c
c001c0c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c0d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c0dc:	75 0a                	jne    c001c0e8 <FAT::seek(void*, unsigned long long)+0x24>
c001c0de:	b8 04 00 00 00       	mov    eax,0x4
c001c0e3:	eb 37                	jmp    c001c11c <FAT::seek(void*, unsigned long long)+0x58>
c001c0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0e8:	83 ec 04             	sub    esp,0x4
c001c0eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c0f7:	e8 20 99 fe ff       	call   c0005a1c <f_lseek>
c001c0fc:	83 c4 10             	add    esp,0x10
c001c0ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c107:	85 c0                	test   eax,eax
c001c109:	75 09                	jne    c001c114 <FAT::seek(void*, unsigned long long)+0x50>
c001c10b:	b8 00 00 00 00       	mov    eax,0x0
c001c110:	eb 0a                	jmp    c001c11c <FAT::seek(void*, unsigned long long)+0x58>
c001c112:	66 90                	xchg   ax,ax
c001c114:	b8 01 00 00 00       	mov    eax,0x1
c001c119:	8d 76 00             	lea    esi,[esi+0x0]
c001c11c:	83 c4 2c             	add    esp,0x2c
c001c11f:	c3                   	ret    

c001c120 <fatWrapperReadDisk>:
c001c120:	83 ec 1c             	sub    esp,0x1c
c001c123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c127:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c12b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c12f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c13a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c13f:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c001c146:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c14a:	83 ec 0c             	sub    esp,0xc
c001c14d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c151:	52                   	push   edx
c001c152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c15a:	50                   	push   eax
c001c15b:	e8 6a 49 ff ff       	call   c0010aca <LogicalDisk::read(unsigned long long, int, void*)>
c001c160:	83 c4 20             	add    esp,0x20
c001c163:	83 c4 1c             	add    esp,0x1c
c001c166:	c3                   	ret    
c001c167:	90                   	nop

c001c168 <fatWrapperWriteDisk>:
c001c168:	83 ec 1c             	sub    esp,0x1c
c001c16b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c16f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c173:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c177:	89 04 24             	mov    DWORD PTR [esp],eax
c001c17a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c182:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c187:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c001c18e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c192:	83 ec 0c             	sub    esp,0xc
c001c195:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c199:	52                   	push   edx
c001c19a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c19e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1a2:	50                   	push   eax
c001c1a3:	e8 8e 49 ff ff       	call   c0010b36 <LogicalDisk::write(unsigned long long, int, void*)>
c001c1a8:	83 c4 20             	add    esp,0x20
c001c1ab:	83 c4 1c             	add    esp,0x1c
c001c1ae:	c3                   	ret    
c001c1af:	90                   	nop

c001c1b0 <fatWrapperIoctl>:
c001c1b0:	53                   	push   ebx
c001c1b1:	83 ec 28             	sub    esp,0x28
c001c1b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1bc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c1c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c1c4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c1c9:	75 31                	jne    c001c1fc <fatWrapperIoctl+0x4c>
c001c1cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1d3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1d8:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c001c1df:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c1e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1ef:	66 89 02             	mov    WORD PTR [edx],ax
c001c1f2:	b8 00 00 00 00       	mov    eax,0x0
c001c1f7:	e9 bc 00 00 00       	jmp    c001c2b8 <fatWrapperIoctl+0x108>
c001c1fc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c201:	75 6d                	jne    c001c270 <fatWrapperIoctl+0xc0>
c001c203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c20b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c210:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c001c217:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c21d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c223:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c229:	89 c8                	mov    eax,ecx
c001c22b:	89 da                	mov    edx,ebx
c001c22d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c231:	c1 e0 0a             	shl    eax,0xa
c001c234:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c239:	8b 0c 8d 00 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e00]
c001c240:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c246:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c24c:	89 cb                	mov    ebx,ecx
c001c24e:	c1 fb 1f             	sar    ebx,0x1f
c001c251:	53                   	push   ebx
c001c252:	51                   	push   ecx
c001c253:	52                   	push   edx
c001c254:	50                   	push   eax
c001c255:	e8 b6 6d 00 00       	call   c0023010 <__udivdi3>
c001c25a:	83 c4 10             	add    esp,0x10
c001c25d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c261:	89 01                	mov    DWORD PTR [ecx],eax
c001c263:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c266:	b8 00 00 00 00       	mov    eax,0x0
c001c26b:	eb 4b                	jmp    c001c2b8 <fatWrapperIoctl+0x108>
c001c26d:	8d 76 00             	lea    esi,[esi+0x0]
c001c270:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c275:	75 09                	jne    c001c280 <fatWrapperIoctl+0xd0>
c001c277:	b8 00 00 00 00       	mov    eax,0x0
c001c27c:	eb 3a                	jmp    c001c2b8 <fatWrapperIoctl+0x108>
c001c27e:	66 90                	xchg   ax,ax
c001c280:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c285:	75 19                	jne    c001c2a0 <fatWrapperIoctl+0xf0>
c001c287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c28b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c28f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c293:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c299:	b8 00 00 00 00       	mov    eax,0x0
c001c29e:	eb 18                	jmp    c001c2b8 <fatWrapperIoctl+0x108>
c001c2a0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c2a5:	75 09                	jne    c001c2b0 <fatWrapperIoctl+0x100>
c001c2a7:	b8 00 00 00 00       	mov    eax,0x0
c001c2ac:	eb 0a                	jmp    c001c2b8 <fatWrapperIoctl+0x108>
c001c2ae:	66 90                	xchg   ax,ax
c001c2b0:	b8 04 00 00 00       	mov    eax,0x4
c001c2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2b8:	83 c4 28             	add    esp,0x28
c001c2bb:	5b                   	pop    ebx
c001c2bc:	c3                   	ret    
c001c2bd:	90                   	nop
c001c2be:	66 90                	xchg   ax,ax

c001c2c0 <FAT::FAT()>:
c001c2c0:	83 ec 1c             	sub    esp,0x1c
c001c2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2c7:	83 ec 0c             	sub    esp,0xc
c001c2ca:	50                   	push   eax
c001c2cb:	e8 90 11 ff ff       	call   c000d460 <Filesystem::Filesystem()>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	ba 5c 70 02 c0       	mov    edx,0xc002705c
c001c2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2dc:	89 10                	mov    DWORD PTR [eax],edx
c001c2de:	c7 05 60 a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a260,0x0
c001c2e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c2f5:	7f 15                	jg     c001c30c <FAT::FAT()+0x4c>
c001c2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2fb:	c7 04 85 80 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5d80],0xffffffff
c001c306:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c30a:	eb e4                	jmp    c001c2f0 <FAT::FAT()+0x30>
c001c30c:	90                   	nop
c001c30d:	83 c4 1c             	add    esp,0x1c
c001c310:	c3                   	ret    
c001c311:	90                   	nop
c001c312:	66 90                	xchg   ax,ax

c001c314 <FAT::fixFilepath(char*)>:
c001c314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c318:	8a 00                	mov    al,BYTE PTR [eax]
c001c31a:	3c 40                	cmp    al,0x40
c001c31c:	7e 2e                	jle    c001c34c <FAT::fixFilepath(char*)+0x38>
c001c31e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c322:	8a 00                	mov    al,BYTE PTR [eax]
c001c324:	83 e8 41             	sub    eax,0x41
c001c327:	88 c2                	mov    dl,al
c001c329:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c32d:	88 10                	mov    BYTE PTR [eax],dl
c001c32f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c333:	8a 00                	mov    al,BYTE PTR [eax]
c001c335:	0f be c0             	movsx  eax,al
c001c338:	8b 04 85 80 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d80]
c001c33f:	83 c0 30             	add    eax,0x30
c001c342:	88 c2                	mov    dl,al
c001c344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c348:	88 10                	mov    BYTE PTR [eax],dl
c001c34a:	66 90                	xchg   ax,ax
c001c34c:	90                   	nop
c001c34d:	c3                   	ret    
c001c34e:	66 90                	xchg   ax,ax

c001c350 <FAT::open(char const*, void**, FileOpenMode)>:
c001c350:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c356:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c35e:	74 0c                	je     c001c36c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c360:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c368:	75 0e                	jne    c001c378 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c36a:	66 90                	xchg   ax,ax
c001c36c:	b8 04 00 00 00       	mov    eax,0x4
c001c371:	e9 06 01 00 00       	jmp    c001c47c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c376:	66 90                	xchg   ax,ax
c001c378:	83 ec 08             	sub    esp,0x8
c001c37b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c382:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c386:	50                   	push   eax
c001c387:	e8 c4 43 fe ff       	call   c0000750 <strcpy>
c001c38c:	83 c4 10             	add    esp,0x10
c001c38f:	83 ec 08             	sub    esp,0x8
c001c392:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c396:	50                   	push   eax
c001c397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c39e:	e8 71 ff ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c3ae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3b5:	83 e0 01             	and    eax,0x1
c001c3b8:	74 0a                	je     c001c3c4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c3ba:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c3c2:	66 90                	xchg   ax,ax
c001c3c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3cb:	83 e0 04             	and    eax,0x4
c001c3ce:	74 10                	je     c001c3e0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c3d0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c3d8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3e7:	83 e0 02             	and    eax,0x2
c001c3ea:	74 08                	je     c001c3f4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c3ec:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3fb:	83 e0 08             	and    eax,0x8
c001c3fe:	74 08                	je     c001c408 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c400:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c408:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c40f:	83 e0 10             	and    eax,0x10
c001c412:	74 08                	je     c001c41c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c414:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c41c:	83 ec 0c             	sub    esp,0xc
c001c41f:	68 50 02 00 00       	push   0x250
c001c424:	e8 be d9 fe ff       	call   c0009de7 <malloc>
c001c429:	83 c4 10             	add    esp,0x10
c001c42c:	89 c2                	mov    edx,eax
c001c42e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c435:	89 10                	mov    DWORD PTR [eax],edx
c001c437:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c43f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c446:	8b 00                	mov    eax,DWORD PTR [eax]
c001c448:	83 ec 04             	sub    esp,0x4
c001c44b:	52                   	push   edx
c001c44c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c450:	52                   	push   edx
c001c451:	50                   	push   eax
c001c452:	e8 44 8a fe ff       	call   c0004e9b <f_open>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c461:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c469:	74 09                	je     c001c474 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c46b:	b8 01 00 00 00       	mov    eax,0x1
c001c470:	eb 0a                	jmp    c001c47c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c472:	66 90                	xchg   ax,ax
c001c474:	b8 00 00 00 00       	mov    eax,0x0
c001c479:	8d 76 00             	lea    esi,[esi+0x0]
c001c47c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c482:	c3                   	ret    
c001c483:	90                   	nop

c001c484 <FAT::openDir(char const*, void**)>:
c001c484:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c48a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c492:	74 0c                	je     c001c4a0 <FAT::openDir(char const*, void**)+0x1c>
c001c494:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c49c:	75 0e                	jne    c001c4ac <FAT::openDir(char const*, void**)+0x28>
c001c49e:	66 90                	xchg   ax,ax
c001c4a0:	b8 04 00 00 00       	mov    eax,0x4
c001c4a5:	e9 82 00 00 00       	jmp    c001c52c <FAT::openDir(char const*, void**)+0xa8>
c001c4aa:	66 90                	xchg   ax,ax
c001c4ac:	83 ec 08             	sub    esp,0x8
c001c4af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4ba:	50                   	push   eax
c001c4bb:	e8 90 42 fe ff       	call   c0000750 <strcpy>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	83 ec 08             	sub    esp,0x8
c001c4c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c4ca:	50                   	push   eax
c001c4cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4d2:	e8 3d fe ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	83 ec 0c             	sub    esp,0xc
c001c4dd:	6a 4c                	push   0x4c
c001c4df:	e8 03 d9 fe ff       	call   c0009de7 <malloc>
c001c4e4:	83 c4 10             	add    esp,0x10
c001c4e7:	89 c2                	mov    edx,eax
c001c4e9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4f0:	89 10                	mov    DWORD PTR [eax],edx
c001c4f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4fb:	83 ec 08             	sub    esp,0x8
c001c4fe:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c502:	52                   	push   edx
c001c503:	50                   	push   eax
c001c504:	e8 ca 99 fe ff       	call   c0005ed3 <f_opendir>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c513:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c51b:	74 07                	je     c001c524 <FAT::openDir(char const*, void**)+0xa0>
c001c51d:	b8 01 00 00 00       	mov    eax,0x1
c001c522:	eb 08                	jmp    c001c52c <FAT::openDir(char const*, void**)+0xa8>
c001c524:	b8 00 00 00 00       	mov    eax,0x0
c001c529:	8d 76 00             	lea    esi,[esi+0x0]
c001c52c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c532:	c3                   	ret    
c001c533:	90                   	nop

c001c534 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c534:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c53a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c542:	75 0c                	jne    c001c550 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c544:	b8 04 00 00 00       	mov    eax,0x4
c001c549:	e9 d2 00 00 00       	jmp    c001c620 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c54e:	66 90                	xchg   ax,ax
c001c550:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c558:	75 0a                	jne    c001c564 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c55a:	b8 04 00 00 00       	mov    eax,0x4
c001c55f:	e9 bc 00 00 00       	jmp    c001c620 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c564:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c56c:	75 0a                	jne    c001c578 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c56e:	b8 04 00 00 00       	mov    eax,0x4
c001c573:	e9 a8 00 00 00       	jmp    c001c620 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c578:	83 ec 08             	sub    esp,0x8
c001c57b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c582:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c589:	50                   	push   eax
c001c58a:	e8 c1 41 fe ff       	call   c0000750 <strcpy>
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	83 ec 08             	sub    esp,0x8
c001c595:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c59c:	50                   	push   eax
c001c59d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c5a4:	e8 6b fd ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	83 ec 08             	sub    esp,0x8
c001c5af:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5b3:	50                   	push   eax
c001c5b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c5bb:	50                   	push   eax
c001c5bc:	e8 d1 9a fe ff       	call   c0006092 <f_stat>
c001c5c1:	83 c4 10             	add    esp,0x10
c001c5c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c5cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c5d2:	85 c0                	test   eax,eax
c001c5d4:	74 0a                	je     c001c5e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c5d6:	83 f8 04             	cmp    eax,0x4
c001c5d9:	74 35                	je     c001c610 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c5db:	eb 3b                	jmp    c001c618 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c5e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c5e4:	0f b6 c0             	movzx  eax,al
c001c5e7:	83 e0 10             	and    eax,0x10
c001c5ea:	0f 95 c2             	setne  dl
c001c5ed:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c5f4:	88 10                	mov    BYTE PTR [eax],dl
c001c5f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5fd:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c604:	89 01                	mov    DWORD PTR [ecx],eax
c001c606:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c609:	b8 00 00 00 00       	mov    eax,0x0
c001c60e:	eb 10                	jmp    c001c620 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c610:	b8 02 00 00 00       	mov    eax,0x2
c001c615:	eb 09                	jmp    c001c620 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c617:	90                   	nop
c001c618:	b8 01 00 00 00       	mov    eax,0x1
c001c61d:	8d 76 00             	lea    esi,[esi+0x0]
c001c620:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c626:	c3                   	ret    
c001c627:	90                   	nop

c001c628 <FAT::unlink(char const*)>:
c001c628:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c62e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c636:	75 08                	jne    c001c640 <FAT::unlink(char const*)+0x18>
c001c638:	b8 04 00 00 00       	mov    eax,0x4
c001c63d:	eb 61                	jmp    c001c6a0 <FAT::unlink(char const*)+0x78>
c001c63f:	90                   	nop
c001c640:	83 ec 08             	sub    esp,0x8
c001c643:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c64a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c64e:	50                   	push   eax
c001c64f:	e8 fc 40 fe ff       	call   c0000750 <strcpy>
c001c654:	83 c4 10             	add    esp,0x10
c001c657:	83 ec 08             	sub    esp,0x8
c001c65a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c65e:	50                   	push   eax
c001c65f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c666:	e8 a9 fc ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	83 ec 0c             	sub    esp,0xc
c001c671:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c675:	50                   	push   eax
c001c676:	e8 69 9d fe ff       	call   c00063e4 <f_unlink>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c685:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c68c:	85 c0                	test   eax,eax
c001c68e:	75 08                	jne    c001c698 <FAT::unlink(char const*)+0x70>
c001c690:	b8 00 00 00 00       	mov    eax,0x0
c001c695:	eb 09                	jmp    c001c6a0 <FAT::unlink(char const*)+0x78>
c001c697:	90                   	nop
c001c698:	b8 01 00 00 00       	mov    eax,0x1
c001c69d:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6a6:	c3                   	ret    
c001c6a7:	90                   	nop

c001c6a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c6a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c6ae:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c6b5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c6bc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c6c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c6c4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c6cc:	75 0a                	jne    c001c6d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c6ce:	b8 04 00 00 00       	mov    eax,0x4
c001c6d3:	e9 30 01 00 00       	jmp    c001c808 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c6d8:	83 ec 08             	sub    esp,0x8
c001c6db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c6e6:	50                   	push   eax
c001c6e7:	e8 64 40 fe ff       	call   c0000750 <strcpy>
c001c6ec:	83 c4 10             	add    esp,0x10
c001c6ef:	83 ec 08             	sub    esp,0x8
c001c6f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c6f6:	50                   	push   eax
c001c6f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6fe:	e8 11 fc ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c70e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c716:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c71b:	83 e0 01             	and    eax,0x1
c001c71e:	74 08                	je     c001c728 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c720:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c728:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c72d:	83 e0 02             	and    eax,0x2
c001c730:	74 0a                	je     c001c73c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c732:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c73a:	66 90                	xchg   ax,ax
c001c73c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c741:	83 e0 04             	and    eax,0x4
c001c744:	74 0a                	je     c001c750 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c746:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c74e:	66 90                	xchg   ax,ax
c001c750:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c755:	83 e0 08             	and    eax,0x8
c001c758:	74 0a                	je     c001c764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c75a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c762:	66 90                	xchg   ax,ax
c001c764:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c769:	83 e0 01             	and    eax,0x1
c001c76c:	74 0a                	je     c001c778 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c76e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c776:	66 90                	xchg   ax,ax
c001c778:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c77d:	83 e0 02             	and    eax,0x2
c001c780:	74 0a                	je     c001c78c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c782:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c78a:	66 90                	xchg   ax,ax
c001c78c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c791:	83 e0 04             	and    eax,0x4
c001c794:	74 0a                	je     c001c7a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c796:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c79e:	66 90                	xchg   ax,ax
c001c7a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7a5:	83 e0 08             	and    eax,0x8
c001c7a8:	74 0a                	je     c001c7b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c7aa:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c7b2:	66 90                	xchg   ax,ax
c001c7b4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c7bb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c7c2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c7ca:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c7d2:	83 ec 04             	sub    esp,0x4
c001c7d5:	52                   	push   edx
c001c7d6:	50                   	push   eax
c001c7d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c7db:	50                   	push   eax
c001c7dc:	e8 a5 a2 fe ff       	call   c0006a86 <f_chmod>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c7eb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c7f2:	85 c0                	test   eax,eax
c001c7f4:	75 0a                	jne    c001c800 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c7f6:	b8 00 00 00 00       	mov    eax,0x0
c001c7fb:	eb 0b                	jmp    c001c808 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c7fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c800:	b8 01 00 00 00       	mov    eax,0x1
c001c805:	8d 76 00             	lea    esi,[esi+0x0]
c001c808:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c80e:	c3                   	ret    
c001c80f:	90                   	nop

c001c810 <FAT::rename(char const*, char const*)>:
c001c810:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c816:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c81e:	74 0c                	je     c001c82c <FAT::rename(char const*, char const*)+0x1c>
c001c820:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c828:	75 0e                	jne    c001c838 <FAT::rename(char const*, char const*)+0x28>
c001c82a:	66 90                	xchg   ax,ax
c001c82c:	b8 04 00 00 00       	mov    eax,0x4
c001c831:	e9 9e 00 00 00       	jmp    c001c8d4 <FAT::rename(char const*, char const*)+0xc4>
c001c836:	66 90                	xchg   ax,ax
c001c838:	83 ec 08             	sub    esp,0x8
c001c83b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c842:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c849:	50                   	push   eax
c001c84a:	e8 01 3f fe ff       	call   c0000750 <strcpy>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	83 ec 08             	sub    esp,0x8
c001c855:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c85c:	50                   	push   eax
c001c85d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c864:	e8 ab fa ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c869:	83 c4 10             	add    esp,0x10
c001c86c:	83 ec 08             	sub    esp,0x8
c001c86f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c876:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c87a:	50                   	push   eax
c001c87b:	e8 d0 3e fe ff       	call   c0000750 <strcpy>
c001c880:	83 c4 10             	add    esp,0x10
c001c883:	83 ec 08             	sub    esp,0x8
c001c886:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c88a:	50                   	push   eax
c001c88b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c892:	e8 7d fa ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	83 ec 08             	sub    esp,0x8
c001c89d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8a1:	50                   	push   eax
c001c8a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c8a9:	50                   	push   eax
c001c8aa:	e8 e4 9e fe ff       	call   c0006793 <f_rename>
c001c8af:	83 c4 10             	add    esp,0x10
c001c8b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c8b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c8c0:	85 c0                	test   eax,eax
c001c8c2:	75 08                	jne    c001c8cc <FAT::rename(char const*, char const*)+0xbc>
c001c8c4:	b8 00 00 00 00       	mov    eax,0x0
c001c8c9:	eb 09                	jmp    c001c8d4 <FAT::rename(char const*, char const*)+0xc4>
c001c8cb:	90                   	nop
c001c8cc:	b8 01 00 00 00       	mov    eax,0x1
c001c8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8da:	c3                   	ret    
c001c8db:	90                   	nop

c001c8dc <FAT::mkdir(char const*)>:
c001c8dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8ea:	75 08                	jne    c001c8f4 <FAT::mkdir(char const*)+0x18>
c001c8ec:	b8 04 00 00 00       	mov    eax,0x4
c001c8f1:	eb 61                	jmp    c001c954 <FAT::mkdir(char const*)+0x78>
c001c8f3:	90                   	nop
c001c8f4:	83 ec 08             	sub    esp,0x8
c001c8f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c902:	50                   	push   eax
c001c903:	e8 48 3e fe ff       	call   c0000750 <strcpy>
c001c908:	83 c4 10             	add    esp,0x10
c001c90b:	83 ec 08             	sub    esp,0x8
c001c90e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c912:	50                   	push   eax
c001c913:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c91a:	e8 f5 f9 ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c929:	50                   	push   eax
c001c92a:	e8 38 9c fe ff       	call   c0006567 <f_mkdir>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c939:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c940:	85 c0                	test   eax,eax
c001c942:	75 08                	jne    c001c94c <FAT::mkdir(char const*)+0x70>
c001c944:	b8 00 00 00 00       	mov    eax,0x0
c001c949:	eb 09                	jmp    c001c954 <FAT::mkdir(char const*)+0x78>
c001c94b:	90                   	nop
c001c94c:	b8 01 00 00 00       	mov    eax,0x1
c001c951:	8d 76 00             	lea    esi,[esi+0x0]
c001c954:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c95a:	c3                   	ret    
c001c95b:	90                   	nop

c001c95c <FAT::exists(char const*)>:
c001c95c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c962:	83 ec 08             	sub    esp,0x8
c001c965:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c96c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c970:	50                   	push   eax
c001c971:	e8 da 3d fe ff       	call   c0000750 <strcpy>
c001c976:	83 c4 10             	add    esp,0x10
c001c979:	83 ec 08             	sub    esp,0x8
c001c97c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c980:	50                   	push   eax
c001c981:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c988:	e8 87 f9 ff ff       	call   c001c314 <FAT::fixFilepath(char*)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	83 ec 08             	sub    esp,0x8
c001c993:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c99a:	50                   	push   eax
c001c99b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c99f:	50                   	push   eax
c001c9a0:	e8 ed 96 fe ff       	call   c0006092 <f_stat>
c001c9a5:	83 c4 10             	add    esp,0x10
c001c9a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c9af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c9b6:	85 c0                	test   eax,eax
c001c9b8:	75 06                	jne    c001c9c0 <FAT::exists(char const*)+0x64>
c001c9ba:	b0 01                	mov    al,0x1
c001c9bc:	eb 06                	jmp    c001c9c4 <FAT::exists(char const*)+0x68>
c001c9be:	66 90                	xchg   ax,ax
c001c9c0:	b0 00                	mov    al,0x0
c001c9c2:	66 90                	xchg   ax,ax
c001c9c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c9ca:	c3                   	ret    
c001c9cb:	90                   	nop

c001c9cc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c9cc:	b8 08 00 00 00       	mov    eax,0x8
c001c9d1:	c3                   	ret    

c001c9d2 <ISO9660::seek(void*, unsigned long long)>:
c001c9d2:	53                   	push   ebx
c001c9d3:	b8 04 00 00 00       	mov    eax,0x4
c001c9d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c9e4:	85 d2                	test   edx,edx
c001c9e6:	74 17                	je     c001c9ff <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9e8:	89 c8                	mov    eax,ecx
c001c9ea:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c9ed:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c9f0:	b8 01 00 00 00       	mov    eax,0x1
c001c9f5:	73 08                	jae    c001c9ff <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9f7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c9fa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c9fd:	31 c0                	xor    eax,eax
c001c9ff:	5b                   	pop    ebx
c001ca00:	c3                   	ret    
c001ca01:	90                   	nop

c001ca02 <ISO9660::tell(void*, unsigned long long*)>:
c001ca02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca0a:	85 d2                	test   edx,edx
c001ca0c:	74 12                	je     c001ca20 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ca0e:	85 c0                	test   eax,eax
c001ca10:	74 0e                	je     c001ca20 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ca12:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ca15:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ca18:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ca1b:	89 10                	mov    DWORD PTR [eax],edx
c001ca1d:	31 c0                	xor    eax,eax
c001ca1f:	c3                   	ret    
c001ca20:	b8 04 00 00 00       	mov    eax,0x4
c001ca25:	c3                   	ret    

c001ca26 <ISO9660::getName()>:
c001ca26:	b8 bc 70 02 c0       	mov    eax,0xc00270bc
c001ca2b:	c3                   	ret    

c001ca2c <ISO9660::stat(void*, unsigned long long*)>:
c001ca2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca34:	85 d2                	test   edx,edx
c001ca36:	74 12                	je     c001ca4a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca38:	85 c0                	test   eax,eax
c001ca3a:	74 0e                	je     c001ca4a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca3c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ca3f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ca42:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ca45:	89 10                	mov    DWORD PTR [eax],edx
c001ca47:	31 c0                	xor    eax,eax
c001ca49:	c3                   	ret    
c001ca4a:	b8 04 00 00 00       	mov    eax,0x4
c001ca4f:	c3                   	ret    

c001ca50 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ca50:	b8 01 00 00 00       	mov    eax,0x1
c001ca55:	c3                   	ret    

c001ca56 <ISO9660::unlink(char const*)>:
c001ca56:	b8 01 00 00 00       	mov    eax,0x1
c001ca5b:	c3                   	ret    

c001ca5c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ca5c:	b8 01 00 00 00       	mov    eax,0x1
c001ca61:	c3                   	ret    

c001ca62 <ISO9660::rename(char const*, char const*)>:
c001ca62:	b8 01 00 00 00       	mov    eax,0x1
c001ca67:	c3                   	ret    

c001ca68 <ISO9660::mkdir(char const*)>:
c001ca68:	b8 01 00 00 00       	mov    eax,0x1
c001ca6d:	c3                   	ret    

c001ca6e <ISO9660::close(void*)>:
c001ca6e:	83 ec 0c             	sub    esp,0xc
c001ca71:	b8 04 00 00 00       	mov    eax,0x4
c001ca76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca7a:	85 d2                	test   edx,edx
c001ca7c:	74 0e                	je     c001ca8c <ISO9660::close(void*)+0x1e>
c001ca7e:	83 ec 0c             	sub    esp,0xc
c001ca81:	52                   	push   edx
c001ca82:	e8 70 d3 fe ff       	call   c0009df7 <free>
c001ca87:	83 c4 10             	add    esp,0x10
c001ca8a:	31 c0                	xor    eax,eax
c001ca8c:	83 c4 0c             	add    esp,0xc
c001ca8f:	c3                   	ret    

c001ca90 <ISO9660::closeDir(void*)>:
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	b8 04 00 00 00       	mov    eax,0x4
c001ca98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca9c:	85 d2                	test   edx,edx
c001ca9e:	74 0e                	je     c001caae <ISO9660::closeDir(void*)+0x1e>
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	52                   	push   edx
c001caa4:	e8 4e d3 fe ff       	call   c0009df7 <free>
c001caa9:	83 c4 10             	add    esp,0x10
c001caac:	31 c0                	xor    eax,eax
c001caae:	83 c4 0c             	add    esp,0xc
c001cab1:	c3                   	ret    

c001cab2 <ISO9660::~ISO9660()>:
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	ba e0 70 02 c0       	mov    edx,0xc00270e0
c001caba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabe:	89 10                	mov    DWORD PTR [eax],edx
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	50                   	push   eax
c001cac8:	e8 b7 09 ff ff       	call   c000d484 <Filesystem::~Filesystem()>
c001cacd:	83 c4 10             	add    esp,0x10
c001cad0:	90                   	nop
c001cad1:	83 c4 0c             	add    esp,0xc
c001cad4:	c3                   	ret    
c001cad5:	90                   	nop

c001cad6 <ISO9660::~ISO9660()>:
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	83 ec 0c             	sub    esp,0xc
c001cadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae0:	e8 cd ff ff ff       	call   c001cab2 <ISO9660::~ISO9660()>
c001cae5:	83 c4 10             	add    esp,0x10
c001cae8:	83 ec 08             	sub    esp,0x8
c001caeb:	6a 08                	push   0x8
c001caed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf1:	e8 72 05 ff ff       	call   c000d068 <operator delete(void*, unsigned long)>
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	83 c4 0c             	add    esp,0xc
c001cafc:	c3                   	ret    

c001cafd <__memmem(unsigned char*, int, unsigned char*, int)>:
c001cafd:	55                   	push   ebp
c001cafe:	31 c9                	xor    ecx,ecx
c001cb00:	57                   	push   edi
c001cb01:	56                   	push   esi
c001cb02:	53                   	push   ebx
c001cb03:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001cb07:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cb0b:	89 eb                	mov    ebx,ebp
c001cb0d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001cb11:	39 ce                	cmp    esi,ecx
c001cb13:	7e 17                	jle    c001cb2c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001cb15:	31 d2                	xor    edx,edx
c001cb17:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001cb1b:	7d 13                	jge    c001cb30 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001cb1d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cb21:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cb24:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001cb27:	75 0d                	jne    c001cb36 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001cb29:	42                   	inc    edx
c001cb2a:	eb eb                	jmp    c001cb17 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001cb2c:	31 c0                	xor    eax,eax
c001cb2e:	eb 0a                	jmp    c001cb3a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb30:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001cb34:	eb 04                	jmp    c001cb3a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb36:	41                   	inc    ecx
c001cb37:	43                   	inc    ebx
c001cb38:	eb d7                	jmp    c001cb11 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001cb3a:	5b                   	pop    ebx
c001cb3b:	5e                   	pop    esi
c001cb3c:	5f                   	pop    edi
c001cb3d:	5d                   	pop    ebp
c001cb3e:	c3                   	ret    

c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cb3f:	57                   	push   edi
c001cb40:	56                   	push   esi
c001cb41:	53                   	push   ebx
c001cb42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cb4e:	39 35 60 a3 02 c0    	cmp    DWORD PTR ds:0xc002a360,esi
c001cb54:	75 08                	jne    c001cb5e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cb56:	38 1d 74 86 02 c0    	cmp    BYTE PTR ds:0xc0028674,bl
c001cb5c:	74 4a                	je     c001cba8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb5e:	83 ec 0c             	sub    esp,0xc
c001cb61:	31 d2                	xor    edx,edx
c001cb63:	68 80 a3 02 c0       	push   0xc002a380
c001cb68:	0f be c3             	movsx  eax,bl
c001cb6b:	6a 01                	push   0x1
c001cb6d:	52                   	push   edx
c001cb6e:	56                   	push   esi
c001cb6f:	ff 34 85 fc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f04]
c001cb76:	e8 4f 3f ff ff       	call   c0010aca <LogicalDisk::read(unsigned long long, int, void*)>
c001cb7b:	83 c4 20             	add    esp,0x20
c001cb7e:	85 c0                	test   eax,eax
c001cb80:	75 0e                	jne    c001cb90 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cb82:	89 35 60 a3 02 c0    	mov    DWORD PTR ds:0xc002a360,esi
c001cb88:	88 1d 74 86 02 c0    	mov    BYTE PTR ds:0xc0028674,bl
c001cb8e:	eb 18                	jmp    c001cba8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb90:	50                   	push   eax
c001cb91:	68 00 08 00 00       	push   0x800
c001cb96:	6a 00                	push   0x0
c001cb98:	57                   	push   edi
c001cb99:	e8 f6 3a fe ff       	call   c0000694 <memset>
c001cb9e:	83 c4 10             	add    esp,0x10
c001cba1:	b8 01 00 00 00       	mov    eax,0x1
c001cba6:	eb 0e                	jmp    c001cbb6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cba8:	be 80 a3 02 c0       	mov    esi,0xc002a380
c001cbad:	b9 00 08 00 00       	mov    ecx,0x800
c001cbb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbb4:	31 c0                	xor    eax,eax
c001cbb6:	5b                   	pop    ebx
c001cbb7:	5e                   	pop    esi
c001cbb8:	5f                   	pop    edi
c001cbb9:	c3                   	ret    

c001cbba <ISO9660::tryMount(LogicalDisk*, int)>:
c001cbba:	81 ec 10 08 00 00    	sub    esp,0x810
c001cbc0:	c7 05 60 a3 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a360,0xdeadbeef
c001cbca:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cbd1:	83 c0 41             	add    eax,0x41
c001cbd4:	0f be c0             	movsx  eax,al
c001cbd7:	50                   	push   eax
c001cbd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cbdc:	50                   	push   eax
c001cbdd:	6a 10                	push   0x10
c001cbdf:	e8 5b ff ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cbe4:	83 c4 10             	add    esp,0x10
c001cbe7:	31 d2                	xor    edx,edx
c001cbe9:	85 c0                	test   eax,eax
c001cbeb:	75 24                	jne    c001cc11 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbed:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cbf2:	75 1d                	jne    c001cc11 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbf4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cbf9:	75 16                	jne    c001cc11 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbfb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cc00:	75 0f                	jne    c001cc11 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc02:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cc07:	75 08                	jne    c001cc11 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc09:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cc0e:	0f 94 c2             	sete   dl
c001cc11:	88 d0                	mov    al,dl
c001cc13:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cc19:	c3                   	ret    

c001cc1a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cc1a:	55                   	push   ebp
c001cc1b:	57                   	push   edi
c001cc1c:	56                   	push   esi
c001cc1d:	53                   	push   ebx
c001cc1e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cc24:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cc2b:	85 ed                	test   ebp,ebp
c001cc2d:	0f 84 da 01 00 00    	je     c001ce0d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc33:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cc3b:	0f 84 cc 01 00 00    	je     c001ce0d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc41:	b8 01 00 00 00       	mov    eax,0x1
c001cc46:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cc4a:	0f 85 c2 01 00 00    	jne    c001ce12 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cc50:	31 d2                	xor    edx,edx
c001cc52:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cc59:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc5c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cc5f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cc62:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc69:	01 c8                	add    eax,ecx
c001cc6b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc6e:	11 da                	adc    edx,ebx
c001cc70:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cc74:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cc78:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc80:	19 d7                	sbb    edi,edx
c001cc82:	72 11                	jb     c001cc95 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cc84:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cc87:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cc8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc93:	eb 0c                	jmp    c001cca1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001cc95:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001cc99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc9d:	29 ce                	sub    esi,ecx
c001cc9f:	19 df                	sbb    edi,ebx
c001cca1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cca4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001cca7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ccab:	c1 e0 0b             	shl    eax,0xb
c001ccae:	01 c8                	add    eax,ecx
c001ccb0:	11 da                	adc    edx,ebx
c001ccb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ccb9:	51                   	push   ecx
c001ccba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ccbe:	50                   	push   eax
c001ccbf:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ccc3:	53                   	push   ebx
c001ccc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ccc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cccc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ccd0:	50                   	push   eax
c001ccd1:	e8 69 fe ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ccd9:	b8 00 08 00 00       	mov    eax,0x800
c001ccde:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cce4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cce8:	29 d0                	sub    eax,edx
c001ccea:	83 c4 10             	add    esp,0x10
c001cced:	89 f9                	mov    ecx,edi
c001ccef:	39 c6                	cmp    esi,eax
c001ccf1:	83 d9 00             	sbb    ecx,0x0
c001ccf4:	7d 1b                	jge    c001cd11 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ccf6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ccfb:	75 12                	jne    c001cd0f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ccfd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cd04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd0a:	e9 fa 00 00 00       	jmp    c001ce09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001cd0f:	89 f0                	mov    eax,esi
c001cd11:	01 d3                	add    ebx,edx
c001cd13:	31 d2                	xor    edx,edx
c001cd15:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cd19:	39 c2                	cmp    edx,eax
c001cd1b:	7d 14                	jge    c001cd31 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cd1d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cd24:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cd28:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cd2b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cd2e:	42                   	inc    edx
c001cd2f:	eb e8                	jmp    c001cd19 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cd31:	89 c2                	mov    edx,eax
c001cd33:	85 c0                	test   eax,eax
c001cd35:	79 02                	jns    c001cd39 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cd37:	31 d2                	xor    edx,edx
c001cd39:	01 c2                	add    edx,eax
c001cd3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001cd3e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001cd45:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cd49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cd4d:	99                   	cdq    
c001cd4e:	01 c1                	add    ecx,eax
c001cd50:	11 d3                	adc    ebx,edx
c001cd52:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cd56:	29 c6                	sub    esi,eax
c001cd58:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cd5c:	19 d7                	sbb    edi,edx
c001cd5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd61:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cd65:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cd6a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cd6d:	b8 00 00 00 00       	mov    eax,0x0
c001cd72:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cd76:	7d 43                	jge    c001cdbb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cd78:	52                   	push   edx
c001cd79:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd7d:	50                   	push   eax
c001cd7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd8a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cd8e:	50                   	push   eax
c001cd8f:	e8 ab fd ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd94:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cd9c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cda1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cda9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cdb1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	eb aa                	jmp    c001cd65 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cdbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdbf:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cdc2:	74 2a                	je     c001cdee <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cdc4:	50                   	push   eax
c001cdc5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cdc9:	50                   	push   eax
c001cdca:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cdce:	56                   	push   esi
c001cdcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdd3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cdd7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cddb:	51                   	push   ecx
c001cddc:	e8 5e fd ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cde1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cde5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cde9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cdf5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cdf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdfd:	89 18                	mov    DWORD PTR [eax],ebx
c001cdff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce03:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce06:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce09:	31 c0                	xor    eax,eax
c001ce0b:	eb 05                	jmp    c001ce12 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ce0d:	b8 04 00 00 00       	mov    eax,0x4
c001ce12:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ce18:	5b                   	pop    ebx
c001ce19:	5e                   	pop    esi
c001ce1a:	5f                   	pop    edi
c001ce1b:	5d                   	pop    ebp
c001ce1c:	c3                   	ret    
c001ce1d:	90                   	nop

c001ce1e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ce1e:	55                   	push   ebp
c001ce1f:	57                   	push   edi
c001ce20:	56                   	push   esi
c001ce21:	53                   	push   ebx
c001ce22:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001ce28:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001ce2f:	85 ed                	test   ebp,ebp
c001ce31:	0f 84 51 02 00 00    	je     c001d088 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce37:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001ce3f:	0f 84 43 02 00 00    	je     c001d088 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce48:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001ce4b:	75 0a                	jne    c001ce57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ce4d:	b8 07 00 00 00       	mov    eax,0x7
c001ce52:	e9 36 02 00 00       	jmp    c001d08d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce57:	50                   	push   eax
c001ce58:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce5c:	50                   	push   eax
c001ce5d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce64:	53                   	push   ebx
c001ce65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce68:	c1 e0 0b             	shl    eax,0xb
c001ce6b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001ce6e:	c1 e8 0b             	shr    eax,0xb
c001ce71:	50                   	push   eax
c001ce72:	e8 c8 fc ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce7a:	83 c4 10             	add    esp,0x10
c001ce7d:	89 c1                	mov    ecx,eax
c001ce7f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ce82:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce88:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ce8b:	84 db                	test   bl,bl
c001ce8d:	0f 85 8b 00 00 00    	jne    c001cf1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ce93:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ce99:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ce9c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cea2:	29 c6                	sub    esi,eax
c001cea4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cea8:	89 f3                	mov    ebx,esi
c001ceaa:	89 f1                	mov    ecx,esi
c001ceac:	c1 fb 1f             	sar    ebx,0x1f
c001ceaf:	01 f0                	add    eax,esi
c001ceb1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ceb4:	11 da                	adc    edx,ebx
c001ceb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ceb9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cebd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cec0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cec3:	89 d8                	mov    eax,ebx
c001cec5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cec9:	ba 00 00 00 00       	mov    edx,0x0
c001cece:	19 f8                	sbb    eax,edi
c001ced0:	b8 00 00 00 00       	mov    eax,0x0
c001ced5:	73 08                	jae    c001cedf <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ced7:	89 f0                	mov    eax,esi
c001ced9:	89 fa                	mov    edx,edi
c001cedb:	29 c8                	sub    eax,ecx
c001cedd:	19 da                	sbb    edx,ebx
c001cedf:	89 d7                	mov    edi,edx
c001cee1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cee4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cee7:	09 c7                	or     edi,eax
c001cee9:	0f 84 5e ff ff ff    	je     c001ce4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ceef:	57                   	push   edi
c001cef0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cef4:	50                   	push   eax
c001cef5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cefc:	53                   	push   ebx
c001cefd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf00:	c1 e0 0b             	shl    eax,0xb
c001cf03:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cf07:	c1 e8 0b             	shr    eax,0xb
c001cf0a:	50                   	push   eax
c001cf0b:	e8 2f fc ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	25 ff 07 00 00       	and    eax,0x7ff
c001cf1b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001cf1e:	31 ff                	xor    edi,edi
c001cf20:	56                   	push   esi
c001cf21:	6a 28                	push   0x28
c001cf23:	6a 00                	push   0x0
c001cf25:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cf29:	50                   	push   eax
c001cf2a:	e8 65 37 fe ff       	call   c0000694 <memset>
c001cf2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf32:	25 ff 07 00 00       	and    eax,0x7ff
c001cf37:	89 c6                	mov    esi,eax
c001cf39:	83 c6 21             	add    esi,0x21
c001cf3c:	83 d7 00             	adc    edi,0x0
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	31 c9                	xor    ecx,ecx
c001cf44:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cf4b:	83 f9 28             	cmp    ecx,0x28
c001cf4e:	88 04 24             	mov    BYTE PTR [esp],al
c001cf51:	0f 94 c2             	sete   dl
c001cf54:	88 d0                	mov    al,dl
c001cf56:	ba ff 07 00 00       	mov    edx,0x7ff
c001cf5b:	39 f2                	cmp    edx,esi
c001cf5d:	ba 00 00 00 00       	mov    edx,0x0
c001cf62:	19 fa                	sbb    edx,edi
c001cf64:	0f 92 c2             	setb   dl
c001cf67:	09 c2                	or     edx,eax
c001cf69:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cf6d:	0f 94 c0             	sete   al
c001cf70:	08 d0                	or     al,dl
c001cf72:	75 16                	jne    c001cf8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf74:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cf78:	74 10                	je     c001cf8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf7d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cf81:	41                   	inc    ecx
c001cf82:	83 c6 01             	add    esi,0x1
c001cf85:	83 d7 00             	adc    edi,0x0
c001cf88:	eb ba                	jmp    c001cf44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cf8a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cf98:	56                   	push   esi
c001cf99:	e8 12 37 fe ff       	call   c00006b0 <strlen>
c001cf9e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cfa5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cfa9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cfb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cfb4:	5a                   	pop    edx
c001cfb5:	25 ff 07 00 00       	and    eax,0x7ff
c001cfba:	59                   	pop    ecx
c001cfbb:	01 f8                	add    eax,edi
c001cfbd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cfc3:	83 e0 02             	and    eax,0x2
c001cfc6:	3c 01                	cmp    al,0x1
c001cfc8:	19 c0                	sbb    eax,eax
c001cfca:	83 c0 02             	add    eax,0x2
c001cfcd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cfd1:	56                   	push   esi
c001cfd2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfd6:	50                   	push   eax
c001cfd7:	e8 74 37 fe ff       	call   c0000750 <strcpy>
c001cfdc:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	84 c0                	test   al,al
c001cfe5:	75 21                	jne    c001d008 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cfe7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cfef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cff7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cfff:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001d006:	eb 28                	jmp    c001d030 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001d008:	fe c8                	dec    al
c001d00a:	75 24                	jne    c001d030 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001d00c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001d014:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d01c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001d024:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001d02b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001d030:	8d 74 24 40          	lea    esi,[esp+0x40]
c001d034:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001d03b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001d042:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d044:	0f b6 f3             	movzx  esi,bl
c001d047:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001d04e:	31 db                	xor    ebx,ebx
c001d050:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d056:	89 df                	mov    edi,ebx
c001d058:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001d05b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d05e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001d061:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d064:	39 c6                	cmp    esi,eax
c001d066:	19 d7                	sbb    edi,edx
c001d068:	72 10                	jb     c001d07a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001d06a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001d071:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001d078:	eb 0a                	jmp    c001d084 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001d07a:	29 f0                	sub    eax,esi
c001d07c:	19 da                	sbb    edx,ebx
c001d07e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001d081:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001d084:	31 c0                	xor    eax,eax
c001d086:	eb 05                	jmp    c001d08d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d088:	b8 04 00 00 00       	mov    eax,0x4
c001d08d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d093:	5b                   	pop    ebx
c001d094:	5e                   	pop    esi
c001d095:	5f                   	pop    edi
c001d096:	5d                   	pop    ebp
c001d097:	c3                   	ret    

c001d098 <readRoot(unsigned int*, unsigned int*, char)>:
c001d098:	57                   	push   edi
c001d099:	56                   	push   esi
c001d09a:	81 ec 38 08 00 00    	sub    esp,0x838
c001d0a0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d0a8:	50                   	push   eax
c001d0a9:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d0ad:	50                   	push   eax
c001d0ae:	6a 10                	push   0x10
c001d0b0:	e8 8a fa ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d0b5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d0bc:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d0c0:	b9 22 00 00 00       	mov    ecx,0x22
c001d0c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0c7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d0ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0d2:	89 10                	mov    DWORD PTR [eax],edx
c001d0d4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d0db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d0df:	89 10                	mov    DWORD PTR [eax],edx
c001d0e1:	81 c4 44 08 00 00    	add    esp,0x844
c001d0e7:	b0 01                	mov    al,0x1
c001d0e9:	5e                   	pop    esi
c001d0ea:	5f                   	pop    edi
c001d0eb:	c3                   	ret    

c001d0ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d0ec:	55                   	push   ebp
c001d0ed:	57                   	push   edi
c001d0ee:	56                   	push   esi
c001d0ef:	53                   	push   ebx
c001d0f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0f6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d0fd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d104:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d108:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d10c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d110:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d114:	75 03                	jne    c001d119 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d116:	83 c3 02             	add    ebx,0x2
c001d119:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d11c:	75 03                	jne    c001d121 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d11e:	43                   	inc    ebx
c001d11f:	eb f8                	jmp    c001d119 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d121:	52                   	push   edx
c001d122:	68 00 01 00 00       	push   0x100
c001d127:	6a 00                	push   0x0
c001d129:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d12d:	50                   	push   eax
c001d12e:	e8 61 35 fe ff       	call   c0000694 <memset>
c001d133:	83 c4 10             	add    esp,0x10
c001d136:	31 d2                	xor    edx,edx
c001d138:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d13b:	84 c0                	test   al,al
c001d13d:	74 21                	je     c001d160 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d13f:	3c 2f                	cmp    al,0x2f
c001d141:	75 0b                	jne    c001d14e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d143:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d147:	bd 01 00 00 00       	mov    ebp,0x1
c001d14c:	eb 14                	jmp    c001d162 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d14e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d151:	80 f9 19             	cmp    cl,0x19
c001d154:	77 03                	ja     c001d159 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d156:	83 e8 20             	sub    eax,0x20
c001d159:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d15d:	42                   	inc    edx
c001d15e:	eb d8                	jmp    c001d138 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d160:	31 ed                	xor    ebp,ebp
c001d162:	83 ec 0c             	sub    esp,0xc
c001d165:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d16c:	e8 76 cc fe ff       	call   c0009de7 <malloc>
c001d171:	89 c6                	mov    esi,eax
c001d173:	89 c2                	mov    edx,eax
c001d175:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d17c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d182:	c1 ef 0b             	shr    edi,0xb
c001d185:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d18c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d190:	83 c4 10             	add    esp,0x10
c001d193:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d19c:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d1a3:	74 29                	je     c001d1ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d1a5:	50                   	push   eax
c001d1a6:	57                   	push   edi
c001d1a7:	52                   	push   edx
c001d1a8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d1ac:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d1b3:	e8 87 f9 ff ff       	call   c001cb3f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d1b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1bc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d1c3:	81 c2 00 08 00 00    	add    edx,0x800
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	eb ca                	jmp    c001d198 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d1ce:	83 ec 0c             	sub    esp,0xc
c001d1d1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d1d5:	57                   	push   edi
c001d1d6:	e8 d5 34 fe ff       	call   c00006b0 <strlen>
c001d1db:	50                   	push   eax
c001d1dc:	57                   	push   edi
c001d1dd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d1e4:	56                   	push   esi
c001d1e5:	e8 13 f9 ff ff       	call   c001cafd <__memmem(unsigned char*, int, unsigned char*, int)>
c001d1ea:	83 c4 20             	add    esp,0x20
c001d1ed:	85 c0                	test   eax,eax
c001d1ef:	75 13                	jne    c001d204 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d1f1:	83 ec 0c             	sub    esp,0xc
c001d1f4:	56                   	push   esi
c001d1f5:	e8 fd cb fe ff       	call   c0009df7 <free>
c001d1fa:	83 c4 10             	add    esp,0x10
c001d1fd:	31 c0                	xor    eax,eax
c001d1ff:	e9 b3 00 00 00       	jmp    c001d2b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d204:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d208:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d20c:	c1 e7 08             	shl    edi,0x8
c001d20f:	c1 e2 10             	shl    edx,0x10
c001d212:	09 d7                	or     edi,edx
c001d214:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d218:	09 d7                	or     edi,edx
c001d21a:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d21e:	c1 e2 18             	shl    edx,0x18
c001d221:	09 d7                	or     edi,edx
c001d223:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d227:	89 d1                	mov    ecx,edx
c001d229:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d22d:	c1 e1 08             	shl    ecx,0x8
c001d230:	c1 e2 10             	shl    edx,0x10
c001d233:	09 ca                	or     edx,ecx
c001d235:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d239:	09 ca                	or     edx,ecx
c001d23b:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d23f:	c1 e1 18             	shl    ecx,0x18
c001d242:	09 ca                	or     edx,ecx
c001d244:	89 e9                	mov    ecx,ebp
c001d246:	84 c9                	test   cl,cl
c001d248:	74 3c                	je     c001d286 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d24a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d24e:	83 ec 0c             	sub    esp,0xc
c001d251:	56                   	push   esi
c001d252:	e8 a0 cb fe ff       	call   c0009df7 <free>
c001d257:	83 c4 0c             	add    esp,0xc
c001d25a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d261:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d266:	50                   	push   eax
c001d267:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d26e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d279:	52                   	push   edx
c001d27a:	57                   	push   edi
c001d27b:	53                   	push   ebx
c001d27c:	e8 6b fe ff ff       	call   c001d0ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d281:	83 c4 20             	add    esp,0x20
c001d284:	eb 31                	jmp    c001d2b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d286:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d289:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d290:	d0 e8                	shr    al,1
c001d292:	89 3b                	mov    DWORD PTR [ebx],edi
c001d294:	83 e0 01             	and    eax,0x1
c001d297:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d29e:	83 ec 0c             	sub    esp,0xc
c001d2a1:	89 13                	mov    DWORD PTR [ebx],edx
c001d2a3:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d2aa:	89 03                	mov    DWORD PTR [ebx],eax
c001d2ac:	56                   	push   esi
c001d2ad:	e8 45 cb fe ff       	call   c0009df7 <free>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	b0 01                	mov    al,0x1
c001d2b7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d2bd:	5b                   	pop    ebx
c001d2be:	5e                   	pop    esi
c001d2bf:	5f                   	pop    edi
c001d2c0:	5d                   	pop    ebp
c001d2c1:	c3                   	ret    

c001d2c2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d2c2:	55                   	push   ebp
c001d2c3:	57                   	push   edi
c001d2c4:	56                   	push   esi
c001d2c5:	53                   	push   ebx
c001d2c6:	83 ec 20             	sub    esp,0x20
c001d2c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2cd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d2d1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d2d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d2dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d2e5:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d2ea:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d2f0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d2f6:	57                   	push   edi
c001d2f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d2fb:	50                   	push   eax
c001d2fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d300:	50                   	push   eax
c001d301:	e8 92 fd ff ff       	call   c001d098 <readRoot(unsigned int*, unsigned int*, char)>
c001d306:	5a                   	pop    edx
c001d307:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d30b:	e8 a0 33 fe ff       	call   c00006b0 <strlen>
c001d310:	83 c4 10             	add    esp,0x10
c001d313:	83 f8 03             	cmp    eax,0x3
c001d316:	77 17                	ja     c001d32f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d31c:	89 03                	mov    DWORD PTR [ebx],eax
c001d31e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d322:	89 06                	mov    DWORD PTR [esi],eax
c001d324:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d32b:	b0 01                	mov    al,0x1
c001d32d:	eb 19                	jmp    c001d348 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d32f:	50                   	push   eax
c001d330:	55                   	push   ebp
c001d331:	57                   	push   edi
c001d332:	56                   	push   esi
c001d333:	53                   	push   ebx
c001d334:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d338:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d33c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d340:	e8 a7 fd ff ff       	call   c001d0ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d345:	83 c4 20             	add    esp,0x20
c001d348:	83 c4 1c             	add    esp,0x1c
c001d34b:	5b                   	pop    ebx
c001d34c:	5e                   	pop    esi
c001d34d:	5f                   	pop    edi
c001d34e:	5d                   	pop    ebp
c001d34f:	c3                   	ret    

c001d350 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d350:	57                   	push   edi
c001d351:	56                   	push   esi
c001d352:	53                   	push   ebx
c001d353:	83 ec 10             	sub    esp,0x10
c001d356:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d35a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d35e:	85 ff                	test   edi,edi
c001d360:	0f 84 8b 00 00 00    	je     c001d3f1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d366:	85 f6                	test   esi,esi
c001d368:	0f 84 83 00 00 00    	je     c001d3f1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d36e:	b8 03 00 00 00       	mov    eax,0x3
c001d373:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d378:	75 7c                	jne    c001d3f6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	6a 1c                	push   0x1c
c001d37f:	e8 63 ca fe ff       	call   c0009de7 <malloc>
c001d384:	89 07                	mov    DWORD PTR [edi],eax
c001d386:	89 c3                	mov    ebx,eax
c001d388:	58                   	pop    eax
c001d389:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d38d:	50                   	push   eax
c001d38e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d391:	50                   	push   eax
c001d392:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d396:	50                   	push   eax
c001d397:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d39b:	50                   	push   eax
c001d39c:	56                   	push   esi
c001d39d:	e8 20 ff ff ff       	call   c001d2c2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3a2:	83 c4 20             	add    esp,0x20
c001d3a5:	84 c0                	test   al,al
c001d3a7:	74 07                	je     c001d3b0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d3a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d3ae:	74 0b                	je     c001d3bb <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d3b0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d3b4:	b8 01 00 00 00       	mov    eax,0x1
c001d3b9:	eb 3b                	jmp    c001d3f6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3bf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d3c3:	89 03                	mov    DWORD PTR [ebx],eax
c001d3c5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d3d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d3de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d3e1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d3e8:	8a 06                	mov    al,BYTE PTR [esi]
c001d3ea:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d3ed:	31 c0                	xor    eax,eax
c001d3ef:	eb 05                	jmp    c001d3f6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d3f1:	b8 04 00 00 00       	mov    eax,0x4
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	5b                   	pop    ebx
c001d3fa:	5e                   	pop    esi
c001d3fb:	5f                   	pop    edi
c001d3fc:	c3                   	ret    
c001d3fd:	90                   	nop

c001d3fe <ISO9660::exists(char const*)>:
c001d3fe:	83 ec 28             	sub    esp,0x28
c001d401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d405:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d409:	52                   	push   edx
c001d40a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d40d:	52                   	push   edx
c001d40e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d412:	52                   	push   edx
c001d413:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d417:	52                   	push   edx
c001d418:	50                   	push   eax
c001d419:	e8 a4 fe ff ff       	call   c001d2c2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d41e:	83 c4 3c             	add    esp,0x3c
c001d421:	c3                   	ret    

c001d422 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d422:	56                   	push   esi
c001d423:	53                   	push   ebx
c001d424:	83 ec 14             	sub    esp,0x14
c001d427:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d42b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d42f:	85 db                	test   ebx,ebx
c001d431:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d435:	0f 94 c2             	sete   dl
c001d438:	85 f6                	test   esi,esi
c001d43a:	0f 94 c0             	sete   al
c001d43d:	08 c2                	or     dl,al
c001d43f:	75 68                	jne    c001d4a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d441:	85 c9                	test   ecx,ecx
c001d443:	74 64                	je     c001d4a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d44b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d44f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d455:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d45c:	50                   	push   eax
c001d45d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d460:	50                   	push   eax
c001d461:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d465:	50                   	push   eax
c001d466:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d46a:	50                   	push   eax
c001d46b:	51                   	push   ecx
c001d46c:	e8 51 fe ff ff       	call   c001d2c2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d471:	83 c4 20             	add    esp,0x20
c001d474:	ba 01 00 00 00       	mov    edx,0x1
c001d479:	84 c0                	test   al,al
c001d47b:	74 31                	je     c001d4ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d47d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d481:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d488:	89 03                	mov    DWORD PTR [ebx],eax
c001d48a:	ba 00 00 00 00       	mov    edx,0x0
c001d48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d493:	85 c0                	test   eax,eax
c001d495:	0f 95 06             	setne  BYTE PTR [esi]
c001d498:	74 14                	je     c001d4ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d49a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d4a0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4a7:	eb 05                	jmp    c001d4ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d4a9:	ba 04 00 00 00       	mov    edx,0x4
c001d4ae:	83 c4 14             	add    esp,0x14
c001d4b1:	89 d0                	mov    eax,edx
c001d4b3:	5b                   	pop    ebx
c001d4b4:	5e                   	pop    esi
c001d4b5:	c3                   	ret    

c001d4b6 <ISO9660::openDir(char const*, void**)>:
c001d4b6:	57                   	push   edi
c001d4b7:	56                   	push   esi
c001d4b8:	53                   	push   ebx
c001d4b9:	83 ec 10             	sub    esp,0x10
c001d4bc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d4c0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d4c4:	85 ff                	test   edi,edi
c001d4c6:	74 7b                	je     c001d543 <ISO9660::openDir(char const*, void**)+0x8d>
c001d4c8:	85 f6                	test   esi,esi
c001d4ca:	74 77                	je     c001d543 <ISO9660::openDir(char const*, void**)+0x8d>
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	6a 1c                	push   0x1c
c001d4d1:	e8 11 c9 fe ff       	call   c0009de7 <malloc>
c001d4d6:	89 07                	mov    DWORD PTR [edi],eax
c001d4d8:	89 c3                	mov    ebx,eax
c001d4da:	58                   	pop    eax
c001d4db:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d4df:	50                   	push   eax
c001d4e0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d4e3:	50                   	push   eax
c001d4e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4e8:	50                   	push   eax
c001d4e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4ed:	50                   	push   eax
c001d4ee:	56                   	push   esi
c001d4ef:	e8 ce fd ff ff       	call   c001d2c2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d4f4:	83 c4 20             	add    esp,0x20
c001d4f7:	84 c0                	test   al,al
c001d4f9:	74 07                	je     c001d502 <ISO9660::openDir(char const*, void**)+0x4c>
c001d4fb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d500:	75 0b                	jne    c001d50d <ISO9660::openDir(char const*, void**)+0x57>
c001d502:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d506:	b8 01 00 00 00       	mov    eax,0x1
c001d50b:	eb 3b                	jmp    c001d548 <ISO9660::openDir(char const*, void**)+0x92>
c001d50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d511:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d515:	89 03                	mov    DWORD PTR [ebx],eax
c001d517:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d51e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d522:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d529:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d530:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d533:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d53a:	8a 06                	mov    al,BYTE PTR [esi]
c001d53c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d53f:	31 c0                	xor    eax,eax
c001d541:	eb 05                	jmp    c001d548 <ISO9660::openDir(char const*, void**)+0x92>
c001d543:	b8 04 00 00 00       	mov    eax,0x4
c001d548:	83 c4 10             	add    esp,0x10
c001d54b:	5b                   	pop    ebx
c001d54c:	5e                   	pop    esi
c001d54d:	5f                   	pop    edi
c001d54e:	c3                   	ret    
c001d54f:	90                   	nop

c001d550 <ISO9660::ISO9660()>:
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	50                   	push   eax
c001d55b:	e8 00 ff fe ff       	call   c000d460 <Filesystem::Filesystem()>
c001d560:	83 c4 10             	add    esp,0x10
c001d563:	ba e0 70 02 c0       	mov    edx,0xc00270e0
c001d568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56c:	89 10                	mov    DWORD PTR [eax],edx
c001d56e:	90                   	nop
c001d56f:	83 c4 0c             	add    esp,0xc
c001d572:	c3                   	ret    
c001d573:	90                   	nop

c001d574 <SoundCard::beginPlayback()>:
c001d574:	c7 44 24 04 40 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027140
c001d57c:	e9 a8 7c ff ff       	jmp    c0015229 <Krnl::panic(char const*)>
c001d581:	90                   	nop

c001d582 <SoundCard::stopPlayback()>:
c001d582:	c7 44 24 04 74 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027174
c001d58a:	e9 9a 7c ff ff       	jmp    c0015229 <Krnl::panic(char const*)>
c001d58f:	90                   	nop

c001d590 <SoundCard::SoundCard(char const*)>:
c001d590:	83 ec 1c             	sub    esp,0x1c
c001d593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d597:	83 ec 08             	sub    esp,0x8
c001d59a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d59e:	50                   	push   eax
c001d59f:	e8 1a 13 ff ff       	call   c000e8be <Device::Device(char const*)>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	ba 0c 72 02 c0       	mov    edx,0xc002720c
c001d5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b0:	89 10                	mov    DWORD PTR [eax],edx
c001d5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cf:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d5d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5dd:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5eb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d5f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d5fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d602:	7f 19                	jg     c001d61d <SoundCard::SoundCard(char const*)+0x8d>
c001d604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d608:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d60c:	83 c2 54             	add    edx,0x54
c001d60f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d617:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d61b:	eb e0                	jmp    c001d5fd <SoundCard::SoundCard(char const*)+0x6d>
c001d61d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d621:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d628:	90                   	nop
c001d629:	83 c4 1c             	add    esp,0x1c
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <SoundCard::~SoundCard()>:
c001d62e:	83 ec 0c             	sub    esp,0xc
c001d631:	ba 0c 72 02 c0       	mov    edx,0xc002720c
c001d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63a:	89 10                	mov    DWORD PTR [eax],edx
c001d63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	50                   	push   eax
c001d644:	e8 3f 0f ff ff       	call   c000e588 <Device::~Device()>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	90                   	nop
c001d64d:	83 c4 0c             	add    esp,0xc
c001d650:	c3                   	ret    
c001d651:	90                   	nop

c001d652 <SoundCard::~SoundCard()>:
c001d652:	83 ec 0c             	sub    esp,0xc
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d65c:	e8 cd ff ff ff       	call   c001d62e <SoundCard::~SoundCard()>
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	83 ec 08             	sub    esp,0x8
c001d667:	68 e8 01 00 00       	push   0x1e8
c001d66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d670:	e8 f3 f9 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	83 c4 0c             	add    esp,0xc
c001d67b:	c3                   	ret    

c001d67c <SoundCard::configureRates(int, int, int)>:
c001d67c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d680:	31 c0                	xor    eax,eax
c001d682:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d689:	75 20                	jne    c001d6ab <SoundCard::configureRates(int, int, int)+0x2f>
c001d68b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d68f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d699:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d6a9:	b0 01                	mov    al,0x1
c001d6ab:	c3                   	ret    

c001d6ac <SoundCard::getSamples16(int, short*)>:
c001d6ac:	55                   	push   ebp
c001d6ad:	57                   	push   edi
c001d6ae:	31 ff                	xor    edi,edi
c001d6b0:	56                   	push   esi
c001d6b1:	53                   	push   ebx
c001d6b2:	31 db                	xor    ebx,ebx
c001d6b4:	83 ec 18             	sub    esp,0x18
c001d6b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6bf:	68 a7 71 02 c0       	push   0xc00271a7
c001d6c4:	e8 80 fa fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001d6c9:	83 c4 0c             	add    esp,0xc
c001d6cc:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6cf:	50                   	push   eax
c001d6d0:	6a 00                	push   0x0
c001d6d2:	55                   	push   ebp
c001d6d3:	e8 bc 2f fe ff       	call   c0000694 <memset>
c001d6d8:	83 c4 10             	add    esp,0x10
c001d6db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6df:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d6e6:	85 c0                	test   eax,eax
c001d6e8:	74 1b                	je     c001d705 <SoundCard::getSamples16(int, short*)+0x59>
c001d6ea:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6ee:	75 15                	jne    c001d705 <SoundCard::getSamples16(int, short*)+0x59>
c001d6f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6f4:	55                   	push   ebp
c001d6f5:	56                   	push   esi
c001d6f6:	50                   	push   eax
c001d6f7:	e8 58 03 00 00       	call   c001da54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d6fc:	83 c4 10             	add    esp,0x10
c001d6ff:	39 c7                	cmp    edi,eax
c001d701:	7d 02                	jge    c001d705 <SoundCard::getSamples16(int, short*)+0x59>
c001d703:	89 c7                	mov    edi,eax
c001d705:	43                   	inc    ebx
c001d706:	83 fb 20             	cmp    ebx,0x20
c001d709:	75 d0                	jne    c001d6db <SoundCard::getSamples16(int, short*)+0x2f>
c001d70b:	83 c4 0c             	add    esp,0xc
c001d70e:	89 f8                	mov    eax,edi
c001d710:	5b                   	pop    ebx
c001d711:	5e                   	pop    esi
c001d712:	5f                   	pop    edi
c001d713:	5d                   	pop    ebp
c001d714:	c3                   	ret    
c001d715:	90                   	nop

c001d716 <SoundCard::getSamples32(int, int*)>:
c001d716:	55                   	push   ebp
c001d717:	57                   	push   edi
c001d718:	31 ff                	xor    edi,edi
c001d71a:	56                   	push   esi
c001d71b:	31 f6                	xor    esi,esi
c001d71d:	53                   	push   ebx
c001d71e:	83 ec 10             	sub    esp,0x10
c001d721:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d725:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d72d:	c1 e0 02             	shl    eax,0x2
c001d730:	50                   	push   eax
c001d731:	6a 00                	push   0x0
c001d733:	55                   	push   ebp
c001d734:	e8 5b 2f fe ff       	call   c0000694 <memset>
c001d739:	83 c4 10             	add    esp,0x10
c001d73c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d743:	85 c0                	test   eax,eax
c001d745:	74 1b                	je     c001d762 <SoundCard::getSamples32(int, int*)+0x4c>
c001d747:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d74b:	75 15                	jne    c001d762 <SoundCard::getSamples32(int, int*)+0x4c>
c001d74d:	53                   	push   ebx
c001d74e:	55                   	push   ebp
c001d74f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d753:	50                   	push   eax
c001d754:	e8 f7 03 00 00       	call   c001db50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d759:	83 c4 10             	add    esp,0x10
c001d75c:	39 c6                	cmp    esi,eax
c001d75e:	7d 02                	jge    c001d762 <SoundCard::getSamples32(int, int*)+0x4c>
c001d760:	89 c6                	mov    esi,eax
c001d762:	47                   	inc    edi
c001d763:	83 ff 20             	cmp    edi,0x20
c001d766:	75 d4                	jne    c001d73c <SoundCard::getSamples32(int, int*)+0x26>
c001d768:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d76e:	85 f6                	test   esi,esi
c001d770:	75 0f                	jne    c001d781 <SoundCard::getSamples32(int, int*)+0x6b>
c001d772:	84 c0                	test   al,al
c001d774:	74 1b                	je     c001d791 <SoundCard::getSamples32(int, int*)+0x7b>
c001d776:	83 ec 0c             	sub    esp,0xc
c001d779:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d77b:	53                   	push   ebx
c001d77c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d77f:	eb 0d                	jmp    c001d78e <SoundCard::getSamples32(int, int*)+0x78>
c001d781:	84 c0                	test   al,al
c001d783:	75 0c                	jne    c001d791 <SoundCard::getSamples32(int, int*)+0x7b>
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d78a:	53                   	push   ebx
c001d78b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d78e:	83 c4 10             	add    esp,0x10
c001d791:	83 c4 0c             	add    esp,0xc
c001d794:	89 f0                	mov    eax,esi
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	5d                   	pop    ebp
c001d79a:	c3                   	ret    
c001d79b:	90                   	nop

c001d79c <SoundCard::addChannel(SoundPort*)>:
c001d79c:	56                   	push   esi
c001d79d:	53                   	push   ebx
c001d79e:	53                   	push   ebx
c001d79f:	31 db                	xor    ebx,ebx
c001d7a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7a5:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d7ad:	74 27                	je     c001d7d6 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d7af:	43                   	inc    ebx
c001d7b0:	83 fb 20             	cmp    ebx,0x20
c001d7b3:	75 f0                	jne    c001d7a5 <SoundCard::addChannel(SoundPort*)+0x9>
c001d7b5:	83 ec 0c             	sub    esp,0xc
c001d7b8:	83 cb ff             	or     ebx,0xffffffff
c001d7bb:	68 cd 71 02 c0       	push   0xc00271cd
c001d7c0:	e8 84 f9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001d7c5:	c7 04 24 c6 71 02 c0 	mov    DWORD PTR [esp],0xc00271c6
c001d7cc:	e8 58 7a ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	eb 1b                	jmp    c001d7f1 <SoundCard::addChannel(SoundPort*)+0x55>
c001d7d6:	51                   	push   ecx
c001d7d7:	51                   	push   ecx
c001d7d8:	53                   	push   ebx
c001d7d9:	68 e5 71 02 c0       	push   0xc00271e5
c001d7de:	e8 66 f9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001d7e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d7f1:	89 d8                	mov    eax,ebx
c001d7f3:	5a                   	pop    edx
c001d7f4:	5b                   	pop    ebx
c001d7f5:	5e                   	pop    esi
c001d7f6:	c3                   	ret    
c001d7f7:	90                   	nop

c001d7f8 <SoundCard::removeChannel(int)>:
c001d7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d800:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d80b:	c3                   	ret    

c001d80c <SoundPort::SoundPort(int, int, int, int)>:
c001d80c:	83 ec 0c             	sub    esp,0xc
c001d80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d813:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d81e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d826:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d82a:	89 10                	mov    DWORD PTR [eax],edx
c001d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d830:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d834:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d83b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d83f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d842:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d847:	75 13                	jne    c001d85c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d84d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d84f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d854:	01 c0                	add    eax,eax
c001d856:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d85a:	66 90                	xchg   ax,ax
c001d85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d860:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d864:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d86b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d876:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d879:	c1 e0 02             	shl    eax,0x2
c001d87c:	83 ec 0c             	sub    esp,0xc
c001d87f:	50                   	push   eax
c001d880:	e8 62 c5 fe ff       	call   c0009de7 <malloc>
c001d885:	83 c4 10             	add    esp,0x10
c001d888:	89 c2                	mov    edx,eax
c001d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d891:	90                   	nop
c001d892:	83 c4 0c             	add    esp,0xc
c001d895:	c3                   	ret    
c001d896:	66 90                	xchg   ax,ax

c001d898 <SoundPort::~SoundPort()>:
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d89f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d8a2:	85 c0                	test   eax,eax
c001d8a4:	74 1e                	je     c001d8c4 <SoundPort::~SoundPort()+0x2c>
c001d8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d8ad:	83 ec 0c             	sub    esp,0xc
c001d8b0:	50                   	push   eax
c001d8b1:	e8 41 c5 fe ff       	call   c0009df7 <free>
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8c4:	90                   	nop
c001d8c5:	83 c4 0c             	add    esp,0xc
c001d8c8:	c3                   	ret    
c001d8c9:	90                   	nop
c001d8ca:	66 90                	xchg   ax,ax

c001d8cc <SoundPort::unpause()>:
c001d8cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8d0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d8d4:	c3                   	ret    
c001d8d5:	90                   	nop
c001d8d6:	66 90                	xchg   ax,ax

c001d8d8 <SoundPort::pause()>:
c001d8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8dc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d8e0:	c3                   	ret    
c001d8e1:	90                   	nop
c001d8e2:	66 90                	xchg   ax,ax

c001d8e4 <SoundPort::getBufferUsed()>:
c001d8e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d8eb:	c3                   	ret    

c001d8ec <SoundPort::getBufferSize()>:
c001d8ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d8f3:	c3                   	ret    

c001d8f4 <SoundPort::buffer16(short*, int)>:
c001d8f4:	55                   	push   ebp
c001d8f5:	57                   	push   edi
c001d8f6:	56                   	push   esi
c001d8f7:	53                   	push   ebx
c001d8f8:	83 ec 1c             	sub    esp,0x1c
c001d8fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8ff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d903:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d906:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d909:	0f 84 85 00 00 00    	je     c001d994 <SoundPort::buffer16(short*, int)+0xa0>
c001d90f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d913:	85 c9                	test   ecx,ecx
c001d915:	7e 7d                	jle    c001d994 <SoundPort::buffer16(short*, int)+0xa0>
c001d917:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d91b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d91e:	c1 e1 0f             	shl    ecx,0xf
c001d921:	8d 70 01             	lea    esi,[eax+0x1]
c001d924:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d927:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d92a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d92d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d930:	74 6e                	je     c001d9a0 <SoundPort::buffer16(short*, int)+0xac>
c001d932:	31 f6                	xor    esi,esi
c001d934:	eb 22                	jmp    c001d958 <SoundPort::buffer16(short*, int)+0x64>
c001d936:	66 90                	xchg   ax,ax
c001d938:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d93d:	8d 79 01             	lea    edi,[ecx+0x1]
c001d940:	c1 e3 0f             	shl    ebx,0xf
c001d943:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d946:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d949:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d94c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d94f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d952:	74 1c                	je     c001d970 <SoundPort::buffer16(short*, int)+0x7c>
c001d954:	89 c6                	mov    esi,eax
c001d956:	66 90                	xchg   ax,ax
c001d958:	8d 46 01             	lea    eax,[esi+0x1]
c001d95b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d95f:	75 d7                	jne    c001d938 <SoundPort::buffer16(short*, int)+0x44>
c001d961:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d965:	83 c4 1c             	add    esp,0x1c
c001d968:	5b                   	pop    ebx
c001d969:	5e                   	pop    esi
c001d96a:	5f                   	pop    edi
c001d96b:	5d                   	pop    ebp
c001d96c:	c3                   	ret    
c001d96d:	8d 76 00             	lea    esi,[esi+0x0]
c001d970:	8d 46 02             	lea    eax,[esi+0x2]
c001d973:	90                   	nop
c001d974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	68 38 72 02 c0       	push   0xc0027238
c001d980:	e8 c4 f7 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001d985:	83 c4 10             	add    esp,0x10
c001d988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d98c:	83 c4 1c             	add    esp,0x1c
c001d98f:	5b                   	pop    ebx
c001d990:	5e                   	pop    esi
c001d991:	5f                   	pop    edi
c001d992:	5d                   	pop    ebp
c001d993:	c3                   	ret    
c001d994:	83 c4 1c             	add    esp,0x1c
c001d997:	31 c0                	xor    eax,eax
c001d999:	5b                   	pop    ebx
c001d99a:	5e                   	pop    esi
c001d99b:	5f                   	pop    edi
c001d99c:	5d                   	pop    ebp
c001d99d:	c3                   	ret    
c001d99e:	66 90                	xchg   ax,ax
c001d9a0:	b8 01 00 00 00       	mov    eax,0x1
c001d9a5:	eb cd                	jmp    c001d974 <SoundPort::buffer16(short*, int)+0x80>
c001d9a7:	90                   	nop

c001d9a8 <SoundPort::buffer32(int*, int)>:
c001d9a8:	55                   	push   ebp
c001d9a9:	57                   	push   edi
c001d9aa:	56                   	push   esi
c001d9ab:	53                   	push   ebx
c001d9ac:	83 ec 1c             	sub    esp,0x1c
c001d9af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9ba:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d9be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9c2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9c5:	74 79                	je     c001da40 <SoundPort::buffer32(int*, int)+0x98>
c001d9c7:	85 c0                	test   eax,eax
c001d9c9:	7e 75                	jle    c001da40 <SoundPort::buffer32(int*, int)+0x98>
c001d9cb:	8d 71 01             	lea    esi,[ecx+0x1]
c001d9ce:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d9d1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d9d4:	8b 37                	mov    esi,DWORD PTR [edi]
c001d9d6:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d9d9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9dc:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9df:	74 6b                	je     c001da4c <SoundPort::buffer32(int*, int)+0xa4>
c001d9e1:	31 f6                	xor    esi,esi
c001d9e3:	eb 1f                	jmp    c001da04 <SoundPort::buffer32(int*, int)+0x5c>
c001d9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9e8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d9eb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d9ee:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d9f1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9f4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9fe:	74 1c                	je     c001da1c <SoundPort::buffer32(int*, int)+0x74>
c001da00:	89 de                	mov    esi,ebx
c001da02:	66 90                	xchg   ax,ax
c001da04:	8d 5e 01             	lea    ebx,[esi+0x1]
c001da07:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001da0b:	75 db                	jne    c001d9e8 <SoundPort::buffer32(int*, int)+0x40>
c001da0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da11:	83 c4 1c             	add    esp,0x1c
c001da14:	5b                   	pop    ebx
c001da15:	5e                   	pop    esi
c001da16:	5f                   	pop    edi
c001da17:	5d                   	pop    ebp
c001da18:	c3                   	ret    
c001da19:	8d 76 00             	lea    esi,[esi+0x0]
c001da1c:	8d 46 02             	lea    eax,[esi+0x2]
c001da1f:	90                   	nop
c001da20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da24:	83 ec 0c             	sub    esp,0xc
c001da27:	68 53 72 02 c0       	push   0xc0027253
c001da2c:	e8 18 f7 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001da31:	83 c4 10             	add    esp,0x10
c001da34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da38:	83 c4 1c             	add    esp,0x1c
c001da3b:	5b                   	pop    ebx
c001da3c:	5e                   	pop    esi
c001da3d:	5f                   	pop    edi
c001da3e:	5d                   	pop    ebp
c001da3f:	c3                   	ret    
c001da40:	83 c4 1c             	add    esp,0x1c
c001da43:	31 c0                	xor    eax,eax
c001da45:	5b                   	pop    ebx
c001da46:	5e                   	pop    esi
c001da47:	5f                   	pop    edi
c001da48:	5d                   	pop    ebp
c001da49:	c3                   	ret    
c001da4a:	66 90                	xchg   ax,ax
c001da4c:	b8 01 00 00 00       	mov    eax,0x1
c001da51:	eb cd                	jmp    c001da20 <SoundPort::buffer32(int*, int)+0x78>
c001da53:	90                   	nop

c001da54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001da54:	57                   	push   edi
c001da55:	56                   	push   esi
c001da56:	53                   	push   ebx
c001da57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001da5f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001da65:	39 03                	cmp    DWORD PTR [ebx],eax
c001da67:	74 13                	je     c001da7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001da69:	83 ec 0c             	sub    esp,0xc
c001da6c:	68 a8 72 02 c0       	push   0xc00272a8
c001da71:	e8 b3 77 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	8d 76 00             	lea    esi,[esi+0x0]
c001da7c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001da82:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001da85:	74 11                	je     c001da98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	68 6e 72 02 c0       	push   0xc002726e
c001da8f:	e8 95 77 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001da94:	83 c4 10             	add    esp,0x10
c001da97:	90                   	nop
c001da98:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001da9e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001daa1:	74 11                	je     c001dab4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001daa3:	83 ec 0c             	sub    esp,0xc
c001daa6:	68 6e 72 02 c0       	push   0xc002726e
c001daab:	e8 79 77 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001dab0:	83 c4 10             	add    esp,0x10
c001dab3:	90                   	nop
c001dab4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dab7:	89 c6                	mov    esi,eax
c001dab9:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001dabd:	7e 05                	jle    c001dac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dabf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dac3:	90                   	nop
c001dac4:	85 f6                	test   esi,esi
c001dac6:	7e 30                	jle    c001daf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001dac8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dacc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001dacf:	31 c9                	xor    ecx,ecx
c001dad1:	01 d7                	add    edi,edx
c001dad3:	90                   	nop
c001dad4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dad7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001dada:	85 c0                	test   eax,eax
c001dadc:	79 06                	jns    c001dae4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001dade:	05 ff 7f 00 00       	add    eax,0x7fff
c001dae3:	90                   	nop
c001dae4:	c1 f8 0f             	sar    eax,0xf
c001dae7:	83 c1 04             	add    ecx,0x4
c001daea:	66 01 02             	add    WORD PTR [edx],ax
c001daed:	83 c2 02             	add    edx,0x2
c001daf0:	39 d7                	cmp    edi,edx
c001daf2:	75 e0                	jne    c001dad4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001daf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001daf7:	90                   	nop
c001daf8:	56                   	push   esi
c001daf9:	89 c2                	mov    edx,eax
c001dafb:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001db02:	29 f2                	sub    edx,esi
c001db04:	52                   	push   edx
c001db05:	50                   	push   eax
c001db06:	68 c8 72 02 c0       	push   0xc00272c8
c001db0b:	e8 39 f6 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001db10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001db13:	50                   	push   eax
c001db14:	01 f8                	add    eax,edi
c001db16:	50                   	push   eax
c001db17:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db1a:	29 f0                	sub    eax,esi
c001db1c:	c1 e0 02             	shl    eax,0x2
c001db1f:	50                   	push   eax
c001db20:	68 f8 72 02 c0       	push   0xc00272f8
c001db25:	e8 1f f6 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001db2a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001db2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db30:	83 c4 1c             	add    esp,0x1c
c001db33:	01 d7                	add    edi,edx
c001db35:	29 f0                	sub    eax,esi
c001db37:	c1 e0 02             	shl    eax,0x2
c001db3a:	50                   	push   eax
c001db3b:	57                   	push   edi
c001db3c:	52                   	push   edx
c001db3d:	e8 8a 2a fe ff       	call   c00005cc <memmove>
c001db42:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	89 f0                	mov    eax,esi
c001db4a:	5b                   	pop    ebx
c001db4b:	5e                   	pop    esi
c001db4c:	5f                   	pop    edi
c001db4d:	c3                   	ret    
c001db4e:	66 90                	xchg   ax,ax

c001db50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001db50:	57                   	push   edi
c001db51:	56                   	push   esi
c001db52:	53                   	push   ebx
c001db53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db5f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001db65:	39 06                	cmp    DWORD PTR [esi],eax
c001db67:	74 13                	je     c001db7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001db69:	83 ec 0c             	sub    esp,0xc
c001db6c:	68 1c 73 02 c0       	push   0xc002731c
c001db71:	e8 b3 76 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001db76:	83 c4 10             	add    esp,0x10
c001db79:	8d 76 00             	lea    esi,[esi+0x0]
c001db7c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001db82:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001db85:	74 11                	je     c001db98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001db87:	83 ec 0c             	sub    esp,0xc
c001db8a:	68 8a 72 02 c0       	push   0xc002728a
c001db8f:	e8 95 76 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001db94:	83 c4 10             	add    esp,0x10
c001db97:	90                   	nop
c001db98:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001db9e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001dba1:	74 11                	je     c001dbb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001dba3:	83 ec 0c             	sub    esp,0xc
c001dba6:	68 8a 72 02 c0       	push   0xc002728a
c001dbab:	e8 79 76 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	90                   	nop
c001dbb4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001dbb7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001dbbb:	7e 07                	jle    c001dbc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001dbbd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dbc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc4:	85 ff                	test   edi,edi
c001dbc6:	7e 1c                	jle    c001dbe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001dbc8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dbcf:	31 c0                	xor    eax,eax
c001dbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dbd7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dbda:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dbdd:	83 c0 04             	add    eax,0x4
c001dbe0:	39 c1                	cmp    ecx,eax
c001dbe2:	75 f0                	jne    c001dbd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dbe4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dbe7:	50                   	push   eax
c001dbe8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dbeb:	29 f8                	sub    eax,edi
c001dbed:	c1 e0 02             	shl    eax,0x2
c001dbf0:	50                   	push   eax
c001dbf1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dbf4:	50                   	push   eax
c001dbf5:	52                   	push   edx
c001dbf6:	e8 d1 29 fe ff       	call   c00005cc <memmove>
c001dbfb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	89 f8                	mov    eax,edi
c001dc03:	5b                   	pop    ebx
c001dc04:	5e                   	pop    esi
c001dc05:	5f                   	pop    edi
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <PCI::open(int, int, void*)>:
c001dc08:	83 ec 18             	sub    esp,0x18
c001dc0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc19:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc1b:	50                   	push   eax
c001dc1c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dc1f:	31 c0                	xor    eax,eax
c001dc21:	83 c4 1c             	add    esp,0x1c
c001dc24:	c3                   	ret    
c001dc25:	90                   	nop

c001dc26 <PCI::close(int, int, void*)>:
c001dc26:	31 c0                	xor    eax,eax
c001dc28:	c3                   	ret    
c001dc29:	90                   	nop

c001dc2a <PCI::PCI()>:
c001dc2a:	83 ec 0c             	sub    esp,0xc
c001dc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc31:	83 ec 08             	sub    esp,0x8
c001dc34:	68 3b 73 02 c0       	push   0xc002733b
c001dc39:	50                   	push   eax
c001dc3a:	e8 e1 02 ff ff       	call   c000df20 <Bus::Bus(char const*)>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	ba 10 75 02 c0       	mov    edx,0xc0027510
c001dc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4b:	89 10                	mov    DWORD PTR [eax],edx
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5f:	a3 80 ab 02 c0       	mov    ds:0xc002ab80,eax
c001dc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc6e:	0f b6 d0             	movzx  edx,al
c001dc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc75:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc86:	0f b6 d0             	movzx  edx,al
c001dc89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc96:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc9c:	8d 50 01             	lea    edx,[eax+0x1]
c001dc9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dca3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dca9:	0f b6 d0             	movzx  edx,al
c001dcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcb4:	83 c9 c0             	or     ecx,0xffffffc0
c001dcb7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcbb:	90                   	nop
c001dcbc:	83 c4 0c             	add    esp,0xc
c001dcbf:	c3                   	ret    

c001dcc0 <PCI::readBAR8(unsigned int, int)>:
c001dcc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcc8:	f6 c2 01             	test   dl,0x1
c001dccb:	74 07                	je     c001dcd4 <PCI::readBAR8(unsigned int, int)+0x14>
c001dccd:	83 e2 fc             	and    edx,0xfffffffc
c001dcd0:	01 c2                	add    edx,eax
c001dcd2:	ec                   	in     al,dx
c001dcd3:	c3                   	ret    
c001dcd4:	83 e2 f0             	and    edx,0xfffffff0
c001dcd7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dcda:	c3                   	ret    
c001dcdb:	90                   	nop

c001dcdc <PCI::readBAR16(unsigned int, int)>:
c001dcdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dce4:	f6 c2 01             	test   dl,0x1
c001dce7:	74 08                	je     c001dcf1 <PCI::readBAR16(unsigned int, int)+0x15>
c001dce9:	83 e2 fc             	and    edx,0xfffffffc
c001dcec:	01 c2                	add    edx,eax
c001dcee:	66 ed                	in     ax,dx
c001dcf0:	c3                   	ret    
c001dcf1:	83 e2 f0             	and    edx,0xfffffff0
c001dcf4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dcf8:	c3                   	ret    
c001dcf9:	90                   	nop

c001dcfa <PCI::readBAR32(unsigned int, int)>:
c001dcfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd02:	f6 c2 01             	test   dl,0x1
c001dd05:	74 07                	je     c001dd0e <PCI::readBAR32(unsigned int, int)+0x14>
c001dd07:	83 e2 fc             	and    edx,0xfffffffc
c001dd0a:	01 c2                	add    edx,eax
c001dd0c:	ed                   	in     eax,dx
c001dd0d:	c3                   	ret    
c001dd0e:	83 e2 f0             	and    edx,0xfffffff0
c001dd11:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dd14:	c3                   	ret    
c001dd15:	90                   	nop

c001dd16 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dd16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd22:	f6 c2 01             	test   dl,0x1
c001dd25:	74 07                	je     c001dd2e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dd27:	83 e2 fc             	and    edx,0xfffffffc
c001dd2a:	01 ca                	add    edx,ecx
c001dd2c:	ee                   	out    dx,al
c001dd2d:	c3                   	ret    
c001dd2e:	83 e2 f0             	and    edx,0xfffffff0
c001dd31:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dd34:	c3                   	ret    
c001dd35:	90                   	nop

c001dd36 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dd36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd42:	f6 c2 01             	test   dl,0x1
c001dd45:	74 08                	je     c001dd4f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dd47:	83 e2 fc             	and    edx,0xfffffffc
c001dd4a:	01 ca                	add    edx,ecx
c001dd4c:	66 ef                	out    dx,ax
c001dd4e:	c3                   	ret    
c001dd4f:	83 e2 f0             	and    edx,0xfffffff0
c001dd52:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dd56:	c3                   	ret    
c001dd57:	90                   	nop

c001dd58 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dd58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd64:	f6 c2 01             	test   dl,0x1
c001dd67:	74 07                	je     c001dd70 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dd69:	83 e2 fc             	and    edx,0xfffffffc
c001dd6c:	01 ca                	add    edx,ecx
c001dd6e:	ef                   	out    dx,eax
c001dd6f:	c3                   	ret    
c001dd70:	83 e2 f0             	and    edx,0xfffffff0
c001dd73:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd76:	c3                   	ret    
c001dd77:	90                   	nop

c001dd78 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd78:	55                   	push   ebp
c001dd79:	57                   	push   edi
c001dd7a:	56                   	push   esi
c001dd7b:	53                   	push   ebx
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dd87:	89 f0                	mov    eax,esi
c001dd89:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd91:	3c 07                	cmp    al,0x7
c001dd93:	76 10                	jbe    c001dda5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd95:	83 ec 0c             	sub    esp,0xc
c001dd98:	68 43 73 02 c0       	push   0xc0027343
c001dd9d:	e8 87 74 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	80 fb 0f             	cmp    bl,0xf
c001dda8:	76 10                	jbe    c001ddba <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ddaa:	83 ec 0c             	sub    esp,0xc
c001ddad:	68 73 73 02 c0       	push   0xc0027373
c001ddb2:	e8 72 74 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	8d 04 36             	lea    eax,[esi+esi*1]
c001ddbd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddc2:	83 c8 f0             	or     eax,0xfffffff0
c001ddc5:	ee                   	out    dx,al
c001ddc6:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ddcb:	89 e8                	mov    eax,ebp
c001ddcd:	ee                   	out    dx,al
c001ddce:	83 c4 0c             	add    esp,0xc
c001ddd1:	89 d8                	mov    eax,ebx
c001ddd3:	66 81 e7 fc 00       	and    di,0xfc
c001ddd8:	5b                   	pop    ebx
c001ddd9:	c1 e0 08             	shl    eax,0x8
c001dddc:	5e                   	pop    esi
c001dddd:	09 f8                	or     eax,edi
c001dddf:	5f                   	pop    edi
c001dde0:	66 0d 00 c0          	or     ax,0xc000
c001dde4:	5d                   	pop    ebp
c001dde5:	c3                   	ret    

c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dde6:	57                   	push   edi
c001dde7:	56                   	push   esi
c001dde8:	53                   	push   ebx
c001dde9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddf1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ddf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001de03:	83 ff 01             	cmp    edi,0x1
c001de06:	75 3e                	jne    c001de46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001de08:	89 de                	mov    esi,ebx
c001de0a:	0f b6 c0             	movzx  eax,al
c001de0d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001de13:	c1 e0 10             	shl    eax,0x10
c001de16:	0f b6 c9             	movzx  ecx,cl
c001de19:	09 f0                	or     eax,esi
c001de1b:	c1 e1 08             	shl    ecx,0x8
c001de1e:	0f b6 d2             	movzx  edx,dl
c001de21:	09 c8                	or     eax,ecx
c001de23:	c1 e2 0b             	shl    edx,0xb
c001de26:	09 d0                	or     eax,edx
c001de28:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de2d:	0d 00 00 00 80       	or     eax,0x80000000
c001de32:	ef                   	out    dx,eax
c001de33:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de38:	ed                   	in     eax,dx
c001de39:	83 e3 02             	and    ebx,0x2
c001de3c:	0f b6 cb             	movzx  ecx,bl
c001de3f:	c1 e1 03             	shl    ecx,0x3
c001de42:	d3 e8                	shr    eax,cl
c001de44:	eb 43                	jmp    c001de89 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de46:	83 ff 02             	cmp    edi,0x2
c001de49:	75 2c                	jne    c001de77 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001de4b:	83 ec 0c             	sub    esp,0xc
c001de4e:	0f b6 c9             	movzx  ecx,cl
c001de51:	0f b6 d2             	movzx  edx,dl
c001de54:	0f b6 fb             	movzx  edi,bl
c001de57:	0f b6 c0             	movzx  eax,al
c001de5a:	57                   	push   edi
c001de5b:	51                   	push   ecx
c001de5c:	52                   	push   edx
c001de5d:	50                   	push   eax
c001de5e:	56                   	push   esi
c001de5f:	e8 14 ff ff ff       	call   c001dd78 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de64:	89 c2                	mov    edx,eax
c001de66:	ed                   	in     eax,dx
c001de67:	83 e3 02             	and    ebx,0x2
c001de6a:	83 c4 20             	add    esp,0x20
c001de6d:	0f b6 cb             	movzx  ecx,bl
c001de70:	c1 e1 03             	shl    ecx,0x3
c001de73:	d3 e8                	shr    eax,cl
c001de75:	eb 12                	jmp    c001de89 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de77:	83 ec 0c             	sub    esp,0xc
c001de7a:	68 a3 73 02 c0       	push   0xc00273a3
c001de7f:	e8 a5 73 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	31 c0                	xor    eax,eax
c001de89:	5b                   	pop    ebx
c001de8a:	5e                   	pop    esi
c001de8b:	5f                   	pop    edi
c001de8c:	c3                   	ret    
c001de8d:	90                   	nop

c001de8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de8e:	83 ec 18             	sub    esp,0x18
c001de91:	6a 00                	push   0x0
c001de93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de98:	50                   	push   eax
c001de99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de9e:	50                   	push   eax
c001de9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dea4:	50                   	push   eax
c001dea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dea9:	e8 38 ff ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deae:	83 c4 2c             	add    esp,0x2c
c001deb1:	c3                   	ret    

c001deb2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001deb2:	83 ec 18             	sub    esp,0x18
c001deb5:	6a 0e                	push   0xe
c001deb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001debc:	50                   	push   eax
c001debd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec2:	50                   	push   eax
c001dec3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec8:	50                   	push   eax
c001dec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001decd:	e8 14 ff ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ded2:	83 c4 2c             	add    esp,0x2c
c001ded5:	0f b6 c0             	movzx  eax,al
c001ded8:	c3                   	ret    
c001ded9:	90                   	nop

c001deda <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001deda:	55                   	push   ebp
c001dedb:	57                   	push   edi
c001dedc:	56                   	push   esi
c001dedd:	53                   	push   ebx
c001dede:	83 ec 18             	sub    esp,0x18
c001dee1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dee6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001deeb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001def0:	6a 0a                	push   0xa
c001def2:	56                   	push   esi
c001def3:	55                   	push   ebp
c001def4:	57                   	push   edi
c001def5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001def9:	e8 e8 fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001defe:	83 c4 14             	add    esp,0x14
c001df01:	89 c3                	mov    ebx,eax
c001df03:	6a 0a                	push   0xa
c001df05:	0f b6 db             	movzx  ebx,bl
c001df08:	56                   	push   esi
c001df09:	55                   	push   ebp
c001df0a:	57                   	push   edi
c001df0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df0f:	e8 d2 fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df14:	83 c4 2c             	add    esp,0x2c
c001df17:	25 00 ff 00 00       	and    eax,0xff00
c001df1c:	09 d8                	or     eax,ebx
c001df1e:	5b                   	pop    ebx
c001df1f:	5e                   	pop    esi
c001df20:	5f                   	pop    edi
c001df21:	5d                   	pop    ebp
c001df22:	c3                   	ret    
c001df23:	90                   	nop

c001df24 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001df24:	83 ec 18             	sub    esp,0x18
c001df27:	6a 08                	push   0x8
c001df29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df2e:	50                   	push   eax
c001df2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df34:	50                   	push   eax
c001df35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df3a:	50                   	push   eax
c001df3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df3f:	e8 a2 fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df44:	83 c4 2c             	add    esp,0x2c
c001df47:	0f b6 c4             	movzx  eax,ah
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop

c001df4c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001df4c:	83 ec 18             	sub    esp,0x18
c001df4f:	6a 08                	push   0x8
c001df51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df56:	50                   	push   eax
c001df57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df5c:	50                   	push   eax
c001df5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df62:	50                   	push   eax
c001df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df67:	e8 7a fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df6c:	83 c4 2c             	add    esp,0x2c
c001df6f:	c3                   	ret    

c001df70 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001df70:	83 ec 18             	sub    esp,0x18
c001df73:	6a 3c                	push   0x3c
c001df75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df7a:	50                   	push   eax
c001df7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df80:	50                   	push   eax
c001df81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df86:	50                   	push   eax
c001df87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df8b:	e8 56 fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df90:	83 c4 2c             	add    esp,0x2c
c001df93:	c3                   	ret    

c001df94 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df94:	83 ec 18             	sub    esp,0x18
c001df97:	6a 18                	push   0x18
c001df99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df9e:	50                   	push   eax
c001df9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfa4:	50                   	push   eax
c001dfa5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfaa:	50                   	push   eax
c001dfab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfaf:	e8 32 fe ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfb4:	83 c4 2c             	add    esp,0x2c
c001dfb7:	0f b6 c4             	movzx  eax,ah
c001dfba:	c3                   	ret    
c001dfbb:	90                   	nop

c001dfbc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dfbc:	55                   	push   ebp
c001dfbd:	57                   	push   edi
c001dfbe:	56                   	push   esi
c001dfbf:	53                   	push   ebx
c001dfc0:	83 ec 28             	sub    esp,0x28
c001dfc3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dfc7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dfcc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dfd1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dfd6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dfdd:	8d 43 12             	lea    eax,[ebx+0x12]
c001dfe0:	83 c3 10             	add    ebx,0x10
c001dfe3:	0f b6 c0             	movzx  eax,al
c001dfe6:	0f b6 db             	movzx  ebx,bl
c001dfe9:	50                   	push   eax
c001dfea:	51                   	push   ecx
c001dfeb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dfef:	57                   	push   edi
c001dff0:	55                   	push   ebp
c001dff1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dff5:	e8 ec fd ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dffa:	83 c4 14             	add    esp,0x14
c001dffd:	89 c6                	mov    esi,eax
c001dfff:	53                   	push   ebx
c001e000:	c1 e6 10             	shl    esi,0x10
c001e003:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e007:	51                   	push   ecx
c001e008:	57                   	push   edi
c001e009:	55                   	push   ebp
c001e00a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e00e:	e8 d3 fd ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e013:	83 c4 3c             	add    esp,0x3c
c001e016:	0f b7 c0             	movzx  eax,ax
c001e019:	5b                   	pop    ebx
c001e01a:	09 f0                	or     eax,esi
c001e01c:	5e                   	pop    esi
c001e01d:	5f                   	pop    edi
c001e01e:	5d                   	pop    ebp
c001e01f:	c3                   	ret    

c001e020 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e020:	55                   	push   ebp
c001e021:	57                   	push   edi
c001e022:	56                   	push   esi
c001e023:	53                   	push   ebx
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e02b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e02f:	89 f5                	mov    ebp,esi
c001e031:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e037:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e03b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e03f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e043:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e047:	83 f9 01             	cmp    ecx,0x1
c001e04a:	75 5d                	jne    c001e0a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e04c:	0f b6 c8             	movzx  ecx,al
c001e04f:	0f b6 d2             	movzx  edx,dl
c001e052:	c1 e1 10             	shl    ecx,0x10
c001e055:	c1 e2 0b             	shl    edx,0xb
c001e058:	89 f0                	mov    eax,esi
c001e05a:	25 fc 00 00 00       	and    eax,0xfc
c001e05f:	09 c1                	or     ecx,eax
c001e061:	89 e8                	mov    eax,ebp
c001e063:	0f b6 c0             	movzx  eax,al
c001e066:	c1 e0 08             	shl    eax,0x8
c001e069:	09 c1                	or     ecx,eax
c001e06b:	09 d1                	or     ecx,edx
c001e06d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e072:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e078:	89 c8                	mov    eax,ecx
c001e07a:	ef                   	out    dx,eax
c001e07b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e080:	ed                   	in     eax,dx
c001e081:	0f b7 db             	movzx  ebx,bx
c001e084:	83 e6 02             	and    esi,0x2
c001e087:	74 0a                	je     c001e093 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e089:	0f b7 d0             	movzx  edx,ax
c001e08c:	c1 e3 10             	shl    ebx,0x10
c001e08f:	09 d3                	or     ebx,edx
c001e091:	eb 05                	jmp    c001e098 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e093:	66 31 c0             	xor    ax,ax
c001e096:	09 c3                	or     ebx,eax
c001e098:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e09d:	89 c8                	mov    eax,ecx
c001e09f:	ef                   	out    dx,eax
c001e0a0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e0a5:	89 d8                	mov    eax,ebx
c001e0a7:	eb 41                	jmp    c001e0ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e0a9:	83 f9 02             	cmp    ecx,0x2
c001e0ac:	75 45                	jne    c001e0f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e0ae:	83 ec 0c             	sub    esp,0xc
c001e0b1:	0f b6 d2             	movzx  edx,dl
c001e0b4:	89 f1                	mov    ecx,esi
c001e0b6:	0f b6 c0             	movzx  eax,al
c001e0b9:	0f b6 f1             	movzx  esi,cl
c001e0bc:	89 e9                	mov    ecx,ebp
c001e0be:	56                   	push   esi
c001e0bf:	0f b6 c9             	movzx  ecx,cl
c001e0c2:	51                   	push   ecx
c001e0c3:	52                   	push   edx
c001e0c4:	50                   	push   eax
c001e0c5:	57                   	push   edi
c001e0c6:	e8 ad fc ff ff       	call   c001dd78 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0cb:	89 c2                	mov    edx,eax
c001e0cd:	ed                   	in     eax,dx
c001e0ce:	83 c4 20             	add    esp,0x20
c001e0d1:	0f b7 db             	movzx  ebx,bx
c001e0d4:	f6 c2 02             	test   dl,0x2
c001e0d7:	74 0c                	je     c001e0e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e0d9:	0f b7 c8             	movzx  ecx,ax
c001e0dc:	89 d8                	mov    eax,ebx
c001e0de:	c1 e0 10             	shl    eax,0x10
c001e0e1:	09 c8                	or     eax,ecx
c001e0e3:	eb 05                	jmp    c001e0ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e0e5:	66 31 c0             	xor    ax,ax
c001e0e8:	09 d8                	or     eax,ebx
c001e0ea:	ef                   	out    dx,eax
c001e0eb:	83 c4 0c             	add    esp,0xc
c001e0ee:	5b                   	pop    ebx
c001e0ef:	5e                   	pop    esi
c001e0f0:	5f                   	pop    edi
c001e0f1:	5d                   	pop    ebp
c001e0f2:	c3                   	ret    
c001e0f3:	c7 44 24 20 a3 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc00273a3
c001e0fb:	83 c4 0c             	add    esp,0xc
c001e0fe:	5b                   	pop    ebx
c001e0ff:	5e                   	pop    esi
c001e100:	5f                   	pop    edi
c001e101:	5d                   	pop    ebp
c001e102:	e9 22 71 ff ff       	jmp    c0015229 <Krnl::panic(char const*)>
c001e107:	90                   	nop

c001e108 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e108:	55                   	push   ebp
c001e109:	57                   	push   edi
c001e10a:	56                   	push   esi
c001e10b:	53                   	push   ebx
c001e10c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e112:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e119:	75 0f                	jne    c001e12a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e11b:	80 3d 8c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab8c,0x0
c001e122:	0f 85 fa 00 00 00    	jne    c001e222 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e128:	eb 2f                	jmp    c001e159 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	68 a9 73 02 c0       	push   0xc00273a9
c001e132:	e8 0a bd fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e137:	83 c4 10             	add    esp,0x10
c001e13a:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e141:	75 d8                	jne    c001e11b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e143:	e4 60                	in     al,0x60
c001e145:	3c 1c                	cmp    al,0x1c
c001e147:	74 04                	je     c001e14d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e149:	3c 5a                	cmp    al,0x5a
c001e14b:	75 f6                	jne    c001e143 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e14d:	e4 60                	in     al,0x60
c001e14f:	3c 5a                	cmp    al,0x5a
c001e151:	74 fa                	je     c001e14d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e153:	3c 1c                	cmp    al,0x1c
c001e155:	74 f6                	je     c001e14d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e157:	eb c2                	jmp    c001e11b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e159:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e160:	0f 85 86 00 00 00    	jne    c001e1ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	68 14 01 00 00       	push   0x114
c001e16e:	e8 74 bc fe ff       	call   c0009de7 <malloc>
c001e173:	83 c4 0c             	add    esp,0xc
c001e176:	89 c3                	mov    ebx,eax
c001e178:	ff 35 90 a1 02 c0    	push   DWORD PTR ds:0xc002a190
c001e17e:	68 c3 73 02 c0       	push   0xc00273c3
c001e183:	50                   	push   eax
c001e184:	e8 2b f5 fe ff       	call   c000d6b4 <File::File(char const*, Process*)>
c001e189:	5a                   	pop    edx
c001e18a:	59                   	pop    ecx
c001e18b:	6a 01                	push   0x1
c001e18d:	53                   	push   ebx
c001e18e:	e8 fb f5 fe ff       	call   c000d78e <File::open(FileOpenMode)>
c001e193:	83 c4 0c             	add    esp,0xc
c001e196:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e19a:	50                   	push   eax
c001e19b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e19f:	50                   	push   eax
c001e1a0:	53                   	push   ebx
c001e1a1:	e8 94 f8 fe ff       	call   c000da3a <File::stat(unsigned long long*, bool*)>
c001e1a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1aa:	40                   	inc    eax
c001e1ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1ae:	e8 34 bc fe ff       	call   c0009de7 <malloc>
c001e1b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e1b7:	a3 88 ab 02 c0       	mov    ds:0xc002ab88,eax
c001e1bc:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e1c0:	5e                   	pop    esi
c001e1c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e1c3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e1c7:	51                   	push   ecx
c001e1c8:	50                   	push   eax
c001e1c9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e1cd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e1d1:	53                   	push   ebx
c001e1d2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e1d5:	83 c4 14             	add    esp,0x14
c001e1d8:	53                   	push   ebx
c001e1d9:	e8 0e f6 fe ff       	call   c000d7ec <File::close()>
c001e1de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1e2:	83 c4 10             	add    esp,0x10
c001e1e5:	a3 84 ab 02 c0       	mov    ds:0xc002ab84,eax
c001e1ea:	eb 36                	jmp    c001e222 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e1ec:	83 ec 0c             	sub    esp,0xc
c001e1ef:	68 dc 73 02 c0       	push   0xc00273dc
c001e1f4:	e8 48 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1f9:	83 c4 10             	add    esp,0x10
c001e1fc:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e203:	0f 85 5d ff ff ff    	jne    c001e166 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e209:	e4 60                	in     al,0x60
c001e20b:	3c 1c                	cmp    al,0x1c
c001e20d:	74 04                	je     c001e213 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e20f:	3c 5a                	cmp    al,0x5a
c001e211:	75 f6                	jne    c001e209 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e213:	e4 60                	in     al,0x60
c001e215:	3c 5a                	cmp    al,0x5a
c001e217:	74 fa                	je     c001e213 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e219:	3c 1c                	cmp    al,0x1c
c001e21b:	74 f6                	je     c001e213 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e21d:	e9 44 ff ff ff       	jmp    c001e166 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e222:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e229:	75 0b                	jne    c001e236 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e22b:	31 f6                	xor    esi,esi
c001e22d:	31 db                	xor    ebx,ebx
c001e22f:	31 ed                	xor    ebp,ebp
c001e231:	e9 a3 01 00 00       	jmp    c001e3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	68 ee 73 02 c0       	push   0xc00273ee
c001e23e:	e8 fe bb fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e243:	8b 15 60 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c60
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	f6 c2 80             	test   dl,0x80
c001e24f:	74 0c                	je     c001e25d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e251:	0f ba e2 0b          	bt     edx,0xb
c001e255:	72 1a                	jb     c001e271 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e257:	eb d2                	jmp    c001e22b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e259:	3c 5a                	cmp    al,0x5a
c001e25b:	74 0c                	je     c001e269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e25d:	e4 60                	in     al,0x60
c001e25f:	3c 1c                	cmp    al,0x1c
c001e261:	75 f6                	jne    c001e259 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e263:	eb 04                	jmp    c001e269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e265:	3c 1c                	cmp    al,0x1c
c001e267:	75 e8                	jne    c001e251 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e269:	e4 60                	in     al,0x60
c001e26b:	3c 5a                	cmp    al,0x5a
c001e26d:	74 fa                	je     c001e269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e26f:	eb f4                	jmp    c001e265 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e271:	83 ec 0c             	sub    esp,0xc
c001e274:	68 f3 73 02 c0       	push   0xc00273f3
c001e279:	e8 c3 bb fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e27e:	83 c4 10             	add    esp,0x10
c001e281:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e288:	75 a1                	jne    c001e22b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e28a:	e4 60                	in     al,0x60
c001e28c:	3c 5a                	cmp    al,0x5a
c001e28e:	74 04                	je     c001e294 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e290:	3c 1c                	cmp    al,0x1c
c001e292:	75 f6                	jne    c001e28a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e294:	e4 60                	in     al,0x60
c001e296:	3c 5a                	cmp    al,0x5a
c001e298:	74 fa                	je     c001e294 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e29a:	3c 1c                	cmp    al,0x1c
c001e29c:	74 f6                	je     c001e294 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e29e:	eb 8b                	jmp    c001e22b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e2a0:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e2a7:	0f 85 3d 01 00 00    	jne    c001e3ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e2ad:	a1 88 ab 02 c0       	mov    eax,ds:0xc002ab88
c001e2b2:	8d 7e 01             	lea    edi,[esi+0x1]
c001e2b5:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e2b8:	d4 40                	aam    0x40
c001e2ba:	d5 39                	aad    0x39
c001e2bc:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e2c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e2c7:	0f 85 53 01 00 00    	jne    c001e420 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e2cd:	8b 15 88 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab88
c001e2d3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e2d6:	d4 40                	aam    0x40
c001e2d8:	d5 39                	aad    0x39
c001e2da:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e2de:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e2e2:	d4 40                	aam    0x40
c001e2e4:	d5 39                	aad    0x39
c001e2e6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e2ea:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e2ee:	d4 40                	aam    0x40
c001e2f0:	d5 39                	aad    0x39
c001e2f2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2f6:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e2fa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e2fe:	3c 56                	cmp    al,0x56
c001e300:	74 49                	je     c001e34b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e302:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e306:	d4 40                	aam    0x40
c001e308:	d5 39                	aad    0x39
c001e30a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e30d:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e311:	0f b6 c9             	movzx  ecx,cl
c001e314:	c1 e1 04             	shl    ecx,0x4
c001e317:	d4 40                	aam    0x40
c001e319:	d5 39                	aad    0x39
c001e31b:	83 e8 30             	sub    eax,0x30
c001e31e:	0f b6 c0             	movzx  eax,al
c001e321:	09 c1                	or     ecx,eax
c001e323:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e327:	c1 e1 04             	shl    ecx,0x4
c001e32a:	d4 40                	aam    0x40
c001e32c:	d5 39                	aad    0x39
c001e32e:	83 e8 30             	sub    eax,0x30
c001e331:	0f b6 c0             	movzx  eax,al
c001e334:	09 c1                	or     ecx,eax
c001e336:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e33a:	c1 e1 04             	shl    ecx,0x4
c001e33d:	d4 40                	aam    0x40
c001e33f:	d5 39                	aad    0x39
c001e341:	83 e8 30             	sub    eax,0x30
c001e344:	0f b6 c0             	movzx  eax,al
c001e347:	09 c8                	or     eax,ecx
c001e349:	89 c5                	mov    ebp,eax
c001e34b:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e34f:	80 f9 44             	cmp    cl,0x44
c001e352:	74 47                	je     c001e39b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e354:	88 c8                	mov    al,cl
c001e356:	d4 40                	aam    0x40
c001e358:	d5 39                	aad    0x39
c001e35a:	83 e8 30             	sub    eax,0x30
c001e35d:	0f b6 f8             	movzx  edi,al
c001e360:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e364:	c1 e7 04             	shl    edi,0x4
c001e367:	d4 40                	aam    0x40
c001e369:	d5 39                	aad    0x39
c001e36b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e36e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e372:	0f b6 db             	movzx  ebx,bl
c001e375:	09 fb                	or     ebx,edi
c001e377:	c1 e3 04             	shl    ebx,0x4
c001e37a:	d4 40                	aam    0x40
c001e37c:	d5 39                	aad    0x39
c001e37e:	83 e8 30             	sub    eax,0x30
c001e381:	0f b6 f8             	movzx  edi,al
c001e384:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e388:	09 fb                	or     ebx,edi
c001e38a:	89 df                	mov    edi,ebx
c001e38c:	c1 e7 04             	shl    edi,0x4
c001e38f:	d4 40                	aam    0x40
c001e391:	d5 39                	aad    0x39
c001e393:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e396:	0f b6 db             	movzx  ebx,bl
c001e399:	09 fb                	or     ebx,edi
c001e39b:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c001e3a0:	83 c6 10             	add    esi,0x10
c001e3a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3a7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e3ab:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e3ae:	3c 0a                	cmp    al,0xa
c001e3b0:	0f 85 a0 00 00 00    	jne    c001e456 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e3b6:	3c 0a                	cmp    al,0xa
c001e3b8:	0f 94 c0             	sete   al
c001e3bb:	0f b6 c0             	movzx  eax,al
c001e3be:	01 c6                	add    esi,eax
c001e3c0:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e3c5:	0f 84 a2 00 00 00    	je     c001e46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e3cb:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e3d3:	0f 84 94 00 00 00    	je     c001e46d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e3d9:	39 35 84 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab84,esi
c001e3df:	0f 8f bb fe ff ff    	jg     c001e2a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e3e5:	e9 e8 00 00 00       	jmp    c001e4d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e3ea:	83 ec 0c             	sub    esp,0xc
c001e3ed:	68 fa 73 02 c0       	push   0xc00273fa
c001e3f2:	e8 4a ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3f7:	83 c4 10             	add    esp,0x10
c001e3fa:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e401:	0f 85 a6 fe ff ff    	jne    c001e2ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e407:	e4 60                	in     al,0x60
c001e409:	3c 5a                	cmp    al,0x5a
c001e40b:	74 04                	je     c001e411 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e40d:	3c 1c                	cmp    al,0x1c
c001e40f:	75 f6                	jne    c001e407 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e411:	e4 60                	in     al,0x60
c001e413:	3c 5a                	cmp    al,0x5a
c001e415:	74 fa                	je     c001e411 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e417:	3c 1c                	cmp    al,0x1c
c001e419:	74 f6                	je     c001e411 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e41b:	e9 8d fe ff ff       	jmp    c001e2ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e420:	83 ec 0c             	sub    esp,0xc
c001e423:	68 02 74 02 c0       	push   0xc0027402
c001e428:	e8 14 ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e437:	0f 85 90 fe ff ff    	jne    c001e2cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e43d:	e4 60                	in     al,0x60
c001e43f:	3c 5a                	cmp    al,0x5a
c001e441:	74 04                	je     c001e447 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e443:	3c 1c                	cmp    al,0x1c
c001e445:	75 f6                	jne    c001e43d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e447:	e4 60                	in     al,0x60
c001e449:	3c 5a                	cmp    al,0x5a
c001e44b:	74 fa                	je     c001e447 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e44d:	3c 1c                	cmp    al,0x1c
c001e44f:	74 f6                	je     c001e447 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e451:	e9 77 fe ff ff       	jmp    c001e2cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e456:	47                   	inc    edi
c001e457:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e45b:	0f 84 55 ff ff ff    	je     c001e3b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e461:	46                   	inc    esi
c001e462:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e465:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e468:	e9 3e ff ff ff       	jmp    c001e3ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e46d:	80 f9 44             	cmp    cl,0x44
c001e470:	74 0e                	je     c001e480 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e472:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e47a:	0f 85 59 ff ff ff    	jne    c001e3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e480:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e484:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e488:	c1 e0 04             	shl    eax,0x4
c001e48b:	83 ea 30             	sub    edx,0x30
c001e48e:	09 d0                	or     eax,edx
c001e490:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e497:	0f 85 3c ff ff ff    	jne    c001e3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e49d:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e4a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e4a5:	c1 e2 04             	shl    edx,0x4
c001e4a8:	83 e8 30             	sub    eax,0x30
c001e4ab:	09 d0                	or     eax,edx
c001e4ad:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e4b4:	0f 85 1f ff ff ff    	jne    c001e3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e4ba:	50                   	push   eax
c001e4bb:	50                   	push   eax
c001e4bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e4c0:	50                   	push   eax
c001e4c1:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e4c8:	e8 83 22 fe ff       	call   c0000750 <strcpy>
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	eb 15                	jmp    c001e4e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e4d2:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4d9:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e4e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e4e7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e4f4:	5b                   	pop    ebx
c001e4f5:	5e                   	pop    esi
c001e4f6:	5f                   	pop    edi
c001e4f7:	5d                   	pop    ebp
c001e4f8:	c3                   	ret    
c001e4f9:	90                   	nop

c001e4fa <PCI::checkBus(unsigned char)>:
c001e4fa:	56                   	push   esi
c001e4fb:	53                   	push   ebx
c001e4fc:	31 db                	xor    ebx,ebx
c001e4fe:	51                   	push   ecx
c001e4ff:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e504:	52                   	push   edx
c001e505:	53                   	push   ebx
c001e506:	43                   	inc    ebx
c001e507:	56                   	push   esi
c001e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e50c:	e8 bf 07 00 00       	call   c001ecd0 <PCI::checkDevice(unsigned char, unsigned char)>
c001e511:	83 c4 10             	add    esp,0x10
c001e514:	83 fb 20             	cmp    ebx,0x20
c001e517:	75 eb                	jne    c001e504 <PCI::checkBus(unsigned char)+0xa>
c001e519:	58                   	pop    eax
c001e51a:	5b                   	pop    ebx
c001e51b:	5e                   	pop    esi
c001e51c:	c3                   	ret    
c001e51d:	90                   	nop

c001e51e <PCI::foundDevice(PCIDeviceInfo)>:
c001e51e:	55                   	push   ebp
c001e51f:	57                   	push   edi
c001e520:	56                   	push   esi
c001e521:	53                   	push   ebx
c001e522:	83 ec 1c             	sub    esp,0x1c
c001e525:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e529:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e52f:	0f 84 20 04 00 00    	je     c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e535:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e53c:	75 37                	jne    c001e575 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e53e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e542:	66 81 f9 06 04       	cmp    cx,0x406
c001e547:	75 5b                	jne    c001e5a4 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e549:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e54e:	50                   	push   eax
c001e54f:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e554:	50                   	push   eax
c001e555:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e55a:	50                   	push   eax
c001e55b:	53                   	push   ebx
c001e55c:	e8 33 fa ff ff       	call   c001df94 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e561:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e565:	0f b6 c0             	movzx  eax,al
c001e568:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e56c:	83 c4 2c             	add    esp,0x2c
c001e56f:	5b                   	pop    ebx
c001e570:	5e                   	pop    esi
c001e571:	5f                   	pop    edi
c001e572:	5d                   	pop    ebp
c001e573:	eb 85                	jmp    c001e4fa <PCI::checkBus(unsigned char)>
c001e575:	83 ec 0c             	sub    esp,0xc
c001e578:	68 0b 74 02 c0       	push   0xc002740b
c001e57d:	e8 bf b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e582:	83 c4 10             	add    esp,0x10
c001e585:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e58c:	75 b0                	jne    c001e53e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e58e:	e4 60                	in     al,0x60
c001e590:	3c 5a                	cmp    al,0x5a
c001e592:	74 04                	je     c001e598 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e594:	3c 1c                	cmp    al,0x1c
c001e596:	75 f6                	jne    c001e58e <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e598:	e4 60                	in     al,0x60
c001e59a:	3c 5a                	cmp    al,0x5a
c001e59c:	74 fa                	je     c001e598 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e59e:	3c 1c                	cmp    al,0x1c
c001e5a0:	74 f6                	je     c001e598 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e5a2:	eb 9a                	jmp    c001e53e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e5a4:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e5aa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e5ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e5b6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e5ba:	88 d0                	mov    al,dl
c001e5bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e5c1:	74 3b                	je     c001e5fe <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e5c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5c7:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5ca:	85 d2                	test   edx,edx
c001e5cc:	74 24                	je     c001e5f2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5ce:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e5d4:	31 ef                	xor    edi,ebp
c001e5d6:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e5dc:	75 14                	jne    c001e5f2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5de:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e5e4:	75 0c                	jne    c001e5f2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5e6:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e5ec:	0f 84 63 03 00 00    	je     c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e5f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5f6:	8b 12                	mov    edx,DWORD PTR [edx]
c001e5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5fc:	eb be                	jmp    c001e5bc <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e5fe:	66 81 f9 01 06       	cmp    cx,0x601
c001e603:	0f 85 81 01 00 00    	jne    c001e78a <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e609:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e610:	75 25                	jne    c001e637 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e612:	83 ec 0c             	sub    esp,0xc
c001e615:	68 64 01 00 00       	push   0x164
c001e61a:	e8 c8 b7 fe ff       	call   c0009de7 <malloc>
c001e61f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e622:	89 c5                	mov    ebp,eax
c001e624:	e8 d3 12 00 00       	call   c001f8fc <SATABus::SATABus()>
c001e629:	83 c4 10             	add    esp,0x10
c001e62c:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e633:	74 4a                	je     c001e67f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e635:	eb 2f                	jmp    c001e666 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e637:	83 ec 0c             	sub    esp,0xc
c001e63a:	68 1b 74 02 c0       	push   0xc002741b
c001e63f:	e8 fd b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e64e:	75 c2                	jne    c001e612 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e650:	e4 60                	in     al,0x60
c001e652:	3c 1c                	cmp    al,0x1c
c001e654:	74 04                	je     c001e65a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e656:	3c 5a                	cmp    al,0x5a
c001e658:	75 f6                	jne    c001e650 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e65a:	e4 60                	in     al,0x60
c001e65c:	3c 5a                	cmp    al,0x5a
c001e65e:	74 fa                	je     c001e65a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e660:	3c 1c                	cmp    al,0x1c
c001e662:	74 f6                	je     c001e65a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e664:	eb ac                	jmp    c001e612 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e666:	83 ec 0c             	sub    esp,0xc
c001e669:	68 21 74 02 c0       	push   0xc0027421
c001e66e:	e8 ce b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e67d:	74 1b                	je     c001e69a <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e67f:	50                   	push   eax
c001e680:	50                   	push   eax
c001e681:	55                   	push   ebp
c001e682:	53                   	push   ebx
c001e683:	e8 32 00 ff ff       	call   c000e6ba <Device::addChild(Device*)>
c001e688:	83 c4 10             	add    esp,0x10
c001e68b:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e692:	74 33                	je     c001e6c7 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e694:	eb 18                	jmp    c001e6ae <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e696:	3c 1c                	cmp    al,0x1c
c001e698:	74 0c                	je     c001e6a6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e69a:	e4 60                	in     al,0x60
c001e69c:	3c 5a                	cmp    al,0x5a
c001e69e:	75 f6                	jne    c001e696 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e6a0:	eb 04                	jmp    c001e6a6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e6a2:	3c 1c                	cmp    al,0x1c
c001e6a4:	75 d9                	jne    c001e67f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e6a6:	e4 60                	in     al,0x60
c001e6a8:	3c 5a                	cmp    al,0x5a
c001e6aa:	74 fa                	je     c001e6a6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e6ac:	eb f4                	jmp    c001e6a2 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e6ae:	83 ec 0c             	sub    esp,0xc
c001e6b1:	68 29 74 02 c0       	push   0xc0027429
c001e6b6:	e8 86 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e6c5:	74 29                	je     c001e6f0 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e6c7:	83 ec 2c             	sub    esp,0x2c
c001e6ca:	b9 09 00 00 00       	mov    ecx,0x9
c001e6cf:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e6d3:	fc                   	cld    
c001e6d4:	89 e7                	mov    edi,esp
c001e6d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6d8:	55                   	push   ebp
c001e6d9:	e8 ee fe fe ff       	call   c000e5cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e6de:	83 c4 30             	add    esp,0x30
c001e6e1:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e6e8:	74 33                	je     c001e71d <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e6ea:	eb 18                	jmp    c001e704 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e6ec:	3c 1c                	cmp    al,0x1c
c001e6ee:	74 0c                	je     c001e6fc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6f0:	e4 60                	in     al,0x60
c001e6f2:	3c 5a                	cmp    al,0x5a
c001e6f4:	75 f6                	jne    c001e6ec <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e6f6:	eb 04                	jmp    c001e6fc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6f8:	3c 1c                	cmp    al,0x1c
c001e6fa:	75 cb                	jne    c001e6c7 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e6fc:	e4 60                	in     al,0x60
c001e6fe:	3c 5a                	cmp    al,0x5a
c001e700:	74 fa                	je     c001e6fc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e702:	eb f4                	jmp    c001e6f8 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e704:	83 ec 0c             	sub    esp,0xc
c001e707:	68 31 74 02 c0       	push   0xc0027431
c001e70c:	e8 30 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e71b:	74 23                	je     c001e740 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e71d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e720:	6a 00                	push   0x0
c001e722:	6a 00                	push   0x0
c001e724:	6a 00                	push   0x0
c001e726:	55                   	push   ebp
c001e727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e72a:	83 c4 10             	add    esp,0x10
c001e72d:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e734:	0f 84 1b 02 00 00    	je     c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e73a:	eb 18                	jmp    c001e754 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e73c:	3c 1c                	cmp    al,0x1c
c001e73e:	74 0c                	je     c001e74c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e740:	e4 60                	in     al,0x60
c001e742:	3c 5a                	cmp    al,0x5a
c001e744:	75 f6                	jne    c001e73c <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e746:	eb 04                	jmp    c001e74c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e748:	3c 1c                	cmp    al,0x1c
c001e74a:	75 d1                	jne    c001e71d <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e74c:	e4 60                	in     al,0x60
c001e74e:	3c 5a                	cmp    al,0x5a
c001e750:	74 fa                	je     c001e74c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e752:	eb f4                	jmp    c001e748 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 39 74 02 c0       	push   0xc0027439
c001e75c:	e8 e0 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e76b:	0f 85 e4 01 00 00    	jne    c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e771:	e4 60                	in     al,0x60
c001e773:	3c 5a                	cmp    al,0x5a
c001e775:	74 04                	je     c001e77b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e777:	3c 1c                	cmp    al,0x1c
c001e779:	75 f6                	jne    c001e771 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e77b:	e4 60                	in     al,0x60
c001e77d:	3c 5a                	cmp    al,0x5a
c001e77f:	74 fa                	je     c001e77b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e781:	3c 1c                	cmp    al,0x1c
c001e783:	74 f6                	je     c001e77b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e785:	e9 cb 01 00 00       	jmp    c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e78a:	66 81 f9 01 01       	cmp    cx,0x101
c001e78f:	0f 85 7a 01 00 00    	jne    c001e90f <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e795:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e79c:	75 25                	jne    c001e7c3 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e79e:	83 ec 0c             	sub    esp,0xc
c001e7a1:	68 70 02 00 00       	push   0x270
c001e7a6:	e8 3c b6 fe ff       	call   c0009de7 <malloc>
c001e7ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7ae:	89 c5                	mov    ebp,eax
c001e7b0:	e8 df 05 00 00       	call   c001ed94 <IDE::IDE()>
c001e7b5:	83 c4 10             	add    esp,0x10
c001e7b8:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e7bf:	74 4a                	je     c001e80b <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e7c1:	eb 2f                	jmp    c001e7f2 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	68 41 74 02 c0       	push   0xc0027441
c001e7cb:	e8 71 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7d0:	83 c4 10             	add    esp,0x10
c001e7d3:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e7da:	75 c2                	jne    c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7dc:	e4 60                	in     al,0x60
c001e7de:	3c 5a                	cmp    al,0x5a
c001e7e0:	74 04                	je     c001e7e6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7e2:	3c 1c                	cmp    al,0x1c
c001e7e4:	75 f6                	jne    c001e7dc <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e7e6:	e4 60                	in     al,0x60
c001e7e8:	3c 5a                	cmp    al,0x5a
c001e7ea:	74 fa                	je     c001e7e6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7ec:	3c 1c                	cmp    al,0x1c
c001e7ee:	74 f6                	je     c001e7e6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7f0:	eb ac                	jmp    c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7f2:	83 ec 0c             	sub    esp,0xc
c001e7f5:	68 48 74 02 c0       	push   0xc0027448
c001e7fa:	e8 42 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7ff:	83 c4 10             	add    esp,0x10
c001e802:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e809:	74 1b                	je     c001e826 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e80b:	57                   	push   edi
c001e80c:	57                   	push   edi
c001e80d:	55                   	push   ebp
c001e80e:	53                   	push   ebx
c001e80f:	e8 a6 fe fe ff       	call   c000e6ba <Device::addChild(Device*)>
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e81e:	74 33                	je     c001e853 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e820:	eb 18                	jmp    c001e83a <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e822:	3c 1c                	cmp    al,0x1c
c001e824:	74 0c                	je     c001e832 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e826:	e4 60                	in     al,0x60
c001e828:	3c 5a                	cmp    al,0x5a
c001e82a:	75 f6                	jne    c001e822 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e82c:	eb 04                	jmp    c001e832 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e82e:	3c 1c                	cmp    al,0x1c
c001e830:	75 d9                	jne    c001e80b <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e832:	e4 60                	in     al,0x60
c001e834:	3c 5a                	cmp    al,0x5a
c001e836:	74 fa                	je     c001e832 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e838:	eb f4                	jmp    c001e82e <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e83a:	83 ec 0c             	sub    esp,0xc
c001e83d:	68 4f 74 02 c0       	push   0xc002744f
c001e842:	e8 fa b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e851:	74 29                	je     c001e87c <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e853:	83 ec 2c             	sub    esp,0x2c
c001e856:	b9 09 00 00 00       	mov    ecx,0x9
c001e85b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e85f:	fc                   	cld    
c001e860:	89 e7                	mov    edi,esp
c001e862:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e864:	55                   	push   ebp
c001e865:	e8 62 fd fe ff       	call   c000e5cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e86a:	83 c4 30             	add    esp,0x30
c001e86d:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e874:	74 33                	je     c001e8a9 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e876:	eb 18                	jmp    c001e890 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e878:	3c 1c                	cmp    al,0x1c
c001e87a:	74 0c                	je     c001e888 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e87c:	e4 60                	in     al,0x60
c001e87e:	3c 5a                	cmp    al,0x5a
c001e880:	75 f6                	jne    c001e878 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e882:	eb 04                	jmp    c001e888 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e884:	3c 1c                	cmp    al,0x1c
c001e886:	75 cb                	jne    c001e853 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e888:	e4 60                	in     al,0x60
c001e88a:	3c 5a                	cmp    al,0x5a
c001e88c:	74 fa                	je     c001e888 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e88e:	eb f4                	jmp    c001e884 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	68 56 74 02 c0       	push   0xc0027456
c001e898:	e8 a4 b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e8a7:	74 23                	je     c001e8cc <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e8a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e8ac:	6a 00                	push   0x0
c001e8ae:	6a 00                	push   0x0
c001e8b0:	6a 00                	push   0x0
c001e8b2:	55                   	push   ebp
c001e8b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8b6:	83 c4 10             	add    esp,0x10
c001e8b9:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001e8c0:	0f 84 8f 00 00 00    	je     c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8c6:	eb 18                	jmp    c001e8e0 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e8c8:	3c 1c                	cmp    al,0x1c
c001e8ca:	74 0c                	je     c001e8d8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8cc:	e4 60                	in     al,0x60
c001e8ce:	3c 5a                	cmp    al,0x5a
c001e8d0:	75 f6                	jne    c001e8c8 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e8d2:	eb 04                	jmp    c001e8d8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8d4:	3c 1c                	cmp    al,0x1c
c001e8d6:	75 d1                	jne    c001e8a9 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e8d8:	e4 60                	in     al,0x60
c001e8da:	3c 5a                	cmp    al,0x5a
c001e8dc:	74 fa                	je     c001e8d8 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8de:	eb f4                	jmp    c001e8d4 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	68 5d 74 02 c0       	push   0xc002745d
c001e8e8:	e8 54 b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e8ed:	83 c4 10             	add    esp,0x10
c001e8f0:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001e8f7:	75 5c                	jne    c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8f9:	e4 60                	in     al,0x60
c001e8fb:	3c 5a                	cmp    al,0x5a
c001e8fd:	74 04                	je     c001e903 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8ff:	3c 1c                	cmp    al,0x1c
c001e901:	75 f6                	jne    c001e8f9 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e903:	e4 60                	in     al,0x60
c001e905:	3c 5a                	cmp    al,0x5a
c001e907:	74 fa                	je     c001e903 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e909:	3c 1c                	cmp    al,0x1c
c001e90b:	74 f6                	je     c001e903 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e90d:	eb 46                	jmp    c001e955 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e90f:	83 ec 0c             	sub    esp,0xc
c001e912:	68 58 01 00 00       	push   0x158
c001e917:	e8 cb b4 fe ff       	call   c0009de7 <malloc>
c001e91c:	89 c5                	mov    ebp,eax
c001e91e:	58                   	pop    eax
c001e91f:	5a                   	pop    edx
c001e920:	68 64 74 02 c0       	push   0xc0027464
c001e925:	55                   	push   ebp
c001e926:	e8 99 00 ff ff       	call   c000e9c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001e92b:	59                   	pop    ecx
c001e92c:	5e                   	pop    esi
c001e92d:	55                   	push   ebp
c001e92e:	53                   	push   ebx
c001e92f:	e8 86 fd fe ff       	call   c000e6ba <Device::addChild(Device*)>
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	b9 09 00 00 00       	mov    ecx,0x9
c001e93c:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e940:	fc                   	cld    
c001e941:	89 fe                	mov    esi,edi
c001e943:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e945:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e949:	83 c4 1c             	add    esp,0x1c
c001e94c:	5b                   	pop    ebx
c001e94d:	5e                   	pop    esi
c001e94e:	5f                   	pop    edi
c001e94f:	5d                   	pop    ebp
c001e950:	e9 77 fc fe ff       	jmp    c000e5cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e955:	83 c4 1c             	add    esp,0x1c
c001e958:	5b                   	pop    ebx
c001e959:	5e                   	pop    esi
c001e95a:	5f                   	pop    edi
c001e95b:	5d                   	pop    ebp
c001e95c:	c3                   	ret    
c001e95d:	90                   	nop

c001e95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e95e:	55                   	push   ebp
c001e95f:	57                   	push   edi
c001e960:	56                   	push   esi
c001e961:	53                   	push   ebx
c001e962:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e968:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e96f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e976:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e97a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e985:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e98c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e990:	68 7e 74 02 c0       	push   0xc002747e
c001e995:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e999:	53                   	push   ebx
c001e99a:	e8 b1 1d fe ff       	call   c0000750 <strcpy>
c001e99f:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e9a4:	b2 64                	mov    dl,0x64
c001e9a6:	89 c8                	mov    eax,ecx
c001e9a8:	f6 f2                	div    dl
c001e9aa:	b2 0a                	mov    dl,0xa
c001e9ac:	83 c0 30             	add    eax,0x30
c001e9af:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e9b3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e9b7:	83 c4 10             	add    esp,0x10
c001e9ba:	89 c8                	mov    eax,ecx
c001e9bc:	f6 f2                	div    dl
c001e9be:	89 c1                	mov    ecx,eax
c001e9c0:	0f b6 c0             	movzx  eax,al
c001e9c3:	88 e9                	mov    cl,ch
c001e9c5:	f6 f2                	div    dl
c001e9c7:	88 e0                	mov    al,ah
c001e9c9:	83 c0 30             	add    eax,0x30
c001e9cc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e9d0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e9d4:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9d7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e9db:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e9df:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e9e4:	f6 f2                	div    dl
c001e9e6:	89 c1                	mov    ecx,eax
c001e9e8:	0f b6 c0             	movzx  eax,al
c001e9eb:	88 e9                	mov    cl,ch
c001e9ed:	f6 f2                	div    dl
c001e9ef:	88 e0                	mov    al,ah
c001e9f1:	83 c0 30             	add    eax,0x30
c001e9f4:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e9f8:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e9fc:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9ff:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ea03:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001ea07:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001ea0c:	f6 f2                	div    dl
c001ea0e:	89 c1                	mov    ecx,eax
c001ea10:	0f b6 c0             	movzx  eax,al
c001ea13:	88 e9                	mov    cl,ch
c001ea15:	f6 f2                	div    dl
c001ea17:	88 e0                	mov    al,ah
c001ea19:	83 c0 30             	add    eax,0x30
c001ea1c:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001ea23:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ea27:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ea2b:	8d 41 30             	lea    eax,[ecx+0x30]
c001ea2e:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001ea32:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001ea36:	74 29                	je     c001ea61 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	53                   	push   ebx
c001ea3c:	e8 00 b4 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001ea41:	83 c4 10             	add    esp,0x10
c001ea44:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001ea4b:	75 14                	jne    c001ea61 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea4d:	e4 60                	in     al,0x60
c001ea4f:	3c 1c                	cmp    al,0x1c
c001ea51:	74 04                	je     c001ea57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea53:	3c 5a                	cmp    al,0x5a
c001ea55:	75 f6                	jne    c001ea4d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001ea57:	e4 60                	in     al,0x60
c001ea59:	3c 5a                	cmp    al,0x5a
c001ea5b:	74 fa                	je     c001ea57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea5d:	3c 1c                	cmp    al,0x1c
c001ea5f:	74 f6                	je     c001ea57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea61:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001ea66:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001ea6b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	6a 0c                	push   0xc
c001ea75:	56                   	push   esi
c001ea76:	53                   	push   ebx
c001ea77:	57                   	push   edi
c001ea78:	55                   	push   ebp
c001ea79:	e8 68 f3 ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea7e:	83 c4 20             	add    esp,0x20
c001ea81:	56                   	push   esi
c001ea82:	53                   	push   ebx
c001ea83:	57                   	push   edi
c001ea84:	55                   	push   ebp
c001ea85:	e8 50 f4 ff ff       	call   c001deda <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ea8a:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001ea8f:	56                   	push   esi
c001ea90:	53                   	push   ebx
c001ea91:	57                   	push   edi
c001ea92:	55                   	push   ebp
c001ea93:	e8 d8 f4 ff ff       	call   c001df70 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ea98:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001ea9c:	83 c4 14             	add    esp,0x14
c001ea9f:	6a 3c                	push   0x3c
c001eaa1:	56                   	push   esi
c001eaa2:	53                   	push   ebx
c001eaa3:	57                   	push   edi
c001eaa4:	55                   	push   ebp
c001eaa5:	e8 3c f3 ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eaaa:	0f b6 c4             	movzx  eax,ah
c001eaad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001eab1:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001eab5:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001eabc:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001eac1:	83 c4 20             	add    esp,0x20
c001eac4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eaca:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001ead1:	0f 84 38 01 00 00    	je     c001ec0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ead7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001eadf:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001eae4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eae8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eaee:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001eaf4:	0f 8e 15 01 00 00    	jle    c001ec0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eafa:	50                   	push   eax
c001eafb:	50                   	push   eax
c001eafc:	68 99 74 02 c0       	push   0xc0027499
c001eb01:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb05:	50                   	push   eax
c001eb06:	e8 45 1c fe ff       	call   c0000750 <strcpy>
c001eb0b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001eb0f:	b9 0a 00 00 00       	mov    ecx,0xa
c001eb14:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001eb18:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001eb1c:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eb20:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001eb24:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eb28:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eb2c:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eb30:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eb34:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eb38:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eb3c:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eb40:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001eb44:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001eb48:	83 c4 10             	add    esp,0x10
c001eb4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb4f:	99                   	cdq    
c001eb50:	f7 f9                	idiv   ecx
c001eb52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eb56:	99                   	cdq    
c001eb57:	f7 f9                	idiv   ecx
c001eb59:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001eb5d:	83 c2 30             	add    edx,0x30
c001eb60:	83 c0 30             	add    eax,0x30
c001eb63:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eb67:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eb6b:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001eb72:	74 2d                	je     c001eba1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb74:	83 ec 0c             	sub    esp,0xc
c001eb77:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb7b:	50                   	push   eax
c001eb7c:	e8 c0 b2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001eb81:	83 c4 10             	add    esp,0x10
c001eb84:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001eb8b:	75 14                	jne    c001eba1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb8d:	e4 60                	in     al,0x60
c001eb8f:	3c 5a                	cmp    al,0x5a
c001eb91:	74 04                	je     c001eb97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb93:	3c 1c                	cmp    al,0x1c
c001eb95:	75 f6                	jne    c001eb8d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001eb97:	e4 60                	in     al,0x60
c001eb99:	3c 5a                	cmp    al,0x5a
c001eb9b:	74 fa                	je     c001eb97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb9d:	3c 1c                	cmp    al,0x1c
c001eb9f:	74 f6                	je     c001eb97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eba5:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001ebaa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ebb0:	8d 04 d0             	lea    eax,[eax+edx*8]
c001ebb3:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001ebba:	39 d3                	cmp    ebx,edx
c001ebbc:	75 48                	jne    c001ec06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001ebbe:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001ebc5:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001ebc9:	75 3b                	jne    c001ec06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	68 c8 74 02 c0       	push   0xc00274c8
c001ebd3:	e8 71 e5 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001ebd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ebdc:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001ebe1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ebe7:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001ebef:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ebf3:	50                   	push   eax
c001ebf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ebf8:	53                   	push   ebx
c001ebf9:	68 ed 74 02 c0       	push   0xc00274ed
c001ebfe:	e8 46 e5 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001ec03:	83 c4 20             	add    esp,0x20
c001ec06:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ec0a:	e9 d0 fe ff ff       	jmp    c001eadf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001ec0f:	31 d2                	xor    edx,edx
c001ec11:	83 ec 0c             	sub    esp,0xc
c001ec14:	56                   	push   esi
c001ec15:	53                   	push   ebx
c001ec16:	57                   	push   edi
c001ec17:	52                   	push   edx
c001ec18:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ec1c:	55                   	push   ebp
c001ec1d:	e8 9a f3 ff ff       	call   c001dfbc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ec26:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ec2d:	42                   	inc    edx
c001ec2e:	83 c4 20             	add    esp,0x20
c001ec31:	83 fa 06             	cmp    edx,0x6
c001ec34:	75 db                	jne    c001ec11 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ec36:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ec3b:	83 ec 0c             	sub    esp,0xc
c001ec3e:	86 e0                	xchg   al,ah
c001ec40:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ec48:	6a 02                	push   0x2
c001ec4a:	56                   	push   esi
c001ec4b:	53                   	push   ebx
c001ec4c:	57                   	push   edi
c001ec4d:	55                   	push   ebp
c001ec4e:	e8 93 f1 ff ff       	call   c001dde6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec53:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ec5b:	83 c4 20             	add    esp,0x20
c001ec5e:	56                   	push   esi
c001ec5f:	53                   	push   ebx
c001ec60:	57                   	push   edi
c001ec61:	55                   	push   ebp
c001ec62:	e8 bd f2 ff ff       	call   c001df24 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ec67:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ec6e:	56                   	push   esi
c001ec6f:	53                   	push   ebx
c001ec70:	57                   	push   edi
c001ec71:	55                   	push   ebp
c001ec72:	e8 17 f2 ff ff       	call   c001de8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec77:	b9 09 00 00 00       	mov    ecx,0x9
c001ec7c:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ec84:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ec88:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ec8f:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec93:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ec9a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec9e:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001eca5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001eca9:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	fc                   	cld    
c001ecb4:	89 e7                	mov    edi,esp
c001ecb6:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ecbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ecbf:	55                   	push   ebp
c001ecc0:	e8 59 f8 ff ff       	call   c001e51e <PCI::foundDevice(PCIDeviceInfo)>
c001ecc5:	81 c4 dc 00 00 00    	add    esp,0xdc
c001eccb:	5b                   	pop    ebx
c001eccc:	5e                   	pop    esi
c001eccd:	5f                   	pop    edi
c001ecce:	5d                   	pop    ebp
c001eccf:	c3                   	ret    

c001ecd0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ecd0:	55                   	push   ebp
c001ecd1:	57                   	push   edi
c001ecd2:	56                   	push   esi
c001ecd3:	53                   	push   ebx
c001ecd4:	83 ec 0c             	sub    esp,0xc
c001ecd7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ecdb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ece0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ece5:	6a 00                	push   0x0
c001ece7:	56                   	push   esi
c001ece8:	57                   	push   edi
c001ece9:	55                   	push   ebp
c001ecea:	e8 9f f1 ff ff       	call   c001de8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ecef:	6a 00                	push   0x0
c001ecf1:	56                   	push   esi
c001ecf2:	57                   	push   edi
c001ecf3:	55                   	push   ebp
c001ecf4:	e8 65 fc ff ff       	call   c001e95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ecf9:	83 c4 20             	add    esp,0x20
c001ecfc:	6a 00                	push   0x0
c001ecfe:	56                   	push   esi
c001ecff:	57                   	push   edi
c001ed00:	55                   	push   ebp
c001ed01:	e8 ac f1 ff ff       	call   c001deb2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	84 c0                	test   al,al
c001ed0b:	79 27                	jns    c001ed34 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ed0d:	bb 01 00 00 00       	mov    ebx,0x1
c001ed12:	53                   	push   ebx
c001ed13:	56                   	push   esi
c001ed14:	57                   	push   edi
c001ed15:	55                   	push   ebp
c001ed16:	e8 73 f1 ff ff       	call   c001de8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed1b:	83 c4 10             	add    esp,0x10
c001ed1e:	66 40                	inc    ax
c001ed20:	74 0c                	je     c001ed2e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ed22:	53                   	push   ebx
c001ed23:	56                   	push   esi
c001ed24:	57                   	push   edi
c001ed25:	55                   	push   ebp
c001ed26:	e8 33 fc ff ff       	call   c001e95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ed2b:	83 c4 10             	add    esp,0x10
c001ed2e:	43                   	inc    ebx
c001ed2f:	83 fb 08             	cmp    ebx,0x8
c001ed32:	75 de                	jne    c001ed12 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ed34:	83 c4 0c             	add    esp,0xc
c001ed37:	5b                   	pop    ebx
c001ed38:	5e                   	pop    esi
c001ed39:	5f                   	pop    edi
c001ed3a:	5d                   	pop    ebp
c001ed3b:	c3                   	ret    

c001ed3c <PCI::detect()>:
c001ed3c:	56                   	push   esi
c001ed3d:	53                   	push   ebx
c001ed3e:	53                   	push   ebx
c001ed3f:	31 db                	xor    ebx,ebx
c001ed41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ed45:	6a 00                	push   0x0
c001ed47:	6a 00                	push   0x0
c001ed49:	6a 00                	push   0x0
c001ed4b:	56                   	push   esi
c001ed4c:	e8 61 f1 ff ff       	call   c001deb2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed51:	83 c4 10             	add    esp,0x10
c001ed54:	a8 80                	test   al,0x80
c001ed56:	75 21                	jne    c001ed79 <PCI::detect()+0x3d>
c001ed58:	51                   	push   ecx
c001ed59:	51                   	push   ecx
c001ed5a:	6a 00                	push   0x0
c001ed5c:	56                   	push   esi
c001ed5d:	e8 98 f7 ff ff       	call   c001e4fa <PCI::checkBus(unsigned char)>
c001ed62:	83 c4 10             	add    esp,0x10
c001ed65:	eb 24                	jmp    c001ed8b <PCI::detect()+0x4f>
c001ed67:	52                   	push   edx
c001ed68:	52                   	push   edx
c001ed69:	53                   	push   ebx
c001ed6a:	43                   	inc    ebx
c001ed6b:	56                   	push   esi
c001ed6c:	e8 89 f7 ff ff       	call   c001e4fa <PCI::checkBus(unsigned char)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	83 fb 08             	cmp    ebx,0x8
c001ed77:	74 12                	je     c001ed8b <PCI::detect()+0x4f>
c001ed79:	53                   	push   ebx
c001ed7a:	6a 00                	push   0x0
c001ed7c:	6a 00                	push   0x0
c001ed7e:	56                   	push   esi
c001ed7f:	e8 0a f1 ff ff       	call   c001de8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed84:	83 c4 10             	add    esp,0x10
c001ed87:	66 40                	inc    ax
c001ed89:	74 dc                	je     c001ed67 <PCI::detect()+0x2b>
c001ed8b:	58                   	pop    eax
c001ed8c:	5b                   	pop    ebx
c001ed8d:	5e                   	pop    esi
c001ed8e:	c3                   	ret    
c001ed8f:	90                   	nop

c001ed90 <IDE::close(int, int, void*)>:
c001ed90:	83 c8 ff             	or     eax,0xffffffff
c001ed93:	c3                   	ret    

c001ed94 <IDE::IDE()>:
c001ed94:	83 ec 0c             	sub    esp,0xc
c001ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9b:	83 ec 08             	sub    esp,0x8
c001ed9e:	68 34 75 02 c0       	push   0xc0027534
c001eda3:	50                   	push   eax
c001eda4:	e8 bf fc fe ff       	call   c000ea68 <HardDiskController::HardDiskController(char const*)>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	ba e0 75 02 c0       	mov    edx,0xc00275e0
c001edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb5:	89 10                	mov    DWORD PTR [eax],edx
c001edb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001edc2:	90                   	nop
c001edc3:	83 c4 0c             	add    esp,0xc
c001edc6:	c3                   	ret    
c001edc7:	90                   	nop

c001edc8 <IDE::prepareInterrupt(unsigned char)>:
c001edc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001edcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001edd1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001edd9:	c3                   	ret    

c001edda <selectDrive(unsigned char, unsigned char)>:
c001edda:	c3                   	ret    
c001eddb:	90                   	nop

c001eddc <IDE::getBase(unsigned char)>:
c001eddc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ede1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ede5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eded:	c3                   	ret    

c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001edee:	55                   	push   ebp
c001edef:	57                   	push   edi
c001edf0:	56                   	push   esi
c001edf1:	53                   	push   ebx
c001edf2:	83 ec 1c             	sub    esp,0x1c
c001edf5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001edf9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edfd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ee00:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ee08:	80 f9 03             	cmp    cl,0x3
c001ee0b:	77 51                	ja     c001ee5e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ee0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee11:	0f b6 f2             	movzx  esi,dl
c001ee14:	0f b6 db             	movzx  ebx,bl
c001ee17:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee1a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ee1e:	83 ca 80             	or     edx,0xffffff80
c001ee21:	0f b6 d2             	movzx  edx,dl
c001ee24:	52                   	push   edx
c001ee25:	6a 0c                	push   0xc
c001ee27:	56                   	push   esi
c001ee28:	57                   	push   edi
c001ee29:	e8 c0 ff ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee2e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ee33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee37:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ee3b:	ee                   	out    dx,al
c001ee3c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ee41:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ee45:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ee49:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee4d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee55:	83 c4 2c             	add    esp,0x2c
c001ee58:	5b                   	pop    ebx
c001ee59:	5e                   	pop    esi
c001ee5a:	5f                   	pop    edi
c001ee5b:	5d                   	pop    ebp
c001ee5c:	eb 90                	jmp    c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee5e:	80 fb 07             	cmp    bl,0x7
c001ee61:	77 12                	ja     c001ee75 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ee63:	0f b6 d2             	movzx  edx,dl
c001ee66:	0f b6 db             	movzx  ebx,bl
c001ee69:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ee71:	89 da                	mov    edx,ebx
c001ee73:	eb 2f                	jmp    c001eea4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee75:	80 fb 0d             	cmp    bl,0xd
c001ee78:	77 13                	ja     c001ee8d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ee7a:	0f b6 d2             	movzx  edx,dl
c001ee7d:	0f b6 db             	movzx  ebx,bl
c001ee80:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ee87:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee8b:	eb 17                	jmp    c001eea4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee8d:	80 fb 15             	cmp    bl,0x15
c001ee90:	77 13                	ja     c001eea5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee92:	0f b6 d2             	movzx  edx,dl
c001ee95:	0f b6 db             	movzx  ebx,bl
c001ee98:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001eea0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eea4:	ee                   	out    dx,al
c001eea5:	83 c4 1c             	add    esp,0x1c
c001eea8:	5b                   	pop    ebx
c001eea9:	5e                   	pop    esi
c001eeaa:	5f                   	pop    edi
c001eeab:	5d                   	pop    ebp
c001eeac:	c3                   	ret    
c001eead:	90                   	nop

c001eeae <IDE::read(unsigned char, unsigned char)>:
c001eeae:	55                   	push   ebp
c001eeaf:	57                   	push   edi
c001eeb0:	56                   	push   esi
c001eeb1:	53                   	push   ebx
c001eeb2:	83 ec 1c             	sub    esp,0x1c
c001eeb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eeb9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eebd:	8d 43 f8             	lea    eax,[ebx-0x8]
c001eec0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eec4:	3c 03                	cmp    al,0x3
c001eec6:	77 43                	ja     c001ef0b <IDE::read(unsigned char, unsigned char)+0x5d>
c001eec8:	0f b6 f2             	movzx  esi,dl
c001eecb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eece:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001eed2:	83 c8 80             	or     eax,0xffffff80
c001eed5:	0f b6 c0             	movzx  eax,al
c001eed8:	50                   	push   eax
c001eed9:	6a 0c                	push   0xc
c001eedb:	56                   	push   esi
c001eedc:	57                   	push   edi
c001eedd:	e8 0c ff ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eee2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001eee7:	0f b6 c3             	movzx  eax,bl
c001eeea:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001eeee:	ec                   	in     al,dx
c001eeef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eef3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eef8:	52                   	push   edx
c001eef9:	6a 0c                	push   0xc
c001eefb:	56                   	push   esi
c001eefc:	57                   	push   edi
c001eefd:	e8 ec fe ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef02:	83 c4 20             	add    esp,0x20
c001ef05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ef09:	eb 49                	jmp    c001ef54 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ef0b:	80 fb 07             	cmp    bl,0x7
c001ef0e:	77 12                	ja     c001ef22 <IDE::read(unsigned char, unsigned char)+0x74>
c001ef10:	0f b6 d2             	movzx  edx,dl
c001ef13:	0f b6 c3             	movzx  eax,bl
c001ef16:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ef1e:	89 c2                	mov    edx,eax
c001ef20:	eb 31                	jmp    c001ef53 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ef22:	80 fb 0d             	cmp    bl,0xd
c001ef25:	77 13                	ja     c001ef3a <IDE::read(unsigned char, unsigned char)+0x8c>
c001ef27:	0f b6 d2             	movzx  edx,dl
c001ef2a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ef31:	0f b6 d3             	movzx  edx,bl
c001ef34:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ef38:	eb 19                	jmp    c001ef53 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ef3a:	31 c0                	xor    eax,eax
c001ef3c:	80 fb 15             	cmp    bl,0x15
c001ef3f:	77 13                	ja     c001ef54 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ef41:	0f b6 d2             	movzx  edx,dl
c001ef44:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ef4c:	0f b6 d3             	movzx  edx,bl
c001ef4f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ef53:	ec                   	in     al,dx
c001ef54:	83 c4 1c             	add    esp,0x1c
c001ef57:	5b                   	pop    ebx
c001ef58:	5e                   	pop    esi
c001ef59:	5f                   	pop    edi
c001ef5a:	5d                   	pop    ebp
c001ef5b:	c3                   	ret    

c001ef5c <IDE::waitInterrupt(unsigned char)>:
c001ef5c:	55                   	push   ebp
c001ef5d:	57                   	push   edi
c001ef5e:	56                   	push   esi
c001ef5f:	53                   	push   ebx
c001ef60:	31 db                	xor    ebx,ebx
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ef69:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ef6e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ef76:	89 e8                	mov    eax,ebp
c001ef78:	84 c0                	test   al,al
c001ef7a:	75 30                	jne    c001efac <IDE::waitInterrupt(unsigned char)+0x50>
c001ef7c:	50                   	push   eax
c001ef7d:	6a 0c                	push   0xc
c001ef7f:	56                   	push   esi
c001ef80:	57                   	push   edi
c001ef81:	e8 28 ff ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001ef86:	83 c4 10             	add    esp,0x10
c001ef89:	a8 01                	test   al,0x1
c001ef8b:	75 27                	jne    c001efb4 <IDE::waitInterrupt(unsigned char)+0x58>
c001ef8d:	f6 c3 04             	test   bl,0x4
c001ef90:	75 12                	jne    c001efa4 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef92:	83 fb 32             	cmp    ebx,0x32
c001ef95:	7e 0d                	jle    c001efa4 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef97:	83 ec 0c             	sub    esp,0xc
c001ef9a:	6a 64                	push   0x64
c001ef9c:	e8 db a2 ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c001efa1:	83 c4 10             	add    esp,0x10
c001efa4:	83 fb 3c             	cmp    ebx,0x3c
c001efa7:	74 0b                	je     c001efb4 <IDE::waitInterrupt(unsigned char)+0x58>
c001efa9:	43                   	inc    ebx
c001efaa:	eb c2                	jmp    c001ef6e <IDE::waitInterrupt(unsigned char)+0x12>
c001efac:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001efb4:	83 c4 0c             	add    esp,0xc
c001efb7:	89 e8                	mov    eax,ebp
c001efb9:	5b                   	pop    ebx
c001efba:	5e                   	pop    esi
c001efbb:	5f                   	pop    edi
c001efbc:	5d                   	pop    ebp
c001efbd:	c3                   	ret    

c001efbe <ideChannel0IRQHandler(regs*, void*)>:
c001efbe:	83 ec 10             	sub    esp,0x10
c001efc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efc5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001efcc:	6a 07                	push   0x7
c001efce:	6a 00                	push   0x0
c001efd0:	50                   	push   eax
c001efd1:	e8 d8 fe ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001efd6:	83 c4 1c             	add    esp,0x1c
c001efd9:	c3                   	ret    

c001efda <ideChannel1IRQHandler(regs*, void*)>:
c001efda:	83 ec 10             	sub    esp,0x10
c001efdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efe1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001efe8:	6a 07                	push   0x7
c001efea:	6a 01                	push   0x1
c001efec:	50                   	push   eax
c001efed:	e8 bc fe ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001eff2:	83 c4 1c             	add    esp,0x1c
c001eff5:	c3                   	ret    

c001eff6 <IDE::enableIRQs(unsigned char, bool)>:
c001eff6:	57                   	push   edi
c001eff7:	56                   	push   esi
c001eff8:	be 04 00 00 00       	mov    esi,0x4
c001effd:	53                   	push   ebx
c001effe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001f003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f007:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001f00c:	0f 94 c0             	sete   al
c001f00f:	d1 e0                	shl    eax,1
c001f011:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001f018:	0f b6 c0             	movzx  eax,al
c001f01b:	50                   	push   eax
c001f01c:	6a 0c                	push   0xc
c001f01e:	57                   	push   edi
c001f01f:	53                   	push   ebx
c001f020:	e8 c9 fd ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f025:	83 c4 10             	add    esp,0x10
c001f028:	50                   	push   eax
c001f029:	6a 0c                	push   0xc
c001f02b:	57                   	push   edi
c001f02c:	53                   	push   ebx
c001f02d:	e8 7c fe ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	4e                   	dec    esi
c001f036:	75 f0                	jne    c001f028 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001f038:	5b                   	pop    ebx
c001f039:	5e                   	pop    esi
c001f03a:	5f                   	pop    edi
c001f03b:	c3                   	ret    

c001f03c <IDE::open(int, int, void*)>:
c001f03c:	55                   	push   ebp
c001f03d:	57                   	push   edi
c001f03e:	56                   	push   esi
c001f03f:	53                   	push   ebx
c001f040:	83 ec 1c             	sub    esp,0x1c
c001f043:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f047:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f050:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f059:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f060:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f067:	0f 85 cb 02 00 00    	jne    c001f338 <IDE::open(int, int, void*)+0x2fc>
c001f06d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f073:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001f077:	83 e0 7f             	and    eax,0x7f
c001f07a:	3c 05                	cmp    al,0x5
c001f07c:	74 04                	je     c001f082 <IDE::open(int, int, void*)+0x46>
c001f07e:	3c 0f                	cmp    al,0xf
c001f080:	75 32                	jne    c001f0b4 <IDE::open(int, int, void*)+0x78>
c001f082:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f088:	83 e0 fc             	and    eax,0xfffffffc
c001f08b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f092:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f098:	83 e0 fc             	and    eax,0xfffffffc
c001f09b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f0a2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f0a8:	83 e0 fc             	and    eax,0xfffffffc
c001f0ab:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f0b2:	eb 14                	jmp    c001f0c8 <IDE::open(int, int, void*)+0x8c>
c001f0b4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f0be:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f0c8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f0cf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f0d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0da:	89 c6                	mov    esi,eax
c001f0dc:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f0e1:	c1 e6 10             	shl    esi,0x10
c001f0e4:	89 e8                	mov    eax,ebp
c001f0e6:	89 fa                	mov    edx,edi
c001f0e8:	c1 e0 0b             	shl    eax,0xb
c001f0eb:	09 f0                	or     eax,esi
c001f0ed:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f0f4:	c1 e6 08             	shl    esi,0x8
c001f0f7:	09 c6                	or     esi,eax
c001f0f9:	89 f0                	mov    eax,esi
c001f0fb:	0d 08 00 00 80       	or     eax,0x80000008
c001f100:	ef                   	out    dx,eax
c001f101:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f106:	89 ca                	mov    edx,ecx
c001f108:	ed                   	in     eax,dx
c001f109:	c1 e8 10             	shr    eax,0x10
c001f10c:	3d ff ff 00 00       	cmp    eax,0xffff
c001f111:	0f 84 f5 00 00 00    	je     c001f20c <IDE::open(int, int, void*)+0x1d0>
c001f117:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f11d:	89 fa                	mov    edx,edi
c001f11f:	89 f0                	mov    eax,esi
c001f121:	ef                   	out    dx,eax
c001f122:	b0 fe                	mov    al,0xfe
c001f124:	89 ca                	mov    edx,ecx
c001f126:	ee                   	out    dx,al
c001f127:	89 f0                	mov    eax,esi
c001f129:	89 fa                	mov    edx,edi
c001f12b:	ef                   	out    dx,eax
c001f12c:	89 ca                	mov    edx,ecx
c001f12e:	ed                   	in     eax,dx
c001f12f:	3c fe                	cmp    al,0xfe
c001f131:	0f 85 a9 00 00 00    	jne    c001f1e0 <IDE::open(int, int, void*)+0x1a4>
c001f137:	8b 15 48 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c48
c001f13d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f144:	74 33                	je     c001f179 <IDE::open(int, int, void*)+0x13d>
c001f146:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f14c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f150:	40                   	inc    eax
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	0f b6 c0             	movzx  eax,al
c001f157:	50                   	push   eax
c001f158:	55                   	push   ebp
c001f159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f15d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f163:	51                   	push   ecx
c001f164:	e8 cf 35 ff ff       	call   c0012738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f169:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f16e:	83 c4 1c             	add    esp,0x1c
c001f171:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f177:	eb 0a                	jmp    c001f183 <IDE::open(int, int, void*)+0x147>
c001f179:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f183:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f18a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f191:	c1 e1 10             	shl    ecx,0x10
c001f194:	c1 e0 08             	shl    eax,0x8
c001f197:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f19c:	09 c1                	or     ecx,eax
c001f19e:	89 fa                	mov    edx,edi
c001f1a0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f1a7:	c1 e0 0b             	shl    eax,0xb
c001f1aa:	09 c1                	or     ecx,eax
c001f1ac:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f1b2:	89 c8                	mov    eax,ecx
c001f1b4:	ef                   	out    dx,eax
c001f1b5:	be fc 0c 00 00       	mov    esi,0xcfc
c001f1ba:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f1c0:	89 f2                	mov    edx,esi
c001f1c2:	ee                   	out    dx,al
c001f1c3:	89 c8                	mov    eax,ecx
c001f1c5:	89 fa                	mov    edx,edi
c001f1c7:	ef                   	out    dx,eax
c001f1c8:	89 f2                	mov    edx,esi
c001f1ca:	ed                   	in     eax,dx
c001f1cb:	0f b6 c0             	movzx  eax,al
c001f1ce:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f1d4:	74 46                	je     c001f21c <IDE::open(int, int, void*)+0x1e0>
c001f1d6:	83 ec 0c             	sub    esp,0xc
c001f1d9:	68 4c 75 02 c0       	push   0xc002754c
c001f1de:	eb 34                	jmp    c001f214 <IDE::open(int, int, void*)+0x1d8>
c001f1e0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f1e9:	75 17                	jne    c001f202 <IDE::open(int, int, void*)+0x1c6>
c001f1eb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f1f0:	74 07                	je     c001f1f9 <IDE::open(int, int, void*)+0x1bd>
c001f1f2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f1f7:	75 09                	jne    c001f202 <IDE::open(int, int, void*)+0x1c6>
c001f1f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f200:	eb 1a                	jmp    c001f21c <IDE::open(int, int, void*)+0x1e0>
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	68 54 75 02 c0       	push   0xc0027554
c001f20a:	eb 08                	jmp    c001f214 <IDE::open(int, int, void*)+0x1d8>
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	68 85 75 02 c0       	push   0xc0027585
c001f214:	e8 10 60 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c001f219:	83 c4 10             	add    esp,0x10
c001f21c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f223:	79 1a                	jns    c001f23f <IDE::open(int, int, void*)+0x203>
c001f225:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f22b:	83 e0 fc             	and    eax,0xfffffffc
c001f22e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f235:	83 c0 08             	add    eax,0x8
c001f238:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f23f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f245:	89 c2                	mov    edx,eax
c001f247:	83 e2 0f             	and    edx,0xf
c001f24a:	66 83 fa 08          	cmp    dx,0x8
c001f24e:	75 0a                	jne    c001f25a <IDE::open(int, int, void*)+0x21e>
c001f250:	83 e8 02             	sub    eax,0x2
c001f253:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f25a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f260:	89 c2                	mov    edx,eax
c001f262:	83 e2 0f             	and    edx,0xf
c001f265:	66 83 fa 08          	cmp    dx,0x8
c001f269:	75 0a                	jne    c001f275 <IDE::open(int, int, void*)+0x239>
c001f26b:	83 e8 02             	sub    eax,0x2
c001f26e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f275:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001f27c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f283:	89 c8                	mov    eax,ecx
c001f285:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f288:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f28c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f290:	8d 51 01             	lea    edx,[ecx+0x1]
c001f293:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f298:	0f b6 d2             	movzx  edx,dl
c001f29b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f2a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2a9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f2ad:	8d 48 02             	lea    ecx,[eax+0x2]
c001f2b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2b5:	0f b6 c9             	movzx  ecx,cl
c001f2b8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f2be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f2c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f2c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f2c9:	8d 50 03             	lea    edx,[eax+0x3]
c001f2cc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f2d1:	0f b6 d2             	movzx  edx,dl
c001f2d4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f2da:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2dd:	83 c0 04             	add    eax,0x4
c001f2e0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2e4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f2e8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2ee:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2f3:	56                   	push   esi
c001f2f4:	56                   	push   esi
c001f2f5:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001f2fc:	50                   	push   eax
c001f2fd:	68 af 75 02 c0       	push   0xc00275af
c001f302:	e8 42 de fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001f307:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f30e:	83 c4 10             	add    esp,0x10
c001f311:	66 85 f6             	test   si,si
c001f314:	74 5f                	je     c001f375 <IDE::open(int, int, void*)+0x339>
c001f316:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f31d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f320:	89 d0                	mov    eax,edx
c001f322:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f326:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f32a:	40                   	inc    eax
c001f32b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f331:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f336:	eb 3d                	jmp    c001f375 <IDE::open(int, int, void*)+0x339>
c001f338:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f33e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f345:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f34c:	66 05 06 02          	add    ax,0x206
c001f350:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f357:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f35e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f365:	66 05 06 02          	add    ax,0x206
c001f369:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f370:	e9 ca fe ff ff       	jmp    c001f23f <IDE::open(int, int, void*)+0x203>
c001f375:	50                   	push   eax
c001f376:	50                   	push   eax
c001f377:	6a 00                	push   0x0
c001f379:	53                   	push   ebx
c001f37a:	e8 49 fa ff ff       	call   c001edc8 <IDE::prepareInterrupt(unsigned char)>
c001f37f:	5a                   	pop    edx
c001f380:	59                   	pop    ecx
c001f381:	6a 01                	push   0x1
c001f383:	53                   	push   ebx
c001f384:	e8 3f fa ff ff       	call   c001edc8 <IDE::prepareInterrupt(unsigned char)>
c001f389:	83 c4 0c             	add    esp,0xc
c001f38c:	6a 00                	push   0x0
c001f38e:	6a 00                	push   0x0
c001f390:	53                   	push   ebx
c001f391:	e8 60 fc ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c001f396:	83 c4 0c             	add    esp,0xc
c001f399:	6a 00                	push   0x0
c001f39b:	6a 01                	push   0x1
c001f39d:	53                   	push   ebx
c001f39e:	e8 53 fc ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c001f3a3:	83 c4 10             	add    esp,0x10
c001f3a6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f3ad:	74 34                	je     c001f3e3 <IDE::open(int, int, void*)+0x3a7>
c001f3af:	83 ec 0c             	sub    esp,0xc
c001f3b2:	53                   	push   ebx
c001f3b3:	6a 01                	push   0x1
c001f3b5:	68 be ef 01 c0       	push   0xc001efbe
c001f3ba:	6a 0e                	push   0xe
c001f3bc:	53                   	push   ebx
c001f3bd:	e8 70 f2 fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3c2:	83 c4 14             	add    esp,0x14
c001f3c5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f3cb:	53                   	push   ebx
c001f3cc:	6a 01                	push   0x1
c001f3ce:	68 da ef 01 c0       	push   0xc001efda
c001f3d3:	6a 0f                	push   0xf
c001f3d5:	53                   	push   ebx
c001f3d6:	e8 57 f2 fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3db:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f3e1:	eb 38                	jmp    c001f41b <IDE::open(int, int, void*)+0x3df>
c001f3e3:	83 ec 0c             	sub    esp,0xc
c001f3e6:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f3f0:	53                   	push   ebx
c001f3f1:	6a 00                	push   0x0
c001f3f3:	68 be ef 01 c0       	push   0xc001efbe
c001f3f8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f3fe:	53                   	push   ebx
c001f3ff:	e8 2e f2 fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f404:	83 c4 14             	add    esp,0x14
c001f407:	53                   	push   ebx
c001f408:	6a 00                	push   0x0
c001f40a:	68 da ef 01 c0       	push   0xc001efda
c001f40f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f415:	53                   	push   ebx
c001f416:	e8 17 f2 fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f41d:	83 c4 20             	add    esp,0x20
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	53                   	push   ebx
c001f424:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f427:	83 c4 0c             	add    esp,0xc
c001f42a:	6a 07                	push   0x7
c001f42c:	6a 00                	push   0x0
c001f42e:	53                   	push   ebx
c001f42f:	e8 7a fa ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f434:	83 c4 0c             	add    esp,0xc
c001f437:	6a 07                	push   0x7
c001f439:	6a 01                	push   0x1
c001f43b:	53                   	push   ebx
c001f43c:	e8 6d fa ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f441:	83 c4 0c             	add    esp,0xc
c001f444:	6a 01                	push   0x1
c001f446:	6a 00                	push   0x0
c001f448:	53                   	push   ebx
c001f449:	e8 a8 fb ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c001f44e:	83 c4 0c             	add    esp,0xc
c001f451:	6a 01                	push   0x1
c001f453:	6a 01                	push   0x1
c001f455:	53                   	push   ebx
c001f456:	e8 9b fb ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c001f45b:	83 c4 2c             	add    esp,0x2c
c001f45e:	31 c0                	xor    eax,eax
c001f460:	5b                   	pop    ebx
c001f461:	5e                   	pop    esi
c001f462:	5f                   	pop    edi
c001f463:	5d                   	pop    ebp
c001f464:	c3                   	ret    
c001f465:	90                   	nop

c001f466 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f466:	55                   	push   ebp
c001f467:	57                   	push   edi
c001f468:	56                   	push   esi
c001f469:	53                   	push   ebx
c001f46a:	83 ec 1c             	sub    esp,0x1c
c001f46d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f471:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f475:	8d 50 f8             	lea    edx,[eax-0x8]
c001f478:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f47c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f480:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f484:	80 fa 03             	cmp    dl,0x3
c001f487:	77 5d                	ja     c001f4e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f489:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f48d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f491:	0f b6 db             	movzx  ebx,bl
c001f494:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f497:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f49b:	83 ca 80             	or     edx,0xffffff80
c001f49e:	0f b6 d2             	movzx  edx,dl
c001f4a1:	52                   	push   edx
c001f4a2:	6a 0c                	push   0xc
c001f4a4:	53                   	push   ebx
c001f4a5:	56                   	push   esi
c001f4a6:	e8 43 f9 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4ab:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f4b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f4b8:	0f b6 c0             	movzx  eax,al
c001f4bb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f4bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4c1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f4c6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f4ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f4ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f4d2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f4da:	83 c4 2c             	add    esp,0x2c
c001f4dd:	5b                   	pop    ebx
c001f4de:	5e                   	pop    esi
c001f4df:	5f                   	pop    edi
c001f4e0:	5d                   	pop    ebp
c001f4e1:	e9 08 f9 ff ff       	jmp    c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4e6:	3c 07                	cmp    al,0x7
c001f4e8:	77 10                	ja     c001f4fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f4ea:	0f b6 db             	movzx  ebx,bl
c001f4ed:	0f b6 d0             	movzx  edx,al
c001f4f0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f4f8:	eb 2d                	jmp    c001f527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4fa:	3c 0d                	cmp    al,0xd
c001f4fc:	77 13                	ja     c001f511 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f4fe:	0f b6 db             	movzx  ebx,bl
c001f501:	0f b6 c0             	movzx  eax,al
c001f504:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f50b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f50f:	eb 16                	jmp    c001f527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f511:	3c 15                	cmp    al,0x15
c001f513:	77 14                	ja     c001f529 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f515:	0f b6 db             	movzx  ebx,bl
c001f518:	0f b6 c0             	movzx  eax,al
c001f51b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f523:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f527:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f529:	83 c4 1c             	add    esp,0x1c
c001f52c:	5b                   	pop    ebx
c001f52d:	5e                   	pop    esi
c001f52e:	5f                   	pop    edi
c001f52f:	5d                   	pop    ebp
c001f530:	c3                   	ret    
c001f531:	90                   	nop

c001f532 <IDE::detect()>:
c001f532:	55                   	push   ebp
c001f533:	57                   	push   edi
c001f534:	56                   	push   esi
c001f535:	53                   	push   ebx
c001f536:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f53c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f543:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f54a:	0f 85 97 02 00 00    	jne    c001f7e7 <IDE::detect()+0x2b5>
c001f550:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f557:	31 f6                	xor    esi,esi
c001f559:	31 ed                	xor    ebp,ebp
c001f55b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f563:	89 e8                	mov    eax,ebp
c001f565:	c1 e0 06             	shl    eax,0x6
c001f568:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f570:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f574:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f578:	c1 e0 04             	shl    eax,0x4
c001f57b:	83 c8 a0             	or     eax,0xffffffa0
c001f57e:	0f b6 c0             	movzx  eax,al
c001f581:	50                   	push   eax
c001f582:	6a 06                	push   0x6
c001f584:	56                   	push   esi
c001f585:	53                   	push   ebx
c001f586:	e8 63 f8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58b:	83 c4 0c             	add    esp,0xc
c001f58e:	6a 0c                	push   0xc
c001f590:	56                   	push   esi
c001f591:	53                   	push   ebx
c001f592:	e8 17 f9 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f597:	83 c4 0c             	add    esp,0xc
c001f59a:	6a 0c                	push   0xc
c001f59c:	56                   	push   esi
c001f59d:	53                   	push   ebx
c001f59e:	e8 0b f9 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5a3:	83 c4 0c             	add    esp,0xc
c001f5a6:	6a 0c                	push   0xc
c001f5a8:	56                   	push   esi
c001f5a9:	53                   	push   ebx
c001f5aa:	e8 ff f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5af:	83 c4 0c             	add    esp,0xc
c001f5b2:	6a 0c                	push   0xc
c001f5b4:	56                   	push   esi
c001f5b5:	53                   	push   ebx
c001f5b6:	e8 f3 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5bb:	68 ec 00 00 00       	push   0xec
c001f5c0:	6a 07                	push   0x7
c001f5c2:	56                   	push   esi
c001f5c3:	53                   	push   ebx
c001f5c4:	e8 25 f8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c9:	83 c4 1c             	add    esp,0x1c
c001f5cc:	6a 0c                	push   0xc
c001f5ce:	56                   	push   esi
c001f5cf:	53                   	push   ebx
c001f5d0:	e8 d9 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5d5:	83 c4 0c             	add    esp,0xc
c001f5d8:	6a 0c                	push   0xc
c001f5da:	56                   	push   esi
c001f5db:	53                   	push   ebx
c001f5dc:	e8 cd f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5e1:	83 c4 0c             	add    esp,0xc
c001f5e4:	6a 0c                	push   0xc
c001f5e6:	56                   	push   esi
c001f5e7:	53                   	push   ebx
c001f5e8:	e8 c1 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5ed:	83 c4 0c             	add    esp,0xc
c001f5f0:	6a 0c                	push   0xc
c001f5f2:	56                   	push   esi
c001f5f3:	53                   	push   ebx
c001f5f4:	e8 b5 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f5f9:	83 c4 0c             	add    esp,0xc
c001f5fc:	6a 0c                	push   0xc
c001f5fe:	56                   	push   esi
c001f5ff:	53                   	push   ebx
c001f600:	e8 a9 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f605:	83 c4 10             	add    esp,0x10
c001f608:	84 c0                	test   al,al
c001f60a:	0f 84 5f 01 00 00    	je     c001f76f <IDE::detect()+0x23d>
c001f610:	31 ff                	xor    edi,edi
c001f612:	50                   	push   eax
c001f613:	6a 0c                	push   0xc
c001f615:	56                   	push   esi
c001f616:	53                   	push   ebx
c001f617:	e8 92 f8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	a8 01                	test   al,0x1
c001f621:	0f 85 69 01 00 00    	jne    c001f790 <IDE::detect()+0x25e>
c001f627:	84 c0                	test   al,al
c001f629:	78 04                	js     c001f62f <IDE::detect()+0xfd>
c001f62b:	a8 08                	test   al,0x8
c001f62d:	75 23                	jne    c001f652 <IDE::detect()+0x120>
c001f62f:	47                   	inc    edi
c001f630:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f636:	7e da                	jle    c001f612 <IDE::detect()+0xe0>
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	6a 32                	push   0x32
c001f63d:	e8 3a 9c ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c001f642:	83 c4 10             	add    esp,0x10
c001f645:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f64b:	75 c5                	jne    c001f612 <IDE::detect()+0xe0>
c001f64d:	e9 3e 01 00 00       	jmp    c001f790 <IDE::detect()+0x25e>
c001f652:	31 c9                	xor    ecx,ecx
c001f654:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f658:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	68 80 00 00 00       	push   0x80
c001f664:	57                   	push   edi
c001f665:	6a 00                	push   0x0
c001f667:	56                   	push   esi
c001f668:	53                   	push   ebx
c001f669:	e8 f8 fd ff ff       	call   c001f466 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f66e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f673:	89 e8                	mov    eax,ebp
c001f675:	89 d1                	mov    ecx,edx
c001f677:	c1 e0 06             	shl    eax,0x6
c001f67a:	01 d8                	add    eax,ebx
c001f67c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f683:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f68a:	89 f2                	mov    edx,esi
c001f68c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f692:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f696:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f69c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f6a0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f6a7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f6af:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f6b6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f6be:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f6c4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f6cb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f6d1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f6d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f6d9:	83 c4 20             	add    esp,0x20
c001f6dc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f6df:	83 c0 02             	add    eax,0x2
c001f6e2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f6e8:	83 c7 02             	add    edi,0x2
c001f6eb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f6ee:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f6f4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f6f8:	75 e2                	jne    c001f6dc <IDE::detect()+0x1aa>
c001f6fa:	89 e8                	mov    eax,ebp
c001f6fc:	c1 e0 06             	shl    eax,0x6
c001f6ff:	01 d8                	add    eax,ebx
c001f701:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f707:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f70e:	66 c1 ea 09          	shr    dx,0x9
c001f712:	83 e2 01             	and    edx,0x1
c001f715:	84 c9                	test   cl,cl
c001f717:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f71d:	75 22                	jne    c001f741 <IDE::detect()+0x20f>
c001f71f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f726:	74 46                	je     c001f76e <IDE::detect()+0x23c>
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	68 7c 01 00 00       	push   0x17c
c001f730:	e8 b2 a6 fe ff       	call   c0009de7 <malloc>
c001f735:	89 c7                	mov    edi,eax
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	e8 49 06 00 00       	call   c001fd88 <ATA::ATA()>
c001f73f:	eb 17                	jmp    c001f758 <IDE::detect()+0x226>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	68 84 01 00 00       	push   0x184
c001f749:	e8 99 a6 fe ff       	call   c0009de7 <malloc>
c001f74e:	89 c7                	mov    edi,eax
c001f750:	89 04 24             	mov    DWORD PTR [esp],eax
c001f753:	e8 b8 0c 00 00       	call   c0020410 <ATAPI::ATAPI()>
c001f758:	5a                   	pop    edx
c001f759:	59                   	pop    ecx
c001f75a:	57                   	push   edi
c001f75b:	53                   	push   ebx
c001f75c:	e8 59 ef fe ff       	call   c000e6ba <Device::addChild(Device*)>
c001f761:	8b 07                	mov    eax,DWORD PTR [edi]
c001f763:	53                   	push   ebx
c001f764:	55                   	push   ebp
c001f765:	6a 00                	push   0x0
c001f767:	57                   	push   edi
c001f768:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f76b:	83 c4 20             	add    esp,0x20
c001f76e:	45                   	inc    ebp
c001f76f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f774:	74 0d                	je     c001f783 <IDE::detect()+0x251>
c001f776:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f77e:	e9 e0 fd ff ff       	jmp    c001f563 <IDE::detect()+0x31>
c001f783:	4e                   	dec    esi
c001f784:	74 61                	je     c001f7e7 <IDE::detect()+0x2b5>
c001f786:	be 01 00 00 00       	mov    esi,0x1
c001f78b:	e9 cb fd ff ff       	jmp    c001f55b <IDE::detect()+0x29>
c001f790:	50                   	push   eax
c001f791:	6a 04                	push   0x4
c001f793:	56                   	push   esi
c001f794:	53                   	push   ebx
c001f795:	e8 14 f7 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f79a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f79e:	83 c4 0c             	add    esp,0xc
c001f7a1:	6a 05                	push   0x5
c001f7a3:	56                   	push   esi
c001f7a4:	53                   	push   ebx
c001f7a5:	e8 04 f7 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f7b1:	80 fa 14             	cmp    dl,0x14
c001f7b4:	75 04                	jne    c001f7ba <IDE::detect()+0x288>
c001f7b6:	3c eb                	cmp    al,0xeb
c001f7b8:	eb 07                	jmp    c001f7c1 <IDE::detect()+0x28f>
c001f7ba:	3c 96                	cmp    al,0x96
c001f7bc:	75 b1                	jne    c001f76f <IDE::detect()+0x23d>
c001f7be:	80 fa 69             	cmp    dl,0x69
c001f7c1:	75 ac                	jne    c001f76f <IDE::detect()+0x23d>
c001f7c3:	68 a1 00 00 00       	push   0xa1
c001f7c8:	6a 07                	push   0x7
c001f7ca:	56                   	push   esi
c001f7cb:	53                   	push   ebx
c001f7cc:	e8 1d f6 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f7d8:	e8 9f 9a ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c001f7dd:	83 c4 10             	add    esp,0x10
c001f7e0:	b1 01                	mov    cl,0x1
c001f7e2:	e9 6d fe ff ff       	jmp    c001f654 <IDE::detect()+0x122>
c001f7e7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f7ed:	5b                   	pop    ebx
c001f7ee:	5e                   	pop    esi
c001f7ef:	5f                   	pop    edi
c001f7f0:	5d                   	pop    ebp
c001f7f1:	c3                   	ret    

c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f7f2:	55                   	push   ebp
c001f7f3:	57                   	push   edi
c001f7f4:	56                   	push   esi
c001f7f5:	53                   	push   ebx
c001f7f6:	83 ec 1c             	sub    esp,0x1c
c001f7f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f801:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f805:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f809:	88 c3                	mov    bl,al
c001f80b:	84 c0                	test   al,al
c001f80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f811:	0f 84 81 00 00 00    	je     c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f817:	83 ec 0c             	sub    esp,0xc
c001f81a:	68 cb 75 02 c0       	push   0xc00275cb
c001f81f:	e8 25 d9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001f824:	83 c4 10             	add    esp,0x10
c001f827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82b:	3c 01                	cmp    al,0x1
c001f82d:	74 63                	je     c001f892 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f82f:	3c 02                	cmp    al,0x2
c001f831:	75 53                	jne    c001f886 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f833:	d1 e6                	shl    esi,1
c001f835:	09 ee                	or     esi,ebp
c001f837:	50                   	push   eax
c001f838:	89 f0                	mov    eax,esi
c001f83a:	6a 01                	push   0x1
c001f83c:	0f b6 f0             	movzx  esi,al
c001f83f:	c1 e6 06             	shl    esi,0x6
c001f842:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f84a:	50                   	push   eax
c001f84b:	57                   	push   edi
c001f84c:	e8 5d f6 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f851:	83 c4 10             	add    esp,0x10
c001f854:	a8 01                	test   al,0x1
c001f856:	74 02                	je     c001f85a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f858:	b3 07                	mov    bl,0x7
c001f85a:	a8 02                	test   al,0x2
c001f85c:	74 02                	je     c001f860 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f85e:	b3 03                	mov    bl,0x3
c001f860:	a8 04                	test   al,0x4
c001f862:	74 02                	je     c001f866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f864:	b3 14                	mov    bl,0x14
c001f866:	a8 08                	test   al,0x8
c001f868:	74 02                	je     c001f86c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f86a:	b3 03                	mov    bl,0x3
c001f86c:	a8 10                	test   al,0x10
c001f86e:	74 02                	je     c001f872 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f870:	b3 15                	mov    bl,0x15
c001f872:	a8 20                	test   al,0x20
c001f874:	74 02                	je     c001f878 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f876:	b3 03                	mov    bl,0x3
c001f878:	a8 40                	test   al,0x40
c001f87a:	74 02                	je     c001f87e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f87c:	b3 16                	mov    bl,0x16
c001f87e:	84 c0                	test   al,al
c001f880:	79 16                	jns    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f882:	b3 0d                	mov    bl,0xd
c001f884:	eb 12                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f886:	3c 03                	cmp    al,0x3
c001f888:	74 0c                	je     c001f896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f88a:	3c 04                	cmp    al,0x4
c001f88c:	75 0a                	jne    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f88e:	b3 08                	mov    bl,0x8
c001f890:	eb 06                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f892:	b3 13                	mov    bl,0x13
c001f894:	eb 02                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f896:	b3 17                	mov    bl,0x17
c001f898:	83 c4 1c             	add    esp,0x1c
c001f89b:	88 d8                	mov    al,bl
c001f89d:	5b                   	pop    ebx
c001f89e:	5e                   	pop    esi
c001f89f:	5f                   	pop    edi
c001f8a0:	5d                   	pop    ebp
c001f8a1:	c3                   	ret    

c001f8a2 <IDE::polling(unsigned char, unsigned int)>:
c001f8a2:	57                   	push   edi
c001f8a3:	56                   	push   esi
c001f8a4:	53                   	push   ebx
c001f8a5:	bb 04 00 00 00       	mov    ebx,0x4
c001f8aa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f8ae:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f8b3:	52                   	push   edx
c001f8b4:	6a 0c                	push   0xc
c001f8b6:	56                   	push   esi
c001f8b7:	57                   	push   edi
c001f8b8:	e8 f1 f5 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	4b                   	dec    ebx
c001f8c1:	75 f0                	jne    c001f8b3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f8c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f8c8:	50                   	push   eax
c001f8c9:	6a 0c                	push   0xc
c001f8cb:	56                   	push   esi
c001f8cc:	57                   	push   edi
c001f8cd:	e8 dc f5 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001f8d2:	83 c4 10             	add    esp,0x10
c001f8d5:	a8 01                	test   al,0x1
c001f8d7:	75 17                	jne    c001f8f0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8d9:	a8 20                	test   al,0x20
c001f8db:	75 0f                	jne    c001f8ec <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f8dd:	4b                   	dec    ebx
c001f8de:	74 10                	je     c001f8f0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8e0:	84 c0                	test   al,al
c001f8e2:	78 e4                	js     c001f8c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8e4:	a8 08                	test   al,0x8
c001f8e6:	74 e0                	je     c001f8c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8e8:	31 c0                	xor    eax,eax
c001f8ea:	eb 06                	jmp    c001f8f2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8ec:	b0 01                	mov    al,0x1
c001f8ee:	eb 02                	jmp    c001f8f2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8f0:	b0 02                	mov    al,0x2
c001f8f2:	5b                   	pop    ebx
c001f8f3:	5e                   	pop    esi
c001f8f4:	5f                   	pop    edi
c001f8f5:	c3                   	ret    

c001f8f6 <SATABus::close(int, int, void*)>:
c001f8f6:	31 c0                	xor    eax,eax
c001f8f8:	c3                   	ret    
c001f8f9:	90                   	nop

c001f8fa <SATABus::detect()>:
c001f8fa:	c3                   	ret    
c001f8fb:	90                   	nop

c001f8fc <SATABus::SATABus()>:
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	83 ec 08             	sub    esp,0x8
c001f906:	68 04 76 02 c0       	push   0xc0027604
c001f90b:	50                   	push   eax
c001f90c:	e8 57 f1 fe ff       	call   c000ea68 <HardDiskController::HardDiskController(char const*)>
c001f911:	83 c4 10             	add    esp,0x10
c001f914:	ba ac 76 02 c0       	mov    edx,0xc00276ac
c001f919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91d:	89 10                	mov    DWORD PTR [eax],edx
c001f91f:	83 ec 0c             	sub    esp,0xc
c001f922:	6a 50                	push   0x50
c001f924:	e8 60 ac fe ff       	call   c000a589 <Phys::allocateContiguousPages(int)>
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	89 c2                	mov    edx,eax
c001f92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f932:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f938:	83 ec 0c             	sub    esp,0xc
c001f93b:	6a 50                	push   0x50
c001f93d:	e8 5f c4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	89 c2                	mov    edx,eax
c001f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f951:	a1 74 8d 02 c0       	mov    eax,ds:0xc0028d74
c001f956:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f95a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f960:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f964:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f96a:	83 ec 0c             	sub    esp,0xc
c001f96d:	6a 03                	push   0x3
c001f96f:	6a 50                	push   0x50
c001f971:	51                   	push   ecx
c001f972:	52                   	push   edx
c001f973:	50                   	push   eax
c001f974:	e8 89 cd fe ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f979:	83 c4 20             	add    esp,0x20
c001f97c:	90                   	nop
c001f97d:	83 c4 0c             	add    esp,0xc
c001f980:	c3                   	ret    
c001f981:	90                   	nop

c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f986:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f989:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f98c:	09 c2                	or     edx,eax
c001f98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f992:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f998:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f99a:	31 c0                	xor    eax,eax
c001f99c:	c1 e9 08             	shr    ecx,0x8
c001f99f:	83 e1 0f             	and    ecx,0xf
c001f9a2:	39 c8                	cmp    eax,ecx
c001f9a4:	74 0a                	je     c001f9b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f9a6:	f6 c2 01             	test   dl,0x1
c001f9a9:	74 08                	je     c001f9b3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f9ab:	d1 ea                	shr    edx,1
c001f9ad:	40                   	inc    eax
c001f9ae:	eb f2                	jmp    c001f9a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f9b0:	83 c8 ff             	or     eax,0xffffffff
c001f9b3:	c3                   	ret    

c001f9b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f9b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9b8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f9bb:	89 c2                	mov    edx,eax
c001f9bd:	c1 ea 08             	shr    edx,0x8
c001f9c0:	83 e2 0f             	and    edx,0xf
c001f9c3:	fe ca                	dec    dl
c001f9c5:	75 31                	jne    c001f9f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f9c7:	83 e0 0f             	and    eax,0xf
c001f9ca:	3c 03                	cmp    al,0x3
c001f9cc:	75 2a                	jne    c001f9f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f9ce:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f9d1:	b8 02 00 00 00       	mov    eax,0x2
c001f9d6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f9dc:	74 1c                	je     c001f9fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9de:	b8 04 00 00 00       	mov    eax,0x4
c001f9e3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f9e9:	74 0f                	je     c001f9fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9eb:	31 c0                	xor    eax,eax
c001f9ed:	83 fa 03             	cmp    edx,0x3
c001f9f0:	0f 94 c0             	sete   al
c001f9f3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f9f7:	c3                   	ret    
c001f9f8:	31 c0                	xor    eax,eax
c001f9fa:	c3                   	ret    
c001f9fb:	90                   	nop

c001f9fc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa03:	0f ba e2 0f          	bt     edx,0xf
c001fa07:	72 f7                	jb     c001fa00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fa09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa0c:	83 ca 10             	or     edx,0x10
c001fa0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa15:	83 ca 01             	or     edx,0x1
c001fa18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa1b:	c3                   	ret    

c001fa1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa23:	83 e2 fe             	and    edx,0xfffffffe
c001fa26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa2c:	83 e2 ef             	and    edx,0xffffffef
c001fa2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa35:	0f ba e2 0e          	bt     edx,0xe
c001fa39:	72 f7                	jb     c001fa32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa3e:	0f ba e2 0f          	bt     edx,0xf
c001fa42:	72 ee                	jb     c001fa32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa44:	c3                   	ret    
c001fa45:	90                   	nop

c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fa46:	55                   	push   ebp
c001fa47:	57                   	push   edi
c001fa48:	56                   	push   esi
c001fa49:	53                   	push   ebx
c001fa4a:	83 ec 1c             	sub    esp,0x1c
c001fa4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa55:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa59:	53                   	push   ebx
c001fa5a:	89 fd                	mov    ebp,edi
c001fa5c:	56                   	push   esi
c001fa5d:	c1 e5 0a             	shl    ebp,0xa
c001fa60:	e8 b7 ff ff ff       	call   c001fa1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa65:	83 ec 0c             	sub    esp,0xc
c001fa68:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa6e:	01 e8                	add    eax,ebp
c001fa70:	89 03                	mov    DWORD PTR [ebx],eax
c001fa72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa74:	68 00 04 00 00       	push   0x400
c001fa79:	6a 00                	push   0x0
c001fa7b:	50                   	push   eax
c001fa7c:	e8 13 0c fe ff       	call   c0000694 <memset>
c001fa81:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa87:	89 fa                	mov    edx,edi
c001fa89:	01 e8                	add    eax,ebp
c001fa8b:	c1 e7 0d             	shl    edi,0xd
c001fa8e:	89 03                	mov    DWORD PTR [ebx],eax
c001fa90:	c1 e2 08             	shl    edx,0x8
c001fa93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa9a:	81 c2 00 80 00 00    	add    edx,0x8000
c001faa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001faa4:	89 d0                	mov    eax,edx
c001faa6:	83 c4 1c             	add    esp,0x1c
c001faa9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001faaf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fab2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fab5:	68 00 01 00 00       	push   0x100
c001faba:	6a 00                	push   0x0
c001fabc:	50                   	push   eax
c001fabd:	e8 d2 0b fe ff       	call   c0000694 <memset>
c001fac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fac6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001facc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001fad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fad6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fad9:	83 c4 10             	add    esp,0x10
c001fadc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fae3:	31 ff                	xor    edi,edi
c001fae5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001faeb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001faf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faf5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fafb:	83 c5 20             	add    ebp,0x20
c001fafe:	01 f8                	add    eax,edi
c001fb00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb03:	52                   	push   edx
c001fb04:	68 00 01 00 00       	push   0x100
c001fb09:	6a 00                	push   0x0
c001fb0b:	50                   	push   eax
c001fb0c:	e8 83 0b fe ff       	call   c0000694 <memset>
c001fb11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb15:	83 c4 10             	add    esp,0x10
c001fb18:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fb1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fb25:	01 f8                	add    eax,edi
c001fb27:	81 c7 00 01 00 00    	add    edi,0x100
c001fb2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb30:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fb36:	75 b3                	jne    c001faeb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001fb38:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001fb3c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001fb40:	83 c4 1c             	add    esp,0x1c
c001fb43:	5b                   	pop    ebx
c001fb44:	5e                   	pop    esi
c001fb45:	5f                   	pop    edi
c001fb46:	5d                   	pop    ebp
c001fb47:	e9 b0 fe ff ff       	jmp    c001f9fc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fb4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb4c:	55                   	push   ebp
c001fb4d:	57                   	push   edi
c001fb4e:	56                   	push   esi
c001fb4f:	53                   	push   ebx
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb57:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001fb5e:	74 2d                	je     c001fb8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb60:	83 ec 0c             	sub    esp,0xc
c001fb63:	68 28 76 02 c0       	push   0xc0027628
c001fb68:	e8 d4 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fb6d:	83 c4 10             	add    esp,0x10
c001fb70:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001fb77:	75 14                	jne    c001fb8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb79:	e4 60                	in     al,0x60
c001fb7b:	3c 1c                	cmp    al,0x1c
c001fb7d:	74 04                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb7f:	3c 5a                	cmp    al,0x5a
c001fb81:	75 f6                	jne    c001fb79 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fb83:	e4 60                	in     al,0x60
c001fb85:	3c 5a                	cmp    al,0x5a
c001fb87:	74 fa                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb89:	3c 1c                	cmp    al,0x1c
c001fb8b:	74 f6                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb91:	31 db                	xor    ebx,ebx
c001fb93:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb96:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb9c:	0f 84 78 01 00 00    	je     c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fba2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fba6:	89 d8                	mov    eax,ebx
c001fba8:	c1 e0 07             	shl    eax,0x7
c001fbab:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fbb2:	50                   	push   eax
c001fbb3:	50                   	push   eax
c001fbb4:	57                   	push   edi
c001fbb5:	56                   	push   esi
c001fbb6:	e8 f9 fd ff ff       	call   c001f9b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	83 f8 01             	cmp    eax,0x1
c001fbc1:	0f 85 19 01 00 00    	jne    c001fce0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fbc7:	50                   	push   eax
c001fbc8:	53                   	push   ebx
c001fbc9:	57                   	push   edi
c001fbca:	56                   	push   esi
c001fbcb:	e8 76 fe ff ff       	call   c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fbd0:	83 c4 10             	add    esp,0x10
c001fbd3:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001fbda:	74 2d                	je     c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	68 3d 76 02 c0       	push   0xc002763d
c001fbe4:	e8 58 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001fbf3:	75 14                	jne    c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbf5:	e4 60                	in     al,0x60
c001fbf7:	3c 1c                	cmp    al,0x1c
c001fbf9:	74 04                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbfb:	3c 5a                	cmp    al,0x5a
c001fbfd:	75 f6                	jne    c001fbf5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fbff:	e4 60                	in     al,0x60
c001fc01:	3c 5a                	cmp    al,0x5a
c001fc03:	74 fa                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fc05:	3c 1c                	cmp    al,0x1c
c001fc07:	74 f6                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fc09:	83 ec 0c             	sub    esp,0xc
c001fc0c:	68 7c 01 00 00       	push   0x17c
c001fc11:	e8 d1 a1 fe ff       	call   c0009de7 <malloc>
c001fc16:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc19:	89 c7                	mov    edi,eax
c001fc1b:	e8 28 10 00 00       	call   c0020c48 <SATA::SATA()>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001fc2a:	74 2d                	je     c001fc59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fc2c:	83 ec 0c             	sub    esp,0xc
c001fc2f:	68 52 76 02 c0       	push   0xc0027652
c001fc34:	e8 08 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001fc43:	75 14                	jne    c001fc59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fc45:	e4 60                	in     al,0x60
c001fc47:	3c 5a                	cmp    al,0x5a
c001fc49:	74 04                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc4b:	3c 1c                	cmp    al,0x1c
c001fc4d:	75 f6                	jne    c001fc45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fc4f:	e4 60                	in     al,0x60
c001fc51:	3c 5a                	cmp    al,0x5a
c001fc53:	74 fa                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc55:	3c 1c                	cmp    al,0x1c
c001fc57:	74 f6                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc59:	50                   	push   eax
c001fc5a:	50                   	push   eax
c001fc5b:	57                   	push   edi
c001fc5c:	56                   	push   esi
c001fc5d:	e8 58 ea fe ff       	call   c000e6ba <Device::addChild(Device*)>
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001fc6c:	74 2d                	je     c001fc9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	68 67 76 02 c0       	push   0xc0027667
c001fc76:	e8 c6 a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001fc85:	75 14                	jne    c001fc9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc87:	e4 60                	in     al,0x60
c001fc89:	3c 1c                	cmp    al,0x1c
c001fc8b:	74 04                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc8d:	3c 5a                	cmp    al,0x5a
c001fc8f:	75 f6                	jne    c001fc87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc91:	e4 60                	in     al,0x60
c001fc93:	3c 5a                	cmp    al,0x5a
c001fc95:	74 fa                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc97:	3c 1c                	cmp    al,0x1c
c001fc99:	74 f6                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc9b:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc9d:	56                   	push   esi
c001fc9e:	6a 00                	push   0x0
c001fca0:	53                   	push   ebx
c001fca1:	57                   	push   edi
c001fca2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c001fcaf:	74 69                	je     c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	68 7c 76 02 c0       	push   0xc002767c
c001fcb9:	e8 83 a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fcbe:	83 c4 10             	add    esp,0x10
c001fcc1:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c001fcc8:	75 50                	jne    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcca:	e4 60                	in     al,0x60
c001fccc:	3c 1c                	cmp    al,0x1c
c001fcce:	74 04                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcd0:	3c 5a                	cmp    al,0x5a
c001fcd2:	75 f6                	jne    c001fcca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fcd4:	e4 60                	in     al,0x60
c001fcd6:	3c 5a                	cmp    al,0x5a
c001fcd8:	74 fa                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcda:	3c 1c                	cmp    al,0x1c
c001fcdc:	74 f6                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcde:	eb 3a                	jmp    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fce0:	83 f8 04             	cmp    eax,0x4
c001fce3:	75 35                	jne    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fce5:	50                   	push   eax
c001fce6:	53                   	push   ebx
c001fce7:	57                   	push   edi
c001fce8:	56                   	push   esi
c001fce9:	e8 58 fd ff ff       	call   c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fcee:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fcf5:	e8 ed a0 fe ff       	call   c0009de7 <malloc>
c001fcfa:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcfd:	89 c7                	mov    edi,eax
c001fcff:	e8 ba 17 00 00       	call   c00214be <SATAPI::SATAPI()>
c001fd04:	5a                   	pop    edx
c001fd05:	59                   	pop    ecx
c001fd06:	57                   	push   edi
c001fd07:	56                   	push   esi
c001fd08:	e8 ad e9 fe ff       	call   c000e6ba <Device::addChild(Device*)>
c001fd0d:	8b 07                	mov    eax,DWORD PTR [edi]
c001fd0f:	56                   	push   esi
c001fd10:	6a 00                	push   0x0
c001fd12:	53                   	push   ebx
c001fd13:	57                   	push   edi
c001fd14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fd17:	83 c4 20             	add    esp,0x20
c001fd1a:	d1 ed                	shr    ebp,1
c001fd1c:	43                   	inc    ebx
c001fd1d:	83 fb 20             	cmp    ebx,0x20
c001fd20:	0f 85 70 fe ff ff    	jne    c001fb96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fd26:	83 c4 0c             	add    esp,0xc
c001fd29:	5b                   	pop    ebx
c001fd2a:	5e                   	pop    esi
c001fd2b:	5f                   	pop    edi
c001fd2c:	5d                   	pop    ebp
c001fd2d:	c3                   	ret    

c001fd2e <SATABus::open(int, int, void*)>:
c001fd2e:	53                   	push   ebx
c001fd2f:	83 ec 10             	sub    esp,0x10
c001fd32:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fd36:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fd3c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fd42:	50                   	push   eax
c001fd43:	68 91 76 02 c0       	push   0xc0027691
c001fd48:	e8 fc d3 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001fd4d:	58                   	pop    eax
c001fd4e:	5a                   	pop    edx
c001fd4f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fd55:	53                   	push   ebx
c001fd56:	e8 f1 fd ff ff       	call   c001fb4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fd5b:	31 c0                	xor    eax,eax
c001fd5d:	83 c4 18             	add    esp,0x18
c001fd60:	5b                   	pop    ebx
c001fd61:	c3                   	ret    

c001fd62 <ATA::close(int, int, void*)>:
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd6f:	85 c0                	test   eax,eax
c001fd71:	74 0c                	je     c001fd7f <ATA::close(int, int, void*)+0x1d>
c001fd73:	83 ec 0c             	sub    esp,0xc
c001fd76:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd78:	50                   	push   eax
c001fd79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd7c:	83 c4 10             	add    esp,0x10
c001fd7f:	31 c0                	xor    eax,eax
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    
c001fd85:	90                   	nop

c001fd86 <ATA::powerSaving(PowerSavingLevel)>:
c001fd86:	c3                   	ret    
c001fd87:	90                   	nop

c001fd88 <ATA::ATA()>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8f:	83 ec 04             	sub    esp,0x4
c001fd92:	68 00 02 00 00       	push   0x200
c001fd97:	68 2f 78 02 c0       	push   0xc002782f
c001fd9c:	50                   	push   eax
c001fd9d:	e8 50 ed fe ff       	call   c000eaf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fda2:	83 c4 10             	add    esp,0x10
c001fda5:	ba 24 77 02 c0       	mov    edx,0xc0027724
c001fdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdae:	89 10                	mov    DWORD PTR [eax],edx
c001fdb0:	90                   	nop
c001fdb1:	83 c4 0c             	add    esp,0xc
c001fdb4:	c3                   	ret    
c001fdb5:	90                   	nop

c001fdb6 <ATA::flush(bool)>:
c001fdb6:	53                   	push   ebx
c001fdb7:	83 ec 08             	sub    esp,0x8
c001fdba:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fdbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdc3:	19 c0                	sbb    eax,eax
c001fdc5:	83 e0 fd             	and    eax,0xfffffffd
c001fdc8:	05 ea 00 00 00       	add    eax,0xea
c001fdcd:	50                   	push   eax
c001fdce:	6a 07                	push   0x7
c001fdd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdd7:	50                   	push   eax
c001fdd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdde:	e8 0b f0 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fde3:	83 c4 0c             	add    esp,0xc
c001fde6:	6a 00                	push   0x0
c001fde8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdef:	50                   	push   eax
c001fdf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdf6:	e8 a7 fa ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c001fdfb:	83 c4 18             	add    esp,0x18
c001fdfe:	5b                   	pop    ebx
c001fdff:	c3                   	ret    

c001fe00 <ATA::readyForCommand()>:
c001fe00:	56                   	push   esi
c001fe01:	53                   	push   ebx
c001fe02:	53                   	push   ebx
c001fe03:	31 db                	xor    ebx,ebx
c001fe05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe09:	51                   	push   ecx
c001fe0a:	6a 0c                	push   0xc
c001fe0c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fe13:	50                   	push   eax
c001fe14:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fe1a:	e8 8f f0 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	a8 88                	test   al,0x88
c001fe24:	74 1f                	je     c001fe45 <ATA::readyForCommand()+0x45>
c001fe26:	43                   	inc    ebx
c001fe27:	83 fb 63             	cmp    ebx,0x63
c001fe2a:	7e dd                	jle    c001fe09 <ATA::readyForCommand()+0x9>
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	6a 0a                	push   0xa
c001fe31:	e8 46 94 ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c001fe36:	83 c4 10             	add    esp,0x10
c001fe39:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fe3f:	75 c8                	jne    c001fe09 <ATA::readyForCommand()+0x9>
c001fe41:	31 c0                	xor    eax,eax
c001fe43:	eb 02                	jmp    c001fe47 <ATA::readyForCommand()+0x47>
c001fe45:	b0 01                	mov    al,0x1
c001fe47:	5a                   	pop    edx
c001fe48:	5b                   	pop    ebx
c001fe49:	5e                   	pop    esi
c001fe4a:	c3                   	ret    
c001fe4b:	90                   	nop

c001fe4c <ATA::access(unsigned long long, int, void*, bool)>:
c001fe4c:	55                   	push   ebp
c001fe4d:	57                   	push   edi
c001fe4e:	56                   	push   esi
c001fe4f:	53                   	push   ebx
c001fe50:	83 ec 38             	sub    esp,0x38
c001fe53:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fe57:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fe5b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fe5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fe63:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fe67:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fe6b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fe6f:	68 d0 76 02 c0       	push   0xc00276d0
c001fe74:	e8 d0 d2 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c001fe79:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe90:	c1 e0 06             	shl    eax,0x6
c001fe93:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe9b:	74 5d                	je     c001fefa <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe9d:	89 fa                	mov    edx,edi
c001fe9f:	89 f0                	mov    eax,esi
c001fea1:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fea5:	c1 ea 1c             	shr    edx,0x1c
c001fea8:	89 d1                	mov    ecx,edx
c001feaa:	09 c1                	or     ecx,eax
c001feac:	74 25                	je     c001fed3 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001feae:	31 ed                	xor    ebp,ebp
c001feb0:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001feb7:	89 fa                	mov    edx,edi
c001feb9:	89 f0                	mov    eax,esi
c001febb:	0f ad d0             	shrd   eax,edx,cl
c001febe:	d3 ea                	shr    edx,cl
c001fec0:	f6 c1 20             	test   cl,0x20
c001fec3:	74 02                	je     c001fec7 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fec5:	89 d0                	mov    eax,edx
c001fec7:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fecb:	45                   	inc    ebp
c001fecc:	83 fd 06             	cmp    ebp,0x6
c001fecf:	75 df                	jne    c001feb0 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fed1:	eb 76                	jmp    c001ff49 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fed3:	89 f0                	mov    eax,esi
c001fed5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001feda:	89 fa                	mov    edx,edi
c001fedc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fee3:	0f ac d0 10          	shrd   eax,edx,0x10
c001fee7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001feec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fef0:	c1 ee 18             	shr    esi,0x18
c001fef3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fef8:	eb 56                	jmp    c001ff50 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fefa:	6a 00                	push   0x0
c001fefc:	6a 3f                	push   0x3f
c001fefe:	57                   	push   edi
c001feff:	56                   	push   esi
c001ff00:	e8 0b 32 00 00       	call   c0023110 <__umoddi3>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	40                   	inc    eax
c001ff09:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ff0d:	6a 00                	push   0x0
c001ff0f:	68 f0 03 00 00       	push   0x3f0
c001ff14:	57                   	push   edi
c001ff15:	56                   	push   esi
c001ff16:	e8 f5 30 00 00       	call   c0023010 <__udivdi3>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ff23:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ff2a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ff2f:	6a 00                	push   0x0
c001ff31:	6a 3f                	push   0x3f
c001ff33:	57                   	push   edi
c001ff34:	56                   	push   esi
c001ff35:	e8 d6 30 00 00       	call   c0023010 <__udivdi3>
c001ff3a:	83 c4 10             	add    esp,0x10
c001ff3d:	89 c6                	mov    esi,eax
c001ff3f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ff44:	83 e6 0f             	and    esi,0xf
c001ff47:	eb 07                	jmp    c001ff50 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ff49:	31 f6                	xor    esi,esi
c001ff4b:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ff50:	bf 01 00 00 00       	mov    edi,0x1
c001ff55:	50                   	push   eax
c001ff56:	6a 00                	push   0x0
c001ff58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff5f:	50                   	push   eax
c001ff60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff64:	e8 8d f0 ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c001ff69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff6c:	e8 8f fe ff ff       	call   c001fe00 <ATA::readyForCommand()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	84 c0                	test   al,al
c001ff76:	0f 84 bc 02 00 00    	je     c0020238 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff7c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff82:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff88:	c1 e0 04             	shl    eax,0x4
c001ff8b:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff92:	09 c6                	or     esi,eax
c001ff94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff99:	75 05                	jne    c001ffa0 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff9b:	83 ce a0             	or     esi,0xffffffa0
c001ff9e:	eb 03                	jmp    c001ffa3 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ffa0:	83 ce e0             	or     esi,0xffffffe0
c001ffa3:	89 f0                	mov    eax,esi
c001ffa5:	0f b6 f0             	movzx  esi,al
c001ffa8:	56                   	push   esi
c001ffa9:	6a 06                	push   0x6
c001ffab:	51                   	push   ecx
c001ffac:	52                   	push   edx
c001ffad:	e8 3c ee ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb2:	83 c4 10             	add    esp,0x10
c001ffb5:	6a 00                	push   0x0
c001ffb7:	6a 01                	push   0x1
c001ffb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffc0:	50                   	push   eax
c001ffc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffc7:	e8 22 ee ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffcc:	83 c4 10             	add    esp,0x10
c001ffcf:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ffd4:	75 6e                	jne    c0020044 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ffd6:	6a 00                	push   0x0
c001ffd8:	6a 08                	push   0x8
c001ffda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe1:	50                   	push   eax
c001ffe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffe8:	e8 01 ee ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffed:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fff2:	50                   	push   eax
c001fff3:	6a 09                	push   0x9
c001fff5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fffc:	50                   	push   eax
c001fffd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020003:	e8 e6 ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020008:	83 c4 20             	add    esp,0x20
c002000b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0020010:	50                   	push   eax
c0020011:	6a 0a                	push   0xa
c0020013:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001a:	50                   	push   eax
c002001b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020021:	e8 c8 ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020026:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002002b:	50                   	push   eax
c002002c:	6a 0b                	push   0xb
c002002e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020035:	50                   	push   eax
c0020036:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002003c:	e8 ad ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020041:	83 c4 20             	add    esp,0x20
c0020044:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020049:	50                   	push   eax
c002004a:	6a 02                	push   0x2
c002004c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020053:	50                   	push   eax
c0020054:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002005a:	e8 8f ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002005f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020064:	50                   	push   eax
c0020065:	6a 03                	push   0x3
c0020067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002006e:	50                   	push   eax
c002006f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020075:	e8 74 ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002007a:	83 c4 20             	add    esp,0x20
c002007d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020082:	50                   	push   eax
c0020083:	6a 04                	push   0x4
c0020085:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002008c:	50                   	push   eax
c002008d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020093:	e8 56 ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020098:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002009d:	50                   	push   eax
c002009e:	6a 05                	push   0x5
c00200a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200a7:	50                   	push   eax
c00200a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200ae:	e8 3b ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200b3:	83 c4 20             	add    esp,0x20
c00200b6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00200bb:	0f 94 c0             	sete   al
c00200be:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00200c3:	74 09                	je     c00200ce <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00200c5:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00200cc:	eb 07                	jmp    c00200d5 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00200ce:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00200d5:	0f b6 c0             	movzx  eax,al
c00200d8:	50                   	push   eax
c00200d9:	6a 07                	push   0x7
c00200db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200e2:	50                   	push   eax
c00200e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200e9:	e8 00 ed ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200ee:	c7 04 24 dd 76 02 c0 	mov    DWORD PTR [esp],0xc00276dd
c00200f5:	e8 4f d0 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00200fa:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00200fe:	83 c4 10             	add    esp,0x10
c0020101:	85 f6                	test   esi,esi
c0020103:	0f 84 f7 00 00 00    	je     c0020200 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0020109:	83 ec 0c             	sub    esp,0xc
c002010c:	68 e0 76 02 c0       	push   0xc00276e0
c0020111:	e8 33 d0 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020116:	83 c4 0c             	add    esp,0xc
c0020119:	6a 01                	push   0x1
c002011b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020122:	50                   	push   eax
c0020123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020129:	e8 74 f7 ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c002012e:	c7 04 24 e3 76 02 c0 	mov    DWORD PTR [esp],0xc00276e3
c0020135:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0020139:	e8 0b d0 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002013e:	83 c4 10             	add    esp,0x10
c0020141:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0020145:	84 c0                	test   al,al
c0020147:	74 2b                	je     c0020174 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0020149:	0f b6 f8             	movzx  edi,al
c002014c:	57                   	push   edi
c002014d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0020154:	50                   	push   eax
c0020155:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002015c:	50                   	push   eax
c002015d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020163:	e8 8a f6 ff ff       	call   c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020168:	c7 04 24 e6 76 02 c0 	mov    DWORD PTR [esp],0xc00276e6
c002016f:	e9 bc 00 00 00       	jmp    c0020230 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020174:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020179:	74 50                	je     c00201cb <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002017b:	83 ec 0c             	sub    esp,0xc
c002017e:	31 ed                	xor    ebp,ebp
c0020180:	68 f1 76 02 c0       	push   0xc00276f1
c0020185:	e8 bf cf fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002018a:	83 c4 10             	add    esp,0x10
c002018d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020191:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0020195:	50                   	push   eax
c0020196:	50                   	push   eax
c0020197:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002019e:	50                   	push   eax
c002019f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201a5:	e8 32 ec ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c00201aa:	89 c2                	mov    edx,eax
c00201ac:	89 f8                	mov    eax,edi
c00201ae:	66 ef                	out    dx,ax
c00201b0:	45                   	inc    ebp
c00201b1:	83 c4 10             	add    esp,0x10
c00201b4:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00201ba:	75 d1                	jne    c002018d <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00201bc:	83 ec 0c             	sub    esp,0xc
c00201bf:	68 f4 76 02 c0       	push   0xc00276f4
c00201c4:	e8 80 cf fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00201c9:	eb 24                	jmp    c00201ef <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00201cb:	51                   	push   ecx
c00201cc:	51                   	push   ecx
c00201cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201d4:	50                   	push   eax
c00201d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201db:	e8 fc eb ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c00201e0:	b9 00 01 00 00       	mov    ecx,0x100
c00201e5:	89 c2                	mov    edx,eax
c00201e7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00201eb:	fc                   	cld    
c00201ec:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00201ef:	83 c4 10             	add    esp,0x10
c00201f2:	4e                   	dec    esi
c00201f3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201fb:	e9 01 ff ff ff       	jmp    c0020101 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0020200:	31 ff                	xor    edi,edi
c0020202:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020207:	74 2f                	je     c0020238 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	68 f7 76 02 c0       	push   0xc00276f7
c0020211:	e8 33 cf fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020216:	58                   	pop    eax
c0020217:	31 c0                	xor    eax,eax
c0020219:	5a                   	pop    edx
c002021a:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002021f:	0f 94 c0             	sete   al
c0020222:	50                   	push   eax
c0020223:	53                   	push   ebx
c0020224:	e8 8d fb ff ff       	call   c001fdb6 <ATA::flush(bool)>
c0020229:	c7 04 24 fa 76 02 c0 	mov    DWORD PTR [esp],0xc00276fa
c0020230:	e8 14 cf fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020235:	83 c4 10             	add    esp,0x10
c0020238:	83 c4 2c             	add    esp,0x2c
c002023b:	89 f8                	mov    eax,edi
c002023d:	5b                   	pop    ebx
c002023e:	5e                   	pop    esi
c002023f:	5f                   	pop    edi
c0020240:	5d                   	pop    ebp
c0020241:	c3                   	ret    

c0020242 <ATA::read(unsigned long long, int, void*)>:
c0020242:	57                   	push   edi
c0020243:	b8 04 00 00 00       	mov    eax,0x4
c0020248:	56                   	push   esi
c0020249:	53                   	push   ebx
c002024a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002024e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020252:	8d 7a ff             	lea    edi,[edx-0x1]
c0020255:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020259:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002025d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020263:	77 25                	ja     c002028a <ATA::read(unsigned long long, int, void*)+0x48>
c0020265:	b8 06 00 00 00       	mov    eax,0x6
c002026a:	85 f6                	test   esi,esi
c002026c:	74 1c                	je     c002028a <ATA::read(unsigned long long, int, void*)+0x48>
c002026e:	50                   	push   eax
c002026f:	50                   	push   eax
c0020270:	6a 00                	push   0x0
c0020272:	56                   	push   esi
c0020273:	52                   	push   edx
c0020274:	53                   	push   ebx
c0020275:	51                   	push   ecx
c0020276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002027a:	e8 cd fb ff ff       	call   c001fe4c <ATA::access(unsigned long long, int, void*, bool)>
c002027f:	83 c4 20             	add    esp,0x20
c0020282:	85 c0                	test   eax,eax
c0020284:	0f 95 c0             	setne  al
c0020287:	0f b6 c0             	movzx  eax,al
c002028a:	5b                   	pop    ebx
c002028b:	5e                   	pop    esi
c002028c:	5f                   	pop    edi
c002028d:	c3                   	ret    

c002028e <ATA::write(unsigned long long, int, void*)>:
c002028e:	55                   	push   ebp
c002028f:	57                   	push   edi
c0020290:	56                   	push   esi
c0020291:	53                   	push   ebx
c0020292:	83 ec 18             	sub    esp,0x18
c0020295:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020299:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002029d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00202a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00202a5:	68 fd 76 02 c0       	push   0xc00276fd
c00202aa:	e8 9a ce fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00202af:	8d 53 ff             	lea    edx,[ebx-0x1]
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	b8 04 00 00 00       	mov    eax,0x4
c00202ba:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00202c0:	77 25                	ja     c00202e7 <ATA::write(unsigned long long, int, void*)+0x59>
c00202c2:	b8 06 00 00 00       	mov    eax,0x6
c00202c7:	85 f6                	test   esi,esi
c00202c9:	74 1c                	je     c00202e7 <ATA::write(unsigned long long, int, void*)+0x59>
c00202cb:	50                   	push   eax
c00202cc:	50                   	push   eax
c00202cd:	6a 01                	push   0x1
c00202cf:	56                   	push   esi
c00202d0:	53                   	push   ebx
c00202d1:	55                   	push   ebp
c00202d2:	57                   	push   edi
c00202d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202d7:	e8 70 fb ff ff       	call   c001fe4c <ATA::access(unsigned long long, int, void*, bool)>
c00202dc:	83 c4 20             	add    esp,0x20
c00202df:	85 c0                	test   eax,eax
c00202e1:	0f 95 c0             	setne  al
c00202e4:	0f b6 c0             	movzx  eax,al
c00202e7:	83 c4 0c             	add    esp,0xc
c00202ea:	5b                   	pop    ebx
c00202eb:	5e                   	pop    esi
c00202ec:	5f                   	pop    edi
c00202ed:	5d                   	pop    ebp
c00202ee:	c3                   	ret    
c00202ef:	90                   	nop

c00202f0 <ATA::detectCHS()>:
c00202f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202f4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00202fa:	c1 e0 06             	shl    eax,0x6
c00202fd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020303:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002030d:	c7 44 24 04 09 77 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027709
c0020315:	e9 0f 4f ff ff       	jmp    c0015229 <Krnl::panic(char const*)>

c002031a <ATA::open(int, int, void*)>:
c002031a:	53                   	push   ebx
c002031b:	83 ec 08             	sub    esp,0x8
c002031e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002032a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020330:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020336:	c1 e0 06             	shl    eax,0x6
c0020339:	01 d0                	add    eax,edx
c002033b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020342:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020348:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002034f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020359:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002035f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020366:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002036d:	75 0c                	jne    c002037b <ATA::open(int, int, void*)+0x61>
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	53                   	push   ebx
c0020373:	e8 78 ff ff ff       	call   c00202f0 <ATA::detectCHS()>
c0020378:	83 c4 10             	add    esp,0x10
c002037b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020381:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020387:	c1 e0 06             	shl    eax,0x6
c002038a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020391:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002039b:	d1 e8                	shr    eax,1
c002039d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00203a3:	6a 04                	push   0x4
c00203a5:	6a 0c                	push   0xc
c00203a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203ae:	50                   	push   eax
c00203af:	52                   	push   edx
c00203b0:	e8 39 ea ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203b5:	90                   	nop
c00203b6:	90                   	nop
c00203b7:	6a 00                	push   0x0
c00203b9:	6a 0c                	push   0xc
c00203bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203c2:	50                   	push   eax
c00203c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203c9:	e8 20 ea ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ce:	83 c4 14             	add    esp,0x14
c00203d1:	53                   	push   ebx
c00203d2:	e8 83 e7 fe ff       	call   c000eb5a <PhysicalDisk::startCache()>
c00203d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203da:	e8 f3 08 ff ff       	call   c0010cd2 <createPartitionsForDisk(PhysicalDisk*)>
c00203df:	31 c0                	xor    eax,eax
c00203e1:	83 c4 18             	add    esp,0x18
c00203e4:	5b                   	pop    ebx
c00203e5:	c3                   	ret    

c00203e6 <ATAPI::write(unsigned long long, int, void*)>:
c00203e6:	b8 03 00 00 00       	mov    eax,0x3
c00203eb:	c3                   	ret    

c00203ec <ATAPI::close(int, int, void*)>:
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00203f9:	85 c0                	test   eax,eax
c00203fb:	74 0c                	je     c0020409 <ATAPI::close(int, int, void*)+0x1d>
c00203fd:	83 ec 0c             	sub    esp,0xc
c0020400:	8b 10                	mov    edx,DWORD PTR [eax]
c0020402:	50                   	push   eax
c0020403:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020406:	83 c4 10             	add    esp,0x10
c0020409:	31 c0                	xor    eax,eax
c002040b:	83 c4 0c             	add    esp,0xc
c002040e:	c3                   	ret    
c002040f:	90                   	nop

c0020410 <ATAPI::ATAPI()>:
c0020410:	83 ec 0c             	sub    esp,0xc
c0020413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020417:	83 ec 04             	sub    esp,0x4
c002041a:	68 00 08 00 00       	push   0x800
c002041f:	68 09 7a 02 c0       	push   0xc0027a09
c0020424:	50                   	push   eax
c0020425:	e8 c8 e6 fe ff       	call   c000eaf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002042a:	83 c4 10             	add    esp,0x10
c002042d:	ba 9c 77 02 c0       	mov    edx,0xc002779c
c0020432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020436:	89 10                	mov    DWORD PTR [eax],edx
c0020438:	90                   	nop
c0020439:	83 c4 0c             	add    esp,0xc
c002043c:	c3                   	ret    
c002043d:	90                   	nop

c002043e <ATAPI::readyForCommand()>:
c002043e:	56                   	push   esi
c002043f:	53                   	push   ebx
c0020440:	53                   	push   ebx
c0020441:	31 db                	xor    ebx,ebx
c0020443:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020447:	51                   	push   ecx
c0020448:	6a 0c                	push   0xc
c002044a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020451:	50                   	push   eax
c0020452:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020458:	e8 51 ea ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c002045d:	83 c4 10             	add    esp,0x10
c0020460:	a8 88                	test   al,0x88
c0020462:	74 25                	je     c0020489 <ATAPI::readyForCommand()+0x4b>
c0020464:	43                   	inc    ebx
c0020465:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002046b:	7e da                	jle    c0020447 <ATAPI::readyForCommand()+0x9>
c002046d:	83 ec 0c             	sub    esp,0xc
c0020470:	68 5e 01 00 00       	push   0x15e
c0020475:	e8 02 8e ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c002047a:	83 c4 10             	add    esp,0x10
c002047d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020483:	75 c2                	jne    c0020447 <ATAPI::readyForCommand()+0x9>
c0020485:	31 c0                	xor    eax,eax
c0020487:	eb 02                	jmp    c002048b <ATAPI::readyForCommand()+0x4d>
c0020489:	b0 01                	mov    al,0x1
c002048b:	5a                   	pop    edx
c002048c:	5b                   	pop    ebx
c002048d:	5e                   	pop    esi
c002048e:	c3                   	ret    
c002048f:	90                   	nop

c0020490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020490:	55                   	push   ebp
c0020491:	57                   	push   edi
c0020492:	56                   	push   esi
c0020493:	53                   	push   ebx
c0020494:	83 ec 20             	sub    esp,0x20
c0020497:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002049b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002049f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00204a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00204a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00204ab:	6a 01                	push   0x1
c00204ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b4:	50                   	push   eax
c00204b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204bb:	e8 36 eb ff ff       	call   c001eff6 <IDE::enableIRQs(unsigned char, bool)>
c00204c0:	5e                   	pop    esi
c00204c1:	58                   	pop    eax
c00204c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204c9:	50                   	push   eax
c00204ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204d0:	e8 f3 e8 ff ff       	call   c001edc8 <IDE::prepareInterrupt(unsigned char)>
c00204d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00204d8:	e8 61 ff ff ff       	call   c002043e <ATAPI::readyForCommand()>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	84 c0                	test   al,al
c00204e2:	75 0a                	jne    c00204ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00204e4:	bb 01 00 00 00       	mov    ebx,0x1
c00204e9:	e9 57 02 00 00       	jmp    c0020745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204ee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00204f4:	c1 e0 04             	shl    eax,0x4
c00204f7:	0f b6 c0             	movzx  eax,al
c00204fa:	50                   	push   eax
c00204fb:	6a 06                	push   0x6
c00204fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020504:	50                   	push   eax
c0020505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002050b:	e8 de e8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020510:	6a 00                	push   0x0
c0020512:	6a 01                	push   0x1
c0020514:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002051b:	50                   	push   eax
c002051c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020522:	e8 c7 e8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020527:	83 c4 20             	add    esp,0x20
c002052a:	0f b6 c3             	movzx  eax,bl
c002052d:	0f b6 df             	movzx  ebx,bh
c0020530:	50                   	push   eax
c0020531:	6a 04                	push   0x4
c0020533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002053a:	50                   	push   eax
c002053b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020541:	e8 a8 e8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020546:	53                   	push   ebx
c0020547:	6a 05                	push   0x5
c0020549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020550:	50                   	push   eax
c0020551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020557:	e8 92 e8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002055c:	83 c4 20             	add    esp,0x20
c002055f:	68 a0 00 00 00       	push   0xa0
c0020564:	6a 07                	push   0x7
c0020566:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002056d:	50                   	push   eax
c002056e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020574:	e8 75 e8 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020579:	83 c4 0c             	add    esp,0xc
c002057c:	6a 01                	push   0x1
c002057e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020585:	50                   	push   eax
c0020586:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002058c:	e8 11 f3 ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c0020591:	83 c4 10             	add    esp,0x10
c0020594:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002059a:	84 c0                	test   al,al
c002059c:	74 23                	je     c00205c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002059e:	0f b6 d8             	movzx  ebx,al
c00205a1:	0f b6 d2             	movzx  edx,dl
c00205a4:	53                   	push   ebx
c00205a5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00205ac:	50                   	push   eax
c00205ad:	52                   	push   edx
c00205ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205b4:	e8 39 f2 ff ff       	call   c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00205b9:	83 c4 10             	add    esp,0x10
c00205bc:	e9 84 01 00 00       	jmp    c0020745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00205c1:	0f b6 d2             	movzx  edx,dl
c00205c4:	53                   	push   ebx
c00205c5:	53                   	push   ebx
c00205c6:	52                   	push   edx
c00205c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205cd:	e8 0a e8 ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c00205d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00205d6:	b9 06 00 00 00       	mov    ecx,0x6
c00205db:	89 c2                	mov    edx,eax
c00205dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00205e0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00205e4:	83 c4 10             	add    esp,0x10
c00205e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205f4:	85 db                	test   ebx,ebx
c00205f6:	0f 84 ec 00 00 00    	je     c00206e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00205fc:	51                   	push   ecx
c00205fd:	51                   	push   ecx
c00205fe:	52                   	push   edx
c00205ff:	50                   	push   eax
c0020600:	e8 57 e9 ff ff       	call   c001ef5c <IDE::waitInterrupt(unsigned char)>
c0020605:	83 c4 10             	add    esp,0x10
c0020608:	84 c0                	test   al,al
c002060a:	0f 84 d4 fe ff ff    	je     c00204e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020610:	56                   	push   esi
c0020611:	56                   	push   esi
c0020612:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020619:	50                   	push   eax
c002061a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020620:	e8 a3 e7 ff ff       	call   c001edc8 <IDE::prepareInterrupt(unsigned char)>
c0020625:	83 c4 0c             	add    esp,0xc
c0020628:	6a 04                	push   0x4
c002062a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020631:	50                   	push   eax
c0020632:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020638:	e8 71 e8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c002063d:	83 c4 0c             	add    esp,0xc
c0020640:	89 c6                	mov    esi,eax
c0020642:	6a 05                	push   0x5
c0020644:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002064b:	50                   	push   eax
c002064c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020652:	e8 57 e8 ff ff       	call   c001eeae <IDE::read(unsigned char, unsigned char)>
c0020657:	89 f1                	mov    ecx,esi
c0020659:	0f b6 c0             	movzx  eax,al
c002065c:	0f b6 f1             	movzx  esi,cl
c002065f:	c1 e0 08             	shl    eax,0x8
c0020662:	09 c6                	or     esi,eax
c0020664:	d1 fe                	sar    esi,1
c0020666:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002066a:	83 c4 10             	add    esp,0x10
c002066d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0020672:	74 41                	je     c00206b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020674:	31 c9                	xor    ecx,ecx
c0020676:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002067c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020683:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020687:	75 0a                	jne    c0020693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020689:	01 c9                	add    ecx,ecx
c002068b:	01 cd                	add    ebp,ecx
c002068d:	4b                   	dec    ebx
c002068e:	e9 54 ff ff ff       	jmp    c00205e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0020693:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020698:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002069c:	51                   	push   ecx
c002069d:	51                   	push   ecx
c002069e:	52                   	push   edx
c002069f:	50                   	push   eax
c00206a0:	e8 37 e7 ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c00206a5:	89 c2                	mov    edx,eax
c00206a7:	89 f0                	mov    eax,esi
c00206a9:	66 ef                	out    dx,ax
c00206ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00206af:	83 c4 10             	add    esp,0x10
c00206b2:	41                   	inc    ecx
c00206b3:	eb c1                	jmp    c0020676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00206b5:	31 f6                	xor    esi,esi
c00206b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206c4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00206c8:	75 06                	jne    c00206d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00206ca:	01 f6                	add    esi,esi
c00206cc:	01 f5                	add    ebp,esi
c00206ce:	eb bd                	jmp    c002068d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00206d0:	51                   	push   ecx
c00206d1:	51                   	push   ecx
c00206d2:	52                   	push   edx
c00206d3:	50                   	push   eax
c00206d4:	e8 03 e7 ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c00206d9:	89 c2                	mov    edx,eax
c00206db:	66 ed                	in     ax,dx
c00206dd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00206e2:	83 c4 10             	add    esp,0x10
c00206e5:	46                   	inc    esi
c00206e6:	eb cf                	jmp    c00206b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00206e8:	51                   	push   ecx
c00206e9:	51                   	push   ecx
c00206ea:	52                   	push   edx
c00206eb:	50                   	push   eax
c00206ec:	e8 6b e8 ff ff       	call   c001ef5c <IDE::waitInterrupt(unsigned char)>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	84 c0                	test   al,al
c00206f6:	0f 84 e8 fd ff ff    	je     c00204e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00206fc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020701:	52                   	push   edx
c0020702:	52                   	push   edx
c0020703:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002070a:	50                   	push   eax
c002070b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020711:	e8 b2 e6 ff ff       	call   c001edc8 <IDE::prepareInterrupt(unsigned char)>
c0020716:	83 c4 10             	add    esp,0x10
c0020719:	50                   	push   eax
c002071a:	50                   	push   eax
c002071b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020722:	50                   	push   eax
c0020723:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020729:	e8 ae e6 ff ff       	call   c001eddc <IDE::getBase(unsigned char)>
c002072e:	8d 50 07             	lea    edx,[eax+0x7]
c0020731:	ec                   	in     al,dx
c0020732:	83 c4 10             	add    esp,0x10
c0020735:	a8 88                	test   al,0x88
c0020737:	74 0a                	je     c0020743 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020739:	4b                   	dec    ebx
c002073a:	75 dd                	jne    c0020719 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002073c:	bb 02 00 00 00       	mov    ebx,0x2
c0020741:	eb 02                	jmp    c0020745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020743:	31 db                	xor    ebx,ebx
c0020745:	83 c4 1c             	add    esp,0x1c
c0020748:	89 d8                	mov    eax,ebx
c002074a:	5b                   	pop    ebx
c002074b:	5e                   	pop    esi
c002074c:	5f                   	pop    edi
c002074d:	5d                   	pop    ebp
c002074e:	c3                   	ret    
c002074f:	90                   	nop

c0020750 <ATAPI::diskRemoved()>:
c0020750:	53                   	push   ebx
c0020751:	83 ec 14             	sub    esp,0x14
c0020754:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020758:	68 54 77 02 c0       	push   0xc0027754
c002075d:	e8 e7 c9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020762:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020769:	c7 04 24 6a 77 02 c0 	mov    DWORD PTR [esp],0xc002776a
c0020770:	e8 d4 c9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020775:	58                   	pop    eax
c0020776:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002077c:	e8 cf 02 ff ff       	call   c0010a50 <LogicalDisk::unmount()>
c0020781:	c7 04 24 79 77 02 c0 	mov    DWORD PTR [esp],0xc0027779
c0020788:	e8 bc c9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002078d:	5a                   	pop    edx
c002078e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020794:	e8 bf 0c ff ff       	call   c0011458 <VCache::writeWriteBuffer()>
c0020799:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002079f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00207a3:	83 c4 18             	add    esp,0x18
c00207a6:	5b                   	pop    ebx
c00207a7:	e9 9c 0c ff ff       	jmp    c0011448 <VCache::invalidateReadBuffer()>

c00207ac <ATAPI::eject()>:
c00207ac:	57                   	push   edi
c00207ad:	b9 03 00 00 00       	mov    ecx,0x3
c00207b2:	53                   	push   ebx
c00207b3:	83 ec 14             	sub    esp,0x14
c00207b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00207ba:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00207be:	fc                   	cld    
c00207bf:	31 c0                	xor    eax,eax
c00207c1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207c3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00207c8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00207cd:	50                   	push   eax
c00207ce:	50                   	push   eax
c00207cf:	6a 00                	push   0x0
c00207d1:	6a 00                	push   0x0
c00207d3:	6a 00                	push   0x0
c00207d5:	6a 02                	push   0x2
c00207d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00207db:	50                   	push   eax
c00207dc:	53                   	push   ebx
c00207dd:	e8 ae fc ff ff       	call   c0020490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207e2:	83 c4 14             	add    esp,0x14
c00207e5:	53                   	push   ebx
c00207e6:	e8 65 ff ff ff       	call   c0020750 <ATAPI::diskRemoved()>
c00207eb:	83 c4 24             	add    esp,0x24
c00207ee:	31 c0                	xor    eax,eax
c00207f0:	5b                   	pop    ebx
c00207f1:	5f                   	pop    edi
c00207f2:	c3                   	ret    
c00207f3:	90                   	nop

c00207f4 <ATAPI::diskInserted()>:
c00207f4:	83 ec 18             	sub    esp,0x18
c00207f7:	68 15 7a 02 c0       	push   0xc0027a15
c00207fc:	e8 48 c9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0020801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020805:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002080c:	83 c4 1c             	add    esp,0x1c
c002080f:	c3                   	ret    

c0020810 <ATAPI::detectMedia()>:
c0020810:	56                   	push   esi
c0020811:	53                   	push   ebx
c0020812:	83 ec 28             	sub    esp,0x28
c0020815:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020819:	6a 0c                	push   0xc
c002081b:	6a 00                	push   0x0
c002081d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020821:	56                   	push   esi
c0020822:	e8 6d fe fd ff       	call   c0000694 <memset>
c0020827:	58                   	pop    eax
c0020828:	5a                   	pop    edx
c0020829:	6a 00                	push   0x0
c002082b:	6a 00                	push   0x0
c002082d:	6a 00                	push   0x0
c002082f:	6a 00                	push   0x0
c0020831:	56                   	push   esi
c0020832:	53                   	push   ebx
c0020833:	e8 58 fc ff ff       	call   c0020490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020838:	83 c4 1c             	add    esp,0x1c
c002083b:	6a 0c                	push   0xc
c002083d:	6a 00                	push   0x0
c002083f:	56                   	push   esi
c0020840:	e8 4f fe fd ff       	call   c0000694 <memset>
c0020845:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002084a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002084f:	59                   	pop    ecx
c0020850:	58                   	pop    eax
c0020851:	6a 01                	push   0x1
c0020853:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020857:	50                   	push   eax
c0020858:	6a 00                	push   0x0
c002085a:	6a 12                	push   0x12
c002085c:	56                   	push   esi
c002085d:	53                   	push   ebx
c002085e:	e8 2d fc ff ff       	call   c0020490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020863:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020867:	83 c4 20             	add    esp,0x20
c002086a:	83 e0 7f             	and    eax,0x7f
c002086d:	3c 70                	cmp    al,0x70
c002086f:	74 15                	je     c0020886 <ATAPI::detectMedia()+0x76>
c0020871:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020878:	75 0c                	jne    c0020886 <ATAPI::detectMedia()+0x76>
c002087a:	83 ec 0c             	sub    esp,0xc
c002087d:	53                   	push   ebx
c002087e:	e8 71 ff ff ff       	call   c00207f4 <ATAPI::diskInserted()>
c0020883:	83 c4 10             	add    esp,0x10
c0020886:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002088a:	83 e0 0f             	and    eax,0xf
c002088d:	3c 02                	cmp    al,0x2
c002088f:	75 1b                	jne    c00208ac <ATAPI::detectMedia()+0x9c>
c0020891:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020896:	75 2d                	jne    c00208c5 <ATAPI::detectMedia()+0xb5>
c0020898:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002089f:	74 24                	je     c00208c5 <ATAPI::detectMedia()+0xb5>
c00208a1:	83 ec 0c             	sub    esp,0xc
c00208a4:	53                   	push   ebx
c00208a5:	e8 a6 fe ff ff       	call   c0020750 <ATAPI::diskRemoved()>
c00208aa:	eb 16                	jmp    c00208c2 <ATAPI::detectMedia()+0xb2>
c00208ac:	84 c0                	test   al,al
c00208ae:	75 15                	jne    c00208c5 <ATAPI::detectMedia()+0xb5>
c00208b0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208b7:	75 0c                	jne    c00208c5 <ATAPI::detectMedia()+0xb5>
c00208b9:	83 ec 0c             	sub    esp,0xc
c00208bc:	53                   	push   ebx
c00208bd:	e8 32 ff ff ff       	call   c00207f4 <ATAPI::diskInserted()>
c00208c2:	83 c4 10             	add    esp,0x10
c00208c5:	83 c4 24             	add    esp,0x24
c00208c8:	5b                   	pop    ebx
c00208c9:	5e                   	pop    esi
c00208ca:	c3                   	ret    
c00208cb:	90                   	nop

c00208cc <ATAPI::open(int, int, void*)>:
c00208cc:	56                   	push   esi
c00208cd:	53                   	push   ebx
c00208ce:	50                   	push   eax
c00208cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208db:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208e1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00208e7:	c1 e0 06             	shl    eax,0x6
c00208ea:	01 d0                	add    eax,edx
c00208ec:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00208f3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00208f9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020900:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002090a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020910:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020917:	6a 04                	push   0x4
c0020919:	6a 0c                	push   0xc
c002091b:	51                   	push   ecx
c002091c:	52                   	push   edx
c002091d:	e8 cc e4 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020922:	90                   	nop
c0020923:	90                   	nop
c0020924:	6a 00                	push   0x0
c0020926:	6a 0c                	push   0xc
c0020928:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002092f:	50                   	push   eax
c0020930:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020936:	e8 b3 e4 ff ff       	call   c001edee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002093b:	83 c4 14             	add    esp,0x14
c002093e:	68 74 01 00 00       	push   0x174
c0020943:	e8 9f 94 fe ff       	call   c0009de7 <malloc>
c0020948:	83 c4 0c             	add    esp,0xc
c002094b:	89 c6                	mov    esi,eax
c002094d:	6a 00                	push   0x0
c002094f:	68 ff ff ff 7f       	push   0x7fffffff
c0020954:	6a 00                	push   0x0
c0020956:	6a 00                	push   0x0
c0020958:	53                   	push   ebx
c0020959:	68 f2 7a 02 c0       	push   0xc0027af2
c002095e:	50                   	push   eax
c002095f:	e8 f8 fe fe ff       	call   c001085c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020964:	83 c4 14             	add    esp,0x14
c0020967:	56                   	push   esi
c0020968:	e8 a5 ff fe ff       	call   c0010912 <LogicalDisk::assignDriveLetter()>
c002096d:	5a                   	pop    edx
c002096e:	0f be c0             	movsx  eax,al
c0020971:	59                   	pop    ecx
c0020972:	50                   	push   eax
c0020973:	68 87 77 02 c0       	push   0xc0027787
c0020978:	e8 cc c7 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002097d:	58                   	pop    eax
c002097e:	5a                   	pop    edx
c002097f:	56                   	push   esi
c0020980:	53                   	push   ebx
c0020981:	e8 34 dd fe ff       	call   c000e6ba <Device::addChild(Device*)>
c0020986:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002098c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002098f:	e8 c6 e1 fe ff       	call   c000eb5a <PhysicalDisk::startCache()>
c0020994:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002099b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002099e:	e8 6d fe ff ff       	call   c0020810 <ATAPI::detectMedia()>
c00209a3:	83 c4 14             	add    esp,0x14
c00209a6:	31 c0                	xor    eax,eax
c00209a8:	5b                   	pop    ebx
c00209a9:	5e                   	pop    esi
c00209aa:	c3                   	ret    
c00209ab:	90                   	nop

c00209ac <ATAPI::read(unsigned long long, int, void*)>:
c00209ac:	55                   	push   ebp
c00209ad:	57                   	push   edi
c00209ae:	56                   	push   esi
c00209af:	53                   	push   ebx
c00209b0:	83 ec 1c             	sub    esp,0x1c
c00209b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00209b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00209bb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00209bf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00209c6:	74 41                	je     c0020a09 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00209c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00209cc:	b9 03 00 00 00       	mov    ecx,0x3
c00209d1:	fc                   	cld    
c00209d2:	31 c0                	xor    eax,eax
c00209d4:	86 fb                	xchg   bl,bh
c00209d6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00209d8:	c1 c3 10             	rol    ebx,0x10
c00209db:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00209e0:	89 e8                	mov    eax,ebp
c00209e2:	86 fb                	xchg   bl,bh
c00209e4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00209e8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00209ec:	50                   	push   eax
c00209ed:	50                   	push   eax
c00209ee:	55                   	push   ebp
c00209ef:	c1 e5 0b             	shl    ebp,0xb
c00209f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209f6:	6a 00                	push   0x0
c00209f8:	55                   	push   ebp
c00209f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00209fd:	50                   	push   eax
c00209fe:	56                   	push   esi
c00209ff:	e8 8c fa ff ff       	call   c0020490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020a04:	83 c4 20             	add    esp,0x20
c0020a07:	eb 1a                	jmp    c0020a23 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020a09:	83 ec 0c             	sub    esp,0xc
c0020a0c:	56                   	push   esi
c0020a0d:	e8 fe fd ff ff       	call   c0020810 <ATAPI::detectMedia()>
c0020a12:	83 c4 10             	add    esp,0x10
c0020a15:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020a1c:	75 aa                	jne    c00209c8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020a1e:	b8 02 00 00 00       	mov    eax,0x2
c0020a23:	83 c4 1c             	add    esp,0x1c
c0020a26:	5b                   	pop    ebx
c0020a27:	5e                   	pop    esi
c0020a28:	5f                   	pop    edi
c0020a29:	5d                   	pop    ebp
c0020a2a:	c3                   	ret    
c0020a2b:	90                   	nop

c0020a2c <SATA::close(int, int, void*)>:
c0020a2c:	83 ec 0c             	sub    esp,0xc
c0020a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a33:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a39:	85 c0                	test   eax,eax
c0020a3b:	74 0c                	je     c0020a49 <SATA::close(int, int, void*)+0x1d>
c0020a3d:	83 ec 0c             	sub    esp,0xc
c0020a40:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a42:	50                   	push   eax
c0020a43:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a46:	83 c4 10             	add    esp,0x10
c0020a49:	31 c0                	xor    eax,eax
c0020a4b:	83 c4 0c             	add    esp,0xc
c0020a4e:	c3                   	ret    
c0020a4f:	90                   	nop

c0020a50 <SATA::powerSaving(PowerSavingLevel)>:
c0020a50:	c3                   	ret    
c0020a51:	90                   	nop

c0020a52 <SATA::open(int, int, void*)>:
c0020a52:	56                   	push   esi
c0020a53:	53                   	push   ebx
c0020a54:	51                   	push   ecx
c0020a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a59:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020a60:	74 2d                	je     c0020a8f <SATA::open(int, int, void*)+0x3d>
c0020a62:	83 ec 0c             	sub    esp,0xc
c0020a65:	68 cc 77 02 c0       	push   0xc00277cc
c0020a6a:	e8 d2 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a6f:	83 c4 10             	add    esp,0x10
c0020a72:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020a79:	75 14                	jne    c0020a8f <SATA::open(int, int, void*)+0x3d>
c0020a7b:	e4 60                	in     al,0x60
c0020a7d:	3c 5a                	cmp    al,0x5a
c0020a7f:	74 04                	je     c0020a85 <SATA::open(int, int, void*)+0x33>
c0020a81:	3c 1c                	cmp    al,0x1c
c0020a83:	75 f6                	jne    c0020a7b <SATA::open(int, int, void*)+0x29>
c0020a85:	e4 60                	in     al,0x60
c0020a87:	3c 5a                	cmp    al,0x5a
c0020a89:	74 fa                	je     c0020a85 <SATA::open(int, int, void*)+0x33>
c0020a8b:	3c 1c                	cmp    al,0x1c
c0020a8d:	74 f6                	je     c0020a85 <SATA::open(int, int, void*)+0x33>
c0020a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a93:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a9d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020aa3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ab1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020abb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020ac1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020ac8:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020acf:	74 2d                	je     c0020afe <SATA::open(int, int, void*)+0xac>
c0020ad1:	83 ec 0c             	sub    esp,0xc
c0020ad4:	68 d9 77 02 c0       	push   0xc00277d9
c0020ad9:	e8 63 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ade:	83 c4 10             	add    esp,0x10
c0020ae1:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020ae8:	75 14                	jne    c0020afe <SATA::open(int, int, void*)+0xac>
c0020aea:	e4 60                	in     al,0x60
c0020aec:	3c 1c                	cmp    al,0x1c
c0020aee:	74 04                	je     c0020af4 <SATA::open(int, int, void*)+0xa2>
c0020af0:	3c 5a                	cmp    al,0x5a
c0020af2:	75 f6                	jne    c0020aea <SATA::open(int, int, void*)+0x98>
c0020af4:	e4 60                	in     al,0x60
c0020af6:	3c 5a                	cmp    al,0x5a
c0020af8:	74 fa                	je     c0020af4 <SATA::open(int, int, void*)+0xa2>
c0020afa:	3c 1c                	cmp    al,0x1c
c0020afc:	74 f6                	je     c0020af4 <SATA::open(int, int, void*)+0xa2>
c0020afe:	e8 9b 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020b03:	89 c6                	mov    esi,eax
c0020b05:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020b0b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020b11:	e8 88 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020b16:	39 c6                	cmp    esi,eax
c0020b18:	74 10                	je     c0020b2a <SATA::open(int, int, void*)+0xd8>
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	68 e6 77 02 c0       	push   0xc00277e6
c0020b22:	e8 02 47 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020b31:	74 2d                	je     c0020b60 <SATA::open(int, int, void*)+0x10e>
c0020b33:	83 ec 0c             	sub    esp,0xc
c0020b36:	68 fa 77 02 c0       	push   0xc00277fa
c0020b3b:	e8 01 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b40:	83 c4 10             	add    esp,0x10
c0020b43:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020b4a:	75 14                	jne    c0020b60 <SATA::open(int, int, void*)+0x10e>
c0020b4c:	e4 60                	in     al,0x60
c0020b4e:	3c 1c                	cmp    al,0x1c
c0020b50:	74 04                	je     c0020b56 <SATA::open(int, int, void*)+0x104>
c0020b52:	3c 5a                	cmp    al,0x5a
c0020b54:	75 f6                	jne    c0020b4c <SATA::open(int, int, void*)+0xfa>
c0020b56:	e4 60                	in     al,0x60
c0020b58:	3c 5a                	cmp    al,0x5a
c0020b5a:	74 fa                	je     c0020b56 <SATA::open(int, int, void*)+0x104>
c0020b5c:	3c 1c                	cmp    al,0x1c
c0020b5e:	74 f6                	je     c0020b56 <SATA::open(int, int, void*)+0x104>
c0020b60:	83 ec 0c             	sub    esp,0xc
c0020b63:	6a 02                	push   0x2
c0020b65:	e8 37 b2 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0020b6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b70:	6a 03                	push   0x3
c0020b72:	50                   	push   eax
c0020b73:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b79:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c0020b7f:	e8 88 b8 fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b84:	83 c4 20             	add    esp,0x20
c0020b87:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020b8e:	74 2d                	je     c0020bbd <SATA::open(int, int, void*)+0x16b>
c0020b90:	83 ec 0c             	sub    esp,0xc
c0020b93:	68 07 78 02 c0       	push   0xc0027807
c0020b98:	e8 a4 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020ba7:	75 14                	jne    c0020bbd <SATA::open(int, int, void*)+0x16b>
c0020ba9:	e4 60                	in     al,0x60
c0020bab:	3c 1c                	cmp    al,0x1c
c0020bad:	74 04                	je     c0020bb3 <SATA::open(int, int, void*)+0x161>
c0020baf:	3c 5a                	cmp    al,0x5a
c0020bb1:	75 f6                	jne    c0020ba9 <SATA::open(int, int, void*)+0x157>
c0020bb3:	e4 60                	in     al,0x60
c0020bb5:	3c 5a                	cmp    al,0x5a
c0020bb7:	74 fa                	je     c0020bb3 <SATA::open(int, int, void*)+0x161>
c0020bb9:	3c 1c                	cmp    al,0x1c
c0020bbb:	74 f6                	je     c0020bb3 <SATA::open(int, int, void*)+0x161>
c0020bbd:	83 ec 0c             	sub    esp,0xc
c0020bc0:	53                   	push   ebx
c0020bc1:	e8 94 df fe ff       	call   c000eb5a <PhysicalDisk::startCache()>
c0020bc6:	83 c4 10             	add    esp,0x10
c0020bc9:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020bd0:	74 2d                	je     c0020bff <SATA::open(int, int, void*)+0x1ad>
c0020bd2:	83 ec 0c             	sub    esp,0xc
c0020bd5:	68 14 78 02 c0       	push   0xc0027814
c0020bda:	e8 62 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020bdf:	83 c4 10             	add    esp,0x10
c0020be2:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020be9:	75 14                	jne    c0020bff <SATA::open(int, int, void*)+0x1ad>
c0020beb:	e4 60                	in     al,0x60
c0020bed:	3c 1c                	cmp    al,0x1c
c0020bef:	74 04                	je     c0020bf5 <SATA::open(int, int, void*)+0x1a3>
c0020bf1:	3c 5a                	cmp    al,0x5a
c0020bf3:	75 f6                	jne    c0020beb <SATA::open(int, int, void*)+0x199>
c0020bf5:	e4 60                	in     al,0x60
c0020bf7:	3c 5a                	cmp    al,0x5a
c0020bf9:	74 fa                	je     c0020bf5 <SATA::open(int, int, void*)+0x1a3>
c0020bfb:	3c 1c                	cmp    al,0x1c
c0020bfd:	74 f6                	je     c0020bf5 <SATA::open(int, int, void*)+0x1a3>
c0020bff:	83 ec 0c             	sub    esp,0xc
c0020c02:	53                   	push   ebx
c0020c03:	e8 ca 00 ff ff       	call   c0010cd2 <createPartitionsForDisk(PhysicalDisk*)>
c0020c08:	83 c4 10             	add    esp,0x10
c0020c0b:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020c12:	74 2d                	je     c0020c41 <SATA::open(int, int, void*)+0x1ef>
c0020c14:	83 ec 0c             	sub    esp,0xc
c0020c17:	68 21 78 02 c0       	push   0xc0027821
c0020c1c:	e8 20 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020c21:	83 c4 10             	add    esp,0x10
c0020c24:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020c2b:	75 14                	jne    c0020c41 <SATA::open(int, int, void*)+0x1ef>
c0020c2d:	e4 60                	in     al,0x60
c0020c2f:	3c 1c                	cmp    al,0x1c
c0020c31:	74 04                	je     c0020c37 <SATA::open(int, int, void*)+0x1e5>
c0020c33:	3c 5a                	cmp    al,0x5a
c0020c35:	75 f6                	jne    c0020c2d <SATA::open(int, int, void*)+0x1db>
c0020c37:	e4 60                	in     al,0x60
c0020c39:	3c 5a                	cmp    al,0x5a
c0020c3b:	74 fa                	je     c0020c37 <SATA::open(int, int, void*)+0x1e5>
c0020c3d:	3c 1c                	cmp    al,0x1c
c0020c3f:	74 f6                	je     c0020c37 <SATA::open(int, int, void*)+0x1e5>
c0020c41:	5a                   	pop    edx
c0020c42:	31 c0                	xor    eax,eax
c0020c44:	5b                   	pop    ebx
c0020c45:	5e                   	pop    esi
c0020c46:	c3                   	ret    
c0020c47:	90                   	nop

c0020c48 <SATA::SATA()>:
c0020c48:	83 ec 0c             	sub    esp,0xc
c0020c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c4f:	83 ec 04             	sub    esp,0x4
c0020c52:	68 00 02 00 00       	push   0x200
c0020c57:	68 2e 78 02 c0       	push   0xc002782e
c0020c5c:	50                   	push   eax
c0020c5d:	e8 90 de fe ff       	call   c000eaf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	ba d8 79 02 c0       	mov    edx,0xc00279d8
c0020c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c6e:	89 10                	mov    DWORD PTR [eax],edx
c0020c70:	90                   	nop
c0020c71:	83 c4 0c             	add    esp,0xc
c0020c74:	c3                   	ret    
c0020c75:	90                   	nop

c0020c76 <SATA::access(unsigned long long, int, void*, bool)>:
c0020c76:	55                   	push   ebp
c0020c77:	57                   	push   edi
c0020c78:	56                   	push   esi
c0020c79:	53                   	push   ebx
c0020c7a:	83 ec 2c             	sub    esp,0x2c
c0020c7d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c81:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c89:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020c90:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c98:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca0:	75 19                	jne    c0020cbb <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020ca2:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020ca7:	7e 41                	jle    c0020cea <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020ca9:	83 ec 0c             	sub    esp,0xc
c0020cac:	68 4d 78 02 c0       	push   0xc002784d
c0020cb1:	e8 73 45 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0020cb6:	83 c4 10             	add    esp,0x10
c0020cb9:	eb 2f                	jmp    c0020cea <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020cbb:	83 ec 0c             	sub    esp,0xc
c0020cbe:	68 3e 78 02 c0       	push   0xc002783e
c0020cc3:	e8 79 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020cc8:	83 c4 10             	add    esp,0x10
c0020ccb:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020cd2:	75 ce                	jne    c0020ca2 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020cd4:	e4 60                	in     al,0x60
c0020cd6:	3c 1c                	cmp    al,0x1c
c0020cd8:	74 04                	je     c0020cde <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cda:	3c 5a                	cmp    al,0x5a
c0020cdc:	75 f6                	jne    c0020cd4 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020cde:	e4 60                	in     al,0x60
c0020ce0:	3c 5a                	cmp    al,0x5a
c0020ce2:	74 fa                	je     c0020cde <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020ce4:	3c 1c                	cmp    al,0x1c
c0020ce6:	74 f6                	je     c0020cde <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020ce8:	eb b8                	jmp    c0020ca2 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020cea:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020cf1:	75 29                	jne    c0020d1c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020cf3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020cf9:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020cff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d05:	8d 75 02             	lea    esi,[ebp+0x2]
c0020d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d0c:	c1 e6 07             	shl    esi,0x7
c0020d0f:	01 c6                	add    esi,eax
c0020d11:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020d18:	74 4a                	je     c0020d64 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d1a:	eb 2f                	jmp    c0020d4b <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020d1c:	83 ec 0c             	sub    esp,0xc
c0020d1f:	68 86 78 02 c0       	push   0xc0027886
c0020d24:	e8 18 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020d33:	75 be                	jne    c0020cf3 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d35:	e4 60                	in     al,0x60
c0020d37:	3c 1c                	cmp    al,0x1c
c0020d39:	74 04                	je     c0020d3f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d3b:	3c 5a                	cmp    al,0x5a
c0020d3d:	75 f6                	jne    c0020d35 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020d3f:	e4 60                	in     al,0x60
c0020d41:	3c 5a                	cmp    al,0x5a
c0020d43:	74 fa                	je     c0020d3f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d45:	3c 1c                	cmp    al,0x1c
c0020d47:	74 f6                	je     c0020d3f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d49:	eb a8                	jmp    c0020cf3 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d4b:	83 ec 0c             	sub    esp,0xc
c0020d4e:	68 95 78 02 c0       	push   0xc0027895
c0020d53:	e8 e9 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d58:	83 c4 10             	add    esp,0x10
c0020d5b:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020d62:	74 3d                	je     c0020da1 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020d64:	89 e8                	mov    eax,ebp
c0020d66:	c1 e0 07             	shl    eax,0x7
c0020d69:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d6d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d77:	52                   	push   edx
c0020d78:	52                   	push   edx
c0020d79:	56                   	push   esi
c0020d7a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020d80:	e8 fd eb ff ff       	call   c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	b8 01 00 00 00       	mov    eax,0x1
c0020d91:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d96:	75 1d                	jne    c0020db5 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d98:	e9 c8 04 00 00       	jmp    c0021265 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d9d:	3c 5a                	cmp    al,0x5a
c0020d9f:	74 0c                	je     c0020dad <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020da1:	e4 60                	in     al,0x60
c0020da3:	3c 1c                	cmp    al,0x1c
c0020da5:	75 f6                	jne    c0020d9d <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020da7:	eb 04                	jmp    c0020dad <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020da9:	3c 1c                	cmp    al,0x1c
c0020dab:	75 b7                	jne    c0020d64 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020dad:	e4 60                	in     al,0x60
c0020daf:	3c 5a                	cmp    al,0x5a
c0020db1:	74 fa                	je     c0020dad <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020db3:	eb f4                	jmp    c0020da9 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020db5:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020dbc:	74 3a                	je     c0020df8 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020dbe:	83 ec 0c             	sub    esp,0xc
c0020dc1:	68 a4 78 02 c0       	push   0xc00278a4
c0020dc6:	e8 76 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020dcb:	83 c4 10             	add    esp,0x10
c0020dce:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020dd5:	74 0d                	je     c0020de4 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020dd7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ddc:	74 34                	je     c0020e12 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020dde:	eb 1f                	jmp    c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020de0:	3c 1c                	cmp    al,0x1c
c0020de2:	74 0c                	je     c0020df0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020de4:	e4 60                	in     al,0x60
c0020de6:	3c 5a                	cmp    al,0x5a
c0020de8:	75 f6                	jne    c0020de0 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020dea:	eb 04                	jmp    c0020df0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dec:	3c 1c                	cmp    al,0x1c
c0020dee:	75 e7                	jne    c0020dd7 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020df0:	e4 60                	in     al,0x60
c0020df2:	3c 5a                	cmp    al,0x5a
c0020df4:	74 fa                	je     c0020df0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020df6:	eb f4                	jmp    c0020dec <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020df8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020dfd:	74 1c                	je     c0020e1b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020dff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020e03:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020e09:	c1 e1 09             	shl    ecx,0x9
c0020e0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020e10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e12:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020e19:	75 55                	jne    c0020e70 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020e1b:	8d 45 02             	lea    eax,[ebp+0x2]
c0020e1e:	c1 e0 07             	shl    eax,0x7
c0020e21:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e25:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e27:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e2d:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020e33:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e3d:	c1 e0 05             	shl    eax,0x5
c0020e40:	01 c7                	add    edi,eax
c0020e42:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e46:	83 e0 01             	and    eax,0x1
c0020e49:	c1 e0 06             	shl    eax,0x6
c0020e4c:	88 c2                	mov    dl,al
c0020e4e:	8a 07                	mov    al,BYTE PTR [edi]
c0020e50:	83 e0 bf             	and    eax,0xffffffbf
c0020e53:	09 d0                	or     eax,edx
c0020e55:	88 07                	mov    BYTE PTR [edi],al
c0020e57:	8b 07                	mov    eax,DWORD PTR [edi]
c0020e59:	25 e0 ff 00 00       	and    eax,0xffe0
c0020e5e:	0d 05 00 01 00       	or     eax,0x10005
c0020e63:	89 07                	mov    DWORD PTR [edi],eax
c0020e65:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020e6c:	74 4d                	je     c0020ebb <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e6e:	eb 32                	jmp    c0020ea2 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020e70:	83 ec 0c             	sub    esp,0xc
c0020e73:	68 b3 78 02 c0       	push   0xc00278b3
c0020e78:	e8 c4 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e7d:	83 c4 10             	add    esp,0x10
c0020e80:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020e87:	75 92                	jne    c0020e1b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e89:	e4 60                	in     al,0x60
c0020e8b:	3c 1c                	cmp    al,0x1c
c0020e8d:	74 04                	je     c0020e93 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e8f:	3c 5a                	cmp    al,0x5a
c0020e91:	75 f6                	jne    c0020e89 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e93:	e4 60                	in     al,0x60
c0020e95:	3c 5a                	cmp    al,0x5a
c0020e97:	74 fa                	je     c0020e93 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e99:	3c 1c                	cmp    al,0x1c
c0020e9b:	74 f6                	je     c0020e93 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e9d:	e9 79 ff ff ff       	jmp    c0020e1b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020ea2:	83 ec 0c             	sub    esp,0xc
c0020ea5:	68 c2 78 02 c0       	push   0xc00278c2
c0020eaa:	e8 92 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020eaf:	83 c4 10             	add    esp,0x10
c0020eb2:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020eb9:	74 3b                	je     c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020ebb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020ec1:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020ec7:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020ecd:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020ed0:	50                   	push   eax
c0020ed1:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020ed5:	83 c0 08             	add    eax,0x8
c0020ed8:	c1 e0 04             	shl    eax,0x4
c0020edb:	50                   	push   eax
c0020edc:	6a 00                	push   0x0
c0020ede:	56                   	push   esi
c0020edf:	e8 b0 f7 fd ff       	call   c0000694 <memset>
c0020ee4:	83 c4 10             	add    esp,0x10
c0020ee7:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020eee:	74 33                	je     c0020f23 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020ef0:	eb 18                	jmp    c0020f0a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020ef2:	3c 1c                	cmp    al,0x1c
c0020ef4:	74 0c                	je     c0020f02 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ef6:	e4 60                	in     al,0x60
c0020ef8:	3c 5a                	cmp    al,0x5a
c0020efa:	75 f6                	jne    c0020ef2 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020efc:	eb 04                	jmp    c0020f02 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020efe:	3c 1c                	cmp    al,0x1c
c0020f00:	75 b9                	jne    c0020ebb <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020f02:	e4 60                	in     al,0x60
c0020f04:	3c 5a                	cmp    al,0x5a
c0020f06:	74 fa                	je     c0020f02 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020f08:	eb f4                	jmp    c0020efe <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020f0a:	83 ec 0c             	sub    esp,0xc
c0020f0d:	68 d1 78 02 c0       	push   0xc00278d1
c0020f12:	e8 2a 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020f21:	74 48                	je     c0020f6b <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020f23:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020f29:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020f2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f33:	c1 e0 09             	shl    eax,0x9
c0020f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f3a:	48                   	dec    eax
c0020f3b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f40:	89 c2                	mov    edx,eax
c0020f42:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020f48:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f4d:	09 d0                	or     eax,edx
c0020f4f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020f55:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020f5c:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020f63:	74 33                	je     c0020f98 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f65:	eb 18                	jmp    c0020f7f <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020f67:	3c 1c                	cmp    al,0x1c
c0020f69:	74 0c                	je     c0020f77 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f6b:	e4 60                	in     al,0x60
c0020f6d:	3c 5a                	cmp    al,0x5a
c0020f6f:	75 f6                	jne    c0020f67 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020f71:	eb 04                	jmp    c0020f77 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f73:	3c 1c                	cmp    al,0x1c
c0020f75:	75 ac                	jne    c0020f23 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020f77:	e4 60                	in     al,0x60
c0020f79:	3c 5a                	cmp    al,0x5a
c0020f7b:	74 fa                	je     c0020f77 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f7d:	eb f4                	jmp    c0020f73 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020f7f:	83 ec 0c             	sub    esp,0xc
c0020f82:	68 e0 78 02 c0       	push   0xc00278e0
c0020f87:	e8 b5 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f8c:	83 c4 10             	add    esp,0x10
c0020f8f:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0020f96:	74 63                	je     c0020ffb <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f98:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f9b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f9f:	66 25 00 7f          	and    ax,0x7f00
c0020fa3:	66 0d 27 80          	or     ax,0x8027
c0020fa7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020fac:	66 89 06             	mov    WORD PTR [esi],ax
c0020faf:	19 c0                	sbb    eax,eax
c0020fb1:	83 e0 f0             	and    eax,0xfffffff0
c0020fb4:	83 c0 35             	add    eax,0x35
c0020fb7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020fba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fbe:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020fc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fc6:	c1 e8 10             	shr    eax,0x10
c0020fc9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020fcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fd0:	c1 e8 18             	shr    eax,0x18
c0020fd3:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0020fda:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020fdd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020fe1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020fe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fe8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020feb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020fef:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020ff3:	74 33                	je     c0021028 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020ff5:	eb 18                	jmp    c002100f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020ff7:	3c 1c                	cmp    al,0x1c
c0020ff9:	74 0c                	je     c0021007 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020ffb:	e4 60                	in     al,0x60
c0020ffd:	3c 5a                	cmp    al,0x5a
c0020fff:	75 f6                	jne    c0020ff7 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0021001:	eb 04                	jmp    c0021007 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0021003:	3c 1c                	cmp    al,0x1c
c0021005:	75 91                	jne    c0020f98 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0021007:	e4 60                	in     al,0x60
c0021009:	3c 5a                	cmp    al,0x5a
c002100b:	74 fa                	je     c0021007 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002100d:	eb f4                	jmp    c0021003 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002100f:	83 ec 0c             	sub    esp,0xc
c0021012:	68 ef 78 02 c0       	push   0xc00278ef
c0021017:	e8 25 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002101c:	83 c4 10             	add    esp,0x10
c002101f:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0021026:	74 11                	je     c0021039 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0021028:	89 e8                	mov    eax,ebp
c002102a:	31 f6                	xor    esi,esi
c002102c:	c1 e0 07             	shl    eax,0x7
c002102f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021033:	eb 21                	jmp    c0021056 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0021035:	3c 1c                	cmp    al,0x1c
c0021037:	74 0c                	je     c0021045 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021039:	e4 60                	in     al,0x60
c002103b:	3c 5a                	cmp    al,0x5a
c002103d:	75 f6                	jne    c0021035 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002103f:	eb 04                	jmp    c0021045 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021041:	3c 1c                	cmp    al,0x1c
c0021043:	75 e3                	jne    c0021028 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0021045:	e4 60                	in     al,0x60
c0021047:	3c 5a                	cmp    al,0x5a
c0021049:	74 fa                	je     c0021045 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002104b:	eb f4                	jmp    c0021041 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c002104d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021053:	74 0c                	je     c0021061 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0021055:	46                   	inc    esi
c0021056:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c002105c:	80 e2 88             	and    dl,0x88
c002105f:	75 ec                	jne    c002104d <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0021061:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0021068:	74 3d                	je     c00210a7 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c002106a:	83 ec 0c             	sub    esp,0xc
c002106d:	68 fe 78 02 c0       	push   0xc00278fe
c0021072:	e8 ca 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021077:	8b 15 60 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c60
c002107d:	83 c4 10             	add    esp,0x10
c0021080:	f6 c2 80             	test   dl,0x80
c0021083:	74 0e                	je     c0021093 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0021085:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002108b:	75 2f                	jne    c00210bc <SATA::access(unsigned long long, int, void*, bool)+0x446>
c002108d:	eb 20                	jmp    c00210af <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002108f:	3c 1c                	cmp    al,0x1c
c0021091:	74 0c                	je     c002109f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021093:	e4 60                	in     al,0x60
c0021095:	3c 5a                	cmp    al,0x5a
c0021097:	75 f6                	jne    c002108f <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021099:	eb 04                	jmp    c002109f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002109b:	3c 1c                	cmp    al,0x1c
c002109d:	75 e6                	jne    c0021085 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002109f:	e4 60                	in     al,0x60
c00210a1:	3c 5a                	cmp    al,0x5a
c00210a3:	74 fa                	je     c002109f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00210a5:	eb f4                	jmp    c002109b <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00210a7:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00210ad:	75 13                	jne    c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210af:	83 ec 0c             	sub    esp,0xc
c00210b2:	68 0e 79 02 c0       	push   0xc002790e
c00210b7:	e9 d2 00 00 00       	jmp    c002118e <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00210bc:	0f ba e2 0b          	bt     edx,0xb
c00210c0:	72 25                	jb     c00210e7 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00210c2:	be 01 00 00 00       	mov    esi,0x1
c00210c7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00210cb:	89 e8                	mov    eax,ebp
c00210cd:	d3 e6                	shl    esi,cl
c00210cf:	c1 e0 07             	shl    eax,0x7
c00210d2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210d6:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c00210dd:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00210e3:	74 4a                	je     c002112f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00210e5:	eb 2f                	jmp    c0021116 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00210e7:	83 ec 0c             	sub    esp,0xc
c00210ea:	68 1c 79 02 c0       	push   0xc002791c
c00210ef:	e8 4d 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210f4:	83 c4 10             	add    esp,0x10
c00210f7:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00210fe:	75 c2                	jne    c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021100:	e4 60                	in     al,0x60
c0021102:	3c 5a                	cmp    al,0x5a
c0021104:	74 04                	je     c002110a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021106:	3c 1c                	cmp    al,0x1c
c0021108:	75 f6                	jne    c0021100 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c002110a:	e4 60                	in     al,0x60
c002110c:	3c 5a                	cmp    al,0x5a
c002110e:	74 fa                	je     c002110a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021110:	3c 1c                	cmp    al,0x1c
c0021112:	74 f6                	je     c002110a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021114:	eb ac                	jmp    c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021116:	83 ec 0c             	sub    esp,0xc
c0021119:	68 2c 79 02 c0       	push   0xc002792c
c002111e:	e8 1e 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c002112d:	74 0f                	je     c002113e <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002112f:	89 e8                	mov    eax,ebp
c0021131:	c1 e0 07             	shl    eax,0x7
c0021134:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021138:	eb 24                	jmp    c002115e <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c002113a:	3c 1c                	cmp    al,0x1c
c002113c:	74 0c                	je     c002114a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002113e:	e4 60                	in     al,0x60
c0021140:	3c 5a                	cmp    al,0x5a
c0021142:	75 f6                	jne    c002113a <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0021144:	eb 04                	jmp    c002114a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021146:	3c 1c                	cmp    al,0x1c
c0021148:	75 e5                	jne    c002112f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c002114a:	e4 60                	in     al,0x60
c002114c:	3c 5a                	cmp    al,0x5a
c002114e:	74 fa                	je     c002114a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021150:	eb f4                	jmp    c0021146 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0021152:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0021158:	0f ba e2 1e          	bt     edx,0x1e
c002115c:	72 28                	jb     c0021186 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002115e:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0021164:	85 d6                	test   esi,edx
c0021166:	75 ea                	jne    c0021152 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0021168:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c002116f:	75 2f                	jne    c00211a0 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0021171:	89 e8                	mov    eax,ebp
c0021173:	c1 e0 07             	shl    eax,0x7
c0021176:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002117a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021180:	0f ba e0 1e          	bt     eax,0x1e
c0021184:	73 49                	jae    c00211cf <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0021186:	83 ec 0c             	sub    esp,0xc
c0021189:	68 3c 79 02 c0       	push   0xc002793c
c002118e:	e8 b6 bf fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	b8 01 00 00 00       	mov    eax,0x1
c002119b:	e9 c5 00 00 00       	jmp    c0021265 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00211a0:	83 ec 0c             	sub    esp,0xc
c00211a3:	68 4d 79 02 c0       	push   0xc002794d
c00211a8:	e8 94 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211ad:	83 c4 10             	add    esp,0x10
c00211b0:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00211b7:	75 b8                	jne    c0021171 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00211b9:	e4 60                	in     al,0x60
c00211bb:	3c 5a                	cmp    al,0x5a
c00211bd:	74 04                	je     c00211c3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211bf:	3c 1c                	cmp    al,0x1c
c00211c1:	75 f6                	jne    c00211b9 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00211c3:	e4 60                	in     al,0x60
c00211c5:	3c 5a                	cmp    al,0x5a
c00211c7:	74 fa                	je     c00211c3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211c9:	3c 1c                	cmp    al,0x1c
c00211cb:	74 f6                	je     c00211c3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211cd:	eb a2                	jmp    c0021171 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00211cf:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c00211d6:	74 3a                	je     c0021212 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00211d8:	83 ec 0c             	sub    esp,0xc
c00211db:	68 5d 79 02 c0       	push   0xc002795d
c00211e0:	e8 5c 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211e5:	83 c4 10             	add    esp,0x10
c00211e8:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00211ef:	74 0d                	je     c00211fe <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00211f1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211f6:	75 31                	jne    c0021229 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00211f8:	eb 1f                	jmp    c0021219 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00211fa:	3c 1c                	cmp    al,0x1c
c00211fc:	74 0c                	je     c002120a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211fe:	e4 60                	in     al,0x60
c0021200:	3c 5a                	cmp    al,0x5a
c0021202:	75 f6                	jne    c00211fa <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0021204:	eb 04                	jmp    c002120a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0021206:	3c 1c                	cmp    al,0x1c
c0021208:	75 e7                	jne    c00211f1 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c002120a:	e4 60                	in     al,0x60
c002120c:	3c 5a                	cmp    al,0x5a
c002120e:	74 fa                	je     c002120a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0021210:	eb f4                	jmp    c0021206 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0021212:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021217:	75 19                	jne    c0021232 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021219:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002121f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0021223:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021227:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021229:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0021230:	75 04                	jne    c0021236 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0021232:	31 c0                	xor    eax,eax
c0021234:	eb 2f                	jmp    c0021265 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021236:	83 ec 0c             	sub    esp,0xc
c0021239:	68 6d 79 02 c0       	push   0xc002796d
c002123e:	e8 fe 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c002124d:	75 e3                	jne    c0021232 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002124f:	e4 60                	in     al,0x60
c0021251:	3c 1c                	cmp    al,0x1c
c0021253:	74 04                	je     c0021259 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021255:	3c 5a                	cmp    al,0x5a
c0021257:	75 f6                	jne    c002124f <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0021259:	e4 60                	in     al,0x60
c002125b:	3c 5a                	cmp    al,0x5a
c002125d:	74 fa                	je     c0021259 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002125f:	3c 1c                	cmp    al,0x1c
c0021261:	74 f6                	je     c0021259 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021263:	eb cd                	jmp    c0021232 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021265:	83 c4 2c             	add    esp,0x2c
c0021268:	5b                   	pop    ebx
c0021269:	5e                   	pop    esi
c002126a:	5f                   	pop    edi
c002126b:	5d                   	pop    ebp
c002126c:	c3                   	ret    
c002126d:	90                   	nop

c002126e <SATA::read(unsigned long long, int, void*)>:
c002126e:	55                   	push   ebp
c002126f:	57                   	push   edi
c0021270:	56                   	push   esi
c0021271:	53                   	push   ebx
c0021272:	83 ec 0c             	sub    esp,0xc
c0021275:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021279:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002127d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021285:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c002128c:	74 2d                	je     c00212bb <SATA::read(unsigned long long, int, void*)+0x4d>
c002128e:	83 ec 0c             	sub    esp,0xc
c0021291:	68 7d 79 02 c0       	push   0xc002797d
c0021296:	e8 a6 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00212a5:	75 14                	jne    c00212bb <SATA::read(unsigned long long, int, void*)+0x4d>
c00212a7:	e4 60                	in     al,0x60
c00212a9:	3c 1c                	cmp    al,0x1c
c00212ab:	74 04                	je     c00212b1 <SATA::read(unsigned long long, int, void*)+0x43>
c00212ad:	3c 5a                	cmp    al,0x5a
c00212af:	75 f6                	jne    c00212a7 <SATA::read(unsigned long long, int, void*)+0x39>
c00212b1:	e4 60                	in     al,0x60
c00212b3:	3c 5a                	cmp    al,0x5a
c00212b5:	74 fa                	je     c00212b1 <SATA::read(unsigned long long, int, void*)+0x43>
c00212b7:	3c 1c                	cmp    al,0x1c
c00212b9:	74 f6                	je     c00212b1 <SATA::read(unsigned long long, int, void*)+0x43>
c00212bb:	8d 53 ff             	lea    edx,[ebx-0x1]
c00212be:	b8 04 00 00 00       	mov    eax,0x4
c00212c3:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00212c9:	0f 87 96 00 00 00    	ja     c0021365 <SATA::read(unsigned long long, int, void*)+0xf7>
c00212cf:	b8 06 00 00 00       	mov    eax,0x6
c00212d4:	85 ed                	test   ebp,ebp
c00212d6:	0f 84 89 00 00 00    	je     c0021365 <SATA::read(unsigned long long, int, void*)+0xf7>
c00212dc:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c00212e3:	74 2d                	je     c0021312 <SATA::read(unsigned long long, int, void*)+0xa4>
c00212e5:	83 ec 0c             	sub    esp,0xc
c00212e8:	68 8a 79 02 c0       	push   0xc002798a
c00212ed:	e8 4f 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212f2:	83 c4 10             	add    esp,0x10
c00212f5:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00212fc:	75 14                	jne    c0021312 <SATA::read(unsigned long long, int, void*)+0xa4>
c00212fe:	e4 60                	in     al,0x60
c0021300:	3c 5a                	cmp    al,0x5a
c0021302:	74 04                	je     c0021308 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021304:	3c 1c                	cmp    al,0x1c
c0021306:	75 f6                	jne    c00212fe <SATA::read(unsigned long long, int, void*)+0x90>
c0021308:	e4 60                	in     al,0x60
c002130a:	3c 5a                	cmp    al,0x5a
c002130c:	74 fa                	je     c0021308 <SATA::read(unsigned long long, int, void*)+0x9a>
c002130e:	3c 1c                	cmp    al,0x1c
c0021310:	74 f6                	je     c0021308 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021312:	50                   	push   eax
c0021313:	50                   	push   eax
c0021314:	6a 00                	push   0x0
c0021316:	55                   	push   ebp
c0021317:	53                   	push   ebx
c0021318:	57                   	push   edi
c0021319:	56                   	push   esi
c002131a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002131e:	e8 53 f9 ff ff       	call   c0020c76 <SATA::access(unsigned long long, int, void*, bool)>
c0021323:	83 c4 20             	add    esp,0x20
c0021326:	89 c3                	mov    ebx,eax
c0021328:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c002132f:	74 2d                	je     c002135e <SATA::read(unsigned long long, int, void*)+0xf0>
c0021331:	83 ec 0c             	sub    esp,0xc
c0021334:	68 97 79 02 c0       	push   0xc0027997
c0021339:	e8 03 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002133e:	83 c4 10             	add    esp,0x10
c0021341:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0021348:	75 14                	jne    c002135e <SATA::read(unsigned long long, int, void*)+0xf0>
c002134a:	e4 60                	in     al,0x60
c002134c:	3c 5a                	cmp    al,0x5a
c002134e:	74 04                	je     c0021354 <SATA::read(unsigned long long, int, void*)+0xe6>
c0021350:	3c 1c                	cmp    al,0x1c
c0021352:	75 f6                	jne    c002134a <SATA::read(unsigned long long, int, void*)+0xdc>
c0021354:	e4 60                	in     al,0x60
c0021356:	3c 5a                	cmp    al,0x5a
c0021358:	74 fa                	je     c0021354 <SATA::read(unsigned long long, int, void*)+0xe6>
c002135a:	3c 1c                	cmp    al,0x1c
c002135c:	74 f6                	je     c0021354 <SATA::read(unsigned long long, int, void*)+0xe6>
c002135e:	31 c0                	xor    eax,eax
c0021360:	85 db                	test   ebx,ebx
c0021362:	0f 95 c0             	setne  al
c0021365:	83 c4 0c             	add    esp,0xc
c0021368:	5b                   	pop    ebx
c0021369:	5e                   	pop    esi
c002136a:	5f                   	pop    edi
c002136b:	5d                   	pop    ebp
c002136c:	c3                   	ret    
c002136d:	90                   	nop

c002136e <SATA::write(unsigned long long, int, void*)>:
c002136e:	55                   	push   ebp
c002136f:	57                   	push   edi
c0021370:	56                   	push   esi
c0021371:	53                   	push   ebx
c0021372:	83 ec 1c             	sub    esp,0x1c
c0021375:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021379:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002137d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021381:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021385:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c002138c:	74 2d                	je     c00213bb <SATA::write(unsigned long long, int, void*)+0x4d>
c002138e:	83 ec 0c             	sub    esp,0xc
c0021391:	68 a4 79 02 c0       	push   0xc00279a4
c0021396:	e8 a6 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00213a5:	75 14                	jne    c00213bb <SATA::write(unsigned long long, int, void*)+0x4d>
c00213a7:	e4 60                	in     al,0x60
c00213a9:	3c 1c                	cmp    al,0x1c
c00213ab:	74 04                	je     c00213b1 <SATA::write(unsigned long long, int, void*)+0x43>
c00213ad:	3c 5a                	cmp    al,0x5a
c00213af:	75 f6                	jne    c00213a7 <SATA::write(unsigned long long, int, void*)+0x39>
c00213b1:	e4 60                	in     al,0x60
c00213b3:	3c 5a                	cmp    al,0x5a
c00213b5:	74 fa                	je     c00213b1 <SATA::write(unsigned long long, int, void*)+0x43>
c00213b7:	3c 1c                	cmp    al,0x1c
c00213b9:	74 f6                	je     c00213b1 <SATA::write(unsigned long long, int, void*)+0x43>
c00213bb:	8d 55 ff             	lea    edx,[ebp-0x1]
c00213be:	b8 04 00 00 00       	mov    eax,0x4
c00213c3:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00213c9:	0f 87 bd 00 00 00    	ja     c002148c <SATA::write(unsigned long long, int, void*)+0x11e>
c00213cf:	b8 06 00 00 00       	mov    eax,0x6
c00213d4:	85 db                	test   ebx,ebx
c00213d6:	0f 84 b0 00 00 00    	je     c002148c <SATA::write(unsigned long long, int, void*)+0x11e>
c00213dc:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c00213e3:	74 2d                	je     c0021412 <SATA::write(unsigned long long, int, void*)+0xa4>
c00213e5:	83 ec 0c             	sub    esp,0xc
c00213e8:	68 b2 79 02 c0       	push   0xc00279b2
c00213ed:	e8 4f 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00213f2:	83 c4 10             	add    esp,0x10
c00213f5:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c00213fc:	75 14                	jne    c0021412 <SATA::write(unsigned long long, int, void*)+0xa4>
c00213fe:	e4 60                	in     al,0x60
c0021400:	3c 1c                	cmp    al,0x1c
c0021402:	74 04                	je     c0021408 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021404:	3c 5a                	cmp    al,0x5a
c0021406:	75 f6                	jne    c00213fe <SATA::write(unsigned long long, int, void*)+0x90>
c0021408:	e4 60                	in     al,0x60
c002140a:	3c 5a                	cmp    al,0x5a
c002140c:	74 fa                	je     c0021408 <SATA::write(unsigned long long, int, void*)+0x9a>
c002140e:	3c 1c                	cmp    al,0x1c
c0021410:	74 f6                	je     c0021408 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021412:	c1 e5 09             	shl    ebp,0x9
c0021415:	01 dd                	add    ebp,ebx
c0021417:	89 f0                	mov    eax,esi
c0021419:	89 fa                	mov    edx,edi
c002141b:	83 c0 01             	add    eax,0x1
c002141e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021422:	83 d2 00             	adc    edx,0x0
c0021425:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021429:	50                   	push   eax
c002142a:	50                   	push   eax
c002142b:	6a 01                	push   0x1
c002142d:	53                   	push   ebx
c002142e:	81 c3 00 02 00 00    	add    ebx,0x200
c0021434:	6a 01                	push   0x1
c0021436:	57                   	push   edi
c0021437:	56                   	push   esi
c0021438:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002143c:	e8 35 f8 ff ff       	call   c0020c76 <SATA::access(unsigned long long, int, void*, bool)>
c0021441:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021445:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021449:	83 c4 20             	add    esp,0x20
c002144c:	39 dd                	cmp    ebp,ebx
c002144e:	75 c7                	jne    c0021417 <SATA::write(unsigned long long, int, void*)+0xa9>
c0021450:	f6 05 61 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c61,0x8
c0021457:	75 04                	jne    c002145d <SATA::write(unsigned long long, int, void*)+0xef>
c0021459:	31 c0                	xor    eax,eax
c002145b:	eb 2f                	jmp    c002148c <SATA::write(unsigned long long, int, void*)+0x11e>
c002145d:	83 ec 0c             	sub    esp,0xc
c0021460:	68 c0 79 02 c0       	push   0xc00279c0
c0021465:	e8 d7 89 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002146a:	83 c4 10             	add    esp,0x10
c002146d:	f6 05 60 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c60,0x80
c0021474:	75 e3                	jne    c0021459 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021476:	e4 60                	in     al,0x60
c0021478:	3c 5a                	cmp    al,0x5a
c002147a:	74 04                	je     c0021480 <SATA::write(unsigned long long, int, void*)+0x112>
c002147c:	3c 1c                	cmp    al,0x1c
c002147e:	75 f6                	jne    c0021476 <SATA::write(unsigned long long, int, void*)+0x108>
c0021480:	e4 60                	in     al,0x60
c0021482:	3c 5a                	cmp    al,0x5a
c0021484:	74 fa                	je     c0021480 <SATA::write(unsigned long long, int, void*)+0x112>
c0021486:	3c 1c                	cmp    al,0x1c
c0021488:	74 f6                	je     c0021480 <SATA::write(unsigned long long, int, void*)+0x112>
c002148a:	eb cd                	jmp    c0021459 <SATA::write(unsigned long long, int, void*)+0xeb>
c002148c:	83 c4 1c             	add    esp,0x1c
c002148f:	5b                   	pop    ebx
c0021490:	5e                   	pop    esi
c0021491:	5f                   	pop    edi
c0021492:	5d                   	pop    ebp
c0021493:	c3                   	ret    

c0021494 <SATAPI::write(unsigned long long, int, void*)>:
c0021494:	b8 03 00 00 00       	mov    eax,0x3
c0021499:	c3                   	ret    

c002149a <SATAPI::close(int, int, void*)>:
c002149a:	83 ec 0c             	sub    esp,0xc
c002149d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214a7:	85 c0                	test   eax,eax
c00214a9:	74 0c                	je     c00214b7 <SATAPI::close(int, int, void*)+0x1d>
c00214ab:	83 ec 0c             	sub    esp,0xc
c00214ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00214b0:	50                   	push   eax
c00214b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00214b4:	83 c4 10             	add    esp,0x10
c00214b7:	31 c0                	xor    eax,eax
c00214b9:	83 c4 0c             	add    esp,0xc
c00214bc:	c3                   	ret    
c00214bd:	90                   	nop

c00214be <SATAPI::SATAPI()>:
c00214be:	83 ec 0c             	sub    esp,0xc
c00214c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c5:	83 ec 04             	sub    esp,0x4
c00214c8:	68 00 08 00 00       	push   0x800
c00214cd:	68 08 7a 02 c0       	push   0xc0027a08
c00214d2:	50                   	push   eax
c00214d3:	e8 1a d6 fe ff       	call   c000eaf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00214d8:	83 c4 10             	add    esp,0x10
c00214db:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c00214e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e4:	89 10                	mov    DWORD PTR [eax],edx
c00214e6:	90                   	nop
c00214e7:	83 c4 0c             	add    esp,0xc
c00214ea:	c3                   	ret    
c00214eb:	90                   	nop

c00214ec <SATAPI::diskRemoved()>:
c00214ec:	c3                   	ret    
c00214ed:	90                   	nop

c00214ee <SATAPI::diskInserted()>:
c00214ee:	83 ec 18             	sub    esp,0x18
c00214f1:	68 14 7a 02 c0       	push   0xc0027a14
c00214f6:	e8 4e bc fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00214fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ff:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021506:	83 c4 1c             	add    esp,0x1c
c0021509:	c3                   	ret    

c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002150a:	55                   	push   ebp
c002150b:	57                   	push   edi
c002150c:	56                   	push   esi
c002150d:	53                   	push   ebx
c002150e:	83 ec 38             	sub    esp,0x38
c0021511:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0021515:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0021519:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002151d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021521:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021525:	68 2c 7a 02 c0       	push   0xc0027a2c
c002152a:	e8 1a bc fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002152f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021535:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002153b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002153f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021545:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021549:	c1 e0 07             	shl    eax,0x7
c002154c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0021550:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021554:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002155e:	5a                   	pop    edx
c002155f:	59                   	pop    ecx
c0021560:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021564:	8d 58 02             	lea    ebx,[eax+0x2]
c0021567:	c1 e3 07             	shl    ebx,0x7
c002156a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002156e:	53                   	push   ebx
c002156f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021575:	e8 08 e4 ff ff       	call   c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002157a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002157e:	83 c4 10             	add    esp,0x10
c0021581:	b8 01 00 00 00       	mov    eax,0x1
c0021586:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002158b:	0f 84 ff 01 00 00    	je     c0021790 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021591:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021597:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021599:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002159f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00215a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00215a9:	c1 e1 05             	shl    ecx,0x5
c00215ac:	01 c8                	add    eax,ecx
c00215ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00215b0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00215b6:	81 c9 25 00 01 00    	or     ecx,0x10025
c00215bc:	89 08                	mov    DWORD PTR [eax],ecx
c00215be:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00215c4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00215ca:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00215d0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00215d3:	8d 7b 40             	lea    edi,[ebx+0x40]
c00215d6:	50                   	push   eax
c00215d7:	68 90 00 00 00       	push   0x90
c00215dc:	6a 00                	push   0x0
c00215de:	53                   	push   ebx
c00215df:	e8 b0 f0 fd ff       	call   c0000694 <memset>
c00215e4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00215e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00215ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215ef:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00215f5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00215f9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00215ff:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021607:	48                   	dec    eax
c0021608:	25 ff ff 3f 00       	and    eax,0x3fffff
c002160d:	89 c1                	mov    ecx,eax
c002160f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0021615:	25 00 00 c0 ff       	and    eax,0xffc00000
c002161a:	09 c8                	or     eax,ecx
c002161c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021622:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0021625:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002162c:	66 25 00 7f          	and    ax,0x7f00
c0021630:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021634:	66 0d 27 80          	or     ax,0x8027
c0021638:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002163c:	66 89 03             	mov    WORD PTR [ebx],ax
c002163f:	89 d0                	mov    eax,edx
c0021641:	c1 ea 18             	shr    edx,0x18
c0021644:	c1 e8 10             	shr    eax,0x10
c0021647:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002164a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002164d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021651:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021658:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002165b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021666:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002166a:	31 c0                	xor    eax,eax
c002166c:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021672:	80 e1 88             	and    cl,0x88
c0021675:	74 0a                	je     c0021681 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0021677:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002167c:	74 0a                	je     c0021688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c002167e:	40                   	inc    eax
c002167f:	eb eb                	jmp    c002166c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021681:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021686:	75 0a                	jne    c0021692 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	68 46 7a 02 c0       	push   0xc0027a46
c0021690:	eb 43                	jmp    c00216d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021692:	be 01 00 00 00       	mov    esi,0x1
c0021697:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002169b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002169f:	d3 e6                	shl    esi,cl
c00216a1:	c1 e7 07             	shl    edi,0x7
c00216a4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00216aa:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c00216af:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00216b3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00216b9:	85 c6                	test   esi,eax
c00216bb:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00216c1:	0f 84 96 00 00 00    	je     c002175d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00216c7:	0f ba e0 1e          	bt     eax,0x1e
c00216cb:	73 1a                	jae    c00216e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c00216cd:	83 ec 0c             	sub    esp,0xc
c00216d0:	68 5b 7a 02 c0       	push   0xc0027a5b
c00216d5:	e8 6f ba fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00216da:	83 c4 10             	add    esp,0x10
c00216dd:	b8 01 00 00 00       	mov    eax,0x1
c00216e2:	e9 a9 00 00 00       	jmp    c0021790 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00216e7:	83 fb 0d             	cmp    ebx,0xd
c00216ea:	77 12                	ja     c00216fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	68 c8 00 00 00       	push   0xc8
c00216f4:	e8 83 7b ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c00216f9:	83 c4 10             	add    esp,0x10
c00216fc:	eb 2a                	jmp    c0021728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216fe:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0021704:	83 f8 0d             	cmp    eax,0xd
c0021707:	77 0a                	ja     c0021713 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0021709:	83 ec 0c             	sub    esp,0xc
c002170c:	68 58 02 00 00       	push   0x258
c0021711:	eb 28                	jmp    c002173b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021713:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021719:	83 f8 0d             	cmp    eax,0xd
c002171c:	77 0a                	ja     c0021728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002171e:	83 ec 0c             	sub    esp,0xc
c0021721:	68 dc 05 00 00       	push   0x5dc
c0021726:	eb 13                	jmp    c002173b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021728:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c002172e:	83 f8 0d             	cmp    eax,0xd
c0021731:	77 10                	ja     c0021743 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0021733:	83 ec 0c             	sub    esp,0xc
c0021736:	68 c4 09 00 00       	push   0x9c4
c002173b:	e8 3c 7b ff ff       	call   c001927c <milliTenthSleep(unsigned int)>
c0021740:	83 c4 10             	add    esp,0x10
c0021743:	43                   	inc    ebx
c0021744:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c002174a:	0f 85 63 ff ff ff    	jne    c00216b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	68 6e 7a 02 c0       	push   0xc0027a6e
c0021758:	e9 78 ff ff ff       	jmp    c00216d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002175d:	0f ba e0 1e          	bt     eax,0x1e
c0021761:	73 0d                	jae    c0021770 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0021763:	83 ec 0c             	sub    esp,0xc
c0021766:	68 82 7a 02 c0       	push   0xc0027a82
c002176b:	e9 65 ff ff ff       	jmp    c00216d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021770:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021775:	74 17                	je     c002178e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0021777:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002177c:	74 10                	je     c002178e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002177e:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021784:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021788:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002178c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002178e:	31 c0                	xor    eax,eax
c0021790:	83 c4 2c             	add    esp,0x2c
c0021793:	5b                   	pop    ebx
c0021794:	5e                   	pop    esi
c0021795:	5f                   	pop    edi
c0021796:	5d                   	pop    ebp
c0021797:	c3                   	ret    

c0021798 <SATAPI::eject()>:
c0021798:	57                   	push   edi
c0021799:	b9 03 00 00 00       	mov    ecx,0x3
c002179e:	83 ec 18             	sub    esp,0x18
c00217a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00217a5:	fc                   	cld    
c00217a6:	31 c0                	xor    eax,eax
c00217a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00217aa:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00217af:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00217b4:	50                   	push   eax
c00217b5:	6a 00                	push   0x0
c00217b7:	6a 00                	push   0x0
c00217b9:	6a 00                	push   0x0
c00217bb:	6a 00                	push   0x0
c00217bd:	6a 02                	push   0x2
c00217bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217c3:	50                   	push   eax
c00217c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00217c8:	e8 3d fd ff ff       	call   c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217cd:	31 c0                	xor    eax,eax
c00217cf:	83 c4 38             	add    esp,0x38
c00217d2:	5f                   	pop    edi
c00217d3:	c3                   	ret    

c00217d4 <SATAPI::detectMedia()>:
c00217d4:	56                   	push   esi
c00217d5:	53                   	push   ebx
c00217d6:	83 ec 30             	sub    esp,0x30
c00217d9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00217dd:	68 97 7a 02 c0       	push   0xc0027a97
c00217e2:	e8 62 b9 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00217e7:	83 c4 0c             	add    esp,0xc
c00217ea:	6a 0c                	push   0xc
c00217ec:	6a 00                	push   0x0
c00217ee:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00217f2:	56                   	push   esi
c00217f3:	e8 9c ee fd ff       	call   c0000694 <memset>
c00217f8:	83 c4 0c             	add    esp,0xc
c00217fb:	6a 00                	push   0x0
c00217fd:	6a 00                	push   0x0
c00217ff:	6a 00                	push   0x0
c0021801:	6a 00                	push   0x0
c0021803:	6a 00                	push   0x0
c0021805:	56                   	push   esi
c0021806:	53                   	push   ebx
c0021807:	e8 fe fc ff ff       	call   c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002180c:	83 c4 20             	add    esp,0x20
c002180f:	48                   	dec    eax
c0021810:	74 34                	je     c0021846 <SATAPI::detectMedia()+0x72>
c0021812:	50                   	push   eax
c0021813:	6a 0c                	push   0xc
c0021815:	6a 00                	push   0x0
c0021817:	56                   	push   esi
c0021818:	e8 77 ee fd ff       	call   c0000694 <memset>
c002181d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021822:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021827:	83 c4 0c             	add    esp,0xc
c002182a:	6a 01                	push   0x1
c002182c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021830:	50                   	push   eax
c0021831:	6a 00                	push   0x0
c0021833:	6a 00                	push   0x0
c0021835:	6a 12                	push   0x12
c0021837:	56                   	push   esi
c0021838:	53                   	push   ebx
c0021839:	e8 cc fc ff ff       	call   c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002183e:	83 c4 20             	add    esp,0x20
c0021841:	48                   	dec    eax
c0021842:	75 39                	jne    c002187d <SATAPI::detectMedia()+0xa9>
c0021844:	eb 1e                	jmp    c0021864 <SATAPI::detectMedia()+0x90>
c0021846:	83 ec 0c             	sub    esp,0xc
c0021849:	68 ab 7a 02 c0       	push   0xc0027aab
c002184e:	e8 f6 b8 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0021853:	83 c4 10             	add    esp,0x10
c0021856:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002185d:	74 b3                	je     c0021812 <SATAPI::detectMedia()+0x3e>
c002185f:	e9 93 00 00 00       	jmp    c00218f7 <SATAPI::detectMedia()+0x123>
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	68 b5 7a 02 c0       	push   0xc0027ab5
c002186c:	e8 d8 b8 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002187b:	75 7a                	jne    c00218f7 <SATAPI::detectMedia()+0x123>
c002187d:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021881:	83 e0 7f             	and    eax,0x7f
c0021884:	3c 70                	cmp    al,0x70
c0021886:	74 25                	je     c00218ad <SATAPI::detectMedia()+0xd9>
c0021888:	83 ec 0c             	sub    esp,0xc
c002188b:	68 bf 7a 02 c0       	push   0xc0027abf
c0021890:	e8 b4 b8 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0021895:	83 c4 10             	add    esp,0x10
c0021898:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002189f:	75 0c                	jne    c00218ad <SATAPI::detectMedia()+0xd9>
c00218a1:	83 ec 0c             	sub    esp,0xc
c00218a4:	53                   	push   ebx
c00218a5:	e8 44 fc ff ff       	call   c00214ee <SATAPI::diskInserted()>
c00218aa:	83 c4 10             	add    esp,0x10
c00218ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00218b1:	83 e0 0f             	and    eax,0xf
c00218b4:	3c 02                	cmp    al,0x2
c00218b6:	75 16                	jne    c00218ce <SATAPI::detectMedia()+0xfa>
c00218b8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00218bd:	75 38                	jne    c00218f7 <SATAPI::detectMedia()+0x123>
c00218bf:	83 ec 0c             	sub    esp,0xc
c00218c2:	68 c8 7a 02 c0       	push   0xc0027ac8
c00218c7:	e8 7d b8 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00218cc:	eb 26                	jmp    c00218f4 <SATAPI::detectMedia()+0x120>
c00218ce:	84 c0                	test   al,al
c00218d0:	75 25                	jne    c00218f7 <SATAPI::detectMedia()+0x123>
c00218d2:	83 ec 0c             	sub    esp,0xc
c00218d5:	68 d1 7a 02 c0       	push   0xc0027ad1
c00218da:	e8 6a b8 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00218e9:	75 0c                	jne    c00218f7 <SATAPI::detectMedia()+0x123>
c00218eb:	83 ec 0c             	sub    esp,0xc
c00218ee:	53                   	push   ebx
c00218ef:	e8 fa fb ff ff       	call   c00214ee <SATAPI::diskInserted()>
c00218f4:	83 c4 10             	add    esp,0x10
c00218f7:	83 c4 24             	add    esp,0x24
c00218fa:	5b                   	pop    ebx
c00218fb:	5e                   	pop    esi
c00218fc:	c3                   	ret    
c00218fd:	90                   	nop

c00218fe <SATAPI::open(int, int, void*)>:
c00218fe:	56                   	push   esi
c00218ff:	53                   	push   ebx
c0021900:	51                   	push   ecx
c0021901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021909:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021913:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021919:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021927:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021931:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021937:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002193e:	e8 5b 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c0021943:	89 c6                	mov    esi,eax
c0021945:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002194b:	81 c6 00 10 00 00    	add    esi,0x1000
c0021951:	e8 48 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c0021956:	39 c6                	cmp    esi,eax
c0021958:	74 10                	je     c002196a <SATAPI::open(int, int, void*)+0x6c>
c002195a:	83 ec 0c             	sub    esp,0xc
c002195d:	68 db 7a 02 c0       	push   0xc0027adb
c0021962:	e8 c2 38 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0021967:	83 c4 10             	add    esp,0x10
c002196a:	83 ec 0c             	sub    esp,0xc
c002196d:	6a 02                	push   0x2
c002196f:	e8 2d a4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0021974:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002197a:	6a 03                	push   0x3
c002197c:	50                   	push   eax
c002197d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021983:	ff 35 74 8d 02 c0    	push   DWORD PTR ds:0xc0028d74
c0021989:	e8 7e aa fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c002198e:	83 c4 14             	add    esp,0x14
c0021991:	68 74 01 00 00       	push   0x174
c0021996:	e8 4c 84 fe ff       	call   c0009de7 <malloc>
c002199b:	83 c4 0c             	add    esp,0xc
c002199e:	89 c6                	mov    esi,eax
c00219a0:	6a 00                	push   0x0
c00219a2:	68 ff ff ff 7f       	push   0x7fffffff
c00219a7:	6a 00                	push   0x0
c00219a9:	6a 00                	push   0x0
c00219ab:	53                   	push   ebx
c00219ac:	68 f1 7a 02 c0       	push   0xc0027af1
c00219b1:	50                   	push   eax
c00219b2:	e8 a5 ee fe ff       	call   c001085c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00219b7:	83 c4 14             	add    esp,0x14
c00219ba:	56                   	push   esi
c00219bb:	e8 52 ef fe ff       	call   c0010912 <LogicalDisk::assignDriveLetter()>
c00219c0:	5a                   	pop    edx
c00219c1:	0f be c0             	movsx  eax,al
c00219c4:	59                   	pop    ecx
c00219c5:	50                   	push   eax
c00219c6:	68 87 77 02 c0       	push   0xc0027787
c00219cb:	e8 79 b7 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c00219d0:	58                   	pop    eax
c00219d1:	5a                   	pop    edx
c00219d2:	56                   	push   esi
c00219d3:	53                   	push   ebx
c00219d4:	e8 e1 cc fe ff       	call   c000e6ba <Device::addChild(Device*)>
c00219d9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00219df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219e2:	e8 73 d1 fe ff       	call   c000eb5a <PhysicalDisk::startCache()>
c00219e7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00219ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219f1:	e8 de fd ff ff       	call   c00217d4 <SATAPI::detectMedia()>
c00219f6:	83 c4 14             	add    esp,0x14
c00219f9:	31 c0                	xor    eax,eax
c00219fb:	5b                   	pop    ebx
c00219fc:	5e                   	pop    esi
c00219fd:	c3                   	ret    

c00219fe <SATAPI::read(unsigned long long, int, void*)>:
c00219fe:	55                   	push   ebp
c00219ff:	57                   	push   edi
c0021a00:	56                   	push   esi
c0021a01:	53                   	push   ebx
c0021a02:	83 ec 48             	sub    esp,0x48
c0021a05:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021a09:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021a0d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021a11:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021a15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021a19:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021a1d:	68 ff 7a 02 c0       	push   0xc0027aff
c0021a22:	e8 22 b7 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0021a27:	83 c4 10             	add    esp,0x10
c0021a2a:	83 fb 04             	cmp    ebx,0x4
c0021a2d:	7e 10                	jle    c0021a3f <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021a2f:	83 ec 0c             	sub    esp,0xc
c0021a32:	68 10 7b 02 c0       	push   0xc0027b10
c0021a37:	e8 ed 37 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0021a3c:	83 c4 10             	add    esp,0x10
c0021a3f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021a43:	31 ed                	xor    ebp,ebp
c0021a45:	b9 03 00 00 00       	mov    ecx,0x3
c0021a4a:	fc                   	cld    
c0021a4b:	89 e8                	mov    eax,ebp
c0021a4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a4f:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021a54:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021a59:	50                   	push   eax
c0021a5a:	6a 00                	push   0x0
c0021a5c:	6a 00                	push   0x0
c0021a5e:	6a 00                	push   0x0
c0021a60:	6a 00                	push   0x0
c0021a62:	6a 02                	push   0x2
c0021a64:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021a68:	50                   	push   eax
c0021a69:	56                   	push   esi
c0021a6a:	e8 9b fa ff ff       	call   c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a6f:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021a73:	89 e8                	mov    eax,ebp
c0021a75:	b9 03 00 00 00       	mov    ecx,0x3
c0021a7a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021a80:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021a84:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021a89:	86 e0                	xchg   al,ah
c0021a8b:	c1 c0 10             	rol    eax,0x10
c0021a8e:	86 e0                	xchg   al,ah
c0021a90:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021a94:	83 c4 1c             	add    esp,0x1c
c0021a97:	53                   	push   ebx
c0021a98:	c1 e3 0b             	shl    ebx,0xb
c0021a9b:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021aa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021aa7:	53                   	push   ebx
c0021aa8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021aac:	50                   	push   eax
c0021aad:	56                   	push   esi
c0021aae:	e8 57 fa ff ff       	call   c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021ab3:	83 c4 20             	add    esp,0x20
c0021ab6:	85 c0                	test   eax,eax
c0021ab8:	74 14                	je     c0021ace <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021aba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021abe:	83 ec 0c             	sub    esp,0xc
c0021ac1:	56                   	push   esi
c0021ac2:	e8 0d fd ff ff       	call   c00217d4 <SATAPI::detectMedia()>
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ace:	83 c4 3c             	add    esp,0x3c
c0021ad1:	5b                   	pop    ebx
c0021ad2:	5e                   	pop    esi
c0021ad3:	5f                   	pop    edi
c0021ad4:	5d                   	pop    ebp
c0021ad5:	c3                   	ret    
c0021ad6:	66 90                	xchg   ax,ax

c0021ad8 <AVX::open(int, int, void*)>:
c0021ad8:	83 ec 0c             	sub    esp,0xc
c0021adb:	e8 6c 11 00 00       	call   c0022c4c <avxInit>
c0021ae0:	b8 00 00 00 00       	mov    eax,0x0
c0021ae5:	83 c4 0c             	add    esp,0xc
c0021ae8:	c3                   	ret    
c0021ae9:	90                   	nop
c0021aea:	66 90                	xchg   ax,ax

c0021aec <AVX::close(int, int, void*)>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	e8 7a 11 00 00       	call   c0022c6e <avxClose>
c0021af4:	b8 00 00 00 00       	mov    eax,0x0
c0021af9:	83 c4 0c             	add    esp,0xc
c0021afc:	c3                   	ret    
c0021afd:	90                   	nop
c0021afe:	66 90                	xchg   ax,ax

c0021b00 <AVX::available()>:
c0021b00:	83 ec 0c             	sub    esp,0xc
c0021b03:	e8 f8 10 00 00       	call   c0022c00 <avxDetect>
c0021b08:	85 c0                	test   eax,eax
c0021b0a:	0f 95 c0             	setne  al
c0021b0d:	83 c4 0c             	add    esp,0xc
c0021b10:	c3                   	ret    
c0021b11:	90                   	nop
c0021b12:	66 90                	xchg   ax,ax

c0021b14 <AVX::save(void*)>:
c0021b14:	83 ec 0c             	sub    esp,0xc
c0021b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b1b:	83 ec 0c             	sub    esp,0xc
c0021b1e:	50                   	push   eax
c0021b1f:	e8 06 11 00 00       	call   c0022c2a <avxSave>
c0021b24:	83 c4 10             	add    esp,0x10
c0021b27:	90                   	nop
c0021b28:	83 c4 0c             	add    esp,0xc
c0021b2b:	c3                   	ret    

c0021b2c <AVX::load(void*)>:
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b33:	83 ec 0c             	sub    esp,0xc
c0021b36:	50                   	push   eax
c0021b37:	e8 ff 10 00 00       	call   c0022c3b <avxLoad>
c0021b3c:	83 c4 10             	add    esp,0x10
c0021b3f:	90                   	nop
c0021b40:	83 c4 0c             	add    esp,0xc
c0021b43:	c3                   	ret    

c0021b44 <AVX::AVX()>:
c0021b44:	83 ec 0c             	sub    esp,0xc
c0021b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4b:	83 ec 08             	sub    esp,0x8
c0021b4e:	68 74 7b 02 c0       	push   0xc0027b74
c0021b53:	50                   	push   eax
c0021b54:	e8 77 d0 fe ff       	call   c000ebd0 <FPU::FPU(char const*)>
c0021b59:	83 c4 10             	add    esp,0x10
c0021b5c:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0021b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b65:	89 10                	mov    DWORD PTR [eax],edx
c0021b67:	90                   	nop
c0021b68:	83 c4 0c             	add    esp,0xc
c0021b6b:	c3                   	ret    

c0021b6c <MMX::available()>:
c0021b6c:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0021b71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b77:	83 e0 20             	and    eax,0x20
c0021b7a:	84 c0                	test   al,al
c0021b7c:	0f 95 c0             	setne  al
c0021b7f:	c3                   	ret    

c0021b80 <MMX::open(int, int, void*)>:
c0021b80:	83 ec 0c             	sub    esp,0xc
c0021b83:	e8 77 11 00 00       	call   c0022cff <x87Init>
c0021b88:	b8 00 00 00 00       	mov    eax,0x0
c0021b8d:	83 c4 0c             	add    esp,0xc
c0021b90:	c3                   	ret    
c0021b91:	90                   	nop
c0021b92:	66 90                	xchg   ax,ax

c0021b94 <MMX::close(int, int, void*)>:
c0021b94:	83 ec 0c             	sub    esp,0xc
c0021b97:	e8 7c 11 00 00       	call   c0022d18 <x87Close>
c0021b9c:	b8 00 00 00 00       	mov    eax,0x0
c0021ba1:	83 c4 0c             	add    esp,0xc
c0021ba4:	c3                   	ret    
c0021ba5:	90                   	nop
c0021ba6:	66 90                	xchg   ax,ax

c0021ba8 <MMX::save(void*)>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021baf:	83 ec 0c             	sub    esp,0xc
c0021bb2:	50                   	push   eax
c0021bb3:	e8 39 11 00 00       	call   c0022cf1 <x87Save>
c0021bb8:	83 c4 10             	add    esp,0x10
c0021bbb:	90                   	nop
c0021bbc:	83 c4 0c             	add    esp,0xc
c0021bbf:	c3                   	ret    

c0021bc0 <MMX::load(void*)>:
c0021bc0:	83 ec 0c             	sub    esp,0xc
c0021bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bc7:	83 ec 0c             	sub    esp,0xc
c0021bca:	50                   	push   eax
c0021bcb:	e8 28 11 00 00       	call   c0022cf8 <x87Load>
c0021bd0:	83 c4 10             	add    esp,0x10
c0021bd3:	90                   	nop
c0021bd4:	83 c4 0c             	add    esp,0xc
c0021bd7:	c3                   	ret    

c0021bd8 <MMX::MMX()>:
c0021bd8:	83 ec 0c             	sub    esp,0xc
c0021bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bdf:	83 ec 08             	sub    esp,0x8
c0021be2:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021be7:	50                   	push   eax
c0021be8:	e8 e3 cf fe ff       	call   c000ebd0 <FPU::FPU(char const*)>
c0021bed:	83 c4 10             	add    esp,0x10
c0021bf0:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf9:	89 10                	mov    DWORD PTR [eax],edx
c0021bfb:	90                   	nop
c0021bfc:	83 c4 0c             	add    esp,0xc
c0021bff:	c3                   	ret    

c0021c00 <SSE::open(int, int, void*)>:
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	e8 b0 10 00 00       	call   c0022cb8 <sseInit>
c0021c08:	b8 00 00 00 00       	mov    eax,0x0
c0021c0d:	83 c4 0c             	add    esp,0xc
c0021c10:	c3                   	ret    
c0021c11:	90                   	nop
c0021c12:	66 90                	xchg   ax,ax

c0021c14 <SSE::close(int, int, void*)>:
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	e8 ac 10 00 00       	call   c0022cc8 <sseClose>
c0021c1c:	b8 00 00 00 00       	mov    eax,0x0
c0021c21:	83 c4 0c             	add    esp,0xc
c0021c24:	c3                   	ret    
c0021c25:	90                   	nop
c0021c26:	66 90                	xchg   ax,ax

c0021c28 <SSE::available()>:
c0021c28:	83 ec 1c             	sub    esp,0x1c
c0021c2b:	e8 60 10 00 00       	call   c0022c90 <absolutelyNoChanceInHell>
c0021c30:	85 c0                	test   eax,eax
c0021c32:	0f 95 c0             	setne  al
c0021c35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021c39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021c3d:	83 c4 1c             	add    esp,0x1c
c0021c40:	c3                   	ret    
c0021c41:	90                   	nop
c0021c42:	66 90                	xchg   ax,ax

c0021c44 <SSE::save(void*)>:
c0021c44:	83 ec 0c             	sub    esp,0xc
c0021c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c4b:	83 ec 0c             	sub    esp,0xc
c0021c4e:	50                   	push   eax
c0021c4f:	e8 54 10 00 00       	call   c0022ca8 <sseSave>
c0021c54:	83 c4 10             	add    esp,0x10
c0021c57:	90                   	nop
c0021c58:	83 c4 0c             	add    esp,0xc
c0021c5b:	c3                   	ret    

c0021c5c <SSE::load(void*)>:
c0021c5c:	83 ec 0c             	sub    esp,0xc
c0021c5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c63:	83 ec 0c             	sub    esp,0xc
c0021c66:	50                   	push   eax
c0021c67:	e8 44 10 00 00       	call   c0022cb0 <sseLoad>
c0021c6c:	83 c4 10             	add    esp,0x10
c0021c6f:	90                   	nop
c0021c70:	83 c4 0c             	add    esp,0xc
c0021c73:	c3                   	ret    

c0021c74 <SSE::SSE()>:
c0021c74:	83 ec 0c             	sub    esp,0xc
c0021c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7b:	83 ec 08             	sub    esp,0x8
c0021c7e:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021c83:	50                   	push   eax
c0021c84:	e8 47 cf fe ff       	call   c000ebd0 <FPU::FPU(char const*)>
c0021c89:	83 c4 10             	add    esp,0x10
c0021c8c:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0021c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c95:	89 10                	mov    DWORD PTR [eax],edx
c0021c97:	90                   	nop
c0021c98:	83 c4 0c             	add    esp,0xc
c0021c9b:	c3                   	ret    

c0021c9c <x87::open(int, int, void*)>:
c0021c9c:	55                   	push   ebp
c0021c9d:	89 e5                	mov    ebp,esp
c0021c9f:	83 ec 08             	sub    esp,0x8
c0021ca2:	e8 58 10 00 00       	call   c0022cff <x87Init>
c0021ca7:	b8 00 00 00 00       	mov    eax,0x0
c0021cac:	c9                   	leave  
c0021cad:	c3                   	ret    

c0021cae <x87::close(int, int, void*)>:
c0021cae:	55                   	push   ebp
c0021caf:	89 e5                	mov    ebp,esp
c0021cb1:	83 ec 08             	sub    esp,0x8
c0021cb4:	e8 5f 10 00 00       	call   c0022d18 <x87Close>
c0021cb9:	b8 00 00 00 00       	mov    eax,0x0
c0021cbe:	c9                   	leave  
c0021cbf:	c3                   	ret    

c0021cc0 <x87::available()>:
c0021cc0:	55                   	push   ebp
c0021cc1:	89 e5                	mov    ebp,esp
c0021cc3:	83 ec 08             	sub    esp,0x8
c0021cc6:	e8 0b 10 00 00       	call   c0022cd6 <x87Detect>
c0021ccb:	85 c0                	test   eax,eax
c0021ccd:	0f 95 c0             	setne  al
c0021cd0:	c9                   	leave  
c0021cd1:	c3                   	ret    

c0021cd2 <x87::save(void*)>:
c0021cd2:	55                   	push   ebp
c0021cd3:	89 e5                	mov    ebp,esp
c0021cd5:	83 ec 08             	sub    esp,0x8
c0021cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cdb:	83 ec 0c             	sub    esp,0xc
c0021cde:	50                   	push   eax
c0021cdf:	e8 0d 10 00 00       	call   c0022cf1 <x87Save>
c0021ce4:	83 c4 10             	add    esp,0x10
c0021ce7:	90                   	nop
c0021ce8:	c9                   	leave  
c0021ce9:	c3                   	ret    

c0021cea <x87::load(void*)>:
c0021cea:	55                   	push   ebp
c0021ceb:	89 e5                	mov    ebp,esp
c0021ced:	83 ec 08             	sub    esp,0x8
c0021cf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cf3:	83 ec 0c             	sub    esp,0xc
c0021cf6:	50                   	push   eax
c0021cf7:	e8 fc 0f 00 00       	call   c0022cf8 <x87Load>
c0021cfc:	83 c4 10             	add    esp,0x10
c0021cff:	90                   	nop
c0021d00:	c9                   	leave  
c0021d01:	c3                   	ret    

c0021d02 <x87::x87()>:
c0021d02:	83 ec 0c             	sub    esp,0xc
c0021d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d09:	83 ec 08             	sub    esp,0x8
c0021d0c:	68 34 7c 02 c0       	push   0xc0027c34
c0021d11:	50                   	push   eax
c0021d12:	e8 b9 ce fe ff       	call   c000ebd0 <FPU::FPU(char const*)>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	ba 44 7c 02 c0       	mov    edx,0xc0027c44
c0021d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d23:	89 10                	mov    DWORD PTR [eax],edx
c0021d25:	90                   	nop
c0021d26:	83 c4 0c             	add    esp,0xc
c0021d29:	c3                   	ret    

c0021d2a <APIC::disable()>:
c0021d2a:	90                   	nop
c0021d2b:	c3                   	ret    

c0021d2c <APIC::close(int, int, void*)>:
c0021d2c:	55                   	push   ebp
c0021d2d:	89 e5                	mov    ebp,esp
c0021d2f:	83 ec 08             	sub    esp,0x8
c0021d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d37:	83 c0 3c             	add    eax,0x3c
c0021d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d3c:	83 ec 0c             	sub    esp,0xc
c0021d3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d42:	ff d0                	call   eax
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	b8 00 00 00 00       	mov    eax,0x0
c0021d4c:	c9                   	leave  
c0021d4d:	c3                   	ret    

c0021d4e <IOAPIC::close(int, int, void*)>:
c0021d4e:	b8 00 00 00 00       	mov    eax,0x0
c0021d53:	c3                   	ret    

c0021d54 <APIC::io_wait()>:
c0021d54:	eb 00                	jmp    c0021d56 <APIC::io_wait()+0x2>
c0021d56:	eb 00                	jmp    c0021d58 <APIC::io_wait()+0x4>
c0021d58:	90                   	nop
c0021d59:	c3                   	ret    

c0021d5a <APIC::getBase()>:
c0021d5a:	55                   	push   ebp
c0021d5b:	89 e5                	mov    ebp,esp
c0021d5d:	83 ec 18             	sub    esp,0x18
c0021d60:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0021d65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021d6b:	83 e0 08             	and    eax,0x8
c0021d6e:	84 c0                	test   al,al
c0021d70:	75 07                	jne    c0021d79 <APIC::getBase()+0x1f>
c0021d72:	b8 00 00 00 00       	mov    eax,0x0
c0021d77:	eb 21                	jmp    c0021d9a <APIC::getBase()+0x40>
c0021d79:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0021d7e:	83 ec 08             	sub    esp,0x8
c0021d81:	6a 1b                	push   0x1b
c0021d83:	50                   	push   eax
c0021d84:	e8 f5 74 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021d8f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021d92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021d9a:	c9                   	leave  
c0021d9b:	c3                   	ret    

c0021d9c <APIC::eoi(unsigned char)>:
c0021d9c:	55                   	push   ebp
c0021d9d:	89 e5                	mov    ebp,esp
c0021d9f:	83 ec 28             	sub    esp,0x28
c0021da2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021da5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021da8:	83 ec 0c             	sub    esp,0xc
c0021dab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dae:	e8 a7 ff ff ff       	call   c0021d5a <APIC::getBase()>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	05 b0 00 00 00       	add    eax,0xb0
c0021dbb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021dbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021dc1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021dc7:	90                   	nop
c0021dc8:	c9                   	leave  
c0021dc9:	c3                   	ret    

c0021dca <APIC::open(int, int, void*)>:
c0021dca:	55                   	push   ebp
c0021dcb:	89 e5                	mov    ebp,esp
c0021dcd:	57                   	push   edi
c0021dce:	56                   	push   esi
c0021dcf:	53                   	push   ebx
c0021dd0:	83 ec 2c             	sub    esp,0x2c
c0021dd3:	83 ec 0c             	sub    esp,0xc
c0021dd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dd9:	e8 7c ff ff ff       	call   c0021d5a <APIC::getBase()>
c0021dde:	83 c4 10             	add    esp,0x10
c0021de1:	89 c2                	mov    edx,eax
c0021de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021de6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021dec:	0f b6 f8             	movzx  edi,al
c0021def:	89 d0                	mov    eax,edx
c0021df1:	ba 00 00 00 00       	mov    edx,0x0
c0021df6:	89 c1                	mov    ecx,eax
c0021df8:	80 e5 ff             	and    ch,0xff
c0021dfb:	89 cb                	mov    ebx,ecx
c0021dfd:	0f b6 f2             	movzx  esi,dl
c0021e00:	89 d8                	mov    eax,ebx
c0021e02:	89 f2                	mov    edx,esi
c0021e04:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021e07:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e0a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e0e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e12:	83 e0 00             	and    eax,0x0
c0021e15:	09 d0                	or     eax,edx
c0021e17:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e1e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e24:	8d 50 01             	lea    edx,[eax+0x1]
c0021e27:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021e2a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021e30:	0f b6 d0             	movzx  edx,al
c0021e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e36:	83 c2 08             	add    edx,0x8
c0021e39:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021e3d:	0f b6 c9             	movzx  ecx,cl
c0021e40:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021e46:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e4a:	83 ec 0c             	sub    esp,0xc
c0021e4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e50:	e8 05 ff ff ff       	call   c0021d5a <APIC::getBase()>
c0021e55:	83 c4 10             	add    esp,0x10
c0021e58:	05 f0 00 00 00       	add    eax,0xf0
c0021e5d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021e60:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021e68:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021e6f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021e76:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e79:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e7c:	89 10                	mov    DWORD PTR [eax],edx
c0021e7e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021e85:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c0021e8a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021e8d:	7d 7c                	jge    c0021f0b <APIC::open(int, int, void*)+0x141>
c0021e8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e92:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0021e99:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021e9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e9f:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0021ea6:	c1 e8 08             	shr    eax,0x8
c0021ea9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021ead:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021eb0:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0021eb7:	c1 e8 18             	shr    eax,0x18
c0021eba:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021ebd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021ec1:	75 40                	jne    c0021f03 <APIC::open(int, int, void*)+0x139>
c0021ec3:	83 ec 0c             	sub    esp,0xc
c0021ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ec9:	e8 8c fe ff ff       	call   c0021d5a <APIC::getBase()>
c0021ece:	83 c4 10             	add    esp,0x10
c0021ed1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021ed5:	75 07                	jne    c0021ede <APIC::open(int, int, void*)+0x114>
c0021ed7:	ba 60 03 00 00       	mov    edx,0x360
c0021edc:	eb 05                	jmp    c0021ee3 <APIC::open(int, int, void*)+0x119>
c0021ede:	ba 50 03 00 00       	mov    edx,0x350
c0021ee3:	01 d0                	add    eax,edx
c0021ee5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021ee8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021eeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eed:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021ef0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021ef7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021efb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021efe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021f01:	89 10                	mov    DWORD PTR [eax],edx
c0021f03:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021f06:	e9 7a ff ff ff       	jmp    c0021e85 <APIC::open(int, int, void*)+0xbb>
c0021f0b:	b8 00 00 00 00       	mov    eax,0x0
c0021f10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021f13:	5b                   	pop    ebx
c0021f14:	5e                   	pop    esi
c0021f15:	5f                   	pop    edi
c0021f16:	5d                   	pop    ebp
c0021f17:	c3                   	ret    

c0021f18 <IOAPIC::IOAPIC()>:
c0021f18:	83 ec 0c             	sub    esp,0xc
c0021f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1f:	83 ec 08             	sub    esp,0x8
c0021f22:	68 74 7c 02 c0       	push   0xc0027c74
c0021f27:	50                   	push   eax
c0021f28:	e8 91 c9 fe ff       	call   c000e8be <Device::Device(char const*)>
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	ba 9c 7d 02 c0       	mov    edx,0xc0027d9c
c0021f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f39:	89 10                	mov    DWORD PTR [eax],edx
c0021f3b:	90                   	nop
c0021f3c:	83 c4 0c             	add    esp,0xc
c0021f3f:	c3                   	ret    

c0021f40 <APIC::APIC()>:
c0021f40:	53                   	push   ebx
c0021f41:	83 ec 18             	sub    esp,0x18
c0021f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f48:	83 ec 08             	sub    esp,0x8
c0021f4b:	68 7c 7c 02 c0       	push   0xc0027c7c
c0021f50:	50                   	push   eax
c0021f51:	e8 f8 d0 fe ff       	call   c000f04e <InterruptController::InterruptController(char const*)>
c0021f56:	83 c4 10             	add    esp,0x10
c0021f59:	ba 54 7d 02 c0       	mov    edx,0xc0027d54
c0021f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f62:	89 10                	mov    DWORD PTR [eax],edx
c0021f64:	a0 e0 ab 02 c0       	mov    al,ds:0xc002abe0
c0021f69:	83 f0 01             	xor    eax,0x1
c0021f6c:	84 c0                	test   al,al
c0021f6e:	0f 84 a1 00 00 00    	je     c0022015 <APIC::APIC()+0xd5>
c0021f74:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021f79:	a0 60 95 02 c0       	mov    al,ds:0xc0029560
c0021f7e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021f82:	0f 83 86 00 00 00    	jae    c002200e <APIC::APIC()+0xce>
c0021f88:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021f90:	83 ec 0c             	sub    esp,0xc
c0021f93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f97:	e8 4b 7e fe ff       	call   c0009de7 <malloc>
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	89 c3                	mov    ebx,eax
c0021fa1:	83 ec 0c             	sub    esp,0xc
c0021fa4:	53                   	push   ebx
c0021fa5:	e8 6e ff ff ff       	call   c0021f18 <IOAPIC::IOAPIC()>
c0021faa:	83 c4 10             	add    esp,0x10
c0021fad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021fb1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021fb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fba:	89 14 85 c0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5440],edx
c0021fc1:	a1 a0 ab 02 c0       	mov    eax,ds:0xc002aba0
c0021fc6:	40                   	inc    eax
c0021fc7:	a3 a0 ab 02 c0       	mov    ds:0xc002aba0,eax
c0021fcc:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0021fd1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021fd7:	83 ec 08             	sub    esp,0x8
c0021fda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021fde:	50                   	push   eax
c0021fdf:	e8 d6 c6 fe ff       	call   c000e6ba <Device::addChild(Device*)>
c0021fe4:	83 c4 10             	add    esp,0x10
c0021fe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fed:	83 c0 08             	add    eax,0x8
c0021ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ff2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021ff7:	6a 00                	push   0x0
c0021ff9:	6a 00                	push   0x0
c0021ffb:	52                   	push   edx
c0021ffc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022000:	ff d0                	call   eax
c0022002:	83 c4 10             	add    esp,0x10
c0022005:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022009:	e9 6b ff ff ff       	jmp    c0021f79 <APIC::APIC()+0x39>
c002200e:	c6 05 e0 ab 02 c0 01 	mov    BYTE PTR ds:0xc002abe0,0x1
c0022015:	90                   	nop
c0022016:	83 c4 18             	add    esp,0x18
c0022019:	5b                   	pop    ebx
c002201a:	c3                   	ret    
c002201b:	90                   	nop

c002201c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002201c:	55                   	push   ebp
c002201d:	89 e5                	mov    ebp,esp
c002201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022028:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002202b:	72 1d                	jb     c002204a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002202d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022030:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022039:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002203f:	01 d0                	add    eax,edx
c0022041:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022044:	73 04                	jae    c002204a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022046:	b0 01                	mov    al,0x1
c0022048:	eb 02                	jmp    c002204c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002204a:	b0 00                	mov    al,0x0
c002204c:	5d                   	pop    ebp
c002204d:	c3                   	ret    

c002204e <IOAPIC::read(int)>:
c002204e:	55                   	push   ebp
c002204f:	89 e5                	mov    ebp,esp
c0022051:	83 ec 10             	sub    esp,0x10
c0022054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022057:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002205d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022060:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022063:	0f b6 d0             	movzx  edx,al
c0022066:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022069:	89 10                	mov    DWORD PTR [eax],edx
c002206b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002206e:	83 c0 10             	add    eax,0x10
c0022071:	8b 00                	mov    eax,DWORD PTR [eax]
c0022073:	c9                   	leave  
c0022074:	c3                   	ret    
c0022075:	90                   	nop

c0022076 <IOAPIC::open(int, int, void*)>:
c0022076:	55                   	push   ebp
c0022077:	89 e5                	mov    ebp,esp
c0022079:	57                   	push   edi
c002207a:	56                   	push   esi
c002207b:	53                   	push   ebx
c002207c:	83 ec 0c             	sub    esp,0xc
c002207f:	83 ec 0c             	sub    esp,0xc
c0022082:	68 a7 7c 02 c0       	push   0xc0027ca7
c0022087:	e8 bd b0 fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c002208c:	83 c4 10             	add    esp,0x10
c002208f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022092:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022095:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002209b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002209e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00220a4:	8b 14 85 a0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a60]
c00220ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00220b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00220bd:	8b 14 85 20 96 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd69e0]
c00220c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220c7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00220cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00220d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220df:	0f b6 f8             	movzx  edi,al
c00220e2:	89 d0                	mov    eax,edx
c00220e4:	ba 00 00 00 00       	mov    edx,0x0
c00220e9:	89 c1                	mov    ecx,eax
c00220eb:	80 e5 ff             	and    ch,0xff
c00220ee:	89 cb                	mov    ebx,ecx
c00220f0:	0f b6 f2             	movzx  esi,dl
c00220f3:	89 d8                	mov    eax,ebx
c00220f5:	89 f2                	mov    edx,esi
c00220f7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220fa:	8d 5f 08             	lea    ebx,[edi+0x8]
c00220fd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022101:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022105:	83 e0 00             	and    eax,0x0
c0022108:	09 d0                	or     eax,edx
c002210a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002210e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022111:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022117:	8d 50 01             	lea    edx,[eax+0x1]
c002211a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002211d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022123:	0f b6 d0             	movzx  edx,al
c0022126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022129:	83 c2 08             	add    edx,0x8
c002212c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022130:	0f b6 c9             	movzx  ecx,cl
c0022133:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022139:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002213d:	83 ec 08             	sub    esp,0x8
c0022140:	6a 01                	push   0x1
c0022142:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022145:	e8 04 ff ff ff       	call   c002204e <IOAPIC::read(int)>
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	c1 f8 10             	sar    eax,0x10
c0022150:	0f b6 c0             	movzx  eax,al
c0022153:	8d 50 01             	lea    edx,[eax+0x1]
c0022156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022159:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002215f:	b8 00 00 00 00       	mov    eax,0x0
c0022164:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022167:	5b                   	pop    ebx
c0022168:	5e                   	pop    esi
c0022169:	5f                   	pop    edi
c002216a:	5d                   	pop    ebp
c002216b:	c3                   	ret    

c002216c <IOAPIC::write(int, int)>:
c002216c:	55                   	push   ebp
c002216d:	89 e5                	mov    ebp,esp
c002216f:	83 ec 10             	sub    esp,0x10
c0022172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022175:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002217b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002217e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022181:	0f b6 d0             	movzx  edx,al
c0022184:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022187:	89 10                	mov    DWORD PTR [eax],edx
c0022189:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002218c:	8d 50 10             	lea    edx,[eax+0x10]
c002218f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022192:	89 02                	mov    DWORD PTR [edx],eax
c0022194:	90                   	nop
c0022195:	c9                   	leave  
c0022196:	c3                   	ret    
c0022197:	90                   	nop

c0022198 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022198:	55                   	push   ebp
c0022199:	89 e5                	mov    ebp,esp
c002219b:	53                   	push   ebx
c002219c:	83 ec 2c             	sub    esp,0x2c
c002219f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221a2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00221a5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00221a8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00221ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00221ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00221b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00221b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00221b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00221ba:	88 d8                	mov    al,bl
c00221bc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00221bf:	88 c8                	mov    al,cl
c00221c1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00221c4:	88 d0                	mov    al,dl
c00221c6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00221c9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00221cd:	83 c0 08             	add    eax,0x8
c00221d0:	01 c0                	add    eax,eax
c00221d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00221d5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00221d9:	83 c0 08             	add    eax,0x8
c00221dc:	01 c0                	add    eax,eax
c00221de:	40                   	inc    eax
c00221df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00221e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00221e5:	50                   	push   eax
c00221e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221e9:	e8 60 fe ff ff       	call   c002204e <IOAPIC::read(int)>
c00221ee:	83 c4 08             	add    esp,0x8
c00221f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00221f4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00221fb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00221fe:	c1 e0 18             	shl    eax,0x18
c0022201:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022204:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022207:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002220a:	52                   	push   edx
c002220b:	50                   	push   eax
c002220c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002220f:	e8 58 ff ff ff       	call   c002216c <IOAPIC::write(int, int)>
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002221a:	50                   	push   eax
c002221b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002221e:	e8 2b fe ff ff       	call   c002204e <IOAPIC::read(int)>
c0022223:	83 c4 08             	add    esp,0x8
c0022226:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022229:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022230:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022237:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002223e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022242:	74 09                	je     c002224d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022244:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002224b:	eb 07                	jmp    c0022254 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002224d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022254:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022258:	74 09                	je     c0022263 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002225a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022261:	eb 07                	jmp    c002226a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022263:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002226a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022271:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022275:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022278:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002227b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002227e:	52                   	push   edx
c002227f:	50                   	push   eax
c0022280:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022283:	e8 e4 fe ff ff       	call   c002216c <IOAPIC::write(int, int)>
c0022288:	83 c4 0c             	add    esp,0xc
c002228b:	90                   	nop
c002228c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002228f:	c9                   	leave  
c0022290:	c3                   	ret    
c0022291:	90                   	nop

c0022292 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022292:	55                   	push   ebp
c0022293:	89 e5                	mov    ebp,esp
c0022295:	57                   	push   edi
c0022296:	56                   	push   esi
c0022297:	53                   	push   ebx
c0022298:	83 ec 2c             	sub    esp,0x2c
c002229b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002229e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00222a1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00222a5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00222a9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00222ad:	74 5a                	je     c0022309 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222af:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00222b3:	7f 44                	jg     c00222f9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00222b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222b8:	05 40 83 02 c0       	add    eax,0xc0028340
c00222bd:	8a 00                	mov    al,BYTE PTR [eax]
c00222bf:	0f b6 c0             	movzx  eax,al
c00222c2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00222c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222c8:	66 8b 84 00 40 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6ac0]
c00222d0:	0f b7 c0             	movzx  eax,ax
c00222d3:	83 e0 02             	and    eax,0x2
c00222d6:	85 c0                	test   eax,eax
c00222d8:	74 04                	je     c00222de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00222da:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00222de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222e1:	66 8b 84 00 40 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6ac0]
c00222e9:	0f b7 c0             	movzx  eax,ax
c00222ec:	83 e0 08             	and    eax,0x8
c00222ef:	85 c0                	test   eax,eax
c00222f1:	74 16                	je     c0022309 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222f3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00222f7:	eb 10                	jmp    c0022309 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222f9:	83 ec 0c             	sub    esp,0xc
c00222fc:	68 b8 7c 02 c0       	push   0xc0027cb8
c0022301:	e8 23 2f ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0022306:	83 c4 10             	add    esp,0x10
c0022309:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002230d:	a1 a0 ab 02 c0       	mov    eax,ds:0xc002aba0
c0022312:	83 ec 08             	sub    esp,0x8
c0022315:	50                   	push   eax
c0022316:	68 f0 7c 02 c0       	push   0xc0027cf0
c002231b:	e8 29 ae fe ff       	call   c000d149 <Dbg::kprintf(char const*, ...)>
c0022320:	83 c4 10             	add    esp,0x10
c0022323:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002232a:	a1 a0 ab 02 c0       	mov    eax,ds:0xc002aba0
c002232f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022332:	7d 67                	jge    c002239b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022334:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022337:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c002233e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022341:	83 ec 08             	sub    esp,0x8
c0022344:	52                   	push   edx
c0022345:	50                   	push   eax
c0022346:	e8 d1 fc ff ff       	call   c002201c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002234b:	83 c4 10             	add    esp,0x10
c002234e:	84 c0                	test   al,al
c0022350:	74 44                	je     c0022396 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022352:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022355:	8b 1c 85 c0 ab 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5440]
c002235c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022360:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022363:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022367:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002236a:	83 c0 20             	add    eax,0x20
c002236d:	0f b6 f0             	movzx  esi,al
c0022370:	b8 00 00 00 00       	mov    eax,0x0
c0022375:	99                   	cdq    
c0022376:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022379:	0f b6 c9             	movzx  ecx,cl
c002237c:	83 ec 04             	sub    esp,0x4
c002237f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022382:	57                   	push   edi
c0022383:	56                   	push   esi
c0022384:	52                   	push   edx
c0022385:	50                   	push   eax
c0022386:	51                   	push   ecx
c0022387:	53                   	push   ebx
c0022388:	e8 0b fe ff ff       	call   c0022198 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002238d:	83 c4 20             	add    esp,0x20
c0022390:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022394:	eb 05                	jmp    c002239b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022396:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022399:	eb 8f                	jmp    c002232a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002239b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002239e:	83 f0 01             	xor    eax,0x1
c00223a1:	84 c0                	test   al,al
c00223a3:	74 10                	je     c00223b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00223a5:	83 ec 0c             	sub    esp,0xc
c00223a8:	68 07 7d 02 c0       	push   0xc0027d07
c00223ad:	e8 77 2e ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00223b2:	83 c4 10             	add    esp,0x10
c00223b5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00223b9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00223c0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00223c4:	7f 65                	jg     c002242b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00223c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223cc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223d3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223d6:	01 ca                	add    edx,ecx
c00223d8:	83 c2 54             	add    edx,0x54
c00223db:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00223df:	85 c0                	test   eax,eax
c00223e1:	75 43                	jne    c0022426 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00223e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223f0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223f3:	01 ca                	add    edx,ecx
c00223f5:	8d 4a 54             	lea    ecx,[edx+0x54]
c00223f8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00223fb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022402:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022405:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002240c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002240f:	01 ca                	add    edx,ecx
c0022411:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022417:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002241a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002241e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022421:	83 e8 20             	sub    eax,0x20
c0022424:	eb 1a                	jmp    c0022440 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022426:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022429:	eb 95                	jmp    c00223c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002242b:	83 ec 0c             	sub    esp,0xc
c002242e:	68 14 7d 02 c0       	push   0xc0027d14
c0022433:	e8 f1 2d ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0022438:	83 c4 10             	add    esp,0x10
c002243b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022440:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022443:	5b                   	pop    ebx
c0022444:	5e                   	pop    esi
c0022445:	5f                   	pop    edi
c0022446:	5d                   	pop    ebp
c0022447:	c3                   	ret    

c0022448 <PIC::disable()>:
c0022448:	55                   	push   ebp
c0022449:	89 e5                	mov    ebp,esp
c002244b:	83 ec 10             	sub    esp,0x10
c002244e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022454:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022458:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002245b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002245f:	ee                   	out    dx,al
c0022460:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022466:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002246a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002246d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022471:	ee                   	out    dx,al
c0022472:	90                   	nop
c0022473:	c9                   	leave  
c0022474:	c3                   	ret    
c0022475:	90                   	nop

c0022476 <PIC::close(int, int, void*)>:
c0022476:	55                   	push   ebp
c0022477:	89 e5                	mov    ebp,esp
c0022479:	83 ec 08             	sub    esp,0x8
c002247c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002247f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022481:	83 c0 3c             	add    eax,0x3c
c0022484:	8b 00                	mov    eax,DWORD PTR [eax]
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002248c:	ff d0                	call   eax
c002248e:	83 c4 10             	add    esp,0x10
c0022491:	b8 00 00 00 00       	mov    eax,0x0
c0022496:	c9                   	leave  
c0022497:	c3                   	ret    

c0022498 <PIC::PIC()>:
c0022498:	83 ec 0c             	sub    esp,0xc
c002249b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249f:	83 ec 08             	sub    esp,0x8
c00224a2:	68 c0 7d 02 c0       	push   0xc0027dc0
c00224a7:	50                   	push   eax
c00224a8:	e8 a1 cb fe ff       	call   c000f04e <InterruptController::InterruptController(char const*)>
c00224ad:	83 c4 10             	add    esp,0x10
c00224b0:	ba ec 7d 02 c0       	mov    edx,0xc0027dec
c00224b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b9:	89 10                	mov    DWORD PTR [eax],edx
c00224bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224c5:	0f b6 d0             	movzx  edx,al
c00224c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00224d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224dd:	0f b6 d0             	movzx  edx,al
c00224e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224f3:	8d 50 01             	lea    edx,[eax+0x1]
c00224f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022500:	0f b6 d0             	movzx  edx,al
c0022503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022507:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002250b:	83 e1 3f             	and    ecx,0x3f
c002250e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022516:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002251c:	0f b6 d0             	movzx  edx,al
c002251f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022523:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022534:	0f b6 d0             	movzx  edx,al
c0022537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022544:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002254a:	8d 50 01             	lea    edx,[eax+0x1]
c002254d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022551:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022557:	0f b6 d0             	movzx  edx,al
c002255a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022562:	83 e1 3f             	and    ecx,0x3f
c0022565:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022569:	90                   	nop
c002256a:	83 c4 0c             	add    esp,0xc
c002256d:	c3                   	ret    

c002256e <PIC::ioWait()>:
c002256e:	eb 00                	jmp    c0022570 <PIC::ioWait()+0x2>
c0022570:	eb 00                	jmp    c0022572 <PIC::ioWait()+0x4>
c0022572:	90                   	nop
c0022573:	c3                   	ret    

c0022574 <PIC::getIRQReg(int)>:
c0022574:	55                   	push   ebp
c0022575:	89 e5                	mov    ebp,esp
c0022577:	83 ec 10             	sub    esp,0x10
c002257a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002257d:	0f b6 c0             	movzx  eax,al
c0022580:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022586:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022589:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002258c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022590:	ee                   	out    dx,al
c0022591:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022594:	0f b6 c0             	movzx  eax,al
c0022597:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002259d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00225a0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00225a3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00225a7:	ee                   	out    dx,al
c00225a8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00225ae:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00225b2:	89 c2                	mov    edx,eax
c00225b4:	ec                   	in     al,dx
c00225b5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00225b8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00225bb:	0f b6 c0             	movzx  eax,al
c00225be:	c1 e0 08             	shl    eax,0x8
c00225c1:	89 c1                	mov    ecx,eax
c00225c3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00225c9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00225cd:	89 c2                	mov    edx,eax
c00225cf:	ec                   	in     al,dx
c00225d0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00225d3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00225d6:	0f b6 c0             	movzx  eax,al
c00225d9:	09 c8                	or     eax,ecx
c00225db:	c9                   	leave  
c00225dc:	c3                   	ret    
c00225dd:	90                   	nop

c00225de <PIC::eoi(unsigned char)>:
c00225de:	55                   	push   ebp
c00225df:	89 e5                	mov    ebp,esp
c00225e1:	83 ec 14             	sub    esp,0x14
c00225e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225e7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225ea:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225ee:	75 1e                	jne    c002260e <PIC::eoi(unsigned char)+0x30>
c00225f0:	6a 0b                	push   0xb
c00225f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225f5:	e8 7a ff ff ff       	call   c0022574 <PIC::getIRQReg(int)>
c00225fa:	83 c4 08             	add    esp,0x8
c00225fd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022601:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022605:	25 80 00 00 00       	and    eax,0x80
c002260a:	85 c0                	test   eax,eax
c002260c:	74 5f                	je     c002266d <PIC::eoi(unsigned char)+0x8f>
c002260e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022612:	75 2d                	jne    c0022641 <PIC::eoi(unsigned char)+0x63>
c0022614:	6a 0b                	push   0xb
c0022616:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022619:	e8 56 ff ff ff       	call   c0022574 <PIC::getIRQReg(int)>
c002261e:	83 c4 08             	add    esp,0x8
c0022621:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022625:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022628:	66 85 c0             	test   ax,ax
c002262b:	78 14                	js     c0022641 <PIC::eoi(unsigned char)+0x63>
c002262d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022633:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022637:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002263a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002263e:	ee                   	out    dx,al
c002263f:	eb 2d                	jmp    c002266e <PIC::eoi(unsigned char)+0x90>
c0022641:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022645:	76 12                	jbe    c0022659 <PIC::eoi(unsigned char)+0x7b>
c0022647:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002264d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022651:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022654:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022658:	ee                   	out    dx,al
c0022659:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002265f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022663:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022666:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002266a:	ee                   	out    dx,al
c002266b:	eb 01                	jmp    c002266e <PIC::eoi(unsigned char)+0x90>
c002266d:	90                   	nop
c002266e:	c9                   	leave  
c002266f:	c3                   	ret    

c0022670 <PIC::remap()>:
c0022670:	55                   	push   ebp
c0022671:	89 e5                	mov    ebp,esp
c0022673:	83 ec 48             	sub    esp,0x48
c0022676:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002267d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022684:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002268a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002268d:	89 c2                	mov    edx,eax
c002268f:	ec                   	in     al,dx
c0022690:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022693:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022696:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022699:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002269f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00226a2:	89 c2                	mov    edx,eax
c00226a4:	ec                   	in     al,dx
c00226a5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00226a8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00226ab:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00226ae:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00226b4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00226b8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00226bb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00226be:	ee                   	out    dx,al
c00226bf:	83 ec 0c             	sub    esp,0xc
c00226c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226c5:	e8 a4 fe ff ff       	call   c002256e <PIC::ioWait()>
c00226ca:	83 c4 10             	add    esp,0x10
c00226cd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00226d3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00226d7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00226da:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00226dd:	ee                   	out    dx,al
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226e4:	e8 85 fe ff ff       	call   c002256e <PIC::ioWait()>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00226ef:	0f b6 c0             	movzx  eax,al
c00226f2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00226f8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00226fb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00226fe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022701:	ee                   	out    dx,al
c0022702:	83 ec 0c             	sub    esp,0xc
c0022705:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022708:	e8 61 fe ff ff       	call   c002256e <PIC::ioWait()>
c002270d:	83 c4 10             	add    esp,0x10
c0022710:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022713:	0f b6 c0             	movzx  eax,al
c0022716:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002271c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002271f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022722:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022725:	ee                   	out    dx,al
c0022726:	83 ec 0c             	sub    esp,0xc
c0022729:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002272c:	e8 3d fe ff ff       	call   c002256e <PIC::ioWait()>
c0022731:	83 c4 10             	add    esp,0x10
c0022734:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002273a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002273e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022741:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022744:	ee                   	out    dx,al
c0022745:	83 ec 0c             	sub    esp,0xc
c0022748:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002274b:	e8 1e fe ff ff       	call   c002256e <PIC::ioWait()>
c0022750:	83 c4 10             	add    esp,0x10
c0022753:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022759:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002275d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022760:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022763:	ee                   	out    dx,al
c0022764:	83 ec 0c             	sub    esp,0xc
c0022767:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002276a:	e8 ff fd ff ff       	call   c002256e <PIC::ioWait()>
c002276f:	83 c4 10             	add    esp,0x10
c0022772:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022778:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002277c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002277f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022782:	ee                   	out    dx,al
c0022783:	83 ec 0c             	sub    esp,0xc
c0022786:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022789:	e8 e0 fd ff ff       	call   c002256e <PIC::ioWait()>
c002278e:	83 c4 10             	add    esp,0x10
c0022791:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022797:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002279b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002279e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00227a1:	ee                   	out    dx,al
c00227a2:	83 ec 0c             	sub    esp,0xc
c00227a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227a8:	e8 c1 fd ff ff       	call   c002256e <PIC::ioWait()>
c00227ad:	83 c4 10             	add    esp,0x10
c00227b0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00227b4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00227ba:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00227bd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00227c0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00227c3:	ee                   	out    dx,al
c00227c4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00227c8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00227ce:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00227d1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00227d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227d7:	ee                   	out    dx,al
c00227d8:	90                   	nop
c00227d9:	c9                   	leave  
c00227da:	c3                   	ret    
c00227db:	90                   	nop

c00227dc <PIC::open(int, int, void*)>:
c00227dc:	55                   	push   ebp
c00227dd:	89 e5                	mov    ebp,esp
c00227df:	83 ec 18             	sub    esp,0x18
c00227e2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00227e8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00227ec:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00227ef:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00227f3:	ee                   	out    dx,al
c00227f4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00227fa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00227fe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022801:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022805:	ee                   	out    dx,al
c0022806:	83 ec 0c             	sub    esp,0xc
c0022809:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002280c:	e8 5f fe ff ff       	call   c0022670 <PIC::remap()>
c0022811:	83 c4 10             	add    esp,0x10
c0022814:	b8 00 00 00 00       	mov    eax,0x0
c0022819:	c9                   	leave  
c002281a:	c3                   	ret    
c002281b:	90                   	nop

c002281c <APICTimer::close(int, int, void*)>:
c002281c:	b8 00 00 00 00       	mov    eax,0x0
c0022821:	c3                   	ret    
c0022822:	66 90                	xchg   ax,ax

c0022824 <apicTimerHandler(regs*, void*)>:
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002282b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002282d:	b8 10 27 00 00       	mov    eax,0x2710
c0022832:	ba 00 00 00 00       	mov    edx,0x0
c0022837:	f7 f1                	div    ecx
c0022839:	83 ec 0c             	sub    esp,0xc
c002283c:	50                   	push   eax
c002283d:	e8 3b e8 fe ff       	call   c001107d <timerHandler(unsigned int)>
c0022842:	83 c4 10             	add    esp,0x10
c0022845:	90                   	nop
c0022846:	83 c4 0c             	add    esp,0xc
c0022849:	c3                   	ret    
c002284a:	66 90                	xchg   ax,ax

c002284c <APICTimer::write(int)>:
c002284c:	83 ec 1c             	sub    esp,0x1c
c002284f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022853:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022857:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002285d:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0022862:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022868:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002286e:	83 ec 0c             	sub    esp,0xc
c0022871:	50                   	push   eax
c0022872:	e8 e3 f4 ff ff       	call   c0021d5a <APIC::getBase()>
c0022877:	83 c4 10             	add    esp,0x10
c002287a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002287e:	a1 6c 92 02 c0       	mov    eax,ds:0xc002926c
c0022883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002288b:	05 e0 03 00 00       	add    eax,0x3e0
c0022890:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002289a:	05 80 03 00 00       	add    eax,0x380
c002289f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00228a5:	fb                   	sti    
c00228a6:	66 90                	xchg   ax,ax
c00228a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228ac:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00228b2:	a1 6c 92 02 c0       	mov    eax,ds:0xc002926c
c00228b7:	39 c2                	cmp    edx,eax
c00228b9:	76 05                	jbe    c00228c0 <APICTimer::write(int)+0x74>
c00228bb:	eb eb                	jmp    c00228a8 <APICTimer::write(int)+0x5c>
c00228bd:	8d 76 00             	lea    esi,[esi+0x0]
c00228c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228c4:	05 20 03 00 00       	add    eax,0x320
c00228c9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00228cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228d3:	05 90 03 00 00       	add    eax,0x390
c00228d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228da:	f7 d0                	not    eax
c00228dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00228e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00228e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228e8:	ba 00 00 00 00       	mov    edx,0x0
c00228ed:	f7 f1                	div    ecx
c00228ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00228f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00228fc:	0d 00 00 02 00       	or     eax,0x20000
c0022901:	89 c2                	mov    edx,eax
c0022903:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022907:	05 20 03 00 00       	add    eax,0x320
c002290c:	89 10                	mov    DWORD PTR [eax],edx
c002290e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022912:	05 e0 03 00 00       	add    eax,0x3e0
c0022917:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002291d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022921:	05 80 03 00 00       	add    eax,0x380
c0022926:	89 c2                	mov    edx,eax
c0022928:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002292b:	89 02                	mov    DWORD PTR [edx],eax
c002292d:	90                   	nop
c002292e:	83 c4 1c             	add    esp,0x1c
c0022931:	c3                   	ret    
c0022932:	66 90                	xchg   ax,ax

c0022934 <APICTimer::open(int, int, void*)>:
c0022934:	57                   	push   edi
c0022935:	56                   	push   esi
c0022936:	53                   	push   ebx
c0022937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293b:	8b 00                	mov    eax,DWORD PTR [eax]
c002293d:	83 c0 24             	add    eax,0x24
c0022940:	8b 00                	mov    eax,DWORD PTR [eax]
c0022942:	83 ec 08             	sub    esp,0x8
c0022945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002294d:	ff d0                	call   eax
c002294f:	83 c4 10             	add    esp,0x10
c0022952:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c0022957:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002295d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022963:	83 ec 0c             	sub    esp,0xc
c0022966:	50                   	push   eax
c0022967:	e8 ee f3 ff ff       	call   c0021d5a <APIC::getBase()>
c002296c:	83 c4 10             	add    esp,0x10
c002296f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022979:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002297f:	0f b6 f8             	movzx  edi,al
c0022982:	89 d0                	mov    eax,edx
c0022984:	ba 00 00 00 00       	mov    edx,0x0
c0022989:	89 c1                	mov    ecx,eax
c002298b:	80 e5 ff             	and    ch,0xff
c002298e:	89 cb                	mov    ebx,ecx
c0022990:	0f b6 f2             	movzx  esi,dl
c0022993:	89 d8                	mov    eax,ebx
c0022995:	89 f2                	mov    edx,esi
c0022997:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002299b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002299e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00229a2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00229a6:	83 e0 00             	and    eax,0x0
c00229a9:	09 d0                	or     eax,edx
c00229ab:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00229af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00229b9:	8d 50 01             	lea    edx,[eax+0x1]
c00229bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229c0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00229c6:	0f b6 d0             	movzx  edx,al
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	83 c2 08             	add    edx,0x8
c00229d0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00229d4:	0f b6 c9             	movzx  ecx,cl
c00229d7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00229dd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00229e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229e9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00229ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229f7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00229fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022a01:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022a07:	83 ec 0c             	sub    esp,0xc
c0022a0a:	51                   	push   ecx
c0022a0b:	6a 01                	push   0x1
c0022a0d:	68 24 28 02 c0       	push   0xc0022824
c0022a12:	52                   	push   edx
c0022a13:	50                   	push   eax
c0022a14:	e8 19 bc fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a19:	83 c4 20             	add    esp,0x20
c0022a1c:	89 c2                	mov    edx,eax
c0022a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a22:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022a28:	b8 00 00 00 00       	mov    eax,0x0
c0022a2d:	5b                   	pop    ebx
c0022a2e:	5e                   	pop    esi
c0022a2f:	5f                   	pop    edi
c0022a30:	c3                   	ret    
c0022a31:	90                   	nop
c0022a32:	66 90                	xchg   ax,ax

c0022a34 <APICTimer::APICTimer()>:
c0022a34:	83 ec 0c             	sub    esp,0xc
c0022a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3b:	83 ec 08             	sub    esp,0x8
c0022a3e:	68 2c 7e 02 c0       	push   0xc0027e2c
c0022a43:	50                   	push   eax
c0022a44:	e8 a3 e5 fe ff       	call   c0010fec <Timer::Timer(char const*)>
c0022a49:	83 c4 10             	add    esp,0x10
c0022a4c:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c0022a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a55:	89 10                	mov    DWORD PTR [eax],edx
c0022a57:	90                   	nop
c0022a58:	83 c4 0c             	add    esp,0xc
c0022a5b:	c3                   	ret    

c0022a5c <PIT::write(int)>:
c0022a5c:	83 ec 10             	sub    esp,0x10
c0022a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022a63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022a67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a71:	a3 e4 ab 02 c0       	mov    ds:0xc002abe4,eax
c0022a76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022a7b:	99                   	cdq    
c0022a7c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022a80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a84:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022a8b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022a90:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022a94:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022a99:	ee                   	out    dx,al
c0022a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a9e:	0f b6 c0             	movzx  eax,al
c0022aa1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022aa8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022aac:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022ab0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022ab5:	ee                   	out    dx,al
c0022ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022aba:	c1 f8 08             	sar    eax,0x8
c0022abd:	0f b6 c0             	movzx  eax,al
c0022ac0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022ac7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022acb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022acf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022ad4:	ee                   	out    dx,al
c0022ad5:	90                   	nop
c0022ad6:	83 c4 10             	add    esp,0x10
c0022ad9:	c3                   	ret    
c0022ada:	66 90                	xchg   ax,ax

c0022adc <pitHandler(regs*, void*)>:
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	8b 0d e4 ab 02 c0    	mov    ecx,DWORD PTR ds:0xc002abe4
c0022ae5:	b8 10 27 00 00       	mov    eax,0x2710
c0022aea:	99                   	cdq    
c0022aeb:	f7 f9                	idiv   ecx
c0022aed:	83 ec 0c             	sub    esp,0xc
c0022af0:	50                   	push   eax
c0022af1:	e8 87 e5 fe ff       	call   c001107d <timerHandler(unsigned int)>
c0022af6:	83 c4 10             	add    esp,0x10
c0022af9:	90                   	nop
c0022afa:	83 c4 0c             	add    esp,0xc
c0022afd:	c3                   	ret    
c0022afe:	66 90                	xchg   ax,ax

c0022b00 <PIT::open(int, int, void*)>:
c0022b00:	83 ec 0c             	sub    esp,0xc
c0022b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b09:	83 c0 24             	add    eax,0x24
c0022b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b0e:	83 ec 08             	sub    esp,0x8
c0022b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b19:	ff d0                	call   eax
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b22:	83 ec 0c             	sub    esp,0xc
c0022b25:	6a 00                	push   0x0
c0022b27:	6a 01                	push   0x1
c0022b29:	68 dc 2a 02 c0       	push   0xc0022adc
c0022b2e:	6a 00                	push   0x0
c0022b30:	50                   	push   eax
c0022b31:	e8 fc ba fe ff       	call   c000e632 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022b36:	83 c4 20             	add    esp,0x20
c0022b39:	89 c2                	mov    edx,eax
c0022b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022b45:	b8 00 00 00 00       	mov    eax,0x0
c0022b4a:	83 c4 0c             	add    esp,0xc
c0022b4d:	c3                   	ret    
c0022b4e:	66 90                	xchg   ax,ax

c0022b50 <PIT::close(int, int, void*)>:
c0022b50:	83 ec 0c             	sub    esp,0xc
c0022b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b57:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b65:	6a 01                	push   0x1
c0022b67:	68 dc 2a 02 c0       	push   0xc0022adc
c0022b6c:	6a 00                	push   0x0
c0022b6e:	50                   	push   eax
c0022b6f:	e8 08 bb fe ff       	call   c000e67c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022b74:	83 c4 10             	add    esp,0x10
c0022b77:	b8 00 00 00 00       	mov    eax,0x0
c0022b7c:	83 c4 0c             	add    esp,0xc
c0022b7f:	c3                   	ret    

c0022b80 <PIT::PIT()>:
c0022b80:	83 ec 0c             	sub    esp,0xc
c0022b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b87:	83 ec 08             	sub    esp,0x8
c0022b8a:	68 68 7e 02 c0       	push   0xc0027e68
c0022b8f:	50                   	push   eax
c0022b90:	e8 57 e4 fe ff       	call   c0010fec <Timer::Timer(char const*)>
c0022b95:	83 c4 10             	add    esp,0x10
c0022b98:	ba 90 7e 02 c0       	mov    edx,0xc0027e90
c0022b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba1:	89 10                	mov    DWORD PTR [eax],edx
c0022ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bad:	0f b6 d0             	movzx  edx,al
c0022bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bc5:	0f b6 d0             	movzx  edx,al
c0022bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0022bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022be2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022be8:	0f b6 d0             	movzx  edx,al
c0022beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022bf3:	83 e1 3f             	and    ecx,0x3f
c0022bf6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022bfa:	90                   	nop
c0022bfb:	83 c4 0c             	add    esp,0xc
c0022bfe:	c3                   	ret    
c0022bff:	90                   	nop

c0022c00 <avxDetect>:
c0022c00:	b8 01 00 00 00       	mov    eax,0x1
c0022c05:	0f a2                	cpuid  
c0022c07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022c0d:	74 15                	je     c0022c24 <avxDetect.noAVX>
c0022c0f:	b8 01 00 00 00       	mov    eax,0x1
c0022c14:	0f a2                	cpuid  
c0022c16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022c1c:	74 06                	je     c0022c24 <avxDetect.noAVX>
c0022c1e:	b8 01 00 00 00       	mov    eax,0x1
c0022c23:	c3                   	ret    

c0022c24 <avxDetect.noAVX>:
c0022c24:	b8 00 00 00 00       	mov    eax,0x0
c0022c29:	c3                   	ret    

c0022c2a <avxSave>:
c0022c2a:	53                   	push   ebx
c0022c2b:	52                   	push   edx
c0022c2c:	31 c0                	xor    eax,eax
c0022c2e:	48                   	dec    eax
c0022c2f:	89 c2                	mov    edx,eax
c0022c31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c35:	0f ae 23             	xsave  [ebx]
c0022c38:	5a                   	pop    edx
c0022c39:	5b                   	pop    ebx
c0022c3a:	c3                   	ret    

c0022c3b <avxLoad>:
c0022c3b:	53                   	push   ebx
c0022c3c:	52                   	push   edx
c0022c3d:	31 c0                	xor    eax,eax
c0022c3f:	48                   	dec    eax
c0022c40:	89 c2                	mov    edx,eax
c0022c42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c46:	0f ae 2b             	xrstor [ebx]
c0022c49:	5a                   	pop    edx
c0022c4a:	5b                   	pop    ebx
c0022c4b:	c3                   	ret    

c0022c4c <avxInit>:
c0022c4c:	e8 67 00 00 00       	call   c0022cb8 <sseInit>
c0022c51:	50                   	push   eax
c0022c52:	51                   	push   ecx
c0022c53:	0f 20 e0             	mov    eax,cr4
c0022c56:	0d 00 00 04 00       	or     eax,0x40000
c0022c5b:	0f 22 e0             	mov    cr4,eax
c0022c5e:	31 c9                	xor    ecx,ecx
c0022c60:	0f 01 d0             	xgetbv 
c0022c63:	0d 07 00 00 00       	or     eax,0x7
c0022c68:	0f 01 d1             	xsetbv 
c0022c6b:	59                   	pop    ecx
c0022c6c:	58                   	pop    eax
c0022c6d:	c3                   	ret    

c0022c6e <avxClose>:
c0022c6e:	c3                   	ret    

c0022c6f <wouldSheSayYes>:
c0022c6f:	c3                   	ret    
c0022c70:	49                   	dec    ecx
c0022c71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022c75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022c79:	75 20                	jne    c0022c9b <absolutelyNoChanceInHell+0xb>
c0022c7b:	4e                   	dec    esi
c0022c7c:	79 61                	jns    c0022cdf <x87Detect+0x9>
c0022c7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022c83:	66 90                	xchg   ax,ax
c0022c85:	66 90                	xchg   ax,ax
c0022c87:	66 90                	xchg   ax,ax
c0022c89:	66 90                	xchg   ax,ax
c0022c8b:	66 90                	xchg   ax,ax
c0022c8d:	66 90                	xchg   ax,ax
c0022c8f:	90                   	nop

c0022c90 <absolutelyNoChanceInHell>:
c0022c90:	b8 01 00 00 00       	mov    eax,0x1
c0022c95:	0f a2                	cpuid  
c0022c97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022c9d:	74 06                	je     c0022ca5 <sseDetect.noSSE>
c0022c9f:	b8 01 00 00 00       	mov    eax,0x1
c0022ca4:	c3                   	ret    

c0022ca5 <sseDetect.noSSE>:
c0022ca5:	31 c0                	xor    eax,eax
c0022ca7:	c3                   	ret    

c0022ca8 <sseSave>:
c0022ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cac:	0f ae 00             	fxsave [eax]
c0022caf:	c3                   	ret    

c0022cb0 <sseLoad>:
c0022cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb4:	0f ae 08             	fxrstor [eax]
c0022cb7:	c3                   	ret    

c0022cb8 <sseInit>:
c0022cb8:	e8 42 00 00 00       	call   c0022cff <x87Init>
c0022cbd:	0f 20 e0             	mov    eax,cr4
c0022cc0:	66 0d 00 06          	or     ax,0x600
c0022cc4:	0f 22 e0             	mov    cr4,eax
c0022cc7:	c3                   	ret    

c0022cc8 <sseClose>:
c0022cc8:	c3                   	ret    
c0022cc9:	66 90                	xchg   ax,ax
c0022ccb:	66 90                	xchg   ax,ax
c0022ccd:	66 90                	xchg   ax,ax
c0022ccf:	90                   	nop

c0022cd0 <value_37F>:
c0022cd0:	7f 03                	jg     c0022cd5 <value_37A+0x1>

c0022cd2 <value_37E>:
c0022cd2:	7e 03                	jle    c0022cd7 <x87Detect+0x1>

c0022cd4 <value_37A>:
c0022cd4:	7a 03                	jp     c0022cd9 <x87Detect+0x3>

c0022cd6 <x87Detect>:
c0022cd6:	b8 01 00 00 00       	mov    eax,0x1
c0022cdb:	0f a2                	cpuid  
c0022cdd:	f7 c2 01 00 00 00    	test   edx,0x1
c0022ce3:	74 06                	je     c0022ceb <x87Detect.nox87>
c0022ce5:	b8 01 00 00 00       	mov    eax,0x1
c0022cea:	c3                   	ret    

c0022ceb <x87Detect.nox87>:
c0022ceb:	b8 00 00 00 00       	mov    eax,0x0
c0022cf0:	c3                   	ret    

c0022cf1 <x87Save>:
c0022cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cf5:	dd 30                	fnsave [eax]
c0022cf7:	c3                   	ret    

c0022cf8 <x87Load>:
c0022cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cfc:	dd 20                	frstor [eax]
c0022cfe:	c3                   	ret    

c0022cff <x87Init>:
c0022cff:	0f 20 c0             	mov    eax,cr0
c0022d02:	66 25 fb ff          	and    ax,0xfffb
c0022d06:	66 0d 22 00          	or     ax,0x22
c0022d0a:	0f 22 c0             	mov    cr0,eax
c0022d0d:	db e3                	fninit 
c0022d0f:	0f 06                	clts   
c0022d11:	d9 2d d4 2c 02 c0    	fldcw  WORD PTR ds:0xc0022cd4
c0022d17:	c3                   	ret    

c0022d18 <x87Close>:
c0022d18:	c3                   	ret    
c0022d19:	66 90                	xchg   ax,ax
c0022d1b:	90                   	nop

c0022d1c <__do_global_ctors_aux>:
c0022d1c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0022d21:	83 f8 ff             	cmp    eax,0xffffffff
c0022d24:	74 1a                	je     c0022d40 <__do_global_ctors_aux+0x24>
c0022d26:	55                   	push   ebp
c0022d27:	89 e5                	mov    ebp,esp
c0022d29:	53                   	push   ebx
c0022d2a:	52                   	push   edx
c0022d2b:	bb b8 3e 02 c0       	mov    ebx,0xc0023eb8
c0022d30:	ff d0                	call   eax
c0022d32:	83 eb 04             	sub    ebx,0x4
c0022d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d37:	83 f8 ff             	cmp    eax,0xffffffff
c0022d3a:	75 f4                	jne    c0022d30 <__do_global_ctors_aux+0x14>
c0022d3c:	58                   	pop    eax
c0022d3d:	5b                   	pop    ebx
c0022d3e:	5d                   	pop    ebp
c0022d3f:	c3                   	ret    
c0022d40:	c3                   	ret    
c0022d41:	66 90                	xchg   ax,ax
c0022d43:	90                   	nop

c0022d44 <__divdi3>:
c0022d44:	55                   	push   ebp
c0022d45:	57                   	push   edi
c0022d46:	56                   	push   esi
c0022d47:	53                   	push   ebx
c0022d48:	83 ec 1c             	sub    esp,0x1c
c0022d4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022d4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d62:	85 db                	test   ebx,ebx
c0022d64:	0f 88 8e 00 00 00    	js     c0022df8 <__divdi3+0xb4>
c0022d6a:	89 dd                	mov    ebp,ebx
c0022d6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022d74:	89 d3                	mov    ebx,edx
c0022d76:	85 d2                	test   edx,edx
c0022d78:	79 0d                	jns    c0022d87 <__divdi3+0x43>
c0022d7a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022d7e:	f7 d8                	neg    eax
c0022d80:	83 d2 00             	adc    edx,0x0
c0022d83:	f7 da                	neg    edx
c0022d85:	89 d3                	mov    ebx,edx
c0022d87:	89 c7                	mov    edi,eax
c0022d89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d8c:	85 db                	test   ebx,ebx
c0022d8e:	75 48                	jne    c0022dd8 <__divdi3+0x94>
c0022d90:	39 ef                	cmp    edi,ebp
c0022d92:	76 24                	jbe    c0022db8 <__divdi3+0x74>
c0022d94:	89 ea                	mov    edx,ebp
c0022d96:	f7 f7                	div    edi
c0022d98:	89 c1                	mov    ecx,eax
c0022d9a:	31 f6                	xor    esi,esi
c0022d9c:	89 c8                	mov    eax,ecx
c0022d9e:	89 f2                	mov    edx,esi
c0022da0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022da4:	85 c9                	test   ecx,ecx
c0022da6:	74 07                	je     c0022daf <__divdi3+0x6b>
c0022da8:	f7 d8                	neg    eax
c0022daa:	83 d2 00             	adc    edx,0x0
c0022dad:	f7 da                	neg    edx
c0022daf:	83 c4 1c             	add    esp,0x1c
c0022db2:	5b                   	pop    ebx
c0022db3:	5e                   	pop    esi
c0022db4:	5f                   	pop    edi
c0022db5:	5d                   	pop    ebp
c0022db6:	c3                   	ret    
c0022db7:	90                   	nop
c0022db8:	85 ff                	test   edi,edi
c0022dba:	75 0b                	jne    c0022dc7 <__divdi3+0x83>
c0022dbc:	b8 01 00 00 00       	mov    eax,0x1
c0022dc1:	31 d2                	xor    edx,edx
c0022dc3:	f7 f3                	div    ebx
c0022dc5:	89 c7                	mov    edi,eax
c0022dc7:	31 d2                	xor    edx,edx
c0022dc9:	89 e8                	mov    eax,ebp
c0022dcb:	f7 f7                	div    edi
c0022dcd:	89 c6                	mov    esi,eax
c0022dcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022dd2:	f7 f7                	div    edi
c0022dd4:	89 c1                	mov    ecx,eax
c0022dd6:	eb c4                	jmp    c0022d9c <__divdi3+0x58>
c0022dd8:	39 eb                	cmp    ebx,ebp
c0022dda:	77 3c                	ja     c0022e18 <__divdi3+0xd4>
c0022ddc:	0f bd f3             	bsr    esi,ebx
c0022ddf:	83 f6 1f             	xor    esi,0x1f
c0022de2:	75 40                	jne    c0022e24 <__divdi3+0xe0>
c0022de4:	39 eb                	cmp    ebx,ebp
c0022de6:	72 09                	jb     c0022df1 <__divdi3+0xad>
c0022de8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022deb:	0f 87 97 00 00 00    	ja     c0022e88 <__divdi3+0x144>
c0022df1:	b9 01 00 00 00       	mov    ecx,0x1
c0022df6:	eb a4                	jmp    c0022d9c <__divdi3+0x58>
c0022df8:	f7 d9                	neg    ecx
c0022dfa:	83 d3 00             	adc    ebx,0x0
c0022dfd:	f7 db                	neg    ebx
c0022dff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022e02:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022e06:	89 dd                	mov    ebp,ebx
c0022e08:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022e10:	e9 5f ff ff ff       	jmp    c0022d74 <__divdi3+0x30>
c0022e15:	8d 76 00             	lea    esi,[esi+0x0]
c0022e18:	31 f6                	xor    esi,esi
c0022e1a:	31 c9                	xor    ecx,ecx
c0022e1c:	e9 7b ff ff ff       	jmp    c0022d9c <__divdi3+0x58>
c0022e21:	8d 76 00             	lea    esi,[esi+0x0]
c0022e24:	b8 20 00 00 00       	mov    eax,0x20
c0022e29:	29 f0                	sub    eax,esi
c0022e2b:	89 f1                	mov    ecx,esi
c0022e2d:	d3 e3                	shl    ebx,cl
c0022e2f:	89 fa                	mov    edx,edi
c0022e31:	88 c1                	mov    cl,al
c0022e33:	d3 ea                	shr    edx,cl
c0022e35:	09 da                	or     edx,ebx
c0022e37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e3b:	89 f1                	mov    ecx,esi
c0022e3d:	d3 e7                	shl    edi,cl
c0022e3f:	89 eb                	mov    ebx,ebp
c0022e41:	88 c1                	mov    cl,al
c0022e43:	d3 eb                	shr    ebx,cl
c0022e45:	89 f1                	mov    ecx,esi
c0022e47:	d3 e5                	shl    ebp,cl
c0022e49:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022e4c:	88 c1                	mov    cl,al
c0022e4e:	d3 ea                	shr    edx,cl
c0022e50:	09 d5                	or     ebp,edx
c0022e52:	89 e8                	mov    eax,ebp
c0022e54:	89 da                	mov    edx,ebx
c0022e56:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022e5a:	89 d3                	mov    ebx,edx
c0022e5c:	89 c5                	mov    ebp,eax
c0022e5e:	f7 e7                	mul    edi
c0022e60:	39 d3                	cmp    ebx,edx
c0022e62:	72 18                	jb     c0022e7c <__divdi3+0x138>
c0022e64:	74 0a                	je     c0022e70 <__divdi3+0x12c>
c0022e66:	89 e9                	mov    ecx,ebp
c0022e68:	31 f6                	xor    esi,esi
c0022e6a:	e9 2d ff ff ff       	jmp    c0022d9c <__divdi3+0x58>
c0022e6f:	90                   	nop
c0022e70:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022e73:	89 f1                	mov    ecx,esi
c0022e75:	d3 e7                	shl    edi,cl
c0022e77:	39 c7                	cmp    edi,eax
c0022e79:	73 eb                	jae    c0022e66 <__divdi3+0x122>
c0022e7b:	90                   	nop
c0022e7c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022e7f:	31 f6                	xor    esi,esi
c0022e81:	e9 16 ff ff ff       	jmp    c0022d9c <__divdi3+0x58>
c0022e86:	66 90                	xchg   ax,ax
c0022e88:	31 c9                	xor    ecx,ecx
c0022e8a:	e9 0d ff ff ff       	jmp    c0022d9c <__divdi3+0x58>
c0022e8f:	90                   	nop

c0022e90 <__moddi3>:
c0022e90:	55                   	push   ebp
c0022e91:	57                   	push   edi
c0022e92:	56                   	push   esi
c0022e93:	53                   	push   ebx
c0022e94:	83 ec 2c             	sub    esp,0x2c
c0022e97:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e9b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022e9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022ea3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022ea7:	85 db                	test   ebx,ebx
c0022ea9:	0f 88 85 00 00 00    	js     c0022f34 <__moddi3+0xa4>
c0022eaf:	89 de                	mov    esi,ebx
c0022eb1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022eb9:	89 d7                	mov    edi,edx
c0022ebb:	85 d2                	test   edx,edx
c0022ebd:	79 09                	jns    c0022ec8 <__moddi3+0x38>
c0022ebf:	f7 d8                	neg    eax
c0022ec1:	83 d2 00             	adc    edx,0x0
c0022ec4:	f7 da                	neg    edx
c0022ec6:	89 d7                	mov    edi,edx
c0022ec8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ecc:	89 cd                	mov    ebp,ecx
c0022ece:	85 ff                	test   edi,edi
c0022ed0:	75 52                	jne    c0022f24 <__moddi3+0x94>
c0022ed2:	89 c3                	mov    ebx,eax
c0022ed4:	39 f0                	cmp    eax,esi
c0022ed6:	76 24                	jbe    c0022efc <__moddi3+0x6c>
c0022ed8:	89 c8                	mov    eax,ecx
c0022eda:	89 f2                	mov    edx,esi
c0022edc:	f7 f3                	div    ebx
c0022ede:	89 d6                	mov    esi,edx
c0022ee0:	89 f0                	mov    eax,esi
c0022ee2:	31 d2                	xor    edx,edx
c0022ee4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ee8:	85 c9                	test   ecx,ecx
c0022eea:	74 07                	je     c0022ef3 <__moddi3+0x63>
c0022eec:	f7 d8                	neg    eax
c0022eee:	83 d2 00             	adc    edx,0x0
c0022ef1:	f7 da                	neg    edx
c0022ef3:	83 c4 2c             	add    esp,0x2c
c0022ef6:	5b                   	pop    ebx
c0022ef7:	5e                   	pop    esi
c0022ef8:	5f                   	pop    edi
c0022ef9:	5d                   	pop    ebp
c0022efa:	c3                   	ret    
c0022efb:	90                   	nop
c0022efc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022f00:	85 db                	test   ebx,ebx
c0022f02:	75 0d                	jne    c0022f11 <__moddi3+0x81>
c0022f04:	b8 01 00 00 00       	mov    eax,0x1
c0022f09:	31 d2                	xor    edx,edx
c0022f0b:	f7 f7                	div    edi
c0022f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f11:	89 f0                	mov    eax,esi
c0022f13:	31 d2                	xor    edx,edx
c0022f15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f19:	f7 f7                	div    edi
c0022f1b:	89 e8                	mov    eax,ebp
c0022f1d:	f7 f7                	div    edi
c0022f1f:	89 d6                	mov    esi,edx
c0022f21:	eb bd                	jmp    c0022ee0 <__moddi3+0x50>
c0022f23:	90                   	nop
c0022f24:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022f28:	39 f7                	cmp    edi,esi
c0022f2a:	76 20                	jbe    c0022f4c <__moddi3+0xbc>
c0022f2c:	89 c8                	mov    eax,ecx
c0022f2e:	89 f2                	mov    edx,esi
c0022f30:	eb b2                	jmp    c0022ee4 <__moddi3+0x54>
c0022f32:	66 90                	xchg   ax,ax
c0022f34:	f7 d9                	neg    ecx
c0022f36:	83 d3 00             	adc    ebx,0x0
c0022f39:	f7 db                	neg    ebx
c0022f3b:	89 de                	mov    esi,ebx
c0022f3d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022f45:	e9 6f ff ff ff       	jmp    c0022eb9 <__moddi3+0x29>
c0022f4a:	66 90                	xchg   ax,ax
c0022f4c:	0f bd c7             	bsr    eax,edi
c0022f4f:	83 f0 1f             	xor    eax,0x1f
c0022f52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f56:	75 24                	jne    c0022f7c <__moddi3+0xec>
c0022f58:	39 f7                	cmp    edi,esi
c0022f5a:	72 06                	jb     c0022f62 <__moddi3+0xd2>
c0022f5c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022f60:	77 0c                	ja     c0022f6e <__moddi3+0xde>
c0022f62:	89 e9                	mov    ecx,ebp
c0022f64:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022f68:	19 fe                	sbb    esi,edi
c0022f6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f72:	89 f2                	mov    edx,esi
c0022f74:	e9 6b ff ff ff       	jmp    c0022ee4 <__moddi3+0x54>
c0022f79:	8d 76 00             	lea    esi,[esi+0x0]
c0022f7c:	b8 20 00 00 00       	mov    eax,0x20
c0022f81:	89 c2                	mov    edx,eax
c0022f83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f87:	29 da                	sub    edx,ebx
c0022f89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022f8d:	88 d9                	mov    cl,bl
c0022f8f:	d3 e7                	shl    edi,cl
c0022f91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f95:	88 d1                	mov    cl,dl
c0022f97:	d3 e8                	shr    eax,cl
c0022f99:	09 c7                	or     edi,eax
c0022f9b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022f9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022fa3:	89 d8                	mov    eax,ebx
c0022fa5:	88 d9                	mov    cl,bl
c0022fa7:	d3 e7                	shl    edi,cl
c0022fa9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022fad:	89 f3                	mov    ebx,esi
c0022faf:	88 d1                	mov    cl,dl
c0022fb1:	d3 eb                	shr    ebx,cl
c0022fb3:	89 c7                	mov    edi,eax
c0022fb5:	88 c1                	mov    cl,al
c0022fb7:	d3 e6                	shl    esi,cl
c0022fb9:	89 e8                	mov    eax,ebp
c0022fbb:	88 d1                	mov    cl,dl
c0022fbd:	d3 e8                	shr    eax,cl
c0022fbf:	09 f0                	or     eax,esi
c0022fc1:	89 f9                	mov    ecx,edi
c0022fc3:	d3 e5                	shl    ebp,cl
c0022fc5:	89 da                	mov    edx,ebx
c0022fc7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022fcb:	89 d3                	mov    ebx,edx
c0022fcd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022fd1:	89 c6                	mov    esi,eax
c0022fd3:	89 d1                	mov    ecx,edx
c0022fd5:	39 d3                	cmp    ebx,edx
c0022fd7:	72 27                	jb     c0023000 <__moddi3+0x170>
c0022fd9:	74 21                	je     c0022ffc <__moddi3+0x16c>
c0022fdb:	29 f5                	sub    ebp,esi
c0022fdd:	19 cb                	sbb    ebx,ecx
c0022fdf:	89 de                	mov    esi,ebx
c0022fe1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022fe5:	d3 e6                	shl    esi,cl
c0022fe7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022feb:	89 f9                	mov    ecx,edi
c0022fed:	d3 ed                	shr    ebp,cl
c0022fef:	09 ee                	or     esi,ebp
c0022ff1:	89 f0                	mov    eax,esi
c0022ff3:	d3 eb                	shr    ebx,cl
c0022ff5:	89 da                	mov    edx,ebx
c0022ff7:	e9 e8 fe ff ff       	jmp    c0022ee4 <__moddi3+0x54>
c0022ffc:	39 c5                	cmp    ebp,eax
c0022ffe:	73 db                	jae    c0022fdb <__moddi3+0x14b>
c0023000:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023004:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023008:	89 d1                	mov    ecx,edx
c002300a:	89 c6                	mov    esi,eax
c002300c:	eb cd                	jmp    c0022fdb <__moddi3+0x14b>
c002300e:	66 90                	xchg   ax,ax

c0023010 <__udivdi3>:
c0023010:	55                   	push   ebp
c0023011:	57                   	push   edi
c0023012:	56                   	push   esi
c0023013:	53                   	push   ebx
c0023014:	83 ec 1c             	sub    esp,0x1c
c0023017:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002301b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002301f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023023:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023027:	85 d2                	test   edx,edx
c0023029:	75 41                	jne    c002306c <__udivdi3+0x5c>
c002302b:	39 f7                	cmp    edi,esi
c002302d:	76 15                	jbe    c0023044 <__udivdi3+0x34>
c002302f:	89 e8                	mov    eax,ebp
c0023031:	89 f2                	mov    edx,esi
c0023033:	f7 f7                	div    edi
c0023035:	31 db                	xor    ebx,ebx
c0023037:	89 da                	mov    edx,ebx
c0023039:	83 c4 1c             	add    esp,0x1c
c002303c:	5b                   	pop    ebx
c002303d:	5e                   	pop    esi
c002303e:	5f                   	pop    edi
c002303f:	5d                   	pop    ebp
c0023040:	c3                   	ret    
c0023041:	8d 76 00             	lea    esi,[esi+0x0]
c0023044:	89 f9                	mov    ecx,edi
c0023046:	85 ff                	test   edi,edi
c0023048:	75 0b                	jne    c0023055 <__udivdi3+0x45>
c002304a:	b8 01 00 00 00       	mov    eax,0x1
c002304f:	31 d2                	xor    edx,edx
c0023051:	f7 f7                	div    edi
c0023053:	89 c1                	mov    ecx,eax
c0023055:	31 d2                	xor    edx,edx
c0023057:	89 f0                	mov    eax,esi
c0023059:	f7 f1                	div    ecx
c002305b:	89 c3                	mov    ebx,eax
c002305d:	89 e8                	mov    eax,ebp
c002305f:	f7 f1                	div    ecx
c0023061:	89 da                	mov    edx,ebx
c0023063:	83 c4 1c             	add    esp,0x1c
c0023066:	5b                   	pop    ebx
c0023067:	5e                   	pop    esi
c0023068:	5f                   	pop    edi
c0023069:	5d                   	pop    ebp
c002306a:	c3                   	ret    
c002306b:	90                   	nop
c002306c:	39 f2                	cmp    edx,esi
c002306e:	77 1c                	ja     c002308c <__udivdi3+0x7c>
c0023070:	0f bd da             	bsr    ebx,edx
c0023073:	83 f3 1f             	xor    ebx,0x1f
c0023076:	75 24                	jne    c002309c <__udivdi3+0x8c>
c0023078:	39 f2                	cmp    edx,esi
c002307a:	72 08                	jb     c0023084 <__udivdi3+0x74>
c002307c:	39 ef                	cmp    edi,ebp
c002307e:	0f 87 84 00 00 00    	ja     c0023108 <__udivdi3+0xf8>
c0023084:	b8 01 00 00 00       	mov    eax,0x1
c0023089:	eb ac                	jmp    c0023037 <__udivdi3+0x27>
c002308b:	90                   	nop
c002308c:	31 db                	xor    ebx,ebx
c002308e:	31 c0                	xor    eax,eax
c0023090:	89 da                	mov    edx,ebx
c0023092:	83 c4 1c             	add    esp,0x1c
c0023095:	5b                   	pop    ebx
c0023096:	5e                   	pop    esi
c0023097:	5f                   	pop    edi
c0023098:	5d                   	pop    ebp
c0023099:	c3                   	ret    
c002309a:	66 90                	xchg   ax,ax
c002309c:	b8 20 00 00 00       	mov    eax,0x20
c00230a1:	29 d8                	sub    eax,ebx
c00230a3:	88 d9                	mov    cl,bl
c00230a5:	d3 e2                	shl    edx,cl
c00230a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00230ab:	89 fa                	mov    edx,edi
c00230ad:	88 c1                	mov    cl,al
c00230af:	d3 ea                	shr    edx,cl
c00230b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230b5:	09 d1                	or     ecx,edx
c00230b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00230bb:	88 d9                	mov    cl,bl
c00230bd:	d3 e7                	shl    edi,cl
c00230bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00230c3:	89 f7                	mov    edi,esi
c00230c5:	88 c1                	mov    cl,al
c00230c7:	d3 ef                	shr    edi,cl
c00230c9:	88 d9                	mov    cl,bl
c00230cb:	d3 e6                	shl    esi,cl
c00230cd:	89 ea                	mov    edx,ebp
c00230cf:	88 c1                	mov    cl,al
c00230d1:	d3 ea                	shr    edx,cl
c00230d3:	09 d6                	or     esi,edx
c00230d5:	89 f0                	mov    eax,esi
c00230d7:	89 fa                	mov    edx,edi
c00230d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00230dd:	89 d7                	mov    edi,edx
c00230df:	89 c6                	mov    esi,eax
c00230e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00230e5:	39 d7                	cmp    edi,edx
c00230e7:	72 13                	jb     c00230fc <__udivdi3+0xec>
c00230e9:	74 09                	je     c00230f4 <__udivdi3+0xe4>
c00230eb:	89 f0                	mov    eax,esi
c00230ed:	31 db                	xor    ebx,ebx
c00230ef:	e9 43 ff ff ff       	jmp    c0023037 <__udivdi3+0x27>
c00230f4:	88 d9                	mov    cl,bl
c00230f6:	d3 e5                	shl    ebp,cl
c00230f8:	39 c5                	cmp    ebp,eax
c00230fa:	73 ef                	jae    c00230eb <__udivdi3+0xdb>
c00230fc:	8d 46 ff             	lea    eax,[esi-0x1]
c00230ff:	31 db                	xor    ebx,ebx
c0023101:	e9 31 ff ff ff       	jmp    c0023037 <__udivdi3+0x27>
c0023106:	66 90                	xchg   ax,ax
c0023108:	31 c0                	xor    eax,eax
c002310a:	e9 28 ff ff ff       	jmp    c0023037 <__udivdi3+0x27>
c002310f:	90                   	nop

c0023110 <__umoddi3>:
c0023110:	55                   	push   ebp
c0023111:	57                   	push   edi
c0023112:	56                   	push   esi
c0023113:	53                   	push   ebx
c0023114:	83 ec 1c             	sub    esp,0x1c
c0023117:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002311b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002311f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023123:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023127:	89 da                	mov    edx,ebx
c0023129:	85 c0                	test   eax,eax
c002312b:	75 37                	jne    c0023164 <__umoddi3+0x54>
c002312d:	39 df                	cmp    edi,ebx
c002312f:	76 13                	jbe    c0023144 <__umoddi3+0x34>
c0023131:	89 f0                	mov    eax,esi
c0023133:	f7 f7                	div    edi
c0023135:	89 d0                	mov    eax,edx
c0023137:	31 d2                	xor    edx,edx
c0023139:	83 c4 1c             	add    esp,0x1c
c002313c:	5b                   	pop    ebx
c002313d:	5e                   	pop    esi
c002313e:	5f                   	pop    edi
c002313f:	5d                   	pop    ebp
c0023140:	c3                   	ret    
c0023141:	8d 76 00             	lea    esi,[esi+0x0]
c0023144:	89 fd                	mov    ebp,edi
c0023146:	85 ff                	test   edi,edi
c0023148:	75 0b                	jne    c0023155 <__umoddi3+0x45>
c002314a:	b8 01 00 00 00       	mov    eax,0x1
c002314f:	31 d2                	xor    edx,edx
c0023151:	f7 f7                	div    edi
c0023153:	89 c5                	mov    ebp,eax
c0023155:	89 d8                	mov    eax,ebx
c0023157:	31 d2                	xor    edx,edx
c0023159:	f7 f5                	div    ebp
c002315b:	89 f0                	mov    eax,esi
c002315d:	f7 f5                	div    ebp
c002315f:	89 d0                	mov    eax,edx
c0023161:	eb d4                	jmp    c0023137 <__umoddi3+0x27>
c0023163:	90                   	nop
c0023164:	89 f1                	mov    ecx,esi
c0023166:	39 d8                	cmp    eax,ebx
c0023168:	76 0a                	jbe    c0023174 <__umoddi3+0x64>
c002316a:	89 f0                	mov    eax,esi
c002316c:	83 c4 1c             	add    esp,0x1c
c002316f:	5b                   	pop    ebx
c0023170:	5e                   	pop    esi
c0023171:	5f                   	pop    edi
c0023172:	5d                   	pop    ebp
c0023173:	c3                   	ret    
c0023174:	0f bd e8             	bsr    ebp,eax
c0023177:	83 f5 1f             	xor    ebp,0x1f
c002317a:	75 1c                	jne    c0023198 <__umoddi3+0x88>
c002317c:	39 d8                	cmp    eax,ebx
c002317e:	72 04                	jb     c0023184 <__umoddi3+0x74>
c0023180:	39 f7                	cmp    edi,esi
c0023182:	77 08                	ja     c002318c <__umoddi3+0x7c>
c0023184:	89 da                	mov    edx,ebx
c0023186:	29 fe                	sub    esi,edi
c0023188:	19 c2                	sbb    edx,eax
c002318a:	89 f1                	mov    ecx,esi
c002318c:	89 c8                	mov    eax,ecx
c002318e:	83 c4 1c             	add    esp,0x1c
c0023191:	5b                   	pop    ebx
c0023192:	5e                   	pop    esi
c0023193:	5f                   	pop    edi
c0023194:	5d                   	pop    ebp
c0023195:	c3                   	ret    
c0023196:	66 90                	xchg   ax,ax
c0023198:	ba 20 00 00 00       	mov    edx,0x20
c002319d:	29 ea                	sub    edx,ebp
c002319f:	89 e9                	mov    ecx,ebp
c00231a1:	d3 e0                	shl    eax,cl
c00231a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00231a7:	89 f8                	mov    eax,edi
c00231a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00231ad:	88 d1                	mov    cl,dl
c00231af:	d3 e8                	shr    eax,cl
c00231b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00231b5:	09 c1                	or     ecx,eax
c00231b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00231bb:	89 e9                	mov    ecx,ebp
c00231bd:	d3 e7                	shl    edi,cl
c00231bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00231c3:	89 d8                	mov    eax,ebx
c00231c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00231c9:	88 d1                	mov    cl,dl
c00231cb:	d3 e8                	shr    eax,cl
c00231cd:	89 c7                	mov    edi,eax
c00231cf:	89 e9                	mov    ecx,ebp
c00231d1:	d3 e3                	shl    ebx,cl
c00231d3:	89 f0                	mov    eax,esi
c00231d5:	88 d1                	mov    cl,dl
c00231d7:	d3 e8                	shr    eax,cl
c00231d9:	09 d8                	or     eax,ebx
c00231db:	89 e9                	mov    ecx,ebp
c00231dd:	d3 e6                	shl    esi,cl
c00231df:	89 f3                	mov    ebx,esi
c00231e1:	89 fa                	mov    edx,edi
c00231e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00231e7:	89 d1                	mov    ecx,edx
c00231e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00231ed:	89 c6                	mov    esi,eax
c00231ef:	89 d7                	mov    edi,edx
c00231f1:	39 d1                	cmp    ecx,edx
c00231f3:	72 27                	jb     c002321c <__umoddi3+0x10c>
c00231f5:	74 21                	je     c0023218 <__umoddi3+0x108>
c00231f7:	89 ca                	mov    edx,ecx
c00231f9:	29 f3                	sub    ebx,esi
c00231fb:	19 fa                	sbb    edx,edi
c00231fd:	89 d0                	mov    eax,edx
c00231ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023203:	d3 e0                	shl    eax,cl
c0023205:	89 e9                	mov    ecx,ebp
c0023207:	d3 eb                	shr    ebx,cl
c0023209:	09 d8                	or     eax,ebx
c002320b:	d3 ea                	shr    edx,cl
c002320d:	83 c4 1c             	add    esp,0x1c
c0023210:	5b                   	pop    ebx
c0023211:	5e                   	pop    esi
c0023212:	5f                   	pop    edi
c0023213:	5d                   	pop    ebp
c0023214:	c3                   	ret    
c0023215:	8d 76 00             	lea    esi,[esi+0x0]
c0023218:	39 c3                	cmp    ebx,eax
c002321a:	73 db                	jae    c00231f7 <__umoddi3+0xe7>
c002321c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023220:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023224:	89 d7                	mov    edi,edx
c0023226:	89 c6                	mov    esi,eax
c0023228:	eb cd                	jmp    c00231f7 <__umoddi3+0xe7>

Disassembly of section .init:

c002322a <_init>:
c002322a:	55                   	push   ebp
c002322b:	89 e5                	mov    ebp,esp
c002322d:	e8 e6 ce fd ff       	call   c0000118 <frame_dummy>
c0023232:	e8 e5 fa ff ff       	call   c0022d1c <__do_global_ctors_aux>
c0023237:	5d                   	pop    ebp
c0023238:	c3                   	ret    

Disassembly of section .fini:

c0023239 <_fini>:
c0023239:	55                   	push   ebp
c002323a:	89 e5                	mov    ebp,esp
c002323c:	e8 67 ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0023241:	5d                   	pop    ebp
c0023242:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0023244 <Computer::~Computer()>:
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c002324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023250:	89 10                	mov    DWORD PTR [eax],edx
c0023252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023256:	83 ec 0c             	sub    esp,0xc
c0023259:	50                   	push   eax
c002325a:	e8 29 b3 fe ff       	call   c000e588 <Device::~Device()>
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	90                   	nop
c0023263:	83 c4 0c             	add    esp,0xc
c0023266:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0023268 <Computer::~Computer()>:
c0023268:	83 ec 0c             	sub    esp,0xc
c002326b:	83 ec 0c             	sub    esp,0xc
c002326e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023272:	e8 cd ff ff ff       	call   c0023244 <Computer::~Computer()>
c0023277:	83 c4 10             	add    esp,0x10
c002327a:	83 ec 08             	sub    esp,0x8
c002327d:	68 ec 01 00 00       	push   0x1ec
c0023282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023286:	e8 dd 9d fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c002328b:	83 c4 10             	add    esp,0x10
c002328e:	83 c4 0c             	add    esp,0xc
c0023291:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023292 <idleCommon()>:
c0023292:	83 ec 0c             	sub    esp,0xc
c0023295:	fa                   	cli    
c0023296:	ff 05 68 a1 02 c0    	inc    DWORD PTR ds:0xc002a168
c002329c:	e8 e3 5c ff ff       	call   c0018f84 <schedule()>
c00232a1:	a1 68 a1 02 c0       	mov    eax,ds:0xc002a168
c00232a6:	48                   	dec    eax
c00232a7:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c00232ac:	75 01                	jne    c00232af <idleCommon()+0x1d>
c00232ae:	fb                   	sti    
c00232af:	83 c4 0c             	add    esp,0xc
c00232b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00232b4 <LinkedList<UnixFile>::~LinkedList()>:
c00232b4:	90                   	nop
c00232b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00232b6 <LinkedList<UnixFile>::LinkedList()>:
c00232b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00232cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00232eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232f6:	90                   	nop
c00232f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00232f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00232f8:	83 ec 0c             	sub    esp,0xc
c00232fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023300:	75 10                	jne    c0023312 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023302:	83 ec 0c             	sub    esp,0xc
c0023305:	68 90 4d 02 c0       	push   0xc0024d90
c002330a:	e8 1a 1f ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002330f:	83 c4 10             	add    esp,0x10
c0023312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023316:	8b 00                	mov    eax,DWORD PTR [eax]
c0023318:	85 c0                	test   eax,eax
c002331a:	74 34                	je     c0023350 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023323:	85 c0                	test   eax,eax
c0023325:	74 29                	je     c0023350 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002332e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023332:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023339:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002333d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023347:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002334e:	eb 65                	jmp    c00233b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023354:	8b 00                	mov    eax,DWORD PTR [eax]
c0023356:	85 c0                	test   eax,eax
c0023358:	75 4b                	jne    c00233a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002335a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023361:	85 c0                	test   eax,eax
c0023363:	75 40                	jne    c00233a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002336d:	89 10                	mov    DWORD PTR [eax],edx
c002336f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023373:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023377:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002337a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023381:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002338c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002338f:	85 c0                	test   eax,eax
c0023391:	74 22                	je     c00233b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023393:	83 ec 0c             	sub    esp,0xc
c0023396:	68 b2 4d 02 c0       	push   0xc0024db2
c002339b:	e8 89 1e ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00233a0:	83 c4 10             	add    esp,0x10
c00233a3:	eb 10                	jmp    c00233b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00233a5:	83 ec 0c             	sub    esp,0xc
c00233a8:	68 bc 4d 02 c0       	push   0xc0024dbc
c00233ad:	e8 77 1e ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00233b2:	83 c4 10             	add    esp,0x10
c00233b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233bc:	8d 50 01             	lea    edx,[eax+0x1]
c00233bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233c6:	90                   	nop
c00233c7:	83 c4 0c             	add    esp,0xc
c00233ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00233cc <LinkedList<UnixFile>::getFirstElement()>:
c00233cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00233d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00233d4 <LinkedList<UnixFile>::removeFirst()>:
c00233d4:	83 ec 0c             	sub    esp,0xc
c00233d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233db:	8b 00                	mov    eax,DWORD PTR [eax]
c00233dd:	85 c0                	test   eax,eax
c00233df:	75 12                	jne    c00233f3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00233e1:	83 ec 0c             	sub    esp,0xc
c00233e4:	68 c8 4d 02 c0       	push   0xc0024dc8
c00233e9:	e8 3b 1e ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00233ee:	83 c4 10             	add    esp,0x10
c00233f1:	eb 7e                	jmp    c0023471 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00233f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233fd:	85 c0                	test   eax,eax
c00233ff:	74 10                	je     c0023411 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023401:	83 ec 0c             	sub    esp,0xc
c0023404:	68 13 4e 02 c0       	push   0xc0024e13
c0023409:	e8 1b 1e ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002340e:	83 c4 10             	add    esp,0x10
c0023411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023415:	8b 00                	mov    eax,DWORD PTR [eax]
c0023417:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002341a:	85 c0                	test   eax,eax
c002341c:	75 33                	jne    c0023451 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023422:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002342c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002343a:	83 f8 01             	cmp    eax,0x1
c002343d:	74 21                	je     c0023460 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	68 ec 4d 02 c0       	push   0xc0024dec
c0023447:	e8 dd 1d ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002344c:	83 c4 10             	add    esp,0x10
c002344f:	eb 0f                	jmp    c0023460 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023455:	8b 00                	mov    eax,DWORD PTR [eax]
c0023457:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345e:	89 10                	mov    DWORD PTR [eax],edx
c0023460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023464:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023467:	8d 50 ff             	lea    edx,[eax-0x1]
c002346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023471:	83 c4 0c             	add    esp,0xc
c0023474:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023476 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002347a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002347d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002347e <DriverlessDevice::~DriverlessDevice()>:
c002347e:	ba 3c 56 02 c0       	mov    edx,0xc002563c
c0023483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023487:	89 10                	mov    DWORD PTR [eax],edx
c0023489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002348d:	50                   	push   eax
c002348e:	e8 f5 b0 fe ff       	call   c000e588 <Device::~Device()>
c0023493:	83 c4 04             	add    esp,0x4
c0023496:	90                   	nop
c0023497:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023498 <DriverlessDevice::~DriverlessDevice()>:
c0023498:	83 ec 0c             	sub    esp,0xc
c002349b:	83 ec 0c             	sub    esp,0xc
c002349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234a2:	e8 d7 ff ff ff       	call   c002347e <DriverlessDevice::~DriverlessDevice()>
c00234a7:	83 c4 10             	add    esp,0x10
c00234aa:	83 ec 08             	sub    esp,0x8
c00234ad:	68 58 01 00 00       	push   0x158
c00234b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234b6:	e8 ad 9b fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c00234bb:	83 c4 10             	add    esp,0x10
c00234be:	83 c4 0c             	add    esp,0xc
c00234c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00234c2 <LinkedList<Device>::addElement(Device*)>:
c00234c2:	83 ec 0c             	sub    esp,0xc
c00234c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00234ca:	75 10                	jne    c00234dc <LinkedList<Device>::addElement(Device*)+0x1a>
c00234cc:	83 ec 0c             	sub    esp,0xc
c00234cf:	68 90 4d 02 c0       	push   0xc0024d90
c00234d4:	e8 50 1d ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00234d9:	83 c4 10             	add    esp,0x10
c00234dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00234e2:	85 c0                	test   eax,eax
c00234e4:	74 3a                	je     c0023520 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234ed:	85 c0                	test   eax,eax
c00234ef:	74 2f                	je     c0023520 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002350a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002350d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023514:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002351e:	eb 68                	jmp    c0023588 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023524:	8b 00                	mov    eax,DWORD PTR [eax]
c0023526:	85 c0                	test   eax,eax
c0023528:	75 4e                	jne    c0023578 <LinkedList<Device>::addElement(Device*)+0xb6>
c002352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023531:	85 c0                	test   eax,eax
c0023533:	75 43                	jne    c0023578 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023539:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002353d:	89 10                	mov    DWORD PTR [eax],edx
c002353f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023543:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023547:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002354a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023551:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002355b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023562:	85 c0                	test   eax,eax
c0023564:	74 22                	je     c0023588 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023566:	83 ec 0c             	sub    esp,0xc
c0023569:	68 b2 4d 02 c0       	push   0xc0024db2
c002356e:	e8 b6 1c ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023573:	83 c4 10             	add    esp,0x10
c0023576:	eb 10                	jmp    c0023588 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	68 bc 4d 02 c0       	push   0xc0024dbc
c0023580:	e8 a4 1c ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023585:	83 c4 10             	add    esp,0x10
c0023588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002358f:	8d 50 01             	lea    edx,[eax+0x1]
c0023592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023596:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023599:	90                   	nop
c002359a:	83 c4 0c             	add    esp,0xc
c002359d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002359e <LinkedList<Device>::LinkedList()>:
c002359e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00235be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00235de:	90                   	nop
c00235df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00235e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00235e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00235e6:	85 c0                	test   eax,eax
c00235e8:	75 0e                	jne    c00235f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235f1:	85 c0                	test   eax,eax
c00235f3:	75 03                	jne    c00235f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235f5:	b0 01                	mov    al,0x1
c00235f7:	c3                   	ret    
c00235f8:	b0 00                	mov    al,0x0
c00235fa:	90                   	nop
c00235fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00235fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00235fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023600:	8b 00                	mov    eax,DWORD PTR [eax]
c0023602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023604 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023604:	83 ec 0c             	sub    esp,0xc
c0023607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002360b:	8b 00                	mov    eax,DWORD PTR [eax]
c002360d:	85 c0                	test   eax,eax
c002360f:	75 17                	jne    c0023628 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023611:	83 ec 0c             	sub    esp,0xc
c0023614:	68 c8 4d 02 c0       	push   0xc0024dc8
c0023619:	e8 0b 1c ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002361e:	83 c4 10             	add    esp,0x10
c0023621:	e9 92 00 00 00       	jmp    c00236b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0023626:	66 90                	xchg   ax,ax
c0023628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002362c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002362f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023632:	85 c0                	test   eax,eax
c0023634:	0f 95 c0             	setne  al
c0023637:	84 c0                	test   al,al
c0023639:	74 11                	je     c002364c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002363b:	83 ec 0c             	sub    esp,0xc
c002363e:	68 13 4e 02 c0       	push   0xc0024e13
c0023643:	e8 e1 1b ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023648:	83 c4 10             	add    esp,0x10
c002364b:	90                   	nop
c002364c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023650:	8b 00                	mov    eax,DWORD PTR [eax]
c0023652:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023655:	85 c0                	test   eax,eax
c0023657:	0f 94 c0             	sete   al
c002365a:	84 c0                	test   al,al
c002365c:	74 36                	je     c0023694 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002365e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023662:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002366c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023677:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002367a:	83 f8 01             	cmp    eax,0x1
c002367d:	74 25                	je     c00236a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002367f:	83 ec 0c             	sub    esp,0xc
c0023682:	68 ec 4d 02 c0       	push   0xc0024dec
c0023687:	e8 9d 1b ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002368c:	83 c4 10             	add    esp,0x10
c002368f:	eb 13                	jmp    c00236a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023691:	8d 76 00             	lea    esi,[esi+0x0]
c0023694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023698:	8b 00                	mov    eax,DWORD PTR [eax]
c002369a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002369d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a1:	89 10                	mov    DWORD PTR [eax],edx
c00236a3:	90                   	nop
c00236a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236ab:	8d 50 ff             	lea    edx,[eax-0x1]
c00236ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00236b5:	8d 76 00             	lea    esi,[esi+0x0]
c00236b8:	83 c4 0c             	add    esp,0xc
c00236bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00236bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00236bc:	83 ec 0c             	sub    esp,0xc
c00236bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00236c4:	75 12                	jne    c00236d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00236c6:	83 ec 0c             	sub    esp,0xc
c00236c9:	68 90 4d 02 c0       	push   0xc0024d90
c00236ce:	e8 56 1b ff ff       	call   c0015229 <Krnl::panic(char const*)>
c00236d3:	83 c4 10             	add    esp,0x10
c00236d6:	66 90                	xchg   ax,ax
c00236d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00236de:	85 c0                	test   eax,eax
c00236e0:	74 36                	je     c0023718 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236e9:	85 c0                	test   eax,eax
c00236eb:	74 2b                	je     c0023718 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00236fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023703:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002370a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002370d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023714:	eb 6a                	jmp    c0023780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023716:	66 90                	xchg   ax,ax
c0023718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002371c:	8b 00                	mov    eax,DWORD PTR [eax]
c002371e:	85 c0                	test   eax,eax
c0023720:	75 4e                	jne    c0023770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023726:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023729:	85 c0                	test   eax,eax
c002372b:	75 43                	jne    c0023770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002372d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023735:	89 10                	mov    DWORD PTR [eax],edx
c0023737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002373b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002373f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023749:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023754:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023757:	85 c0                	test   eax,eax
c0023759:	74 25                	je     c0023780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002375b:	83 ec 0c             	sub    esp,0xc
c002375e:	68 b2 4d 02 c0       	push   0xc0024db2
c0023763:	e8 c1 1a ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023768:	83 c4 10             	add    esp,0x10
c002376b:	eb 13                	jmp    c0023780 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002376d:	8d 76 00             	lea    esi,[esi+0x0]
c0023770:	83 ec 0c             	sub    esp,0xc
c0023773:	68 bc 4d 02 c0       	push   0xc0024dbc
c0023778:	e8 ac 1a ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002377d:	83 c4 10             	add    esp,0x10
c0023780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023787:	8d 50 01             	lea    edx,[eax+0x1]
c002378a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002378e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023791:	90                   	nop
c0023792:	83 c4 0c             	add    esp,0xc
c0023795:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023798 <ACPI::~ACPI()>:
c0023798:	83 ec 0c             	sub    esp,0xc
c002379b:	ba 64 61 02 c0       	mov    edx,0xc0026164
c00237a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a4:	89 10                	mov    DWORD PTR [eax],edx
c00237a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237aa:	83 ec 0c             	sub    esp,0xc
c00237ad:	50                   	push   eax
c00237ae:	e8 d5 ad fe ff       	call   c000e588 <Device::~Device()>
c00237b3:	83 c4 10             	add    esp,0x10
c00237b6:	90                   	nop
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00237bc <ACPI::~ACPI()>:
c00237bc:	83 ec 0c             	sub    esp,0xc
c00237bf:	83 ec 0c             	sub    esp,0xc
c00237c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237c6:	e8 cd ff ff ff       	call   c0023798 <ACPI::~ACPI()>
c00237cb:	83 c4 10             	add    esp,0x10
c00237ce:	83 ec 08             	sub    esp,0x8
c00237d1:	68 64 12 00 00       	push   0x1264
c00237d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237da:	e8 89 98 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c00237df:	83 c4 10             	add    esp,0x10
c00237e2:	83 c4 0c             	add    esp,0xc
c00237e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00237e8 <LinkedList<Device>::~LinkedList()>:
c00237e8:	90                   	nop
c00237e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00237ec <LinkedList<Device>::isEmpty()>:
c00237ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00237f2:	85 c0                	test   eax,eax
c00237f4:	75 0e                	jne    c0023804 <LinkedList<Device>::isEmpty()+0x18>
c00237f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237fd:	85 c0                	test   eax,eax
c00237ff:	75 03                	jne    c0023804 <LinkedList<Device>::isEmpty()+0x18>
c0023801:	b0 01                	mov    al,0x1
c0023803:	c3                   	ret    
c0023804:	b0 00                	mov    al,0x0
c0023806:	90                   	nop
c0023807:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023808 <LinkedList<Device>::getFirstElement()>:
c0023808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002380c:	8b 00                	mov    eax,DWORD PTR [eax]
c002380e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023810 <LinkedList<Device>::removeFirst()>:
c0023810:	83 ec 0c             	sub    esp,0xc
c0023813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023817:	8b 00                	mov    eax,DWORD PTR [eax]
c0023819:	85 c0                	test   eax,eax
c002381b:	75 17                	jne    c0023834 <LinkedList<Device>::removeFirst()+0x24>
c002381d:	83 ec 0c             	sub    esp,0xc
c0023820:	68 c8 4d 02 c0       	push   0xc0024dc8
c0023825:	e8 ff 19 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c002382a:	83 c4 10             	add    esp,0x10
c002382d:	e9 92 00 00 00       	jmp    c00238c4 <LinkedList<Device>::removeFirst()+0xb4>
c0023832:	66 90                	xchg   ax,ax
c0023834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002383b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023841:	85 c0                	test   eax,eax
c0023843:	74 13                	je     c0023858 <LinkedList<Device>::removeFirst()+0x48>
c0023845:	83 ec 0c             	sub    esp,0xc
c0023848:	68 13 4e 02 c0       	push   0xc0024e13
c002384d:	e8 d7 19 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023852:	83 c4 10             	add    esp,0x10
c0023855:	8d 76 00             	lea    esi,[esi+0x0]
c0023858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002385c:	8b 00                	mov    eax,DWORD PTR [eax]
c002385e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023864:	85 c0                	test   eax,eax
c0023866:	75 34                	jne    c002389c <LinkedList<Device>::removeFirst()+0x8c>
c0023868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023876:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002387d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023881:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023884:	83 f8 01             	cmp    eax,0x1
c0023887:	74 27                	je     c00238b0 <LinkedList<Device>::removeFirst()+0xa0>
c0023889:	83 ec 0c             	sub    esp,0xc
c002388c:	68 ec 4d 02 c0       	push   0xc0024dec
c0023891:	e8 93 19 ff ff       	call   c0015229 <Krnl::panic(char const*)>
c0023896:	83 c4 10             	add    esp,0x10
c0023899:	eb 15                	jmp    c00238b0 <LinkedList<Device>::removeFirst()+0xa0>
c002389b:	90                   	nop
c002389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00238a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00238a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ac:	89 10                	mov    DWORD PTR [eax],edx
c00238ae:	66 90                	xchg   ax,ax
c00238b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00238b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00238ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00238c1:	8d 76 00             	lea    esi,[esi+0x0]
c00238c4:	83 c4 0c             	add    esp,0xc
c00238c7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00238c8 <CPU::~CPU()>:
c00238c8:	83 ec 0c             	sub    esp,0xc
c00238cb:	ba f4 66 02 c0       	mov    edx,0xc00266f4
c00238d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238d4:	89 10                	mov    DWORD PTR [eax],edx
c00238d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238da:	83 ec 0c             	sub    esp,0xc
c00238dd:	50                   	push   eax
c00238de:	e8 a5 ac fe ff       	call   c000e588 <Device::~Device()>
c00238e3:	83 c4 10             	add    esp,0x10
c00238e6:	90                   	nop
c00238e7:	83 c4 0c             	add    esp,0xc
c00238ea:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00238ec <CPU::~CPU()>:
c00238ec:	83 ec 0c             	sub    esp,0xc
c00238ef:	83 ec 0c             	sub    esp,0xc
c00238f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238f6:	e8 cd ff ff ff       	call   c00238c8 <CPU::~CPU()>
c00238fb:	83 c4 10             	add    esp,0x10
c00238fe:	83 ec 08             	sub    esp,0x8
c0023901:	68 98 11 00 00       	push   0x1198
c0023906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002390a:	e8 59 97 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c002390f:	83 c4 10             	add    esp,0x10
c0023912:	83 c4 0c             	add    esp,0xc
c0023915:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023918 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023918:	90                   	nop
c0023919:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002391c <ThreadControlBlock::ThreadControlBlock()>:
c002391c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023920:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023936:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002393d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023941:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002394c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023957:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002395b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002395f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023963:	90                   	nop
c0023964:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002396c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002397d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023981:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002398c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023996:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002399d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00239a8:	90                   	nop
c00239a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00239ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00239ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00239b3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00239b4 <Vm::_FPUState::_FPUState()>:
c00239b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239b8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00239bf:	90                   	nop
c00239c0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00239c2 <PCI::~PCI()>:
c00239c2:	83 ec 0c             	sub    esp,0xc
c00239c5:	ba 10 75 02 c0       	mov    edx,0xc0027510
c00239ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ce:	89 10                	mov    DWORD PTR [eax],edx
c00239d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239d4:	83 ec 0c             	sub    esp,0xc
c00239d7:	50                   	push   eax
c00239d8:	e8 7b a5 fe ff       	call   c000df58 <Bus::~Bus()>
c00239dd:	83 c4 10             	add    esp,0x10
c00239e0:	90                   	nop
c00239e1:	83 c4 0c             	add    esp,0xc
c00239e4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00239e6 <PCI::~PCI()>:
c00239e6:	83 ec 0c             	sub    esp,0xc
c00239e9:	83 ec 0c             	sub    esp,0xc
c00239ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239f0:	e8 cd ff ff ff       	call   c00239c2 <PCI::~PCI()>
c00239f5:	83 c4 10             	add    esp,0x10
c00239f8:	83 ec 08             	sub    esp,0x8
c00239fb:	68 5c 01 00 00       	push   0x15c
c0023a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a04:	e8 5f 96 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023a09:	83 c4 10             	add    esp,0x10
c0023a0c:	83 c4 0c             	add    esp,0xc
c0023a0f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023a10 <IDE::~IDE()>:
c0023a10:	83 ec 0c             	sub    esp,0xc
c0023a13:	ba e0 75 02 c0       	mov    edx,0xc00275e0
c0023a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a1c:	89 10                	mov    DWORD PTR [eax],edx
c0023a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a22:	83 ec 0c             	sub    esp,0xc
c0023a25:	50                   	push   eax
c0023a26:	e8 75 b0 fe ff       	call   c000eaa0 <HardDiskController::~HardDiskController()>
c0023a2b:	83 c4 10             	add    esp,0x10
c0023a2e:	90                   	nop
c0023a2f:	83 c4 0c             	add    esp,0xc
c0023a32:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023a34 <IDE::~IDE()>:
c0023a34:	83 ec 0c             	sub    esp,0xc
c0023a37:	83 ec 0c             	sub    esp,0xc
c0023a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a3e:	e8 cd ff ff ff       	call   c0023a10 <IDE::~IDE()>
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	83 ec 08             	sub    esp,0x8
c0023a49:	68 70 02 00 00       	push   0x270
c0023a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a52:	e8 11 96 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023a57:	83 c4 10             	add    esp,0x10
c0023a5a:	83 c4 0c             	add    esp,0xc
c0023a5d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023a5e <SATABus::~SATABus()>:
c0023a5e:	83 ec 0c             	sub    esp,0xc
c0023a61:	ba ac 76 02 c0       	mov    edx,0xc00276ac
c0023a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6a:	89 10                	mov    DWORD PTR [eax],edx
c0023a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a70:	83 ec 0c             	sub    esp,0xc
c0023a73:	50                   	push   eax
c0023a74:	e8 27 b0 fe ff       	call   c000eaa0 <HardDiskController::~HardDiskController()>
c0023a79:	83 c4 10             	add    esp,0x10
c0023a7c:	90                   	nop
c0023a7d:	83 c4 0c             	add    esp,0xc
c0023a80:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023a82 <SATABus::~SATABus()>:
c0023a82:	83 ec 0c             	sub    esp,0xc
c0023a85:	83 ec 0c             	sub    esp,0xc
c0023a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a8c:	e8 cd ff ff ff       	call   c0023a5e <SATABus::~SATABus()>
c0023a91:	83 c4 10             	add    esp,0x10
c0023a94:	83 ec 08             	sub    esp,0x8
c0023a97:	68 64 01 00 00       	push   0x164
c0023a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aa0:	e8 c3 95 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023aa5:	83 c4 10             	add    esp,0x10
c0023aa8:	83 c4 0c             	add    esp,0xc
c0023aab:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023aac <ATA::~ATA()>:
c0023aac:	83 ec 0c             	sub    esp,0xc
c0023aaf:	ba 24 77 02 c0       	mov    edx,0xc0027724
c0023ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ab8:	89 10                	mov    DWORD PTR [eax],edx
c0023aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023abe:	83 ec 0c             	sub    esp,0xc
c0023ac1:	50                   	push   eax
c0023ac2:	e8 bb b0 fe ff       	call   c000eb82 <PhysicalDisk::~PhysicalDisk()>
c0023ac7:	83 c4 10             	add    esp,0x10
c0023aca:	90                   	nop
c0023acb:	83 c4 0c             	add    esp,0xc
c0023ace:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023ad0 <ATA::~ATA()>:
c0023ad0:	83 ec 0c             	sub    esp,0xc
c0023ad3:	83 ec 0c             	sub    esp,0xc
c0023ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ada:	e8 cd ff ff ff       	call   c0023aac <ATA::~ATA()>
c0023adf:	83 c4 10             	add    esp,0x10
c0023ae2:	83 ec 08             	sub    esp,0x8
c0023ae5:	68 7c 01 00 00       	push   0x17c
c0023aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aee:	e8 75 95 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023af3:	83 c4 10             	add    esp,0x10
c0023af6:	83 c4 0c             	add    esp,0xc
c0023af9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023afa <ATAPI::~ATAPI()>:
c0023afa:	83 ec 0c             	sub    esp,0xc
c0023afd:	ba 9c 77 02 c0       	mov    edx,0xc002779c
c0023b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b06:	89 10                	mov    DWORD PTR [eax],edx
c0023b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0c:	83 ec 0c             	sub    esp,0xc
c0023b0f:	50                   	push   eax
c0023b10:	e8 6d b0 fe ff       	call   c000eb82 <PhysicalDisk::~PhysicalDisk()>
c0023b15:	83 c4 10             	add    esp,0x10
c0023b18:	90                   	nop
c0023b19:	83 c4 0c             	add    esp,0xc
c0023b1c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023b1e <ATAPI::~ATAPI()>:
c0023b1e:	83 ec 0c             	sub    esp,0xc
c0023b21:	83 ec 0c             	sub    esp,0xc
c0023b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b28:	e8 cd ff ff ff       	call   c0023afa <ATAPI::~ATAPI()>
c0023b2d:	83 c4 10             	add    esp,0x10
c0023b30:	83 ec 08             	sub    esp,0x8
c0023b33:	68 84 01 00 00       	push   0x184
c0023b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b3c:	e8 27 95 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023b41:	83 c4 10             	add    esp,0x10
c0023b44:	83 c4 0c             	add    esp,0xc
c0023b47:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023b48 <SATA::~SATA()>:
c0023b48:	83 ec 0c             	sub    esp,0xc
c0023b4b:	ba d8 79 02 c0       	mov    edx,0xc00279d8
c0023b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b54:	89 10                	mov    DWORD PTR [eax],edx
c0023b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5a:	83 ec 0c             	sub    esp,0xc
c0023b5d:	50                   	push   eax
c0023b5e:	e8 1f b0 fe ff       	call   c000eb82 <PhysicalDisk::~PhysicalDisk()>
c0023b63:	83 c4 10             	add    esp,0x10
c0023b66:	90                   	nop
c0023b67:	83 c4 0c             	add    esp,0xc
c0023b6a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023b6c <SATA::~SATA()>:
c0023b6c:	83 ec 0c             	sub    esp,0xc
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b76:	e8 cd ff ff ff       	call   c0023b48 <SATA::~SATA()>
c0023b7b:	83 c4 10             	add    esp,0x10
c0023b7e:	83 ec 08             	sub    esp,0x8
c0023b81:	68 7c 01 00 00       	push   0x17c
c0023b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b8a:	e8 d9 94 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023b8f:	83 c4 10             	add    esp,0x10
c0023b92:	83 c4 0c             	add    esp,0xc
c0023b95:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023b96 <SATAPI::~SATAPI()>:
c0023b96:	83 ec 0c             	sub    esp,0xc
c0023b99:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0023b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba2:	89 10                	mov    DWORD PTR [eax],edx
c0023ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba8:	83 ec 0c             	sub    esp,0xc
c0023bab:	50                   	push   eax
c0023bac:	e8 d1 af fe ff       	call   c000eb82 <PhysicalDisk::~PhysicalDisk()>
c0023bb1:	83 c4 10             	add    esp,0x10
c0023bb4:	90                   	nop
c0023bb5:	83 c4 0c             	add    esp,0xc
c0023bb8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023bba <SATAPI::~SATAPI()>:
c0023bba:	83 ec 0c             	sub    esp,0xc
c0023bbd:	83 ec 0c             	sub    esp,0xc
c0023bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bc4:	e8 cd ff ff ff       	call   c0023b96 <SATAPI::~SATAPI()>
c0023bc9:	83 c4 10             	add    esp,0x10
c0023bcc:	83 ec 08             	sub    esp,0x8
c0023bcf:	68 84 01 00 00       	push   0x184
c0023bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bd8:	e8 8b 94 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023bdd:	83 c4 10             	add    esp,0x10
c0023be0:	83 c4 0c             	add    esp,0xc
c0023be3:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023be4 <AVX::~AVX()>:
c0023be4:	83 ec 0c             	sub    esp,0xc
c0023be7:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf0:	89 10                	mov    DWORD PTR [eax],edx
c0023bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf6:	83 ec 0c             	sub    esp,0xc
c0023bf9:	50                   	push   eax
c0023bfa:	e8 09 b0 fe ff       	call   c000ec08 <FPU::~FPU()>
c0023bff:	83 c4 10             	add    esp,0x10
c0023c02:	90                   	nop
c0023c03:	83 c4 0c             	add    esp,0xc
c0023c06:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023c08 <AVX::~AVX()>:
c0023c08:	83 ec 0c             	sub    esp,0xc
c0023c0b:	83 ec 0c             	sub    esp,0xc
c0023c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c12:	e8 cd ff ff ff       	call   c0023be4 <AVX::~AVX()>
c0023c17:	83 c4 10             	add    esp,0x10
c0023c1a:	83 ec 08             	sub    esp,0x8
c0023c1d:	68 58 01 00 00       	push   0x158
c0023c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c26:	e8 3d 94 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023c2b:	83 c4 10             	add    esp,0x10
c0023c2e:	83 c4 0c             	add    esp,0xc
c0023c31:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023c34 <MMX::~MMX()>:
c0023c34:	83 ec 0c             	sub    esp,0xc
c0023c37:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c40:	89 10                	mov    DWORD PTR [eax],edx
c0023c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c46:	83 ec 0c             	sub    esp,0xc
c0023c49:	50                   	push   eax
c0023c4a:	e8 b9 af fe ff       	call   c000ec08 <FPU::~FPU()>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	90                   	nop
c0023c53:	83 c4 0c             	add    esp,0xc
c0023c56:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023c58 <MMX::~MMX()>:
c0023c58:	83 ec 0c             	sub    esp,0xc
c0023c5b:	83 ec 0c             	sub    esp,0xc
c0023c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c62:	e8 cd ff ff ff       	call   c0023c34 <MMX::~MMX()>
c0023c67:	83 c4 10             	add    esp,0x10
c0023c6a:	83 ec 08             	sub    esp,0x8
c0023c6d:	68 58 01 00 00       	push   0x158
c0023c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c76:	e8 ed 93 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023c7b:	83 c4 10             	add    esp,0x10
c0023c7e:	83 c4 0c             	add    esp,0xc
c0023c81:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023c84 <SSE::~SSE()>:
c0023c84:	83 ec 0c             	sub    esp,0xc
c0023c87:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0023c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c90:	89 10                	mov    DWORD PTR [eax],edx
c0023c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c96:	83 ec 0c             	sub    esp,0xc
c0023c99:	50                   	push   eax
c0023c9a:	e8 69 af fe ff       	call   c000ec08 <FPU::~FPU()>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	90                   	nop
c0023ca3:	83 c4 0c             	add    esp,0xc
c0023ca6:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023ca8 <SSE::~SSE()>:
c0023ca8:	83 ec 0c             	sub    esp,0xc
c0023cab:	83 ec 0c             	sub    esp,0xc
c0023cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cb2:	e8 cd ff ff ff       	call   c0023c84 <SSE::~SSE()>
c0023cb7:	83 c4 10             	add    esp,0x10
c0023cba:	83 ec 08             	sub    esp,0x8
c0023cbd:	68 58 01 00 00       	push   0x158
c0023cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cc6:	e8 9d 93 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023ccb:	83 c4 10             	add    esp,0x10
c0023cce:	83 c4 0c             	add    esp,0xc
c0023cd1:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023cd2 <x87::~x87()>:
c0023cd2:	83 ec 0c             	sub    esp,0xc
c0023cd5:	ba 44 7c 02 c0       	mov    edx,0xc0027c44
c0023cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cde:	89 10                	mov    DWORD PTR [eax],edx
c0023ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce4:	83 ec 0c             	sub    esp,0xc
c0023ce7:	50                   	push   eax
c0023ce8:	e8 1b af fe ff       	call   c000ec08 <FPU::~FPU()>
c0023ced:	83 c4 10             	add    esp,0x10
c0023cf0:	90                   	nop
c0023cf1:	83 c4 0c             	add    esp,0xc
c0023cf4:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023cf6 <x87::~x87()>:
c0023cf6:	83 ec 0c             	sub    esp,0xc
c0023cf9:	83 ec 0c             	sub    esp,0xc
c0023cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d00:	e8 cd ff ff ff       	call   c0023cd2 <x87::~x87()>
c0023d05:	83 c4 10             	add    esp,0x10
c0023d08:	83 ec 08             	sub    esp,0x8
c0023d0b:	68 58 01 00 00       	push   0x158
c0023d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d14:	e8 4f 93 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023d19:	83 c4 10             	add    esp,0x10
c0023d1c:	83 c4 0c             	add    esp,0xc
c0023d1f:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023d20 <IOAPIC::~IOAPIC()>:
c0023d20:	83 ec 0c             	sub    esp,0xc
c0023d23:	ba 9c 7d 02 c0       	mov    edx,0xc0027d9c
c0023d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2c:	89 10                	mov    DWORD PTR [eax],edx
c0023d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d32:	83 ec 0c             	sub    esp,0xc
c0023d35:	50                   	push   eax
c0023d36:	e8 4d a8 fe ff       	call   c000e588 <Device::~Device()>
c0023d3b:	83 c4 10             	add    esp,0x10
c0023d3e:	90                   	nop
c0023d3f:	83 c4 0c             	add    esp,0xc
c0023d42:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023d44 <IOAPIC::~IOAPIC()>:
c0023d44:	83 ec 0c             	sub    esp,0xc
c0023d47:	83 ec 0c             	sub    esp,0xc
c0023d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d4e:	e8 cd ff ff ff       	call   c0023d20 <IOAPIC::~IOAPIC()>
c0023d53:	83 c4 10             	add    esp,0x10
c0023d56:	83 ec 08             	sub    esp,0x8
c0023d59:	68 68 01 00 00       	push   0x168
c0023d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d62:	e8 01 93 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023d67:	83 c4 10             	add    esp,0x10
c0023d6a:	83 c4 0c             	add    esp,0xc
c0023d6d:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023d6e <APIC::~APIC()>:
c0023d6e:	83 ec 0c             	sub    esp,0xc
c0023d71:	ba 54 7d 02 c0       	mov    edx,0xc0027d54
c0023d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7a:	89 10                	mov    DWORD PTR [eax],edx
c0023d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d80:	83 ec 0c             	sub    esp,0xc
c0023d83:	50                   	push   eax
c0023d84:	e8 6b b3 fe ff       	call   c000f0f4 <InterruptController::~InterruptController()>
c0023d89:	83 c4 10             	add    esp,0x10
c0023d8c:	90                   	nop
c0023d8d:	83 c4 0c             	add    esp,0xc
c0023d90:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023d92 <APIC::~APIC()>:
c0023d92:	83 ec 0c             	sub    esp,0xc
c0023d95:	83 ec 0c             	sub    esp,0xc
c0023d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d9c:	e8 cd ff ff ff       	call   c0023d6e <APIC::~APIC()>
c0023da1:	83 c4 10             	add    esp,0x10
c0023da4:	83 ec 08             	sub    esp,0x8
c0023da7:	68 58 21 00 00       	push   0x2158
c0023dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023db0:	e8 b3 92 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023db5:	83 c4 10             	add    esp,0x10
c0023db8:	83 c4 0c             	add    esp,0xc
c0023dbb:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023dbc <PIC::~PIC()>:
c0023dbc:	83 ec 0c             	sub    esp,0xc
c0023dbf:	ba ec 7d 02 c0       	mov    edx,0xc0027dec
c0023dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dc8:	89 10                	mov    DWORD PTR [eax],edx
c0023dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dce:	83 ec 0c             	sub    esp,0xc
c0023dd1:	50                   	push   eax
c0023dd2:	e8 1d b3 fe ff       	call   c000f0f4 <InterruptController::~InterruptController()>
c0023dd7:	83 c4 10             	add    esp,0x10
c0023dda:	90                   	nop
c0023ddb:	83 c4 0c             	add    esp,0xc
c0023dde:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023de0 <PIC::~PIC()>:
c0023de0:	83 ec 0c             	sub    esp,0xc
c0023de3:	83 ec 0c             	sub    esp,0xc
c0023de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dea:	e8 cd ff ff ff       	call   c0023dbc <PIC::~PIC()>
c0023def:	83 c4 10             	add    esp,0x10
c0023df2:	83 ec 08             	sub    esp,0x8
c0023df5:	68 58 21 00 00       	push   0x2158
c0023dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dfe:	e8 65 92 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	83 c4 0c             	add    esp,0xc
c0023e09:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023e0c <APICTimer::~APICTimer()>:
c0023e0c:	83 ec 0c             	sub    esp,0xc
c0023e0f:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c0023e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e18:	89 10                	mov    DWORD PTR [eax],edx
c0023e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1e:	83 ec 0c             	sub    esp,0xc
c0023e21:	50                   	push   eax
c0023e22:	e8 fd d1 fe ff       	call   c0011024 <Timer::~Timer()>
c0023e27:	83 c4 10             	add    esp,0x10
c0023e2a:	90                   	nop
c0023e2b:	83 c4 0c             	add    esp,0xc
c0023e2e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023e30 <APICTimer::~APICTimer()>:
c0023e30:	83 ec 0c             	sub    esp,0xc
c0023e33:	83 ec 0c             	sub    esp,0xc
c0023e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e3a:	e8 cd ff ff ff       	call   c0023e0c <APICTimer::~APICTimer()>
c0023e3f:	83 c4 10             	add    esp,0x10
c0023e42:	83 ec 08             	sub    esp,0x8
c0023e45:	68 60 01 00 00       	push   0x160
c0023e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e4e:	e8 15 92 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023e53:	83 c4 10             	add    esp,0x10
c0023e56:	83 c4 0c             	add    esp,0xc
c0023e59:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023e5c <PIT::~PIT()>:
c0023e5c:	83 ec 0c             	sub    esp,0xc
c0023e5f:	ba 90 7e 02 c0       	mov    edx,0xc0027e90
c0023e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e68:	89 10                	mov    DWORD PTR [eax],edx
c0023e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e6e:	83 ec 0c             	sub    esp,0xc
c0023e71:	50                   	push   eax
c0023e72:	e8 ad d1 fe ff       	call   c0011024 <Timer::~Timer()>
c0023e77:	83 c4 10             	add    esp,0x10
c0023e7a:	90                   	nop
c0023e7b:	83 c4 0c             	add    esp,0xc
c0023e7e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023e80 <PIT::~PIT()>:
c0023e80:	83 ec 0c             	sub    esp,0xc
c0023e83:	83 ec 0c             	sub    esp,0xc
c0023e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e8a:	e8 cd ff ff ff       	call   c0023e5c <PIT::~PIT()>
c0023e8f:	83 c4 10             	add    esp,0x10
c0023e92:	83 ec 08             	sub    esp,0x8
c0023e95:	68 5c 01 00 00       	push   0x15c
c0023e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e9e:	e8 c5 91 fe ff       	call   c000d068 <operator delete(void*, unsigned long)>
c0023ea3:	83 c4 10             	add    esp,0x10
c0023ea6:	83 c4 0c             	add    esp,0xc
c0023ea9:	c3                   	ret    
